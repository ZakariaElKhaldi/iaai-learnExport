{
  "id": "f661048e-a184-44b5-8eff-9d2e5c4e518d",
  "title": "Django QuerySet - Filter",
  "slug": "django-queryset-filter",
  "metadata": {
    "description": "Learn about Django QuerySet - Filter with clear explanations and practical examples.",
    "keywords": [
      "matches",
      "firstname",
      "filter",
      "example",
      "return",
      "emil",
      "records",
      "member",
      "values",
      "field"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "QuerySet Filter"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django QuerySet - Filter",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "QuerySet Filter\nThe\nfilter()\nmethod is used to filter your search, and allows you to return only the rows that matches the \nsearch term.\nAs we learned in the \nExample\nReturn only the records where the firstname is 'Emil':\nmydata = Member.objects.filter(firstname='Emil').values()\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members WHERE firstname = 'Emil';\nAND\nThe\nfilter()\nmethod takes the arguments as \n**kwargs (keyword arguments), so you \ncan filter on more than one field by separating them by a comma.\nExample\nReturn records where lastname is \"Refsnes\" and id is 2:\nmydata = Member.objects.filter(lastname='Refsnes', id=2).values()\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members WHERE lastname = 'Refsnes' AND id = 2;\nOR\nTo return records where firstname is Emil or firstname is Tobias (meaning: \nreturning records that matches either query, not necessarily both) is not as \neasy as the AND example above.\nWe can use multiple\nfilter()\nmethods, \nseparated by a pipe\n|\ncharacter. The results will \nmerge into one model.\nExample\nReturn records where firstname is either \"Emil\" or Tobias\":\nmydata = Member.objects.filter(firstname='Emil').values() | Member.objects.filter(firstname='Tobias').values()\nRun Example \u00bb\nAnother common method is to import and use Q expressions:\nExample\nReturn records where firstname is either \"Emil\" or Tobias\":\nfrom django.http import HttpResponse\nfrom django.template import loader\nfrom .models import Member\nfrom django.db.models import Q\n\ndef testing(request):\n  mydata = Member.objects.filter(Q(firstname='Emil') | Q(firstname='Tobias')).values()\n  template = loader.get_template('template.html')\n  context = {\n    'mymembers': mydata,\n  }\n  return HttpResponse(template.render(context, request))\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members WHERE firstname = 'Emil' OR firstname = 'Tobias';\nField Lookups\nDjango has its own way of specifying SQL statements and WHERE clauses.\nTo make specific where clauses in Django, use \"Field lookups\".\nField lookups are keywords that represents specific SQL keywords.\nExample:\nUse the\n__startswith\nkeyword:\n.filter(firstname__startswith='L');\nIs the same as the SQL statement:\nWHERE firstname LIKE 'L%'\nThe above statement will return records where firstname starts with 'L'.\nField Lookups Syntax\nAll Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.\nIn our\nMember\nmodel, the statement would be written like this:\nExample\nReturn the records where\nfirstname\nstarts with the letter 'L':\nmydata = Member.objects.filter(firstname__startswith='L').values()\nRun Example \u00bb\nField Lookups Reference\nA list of all field look up keywords:\nKeyword\nDescription\ncontains\nContains the phrase\nicontains\nSame as contains, but case-insensitive\ndate\nMatches a date\nday\nMatches a date (day of month, 1-31) (for dates)\nendswith\nEnds with\niendswith\nSame as endswidth, but case-insensitive\nexact\nAn exact match\niexact\nSame as exact, but case-insensitive\nin\nMatches one of the values\nisnull\nMatches NULL values\ngt\nGreater than\ngte\nGreater than, or equal to\nhour\nMatches an hour (for datetimes)\nlt\nLess than\nlte\nLess than, or equal to\nminute\nMatches a minute (for datetimes)\nmonth\nMatches a month (for dates)\nquarter\nMatches a quarter of the year (1-4) (for dates)\nrange\nMatch between\nregex\nMatches a regular expression\niregex\nSame as regex, but case-insensitive\nsecond\nMatches a second (for datetimes)\nstartswith\nStarts with\nistartswith\nSame as startswith, but case-insensitive\ntime\nMatches a time (for datetimes)\nweek\nMatches a week number (1-53) (for dates)\nweek_day\nMatches a day of week (1-7) 1 is sunday\niso_week_day\nMatches a ISO 8601 day of week (1-7) 1 is monday\nyear\nMatches a year (for dates)\niso_year\nMatches an ISO 8601 year (for dates)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "dbe88df8-4463-4582-bb7e-574dd3ca0fec",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ae888576-29ec-456a-bf2e-11df2e5b0b1b",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "56dd2906-e78c-4d7c-a95b-286e27a73fb4",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "used to filter your search",
        "'Emil':\nmydata = Member",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of method is 'used to filter your search'."
    },
    {
      "question": "What is As we learned in the \nExample\nReturn only the records where the firstname?",
      "options": [
        "'Emil':\nmydata = Member",
        "None of the above.",
        "used to filter your search",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of As we learned in the \nExample\nReturn only the records where the firstname is ''Emil':\nmydata = Member'."
    }
  ],
  "summary": "This tutorial covers Django QuerySet - Filter concepts and techniques. You'll learn how to use Django QuerySet - Filter effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django QuerySet - Filter and how to apply it in your projects."
}