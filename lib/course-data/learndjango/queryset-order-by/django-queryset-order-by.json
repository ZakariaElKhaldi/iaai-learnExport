{
  "id": "9bad8d3e-c5c1-4c9b-aa53-652595b14d5b",
  "title": "Django QuerySet - Order By",
  "slug": "django-queryset-order-by",
  "metadata": {
    "description": "Learn about Django QuerySet - Order By with clear explanations and practical examples.",
    "keywords": [
      "order",
      "example",
      "firstname",
      "result",
      "descending",
      "mydata",
      "member",
      "objects",
      "values",
      "statement"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "QuerySet Order By"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django QuerySet - Order By",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Order By\nTo sort QuerySets, Django uses the\norder_by()\nmethod:\nExample\nOrder the result alphabetically by firstname:\nmydata = Member.objects.all().order_by('firstname').values()\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members ORDER BY firstname;\nDescending Order\nBy default, the result is sorted ascending (the lowest value first),\nto change the direction to descending (the highest value first), use the minus sign (NOT),\n-\nin front of the field name:\nExample\nOrder the result firstname descending:\nmydata = Member.objects.all().order_by('-firstname').values()\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members ORDER BY firstname DESC;\nMultiple Order Bys\nTo order by more than one field, separate the fieldnames with a comma in the\norder_by()\nmethod:\nExample\nOrder the result first by lastname ascending, then descending on id:\nmydata = Member.objects.all().order_by('lastname', '-id').values()\nRun Example \u00bb\nIn SQL, the above statement would be written like this:\nSELECT * FROM members ORDER BY lastname ASC, id DESC;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "de5e5665-44fb-4e52-9b6e-8784e2eaa729",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "16fe8aea-1154-4b18-b946-7830bd540fc7",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ccab4124-20a1-4f97-83a2-b170d862fada",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the result?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "sorted ascending (the lowest value first)"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of the result is 'sorted ascending (the lowest value first)'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Django QuerySet - Order By concepts and techniques. You'll learn how to use Django QuerySet - Order By effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django QuerySet - Order By and how to apply it in your projects."
}