{
  "id": "8c7e2ff0-3b23-4767-8d0a-2983ad5a2f5c",
  "title": "Django Introduction",
  "slug": "django-introduction",
  "metadata": {
    "description": "Learn about Django Introduction with clear explanations and practical examples.",
    "keywords": [
      "django",
      "template",
      "data",
      "file",
      "view",
      "database",
      "html",
      "model",
      "models",
      "located"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Django Intro"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django Introduction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is Django?\nDjango is a Python framework that makes it easier to create web sites using Python.\nDjango takes care of the difficult stuff so \nthat you can concentrate on building your web applications.\nDjango emphasizes reusability of components, also referred to as DRY (Don't \nRepeat Yourself), and comes with ready-to-use features like login system, \ndatabase connection and CRUD operations (Create Read Update Delete).\nDjango is especially helpful for database driven websites.\nHow does Django Work?\nDjango follows the MVT design pattern (Model View Template).\nModel - The data you want to present, usually data from a database.\nView - A request handler that returns the relevant template and content - based on the request from the user.\nTemplate - A text file (like an HTML file) containing the layout of the web page, with logic on how to display the data.\nModel\nThe model provides data from the database.\nIn Django, the data is delivered as an Object Relational Mapping (ORM),\nwhich is a technique designed to make it easier to work with databases.\nThe most common way to extract data from a database is SQL. One problem with \nSQL is that you have to have a pretty good understanding of the database structure\nto be able to work with it.\nDjango, with ORM, makes it easier to communicate with the database, without having to write \ncomplex SQL statements.\nThe models are usually located in a file called\nmodels.py\n.\nView\nA view is a function or method that takes http requests as arguments,\nimports the relevant model(s), and finds out what data to send to the template,\nand returns the final result.\nThe views are usually located in a file called\nviews.py\n.\nTemplate\nA template is a file where you describe how the result should be represented.\nTemplates are often .html files, with HTML code describing the layout of a web page,\nbut it can also be in other file formats to present other results, but we will concentrate on .html files.\nDjango uses standard HTML to describe the layout, but uses Django tags to add logic:\n<h1>My Homepage</h1>\n\n<p>My name is {{ firstname }}.</p>\nThe templates of an application is located in a folder named\ntemplates\n.\nURLs\nDjango also provides a way to navigate around the different pages in a website.\nWhen a user requests a URL, Django decides which\nview\nit will send it to.\nThis is done in a file called\nurls.py\n.\nSo, What is Going On?\nWhen you have installed Django and created your first Django web application,\nand the browser requests the URL, this is basically what happens:\nDjango receives the URL, checks the\nurls.py\nfile, and calls the view that matches the URL.\nThe view, located in\nviews.py\n, checks for relevant models.\nThe models are imported from the\nmodels.py\nfile.\nThe view then sends the data to a specified template in the\ntemplate\nfolder.\nThe template contains HTML and Django tags, and with the data it returns \nfinished HTML content back to the browser.\nDjango can do a lot more than this, but this is basically what you will learn in this tutorial, and are the basic steps\nin a simple web application made with Django.\nDjango History\nDjango was invented by Lawrence Journal-World in 2003, to meet the short \ndeadlines in the newspaper and at the same time meeting the demands of \nexperienced web developers.\nInitial release to the public was in July 2005.\nLatest version of Django is 4.0.3 (March 2022).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2f1aca58-1412-46c0-841b-ecf09732df84",
      "title": "C Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "6de9d824-9897-447b-ae9c-3b1fcb61dae6",
      "title": "C Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is Django Introduction\n\nWhat?",
      "options": [
        "Django",
        "None of the above.",
        "a Python framework that makes it easier to create web sites using Python",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Django Introduction\n\nWhat is 'Django'."
    },
    {
      "question": "What is Django?",
      "options": [
        "Django",
        "a Python framework that makes it easier to create web sites using Python",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Django is 'a Python framework that makes it easier to create web sites using Python'."
    }
  ],
  "summary": "This tutorial covers Django Introduction concepts and techniques. You'll learn how to use Django Introduction effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django Introduction and how to apply it in your projects."
}