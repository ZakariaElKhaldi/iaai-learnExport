{
  "id": "9e7d39ef-6547-4200-8dcb-2c57228e4690",
  "title": "Django - Add Static File",
  "slug": "django-add-static-file",
  "metadata": {
    "description": "Learn about Django - Add Static File with clear explanations and practical examples.",
    "keywords": [
      "c",
      "static",
      "work",
      "debug",
      "example",
      "file",
      "html",
      "false",
      "folder",
      "files",
      "templates"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Add Static Files"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django - Add Static File",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Create Static Folder\nWhen building web applications, you probably want to add some static files like images or css files.\nStart by creating a folder named\nstatic\nin your project, the same place where you created the\ntemplates\nfolder:\nThe name of the folder has to be\nstatic\n.\nmy_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/\nAdd a CSS file in the\nstatic\nfolder, \nthe name is your choice, we will call it\nmyfirst.css\nin this example:\nmy_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/\nmyfirst.css\nOpen the CSS file and insert the following:\nmy_tennis_club/members/static/myfirst.css\n:\nbody {\n  background-color: lightblue;\n  font-family: verdana;\n}\nModify the Template\nNow you have a CSS file, with some CSS styling. The \na HTML template:\nOpen the\ntemplates/template.html\nfile and add the following:\n{% load static %}\nAnd:\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\nExample\nmy_tennis_club/members/templates/template.html\n:\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\nRun Example \u00bb\nRestart the server for the changes to take effect:\npython manage.py runserver\nAnd check out the result in your own browser:\n127.0.0.1:8000/testing/\n.\nDidn't Work?\nJust testing?\nIf you just want to play around, and not \ngoing to deploy your work, you can set\nDEBUG = True\nin the\nsettings.py\nfile, \nand the example above will work.\nPlan to deploy?\nIf you plan to deploy your work, you should \n  set\nDEBUG = False\nin the\nsettings.py\nfile. The example above will fail, because Django has no built-in solution for \n  serving static files, but there are other ways to serve static files, you will \n  learn how in the \nExample (in development):\nmy_tennis_club/my_tennis_club/settings.py\n:\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n.\n.\nThis will make the example work, but we want you to choose\nDEBUG = False\n,\nbecause that is the best way to learn how to work with Django.\nChoose Debug = False\nFor the rest of this tutorial, we will run with\nDEBUG = False\n, even in \ndevelopment, because that is the best way to learn how to work with Django.\nExample:\nmy_tennis_club/my_tennis_club/settings.py\n:\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n\n.\n.\nALLOWED_HOSTS\nWhen using\nDEBUG = False\nyou have to specify which host name(s) are allowed\nto host your work. You could choose\n'127.0.0.1'\nor\n'localhost'\nwhich both represents the address of your local machine.\nWe choose\n'*'\n, which means\nany\naddress are allowed to host this site.\nThis should be change into a real domain name when you deploy your project to a public server.\nDidn't Work?\nThat is right, the example\nstill\ndoes not work.\nYou will have install a third-party library in order to handle static files.\nThere are many alternatives, we will show you how to use a Python library called\nWhiteNoise\nin the\n\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "my_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "my_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/\nmyfirst.css",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "python manage.py runserver",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "my_tennis_club\nmanage.py\nmy_tennis_club/\n# TODO: Complete this line\ntemplates/\nstatic/",
      "solution": "my_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "my_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/\n# TODO: Complete this line",
      "solution": "my_tennis_club\nmanage.py\nmy_tennis_club/\nmembers/\ntemplates/\nstatic/\nmyfirst.css"
    }
  ],
  "related_topics": [
    {
      "id": "79669ed2-5178-4344-9ecf-2f9f28023c77",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "57ff8458-a73b-4409-895c-89a4b2fb58ed",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3b32f710-3cb2-47b6-9b9f-8029103aac5e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the name?",
      "options": [
        "None of the above.",
        "your choice",
        "None of the above.",
        "other ways to serve static files"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the name is 'your choice'."
    },
    {
      "question": "What is but there?",
      "options": [
        "None of the above.",
        "other ways to serve static files",
        "None of the above.",
        "your choice"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of but there is 'other ways to serve static files'."
    }
  ],
  "summary": "This tutorial covers Django - Add Static File concepts and techniques. You'll learn how to use Django - Add Static File effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django - Add Static File and how to apply it in your projects."
}