{
  "id": "25b60836-ef03-48e3-8451-d033f04e648c",
  "title": "Django - Collect Static Files",
  "slug": "django-collect-static-files",
  "metadata": {
    "description": "Learn about Django - Collect Static Files with clear explanations and practical examples.",
    "keywords": [
      "c",
      "static",
      "files",
      "folder",
      "collect",
      "productionfiles",
      "django",
      "project",
      "admin",
      "example",
      "html"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Collect Static Files"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django - Collect Static Files",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Handle Static Files\nStatic files in your project, like stylesheets, JavaScripts, and images,\nare not handled automatically by Django when\nDEBUG = False\n.\nWhen\nDEBUG = True\n, this worked fine, all we had to do was to put them in the\nstatic\nfolder of the application.\nWhen\nDEBUG = False\n, static files have to be collected\nand put in a specified folder before we can use it.\nCollect Static Files\nTo collect all necessary static files for your project, start by specifying a\nSTATIC_ROOT\nproperty in the\nsettings.py\nfile.\nThis specifies a folder where you want to collect your static files.\nYou can call the folder whatever you like, we will call it\nproductionfiles\n:\nmy_tennis_club/my_tennis_club/settings.py\n:\n.\n.\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATIC_URL = 'static/'\n\n.\n.\nYou could manually create this folder and collect and put all static files of your project\ninto this folder, but Django has a command that do this for you:\npython manage.py collectstatic\nWhich will produce this result:\n128 static files copied to 'C:\\Users\\\nyour_name\n\\myworld\\my_tennis_club\\productionfiles'.\n128 files? Why so many? Well this is because of the admin user interface, \nthat comes built-in with Django.\nWe want to keep this feature in production, and it comes with a whole bunch of files including stylesheets, fonts, images, and \nJavaScripts.\nIf you check in the filesystem on your computer, you will see that a new folder was created:\nproductionfiles\n.\nThis folder contains\nadmin\n, with the static files for the admin UI,\nand the\nmyfirst.css\nfile you created in the\nAdd Static Files\nchapter.\nmy_tennis_club\nmembers/\nmy_tennis_club/\nproductionfiles/\nadmin/\nmyfirst.css\nThe Example Should Work\nNow you have collected the static files of your project, and if you have\ninstalled WhiteNoise\n, the example from the\nAdd Static Files\nchapter will \nfinally work.\nStart the server and see the result:\npython manage.py runserver\nAnd check out the result in your own browser:\n127.0.0.1:8000/testing/\n.\nExample\nmy_tennis_club/members/templates/template.html\n:\n{% load static %}\n<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"{% static 'myfirst.css' %}\">\n<body>\n\n{% for x in fruits %}\n  <h1>{{ x }}</h1>\n{% endfor %}\n\n</body>\n</html>\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "python manage.py collectstatic",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "128 static files copied to 'C:\\Users\\\nyour_name\n\\myworld\\my_tennis_club\\productionfiles'.",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "my_tennis_club\nmembers/\nmy_tennis_club/\nproductionfiles/\nadmin/\nmyfirst.css",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "python manage.py runserver",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "python manage.py collectstatic"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "128 static files copied to 'C:\\Users\\\n# TODO: Complete this line\n\\myworld\\my_tennis_club\\productionfiles'.",
      "solution": "128 static files copied to 'C:\\Users\\\nyour_name\n\\myworld\\my_tennis_club\\productionfiles'."
    }
  ],
  "related_topics": [
    {
      "id": "b3de8a7c-8255-4b12-a0c8-943eac25b7df",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f6727238-c4cb-4846-8686-99314f170640",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fcb4c5a9-76aa-4cee-bd09-eaff72c9e043",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Well this?",
      "options": [
        "None of the above.",
        "because of the admin user interface",
        "None of the above.",
        "Not a Well this."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Well this is 'because of the admin user interface'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Django - Collect Static Files concepts and techniques. You'll learn how to use Django - Collect Static Files effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django - Collect Static Files and how to apply it in your projects."
}