{
  "id": "92e75ed0-15c9-45d2-b2e3-114d62a95fad",
  "title": "Django Template Tags",
  "slug": "django-template-tags",
  "metadata": {
    "description": "Learn about Django Template Tags with clear explanations and practical examples.",
    "keywords": [
      "template",
      "specifies",
      "tags",
      "django",
      "html",
      "block",
      "outputs",
      "value",
      "templates",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Django Tags"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django Template Tags",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Template Tags\nIn Django templates, you can perform programming logic\nlike executing\nif\nstatements\nand\nfor\nloops.\nThese keywords,\nif\nand\nfor\n,\nare called \"template tags\" in Django.\nTo execute template tags, we surround them in\n{% %}\nbrackets.\nExample\ntemplates/template.html\n:\n{% if greeting == 1 %}\n  <h1>Hello</h1>\n{% else %}\n  <h1>Bye</h1>\n{% endif %}\nRun Example \u00bb\nDjango Code\nThe template tags are a way of telling Django that here comes something else than plain HTML.\nThe template tags allows us to to do some programming on the server before sending HTML to the client.\ntemplates/template.html\n:\n<ul>\n  {% for x in mymembers %}\n    <li>{{ x.firstname }}</li>\n  {% endfor %}\n</ul>\nRun Example \u00bb\nIn the \nTag Reference\nA list of all template tags:\nTag\nDescription\nautoescape\nSpecifies if autoescape mode is on or off\nblock\nSpecifies a block section\ncomment\nSpecifies a comment section\ncsrf_token\nProtects forms from Cross Site Request Forgeries\ncycle\nSpecifies content to use in each cycle of a loop\ndebug\nSpecifies debugging information\nextends\nSpecifies a parent template\nfilter\nFilters content before returning it\nfirstof\nReturns the first not empty variable\nfor\nSpecifies a for loop\nif\nSpecifies a if statement\nifchanged\nUsed in for loops. Outputs a block only if a value has changed since the \nlast iteration\ninclude\nSpecifies included content/template\nload\nLoads template tags from another library\nlorem\nOutputs random text\nnow\nOutputs the current date/time\nregroup\nSorts an object by a group\nresetcycle\nUsed in cycles. Resets the cycle\nspaceless\nRemoves whitespace between HTML tags\ntemplatetag\nOutputs a specified template tag\nurl\nReturns the absolute URL part of a URL\nverbatim\nSpecifies contents that should not be rendered by the template engine\nwidthratio\nCalculates a width value based on the ratio between a given value and a max \nvalue\nwith\nSpecifies a variable to use in the block\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "963eafeb-ace6-44b9-a342-a3672599faeb",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "303e0c11-3121-4651-810c-3870a1cddb39",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fe6785d2-d71d-40b5-88b6-d959d1553856",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Django Code\nThe template tags?",
      "options": [
        "Not a Django Code\nThe template tags.",
        "None of the above.",
        "None of the above.",
        "a way of telling Django that here comes something else than plain HTML"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Django Code\nThe template tags is 'a way of telling Django that here comes something else than plain HTML'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Django Template Tags concepts and techniques. You'll learn how to use Django Template Tags effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django Template Tags and how to apply it in your projects."
}