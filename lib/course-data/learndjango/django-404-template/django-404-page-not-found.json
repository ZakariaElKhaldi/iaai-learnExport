{
  "id": "5f861517-953a-47ef-b170-b4302ebb59fe",
  "title": "Django 404 (page not found)",
  "slug": "django-404-page-not-found",
  "metadata": {
    "description": "Learn about Django 404 (page not found) with clear explanations and practical examples.",
    "keywords": [
      "go",
      "debug",
      "django",
      "html",
      "template",
      "file",
      "page",
      "address",
      "true",
      "settings",
      "false"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Django 404 Template"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django 404 (page not found)",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Page Not Found\nIf you try to access a page that does not exist (a 404 error), Django directs you to a built-in view that handles 404 errors.\nYou will learn how to customize this 404 view later in this chapter, but \nfirst, just try to request a page that does not exist.\nIn the browser window, type\n127.0.0.1:8000/masfdfg/\nin the address bar.\nYou will get one of two results:\n1:\n2:\nIf you got the first result, you got directed to the built-in Django 404 \ntemplate.\nIf you got the second result, then\nDEBUG\nis \nset to\nTrue\nin your settings, and you must set it to\nFalse\nto get directed to \nthe 404 template.\nThis is done in the\nsettings.py\nfile, which \nis located in the \nproject folder, in our case the\nmy_tennis_club\nfolder, \nwhere you also have to specify the host name from where your project runs from:\nExample\nSet the debug property to\nFalse\n, and allow the project to run from your local \nhost:\nmy_tennis_club/my_tennis_club/settings.py\n:\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n.\n.\nImportant:\nWhen DEBUG = False, Django requires you to specify the hosts you will allow this\nDjango project to run from.\nIn production, this should be replaced with a proper domain name:\nALLOWED_HOSTS = ['\nyourdomain.com\n']\nIn the browser window, type\n127.0.0.1:8000/masfdfg/\nin the address bar, and you will get the built-in 404 template:\nCustomize the 404 Template\nDjango will look for a file named\n404.html\nin the\ntemplates\nfolder, and display it when there is a 404 error.\nIf no such file exists, Django shows the \"Not Found\" that you saw in the \nexample above.\nTo customize this message, all you have to do is to create a file in the\ntemplates\nfolder and name it\n404.html\n, and fill it with whatever you \nwant:\nmy_tennis_club/members/templates/404.html\n:\n<!DOCTYPE html>\n<html>\n<title>Wrong address</title>\n<body>\n<h1>Ooops!</h1>\n<h2>I cannot \n  find the file you requested!</h2>\n</body>\n</html>\nIn the browser window, type\n127.0.0.1:8000/masfdfg/\nin the address bar, and you will get the customized 404 template:\nReset Debug = True\nYou should reset the debug property to\nTrue\nto continue with the tutorial.\nExample\nmy_tennis_club/my_tennis_club/settings.py\n:\n.\n.\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n.\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!DOCTYPE html>\n<html>\n<title>Wrong address</title>\n<body>\n<h1>Ooops!</h1>\n<h2>I cannot \n  find the file you requested!</h2>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<title>Wrong address</title>\n<body>\n<h1>Ooops!</h1>\n# TODO: Complete this line\n  find the file you requested!</h2>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<title>Wrong address</title>\n<body>\n<h1>Ooops!</h1>\n<h2>I cannot \n  find the file you requested!</h2>\n</body>\n</html>"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "fe3c234f-9061-42b6-8317-94b3754d29d9",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5020a216-cab2-49b4-8632-dfc68c02a016",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "76c37a30-e84b-43ce-9bab-e39468ab76c9",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is then\nDEBUG?",
      "options": [
        "None of the above.",
        "None of the above.",
        "done in the\nsettings",
        "set to\nTrue\nin your settings"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of then\nDEBUG is 'set to\nTrue\nin your settings'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "set to\nTrue\nin your settings",
        "done in the\nsettings",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This is 'done in the\nsettings'."
    }
  ],
  "summary": "This tutorial covers Django 404 (page not found) concepts and techniques. You'll learn how to use Django 404 (page not found) effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django 404 (page not found) and how to apply it in your projects."
}