{
  "id": "c5f64c9a-3441-4755-b5a3-590253999777",
  "title": "Django Update Data",
  "slug": "django-update-data",
  "metadata": {
    "description": "Learn about Django Update Data with clear explanations and practical examples.",
    "keywords": [
      "go",
      "firstname",
      "refsnes",
      "lastname",
      "member",
      "update",
      "records",
      "record",
      "objects",
      "stale",
      "result"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Django Update Data"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django Update Data",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Update Records\nTo update records that are already in the database, we first have to get the record we want to update:\n>>> from members.models import Member\n>>> x = Member.objects.all()[4]\nx\nwill now represent the member at index 4,\nwhich is \"Stale Refsnes\", but to make sure, let us see if that is correct:\n>>> x.firstname\nThis should give you this result:\n'Stale'\nNow we can change the values of this record:\n>>> x.firstname = \"Stalikken\"\n>>> x.save()\nExecute this command to see if the Member table got updated:\n>>> Member.objects.all().values()\nHopefully, the result will look like this:\n<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'},\n{'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'},\n{'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": ">>> from members.models import Member\n>>> x = Member.objects.all()[4]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": ">>> x.firstname",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "'Stale'",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": ">>> x.firstname = \"Stalikken\"\n>>> x.save()",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": ">>> Member.objects.all().values()",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'},\n{'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes'},\n{'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes'},\n{'id': 4, 'firstname': 'Lene', 'lastname': 'Refsnes'},\n{'id': 5, 'firstname': 'Stalikken', 'lastname': 'Refsnes'},\n{'id': 6, 'firstname': 'Jane', 'lastname': 'Doe'}]>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": ">>> from members.models import Member\n>>> x = Member.objects.all()[4]"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": ">>> x.firstname"
    }
  ],
  "related_topics": [
    {
      "id": "69de9eef-f0ce-4325-a39e-64b7b970a1a0",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "823f6460-698d-4684-816c-0310351a6d36",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "700a74a1-3db8-49e1-a263-fba87cb72b7d",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Django Update Data\n\nUpdate Records\nTo update records that?",
      "options": [
        "None of the above.",
        "already in the database",
        "\"Stale Refsnes\"",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Django Update Data\n\nUpdate Records\nTo update records that is 'already in the database'."
    },
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "\"Stale Refsnes\"",
        "None of the above.",
        "already in the database"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of which is '\"Stale Refsnes\"'."
    }
  ],
  "summary": "This tutorial covers Django Update Data concepts and techniques. You'll learn how to use Django Update Data effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django Update Data and how to apply it in your projects."
}