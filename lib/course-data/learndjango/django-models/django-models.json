{
  "id": "f9dbc461-29a6-4498-8d99-3d5e910d3c9a",
  "title": "Django Models",
  "slug": "django-models",
  "metadata": {
    "description": "Learn about Django Models with clear explanations and practical examples.",
    "keywords": [
      "go",
      "models",
      "django",
      "members",
      "migrations",
      "table",
      "member",
      "model",
      "database",
      "create",
      "created"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDjango",
    "subcategory": "Django Models"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Django Models",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A Django model is a table in your database.\nDjango Models\nUp until now in this tutorial,\noutput has been static data from Python or HTML templates.\nNow we will see how Django allows us to work with data,\nwithout having to change or upload files in the process.\nIn Django, data is created in objects, called Models, and is actually tables in a database.\nCreate Table (Model)\nTo create a model, navigate to the\nmodels.py\nfile\nin the\n/members/\nfolder.\nOpen it, and add a\nMember\ntable by creating a\nMember\nclass\n, \nand describe the table fields in it:\nmy_tennis_club/members/models.py\n:\nfrom django.db import models\n\nclass Member(models.Model):\n  firstname = models.CharField(max_length=255)\n  lastname = models.CharField(max_length=255)\nThe first field,\nfirstname\n, is a Text field, and will contain the first name of the members.\nThe second field,\nlastname\n, is also a Text field, with the member's last name.\nBoth\nfirstname\nand\nlastname\nis set up to have a maximum of 255 characters.\nSQLite Database\nWhen we created the Django project, we got an empty SQLite database.\nIt was created in the\nmy_tennis_club\nroot folder, \n  and has the filename\ndb.sqlite3\n.\nBy default, all Models created in the Django project will be created as tables in this database.\nMigrate\nNow when we have described a Model in the\nmodels.py\nfile, we must run a command to actually create the table in the database.\nNavigate to the\n/my_tennis_club/\nfolder and run this command:\npython manage.py makemigrations members\nWhich will result in this output:\nMigrations for 'members':\nmembers\\migrations\\0001_initial.py\n- Create model Member\n(myworld) C:\\Users\\\nYour Name\n\\myworld\\my_tennis_club>\nDjango creates a file describing the changes and stores the file in the\n/migrations/\nfolder:\nmy_tennis_club/members/migrations/0001_initial.py\n:\n# Generated by Django 5.1.7 on 2025-03-20 11:39\n\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\n\ninitial = True\n\ndependencies = [\n    ]\n\noperations = [\n        migrations.CreateModel(\n            name='Member',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('firstname', models.CharField(max_length=255)),\n                ('lastname', models.CharField(max_length=255)),\n            ],\n        ),\n    ]\nNote that Django inserts an\nid\nfield for your tables,\nwhich is an\nauto increment number\n(first record gets the value 1, the second record 2 etc.), this is the default \nbehavior of Django,\nyou can override it by describing your own\nid\nfield.\nThe table is not created yet, you will have to run one more command, then \nDjango will create and execute an SQL statement, based on the content of the new \nfile in the\n/migrations/\nfolder.\nRun the migrate command:\npython manage.py migrate\nWhich will result in this output:\nOperations to perform:\nApply all migrations: admin, auth, contenttypes, members, sessions\nRunning migrations:\nApplying members.0001_initial... OK\n(myworld) C:\\Users\\\nYour Name\n\\myworld\\my_tennis_club>\nNow you have a\nMember\ntable in you database!\nView SQL\nAs a side-note: you can view the SQL statement that were executed from the migration above.\nAll you have to do is to run this command, with the migration number:\npython manage.py sqlmigrate members 0001\nWhich will result in this output:\nBEGIN;\n--\n-- Create model Member\n--\nCREATE TABLE \"members_member\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"firstname\" varchar(255) NOT NULL, \"lastname\" varchar(255) NOT NULL);\nCOMMIT;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "python manage.py makemigrations members",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "Migrations for 'members':\nmembers\\migrations\\0001_initial.py\n- Create model Member\n(myworld) C:\\Users\\\nYour Name\n\\myworld\\my_tennis_club>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "python manage.py migrate",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "Operations to perform:\nApply all migrations: admin, auth, contenttypes, members, sessions\nRunning migrations:\nApplying members.0001_initial... OK\n(myworld) C:\\Users\\\nYour Name\n\\myworld\\my_tennis_club>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "python manage.py sqlmigrate members 0001",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "BEGIN;\n--\n-- Create model Member\n--\nCREATE TABLE \"members_member\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"firstname\" varchar(255) NOT NULL, \"lastname\" varchar(255) NOT NULL);\nCOMMIT;",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "python manage.py makemigrations members"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "Migrations for 'members':\nmembers\\migrations\\0001_initial.py\n- Create model Member\n# TODO: Complete this line\nYour Name\n\\myworld\\my_tennis_club>",
      "solution": "Migrations for 'members':\nmembers\\migrations\\0001_initial.py\n- Create model Member\n(myworld) C:\\Users\\\nYour Name\n\\myworld\\my_tennis_club>"
    }
  ],
  "related_topics": [
    {
      "id": "21eb70ce-87f5-4bac-8c46-19ceb7a92060",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "db7e93c4-61eb-49ff-aa96-d3dd0b3a29d0",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f9f88fd4-e1a0-436e-ab81-1b7e39289df1",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Django Models\n\nA Django model?",
      "options": [
        "a table in your database",
        "created in objects",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Django Models\n\nA Django model is 'a table in your database'."
    },
    {
      "question": "What is data?",
      "options": [
        "a table in your database",
        "None of the above.",
        "created in objects",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of data is 'created in objects'."
    }
  ],
  "summary": "This tutorial covers Django Models concepts and techniques. You'll learn how to use Django Models effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Django Models and how to apply it in your projects."
}