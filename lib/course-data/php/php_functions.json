{
  "title": "PHP Functions",
  "url": "https://www.w3schools.com/php/php_functions.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "PHP Functions",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The real power of PHP comes from its functions.",
      "html": "<p class=\"intro\">The real power of PHP comes from its functions.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PHP has more than 1000 built-in functions, and in addition you can create your own custom functions.",
      "html": "<p class=\"intro\">PHP has more \nthan 1000 built-in functions, and in addition you can create your own custom \nfunctions.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP Built-in Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.",
      "html": "<p>PHP has over 1000 built-in functions that can be called directly, from within \na script, to perform \na specific task.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "PHP built-in functions",
          "href": "https://www.w3schools.com/php_ref_overview.asp",
          "title": ""
        }
      ],
      "text": "Please check out our PHP reference for a complete overview of the PHP built-in functions .",
      "html": "<p>Please check out our PHP reference for a complete overview of the\n<a href=\"php_ref_overview.asp\">PHP built-in functions</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP User Defined Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Besides the built-in PHP functions, it is possible to create your own functions.",
      "html": "<p>Besides the built-in PHP functions, it is possible to create your own functions.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create a Function",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A user-defined function declaration starts with the keyword function , followed by the name of the function:",
      "html": "<p>A user-defined function declaration starts with the keyword <code>function</code>,\nfollowed by the name of the function:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nmyMessage\n(\n)\n\n{\n\n\necho\n\n\"Hello world!\"\n;\n\n\n}",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">myMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"Hello world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: A function name must start with a letter or an underscore. Function names are NOT case-sensitive.",
      "html": "<p><strong>Note:</strong> A function name must start with a letter or an underscore. Function names are NOT case-sensitive.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tip: Give the function a name that reflects what the function does!",
      "html": "<p><strong>Tip:</strong> Give the function a name that reflects what the \nfunction does!</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Call a Function",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To call the function, just write its name followed by parentheses () :",
      "html": "<p>To call the function, just write its name followed by parentheses\n<code>()</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_mymessage",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nmyMessage\n(\n)\n\n{\n\n\necho\n\n\"Hello world!\"\n;\n\n\n}\n\n\n\nmyMessage\n(\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">myMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"Hello world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_mymessage",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In our example, we create a function named myMessage() .",
      "html": "<p>In our example, we create a function named <code>myMessage()</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The opening curly brace { indicates the beginning of the function code, and the closing curly brace } indicates the end of the function.",
      "html": "<p>The opening \ncurly brace <code>{</code> indicates the beginning of the function code, and the closing \ncurly brace <code>}</code> indicates the end of the function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The function outputs \"Hello world!\".",
      "html": "<p>The function outputs \"Hello \nworld!\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP Function Arguments",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Information can be passed to functions through arguments. An argument is just like a variable.",
      "html": "<p>Information can be passed to functions through arguments. An argument is just \nlike a variable.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.",
      "html": "<p>Arguments are specified after the function name, inside the parentheses. You \ncan add as many arguments as you want, just separate them with a comma. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example has a function with one argument ($fname) . When the familyName() function is called, we also pass along a name, e.g. (\"Jani\") , and the name is used inside the function, which outputs several different first names, but an equal last name:",
      "html": "<p>The following example has a function with one argument <code>($fname)</code>. When the \n<code>familyName()</code> function is called,\nwe also pass along a name, e.g. <code>(\"Jani\")</code>, and the \nname is used inside the function, which outputs several different first names, \nbut an equal last name:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nfamilyName\n(\n$fname\n)\n\n{\n\n\necho\n\n\"\n$fname\nRefsnes.<br>\"\n;\n\n\n}\n\n\n\nfamilyName\n(\n\"Jani\"\n)\n;\n\n\nfamilyName\n(\n\"Hege\"\n)\n;\n\n\nfamilyName\n(\n\"Stale\"\n)\n;\n\n\nfamilyName\n(\n\"Kai Jim\"\n)\n;\n\n\nfamilyName\n(\n\"Borge\"\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$fname</span></span> Refsnes.&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Jani\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Hege\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Stale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Kai Jim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Borge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example has a function with two arguments ($fname, $year) :",
      "html": "<p>The following example has a function with two arguments <code>($fname, $year)</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function3",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nfamilyName\n(\n$fname\n,\n\n$year\n)\n\n{\n\n\necho\n\n\"\n$fname\nRefsnes. Born in\n$year\n<br>\"\n;\n\n\n}\n\n\n\nfamilyName\n(\n\"Hege\"\n,\n\n\"1975\"\n)\n;\n\n\nfamilyName\n(\n\"Stale\"\n,\n\n\"1978\"\n)\n;\n\n\nfamilyName\n(\n\"Kai Jim\"\n,\n\n\"1983\"\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$fname</span></span> Refsnes. Born in <span class=\"token interpolation\"><span class=\"token variable\">$year</span></span> &lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Hege\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"1975\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Stale\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"1978\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">familyName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Kai Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"1983\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function3",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP Default Argument Value",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example shows how to use a default parameter. If we call the function setHeight() without arguments it takes the default value as argument:",
      "html": "<p>The following example shows how to use a default parameter. If we call the \nfunction <code>setHeight()</code> without arguments it takes the default value as argument:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_default_arg",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nsetHeight\n(\n$minheight\n\n=\n\n50\n)\n\n{\n\n\necho\n\n\"The height is :\n$minheight\n<br>\"\n;\n\n\n}\n\n\n\nsetHeight\n(\n350\n)\n;\n\n\nsetHeight\n(\n)\n;\n\n// will use the default value of 50\n\n\nsetHeight\n(\n135\n)\n;\n\n\nsetHeight\n(\n80\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$minheight</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"The height is : <span class=\"token interpolation\"><span class=\"token variable\">$minheight</span></span> &lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will use the default value of 50</span>\n<span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_default_arg",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP Functions - Returning values",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To let a function return a value, use the return statement:",
      "html": "<p>To let a function return a value, use the <code>return</code> statement:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_return",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nsum\n(\n$x\n,\n\n$y\n)\n\n{\n\n\n$z\n\n=\n\n$x\n\n+\n\n$y\n;\n\n\nreturn\n\n$z\n;\n\n\n}\n\n\n\necho\n\n\"5 + 10 = \"\n\n.\n\nsum\n(\n5\n,\n\n10\n)\n\n.\n\n\"<br>\"\n;\n\n\necho\n\n\"7 + 13 = \"\n\n.\n\nsum\n(\n7\n,\n\n13\n)\n\n.\n\n\"<br>\"\n;\n\n\necho\n\n\"2 + 4 = \"\n\n.\n\nsum\n(\n2\n,\n\n4\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$z</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$x</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$y</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$z</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"5 + 10 = \"</span> <span class=\"token operator\">.</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"7 + 13 = \"</span> <span class=\"token operator\">.</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token string double-quoted-string\">\"2 + 4 = \"</span> <span class=\"token operator\">.</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_return",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Passing Arguments by Reference",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.",
      "html": "<p>In PHP, arguments are usually passed by value, which means that a copy of the value is\nused in the function and the variable that was passed into the function cannot be changed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used:",
      "html": "<p>When a function argument is passed by reference, changes to the argument also change\nthe variable that was passed in. To turn a function argument into a reference, the <code>&amp;</code>\noperator is used:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_pass_ref",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nadd_five\n(\n&\n$value\n)\n\n{\n\n\n$value\n\n+=\n\n5\n;\n\n\n}\n\n\n\n$num\n\n=\n\n2\n;\n\n\nadd_five\n(\n$num\n)\n;\n\n\necho\n\n$num\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">add_five</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$value</span> <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$num</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add_five</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token variable\">$num</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_pass_ref",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Variable Number of Arguments",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By using the ... operator in front of the function parameter, the function accepts an unknown number of arguments. This is also called a variadic function.",
      "html": "<p>By using the <code>...</code> operator in front of the function parameter, the function \naccepts an unknown number of arguments. This is also called a variadic function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The variadic function argument becomes an array.",
      "html": "<p>The variadic function argument becomes an array.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nsumMyNumbers\n(\n...\n$x\n)\n\n{\n\n\n$n\n\n=\n\n0\n;\n\n\n$len\n\n=\n\ncount\n(\n$x\n)\n;\n\n\nfor\n(\n$i\n\n=\n\n0\n;\n\n$i\n\n<\n\n$len\n;\n\n$i\n++\n)\n\n{\n\n\n$n\n\n+=\n\n$x\n[\n$i\n]\n;\n\n\n}\n\n\nreturn\n\n$n\n;\n\n\n}\n\n\n\n$a\n\n=\n\nsumMyNumbers\n(\n5\n,\n\n2\n,\n\n6\n,\n\n2\n,\n\n7\n,\n\n7\n)\n;\n\n\necho\n\n$a\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">sumMyNumbers</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$n</span> <span class=\"token operator\">+=</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$n</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">sumMyNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can only have one argument with variable length, and it has to be the last argument.",
      "html": "<p>You can only have one argument with variable length, and it has to be the last argument.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nmyFamily\n(\n$lastname\n,\n\n...\n$firstname\n)\n\n{\n\n\n$txt\n\n=\n\n\"\"\n;\n\n\n$len\n\n=\n\ncount\n(\n$firstname\n)\n;\n\n\nfor\n(\n$i\n\n=\n\n0\n;\n\n$i\n\n<\n\n$len\n;\n\n$i\n++\n)\n\n{\n\n\n$txt\n\n=\n\n$txt\n.\n\"Hi,\n$firstname\n[\n$i\n]\n\n$lastname\n.<br>\"\n;\n\n\n}\n\n\nreturn\n\n$txt\n;\n\n\n}\n\n\n\n$a\n\n=\n\nmyFamily\n(\n\"Doe\"\n,\n\n\"Jane\"\n,\n\n\"John\"\n,\n\n\"Joey\"\n)\n;\n\n\necho\n\n$a\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">myFamily</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lastname</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$txt</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$txt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$txt</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"Hi, <span class=\"token interpolation\"><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span></span> <span class=\"token interpolation\"><span class=\"token variable\">$lastname</span></span>.&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$txt</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">myFamily</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Joey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the variadic argument is not the last argument, you will get an error.",
      "html": "<p>If the variadic argument is not the last argument, you will get an error.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic2_error",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\nmyFamily\n(\n...\n$firstname\n,\n\n$lastname\n)\n\n{\n\n\n$txt\n\n=\n\n\"\"\n;\n\n\n$len\n\n=\n\ncount\n(\n$firstname\n)\n;\n\n\nfor\n(\n$i\n\n=\n\n0\n;\n\n$i\n\n<\n\n$len\n;\n\n$i\n++\n)\n\n{\n\n\n$txt\n\n=\n\n$txt\n.\n\"Hi,\n$firstname\n[\n$i\n]\n\n$lastname\n.<br>\"\n;\n\n\n}\n\n\nreturn\n\n$txt\n;\n\n\n}\n\n\n\n$a\n\n=\n\nmyFamily\n(\n\"Doe\"\n,\n\n\"Jane\"\n,\n\n\"John\"\n,\n\n\"Joey\"\n)\n;\n\n\necho\n\n$a\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">myFamily</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lastname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$txt</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$len</span> <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$len</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$txt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$txt</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"Hi, <span class=\"token interpolation\"><span class=\"token variable\">$firstname</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span></span> <span class=\"token interpolation\"><span class=\"token variable\">$lastname</span></span>.&lt;br&gt;\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$txt</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">myFamily</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Jane\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Joey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_function_variadic2_error",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP is a Loosely Typed Language",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the examples above, notice that we did not have to tell PHP which data type the variable is.",
      "html": "<p>In the examples above, notice that we did not have to tell PHP which data type the variable is.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.",
      "html": "<p>PHP automatically associates a data type to the variable, depending on its value. \nSince the data types are not set in a strict sense, you can do things like \nadding a string to an integer without causing an error.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches.",
      "html": "<p>In PHP 7, type declarations were added. This gives us an option to specify \nthe expected data type when declaring a function, and by adding the <code>strict</code> \ndeclaration, it will throw a \"Fatal \nError\" if the data type mismatches.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the following example we try to send both a number and a string to the function without using strict :",
      "html": "<p>In the following example we try to send both a number and a string to the \nfunction without using <code>strict</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_non-strict",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "function\n\naddNumbers\n(\nint\n\n$a\n,\n\nint\n\n$b\n)\n\n{\n\n\nreturn\n\n$a\n\n+\n\n$b\n;\n\n\n}\n\n\necho\n\naddNumbers\n(\n5\n,\n\n\"5 days\"\n)\n;\n\n\n// since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint keyword-int\">int</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint keyword-int\">int</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"5 days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_non-strict",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To specify strict we need to set declare(strict_types=1); . This must be on the very first line of the PHP file.",
      "html": "<p>To specify <code>strict</code> we need to set <code>declare(strict_types=1);</code>. \nThis must be on the very first line of the PHP file.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the following example we try to send both a number and a string to the function, but here we have added the strict declaration:",
      "html": "<p>In the following example we try to send both a number and a string to the \nfunction, but here we have added the <code>strict</code> \ndeclaration:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_strict",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "<?php\n\ndeclare\n(\nstrict_types\n=\n1\n)\n;\n\n// strict requirement\n\n\n\nfunction\n\naddNumbers\n(\nint\n\n$a\n,\n\nint\n\n$b\n)\n\n{\n\n\nreturn\n\n$a\n\n+\n\n$b\n;\n\n\n}\n\n\necho\n\naddNumbers\n(\n5\n,\n\n\"5 days\"\n)\n;\n\n\n// since strict is enabled and \"5 days\" is not an integer, an error will be thrown\n\n\n?>",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword keyword-declare\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// strict requirement</span>\n\n<span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint keyword-int\">int</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint keyword-int\">int</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"5 days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// since strict is enabled and \"5 days\" is not an integer, an error will be thrown</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_strict",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The strict declaration forces things to be used in the intended way.",
      "html": "<p>The <code>strict</code> declaration forces things to be used in the intended way.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP Return Type Declarations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.",
      "html": "<p>PHP 7 also supports Type Declarations for the <code>return</code> \nstatement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal \nError\" on a type mismatch.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( { )bracket when declaring the function.",
      "html": "<p>To declare a type for the function return, add a colon (\n<code>:</code> ) and the type right before the opening curly \n( <code>{</code> )bracket when declaring the function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the following example we specify the return type for the function:",
      "html": "<p>In the following example we specify the return type for the function:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_return_strict",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "<?php\n\ndeclare\n(\nstrict_types\n=\n1\n)\n;\n\n// strict requirement\n\n\nfunction\n\naddNumbers\n(\nfloat\n\n$a\n,\n\nfloat\n\n$b\n)\n\n:\n\nfloat\n\n{\n\n\nreturn\n\n$a\n\n+\n\n$b\n;\n\n\n}\n\n\necho\n\naddNumbers\n(\n1.2\n,\n\n5.2\n)\n;\n\n\n?>",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword keyword-declare\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// strict requirement</span>\n<span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint keyword-float\">float</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint keyword-float\">float</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type keyword-float\">float</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_return_strict",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can specify a different return type, than the argument types, but make sure the return is the correct type:",
      "html": "<p>You can specify a different return type, than the argument types, but make \nsure the return is the correct type:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_return_strict2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "<?php\n\ndeclare\n(\nstrict_types\n=\n1\n)\n;\n\n// strict requirement\n\n\nfunction\n\naddNumbers\n(\nfloat\n\n$a\n,\n\nfloat\n\n$b\n)\n\n:\n\nint\n\n{\n\n\nreturn\n\n(\nint\n)\n(\n$a\n\n+\n\n$b\n)\n;\n\n\n}\n\n\necho\n\naddNumbers\n(\n1.2\n,\n\n5.2\n)\n;",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword keyword-declare\">declare</span><span class=\"token punctuation\">(</span>strict_types<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// strict requirement</span>\n<span class=\"token keyword keyword-function\">function</span> <span class=\"token function-definition function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint keyword-float\">float</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint keyword-float\">float</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword return-type keyword-int\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting keyword-int\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-echo\">echo</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": "https://www.w3schools.com/php/phptryit.asp?filename=tryphp_func_return_strict2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Consider this code: function calculate($a, $b) { return $a * $b; } echo calculate(5, 5); What will be the result?",
      "html": "<p>Consider this code:<br/><code class=\"codeblock\">function calculate($a, $b) {<br/>\u00a0\u00a0return $a * $b;<br/>}<br/><br/>echo calculate(5, 5);</code><br/>What will be the result?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "Consider this code:function calculate($a, $b) {\u00a0\u00a0return $a * $b;}echo calculate(5, 5);What will be the result?",
        "options": [
          {
            "value": "0",
            "text": "10"
          },
          {
            "value": "1",
            "text": "55"
          },
          {
            "value": "2",
            "text": "25"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_functions1"
      },
      "quiz_type": "quiz",
      "question": "Consider this code:function calculate($a, $b) {\u00a0\u00a0return $a * $b;}echo calculate(5, 5);What will be the result?",
      "options": [
        {
          "value": "0",
          "text": "10"
        },
        {
          "value": "1",
          "text": "55"
        },
        {
          "value": "2",
          "text": "25"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_functions1",
      "html": "<form action=\"exercise.asp?x=xrcise_functions1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\"><code>10</code></label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\"><code>55</code></label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\"><code>25</code></label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}