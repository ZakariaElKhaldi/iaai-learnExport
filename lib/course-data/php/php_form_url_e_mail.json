{
  "title": "PHP Forms Validate E-mail and URL",
  "url": "https://www.w3schools.com/php/php_form_url_email.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "PHP Forms - Validate E-mail and URL",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This chapter shows how to validate names, e-mails, and URLs.",
      "html": "<p class=\"intro\">This chapter shows how to validate names, e-mails, and URLs.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP - Validate Name",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message:",
      "html": "<p>The code below shows a simple way to check if the name field only contains \nletters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store \nan error message:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "$name\n\n=\n\ntest_input\n(\n$_POST\n[\n\"name\"\n]\n)\n;\n\n\nif\n\n(\n!\npreg_match\n(\n\"/^[a-zA-Z-' ]*$/\"\n,\n$name\n)\n)\n\n{\n\n\n$nameErr\n\n=\n\n\"Only letters and white space allowed\"\n;\n\n\n}",
      "language": "php",
      "code_html": "<pre class=\"notranslate language-php\" style=\"border-radius:5px;\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/^[a-zA-Z-' ]*$/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$nameErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Only letters and white space allowed\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "language-php"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p>\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "preg_match()",
          "href": "https://www.w3schools.com/func_regex_preg_match.asp",
          "title": ""
        }
      ],
      "text": "The preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.",
      "html": "<p><strong>The <code><a href=\"func_regex_preg_match.asp\">preg_match()</a></code> function searches a string for pattern, returning true if \nthe pattern exists, and false otherwise.</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP - Validate E-mail",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function.",
      "html": "<p>The easiest and safest way to check whether an email address is well-formed \nis to use PHP's <code>filter_var()</code> function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the code below, if the e-mail address is not well-formed, then store an error message:",
      "html": "<p>In the code below, if the e-mail address is not well-formed, then store an error message:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "$email\n\n=\n\ntest_input\n(\n$_POST\n[\n\"email\"\n]\n)\n;\n\n\nif\n\n(\n!\nfilter_var\n(\n$email\n,\n\nFILTER_VALIDATE_EMAIL\n)\n)\n\n{\n\n\n$emailErr\n\n=\n\n\"Invalid email format\"\n;\n\n\n}",
      "language": "php",
      "code_html": "<pre class=\"notranslate language-php\" style=\"border-radius:5px;\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">filter_var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILTER_VALIDATE_EMAIL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$emailErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Invalid email format\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "language-php"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP - Validate URL",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:",
      "html": "<p>The code below shows a way to check if a URL address syntax is \nvalid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "$website\n\n=\n\ntest_input\n(\n$_POST\n[\n\"website\"\n]\n)\n;\n\n\nif\n\n(\n!\npreg_match\n(\n\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\"\n,\n$website\n)\n)\n\n{\n\n\n$websiteErr\n\n=\n\n\"Invalid URL\"\n;\n\n\n}",
      "language": "php",
      "code_html": "<pre class=\"notranslate language-php\" style=\"border-radius:5px;\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token variable\">$website</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"website\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&amp;@#\\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_|]/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$website</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$websiteErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Invalid URL\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "language-php"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "PHP - Validate Name, E-mail, and URL",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now, the script looks like this:",
      "html": "<p>Now, the script looks like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-php"
        ],
        "isNotranslate": true
      },
      "code": "// define variables and set to empty values\n\n\n$nameErr\n\n=\n\n$emailErr\n\n=\n\n$genderErr\n\n=\n\n$websiteErr\n\n=\n\n\"\"\n;\n\n\n$name\n\n=\n\n$email\n\n=\n\n$gender\n\n=\n\n$comment\n\n=\n\n$website\n\n=\n\n\"\"\n;\n\n\n\nif\n\n(\n$_SERVER\n[\n\"REQUEST_METHOD\"\n]\n\n==\n\n\"POST\"\n)\n\n{\n\n\nif\n\n(\nempty\n(\n$_POST\n[\n\"name\"\n]\n)\n)\n\n{\n\n\n$nameErr\n\n=\n\n\"Name is required\"\n;\n\n\n}\n\nelse\n\n{\n\n\n$name\n\n=\n\ntest_input\n(\n$_POST\n[\n\"name\"\n]\n)\n;\n\n\n// check if name only contains letters and whitespace\n\n\nif\n\n(\n!\npreg_match\n(\n\"/^[a-zA-Z-' ]*$/\"\n,\n$name\n)\n)\n\n{\n\n\n$nameErr\n\n=\n\n\"Only letters and white space allowed\"\n;\n\n\n}\n\n\n}\n\n\n\nif\n\n(\nempty\n(\n$_POST\n[\n\"email\"\n]\n)\n)\n\n{\n\n\n$emailErr\n\n=\n\n\"Email is required\"\n;\n\n\n}\n\nelse\n\n{\n\n\n$email\n\n=\n\ntest_input\n(\n$_POST\n[\n\"email\"\n]\n)\n;\n\n\n// check if e-mail address is well-formed\n\n\nif\n\n(\n!\nfilter_var\n(\n$email\n,\n\nFILTER_VALIDATE_EMAIL\n)\n)\n\n{\n\n\n$emailErr\n\n=\n\n\"Invalid email format\"\n;\n\n\n}\n\n\n}\n\n\n\nif\n\n(\nempty\n(\n$_POST\n[\n\"website\"\n]\n)\n)\n\n{\n\n\n$website\n\n=\n\n\"\"\n;\n\n\n}\n\nelse\n\n{\n\n\n$website\n\n=\n\ntest_input\n(\n$_POST\n[\n\"website\"\n]\n)\n;\n\n\n// check if URL address syntax is valid (this regular expression also allows dashes in the URL)\n\n\nif\n\n(\n!\npreg_match\n(\n\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\"\n,\n$website\n)\n)\n\n{\n\n\n$websiteErr\n\n=\n\n\"Invalid URL\"\n;\n\n\n}\n\n\n}\n\n\n\nif\n\n(\nempty\n(\n$_POST\n[\n\"comment\"\n]\n)\n)\n\n{\n\n\n$comment\n\n=\n\n\"\"\n;\n\n\n}\n\nelse\n\n{\n\n\n$comment\n\n=\n\ntest_input\n(\n$_POST\n[\n\"comment\"\n]\n)\n;\n\n\n}\n\n\n\nif\n\n(\nempty\n(\n$_POST\n[\n\"gender\"\n]\n)\n)\n\n{\n\n\n$genderErr\n\n=\n\n\"Gender is required\"\n;\n\n\n}\n\nelse\n\n{\n\n\n$gender\n\n=\n\ntest_input\n(\n$_POST\n[\n\"gender\"\n]\n)\n;\n\n\n}\n\n\n}",
      "language": "php",
      "code_html": "<pre class=\"notranslate w3-white language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token comment\">// define variables and set to empty values</span>\n<span class=\"token variable\">$nameErr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$emailErr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$genderErr</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$websiteErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$gender</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$website</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token global\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"REQUEST_METHOD\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"POST\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-empty\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$nameErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Name is required\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// check if name only contains letters and whitespace</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/^[a-zA-Z-' ]*$/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$nameErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Only letters and white space allowed\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-empty\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$emailErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Email is required\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// check if e-mail address is well-formed</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">filter_var</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FILTER_VALIDATE_EMAIL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$emailErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Invalid email format\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-empty\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"website\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$website</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$website</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"website\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// check if URL address syntax is valid (this regular expression also allows dashes in the URL)</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&amp;@#\\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_|]/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$website</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$websiteErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Invalid URL\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-empty\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"comment\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"comment\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-empty\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"gender\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$genderErr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Gender is required\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$gender</span> <span class=\"token operator\">=</span> <span class=\"token function\">test_input</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"gender\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-php"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next step is to show how to prevent the form from emptying all the input fields when the user submits the form.",
      "html": "<p>The next step is to show how to prevent the form from emptying all the input \nfields when the user submits the form.</p>"
    }
  ]
}