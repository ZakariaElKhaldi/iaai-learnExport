{
  "id": "c0e9c767-cfe1-425e-8135-058037882c62",
  "title": "PythonVariables",
  "slug": "pythonvariables",
  "metadata": {
    "description": "Learn about PythonVariables with clear explanations and practical examples.",
    "keywords": [
      "type",
      "variables",
      "example",
      "variable",
      "print",
      "data",
      "john",
      "python",
      "casting",
      "declared"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nVariables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Variables\nVariables are containers for storing data values.\nCreating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\nExample\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n\nVariables do not need to be declared with any particular\ntype\n, and can even change type after they have been set.\nExample\nx = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)\n\nCasting\nIf you want to specify the data type of a variable, this can be done with casting.\nExample\nx = \n  str(3)\u00a0\u00a0\u00a0 # x will be '3'\ny = int(3)\u00a0\u00a0\u00a0 # y \n  will be 3\nz = float(3)\u00a0 # z will be 3.0\n\nGet the Type\nYou can get the data type of a variable with the\ntype()\nfunction.\nExample\nx = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))\n\nYou will learn more about\ndata types\nand\ncasting\nlater in this tutorial.\nSingle or Double Quotes?\nString variables can be declared either by using single or double quotes:\nExample\nx = \"John\"\n# is the same as\nx = \n  'John'\n\nCase-Sensitive\nVariable names are case-sensitive.\nExample\nThis will create two variables:\na = 4\nA = \n  \"Sally\"\n#A will not overwrite a\n\nVideo: Python Variables\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = 5\ny = \"John\"\nprint(x)\nprint(y)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "x = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = \n  str(3)\u00a0\u00a0\u00a0 # x will be '3'\ny = int(3)\u00a0\u00a0\u00a0 # y \n  will be 3\nz = float(3)\u00a0 # z will be 3.0",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "x = \"John\"\n# is the same as\nx = \n  'John'",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "a = 4\nA = \n  \"Sally\"\n#A will not overwrite a",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = 5\ny = \"John\"\nprint(x)\n# TODO: Complete this line",
      "solution": "x = 5\ny = \"John\"\nprint(x)\nprint(y)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\n# TODO: Complete this line",
      "solution": "x = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "417275e0-12ff-468b-b3f7-7aa272772c42",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e575f17a-a971-4e00-b47e-3cbc648447e5",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d07c7c53-8aae-49de-9756-247fc403d58c",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nVariables\n\nVariables\nVariables?",
      "options": [
        "created the moment you first assign a value to it",
        "None of the above.",
        "containers for storing data values",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Python\nVariables\n\nVariables\nVariables is 'containers for storing data values'."
    },
    {
      "question": "What is A variable?",
      "options": [
        "created the moment you first assign a value to it",
        "containers for storing data values",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of A variable is 'created the moment you first assign a value to it'."
    }
  ],
  "summary": "This tutorial covers PythonVariables concepts and techniques. You'll learn how to use PythonVariables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonVariables and how to apply it in your projects."
}