{
  "id": "c7ad9a1f-8be4-428e-bacc-9649d7e82069",
  "title": "PythonMath",
  "slug": "pythonmath",
  "metadata": {
    "description": "Learn about PythonMath with clear explanations and practical examples.",
    "keywords": [
      "math",
      "module",
      "print",
      "example",
      "returns",
      "value",
      "import",
      "functions",
      "number",
      "python"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Math"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nMath",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.\nBuilt-in Math Functions\nThe\nmin()\nand\nmax()\nfunctions can be used to find the lowest or highest value in an iterable:\nExample\nx = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)\n\nThe\nabs()\nfunction returns the absolute (positive) value of the specified number:\nExample\nx = abs(-7.25)\nprint(x)\n\nThe\npow(\nx\n,\ny\n)\nfunction returns the value of x to the power of y (x\ny\n).\nExample\nReturn the value of 4 to the power of 3 (same as 4 * 4 * 4):\nx = pow(4, 3)\nprint(x)\n\nThe Math Module\nPython has also a built-in module called\nmath\n, which extends the list of mathematical functions.\nTo use it, you must import the\nmath\nmodule:\nimport math\nWhen you have imported the\nmath\nmodule, you \ncan start using methods and constants of the module.\nThe\nmath.sqrt()\nmethod for example, returns the square root of a number:\nExample\nimport \n    math\nx = math.sqrt(64)\nprint(x)\n\nThe\nmath.ceil()\nmethod rounds a number upwards to \nits nearest integer, and the\nmath.floor()\nmethod rounds a number downwards to its nearest integer, and returns the result:\nExample\nimport \n    math\nx = math.ceil(1.4)\ny = math.floor(1.4)\nprint(x) # \n    returns 2\nprint(y) # returns 1\n\nThe\nmath.pi\nconstant, returns the value of \nPI (3.14...):\nExample\nimport \n    math\nx = math.pi\nprint(x)\n\nComplete Math Module Reference\nIn our\nMath Module Reference\nyou will \nfind a complete reference of all methods and constants that belongs to the Math module.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "x = abs(-7.25)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = pow(4, 3)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import math",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import \n    math\nx = math.sqrt(64)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import \n    math\nx = math.ceil(1.4)\ny = math.floor(1.4)\nprint(x) # \n    returns 2\nprint(y) # returns 1",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import \n    math\nx = math.pi\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\n# TODO: Complete this line",
      "solution": "x = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "x = abs(-7.25)\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "37c16068-9088-444b-bb61-bc7cda36e16e",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b5d01bb2-a3a5-44cf-9ce3-41ac1ffc5a8f",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bd401b77-ec63-44f8-a536-db00ede21276",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonMath concepts and techniques. You'll learn how to use PythonMath effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonMath and how to apply it in your projects."
}