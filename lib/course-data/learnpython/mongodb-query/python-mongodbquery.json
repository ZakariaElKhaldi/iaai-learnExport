{
  "id": "0d38c66d-64ea-4cea-853c-4171cab02a4e",
  "title": "Python MongoDBQuery",
  "slug": "python-mongodbquery",
  "metadata": {
    "description": "Learn about Python MongoDBQuery with clear explanations and practical examples.",
    "keywords": [
      "python",
      "find",
      "address",
      "query",
      "example",
      "pymongo",
      "myclient",
      "mydb",
      "mycol",
      "myquery",
      "mydoc"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "MongoDB Query"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python MongoDB\nQuery",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Filter the Result\nWhen finding documents in a collection, you can filter the result by using a \nquery object.\nThe first argument of the\nfind()\nmethod \nis a query object, and is used to limit the search.\nExample\nFind document(s) with the address \"Park Lane 38\":\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Park Lane 38\" }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)\nRun example \u00bb\nAdvanced Query\nTo make advanced queries you can use modifiers as values in the query object.\nE.g. to find the documents where the \"address\" field starts with the letter \"S\" \nor higher (alphabetically), use the greater than modifier:\n{\"$gt\": \"S\"}\n:\nExample\nFind documents where the address starts with the letter \"S\" or \nhigher:\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$gt\": \"S\" } }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)\nRun example \u00bb\nFilter With Regular Expressions\nYou can also use regular expressions as a modifier.\nRegular expressions can only be used to query\nstrings\n.\nTo find only the documents where the \"address\" field starts with the letter \"S\", use the regular \nexpression\n{\"$regex\": \"^S\"}\n:\nExample\nFind documents where the address starts with the letter \"S\":\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Park Lane 38\" }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$gt\": \"S\" } }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Park Lane 38\" }\n# TODO: Complete this line\nfor x in mydoc:\nprint(x)",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Park Lane 38\" }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$gt\": \"S\" } }\n# TODO: Complete this line\nfor x in mydoc:\nprint(x)",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$gt\": \"S\" } }\nmydoc = mycol.find(myquery)\nfor x in mydoc:\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "797e7ade-d8ca-4bac-9bef-57a557bf603e",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9f39080-0be2-40b5-af21-5c2d61352e74",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5bc6465f-76c0-4f2b-983d-c8849eda6194",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "a query object",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of method is 'a query object'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Python MongoDBQuery concepts and techniques. You'll learn how to use Python MongoDBQuery effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python MongoDBQuery and how to apply it in your projects."
}