{
  "id": "6a37a237-b572-4c2e-9880-e894c8cdef0b",
  "title": "Python - List Comprehension",
  "slug": "python-list-comprehension",
  "metadata": {
    "description": "Learn about Python - List Comprehension with clear explanations and practical examples.",
    "keywords": [
      "python",
      "list",
      "newlist",
      "example",
      "fruits",
      "apple",
      "banana",
      "condition",
      "comprehension",
      "expression",
      "iterable"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "List Comprehension"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python - List Comprehension",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "List Comprehension\nList comprehension offers a shorter syntax when you want to create a new list based on the values of an \nexisting list.\nExample:\nBased on a list of fruits, you want a new list, containing only the fruits \nwith the letter \"a\" in the name.\nWithout list comprehension you will have to write a\nfor\nstatement \nwith a conditional test inside:\nExample\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\nfor x in fruits:\nif \"a\" in x:\nnewlist.append(x)\nprint(newlist)\n\nWith list comprehension you can do all that with only one line of code:\nExample\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x \n  for x in fruits if \"a\" in x]\nprint(newlist)\n\nThe Syntax\nnewlist = [\nexpression\nfor\nitem\nin\niterable\nif\ncondition\n== True]\nThe return value is a new list, leaving the old list unchanged.\nCondition\nThe\ncondition\nis like a filter that only accepts the items that evaluate to\nTrue\n.\nExample\nOnly accept items that are not \"apple\":\nnewlist = [x for x in fruits if x != \"apple\"]\n\nThe condition\nif x != \"apple\"\nwill return\nTrue\nfor all elements other \nthan \"apple\", making the new list contain all fruits except \"apple\".\nThe\ncondition\nis optional and can be omitted:\nExample\nWith no\nif\nstatement:\nnewlist = [x for x in fruits]\n\nIterable\nThe\niterable\ncan be any iterable object, like a list, tuple, set etc.\nExample\nYou can use the\nrange()\nfunction to create an iterable:\nnewlist = [x for x in range(10)]\n\nSame example, but with a condition:\nExample\nAccept only numbers lower than 5:\nnewlist = [x for x in range(10) if x < 5]\n\nExpression\nThe\nexpression\nis the current item in the iteration, but it is also the \noutcome, which you can manipulate before it ends up like a list item in the new \nlist:\nExample\nSet the values in the new list to upper case:\nnewlist = [x.upper() \n  for x in fruits]\n\nYou can set the outcome to whatever you like:\nExample\nSet all values in the new list to 'hello':\nnewlist = ['hello' for x in fruits]\n\nThe\nexpression\ncan also contain conditions, not like a filter, but as a \nway to manipulate the outcome:\nExample\nReturn \"orange\" instead of \"banana\":\nnewlist = [x if x != \"banana\" else \"orange\" \n  for x in fruits]\n\nThe\nexpression\nin the example above says:\n\"Return the item if it is not banana, if it is banana return orange\".\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\nfor x in fruits:\nif \"a\" in x:\nnewlist.append(x)\nprint(newlist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x \n  for x in fruits if \"a\" in x]\nprint(newlist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "newlist = [x for x in fruits if x != \"apple\"]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "newlist = [x for x in fruits]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "newlist = [x for x in range(10)]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "newlist = [x for x in range(10) if x < 5]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "newlist = [x.upper() \n  for x in fruits]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "newlist = ['hello' for x in fruits]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "newlist = [x if x != \"banana\" else \"orange\" \n  for x in fruits]",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\nfor x in fruits:\n# TODO: Complete this line\nnewlist.append(x)\nprint(newlist)",
      "solution": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\nfor x in fruits:\nif \"a\" in x:\nnewlist.append(x)\nprint(newlist)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x \n  for x in fruits if \"a\" in x]\n# TODO: Complete this line",
      "solution": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [x \n  for x in fruits if \"a\" in x]\nprint(newlist)"
    }
  ],
  "related_topics": [
    {
      "id": "83bab4bd-f7a0-429d-b263-2d135cdc89ed",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "01db32fc-a2fd-495e-8887-b1930c2a95e7",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "df67af4c-7eff-4729-9745-9f4877a15516",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The return value?",
      "options": [
        "None of the above.",
        "a new list",
        "like a filter that only accepts the items that evaluate to\nTrue",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The return value is 'a new list'."
    },
    {
      "question": "What is Condition\nThe\ncondition?",
      "options": [
        "like a filter that only accepts the items that evaluate to\nTrue",
        "None of the above.",
        "None of the above.",
        "a new list"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Condition\nThe\ncondition is 'like a filter that only accepts the items that evaluate to\nTrue'."
    }
  ],
  "summary": "This tutorial covers Python - List Comprehension concepts and techniques. You'll learn how to use Python - List Comprehension effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python - List Comprehension and how to apply it in your projects."
}