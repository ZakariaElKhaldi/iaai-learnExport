{
  "id": "80f3e4cf-7315-45a8-80e0-6975840263b5",
  "title": "PythonMatch",
  "slug": "pythonmatch",
  "metadata": {
    "description": "Learn about PythonMatch with clear explanations and practical examples.",
    "keywords": [
      "python",
      "case",
      "print",
      "match",
      "code",
      "block",
      "value",
      "example",
      "weekday",
      "statement",
      "statements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Match"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nMatch",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nmatch\nstatement is used to perform different actions based on different conditions.\nThe Python Match Statement\nInstead of writing\nmany\nif..else\nstatements, you can use the\nmatch\nstatement.\nThe\nmatch\nstatement selects one of many code blocks to be executed.\nSyntax\nmatch\nexpression\n:\ncase x:\ncode block\ncase y:\ncode block\ncase z:\ncode block\nThis is how it works:\nThe\nmatch\nexpression is evaluated once.\nThe value of the expression is compared with the values of each\ncase\n.\nIf there is a match, the associated block of code is executed.\nThe example below uses the weekday number to print the weekday name:\nExample\nday = 4\nmatch day:\ncase 1:\nprint(\"Monday\")\ncase 2:\nprint(\"Tuesday\")\ncase 3:\nprint(\"Wednesday\")\ncase 4:\nprint(\"Thursday\")\ncase 5:\nprint(\"Friday\")\ncase 6:\nprint(\"Saturday\")\ncase 7:\nprint(\"Sunday\")\n\nDefault Value\nUse the underscore character\n_\nas the last \ncase value if you want a code block to execute when there are not other matches:\nExample\nday = 4\nmatch day:\ncase 6:\nprint(\"Today is Saturday\")\ncase 7:\nprint(\"Today is Sunday\")\ncase _:\nprint(\"Looking forward to the Weekend\")\n\nThe value\n_\nwill always match, so it is important to place it as the\nlast\ncase\nto make it \nbeahave as a default\ncase\n.\nCombine Values\nUse the pipe character\n|\nas an or operator in the\ncase\nevaluation to check \nfor more than one value match in one\ncase\n:\nExample\nday = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5:\nprint(\"Today is a weekday\")\ncase 6 | 7:\nprint(\"I love \n  weekends!\")\n\nIf Statements as Guards\nYou can add\nif\nstatements in the case evaluation as an extra condition-check:\nExample\nmonth = 5\nday = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5 if month == 4:\nprint(\"A weekday in April\")\ncase 1 | 2 | 3 | 4 | 5 if month == 5:\nprint(\"A weekday in May\")\ncase _:\nprint(\"No match\")\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "match\nexpression\n:\ncase x:\ncode block\ncase y:\ncode block\ncase z:\ncode block",
      "language": "python",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "day = 4\nmatch day:\ncase 1:\nprint(\"Monday\")\ncase 2:\nprint(\"Tuesday\")\ncase 3:\nprint(\"Wednesday\")\ncase 4:\nprint(\"Thursday\")\ncase 5:\nprint(\"Friday\")\ncase 6:\nprint(\"Saturday\")\ncase 7:\nprint(\"Sunday\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "day = 4\nmatch day:\ncase 6:\nprint(\"Today is Saturday\")\ncase 7:\nprint(\"Today is Sunday\")\ncase _:\nprint(\"Looking forward to the Weekend\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "day = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5:\nprint(\"Today is a weekday\")\ncase 6 | 7:\nprint(\"I love \n  weekends!\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "month = 5\nday = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5 if month == 4:\nprint(\"A weekday in April\")\ncase 1 | 2 | 3 | 4 | 5 if month == 5:\nprint(\"A weekday in May\")\ncase _:\nprint(\"No match\")",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "match\nexpression\n:\ncase x:\ncode block\ncase y:\n# TODO: Complete this line\ncase z:\ncode block",
      "solution": "match\nexpression\n:\ncase x:\ncode block\ncase y:\ncode block\ncase z:\ncode block"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "day = 4\nmatch day:\ncase 1:\nprint(\"Monday\")\ncase 2:\nprint(\"Tuesday\")\ncase 3:\nprint(\"Wednesday\")\ncase 4:\n# TODO: Complete this line\ncase 5:\nprint(\"Friday\")\ncase 6:\nprint(\"Saturday\")\ncase 7:\nprint(\"Sunday\")",
      "solution": "day = 4\nmatch day:\ncase 1:\nprint(\"Monday\")\ncase 2:\nprint(\"Tuesday\")\ncase 3:\nprint(\"Wednesday\")\ncase 4:\nprint(\"Thursday\")\ncase 5:\nprint(\"Friday\")\ncase 6:\nprint(\"Saturday\")\ncase 7:\nprint(\"Sunday\")"
    }
  ],
  "related_topics": [
    {
      "id": "27ed1caf-aa54-434a-872c-4cef7093e275",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1cb00494-8609-4ade-9eb4-ecd80f08f77b",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1a94d187-641d-49eb-a96d-d10c1f1baadf",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nMatch\n\nThe\nmatch\nstatement?",
      "options": [
        "None of the above.",
        "how it works:\nThe\nmatch\nexpression is evaluated once",
        "None of the above.",
        "used to perform different actions based on different conditions"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Python\nMatch\n\nThe\nmatch\nstatement is 'used to perform different actions based on different conditions'."
    },
    {
      "question": "What is code block\nThis?",
      "options": [
        "None of the above.",
        "how it works:\nThe\nmatch\nexpression is evaluated once",
        "used to perform different actions based on different conditions",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of code block\nThis is 'how it works:\nThe\nmatch\nexpression is evaluated once'."
    }
  ],
  "summary": "This tutorial covers PythonMatch concepts and techniques. You'll learn how to use PythonMatch effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonMatch and how to apply it in your projects."
}