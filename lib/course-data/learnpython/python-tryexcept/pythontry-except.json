{
  "id": "b9d36668-48e8-4458-a865-2c356f360dbc",
  "title": "PythonTry Except",
  "slug": "pythontry-except",
  "metadata": {
    "description": "Learn about PythonTry Except with clear explanations and practical examples.",
    "keywords": [
      "python",
      "print",
      "block",
      "error",
      "except",
      "raise",
      "exception",
      "example",
      "went",
      "wrong",
      "code"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Try...Except"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nTry Except",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\ntry\nblock lets you test a \nblock of code for errors.\nThe\nexcept\nblock lets you \nhandle the error.\nThe\nelse\nblock lets you \nexecute code when there is no error.\nThe\nfinally\nblock lets you \nexecute code, regardless of the result of the try- and except blocks.\nException Handling\nWhen an error occurs, or exception as we call it, Python will normally stop and \ngenerate an error message.\nThese exceptions can be handled using the\ntry\nstatement:\nExample\nThe\ntry\nblock will generate an exception, \n  because\nx\nis not defined:\ntry:\nprint(x)\nexcept:\nprint(\"An exception occurred\")\n\nSince the try block raises an error, the except block will be executed.\nWithout the try block, the program will crash and raise an error:\nExample\nThis statement will raise an error, \n  because\nx\nis not defined:\nprint(x)\n\nMany Exceptions\nYou can define as many exception blocks as you want, e.g. if you want to execute a \nspecial block of code for a special kind of error:\nExample\nPrint one message if the try block raises a\nNameError\nand another \n  for other errors:\ntry:\nprint(x)\nexcept NameError:\nprint(\"Variable x \n  is not defined\")\nexcept:\nprint(\"Something else went \n  wrong\")\n\nSee more Error types in our\nPython Built-in Exceptions Reference\n.\nElse\nYou can use the\nelse\nkeyword to define a \nblock of code to be executed if no errors were raised:\nExample\nIn this example, the\ntry\nblock does not \n  generate any error:\ntry:\nprint(\"Hello\")\nexcept:\nprint(\"Something went \n  wrong\")\nelse:\nprint(\"Nothing went wrong\")\n\nFinally\nThe\nfinally\nblock, if specified, will be executed \nregardless if the try block \nraises an error or not.\nExample\ntry:\nprint(x)\nexcept:\nprint(\"Something went \n  wrong\")\nfinally:\nprint(\"The 'try except' is finished\")\n\nThis can be useful to close objects and clean up resources:\nExample\nTry to open and write to a file that is not writable:\ntry:\nf = open(\"demofile.txt\")\ntry:\nf.write(\"Lorum Ipsum\")\nexcept:\nprint(\"Something went wrong when writing to the file\")\nfinally:\nf.close()\nexcept:\nprint(\"Something went wrong when opening the \n  file\")\n\nThe program can continue, without leaving the file object open.\nRaise an exception\nAs a Python developer you can choose to throw an exception if a condition occurs.\nTo throw (or raise) an exception, use the\nraise\nkeyword.\nExample\nRaise an error and stop the program if x is lower than 0:\nx = -1\nif x < 0:\nraise Exception(\"Sorry, no numbers below \n    zero\")\n\nThe\nraise\nkeyword is used to raise an \nexception.\nYou can define what kind of error to raise, and the text to print to the user.\nExample\nRaise a TypeError if x is not an integer:\nx = \"hello\"\nif not type(x) is int:\nraise TypeError(\"Only \n    integers are allowed\")\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "try:\nprint(x)\nexcept:\nprint(\"An exception occurred\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "print(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "try:\nprint(x)\nexcept NameError:\nprint(\"Variable x \n  is not defined\")\nexcept:\nprint(\"Something else went \n  wrong\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "try:\nprint(\"Hello\")\nexcept:\nprint(\"Something went \n  wrong\")\nelse:\nprint(\"Nothing went wrong\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "try:\nprint(x)\nexcept:\nprint(\"Something went \n  wrong\")\nfinally:\nprint(\"The 'try except' is finished\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "try:\nf = open(\"demofile.txt\")\ntry:\nf.write(\"Lorum Ipsum\")\nexcept:\nprint(\"Something went wrong when writing to the file\")\nfinally:\nf.close()\nexcept:\nprint(\"Something went wrong when opening the \n  file\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "x = -1\nif x < 0:\nraise Exception(\"Sorry, no numbers below \n    zero\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "x = \"hello\"\nif not type(x) is int:\nraise TypeError(\"Only \n    integers are allowed\")",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "try:\n# TODO: Complete this line\nexcept:\nprint(\"An exception occurred\")",
      "solution": "try:\nprint(x)\nexcept:\nprint(\"An exception occurred\")"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "print(x)"
    }
  ],
  "related_topics": [
    {
      "id": "451bdc25-1a7d-4c20-9dd0-c3620473fbed",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5eba1fe0-92dc-4e85-a160-23606bbad8ee",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cd71ec9d-70f9-48f2-8439-4861a8d892d2",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The\nelse\nblock lets you \nexecute code when there?",
      "options": [
        "None of the above.",
        "None of the above.",
        "no error",
        "not defined:\ntry:\nprint(x)\nexcept:\nprint(\"An exception occurred\")\n\nSince the try block raises an error"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The\nelse\nblock lets you \nexecute code when there is 'no error'."
    },
    {
      "question": "What is because\nx?",
      "options": [
        "not defined:\ntry:\nprint(x)\nexcept:\nprint(\"An exception occurred\")\n\nSince the try block raises an error",
        "None of the above.",
        "no error",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of because\nx is 'not defined:\ntry:\nprint(x)\nexcept:\nprint(\"An exception occurred\")\n\nSince the try block raises an error'."
    }
  ],
  "summary": "This tutorial covers PythonTry Except concepts and techniques. You'll learn how to use PythonTry Except effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonTry Except and how to apply it in your projects."
}