{
  "id": "d5686fef-6688-44d1-88e1-10883ea22392",
  "title": "PythonFunctions",
  "slug": "pythonfunctions",
  "metadata": {
    "description": "Learn about PythonFunctions with clear explanations and practical examples.",
    "keywords": [
      "python",
      "function",
      "arguments",
      "example",
      "print",
      "keyword",
      "argument",
      "name",
      "fname",
      "parameter",
      "positional"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Python\nFunctions\n\nA function is a block of code which only runs when it is called",
      "content": ".\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\nCreating a Function\nIn Python a function is defined using the\ndef\nkeyword:\nExample\ndef my_function():\nprint(\"Hello from a function\")\nCalling a Function\nTo call a function, use the function name followed by parenthesis:\nExample\ndef my_function():\nprint(\"Hello from a function\")\nmy_function()\n\nArguments\nInformation can be passed into functions as arguments.\nArguments are specified after the function name, inside the parentheses.\nYou can add as many arguments as you want, just separate them with a comma.\nThe following example has a function with one argument (fname).\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:\nExample\ndef my_function(\nfname\n):\nprint(fname + \" Refsnes\")\nmy_function(\n\"Emil\"\n)\nmy_function(\n\"Tobias\"\n)\nmy_function(\n\"Linus\"\n)\n\nArguments\nare often shortened to\nargs\nin Python documentations.\nParameters or Arguments?\nThe terms\nparameter\nand\nargument\ncan be used for the same thing: information that are passed into a function.\nFrom a function's perspective:\nA parameter is the variable listed inside the parentheses in the function definition.\nAn argument is the value that is sent to the function when it is called.\nNumber of Arguments\nBy default, a function must be called with the correct number of arguments. \nMeaning that if your function expects 2 arguments, you have to call the function \nwith 2 arguments, not more, and not less.\nExample\nThis function expects 2 arguments, and gets 2 arguments:\ndef my_function(fname, lname):\nprint(fname + \" \" + lname)\nmy_function(\"Emil\", \"Refsnes\")\n\nIf you try to call the function with 1 or 3 arguments, you will get an error:\nExample\nThis function expects 2 arguments, but gets only 1:\ndef my_function(fname, lname):\nprint(fname + \" \" + lname)\nmy_function(\"Emil\")\n\nArbitrary Arguments, *args\nIf you do not know how many arguments that will be passed into your function,\nadd a\n*\nbefore the parameter name in the function definition.\nThis way the function will receive a\ntuple\nof arguments, and can access the items accordingly:\nExample\nIf the number of arguments is unknown, add a\n*\nbefore the parameter name:\ndef my_function(*kids):\nprint(\"The youngest child \n  is \" + kids[2])\nmy_function(\"Emil\", \"Tobias\", \"Linus\")\n\nArbitrary Arguments\nare often shortened to\n*args\nin Python documentations.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "You can also send arguments with the\nkey",
      "content": "=\nvalue\nsyntax.\nThis way the order of the arguments does not matter.\nExample\ndef my_function(child3, child2, child1):\nprint(\"The youngest child \n  is \" + child3)\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")\n\nThe phrase\nKeyword Arguments\nare often shortened to\nkwargs\nin Python documentations.\nArbitrary Keyword Arguments, **kwargs\nIf you do not know how many keyword arguments that will be passed into your function,\nadd two asterisk:\n**\nbefore the parameter name in the function definition.\nThis way the function will receive a\ndictionary\nof arguments, and can access the items accordingly:\nExample\nIf the number of keyword arguments is unknown, add a double\n**\nbefore the parameter name:\ndef my_function(**kid):\nprint(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")\n\nArbitrary Kword Arguments\nare often shortened to\n**kwargs\nin Python documentations.\nDefault Parameter Value\nThe following example shows how to use a default parameter value.\nIf we call the function without argument, it uses the default value:\nExample\ndef my_function(\ncountry = \"Norway\"\n):\nprint(\"I am from \" + \n  country)\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")\n\nPassing a List as an Argument\nYou can send any data types of argument to a function (string, number, list, dictionary etc.), \nand it will\nbe treated as the same data type inside the function.\nE.g. if you send a List as an argument, it will still be a List when it \nreaches the function:\nExample\ndef my_function(food):\nfor x in food:\nprint(x)\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)\n\nReturn Values\nTo let a function return a value, use the\nreturn\nstatement:\nExample\ndef my_function(x):\nreturn 5 * x\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))\n\nThe pass Statement\nfunction\ndefinitions cannot be empty, but if \nyou for some reason have a\nfunction\ndefinition with no content, put in the\npass\nstatement to avoid getting an error.\nExample\ndef myfunction():\npass\n\nPositional-Only Arguments\nYou can specify that a function can have ONLY positional arguments, or ONLY keyword arguments.\nTo specify that a function can have only positional arguments, add\n, /\nafter the arguments:\nExample\ndef my_function(x, /):\nprint(x)\nmy_function(3)\n\nWithout the\n, /\nyou are actually allowed to use keyword arguments even if the function\nexpects positional arguments:\nExample\ndef my_function(x):\nprint(x)\nmy_function(x = 3)\n\nBut when adding the\n, /\nyou will get an error if you try to send a \nkeyword argument:\nExample\ndef my_function(x, /):\nprint(x)\nmy_function(x = 3)\n\nKeyword-Only Arguments\nTo specify that a function can have only keyword arguments, add\n*,\nbefore\nthe arguments:\nExample\ndef my_function(*, x):\nprint(x)\nmy_function(x = 3)\n\nWithout the\n*,\nyou are allowed to use positional arguments even if the function\nexpects keyword arguments:\nExample\ndef my_function(x):\nprint(x)\nmy_function(3)\n\nBut with the\n*,\nyou will get an error if you try to send a \npositional argument:\nExample\ndef my_function(*, x):\nprint(x)\nmy_function(3)\n\nCombine Positional-Only and Keyword-Only\nYou can combine the two argument types in the same function.\nAny argument\nbefore\nthe\n/ ,\nare positional-only,\nand any argument\nafter\nthe\n*,\nare keyword-only.\nExample\ndef my_function(a, b, /, *, c, d):\nprint(a + b + c + d)\nmy_function(5, 6, c = 7, d = 8)\n\nRecursion\nPython also accepts function recursion, which means a defined function can call itself.\nRecursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\nIn this example,\ntri_recursion()\nis a function that we have defined to call itself (\"recurse\"). We use the\nk\nvariable as the data, which decrements (\n-1\n) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).\nTo a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.\nExample\nRecursion Example\ndef tri_recursion(k):\nif(k > 0):\nresult = k + tri_recursion(k - 1)\nprint(result)\nelse:\nresult = 0\nreturn result\nprint(\"Recursion Example Results:\")\ntri_recursion(6)\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "def my_function():\nprint(\"Hello from a function\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "def my_function():\nprint(\"Hello from a function\")\nmy_function()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "def my_function(\nfname\n):\nprint(fname + \" Refsnes\")\nmy_function(\n\"Emil\"\n)\nmy_function(\n\"Tobias\"\n)\nmy_function(\n\"Linus\"\n)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "def my_function(fname, lname):\nprint(fname + \" \" + lname)\nmy_function(\"Emil\", \"Refsnes\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "def my_function(fname, lname):\nprint(fname + \" \" + lname)\nmy_function(\"Emil\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "def my_function(*kids):\nprint(\"The youngest child \n  is \" + kids[2])\nmy_function(\"Emil\", \"Tobias\", \"Linus\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "def my_function(child3, child2, child1):\nprint(\"The youngest child \n  is \" + child3)\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "def my_function(**kid):\nprint(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "def my_function(\ncountry = \"Norway\"\n):\nprint(\"I am from \" + \n  country)\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "def my_function(food):\nfor x in food:\nprint(x)\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "def my_function(x):\nreturn 5 * x\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "def myfunction():\npass",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "def my_function(x, /):\nprint(x)\nmy_function(3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "def my_function(x):\nprint(x)\nmy_function(x = 3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "def my_function(x, /):\nprint(x)\nmy_function(x = 3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "def my_function(*, x):\nprint(x)\nmy_function(x = 3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "def my_function(x):\nprint(x)\nmy_function(3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "def my_function(*, x):\nprint(x)\nmy_function(3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "def my_function(a, b, /, *, c, d):\nprint(a + b + c + d)\nmy_function(5, 6, c = 7, d = 8)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "def tri_recursion(k):\nif(k > 0):\nresult = k + tri_recursion(k - 1)\nprint(result)\nelse:\nresult = 0\nreturn result\nprint(\"Recursion Example Results:\")\ntri_recursion(6)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "def my_function():\nprint(\"Hello from a function\")"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "def my_function():\nprint(\"Hello from a function\")\n# TODO: Complete this line",
      "solution": "def my_function():\nprint(\"Hello from a function\")\nmy_function()"
    }
  ],
  "related_topics": [
    {
      "id": "441f0ac4-2361-4154-9490-ad9d245eba33",
      "title": "Advanced Python Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "b2d4501a-8944-4c9c-abf4-719e7389fe26",
      "title": "Python Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "c84f7cdc-ab81-431e-8934-4e6a9c9913a5",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nFunctions\n\nA function is a block of code which only runs when it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "called",
        "defined using the\ndef\nkeyword:\nExample\ndef my_function():\nprint(\"Hello from a function\")\nCalling a Function\nTo call a function"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Python\nFunctions\n\nA function is a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Creating a Function\nIn Python a function?",
      "options": [
        "None of the above.",
        "defined using the\ndef\nkeyword:\nExample\ndef my_function():\nprint(\"Hello from a function\")\nCalling a Function\nTo call a function",
        "called",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Creating a Function\nIn Python a function is 'defined using the\ndef\nkeyword:\nExample\ndef my_function():\nprint(\"Hello from a function\")\nCalling a Function\nTo call a function'."
    }
  ],
  "summary": "This tutorial covers PythonFunctions concepts and techniques. You'll learn how to use PythonFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonFunctions and how to apply it in your projects."
}