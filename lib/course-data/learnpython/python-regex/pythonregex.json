{
  "id": "bfbf0c2c-031e-4f3b-863a-269df175815e",
  "title": "PythonRegEx",
  "slug": "pythonregex",
  "metadata": {
    "description": "Learn about PythonRegEx with clear explanations and practical examples.",
    "keywords": [
      "python",
      "match",
      "returns",
      "string",
      "search",
      "character",
      "print",
      "spain",
      "characters",
      "import",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 6,
    "category": "LearnPython",
    "subcategory": "Python RegEx"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nRegEx",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.\nRegEx can be used to check if a string contains the specified search pattern.\nRegEx Module\nPython has a built-in package called\nre\n, which can be used to work with \nRegular Expressions.\nImport the\nre\nmodule:\nimport re\nRegEx in Python\nWhen you have imported the\nre\nmodule, you \ncan start using regular expressions:\nExample\nSearch the string to see if it starts with \"The\" and ends with \"Spain\":\nimport \n    re\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)\n\nRegEx Functions\nThe\nre\nmodule offers a set of functions that allows \nus to search a string for a match:\nFunction\nDescription\nfindall\nReturns a list containing all matches\nsearch\nReturns a\nMatch object\nif there is a match anywhere in the string\nsplit\nReturns a list where the string has been split at each match\nsub\nReplaces one or many matches with a string\nMetacharacters\nMetacharacters are characters with a special meaning:\nCharacter\nDescription\nExample\nTry it\n[]\nA set of characters\n\"[a-m]\"\nTry it \u00bb\n\\\nSignals a special sequence (can also be used to escape special characters)\n\"\\d\"\nTry it \u00bb\n.\nAny character (except newline character)\n\"he..o\"\nTry it \u00bb\n^\nStarts with\n\"^hello\"\nTry it \u00bb\n$\nEnds with\n\"planet$\"\nTry it \u00bb\n*\nZero or more occurrences\n\"he.*o\"\nTry it \u00bb\n+\nOne or more occurrences\n\"he.+o\"\nTry it \u00bb\n?\nZero or one occurrences\n\"he.?o\"\nTry it \u00bb\n{}\nExactly the specified number of occurrences\n\"he.{2}o\"\nTry it \u00bb\n|\nEither or\n\"falls|stays\"\nTry it \u00bb\n()\nCapture and group\nFlags\nYou can add flags to the pattern when using regular expressions.\nFlag\nShorthand\nDescription\nTry it\nre.ASCII\nre.A\nReturns only ASCII matches\nTry it \u00bb\nre.DEBUG\nReturns debug information\nTry it \u00bb\nre.DOTALL\nre.S\nMakes the . character match all characters (including newline character)\nTry it \u00bb\nre.IGNORECASE\nre.I\nCase-insensitive matching\nTry it \u00bb\nre.MULTILINE\nre.M\nReturns only matches at the beginning of each line\nTry it \u00bb\nre.NOFLAG\nSpecifies that no flag is set for this pattern\nre.UNICODE\nre.U\nReturns Unicode matches. This is default from Python 3. For Python 2: use this flag to return only Unicode matches\nTry it \u00bb\nre.VERBOSE\nre.X\nAllows whitespaces and comments inside patterns. Makes the pattern more readable\nTry it \u00bb\nSpecial Sequences\nA special sequence is a\n\\\nfollowed by one of the characters in the list below, and has a special meaning:\nCharacter\nDescription\nExample\nTry it\n\\A\nReturns a match if the specified characters are at the beginning of the \nstring\n\"\\AThe\"\nTry it \u00bb\n\\b\nReturns a match where the specified characters are at the beginning or at the \nend of a word\n(the \"r\" in the beginning is making sure that the string is \nbeing treated as a \"raw string\")\nr\"\\bain\"\nr\"ain\\b\"\nTry it \u00bb\nTry it \u00bb\n\\B\nReturns a match where the specified characters are present, but NOT at the beginning \n(or at \nthe end) of a word\n(the \"r\" in the beginning is making sure that the string \nis being treated as a \"raw string\")\nr\"\\Bain\"\nr\"ain\\B\"\nTry it \u00bb\nTry it \u00bb\n\\d\nReturns a match where the string contains digits (numbers from 0-9)\n\"\\d\"\nTry it \u00bb\n\\D\nReturns a match where the string DOES NOT contain digits\n\"\\D\"\nTry it \u00bb\n\\s\nReturns a match where the string contains a white space character\n\"\\s\"\nTry it \u00bb\n\\S\nReturns a match where the string DOES NOT contain a white space character\n\"\\S\"\nTry it \u00bb\n\\w\nReturns a match where the string contains any word characters (characters from \na to Z, digits from 0-9, and the underscore _ character)\n\"\\w\"\nTry it \u00bb\n\\W\nReturns a match where the string DOES NOT contain any word characters\n\"\\W\"\nTry it \u00bb\n\\Z\nReturns a match if the specified characters are at the end of the string\n\"Spain\\Z\"\nTry it \u00bb\nSets\nA set is a set of characters inside a pair of square brackets\n[]\nwith a special meaning:\nSet\nDescription\nTry it\n[arn]\nReturns a match where one of the specified characters (\na\n,\nr\n, or\nn\n) is \npresent\nTry it \u00bb\n[a-n]\nReturns a match for any lower case character, alphabetically between\na\nand\nn\nTry it \u00bb\n[^arn]\nReturns a match for any character EXCEPT\na\n,\nr\n, and\nn\nTry it \u00bb\n[0123]\nReturns a match where any of the specified digits (\n0\n,\n1\n,\n2\n, or\n3\n) are \npresent\nTry it \u00bb\n[0-9]\nReturns a match for any digit between\n0\nand\n9\nTry it \u00bb\n[0-5][0-9]\nReturns a match for any two-digit numbers from\n00\nand\n59\nTry it \u00bb\n[a-zA-Z]\nReturns a match for any character alphabetically between\na\nand\nz\n, lower case OR upper case\nTry it \u00bb\n[+]\nIn sets,\n+\n,\n*\n,\n.\n,\n|\n,\n()\n,\n$\n,\n{}\nhas no special meaning, so\n[+]\nmeans: return a match for any\n+\ncharacter in the string\nTry it \u00bb\nThe findall() Function\nThe\nfindall()\nfunction returns a list containing all matches.\nExample\nPrint a list of all matches:\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"ai\", \n  txt)\nprint(x)\n\nThe list contains the matches in the order they are found.\nIf no matches are found, an empty list is returned:\nExample\nReturn an empty list if no match was found:\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"Portugal\", \n  txt)\nprint(x)\n\nThe search() Function\nThe\nsearch()\nfunction searches the string \nfor a match, and returns a\nMatch object\nif there is a \nmatch.\nIf there is more than one match, \nonly the first occurrence of the match will be returned:\nExample\nSearch for the first white-space character in the string:\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"\\s\", \n  txt)\nprint(\"The first white-space character is located in \n  position:\", x.start())\n\nIf no matches are found, the value\nNone\nis returned:\nExample\nMake a search that returns no match:\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"Portugal\", \n  txt)\nprint(x)\n\nThe split() Function\nThe\nsplit()\nfunction returns a list where \nthe string has been split at each match:\nExample\nSplit at each white-space character:\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", \n  txt)\nprint(x)\n\nYou can control the number of occurrences by specifying the\nmaxsplit\nparameter:\nExample\nSplit the string only at the first occurrence:\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", \n  txt, \n  1)\nprint(x)\n\nThe sub() Function\nThe\nsub()\nfunction replaces the matches with \nthe text of your choice:\nExample\nReplace every white-space character with the number 9:\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \n  \"9\", txt)\nprint(x)\n\nYou can control the number of replacements by specifying the\ncount\nparameter:\nExample\nReplace the first 2 occurrences:\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \n  \"9\", txt, 2)\nprint(x)\n\nMatch Object\nA Match Object is an object containing information \nabout the search and the result.\nNote:\nIf there is no match, the value\nNone\nwill be \nreturned, instead of the Match Object.\nExample\nDo a search that will return a Match Object:\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"ai\", \n  txt)\nprint(x) #this will print an object\n\nThe Match object has properties and methods used to retrieve information \nabout the search, and the result:\n.span()\nreturns a tuple containing the start-, and end positions of the match.\n.string\nreturns the string passed into the function\n.group()\nreturns the part of the string where there was a match\nExample\nPrint the position (start- and end-position) of the first match occurrence.\nThe regular expression looks for any words that starts with an upper case \n  \"S\":\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.span()\n)\n\nExample\nPrint the string passed into the function:\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.string\n)\n\nExample\nPrint the part of the string where there was a match.\nThe regular expression looks for any words that starts with an upper case \n  \"S\":\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.group()\n)\n\nNote:\nIf there is no match, the value\nNone\nwill be \nreturned, instead of the Match Object.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import re",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import \n    re\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.findall(\"ai\", \n  txt)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.findall(\"Portugal\", \n  txt)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(\"\\s\", \n  txt)\nprint(\"The first white-space character is located in \n  position:\", x.start())",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(\"Portugal\", \n  txt)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", \n  txt)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", \n  txt, \n  1)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \n  \"9\", txt)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \n  \"9\", txt, 2)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(\"ai\", \n  txt)\nprint(x) #this will print an object",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.span()\n)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.string\n)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "import re\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(\nx.group()\n)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "import re"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import \n# TODO: Complete this line\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)",
      "solution": "import \n    re\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)"
    }
  ],
  "related_topics": [
    {
      "id": "5991aebb-f269-4097-bab2-71ffd4aa1488",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e720b6d6-e194-43dc-88ce-05b84b6aeb4e",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d32223e8-b1d8-4ab6-9e2f-24e6f9d2d655",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Function\nDescription\nfindall\nReturns a list containing all matches\nsearch\nReturns a\nMatch object\nif there is a match anywhere in the string\nsplit\nReturns a list where the string has been split at each match\nsub\nReplaces one or many matches with a string\nMetacharacters\nMetacharacters?",
      "options": [
        "None of the above.",
        "Not a Function\nDescription\nfindall\nReturns a list containing all matches\nsearch\nReturns a\nMatch object\nif there is a match anywhere in the string\nsplit\nReturns a list where the string has been split at each match\nsub\nReplaces one or many matches with a string\nMetacharacters\nMetacharacters.",
        "None of the above.",
        "characters with a special meaning:\nCharacter\nDescription\nExample\nTry it\n[]\nA set of characters\n\"[a-m]\"\nTry it \u00bb\n\\\nSignals a special sequence (can also be used to escape special characters)\n\"\\d\"\nTry it \u00bb"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Function\nDescription\nfindall\nReturns a list containing all matches\nsearch\nReturns a\nMatch object\nif there is a match anywhere in the string\nsplit\nReturns a list where the string has been split at each match\nsub\nReplaces one or many matches with a string\nMetacharacters\nMetacharacters is 'characters with a special meaning:\nCharacter\nDescription\nExample\nTry it\n[]\nA set of characters\n\"[a-m]\"\nTry it \u00bb\n\\\nSignals a special sequence (can also be used to escape special characters)\n\"\\d\"\nTry it \u00bb'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonRegEx concepts and techniques. You'll learn how to use PythonRegEx effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonRegEx and how to apply it in your projects."
}