{
  "id": "c1e38ca6-a232-45ab-be52-42d0db7699e8",
  "title": "PythonDatetime",
  "slug": "pythondatetime",
  "metadata": {
    "description": "Learn about PythonDatetime with clear explanations and practical examples.",
    "keywords": [
      "python",
      "datetime",
      "date",
      "year",
      "version",
      "month",
      "import",
      "example",
      "print",
      "weekday",
      "number"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Dates"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nDatetime",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Dates\nA date in Python is not a data type of its own, but we can import a module \nnamed\ndatetime\nto work with dates as date \nobjects.\nExample\nImport the datetime module and display the current date:\nimport datetime\nx = datetime.datetime.now()\nprint(x)\n\nDate Output\nWhen we execute the code from the example above the result will be:\nThe date contains year, month, day, hour, minute, second, and microsecond.\nThe\ndatetime\nmodule has many methods to return information about the date \nobject.\nHere are a few examples, you will learn more about them later in this \nchapter:\nExample\nReturn the year and name of weekday:\nimport datetime\nx = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))\n\nCreating Date Objects\nTo create a date, we can use the\ndatetime()\nclass (constructor) of the\ndatetime\nmodule.\nThe\ndatetime()\nclass requires three parameters to create a date: year, \nmonth, day.\nExample\nCreate a date object:\nimport datetime\nx = datetime.datetime(2020, 5, 17)\nprint(x)\n\nThe\ndatetime()\nclass also takes parameters for time and timezone (hour, \nminute, second, microsecond, tzone), but they are optional, and has a default \nvalue of\n0\n, (\nNone\nfor timezone).\nThe strftime() Method\nThe\ndatetime\nobject has a method for formatting date objects into readable strings.\nThe method is called\nstrftime()\n, and takes one parameter,\nformat\n, to specify the format of the returned string:\nExample\nDisplay the name of the month:\nimport datetime\nx = datetime.datetime(2018, 6, 1)\nprint(x.strftime(\"%B\"))\n\nA reference of all the legal format codes:\nDirective\nDescription\nExample\nTry it\n%a\nWeekday, short version\nWed\nTry it \u00bb\n%A\nWeekday, full version\nWednesday\nTry it \u00bb\n%w\nWeekday as a number 0-6, 0 is Sunday\n3\nTry it \u00bb\n%d\nDay of month 01-31\n31\nTry it \u00bb\n%b\nMonth name, short version\nDec\nTry it \u00bb\n%B\nMonth name, full version\nDecember\nTry it \u00bb\n%m\nMonth as a number 01-12\n12\nTry it \u00bb\n%y\nYear, short version, without century\n18\nTry it \u00bb\n%Y\nYear, full version\n2018\nTry it \u00bb\n%H\nHour 00-23\n17\nTry it \u00bb\n%I\nHour 00-12\n05\nTry it \u00bb\n%p\nAM/PM\nPM\nTry it \u00bb\n%M\nMinute 00-59\n41\nTry it \u00bb\n%S\nSecond 00-59\n08\nTry it \u00bb\n%f\nMicrosecond 000000-999999\n548513\nTry it \u00bb\n%z\nUTC offset\n+0100\n%Z\nTimezone\nCST\n%j\nDay number of year 001-366\n365\nTry it \u00bb\n%U\nWeek number of year, Sunday as the first day of week, 00-53\n52\nTry it \u00bb\n%W\nWeek number of year, Monday as the first day of week, 00-53\n52\nTry it \u00bb\n%c\nLocal version of date and time\nMon Dec 31 17:41:00 2018\nTry it \u00bb\n%C\nCentury\n20\nTry it \u00bb\n%x\nLocal version of date\n12/31/18\nTry it \u00bb\n%X\nLocal version of time\n17:41:00\nTry it \u00bb\n%%\nA % character\n%\nTry it \u00bb\n%G\nISO 8601 year\n2018\nTry it \u00bb\n%u\nISO 8601 weekday (1-7)\n1\nTry it \u00bb\n%V\nISO 8601 weeknumber (01-53)\n01\nTry it \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import datetime\nx = datetime.datetime.now()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import datetime\nx = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import datetime\nx = datetime.datetime(2020, 5, 17)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import datetime\nx = datetime.datetime(2018, 6, 1)\nprint(x.strftime(\"%B\"))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import datetime\nx = datetime.datetime.now()\n# TODO: Complete this line",
      "solution": "import datetime\nx = datetime.datetime.now()\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import datetime\nx = datetime.datetime.now()\n# TODO: Complete this line\nprint(x.strftime(\"%A\"))",
      "solution": "import datetime\nx = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))"
    }
  ],
  "related_topics": [
    {
      "id": "1b8033a4-b781-4b15-8c29-f3d2cebcebc2",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6cb17524-0ce3-4d87-ad72-f51ebc0ba748",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "073fa9d7-f8d7-4d6d-8e31-07fcbb587fc7",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nDatetime\n\nPython Dates\nA date in Python?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a few examples",
        "not a data type of its own"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Python\nDatetime\n\nPython Dates\nA date in Python is 'not a data type of its own'."
    },
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "not a data type of its own",
        "a few examples",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Here is 'a few examples'."
    }
  ],
  "summary": "This tutorial covers PythonDatetime concepts and techniques. You'll learn how to use PythonDatetime effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonDatetime and how to apply it in your projects."
}