{
  "id": "4378d1a4-6bfb-4f3d-8c45-5d4708bc88f7",
  "title": "PythonIf ... Else",
  "slug": "pythonif-else",
  "metadata": {
    "description": "Learn about PythonIf ... Else with clear explanations and practical examples.",
    "keywords": [
      "python",
      "print",
      "greater",
      "else",
      "example",
      "statement",
      "statements",
      "conditions",
      "line",
      "elif",
      "equal"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python If...Else"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nIf ... Else",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals:\na == b\nNot Equals:\na != b\nLess than:\na < b\nLess than or equal to:\na <= b\nGreater than:\na > b\nGreater than or equal to:\na >= b\nThese conditions can be used in several ways, most commonly in \"if statements\" and loops.\nAn \"if statement\" is written by using the\nif\nkeyword.\nExample\nIf statement:\na = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")\n\nIn this example we use two variables,\na\nand\nb\n,\nwhich are used as part of the if statement to test whether\nb\nis greater than\na\n.\nAs\na\nis\n33\n, and\nb\nis\n200\n,\nwe know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".\nIndentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\nExample\nIf statement, without indentation (will raise an error):\na = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")\n# you will get an error\n\nElif\nThe\nelif\nkeyword is Python's way of saying \"if the \ntry this condition\".\nExample\na = 33\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")\n\nIn this example\na\nis equal to\nb\n, so the first condition is not true, but the\nelif\ncondition is true, so we print to screen that \"a and b are equal\".\nElse\nThe\nelse\nkeyword catches anything which isn't caught by the preceding conditions.\nExample\na = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")\nelse:\nprint(\"a is greater than b\")\n\nIn this example\na\nis greater than\nb\n,\nso the first condition is not true, also the\nelif\ncondition is not true,\nso we go to the\nelse\ncondition and print to screen that \"a is greater than b\".\nYou can also have an\nelse\nwithout the\nelif\n:\nExample\na = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelse:\nprint(\"b is not greater than a\")\n\nShort Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\nExample\nOne line if statement:\nif a > b: print(\"a is greater than b\")\n\nShort Hand If ... Else\nIf you have only one statement to execute, one for if, and one for else, you can put it \nall on the same line:\nExample\nOne line if else statement:\na = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")\n\nThis technique is known as\nTernary Operators\n, or\nConditional \n  Expressions\n.\nYou can also have multiple else statements on the same line:\nExample\nOne line if else statement, with 3 conditions:\na = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")\n\nAnd\nThe\nand\nkeyword is a logical operator, and \nis used to combine conditional statements:\nExample\nTest if\na\nis greater than\nb\n, AND if\nc\nis greater than\na\n:\na = 200\nb = 33\nc = 500\nif a > b and c > a:\nprint(\"Both conditions are True\")\n\nOr\nThe\nor\nkeyword is a logical operator, and \nis used to combine conditional statements:\nExample\nTest if\na\nis greater than\nb\n, OR if\na\nis greater than\nc\n:\na = 200\nb = 33\nc = 500\nif a > b or a > c:\nprint(\"At least one of the conditions is True\")\n\nNot\nThe\nnot\nkeyword is a logical operator, and \nis used to reverse the result of the conditional statement:\nExample\nTest if\na\nis NOT greater than\nb\n:\na = 33\nb = 200\nif not a > b:\nprint(\"a is NOT greater than b\")\n\nNested If\nYou can have\nif\nstatements inside\nif\nstatements, this is called\nnested\nif\nstatements.\nExample\nx = 41\nif x > 10:\nprint(\"Above ten,\")\nif x > 20:\nprint(\"and \n  also above 20!\")\nelse:\nprint(\"but not \n  above 20.\")\n\nThe pass Statement\nif\nstatements cannot be empty, but if you \nfor some reason have an\nif\nstatement with no content, put in the\npass\nstatement to avoid getting an error.\nExample\na = 33\nb = 200\nif b > a:\npass\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")\n# you will get an error",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "a = 33\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "a = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")\nelse:\nprint(\"a is greater than b\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "a = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelse:\nprint(\"b is not greater than a\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "if a > b: print(\"a is greater than b\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "a = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "a = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "a = 200\nb = 33\nc = 500\nif a > b and c > a:\nprint(\"Both conditions are True\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "a = 200\nb = 33\nc = 500\nif a > b or a > c:\nprint(\"At least one of the conditions is True\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "a = 33\nb = 200\nif not a > b:\nprint(\"a is NOT greater than b\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "x = 41\nif x > 10:\nprint(\"Above ten,\")\nif x > 20:\nprint(\"and \n  also above 20!\")\nelse:\nprint(\"but not \n  above 20.\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "a = 33\nb = 200\nif b > a:\npass",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "a = 33\nb = 200\nif b > a:\n# TODO: Complete this line",
      "solution": "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "a = 33\nb = 200\n# TODO: Complete this line\nprint(\"b is greater than a\")\n# you will get an error",
      "solution": "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")\n# you will get an error"
    }
  ],
  "related_topics": [
    {
      "id": "fb2e1e9b-c27c-4400-b102-cfec984125bd",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "90214407-84cf-40b9-86d8-540bcb3a7df7",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6e58ea64-9df3-43dd-a73a-2a3f9c30fa6c",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is b?",
      "options": [
        "greater than a\")\n\nIn this example we use two variables",
        "Not a b.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of b is 'greater than a\")\n\nIn this example we use two variables'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonIf ... Else concepts and techniques. You'll learn how to use PythonIf ... Else effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonIf ... Else and how to apply it in your projects."
}