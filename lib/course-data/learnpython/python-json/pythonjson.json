{
  "id": "2c10480b-17d8-40da-b971-adbf35bcb6fb",
  "title": "PythonJSON",
  "slug": "pythonjson",
  "metadata": {
    "description": "Learn about PythonJSON with clear explanations and practical examples.",
    "keywords": [
      "json",
      "python",
      "dumps",
      "print",
      "convert",
      "example",
      "result",
      "object",
      "import",
      "string"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python JSON"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nJSON",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JSON is a syntax for storing and exchanging data.\nJSON is text, written with JavaScript object notation.\nJSON in Python\nPython has a built-in package called\njson\n, which can be used to work with JSON data.\nExample\nImport the json module:\nimport json\nParse JSON - Convert from JSON to Python\nIf you have a JSON string, you can parse it by using the\njson.loads()\nmethod.\nThe result will be a\nPython dictionary\n.\nExample\nConvert from JSON to Python:\nimport json\n# some JSON:\nx =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'\n# parse x:\ny = json.loads(x)\n# the result is a \n  Python dictionary:\nprint(y[\"age\"])\n\nConvert from Python to JSON\nIf you have a Python object, you can convert it into a JSON string by \nusing the\njson.dumps()\nmethod.\nExample\nConvert from Python to JSON:\nimport json\n# a Python object (dict):\nx = {\n\"name\": \n  \"John\",\n\"age\": 30,\n\"city\": \"New York\"\n}\n# \n  convert into JSON:\ny = json.dumps(x)\n# the result is a JSON string:\nprint(y)\n\nYou can convert Python objects of the following types, into JSON strings:\ndict\nlist\ntuple\nstring\nint\nfloat\nTrue\nFalse\nNone\nExample\nConvert Python objects into JSON strings, and print the values:\nimport json\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \n  \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))\n\nWhen you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:\nPython\nJSON\ndict\nObject\nlist\nArray\ntuple\nArray\nstr\nString\nint\nNumber\nfloat\nNumber\nTrue\ntrue\nFalse\nfalse\nNone\nnull\nExample\nConvert a Python object containing all the legal data types:\nimport json\nx = {\n\"name\": \n  \"John\",\n\"age\": 30,\n\"married\": True,\n\"divorced\": False,\n\"children\": (\"Ann\",\"Billy\"),\n\"pets\": \n  None,\n\"cars\": [\n{\"model\": \"BMW 230\", \"mpg\": \n  27.5},\n{\"model\": \"Ford Edge\", \"mpg\": 24.1}\n]\n}\nprint(json.dumps(x))\n\nFormat the Result\nThe example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.\nThe\njson.dumps()\nmethod has parameters to \nmake it easier to read the result:\nExample\nUse the\nindent\nparameter to define the numbers \nof indents:\njson.dumps(x, indent=4)\n\nYou can also define the separators, default value is (\", \", \": \"), which \nmeans using a comma and a space to separate each object, and a colon and a space \nto separate keys from values:\nExample\nUse the\nseparators\nparameter to change the \ndefault separator:\njson.dumps(x, indent=4, separators=(\". \", \" = \"))\n\nOrder the Result\nThe\njson.dumps()\nmethod has parameters to \norder the keys in the result:\nExample\nUse the\nsort_keys\nparameter to specify if \nthe result should be sorted or not:\njson.dumps(x, indent=4, sort_keys=True)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import json",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import json\n# some JSON:\nx =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'\n# parse x:\ny = json.loads(x)\n# the result is a \n  Python dictionary:\nprint(y[\"age\"])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import json\n# a Python object (dict):\nx = {\n\"name\": \n  \"John\",\n\"age\": 30,\n\"city\": \"New York\"\n}\n# \n  convert into JSON:\ny = json.dumps(x)\n# the result is a JSON string:\nprint(y)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import json\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \n  \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import json\nx = {\n\"name\": \n  \"John\",\n\"age\": 30,\n\"married\": True,\n\"divorced\": False,\n\"children\": (\"Ann\",\"Billy\"),\n\"pets\": \n  None,\n\"cars\": [\n{\"model\": \"BMW 230\", \"mpg\": \n  27.5},\n{\"model\": \"Ford Edge\", \"mpg\": 24.1}\n]\n}\nprint(json.dumps(x))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "json.dumps(x, indent=4)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "json.dumps(x, indent=4, separators=(\". \", \" = \"))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "json.dumps(x, indent=4, sort_keys=True)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "import json"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import json\n# some JSON:\nx =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n# TODO: Complete this line\n# parse x:\ny = json.loads(x)\n# the result is a \n  Python dictionary:\nprint(y[\"age\"])",
      "solution": "import json\n# some JSON:\nx =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'\n# parse x:\ny = json.loads(x)\n# the result is a \n  Python dictionary:\nprint(y[\"age\"])"
    }
  ],
  "related_topics": [
    {
      "id": "f4a816bf-9cd2-42c8-ad45-3691e8249e9a",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cdcfb395-14f4-423f-acb8-648b2cdf1896",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8aaf0dae-c79a-48c9-870f-9925edeae712",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nJSON\n\nJSON?",
      "options": [
        "text",
        "None of the above.",
        "a syntax for storing and exchanging data",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Python\nJSON\n\nJSON is 'a syntax for storing and exchanging data'."
    },
    {
      "question": "What is JSON?",
      "options": [
        "text",
        "None of the above.",
        "None of the above.",
        "a syntax for storing and exchanging data"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JSON is 'text'."
    }
  ],
  "summary": "This tutorial covers PythonJSON concepts and techniques. You'll learn how to use PythonJSON effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonJSON and how to apply it in your projects."
}