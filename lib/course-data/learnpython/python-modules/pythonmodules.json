{
  "id": "30b19817-002d-441c-94d1-3d93eda3f725",
  "title": "PythonModules",
  "slug": "pythonmodules",
  "metadata": {
    "description": "Learn about PythonModules with clear explanations and practical examples.",
    "keywords": [
      "python",
      "module",
      "import",
      "example",
      "mymodule",
      "name",
      "function",
      "file",
      "print",
      "using",
      "platform"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Modules"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nModules",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is a Module?\nConsider a module to be the same as a code library.\nA file containing a set of functions you want to include in your application.\nCreate a Module\nTo create a module just save the code you want in a file with the file extension\n.py\n:\nExample\nSave this code in a file named\nmymodule.py\ndef greeting(name):\nprint(\"Hello, \" + name)\nUse a Module\nNow we can use the module we just created, by using the\nimport\nstatement:\nExample\nImport the module named mymodule, and call the greeting function:\nimport mymodule\nmymodule.greeting(\"Jonathan\")\nRun Example \u00bb\nNote:\nWhen using a function from a module, use the syntax:\nmodule_name.function_name\n.\nVariables in Module\nThe module can contain functions, as already described, but also variables of \nall types (arrays, dictionaries, objects etc):\nExample\nSave this code in the file\nmymodule.py\nperson1 = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \"Norway\"\n}\nExample\nImport the module named mymodule, and access the person1 dictionary:\nimport mymodule\na = mymodule.person1[\"age\"]\nprint(a)\nRun Example \u00bb\nNaming a Module\nYou can name the module file whatever you like, but it must have the file extension\n.py\nRe-naming a Module\nYou can create an alias when you import a module, by using the\nas\nkeyword:\nExample\nCreate an alias for\nmymodule\ncalled\nmx\n:\nimport mymodule as mx\na = mx.person1[\"age\"]\nprint(a)\nRun Example \u00bb\nBuilt-in Modules\nThere are several built-in modules in Python, which you can import whenever you like.\nExample\nImport and use the\nplatform\nmodule:\nimport platform\nx = platform.system()\nprint(x)\n\nUsing the dir() Function\nThere is a built-in function to list all the function names (or variable \nnames) in a module. The\ndir()\nfunction:\nExample\nList all the defined names belonging to the platform module:\nimport platform\nx = dir(platform)\nprint(x)\n\nNote:\nThe dir() function can be used on\nall\nmodules, also the ones you create yourself.\nImport From Module\nYou can choose to import only parts from a module, by using the\nfrom\nkeyword.\nExample\nThe module named\nmymodule\nhas one function \nand one dictionary:\ndef greeting(name):\nprint(\"Hello, \" + name)\nperson1 \n  = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \n  \"Norway\"\n}\nExample\nImport only the person1 dictionary from the module:\nfrom mymodule import person1\nprint (person1[\"age\"])\nRun Example \u00bb\nNote:\nWhen importing using the\nfrom\nkeyword, do not use the module name when referring to elements in the module. \n  Example:\nperson1[\"age\"]\n,\nnot\nmymodule.person1[\"age\"]\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "def greeting(name):\nprint(\"Hello, \" + name)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import mymodule\nmymodule.greeting(\"Jonathan\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "person1 = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \"Norway\"\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import mymodule\na = mymodule.person1[\"age\"]\nprint(a)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import mymodule as mx\na = mx.person1[\"age\"]\nprint(a)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import platform\nx = platform.system()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import platform\nx = dir(platform)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "def greeting(name):\nprint(\"Hello, \" + name)\nperson1 \n  = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \n  \"Norway\"\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "from mymodule import person1\nprint (person1[\"age\"])",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "def greeting(name):\nprint(\"Hello, \" + name)"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "import mymodule\nmymodule.greeting(\"Jonathan\")"
    }
  ],
  "related_topics": [
    {
      "id": "31a096a0-0d17-4b97-8863-b723788ea515",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "dedd43a8-1a49-4062-a111-03cb2ff8f151",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "27fad4dc-2980-486f-8072-aedbc1537a00",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nModules\n\nWhat?",
      "options": [
        "a Module",
        "None of the above.",
        "several built-in modules in Python",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Python\nModules\n\nWhat is 'a Module'."
    },
    {
      "question": "What is in Modules\nThere?",
      "options": [
        "None of the above.",
        "several built-in modules in Python",
        "None of the above.",
        "a Module"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of in Modules\nThere is 'several built-in modules in Python'."
    }
  ],
  "summary": "This tutorial covers PythonModules concepts and techniques. You'll learn how to use PythonModules effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonModules and how to apply it in your projects."
}