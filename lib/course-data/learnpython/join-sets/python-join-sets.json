{
  "id": "42944be5-2102-485d-802c-9cae30014c20",
  "title": "Python -Join Sets",
  "slug": "python-join-sets",
  "metadata": {
    "description": "Learn about Python -Join Sets with clear explanations and practical examples.",
    "keywords": [
      "python",
      "sets",
      "method",
      "apple",
      "join",
      "example",
      "print",
      "items",
      "cherry",
      "union",
      "keep"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Join Sets"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python -\nJoin Sets",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Python",
      "content": "-\nJoin Sets\n\nJoin Sets\nThere are several ways to join two or more sets in Python.\nThe\nunion()\nand\nupdate()\nmethods joins all items from both sets.\nThe\nintersection()\nmethod keeps ONLY the duplicates.\nThe\ndifference()\nmethod keeps the items \nfrom the first set that are not in the other set(s).\nThe\nsymmetric_difference()\nmethod keeps all \nitems EXCEPT the duplicates.\nUnion\nThe\nunion()\nmethod returns a new set with all items from both sets.\nExample\nJoin set1 and set2 into a new set:\nset1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)\n\nYou can use the\n|\noperator instead of the\nunion()\nmethod, and you will get the same result.\nExample\nUse\n|\nto join two sets:\nset1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1 | set2\nprint(set3)\n\nJoin Multiple Sets\nAll the joining methods and operators can be used to join multiple sets.\nWhen using a method, just add more sets in the parentheses, separated by commas:\nExample\nJoin multiple sets with the\nunion()\nmethod:\nset1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \n  \"bananas\", \"cherry\"}\nmyset = set1.union(set2, set3, set4)\nprint(myset)\n\nWhen using the\n|\noperator, separate the sets \nwith more\n|\noperators:\nExample\nUse\n|\nto join two sets:\nset1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \n  \"bananas\", \"cherry\"}\nmyset = set1 | set2 | set3 |set4\nprint(myset)\n\nJoin a Set and a Tuple\nThe\nunion()\nmethod allows you to join a set with other data types, like lists or tuples.\nThe result will be a set.\nExample\nJoin a set with a tuple:\nx = {\"a\", \"b\", \"c\"}\ny = (1, 2, 3)\nz = x.union(y)\nprint(z)\n\nNote:\nThe\n|\noperator only allows you to join sets with sets, and not with other data types like you \ncan with the\nunion()\nmethod.\nUpdate\nThe\nupdate()\nmethod inserts all items from one set into another.\nThe\nupdate()\nchanges the original set, and does not return a new set.\nExample\nThe\nupdate()\nmethod inserts the items in set2 into set1:\nset1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)\n\nNote:\nBoth\nunion()\nand\nupdate()\nwill exclude any duplicate items.\nIntersection\nKeep ONLY the duplicates\nThe\nintersection()\nmethod will return a new set, that only contains the items that are present in both sets.\nExample\nJoin set1 and set2, but keep only the duplicates:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.intersection(set2)\nprint(set3)\n\nYou can use the\n&\noperator instead of the\nintersection()\nmethod, and you will get the same result.\nExample\nUse\n&\nto join two sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 \n  & set2\nprint(set3)\n\nNote:\nThe\n&\noperator only allows you to join sets with sets, and not with other data types like you \ncan with the\nintersection()\nmethod.\nThe\nintersection_update()\nmethod will also keep ONLY the duplicates,\nbut it will change the original set instead of returning a new set.\nExample\nKeep the items that exist in both\nset1\n, and\nset2\n:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.intersection_update(set2)\nprint(set1)\n\nThe values\nTrue\nand\n1\nare considered the same value. The same goes for\nFalse\nand\n0\n.\nExample\nJoin sets that contains the values\nTrue\n,\nFalse\n,\n1\n, and\n0\n, and see what is considered as duplicates:\nset1 = {\"apple\", 1,\u00a0 \"banana\", 0, \"cherry\"}\nset2 = {False, \"google\", \n  1, \"apple\", 2, True}\nset3 = set1.intersection(set2)\nprint(set3)\n\nDifference\nThe\ndifference()\nmethod will\nreturn a new set that will contain only the items from the first set that are not present in the other set.\nExample\nKeep all items from set1 that are not in set2:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.difference(set2)\nprint(set3)",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "You can use the",
      "content": "-\noperator instead of the\ndifference()\nmethod, and you will get the same result.",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Use",
      "content": "-\nto join two sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 - set2\nprint(set3)\n\nNote:",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-\noperator only allows you to join sets with sets, and not with other data types like you \ncan with the\ndifference()\nmethod.\nThe\ndifference_update()\nmethod will also keep \nthe items from the first set that are not in the other set,\nbut it will change the original set instead of returning a new set.\nExample\nUse the\ndifference_update()\nmethod to keep the items that are not present in both sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.difference_update(set2)\nprint(set1)\n\nSymmetric Differences\nThe\nsymmetric_difference()\nmethod will keep only the elements that are NOT present in both sets.\nExample\nKeep the items that are not present in both sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.symmetric_difference(set2)\nprint(set3)\n\nYou can use the\n^\noperator instead of the\nsymmetric_difference()\nmethod, and you will get the same result.\nExample\nUse\n^\nto join two sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 ^ set2\nprint(set3)\n\nNote:\nThe\n^\noperator only allows you to join sets with sets, and not with other data types like you \ncan with the\nsymmetric_difference()\nmethod.\nThe\nsymmetric_difference_update()\nmethod will also keep all \nbut the duplicates,\nbut it will change the original set instead of returning a new set.\nExample\nUse the\nsymmetric_difference_update()\nmethod to keep the items that are not present in both sets:\nset1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.symmetric_difference_update(set2)\nprint(set1)\n\n\u2605\n+1",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1 | set2\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \n  \"bananas\", \"cherry\"}\nmyset = set1.union(set2, set3, set4)\nprint(myset)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \n  \"bananas\", \"cherry\"}\nmyset = set1 | set2 | set3 |set4\nprint(myset)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "x = {\"a\", \"b\", \"c\"}\ny = (1, 2, 3)\nz = x.union(y)\nprint(z)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "set1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.intersection(set2)\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 \n  & set2\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.intersection_update(set2)\nprint(set1)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "set1 = {\"apple\", 1,\u00a0 \"banana\", 0, \"cherry\"}\nset2 = {False, \"google\", \n  1, \"apple\", 2, True}\nset3 = set1.intersection(set2)\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.difference(set2)\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 - set2\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.difference_update(set2)\nprint(set1)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1.symmetric_difference(set2)\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset3 = set1 ^ set2\nprint(set3)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\nset1.symmetric_difference_update(set2)\nprint(set1)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\n# TODO: Complete this line",
      "solution": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\n# TODO: Complete this line\nprint(set3)",
      "solution": "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = set1 | set2\nprint(set3)"
    }
  ],
  "related_topics": [
    {
      "id": "ca431510-76c1-4c07-a83f-6944b6c59c9f",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "80461bfb-a33b-4594-985d-92746329a856",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2f6a645a-4924-4c43-b53b-289a1f35dd98",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Join Sets\n\nJoin Sets\nThere?",
      "options": [
        "several ways to join two or more sets in Python",
        "None of the above.",
        "None of the above.",
        "not in the other set(s)"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Join Sets\n\nJoin Sets\nThere is 'several ways to join two or more sets in Python'."
    },
    {
      "question": "What is method keeps the items \nfrom the first set that?",
      "options": [
        "None of the above.",
        "several ways to join two or more sets in Python",
        "None of the above.",
        "not in the other set(s)"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method keeps the items \nfrom the first set that is 'not in the other set(s)'."
    }
  ],
  "summary": "This tutorial covers Python -Join Sets concepts and techniques. You'll learn how to use Python -Join Sets effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python -Join Sets and how to apply it in your projects."
}