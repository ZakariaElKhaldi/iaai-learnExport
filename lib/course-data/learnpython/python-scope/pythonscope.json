{
  "id": "7c59c00a-5361-4d11-8242-d48c95659450",
  "title": "PythonScope",
  "slug": "pythonscope",
  "metadata": {
    "description": "Learn about PythonScope with clear explanations and practical examples.",
    "keywords": [
      "python",
      "function",
      "global",
      "variable",
      "inside",
      "myfunc",
      "scope",
      "print",
      "keyword",
      "example",
      "available"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPython",
    "subcategory": "Python Scope"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nScope",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A variable is only available from inside the region it is \ncreated. This is called\nscope\n.\nLocal Scope\nA variable created inside a function belongs to the\nlocal scope\nof \nthat function, and can only be used inside that function.\nExample\nA variable created inside a function is available inside that function:\ndef myfunc():\nx = 300\nprint(x)\nmyfunc()\n\nFunction Inside Function\nAs explained in the example above, the variable\nx\nis not available outside the function, \nbut it is available for any function inside the function:\nExample\nThe local variable can be accessed from a function within the function:\ndef myfunc():\nx = 300\ndef myinnerfunc():\nprint(x)\nmyinnerfunc()\nmyfunc()\n\nGlobal Scope\nA variable created in the main body of the Python code is a global variable \nand belongs to the global scope.\nGlobal variables are available from within any scope, global and local.\nExample\nA variable created outside of a function is global and can be used by \n  anyone:\nx = 300\ndef myfunc():\nprint(x)\nmyfunc()\nprint(x)\n\nNaming Variables\nIf you operate with the same variable name inside and outside of a function, Python will treat them as two \nseparate variables,\none available in the global scope (outside the function) and one available in the local scope (inside the function):\nExample\nThe function will print the local\nx\n, and \n  then the code will print the global\nx\n:\nx = 300\ndef myfunc():\nx = 200\nprint(x)\nmyfunc()\nprint(x)\n\nGlobal Keyword\nIf you need to create a global variable, but are stuck in the local scope, you can use the\nglobal\nkeyword.\nThe\nglobal\nkeyword makes the variable global.\nExample\nIf you use the\nglobal\nkeyword, the variable belongs to the global scope:\ndef myfunc():\nglobal x\nx = 300\nmyfunc()\nprint(x)\n\nAlso, use the\nglobal\nkeyword if you want to \nmake a change to a global variable inside a function.\nExample\nTo change the value of a global variable inside a function, refer to the \n  variable by using the\nglobal\nkeyword:\nx = 300\ndef myfunc():\nglobal x\nx = 200\nmyfunc()\nprint(x)\n\nNonlocal Keyword\nThe\nnonlocal\nkeyword is used to work with variables inside nested functions.\nThe\nnonlocal\nkeyword makes the variable belong to the outer function.\nExample\nIf you use the\nnonlocal\nkeyword, the variable will belong to the outer function:\ndef myfunc1():\nx = \"Jane\"\ndef myfunc2():\nnonlocal x\nx = \"hello\"\nmyfunc2()\nreturn x\nprint(myfunc1())\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "def myfunc():\nx = 300\nprint(x)\nmyfunc()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "def myfunc():\nx = 300\ndef myinnerfunc():\nprint(x)\nmyinnerfunc()\nmyfunc()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = 300\ndef myfunc():\nprint(x)\nmyfunc()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = 300\ndef myfunc():\nx = 200\nprint(x)\nmyfunc()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "def myfunc():\nglobal x\nx = 300\nmyfunc()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "x = 300\ndef myfunc():\nglobal x\nx = 200\nmyfunc()\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "def myfunc1():\nx = \"Jane\"\ndef myfunc2():\nnonlocal x\nx = \"hello\"\nmyfunc2()\nreturn x\nprint(myfunc1())",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "def myfunc():\nx = 300\nprint(x)\n# TODO: Complete this line",
      "solution": "def myfunc():\nx = 300\nprint(x)\nmyfunc()"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "def myfunc():\nx = 300\n# TODO: Complete this line\nprint(x)\nmyinnerfunc()\nmyfunc()",
      "solution": "def myfunc():\nx = 300\ndef myinnerfunc():\nprint(x)\nmyinnerfunc()\nmyfunc()"
    }
  ],
  "related_topics": [
    {
      "id": "c46e86c1-48a1-41ee-ba5e-cbbf5480b2dc",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "70b827f8-2ffa-4e5c-8fd5-324c9a8e94ca",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fede348b-c01c-4aa2-a4f6-c9e7cea6cf83",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nScope\n\nA variable is only available from inside the region it?",
      "options": [
        "None of the above.",
        "created",
        "called\nscope",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Python\nScope\n\nA variable is only available from inside the region it is 'created'."
    },
    {
      "question": "What is This?",
      "options": [
        "called\nscope",
        "None of the above.",
        "None of the above.",
        "created"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'called\nscope'."
    }
  ],
  "summary": "This tutorial covers PythonScope concepts and techniques. You'll learn how to use PythonScope effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonScope and how to apply it in your projects."
}