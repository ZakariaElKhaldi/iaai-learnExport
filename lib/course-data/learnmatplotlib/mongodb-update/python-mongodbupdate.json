{
  "id": "78beab12-0a80-43d6-a20b-bb2fb61dc5ce",
  "title": "Python MongoDBUpdate",
  "slug": "python-mongodbupdate",
  "metadata": {
    "description": "Learn about Python MongoDBUpdate with clear explanations and practical examples.",
    "keywords": [
      "python",
      "update",
      "address",
      "mycol",
      "mongodb",
      "example",
      "pymongo",
      "myclient",
      "mydb",
      "myquery",
      "newvalues"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "MongoDB Update"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python MongoDB\nUpdate",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Update Collection\nYou can update a record, or document as it is called in MongoDB, by using \nthe\nupdate_one()\nmethod.\nThe first parameter of the\nupdate_one()\nmethod \nis a query object defining which document to update.\nNote:\nIf the query finds more than one record, only the first \noccurrence is updated.\nThe second parameter  \nis an object defining the new values of the document.\nExample\nChange the address from \"Valley 345\" to \"Canyon 123\":\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }\nmycol.update_one(myquery, newvalues)\n#print \"customers\" after the update:\nfor x in mycol.find():\nprint(x)\nRun example \u00bb\nUpdate Many\nTo update\nall\ndocuments that meets the criteria of the query, use \nthe\nupdate_many()\nmethod.\nExample\nUpdate all documents where the address starts with the letter \"S\":\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }\nx = mycol.update_many(myquery, newvalues)\nprint(x.modified_count, \"documents updated.\")\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }\nmycol.update_one(myquery, newvalues)\n#print \"customers\" after the update:\nfor x in mycol.find():\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }\nx = mycol.update_many(myquery, newvalues)\nprint(x.modified_count, \"documents updated.\")",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n# TODO: Complete this line\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }\nmycol.update_one(myquery, newvalues)\n#print \"customers\" after the update:\nfor x in mycol.find():\nprint(x)",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }\nmycol.update_one(myquery, newvalues)\n#print \"customers\" after the update:\nfor x in mycol.find():\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }\nx = mycol.update_many(myquery, newvalues)\n# TODO: Complete this line",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }\nx = mycol.update_many(myquery, newvalues)\nprint(x.modified_count, \"documents updated.\")"
    }
  ],
  "related_topics": [
    {
      "id": "01b29b9b-290e-45c3-aa0b-e741311f2b68",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4ac08303-7806-4be0-9828-43e5607a837f",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8a482572-9208-41dd-b326-92aa05627104",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is or document as it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "called in MongoDB",
        "a query object defining which document to update"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of or document as it is 'called in MongoDB'."
    },
    {
      "question": "What is method?",
      "options": [
        "None of the above.",
        "None of the above.",
        "called in MongoDB",
        "a query object defining which document to update"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'a query object defining which document to update'."
    }
  ],
  "summary": "This tutorial covers Python MongoDBUpdate concepts and techniques. You'll learn how to use Python MongoDBUpdate effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python MongoDBUpdate and how to apply it in your projects."
}