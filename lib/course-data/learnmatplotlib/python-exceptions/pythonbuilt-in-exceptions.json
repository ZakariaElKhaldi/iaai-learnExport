{
  "id": "15f3cd74-061a-4299-9663-77bdd9421013",
  "title": "PythonBuilt-in Exceptions",
  "slug": "pythonbuilt-in-exceptions",
  "metadata": {
    "description": "Learn about PythonBuilt-in Exceptions with clear explanations and practical examples.",
    "keywords": [
      "raised",
      "occurs",
      "exceptions",
      "error",
      "exist",
      "method",
      "unicode",
      "problem",
      "built",
      "fails"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Python Exceptions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nBuilt-in Exceptions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Built-in Exceptions\nThe table below shows built-in exceptions that are usually raised in Python:\nException\nDescription\nArithmeticError\nRaised when an error occurs in numeric calculations\nAssertionError\nRaised when an assert statement fails\nAttributeError\nRaised when attribute reference or assignment fails\nException\nBase class for all exceptions\nEOFError\nRaised when \n      the input() method hits an \"end of file\" condition (EOF)\nFloatingPointError\nRaised when a floating point calculation fails\nGeneratorExit\nRaised when a generator is closed (with the close() method)\nImportError\nRaised when an imported module does not exist\nIndentationError\nRaised when indentation is not correct\nIndexError\nRaised when an index of a sequence does not exist\nKeyError\nRaised when a key does not exist in a dictionary\nKeyboardInterrupt\nRaised when the user presses Ctrl+c, \n      Ctrl+z or Delete\nLookupError\nRaised when errors raised cant be found\nMemoryError\nRaised when a program runs out of memory\nNameError\nRaised when a variable does not exist\nNotImplementedError\nRaised when an abstract method requires an inherited class to override the \n      method\nOSError\nRaised when a system related operation causes an error\nOverflowError\nRaised when the result of a numeric calculation is too large\nReferenceError\nRaised when a weak reference object does not exist\nRuntimeError\nRaised when an error occurs that do not belong to any specific exceptions\nStopIteration\nRaised when the \nSyntaxError\nRaised when a syntax error occurs\nTabError\nRaised when indentation consists of tabs or spaces\nSystemError\nRaised when a system error occurs\nSystemExit\nRaised when the sys.exit() function is called\nTypeError\nRaised when two different types are combined\nUnboundLocalError\nRaised when a local variable is referenced before assignment\nUnicodeError\nRaised when a unicode problem occurs\nUnicodeEncodeError\nRaised when a unicode encoding problem occurs\nUnicodeDecodeError\nRaised when a unicode decoding problem occurs\nUnicodeTranslateError\nRaised when a unicode translation problem occurs\nValueError\nRaised when there is a wrong value in a specified data type\nZeroDivisionError\nRaised when the second operator in a division is zero\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7e185daa-4009-4061-bc85-0d683988c27d",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d34235e0-2a58-4473-ac87-e24e57c90251",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "29471744-2559-40a5-bcce-8e7af5ec1469",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is in exceptions that?",
      "options": [
        "usually raised in Python:\nException\nDescription\nArithmeticError\nRaised when an error occurs in numeric calculations\nAssertionError\nRaised when an assert statement fails\nAttributeError\nRaised when attribute reference or assignment fails\nException\nBase class for all exceptions\nEOFError\nRaised when \n      the input() method hits an \"end of file\" condition (EOF)\nFloatingPointError\nRaised when a floating point calculation fails\nGeneratorExit\nRaised when a generator is closed (with the close() method)\nImportError\nRaised when an imported module does not exist\nIndentationError\nRaised when indentation is not correct\nIndexError\nRaised when an index of a sequence does not exist\nKeyError\nRaised when a key does not exist in a dictionary\nKeyboardInterrupt\nRaised when the user presses Ctrl+c",
        "None of the above.",
        "zero\n\n\u2605\n+1",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of in exceptions that is 'usually raised in Python:\nException\nDescription\nArithmeticError\nRaised when an error occurs in numeric calculations\nAssertionError\nRaised when an assert statement fails\nAttributeError\nRaised when attribute reference or assignment fails\nException\nBase class for all exceptions\nEOFError\nRaised when \n      the input() method hits an \"end of file\" condition (EOF)\nFloatingPointError\nRaised when a floating point calculation fails\nGeneratorExit\nRaised when a generator is closed (with the close() method)\nImportError\nRaised when an imported module does not exist\nIndentationError\nRaised when indentation is not correct\nIndexError\nRaised when an index of a sequence does not exist\nKeyError\nRaised when a key does not exist in a dictionary\nKeyboardInterrupt\nRaised when the user presses Ctrl+c'."
    },
    {
      "question": "What is function is called\nTypeError\nRaised when two different types are combined\nUnboundLocalError\nRaised when a local variable is referenced before assignment\nUnicodeError\nRaised when a unicode problem occurs\nUnicodeEncodeError\nRaised when a unicode encoding problem occurs\nUnicodeDecodeError\nRaised when a unicode decoding problem occurs\nUnicodeTranslateError\nRaised when a unicode translation problem occurs\nValueError\nRaised when there is a wrong value in a specified data type\nZeroDivisionError\nRaised when the second operator in a division?",
      "options": [
        "None of the above.",
        "usually raised in Python:\nException\nDescription\nArithmeticError\nRaised when an error occurs in numeric calculations\nAssertionError\nRaised when an assert statement fails\nAttributeError\nRaised when attribute reference or assignment fails\nException\nBase class for all exceptions\nEOFError\nRaised when \n      the input() method hits an \"end of file\" condition (EOF)\nFloatingPointError\nRaised when a floating point calculation fails\nGeneratorExit\nRaised when a generator is closed (with the close() method)\nImportError\nRaised when an imported module does not exist\nIndentationError\nRaised when indentation is not correct\nIndexError\nRaised when an index of a sequence does not exist\nKeyError\nRaised when a key does not exist in a dictionary\nKeyboardInterrupt\nRaised when the user presses Ctrl+c",
        "zero\n\n\u2605\n+1",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of function is called\nTypeError\nRaised when two different types are combined\nUnboundLocalError\nRaised when a local variable is referenced before assignment\nUnicodeError\nRaised when a unicode problem occurs\nUnicodeEncodeError\nRaised when a unicode encoding problem occurs\nUnicodeDecodeError\nRaised when a unicode decoding problem occurs\nUnicodeTranslateError\nRaised when a unicode translation problem occurs\nValueError\nRaised when there is a wrong value in a specified data type\nZeroDivisionError\nRaised when the second operator in a division is 'zero\n\n\u2605\n+1'."
    }
  ],
  "summary": "This tutorial covers PythonBuilt-in Exceptions concepts and techniques. You'll learn how to use PythonBuilt-in Exceptions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonBuilt-in Exceptions and how to apply it in your projects."
}