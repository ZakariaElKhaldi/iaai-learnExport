{
  "id": "1d53539d-f833-4d5a-82e2-bd64ed0a42c3",
  "title": "Machine Learning - Scale",
  "slug": "machine-learning-scale",
  "metadata": {
    "description": "Learn about Machine Learning - Scale with clear explanations and practical examples.",
    "keywords": [
      "c",
      "scale",
      "data",
      "values",
      "volume",
      "weight",
      "value",
      "import",
      "mercedes",
      "ford",
      "scaled"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Scale"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Machine Learning - Scale",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Scale Features\nWhen your data has different values, and even different measurement units, it can be difficult to \ncompare them. What is kilograms compared to meters? Or altitude compared to time?\nThe answer to this problem is scaling. We can scale data into new values that are easier to \ncompare.\nTake a look at the table below, it is the same data set that we used in the\nmultiple regression chapter\n, but this time the\nvolume\ncolumn \ncontains values in\nliters\ninstead of\ncm\n3\n(1.0 instead of 1000).\nCar\nModel\nVolume\nWeight\nCO2\nToyota\nAygo\n1.0\n790\n99\nMitsubishi\nSpace Star\n1.2\n1160\n95\nSkoda\nCitigo\n1.0\n929\n95\nFiat\n500\n0.9\n865\n90\nMini\nCooper\n1.5\n1140\n105\nVW\nUp!\n1.0\n929\n105\nSkoda\nFabia\n1.4\n1109\n90\nMercedes\nA-Class\n1.5\n1365\n92\nFord\nFiesta\n1.5\n1112\n98\nAudi\nA1\n1.6\n1150\n99\nHyundai\nI20\n1.1\n980\n99\nSuzuki\nSwift\n1.3\n990\n101\nFord\nFiesta\n1.0\n1112\n99\nHonda\nCivic\n1.6\n1252\n94\nHundai\nI30\n1.6\n1326\n97\nOpel\nAstra\n1.6\n1330\n97\nBMW\n1\n1.6\n1365\n99\nMazda\n3\n2.2\n1280\n104\nSkoda\nRapid\n1.6\n1119\n104\nFord\nFocus\n2.0\n1328\n105\nFord\nMondeo\n1.6\n1584\n94\nOpel\nInsignia\n2.0\n1428\n99\nMercedes\nC-Class\n2.1\n1365\n99\nSkoda\nOctavia\n1.6\n1415\n99\nVolvo\nS60\n2.0\n1415\n99\nMercedes\nCLA\n1.5\n1465\n102\nAudi\nA4\n2.0\n1490\n104\nAudi\nA6\n2.0\n1725\n114\nVolvo\nV70\n1.6\n1523\n109\nBMW\n5\n2.0\n1705\n114\nMercedes\nE-Class\n2.1\n1605\n115\nVolvo\nXC70\n2.0\n1746\n117\nFord\nB-Max\n1.6\n1235\n104\nBMW\n2\n1.6\n1390\n108\nOpel\nZafira\n1.6\n1405\n109\nMercedes\nSLK\n2.5\n1395\n120\nIt can be difficult to compare the volume 1.0 with the weight 790, but if we \nscale them both into comparable values, we can easily see how much one value \nis compared to the other.\nThere are different methods for scaling data, in this tutorial we will use a \nmethod called standardization.\nThe standardization method  \nuses this formula:\nz = (x - u) / s\nWhere\nz\nis the new value,\nx\nis the original value,\nu\nis the mean and\ns\nis the \nstandard deviation.\nIf you take the\nweight\ncolumn from the data set above, the first value \nis 790, and the scaled value will be:\n(790 -\n1292.23\n) /\n238.74\n= -2.1\nIf you take the\nvolume\ncolumn from the data set above, the first value \nis 1.0, and the scaled value \nwill be:\n(1.0 -\n1.61\n) /\n0.38\n= -1.59\nNow you can compare -2.1 with -1.59 instead of comparing 790 with 1.0.\nYou do not have to do this manually,\nthe Python sklearn module has a method called\nStandardScaler()\nwhich returns a Scaler object with methods for transforming data sets.\nExample\nScale all values in the Weight and Volume columns:\nimport pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\nscaledX = scale.fit_transform(X)\nprint(scaledX)\nResult:\nNote that the first two values are -2.1 and -1.59, which corresponds to our \n  calculations:\n[[-2.10389253 -1.59336644]\n [-0.55407235 -1.07190106]\n [-1.52166278 -1.59336644]\n [-1.78973979 -1.85409913]\n [-0.63784641 -0.28970299]\n [-1.52166278 -1.59336644]\n [-0.76769621 -0.55043568]\n [ 0.3046118  -0.28970299]\n [-0.7551301  -0.28970299]\n [-0.59595938 -0.0289703 ]\n [-1.30803892 -1.33263375]\n [-1.26615189 -0.81116837]\n [-0.7551301  -1.59336644]\n [-0.16871166 -0.0289703 ]\n [ 0.14125238 -0.0289703 ]\n [ 0.15800719 -0.0289703 ]\n [ 0.3046118  -0.0289703 ]\n [-0.05142797  1.53542584]\n [-0.72580918 -0.0289703 ]\n [ 0.14962979  1.01396046]\n [ 1.2219378  -0.0289703 ]\n [ 0.5685001   1.01396046]\n [ 0.3046118   1.27469315]\n [ 0.51404696 -0.0289703 ]\n [ 0.51404696  1.01396046]\n [ 0.72348212 -0.28970299]\n [ 0.8281997   1.01396046]\n [ 1.81254495  1.01396046]\n [ 0.96642691 -0.0289703 ]\n [ 1.72877089  1.01396046]\n [ 1.30990057  1.27469315]\n [ 1.90050772  1.01396046]\n [-0.23991961 -0.0289703 ]\n [ 0.40932938 -0.0289703 ]\n [ 0.47215993 -0.0289703 ]\n [ 0.4302729   2.31762392]]\nRun example \u00bb\nPredict CO2 Values\nThe task in the\nMultiple Regression chapter\nwas to predict the CO2 emission from a car \nwhen you only knew its weight and volume.\nWhen the data set is scaled, you will have to use the scale when you predict values:\nExample\nPredict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms:\nimport pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nscaledX = scale.fit_transform(X)\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\nscaled = \n  scale.transform([[2300, 1.3]])\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)\nResult:\n[107.2087328]\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\nscaledX = scale.fit_transform(X)\nprint(scaledX)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nscaledX = scale.fit_transform(X)\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\nscaled = \n  scale.transform([[2300, 1.3]])\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pandas\n# TODO: Complete this line\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\nscaledX = scale.fit_transform(X)\nprint(scaledX)",
      "solution": "import pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\nscaledX = scale.fit_transform(X)\nprint(scaledX)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\n# TODO: Complete this line\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nscaledX = scale.fit_transform(X)\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\nscaled = \n  scale.transform([[2300, 1.3]])\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)",
      "solution": "import pandas\nfrom sklearn import linear_model\nfrom \n  sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nscaledX = scale.fit_transform(X)\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\nscaled = \n  scale.transform([[2300, 1.3]])\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)"
    }
  ],
  "related_topics": [
    {
      "id": "f4a77a6c-3cb2-4aab-ac39-7a0e4d0e1782",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b949ad07-876d-482e-b49e-df7e19963586",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e06ec6dc-a7f1-4eea-a7c7-740f32c49ccd",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "scaling",
        "None of the above.",
        "None of the above.",
        "kilograms compared to meters"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of What is 'kilograms compared to meters'."
    },
    {
      "question": "What is The answer to this problem?",
      "options": [
        "None of the above.",
        "kilograms compared to meters",
        "None of the above.",
        "scaling"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The answer to this problem is 'scaling'."
    }
  ],
  "summary": "This tutorial covers Machine Learning - Scale concepts and techniques. You'll learn how to use Machine Learning - Scale effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Machine Learning - Scale and how to apply it in your projects."
}