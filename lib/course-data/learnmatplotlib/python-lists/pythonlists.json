{
  "id": "5ae28398-845b-48c3-82f7-5d341559b06a",
  "title": "PythonLists",
  "slug": "pythonlists",
  "metadata": {
    "description": "Learn about PythonLists with clear explanations and practical examples.",
    "keywords": [
      "list",
      "items",
      "data",
      "lists",
      "apple",
      "cherry",
      "thislist",
      "type",
      "python",
      "banana"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Python Lists"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nLists",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "mylist = [\"apple\", \"banana\", \"cherry\"]\nList\nLists are used to store multiple items in a single variable.\nLists are one of 4 built-in data types in Python used to store collections of \ndata, the other 3 are\nTuple\n,\nSet\n, and\nDictionary\n, all with different qualities and usage.\nLists are created using square brackets:\nExample\nCreate a List:\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)\n\nList Items\nList items are ordered, changeable, and allow duplicate values.\nList items are indexed, the first item has index\n[0]\n,\nthe second item has index\n[1]\netc.\nOrdered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\nIf you add new items to a list,\nthe new items will be placed at the end of the list.\nNote:\nThere are some\nlist methods\nthat will change the order, but in general: the order of the items will not change.\nChangeable\nThe list is changeable, meaning that we can change, add, and remove items in a list after it has been created.\nAllow Duplicates\nSince lists are indexed, lists can have items with the same value:\nExample\nLists allow duplicate values:\nthislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)\n\nList Length\nTo determine how many items a list has, use the\nlen()\nfunction:\nExample\nPrint the number of items in the list:\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))\n\nList Items - Data Types\nList items can be of any data type:\nExample\nString, int and boolean data types:\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\n\nA list can contain different data types:\nExample\nA list with strings, integers and boolean values:\nlist1 = [\"abc\", 34, True, 40, \"male\"]\n\ntype()\nFrom Python's perspective, lists are defined as objects with the data type 'list':\n<class 'list'>\nExample\nWhat is the data type of a list?\nmylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))\n\nThe list() Constructor\nIt is also possible to use the\nlist()\nconstructor when creating a \nnew list.\nExample\nUsing the\nlist()\nconstructor to make a List:\nthislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)\n\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList\nis a collection which is ordered and changeable. Allows duplicate members.\nTuple\nis a collection which is ordered and unchangeable. Allows duplicate members.\nSet\nis a collection which is unordered, \nunchangeable*, and unindexed. No duplicate members.\nDictionary\nis a collection which is ordered** \nand changeable. No duplicate members.\n*Set\nitems\nare unchangeable, but you can remove and/or add items \n  whenever you like.\n**As of Python version 3.7, dictionaries are\nordered\n. \n  In Python 3.6 and earlier, dictionaries are\nunordered\n.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "list1 = [\"abc\", 34, True, 40, \"male\"]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)"
    }
  ],
  "related_topics": [
    {
      "id": "56efef96-d2a5-4f52-b320-daecbfc59817",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "31d13dae-e317-438a-86e5-422f56336c28",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4eb62d8a-d731-4fd5-bfdc-1911463d32c9",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is List\nLists?",
      "options": [
        "one of 4 built-in data types in Python used to store collections of \ndata",
        "None of the above.",
        "used to store multiple items in a single variable",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of List\nLists is 'used to store multiple items in a single variable'."
    },
    {
      "question": "What is Lists?",
      "options": [
        "None of the above.",
        "None of the above.",
        "one of 4 built-in data types in Python used to store collections of \ndata",
        "used to store multiple items in a single variable"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Lists is 'one of 4 built-in data types in Python used to store collections of \ndata'."
    }
  ],
  "summary": "This tutorial covers PythonLists concepts and techniques. You'll learn how to use PythonLists effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonLists and how to apply it in your projects."
}