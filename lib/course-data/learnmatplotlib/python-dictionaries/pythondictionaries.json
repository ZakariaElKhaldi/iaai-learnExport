{
  "id": "074c4a6a-068a-40fd-869c-ec37ae7e91fd",
  "title": "PythonDictionaries",
  "slug": "pythondictionaries",
  "metadata": {
    "description": "Learn about PythonDictionaries with clear explanations and practical examples.",
    "keywords": [
      "dictionary",
      "dictionaries",
      "thisdict",
      "items",
      "python",
      "ordered",
      "print",
      "brand",
      "data",
      "type"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Python Dictionaries"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nDictionaries",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "thisdict =  {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nDictionary\nDictionaries are used to store data values in key:value pairs.\nA dictionary is a collection which is ordered*, changeable and do not \nallow duplicates.\nAs of Python version 3.7, dictionaries are\nordered\n. \n  In Python 3.6 and earlier, dictionaries are\nunordered\n.\nDictionaries are written with curly brackets, and have keys and values:\nExample\nCreate and print a dictionary:\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict)\n\nDictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\nDictionary items are presented in key:value pairs, and can be referred to by \nusing the key name.\nExample\nPrint the \"brand\" value of the dictionary:\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict[\"brand\"])\n\nOrdered or Unordered?\nAs of Python version 3.7, dictionaries are\nordered\n. \n  In Python 3.6 and earlier, dictionaries are\nunordered\n.\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\nUnordered means that the items do not \nhave a defined order, you cannot refer to an item by using an index.\nChangeable\nDictionaries are changeable, meaning that we can change, add or remove items after the \ndictionary has been created.\nDuplicates Not Allowed\nDictionaries cannot have two items with the same key:\nExample\nDuplicate values will overwrite existing values:\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964,\n\"year\": 2020\n}\nprint(thisdict)\n\nDictionary Length\nTo determine how many items a dictionary has, use the\nlen()\nfunction:\nExample\nPrint the number of items in the dictionary:\nprint(len(thisdict))\n\nDictionary Items - Data Types\nThe values in dictionary items can be of any data type:\nExample\nString, int, boolean, and list data types:\nthisdict =\t{\n\"brand\": \"Ford\",\n\"electric\": False,\n\"year\": 1964,\n\"colors\": [\"red\", \"white\", \"blue\"]\n}\n\ntype()\nFrom Python's perspective, dictionaries are defined as objects with the data type 'dict':\n<class 'dict'>\nExample\nPrint the data type of a dictionary:\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(type(thisdict))\n\nThe dict() Constructor\nIt is also possible to use the\ndict()\nconstructor to make a dictionary.\nExample\nUsing the dict() method to make a dictionary:\nthisdict = \n  dict(name = \"John\", age = 36, country = \"Norway\")\nprint(thisdict)\n\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList\nis a collection which is ordered and changeable. Allows duplicate members.\nTuple\nis a collection which is ordered and unchangeable. Allows duplicate members.\nSet\nis a collection which is unordered, \nunchangeable*, and unindexed. No duplicate members.\nDictionary\nis a collection which is ordered** and changeable. No duplicate members.\n*Set\nitems\nare unchangeable, but you can remove and/or add items \n  whenever you like.\n**As of Python version 3.7, dictionaries are\nordered\n. \n  In Python 3.6 and earlier, dictionaries are\nunordered\n.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict[\"brand\"])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964,\n\"year\": 2020\n}\nprint(thisdict)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "print(len(thisdict))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"electric\": False,\n\"year\": 1964,\n\"colors\": [\"red\", \"white\", \"blue\"]\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(type(thisdict))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "thisdict = \n  dict(name = \"John\", age = 36, country = \"Norway\")\nprint(thisdict)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "thisdict =\t{\n\"brand\": \"Ford\",\n# TODO: Complete this line\n\"year\": 1964\n}\nprint(thisdict)",
      "solution": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n# TODO: Complete this line\nprint(thisdict[\"brand\"])",
      "solution": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict[\"brand\"])"
    }
  ],
  "related_topics": [
    {
      "id": "424cbe86-faa2-42fb-badc-fb8920c0c286",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4e46d1d0-c647-43bd-85f3-d3c4197c6b04",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7282c216-f1a7-4134-802b-0a72fa5b5099",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Dictionary\nDictionaries?",
      "options": [
        "ordered*",
        "None of the above.",
        "used to store data values in key:value pairs",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Dictionary\nDictionaries is 'used to store data values in key:value pairs'."
    },
    {
      "question": "What is A dictionary is a collection which?",
      "options": [
        "None of the above.",
        "used to store data values in key:value pairs",
        "ordered*",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A dictionary is a collection which is 'ordered*'."
    }
  ],
  "summary": "This tutorial covers PythonDictionaries concepts and techniques. You'll learn how to use PythonDictionaries effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonDictionaries and how to apply it in your projects."
}