{
  "id": "2e6e70cd-c2f8-42cb-949c-a5ded30dc0d2",
  "title": "PythonFor Loops",
  "slug": "pythonfor-loops",
  "metadata": {
    "description": "Learn about PythonFor Loops with clear explanations and practical examples.",
    "keywords": [
      "python",
      "loop",
      "print",
      "range",
      "banana",
      "example",
      "fruits",
      "break",
      "statement",
      "function",
      "else"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Python For Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nFor Loops",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python For Loops\nA\nfor\nloop is used for iterating over a sequence (that is either a list, a tuple, \na dictionary, a set, or a string).\nThis is less like the\nfor\nkeyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.\nWith the\nfor\nloop we can execute a set of statements, once for each item in a list, tuple, set etc.\nExample\nPrint each fruit in a fruit list:\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor \n  x in fruits:\nprint(x)\n\nThe\nfor\nloop does not require an indexing variable to set beforehand.\nLooping Through a String\nEven strings are iterable objects, they contain a sequence of characters:\nExample\nLoop through the letters in the word \"banana\":\nfor x in \"banana\":\nprint(x)\n\nThe break Statement\nWith the\nbreak\nstatement we can stop the \nloop before it has looped through all the items:\nExample\nExit the loop when\nx\nis \"banana\":\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nprint(x)\nif x == \n  \"banana\":\nbreak\n\nExample\nExit the loop when\nx\nis \"banana\", \nbut this time the break comes before the print:\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \n  \"banana\":\nbreak\nprint(x)\n\nThe continue Statement\nWith the\ncontinue\nstatement we can stop the \ncurrent iteration of the loop, and continue with the \nExample\nDo not print banana:\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \n  \"banana\":\ncontinue\nprint(x)\n\nThe range() Function\nTo loop through a set of code a specified number of times, we can use the\nrange()\nfunction,\nThe\nrange()\nfunction returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.\nExample\nUsing the range() function:\nfor x in range(6):\nprint(x)\n\nNote that\nrange(6)\nis not the values of 0 to 6, but the values 0 to 5.\nThe\nrange()\nfunction defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter:\nrange(2, 6)\n, which \nmeans values from 2 to 6 (but not including 6):\nExample\nUsing the start parameter:\nfor x in range(2, 6):\nprint(x)\n\nThe\nrange()\nfunction defaults to increment the sequence by 1,\nhowever it is possible to specify the increment value by adding a third parameter:\nrange(2, 30,\n3\n)\n:\nExample\nIncrement the sequence with 3 (default is 1):\nfor x in range(2, 30, 3):\nprint(x)\n\nElse in For Loop\nThe\nelse\nkeyword in a\nfor\nloop specifies a block of code to be \nexecuted when the loop is finished:\nExample\nPrint all numbers from 0 to 5, and print a message when the loop has ended:\nfor x in range(6):\nprint(x)\nelse:\nprint(\"Finally finished!\")\n\nNote:\nThe\nelse\nblock will NOT be executed if the loop is stopped by a\nbreak\nstatement.\nExample\nBreak the loop when\nx\nis 3, and see what happens with the\nelse\nblock:\nfor x in range(6):\nif x == 3: break\nprint(x)\nelse:\nprint(\"Finally finished!\")\n\nNested Loops\nA nested loop is a loop inside a loop.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer \nloop\":\nExample\nPrint each adjective for every fruit:\nadj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\nfor y in fruits:\nprint(x, y)\n\nThe pass Statement\nfor\nloops cannot be empty, but if you for \nsome reason have a\nfor\nloop with no content, put in the\npass\nstatement to avoid getting an error.\nExample\nfor x in [0, 1, 2]:\npass\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor \n  x in fruits:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "for x in \"banana\":\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nprint(x)\nif x == \n  \"banana\":\nbreak",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \n  \"banana\":\nbreak\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \n  \"banana\":\ncontinue\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "for x in range(6):\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "for x in range(2, 6):\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "for x in range(2, 30, 3):\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "for x in range(6):\nprint(x)\nelse:\nprint(\"Finally finished!\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "for x in range(6):\nif x == 3: break\nprint(x)\nelse:\nprint(\"Finally finished!\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\nfor y in fruits:\nprint(x, y)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "for x in [0, 1, 2]:\npass",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor \n# TODO: Complete this line\nprint(x)",
      "solution": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor \n  x in fruits:\nprint(x)"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "for x in \"banana\":\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "38c58fb3-bc53-40d2-8809-f9d6c56d294e",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0fef0d0e-2bd3-4f94-be5d-3576abd5f0bf",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "40bb53e5-44ad-412b-95ba-01b38d55f6b6",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nFor Loops\n\nPython For Loops\nA\nfor\nloop?",
      "options": [
        "None of the above.",
        "less like the\nfor\nkeyword in other programming languages",
        "used for iterating over a sequence (that is either a list",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Python\nFor Loops\n\nPython For Loops\nA\nfor\nloop is 'used for iterating over a sequence (that is either a list'."
    },
    {
      "question": "What is This?",
      "options": [
        "used for iterating over a sequence (that is either a list",
        "None of the above.",
        "None of the above.",
        "less like the\nfor\nkeyword in other programming languages"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'less like the\nfor\nkeyword in other programming languages'."
    }
  ],
  "summary": "This tutorial covers PythonFor Loops concepts and techniques. You'll learn how to use PythonFor Loops effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonFor Loops and how to apply it in your projects."
}