{
  "id": "b566475a-3025-4c0d-ae7b-89d09fc01202",
  "title": "PythonUser Input",
  "slug": "pythonuser-input",
  "metadata": {
    "description": "Learn about PythonUser Input with clear explanations and practical examples.",
    "keywords": [
      "input",
      "user",
      "example",
      "name",
      "number",
      "print",
      "python",
      "enter",
      "inputs",
      "hello"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Python User Input"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nUser Input",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "User Input\nPython allows for user input.\nThat means we are able to ask the user for input.\nThe following example asks for your name, and when you enter a name, it gets printed on the screen:\nExample\nAsk for user input:\nprint(\"Enter your name:\")\nname = input()\nprint(f\"Hello {name}\")\nRun Example \u00bb\nPython stops executing when it comes to the\ninput()\nfunction, and continues \nwhen the user has given some input.\nUsing prompt\nIn the example above, the user had to input their name on a new line. The Python\ninput()\nfunction has a\nprompt\nparameter,\nwhich acts as a message you can put in front of the user input, on the same line:\nExample\nAdd a message in front of the user input:\nname = input(\"Enter your name:\")\nprint(f\"Hello {name})\nRun Example \u00bb\nMultiple Inputs\nYou can add as many inputs as you want, Python will stop executing at each of them,\nwaiting for user input:\nExample\nMultiple inputs:\nname = input(\"Enter your name:\")\nprint(f\"Hello {name}\")\nfav1 = input(\"What is your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs?\")\nRun Example \u00bb\nInput Number\nThe input from the user is treated as a string. Even if, in the example above, you can input a number,\nthe Python interpreter will still treat it as a string.\nYou can convert the input into a number with the\nfloat()\nfunction:\nExample\nTo find the square root, the input has to be converted into a number:\nx = input(\"Enter a number:\")\n#find the square root of the number:\ny = math.sqrt(float(x))\nprint(f\"The square root of {x} is {y}\")\nRun Example \u00bb\nValidate Input\nIt is a good practice to validate any input from the user. In the example above, \nan error will occur if the user inputs something other than a number.\nTo avoid getting an error, we can test the input, and if it is not a number, the user could get a message like \"Wrong input, please try again\",\nand allowed to make a new input:\nExample\nKeep asking until you get a number:\ny = True\nwhile y == True:\nx = input(\"Enter a number:\")\ntry:\nx = float(x);\ny = False\nexcept:\nprint(\"Wrong input, please try again.\")\nprint(\"Thank you!\")\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "print(\"Enter your name:\")\nname = input()\nprint(f\"Hello {name}\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "name = input(\"Enter your name:\")\nprint(f\"Hello {name})",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "name = input(\"Enter your name:\")\nprint(f\"Hello {name}\")\nfav1 = input(\"What is your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs?\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = input(\"Enter a number:\")\n#find the square root of the number:\ny = math.sqrt(float(x))\nprint(f\"The square root of {x} is {y}\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "y = True\nwhile y == True:\nx = input(\"Enter a number:\")\ntry:\nx = float(x);\ny = False\nexcept:\nprint(\"Wrong input, please try again.\")\nprint(\"Thank you!\")",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "print(\"Enter your name:\")\n# TODO: Complete this line\nprint(f\"Hello {name}\")",
      "solution": "print(\"Enter your name:\")\nname = input()\nprint(f\"Hello {name}\")"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "name = input(\"Enter your name:\")\nprint(f\"Hello {name})"
    }
  ],
  "related_topics": [
    {
      "id": "6feeb168-4ee9-47e9-8660-f8311298a780",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5b48c616-314a-49d5-9e4d-17d07606d4fd",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5ec1083c-3426-47a2-8672-1e03d001b1ee",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is That means we?",
      "options": [
        "None of the above.",
        "None of the above.",
        "your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs",
        "able to ask the user for input"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of That means we is 'able to ask the user for input'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "None of the above.",
        "able to ask the user for input",
        "your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of What is 'your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs'."
    }
  ],
  "summary": "This tutorial covers PythonUser Input concepts and techniques. You'll learn how to use PythonUser Input effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonUser Input and how to apply it in your projects."
}