{
  "id": "4c2545ac-da29-4b6e-b3b7-abfa05b91458",
  "title": "MatplotlibHistograms",
  "slug": "matplotlibhistograms",
  "metadata": {
    "description": "Learn about MatplotlibHistograms with clear explanations and practical examples.",
    "keywords": [
      "people",
      "histogram",
      "hist",
      "function",
      "array",
      "numpy",
      "normal",
      "matplotlib",
      "example",
      "create"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Matplotlib Histograms"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Matplotlib\nHistograms",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Histogram\nA histogram is a graph showing\nfrequency\ndistributions.\nIt is a graph showing the number of observations within each given interval.\nExample: Say you ask for the height of 250 people, you \nmight end up with a histogram like this:\nYou can read from the histogram that there are approximately:\n2 people from 140 to 145cm\n5 people from 145 to 150cm\n15 people from \n151 to 156cm\n31 people from 157 to 162cm\n46 people from 163 to 168cm\n53 \npeople from 168 to 173cm\n45 people from 173 to 178cm\n28 people from 179 to \n184cm\n21 people from 185 to 190cm\n4 people from 190 to 195cm\nCreate Histogram\nIn Matplotlib, we use the\nhist()\nfunction to \ncreate histograms.\nThe\nhist()\nfunction will use an array of \nnumbers to create a histogram, the array is sent into the function as an \nargument.\nFor simplicity we use NumPy to randomly generate an array with 250 values, \nwhere the values will concentrate around 170, and the standard deviation is 10. \nLearn more about\nNormal Data \nDistribution\nin our\nMachine Learning \nTutorial\n.\nExample\nA Normal Data Distribution by NumPy:\nimport numpy as np\nx = \n  np.random.normal(170, 10, 250)\nprint(x)\nResult:\nThis will generate a\nrandom\nresult, and could look like this:\n[167.62255766 175.32495609 152.84661337 165.50264047 163.17457988\n   162.29867872 172.83638413 168.67303667 164.57361342 180.81120541\n   170.57782187 167.53075749 176.15356275 176.95378312 158.4125473\n   187.8842668  159.03730075 166.69284332 160.73882029 152.22378865\n   164.01255164 163.95288674 176.58146832 173.19849526 169.40206527\n   166.88861903 149.90348576 148.39039643 177.90349066 166.72462233\n   177.44776004 170.93335636 173.26312881 174.76534435 162.28791953\n   166.77301551 160.53785202 170.67972019 159.11594186 165.36992993\n   178.38979253 171.52158489 173.32636678 159.63894401 151.95735707\n   175.71274153 165.00458544 164.80607211 177.50988211 149.28106703\n   179.43586267 181.98365273 170.98196794 179.1093176  176.91855744\n   168.32092784 162.33939782 165.18364866 160.52300507 174.14316386\n   163.01947601 172.01767945 173.33491959 169.75842718 198.04834503\n   192.82490521 164.54557943 206.36247244 165.47748898 195.26377975\n   164.37569092 156.15175531 162.15564208 179.34100362 167.22138242\n   147.23667125 162.86940215 167.84986671 172.99302505 166.77279814\n   196.6137667  159.79012341 166.5840824  170.68645637 165.62204521\n   174.5559345  165.0079216  187.92545129 166.86186393 179.78383824\n   161.0973573  167.44890343 157.38075812 151.35412246 171.3107829\n   162.57149341 182.49985133 163.24700057 168.72639903 169.05309467\n   167.19232875 161.06405208 176.87667712 165.48750185 179.68799986\n   158.7913483  170.22465411 182.66432721 173.5675715  176.85646836\n   157.31299754 174.88959677 183.78323508 174.36814558 182.55474697\n   180.03359793 180.53094948 161.09560099 172.29179934 161.22665588\n   171.88382477 159.04626132 169.43886536 163.75793589 157.73710983\n   174.68921523 176.19843414 167.39315397 181.17128255 174.2674597\n   186.05053154 177.06516302 171.78523683 166.14875436 163.31607668\n   174.01429569 194.98819875 169.75129209 164.25748789 180.25773528\n   170.44784934 157.81966006 171.33315907 174.71390637 160.55423274\n   163.92896899 177.29159542 168.30674234 165.42853878 176.46256226\n   162.61719142 166.60810831 165.83648812 184.83238352 188.99833856\n   161.3054697  175.30396693 175.28109026 171.54765201 162.08762813\n   164.53011089 189.86213299 170.83784593 163.25869004 198.68079225\n   166.95154328 152.03381334 152.25444225 149.75522816 161.79200594\n   162.13535052 183.37298831 165.40405341 155.59224806 172.68678385\n   179.35359654 174.19668349 163.46176882 168.26621173 162.97527574\n   192.80170974 151.29673582 178.65251432 163.17266558 165.11172588\n   183.11107905 169.69556831 166.35149789 178.74419135 166.28562032\n   169.96465166 178.24368042 175.3035525  170.16496554 158.80682882\n   187.10006553 178.90542991 171.65790645 183.19289193 168.17446717\n   155.84544031 177.96091745 186.28887898 187.89867406 163.26716924\n   169.71242393 152.9410412  158.68101969 171.12655559 178.1482624\n   187.45272185 173.02872935 163.8047623  169.95676819 179.36887054\n   157.01955088 185.58143864 170.19037101 157.221245   168.90639755\n   178.7045601  168.64074373 172.37416382 165.61890535 163.40873027\n   168.98683006 149.48186389 172.20815568 172.82947206 173.71584064\n   189.42642762 172.79575803 177.00005573 169.24498561 171.55576698\n   161.36400372 176.47928342 163.02642822 165.09656415 186.70951892\n   153.27990317 165.59289527 180.34566865 189.19506385 183.10723435\n   173.48070474 170.28701875 157.24642079 157.9096498  176.4248199 ]\n\nThe\nhist()\nfunction will read the array and produce a histogram:\nExample\nA simple histogram:\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = \n  np.random.normal(170, 10, 250)\nplt.hist(x)\nplt.show()\nResult:\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\nx = \n  np.random.normal(170, 10, 250)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\nx = \n  np.random.normal(170, 10, 250)\nplt.hist(x)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\nx = \n  np.random.normal(170, 10, 250)\n# TODO: Complete this line",
      "solution": "import numpy as np\nx = \n  np.random.normal(170, 10, 250)\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import matplotlib.pyplot as plt\nimport numpy as np\nx = \n  np.random.normal(170, 10, 250)\nplt.hist(x)\n# TODO: Complete this line",
      "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nx = \n  np.random.normal(170, 10, 250)\nplt.hist(x)\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "9b84274b-c82b-43b8-9070-11c1964686fa",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "09401b0e-8c0a-441c-a4a8-1bc8c6ffe024",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3c1c174f-acc0-47dc-8dd7-45deb225f94c",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Matplotlib\nHistograms\n\nHistogram\nA histogram?",
      "options": [
        "a graph showing\nfrequency\ndistributions",
        "a graph showing the number of observations within each given interval",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Matplotlib\nHistograms\n\nHistogram\nA histogram is 'a graph showing\nfrequency\ndistributions'."
    },
    {
      "question": "What is It?",
      "options": [
        "a graph showing\nfrequency\ndistributions",
        "None of the above.",
        "None of the above.",
        "a graph showing the number of observations within each given interval"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'a graph showing the number of observations within each given interval'."
    }
  ],
  "summary": "This tutorial covers MatplotlibHistograms concepts and techniques. You'll learn how to use MatplotlibHistograms effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MatplotlibHistograms and how to apply it in your projects."
}