{
  "id": "d24e7e00-0816-4fa8-b05e-657246bf5c8e",
  "title": "MatplotlibPie Charts",
  "slug": "matplotlibpie-charts",
  "metadata": {
    "description": "Learn about MatplotlibPie Charts with clear explanations and practical examples.",
    "keywords": [
      "c",
      "import",
      "mylabels",
      "array",
      "wedge",
      "labels",
      "parameter",
      "matplotlib",
      "pyplot",
      "legend",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Matplotlib Pie Charts"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Matplotlib\nPie Charts",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Creating Pie Charts\nWith Pyplot, you can use the\npie()\nfunction \nto draw pie charts:\nExample\nA simple pie chart:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nplt.pie(y)\nplt.show()\nResult:\n\nAs you can see the pie chart draws one piece (called a wedge) for each value \nin the array (in this case [35, 25, 25, 15]).\nBy default the plotting of the first wedge starts from the x-axis and moves\ncounterclockwise\n:\nNote:\nThe size of each wedge is determined by comparing the value with all the other values, by using this formula:\nThe value divided by the sum of all values:\nx/sum(x)\nLabels\nAdd labels to the pie chart with the\nlabels\nparameter.\nThe\nlabels\nparameter must be an array with one label for each wedge:\nExample\nA simple pie chart:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n  labels = mylabels)\nplt.show()\nResult:\n\nStart Angle\nAs mentioned the default start angle is at the x-axis, but you can change the start angle by specifying a\nstartangle\nparameter.\nThe\nstartangle\nparameter is defined with an angle in degrees, default angle is 0:\nExample\nStart the first wedge at 90 degrees:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n  labels = mylabels, startangle = 90)\nplt.show()\nResult:\n\nExplode\nMaybe you want one of the wedges to stand out? The\nexplode\nparameter allows you to do that.\nThe\nexplode\nparameter, if specified, and not\nNone\n,\nmust be an array with one value for each wedge.\nEach value represents how far from the center each wedge is displayed:\nExample\nPull the \"Apples\" wedge 0.2 from the center of the pie:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\nplt.pie(y, \n  labels = mylabels, explode = myexplode)\nplt.show()\nResult:\n\nShadow\nAdd a shadow to the pie chart by setting the\nshadows\nparameter to\nTrue\n:\nExample\nAdd a shadow:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\nplt.pie(y, \n  labels = mylabels, explode = myexplode, shadow = True)\nplt.show()\nResult:\n\nColors\nYou can set the color of each wedge with the\ncolors\nparameter.\nThe\ncolors\nparameter, if specified, \nmust be an array with one value for each wedge:\nExample\nSpecify a new color for each wedge:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]\nplt.pie(y, labels = \n  mylabels, colors = mycolors)\nplt.show()\nResult:\n\nYou can use\nHexadecimal color values\n, any of the\n140 supported color names\n, \nor one of these shortcuts:\n'r'\n- Red\n'g'\n- Green\n'b'\n- Blue\n'c'\n- Cyan\n'm'\n- Magenta\n'y'\n- Yellow\n'k'\n- Black\n'w'\n- White\nLegend\nTo add a list of explanation for each wedge, use the\nlegend()\nfunction:\nExample\nAdd a legend:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)\nplt.legend()\nplt.show()\nResult:\n\nLegend With Header\nTo add a header to the legend, add the\ntitle\nparameter to the\nlegend\nfunction.\nExample\nAdd a legend with a header:\nimport matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)\nplt.legend(title = \"Four Fruits:\")\nplt.show()\nResult:\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nplt.pie(y)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n  labels = mylabels)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n  labels = mylabels, startangle = 90)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\nplt.pie(y, \n  labels = mylabels, explode = myexplode)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\nplt.pie(y, \n  labels = mylabels, explode = myexplode, shadow = True)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]\nplt.pie(y, labels = \n  mylabels, colors = mycolors)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)\nplt.legend()\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)\nplt.legend(title = \"Four Fruits:\")\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\n# TODO: Complete this line\nplt.show()",
      "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nplt.pie(y)\nplt.show()"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n# TODO: Complete this line\nplt.show()",
      "solution": "import matplotlib.pyplot as plt\nimport numpy as np\ny = np.array([35, \n  25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, \n  labels = mylabels)\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "2be2ed3f-f622-484f-8a1b-cc0173f9eeb1",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0de8ad25-b2f8-49b2-8632-360609dd036f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9b1d6bb4-dcdd-4408-ae0d-55cd4fdea7d7",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The size of each wedge?",
      "options": [
        "at the x-axis",
        "None of the above.",
        "determined by comparing the value with all the other values",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The size of each wedge is 'determined by comparing the value with all the other values'."
    },
    {
      "question": "What is Start Angle\nAs mentioned the default start angle?",
      "options": [
        "None of the above.",
        "determined by comparing the value with all the other values",
        "None of the above.",
        "at the x-axis"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Start Angle\nAs mentioned the default start angle is 'at the x-axis'."
    }
  ],
  "summary": "This tutorial covers MatplotlibPie Charts concepts and techniques. You'll learn how to use MatplotlibPie Charts effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MatplotlibPie Charts and how to apply it in your projects."
}