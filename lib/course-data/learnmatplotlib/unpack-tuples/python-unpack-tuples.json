{
  "id": "fc8c520b-6a31-4a60-ac04-d1026430c65f",
  "title": "Python -Unpack Tuples",
  "slug": "python-unpack-tuples",
  "metadata": {
    "description": "Learn about Python -Unpack Tuples with clear explanations and practical examples.",
    "keywords": [
      "python",
      "values",
      "print",
      "fruits",
      "tuple",
      "green",
      "number",
      "variable",
      "example",
      "apple",
      "cherry"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMatplotlib",
    "subcategory": "Unpack Tuples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python -\nUnpack Tuples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Unpacking a Tuple\nWhen we create a tuple, we normally assign values to it. This is called \"packing\" a tuple:\nExample\nPacking a tuple:\nfruits = (\"apple\", \"banana\", \"cherry\")\n\nBut, in Python, we are also allowed to extract the values back into variables. This is called \"unpacking\":\nExample\nUnpacking a tuple:\nfruits = (\"apple\", \"banana\", \"cherry\")\n(green, yellow, red) = fruits\nprint(green)\nprint(yellow)\nprint(red)\n\nNote:\nThe number of variables must match the number of values in the tuple, \n  if not, you must use an asterisk to collect the remaining values as a list.\nUsing Asterisk\n*\nIf the number of variables is less than the number of values, you can add an\n*\nto the variable name and the\nvalues will be assigned to the variable as a list:\nExample\nAssign the rest of the values as a list called \"red\":\nfruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\n(green, yellow, *red) = fruits\nprint(green)\nprint(yellow)\nprint(red)\n\nIf the asterisk is added to another variable name than the last,\nPython will assign values to the variable until the number of values left matches the number of variables left.\nExample\nAdd a list of values the \"tropic\" variable:\nfruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\n(green, *tropic, red) = fruits\nprint(green)\nprint(tropic)\nprint(red)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "fruits = (\"apple\", \"banana\", \"cherry\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "fruits = (\"apple\", \"banana\", \"cherry\")\n(green, yellow, red) = fruits\nprint(green)\nprint(yellow)\nprint(red)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\n(green, yellow, *red) = fruits\nprint(green)\nprint(yellow)\nprint(red)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\n(green, *tropic, red) = fruits\nprint(green)\nprint(tropic)\nprint(red)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "fruits = (\"apple\", \"banana\", \"cherry\")"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fruits = (\"apple\", \"banana\", \"cherry\")\n(green, yellow, red) = fruits\nprint(green)\n# TODO: Complete this line\nprint(red)",
      "solution": "fruits = (\"apple\", \"banana\", \"cherry\")\n(green, yellow, red) = fruits\nprint(green)\nprint(yellow)\nprint(red)"
    }
  ],
  "related_topics": [
    {
      "id": "a304022d-0b5c-40eb-a44a-80773490f1e4",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e6c627f2-bb8b-4188-977e-6e5853f1a01b",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5a2a2248-707c-4aff-a9bb-95a0e6848b73",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "called \"packing\" a tuple:\nExample\nPacking a tuple:\nfruits = (\"apple\"",
        "called \"unpacking\":\nExample\nUnpacking a tuple:\nfruits = (\"apple\"",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'called \"packing\" a tuple:\nExample\nPacking a tuple:\nfruits = (\"apple\"'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "called \"packing\" a tuple:\nExample\nPacking a tuple:\nfruits = (\"apple\"",
        "None of the above.",
        "called \"unpacking\":\nExample\nUnpacking a tuple:\nfruits = (\"apple\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'called \"unpacking\":\nExample\nUnpacking a tuple:\nfruits = (\"apple\"'."
    }
  ],
  "summary": "This tutorial covers Python -Unpack Tuples concepts and techniques. You'll learn how to use Python -Unpack Tuples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python -Unpack Tuples and how to apply it in your projects."
}