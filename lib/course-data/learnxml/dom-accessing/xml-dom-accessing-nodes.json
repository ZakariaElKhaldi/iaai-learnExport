{
  "id": "0b603867-3dcf-4cea-aae9-526c479d9132",
  "title": "XML DOM -Accessing Nodes",
  "slug": "xml-dom-accessing-nodes",
  "metadata": {
    "description": "Learn about XML DOM -Accessing Nodes with clear explanations and practical examples.",
    "keywords": [
      "c",
      "node",
      "nodes",
      "element",
      "getelementsbytagname",
      "title",
      "xmldoc",
      "example",
      "length",
      "type",
      "child"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Accessing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM -\nAccessing Nodes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "With the DOM, you can access every node in an XML document.\nAccessing Nodes\nYou can access a node in three ways:\nBy using the getElementsByTagName() method\nBy looping through (traversing) the nodes tree\nBy navigating the node tree, using the node relationships\nThe getElementsByTagName() Method\ngetElementsByTagName() returns all elements with a specified tag name.\nSyntax\nnode\n.getElementsByTagName(\"\ntagname\n\");\nExample\nThe following example returns all <title> elements under the x element:\nx.getElementsByTagName(\"title\");\nNote that the example above only returns <title> elements under the x node. To return all <title> elements in the XML document use:\nxmlDoc.getElementsByTagName(\"title\");\nwhere xmlDoc is the document itself (document node).\nDOM Node List\nThe getElementsByTagName() method returns a node list. A node list is an array of nodes.\nx = xmlDoc.getElementsByTagName(\"title\");\nThe <title> elements in x can be accessed by index number. To access the third <title> you can write::\ny = x[2];\nNote:\nThe index starts at 0.\n\nDOM Node List Length\nThe length property defines the length of a node list (the number of nodes).\nYou can loop through a node list by using the length property:\nExample\nvar\nx = xmlDoc.getElementsByTagName(\"title\");\nfor (i = 0; i <x.length; i++) {\n// \n    do something for each node\n}\n\nNode Types\nThe\ndocumentElement\nproperty of the XML document is the root node.\nThe\nnodeName\nproperty of a node is the name of the node.\nThe\nnodeType\nproperty of a node is the type of the node.\nYou will learn more about the node properties in the\n\nTraversing Nodes\nThe following code loops through the child nodes, that are also element \nnodes, of the root node:\nExample\ntxt = \"\";\nx = xmlDoc.documentElement.childNodes;\nfor (i = 0; i <x.length; i++)\n{\n// Process only element nodes (type 1)\nif (x[i].nodeType == 1) {\ntxt += x[i].nodeName + \"<br>\";\n}\n}\n\nExample explained:\nSuppose you have loaded \"\nbooks.xml\n\" into xmlDoc\nGet the child nodes of the root element (xmlDoc)\nFor each child node, check the node type. If the node type is \"1\" it is an element node\nOutput the name of the node if it is an element node\nNavigating Node Relationships\nThe following code navigates the node tree using the node relationships:\nExample\nx = xmlDoc.getElementsByTagName(\"book\")[0];\nxlen = x.childNodes.length;\ny = x.firstChild;\ntxt = \"\";\nfor (i = 0; i <xlen; i++)\n{\n// Process only element nodes (type 1)\nif (y.nodeType == 1) {\ntxt += y.nodeName + \"<br>\";\n}\ny = y.\n}\n\nExample explained:\nSuppose you have loaded \"\nbooks.xml\n\" into xmlDoc\nGet the child nodes of the first book element\nSet the \"y\" variable to be the first child node of the first book element\nFor each child node (starting with the first child node \"y\"):\nCheck the node type. If the node type is \"1\" it is an element node\nOutput the name of the node if it is an element node\nSet the \"y\" variable to be the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "node\n.getElementsByTagName(\"\ntagname\n\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "x.getElementsByTagName(\"title\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "xmlDoc.getElementsByTagName(\"title\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = xmlDoc.getElementsByTagName(\"title\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "y = x[2];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "var\nx = xmlDoc.getElementsByTagName(\"title\");\nfor (i = 0; i <x.length; i++) {\n// \n    do something for each node\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "txt = \"\";\nx = xmlDoc.documentElement.childNodes;\nfor (i = 0; i <x.length; i++)\n{\n// Process only element nodes (type 1)\nif (x[i].nodeType == 1) {\ntxt += x[i].nodeName + \"<br>\";\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "x = xmlDoc.getElementsByTagName(\"book\")[0];\nxlen = x.childNodes.length;\ny = x.firstChild;\ntxt = \"\";\nfor (i = 0; i <xlen; i++)\n{\n// Process only element nodes (type 1)\nif (y.nodeType == 1) {\ntxt += y.nodeName + \"<br>\";\n}\ny = y.nextSibling;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "node\n# TODO: Complete this line\ntagname\n\");",
      "solution": "node\n.getElementsByTagName(\"\ntagname\n\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "x.getElementsByTagName(\"title\");"
    }
  ],
  "related_topics": [
    {
      "id": "9227ddfc-6b9d-4a3c-b91c-0bd99a186a76",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e9b8b2c9-f73a-43dc-879a-30a897049117",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6e9711c-1216-4113-896c-5c83fefcba2a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is where xmlDoc?",
      "options": [
        "the document itself (document node)",
        "an array of nodes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of where xmlDoc is 'the document itself (document node)'."
    },
    {
      "question": "What is A node list?",
      "options": [
        "an array of nodes",
        "None of the above.",
        "None of the above.",
        "the document itself (document node)"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of A node list is 'an array of nodes'."
    }
  ],
  "summary": "This tutorial covers XML DOM -Accessing Nodes concepts and techniques. You'll learn how to use XML DOM -Accessing Nodes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOM -Accessing Nodes and how to apply it in your projects."
}