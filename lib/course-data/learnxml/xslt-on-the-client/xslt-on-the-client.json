{
  "id": "e4403ce4-0bb2-46bf-b163-5fb51100c625",
  "title": "XSLT -On the Client",
  "slug": "xslt-on-the-client",
  "metadata": {
    "description": "Learn about XSLT -On the Client with clear explanations and practical examples.",
    "keywords": [
      "c",
      "document",
      "file",
      "style",
      "browser",
      "example",
      "xhttp",
      "xslt",
      "javascript",
      "sheet",
      "xsltprocessor"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSLT on the Client"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSLT -\nOn the Client",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "XSLT can be used to transform the document to XHTML in your browser.\nA JavaScript Solution\nIn the \nfrom XML to XHTML. We did this by adding an XSL style sheet to the XML\nfile and let the browser do the transformation.\nEven if this works fine, it is not always desirable to include a style sheet reference in \nan XML file (e.g. it will not work in a non XSLT aware browser.)\nA more versatile solution would be to use a JavaScript to do the transformation.\nBy using a JavaScript, we can:\ndo browser-specific testing\nuse different style sheets according to browser and user\n    needs\nThat is the beauty of XSLT! One of the design goals for XSLT was to make it \npossible to transform data from one format to another, supporting different \nbrowsers and different user needs.\nThe XML File and the XSL File\nLook at the XML document that you have seen in the \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n<cd>\n<title>Empire Burlesque</title>\n<artist>Bob Dylan</artist>\n<country>USA</country>\n<company>Columbia</company>\n<price>10.90</price>\n<year>1985</year>\n</cd>\n.\n.\n</catalog>\nView the XML file\n.\nAnd the accompanying XSL style sheet:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr bgcolor=\"#9acd32\">\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n<td><xsl:value-of select=\"title\" /></td>\n<td><xsl:value-of select=\"artist\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</xsl:template>\n</xsl:stylesheet>\nView the XSL file\n.\nNotice that the XML file does not have a reference to the XSL file.\nIMPORTANT:\nThe above sentence indicates that an XML file could be transformed using many different XSL style sheets.\nTransforming XML to XHTML in the Browser\nHere is the source code needed to transform the XML file to XHTML on the client:\nExample\n<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction loadXMLDoc(filename)\n{\nif (window.ActiveXObject)\n{\nxhttp = new ActiveXObject(\"Msxml2.XMLHTTP\");\n}\nelse\n{\nxhttp = new XMLHttpRequest();\n}\nxhttp.open(\"GET\", filename, false);\ntry {xhttp.responseType = \"msxml-document\"} \ncatch(err) {} // Helping IE11\nxhttp.send(\"\");\nreturn xhttp.responseXML;\n}\nfunction displayResult()\n{\nxml = loadXMLDoc(\"cdcatalog.xml\");\nxsl = loadXMLDoc(\"cdcatalog.xsl\");\n// code for IE\nif (window.ActiveXObject \n|| xhttp.responseType == \"msxml-document\")\n{\nex = \nxml.transformNode(xsl);\ndocument.getElementById(\"example\").innerHTML \n= ex;\n}\n// code for Chrome, Firefox, Opera, etc.\nelse if (document.implementation \n&& document.implementation.createDocument)\n{\nxsltProcessor = new XSLTProcessor();\nxsltProcessor.importStylesheet(xsl);\nresultDocument = \nxsltProcessor.transformToFragment(xml, document);\ndocument.getElementById(\"example\").appendChild(resultDocument);\n}\n}\n</script>\n</head>\n<body onload=\"displayResult()\">\n<div \nid=\"example\" />\n</body>\n</html>\n\nTip:\nIf you don't know how to write JavaScript, please study our\nJavaScript tutorial\n.\nExample Explained:\nThe loadXMLDoc() function does the following:\nCreate an XMLHttpRequest object\nUse the open() and send() methods of the XMLHttpRequest object to send a request to a server\nGet the response data as XML data\nThe displayResult() function is used to display the XML file styled by the \nXSL file:\nLoad XML and XSL files\nTest what kind of browser the user has\nIf Internet Explorer:\nUse the transformNode() method to apply the XSL style sheet to the  xml document\nSet the body of the current document (id=\"example\") to contain the  styled xml document\nIf other browsers:\nCreate a new XSLTProcessor object and import the XSL file to it\nUse the transformToFragment() method to apply the XSL style sheet to  the xml document\nSet the body of the current document (id=\"example\") to contain the  styled xml document\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n<cd>\n<title>Empire Burlesque</title>\n<artist>Bob Dylan</artist>\n<country>USA</country>\n<company>Columbia</company>\n<price>10.90</price>\n<year>1985</year>\n</cd>\n.\n.\n</catalog>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr bgcolor=\"#9acd32\">\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n<td><xsl:value-of select=\"title\" /></td>\n<td><xsl:value-of select=\"artist\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</xsl:template>\n</xsl:stylesheet>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction loadXMLDoc(filename)\n{\nif (window.ActiveXObject)\n{\nxhttp = new ActiveXObject(\"Msxml2.XMLHTTP\");\n}\nelse\n{\nxhttp = new XMLHttpRequest();\n}\nxhttp.open(\"GET\", filename, false);\ntry {xhttp.responseType = \"msxml-document\"} \ncatch(err) {} // Helping IE11\nxhttp.send(\"\");\nreturn xhttp.responseXML;\n}\nfunction displayResult()\n{\nxml = loadXMLDoc(\"cdcatalog.xml\");\nxsl = loadXMLDoc(\"cdcatalog.xsl\");\n// code for IE\nif (window.ActiveXObject \n|| xhttp.responseType == \"msxml-document\")\n{\nex = \nxml.transformNode(xsl);\ndocument.getElementById(\"example\").innerHTML \n= ex;\n}\n// code for Chrome, Firefox, Opera, etc.\nelse if (document.implementation \n&& document.implementation.createDocument)\n{\nxsltProcessor = new XSLTProcessor();\nxsltProcessor.importStylesheet(xsl);\nresultDocument = \nxsltProcessor.transformToFragment(xml, document);\ndocument.getElementById(\"example\").appendChild(resultDocument);\n}\n}\n</script>\n</head>\n<body onload=\"displayResult()\">\n<div \nid=\"example\" />\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n<cd>\n<title>Empire Burlesque</title>\n<artist>Bob Dylan</artist>\n<country>USA</country>\n# TODO: Complete this line\n<price>10.90</price>\n<year>1985</year>\n</cd>\n.\n.\n</catalog>",
      "solution": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n<cd>\n<title>Empire Burlesque</title>\n<artist>Bob Dylan</artist>\n<country>USA</country>\n<company>Columbia</company>\n<price>10.90</price>\n<year>1985</year>\n</cd>\n.\n.\n</catalog>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr bgcolor=\"#9acd32\">\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n# TODO: Complete this line\n<td><xsl:value-of select=\"artist\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</xsl:template>\n</xsl:stylesheet>",
      "solution": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr bgcolor=\"#9acd32\">\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n<td><xsl:value-of select=\"title\" /></td>\n<td><xsl:value-of select=\"artist\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</xsl:template>\n</xsl:stylesheet>"
    }
  ],
  "related_topics": [
    {
      "id": "01044c15-bc4c-45c3-a280-406de9ced89c",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e9d801ef-00d4-4748-b33b-8b7b92f4042b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "60f08d72-3af2-4eb3-8674-0dd8eccb42d8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "the beauty of XSLT",
        "None of the above.",
        "not always desirable to include a style sheet reference in \nan XML file (e"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it is 'not always desirable to include a style sheet reference in \nan XML file (e'."
    },
    {
      "question": "What is specific testing\nuse different style sheets according to browser and user\n    needs\nThat?",
      "options": [
        "not always desirable to include a style sheet reference in \nan XML file (e",
        "None of the above.",
        "the beauty of XSLT",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of specific testing\nuse different style sheets according to browser and user\n    needs\nThat is 'the beauty of XSLT'."
    }
  ],
  "summary": "This tutorial covers XSLT -On the Client concepts and techniques. You'll learn how to use XSLT -On the Client effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSLT -On the Client and how to apply it in your projects."
}