{
  "id": "f559acd4-8e87-4e1c-85d1-b34fa5755bfc",
  "title": "XSDElement Substitution",
  "slug": "xsdelement-substitution",
  "metadata": {
    "description": "Learn about XSDElement Substitution with clear explanations and practical examples.",
    "keywords": [
      "element",
      "name",
      "elements",
      "type",
      "substitutiongroup",
      "navn",
      "customer",
      "substitution",
      "schema",
      "head"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSD Substitution"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSD\nElement Substitution",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "With XML Schemas, one element can substitute another element.\nElement Substitution\nLet's say that we have users from two different countries: England and \nNorway. We would like the ability to let the user choose whether he or she \nwould like to use the Norwegian element names or the English element names in \nthe XML document.\nTo solve this problem, we could define a\nsubstitutionGroup\nin the XML \nschema. First, we declare a head element and then we declare the other elements which state that \nthey are substitutable for the head element.\n<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\nIn the example above, the \"name\" element is the head element and the \"navn\" \nelement is substitutable for \"name\".\nLook at this fragment of an XML schema:\n<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\"/>\n<xs:element name=\"kunde\" substitutionGroup=\"customer\"/>\nA valid XML document (according to the schema above) could look like this:\n<customer>\n<name>John Smith</name>\n</customer>\nor like this:\n<kunde>\n<navn>John Smith</navn>\n</kunde>\nBlocking Element Substitution\nTo prevent other elements from substituting with a specified element, use the block attribute:\n<xs:element name=\"name\" type=\"xs:string\" block=\"substitution\"/>\nLook at this fragment of an XML schema:\n<xs:element name=\"name\" type=\"xs:string\" block=\"substitution\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\" block=\"substitution\"/>\n<xs:element name=\"kunde\" substitutionGroup=\"customer\"/>\nA valid XML document (according to the schema above) looks like this:\n<customer>\n<name>John Smith</name>\n</customer>\nBUT THIS IS NO LONGER VALID:\n<kunde>\n<navn>John Smith</navn>\n</kunde>\nUsing substitutionGroup\nThe type of the substitutable elements must be the same as, or derived from, \nthe type of the head element. If the type of the substitutable element is the \nsame as the type of the head element you will not have to specify the type of \nthe substitutable element.\nNote that all elements in the substitutionGroup (the head element and the \nsubstitutable elements) must be declared as global elements, otherwise it will \nnot work!\nWhat are Global Elements?\nGlobal elements are elements that are immediate children of the \"schema\" \nelement! Local elements are elements nested within other elements.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\"/>\n<xs:element name=\"kunde\" substitutionGroup=\"customer\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<customer>\n<name>John Smith</name>\n</customer>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<kunde>\n<navn>John Smith</navn>\n</kunde>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<xs:element name=\"name\" type=\"xs:string\" block=\"substitution\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<xs:element name=\"name\" type=\"xs:string\" block=\"substitution\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\" block=\"substitution\"/>\n<xs:element name=\"kunde\" substitutionGroup=\"customer\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<customer>\n<name>John Smith</name>\n</customer>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<kunde>\n<navn>John Smith</navn>\n</kunde>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\"/>\n# TODO: Complete this line",
      "solution": "<xs:element name=\"name\" type=\"xs:string\"/>\n<xs:element name=\"navn\" substitutionGroup=\"name\"/>\n<xs:complexType name=\"custinfo\">\n<xs:sequence>\n<xs:element ref=\"name\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:element name=\"customer\" type=\"custinfo\"/>\n<xs:element name=\"kunde\" substitutionGroup=\"customer\"/>"
    }
  ],
  "related_topics": [
    {
      "id": "97f32410-5876-41cf-b296-49d76855a85a",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "821b457d-0fb8-4cbf-8847-ff7441c20a16",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0429f18d-7289-4c99-8e85-63ece0487fe0",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is we declare a head element and then we declare the other elements which state that \nthey?",
      "options": [
        "None of the above.",
        "the head element and the \"navn\" \nelement is substitutable for \"name\"",
        "substitutable for the head element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of we declare a head element and then we declare the other elements which state that \nthey is 'substitutable for the head element'."
    },
    {
      "question": "What is element?",
      "options": [
        "the head element and the \"navn\" \nelement is substitutable for \"name\"",
        "None of the above.",
        "None of the above.",
        "substitutable for the head element"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of element is 'the head element and the \"navn\" \nelement is substitutable for \"name\"'."
    }
  ],
  "summary": "This tutorial covers XSDElement Substitution concepts and techniques. You'll learn how to use XSDElement Substitution effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSDElement Substitution and how to apply it in your projects."
}