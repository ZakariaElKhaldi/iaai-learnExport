{
  "id": "11f6be8c-bbc5-40b2-8c14-9ca9e804046e",
  "title": "XMLElementsvs.Attributes",
  "slug": "xmlelementsvsattributes",
  "metadata": {
    "description": "Learn about XMLElementsvs.Attributes with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "attributes",
      "elements",
      "note",
      "heading",
      "body",
      "data",
      "child",
      "date",
      "tove",
      "jani"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DTD Elements vs Attr"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML\nElements\nvs.\nAttributes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "In XML, there are no rules about when to use attributes, and when to use child elements.\nUse of Elements vs. Attributes\nData can be stored in child elements or in attributes.\nTake a look at these examples:\n<person sex=\"female\">\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>\n<person>\n<sex>female</sex>\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>\nIn the first example sex is an attribute. In the last, sex is a child element. Both examples provide the same information.\nThere are no rules about when to use attributes, and when to use child elements. My experience is that attributes are handy in HTML, but in XML you should try to avoid them. Use child elements if the information feels like data.\nMy Favorite Way\nI like to store data in child elements.\nThe following three XML documents contain exactly the same information:\nA date attribute is used in the first example:\n<note date=\"12/11/2002\">\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\nA date element is used in the second example:\n<note>\n<date>12/11/2002</date>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\nAn expanded date element is used in the third: (THIS IS MY FAVORITE):\n<note>\n<date>\n<day>12</day>\n<month>11</month>\n<year>2002</year>\n</date>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\nAvoid using attributes?\nShould you avoid using attributes?\nSome of the problems with attributes are:\nattributes cannot contain multiple values (child elements can)\nattributes are not easily expandable (for future changes)\nattributes cannot describe structures (child elements can)\nattributes are more difficult to manipulate by program code\nattribute values are not easy to test against a DTD\nIf you use attributes as containers for data, you end up with documents that are difficult to read and maintain. Try to use\nelements\nto\ndescribe data. Use attributes only to provide information that is not relevant to the data.\nDon't end up like this (this is not how XML should be used):\n<note day=\"12\" month=\"11\" year=\"2002\"\nto=\"Tove\" from=\"Jani\" heading=\"Reminder\"\nbody=\"Don't forget me this weekend!\">\n</note>\nAn Exception to my Attribute Rule\nRules always have exceptions.\nMy rule about attributes has one exception:\nSometimes I assign ID references to elements. These ID references can be used to access XML elements in much the same way as the NAME or\nID attributes in HTML. This example demonstrates this:\n<messages>\n<note id=\"p501\">\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\n<note id=\"p502\">\n<to>Jani</to>\n<from>Tove</from>\n<heading>Re: Reminder</heading>\n<body>I will not!</body>\n</note>\n</messages>\nThe ID in these examples is just a counter, or a unique identifier, to identify the different notes in the XML file, and not a part of the note data.\nWhat I am trying to say here is that metadata (data about data) should be stored as attributes, and that data itself should be stored as elements.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<person sex=\"female\">\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<person>\n<sex>female</sex>\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<note date=\"12/11/2002\">\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<note>\n<date>12/11/2002</date>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<note>\n<date>\n<day>12</day>\n<month>11</month>\n<year>2002</year>\n</date>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<note day=\"12\" month=\"11\" year=\"2002\"\nto=\"Tove\" from=\"Jani\" heading=\"Reminder\"\nbody=\"Don't forget me this weekend!\">\n</note>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<messages>\n<note id=\"p501\">\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\n<note id=\"p502\">\n<to>Jani</to>\n<from>Tove</from>\n<heading>Re: Reminder</heading>\n<body>I will not!</body>\n</note>\n</messages>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<person sex=\"female\">\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n# TODO: Complete this line",
      "solution": "<person sex=\"female\">\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<person>\n<sex>female</sex>\n<firstname>Anna</firstname>\n# TODO: Complete this line\n</person>",
      "solution": "<person>\n<sex>female</sex>\n<firstname>Anna</firstname>\n<lastname>Smith</lastname>\n</person>"
    }
  ],
  "related_topics": [
    {
      "id": "2dd95963-ed59-46ab-891d-5498399eb4cb",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a17d0b5c-73cd-4adc-9698-074e6c6dc68d",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e29af2a1-aa5d-49a5-9889-bf730e1d96a3",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is there?",
      "options": [
        "an attribute",
        "None of the above.",
        "no rules about when to use attributes",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of there is 'no rules about when to use attributes'."
    },
    {
      "question": "What is In the first example sex?",
      "options": [
        "no rules about when to use attributes",
        "None of the above.",
        "None of the above.",
        "an attribute"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of In the first example sex is 'an attribute'."
    }
  ],
  "summary": "This tutorial covers XMLElementsvs.Attributes concepts and techniques. You'll learn how to use XMLElementsvs.Attributes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XMLElementsvs.Attributes and how to apply it in your projects."
}