{
  "id": "3a19d639-75c0-4186-9a2f-3c2a1f38c40d",
  "title": "DTD -XML Building Blocks",
  "slug": "dtd-xml-building-blocks",
  "metadata": {
    "description": "Learn about DTD -XML Building Blocks with clear explanations and practical examples.",
    "keywords": [
      "c",
      "elements",
      "text",
      "entities",
      "html",
      "building",
      "blocks",
      "attributes",
      "element",
      "parsed",
      "character"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DTD Building Blocks"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DTD -\nXML Building Blocks",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The main building blocks of both XML and HTML documents are elements.\nThe Building Blocks of XML Documents\nSeen from a DTD point of view, all XML documents are made up by the following building blocks:\nElements\nAttributes\nEntities\nPCDATA\nCDATA\nElements\nElements are the\nmain building blocks\nof both XML and HTML documents.\nExamples of HTML elements are \"body\" and \"table\". Examples of XML elements could be\n\"note\" and \"message\". Elements can contain text, other elements, or be empty. Examples of empty HTML elements are \"hr\", \"br\" and\n\"img\".\nExamples:\n<body>some text</body>\n<message>some text</message>\nAttributes\nAttributes provide\nextra information about elements\n.\nAttributes are always placed inside the opening tag of an element. Attributes\nalways come in name/value pairs. The following \"img\" element has additional information about a source file:\n<img src=\"computer.gif\" />\nThe name of the element is \"img\". The name of the attribute is\n\"src\". The value of the attribute is \"computer.gif\".\nSince the element itself is empty it is closed by a \" /\".\nEntities\nSome characters have a special meaning in XML, like the less than sign (<) \nthat defines the start of an XML tag.\nMost of you know the HTML entity: \"&nbsp;\". This \"no-breaking-space\" entity is used in HTML to insert an extra space in a document.\nEntities are expanded when a document is parsed by an XML parser.\nThe following entities are predefined in XML:\nEntity References\nCharacter\n&lt;\n<\n&gt;\n>\n&amp;\n&\n&quot;\n\"\n&apos;\n'\nPCDATA\nPCDATA means parsed character data.\nThink of character data as the text found between the start tag and the end tag of an XML element.\nPCDATA is text that WILL be parsed by a parser\n.\nThe text will be examined by the parser for entities and markup\n.\nTags inside the text will be treated as markup and entities will be expanded.\nHowever, parsed character data should not contain any &, <, or > characters; \nthese need to be represented by the &amp; &lt; and &gt; entities, respectively.\nCDATA\nCDATA means character data.\nCDATA is text that will NOT be parsed by a parser\n.\nTags inside the text will NOT be treated as markup and entities will not be expanded.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<body>some text</body>\n<message>some text</message>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<img src=\"computer.gif\" />",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<body>some text</body>\n<message>some text</message>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<img src=\"computer.gif\" />"
    }
  ],
  "related_topics": [
    {
      "id": "a000a08d-8cbc-41b1-ada6-fabc493482a2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ce8902e3-2211-46f5-992c-903d53efdea4",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1c1e25eb-b97a-4323-a574-0201a0d6f35a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is XML Building Blocks\n\nThe main building blocks of both XML and HTML documents?",
      "options": [
        "None of the above.",
        "elements",
        "made up by the following building blocks:\nElements\nAttributes\nEntities\nPCDATA\nCDATA\nElements\nElements are the\nmain building blocks\nof both XML and HTML documents",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of XML Building Blocks\n\nThe main building blocks of both XML and HTML documents is 'elements'."
    },
    {
      "question": "What is all XML documents?",
      "options": [
        "None of the above.",
        "elements",
        "None of the above.",
        "made up by the following building blocks:\nElements\nAttributes\nEntities\nPCDATA\nCDATA\nElements\nElements are the\nmain building blocks\nof both XML and HTML documents"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of all XML documents is 'made up by the following building blocks:\nElements\nAttributes\nEntities\nPCDATA\nCDATA\nElements\nElements are the\nmain building blocks\nof both XML and HTML documents'."
    }
  ],
  "summary": "This tutorial covers DTD -XML Building Blocks concepts and techniques. You'll learn how to use DTD -XML Building Blocks effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DTD -XML Building Blocks and how to apply it in your projects."
}