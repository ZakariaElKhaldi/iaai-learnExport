{
  "id": "34d316d0-5a96-4d41-a6e7-cd6fffc0bc05",
  "title": "XML DOMTraverse Node Tree",
  "slug": "xml-domtraverse-node-tree",
  "metadata": {
    "description": "Learn about XML DOMTraverse Node Tree with clear explanations and practical examples.",
    "keywords": [
      "nodejs",
      "cdata",
      "text",
      "node",
      "parser",
      "example",
      "child",
      "nodes",
      "parsed",
      "element",
      "xmldoc"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Nodejs Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Traversing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM\nTraverse Node Tree",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Traversing means looping through or traveling across the node tree.\nTraversing the Node Tree\nOften you want to loop an XML document, for example: when you want to extract the value of each element.\nThis is called \"Traversing the node tree\"\nThe example below loops through all child nodes of <book>, and displays their names and values:\nExample\n<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar x, i ,xmlDoc;\nvar txt = \"\";\nvar text = \"<book>\" +\n\"<title>Everyday Italian</title>\" +\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book>\";\nparser = new DOMParser();\nxmlDoc \n = parser.parseFromString(text,\"text/xml\");\n// documentElement always \n represents the root node\nx = xmlDoc.documentElement.childNodes;\nfor (i = \n 0; i < x.length ;i++) {\ntxt += x[i].nodeName + \": \" + \n x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n</script>\n</body>\n</html>\nOutput:\ntitle: Everyday Italian\nauthor: Giada De Laurentiis\nyear: 2005\n\nExample explained:\nLoad the XML string into xmlDoc\nGet the child nodes of the root element\nFor each child node, output the node name and the node value of the text node\nBrowser Differences in DOM Parsing\nAll modern browsers support the W3C DOM specification.\nHowever, there are some differences \nbetween browsers. One important difference is:\nThe way they handle white-spaces and new lines\nDOM - White Spaces and New Lines\nXML often contains new line, or white space characters, between nodes. This \nis often the case when the document is edited by a simple editor like Notepad.\nThe following example (edited by Notepad) contains CR/LF (new line) between \neach line and two spaces in front of each child node:\n<book>\n<title>Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n</book>\nInternet Explorer 9 and earlier do NOT treat empty white-spaces, or new lines as text \nnodes, while other browsers do.\nThe following example will output the number of child nodes the root element \n(of\nbooks.xml\n) has. IE9 and earlier will output 4 child nodes, while IE10 and \nlater versions, and other browsers will output 9 child nodes:\nExample\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nx = \n    xmlDoc.documentElement.childNodes;\ndocument.getElementById(\"demo\").innerHTML =\n\"Number \n    of child nodes: \" + x.length;\n}\n\nPCDATA - Parsed Character Data\nXML parsers normally parse all the text in an XML document.\nWhen an XML element is parsed, the text between the XML tags is also parsed:\n<message>This text is also parsed</message>\nThe parser does this because XML elements can contain other elements, as in this example,\nwhere the <name> element contains two other elements (first and last):\n<name><first>Bill</first><last>Gates</last></name>\nand the parser will break it up into sub-elements like this:\n<name>\n<first>Bill</first>\n<last>Gates</last>\n</name>\nParsed Character Data (PCDATA) is a term used about text data that will be parsed by the XML parser.\nCDATA - (Unparsed) Character Data\nThe term CDATA is used about text data that should not be parsed by the XML parser.\nCharacters like \"<\" and \"&\" are illegal in XML elements.\n\"<\" will generate an error because the parser interprets it as the start of a new element.\n\"&\" will generate an error because the parser interprets it as the start of a character entity.\nSome text, like JavaScript code, contains a lot of \"<\" or \"&\" characters.\nTo avoid errors script code can be defined as CDATA.\nEverything inside a CDATA section is ignored by the parser.\nA CDATA section starts with \"\n<![CDATA[\n\" and ends with \"\n]]>\n\":\n<script>\n<![CDATA[\nfunction matchwo(a,b)\n{\nif (a < b && a < 0) \n   {\nreturn 1;\n} else\n   {\nreturn 0;\n}\n}\n]]>\n</script>\nIn the example above, everything inside the CDATA section is ignored by the parser.\nNotes on CDATA sections:\nA CDATA section cannot contain the string \"]]>\". Nested CDATA sections are not allowed.\nThe \"]]>\" that marks the end of the CDATA section cannot contain spaces or line breaks.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar x, i ,xmlDoc;\nvar txt = \"\";\nvar text = \"<book>\" +\n\"<title>Everyday Italian</title>\" +\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book>\";\nparser = new DOMParser();\nxmlDoc \n = parser.parseFromString(text,\"text/xml\");\n// documentElement always \n represents the root node\nx = xmlDoc.documentElement.childNodes;\nfor (i = \n 0; i < x.length ;i++) {\ntxt += x[i].nodeName + \": \" + \n x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<book>\n<title>Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n</book>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nx = \n    xmlDoc.documentElement.childNodes;\ndocument.getElementById(\"demo\").innerHTML =\n\"Number \n    of child nodes: \" + x.length;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<message>This text is also parsed</message>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<name><first>Bill</first><last>Gates</last></name>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<name>\n<first>Bill</first>\n<last>Gates</last>\n</name>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<script>\n<![CDATA[\nfunction matchwo(a,b)\n{\nif (a < b && a < 0) \n   {\nreturn 1;\n} else\n   {\nreturn 0;\n}\n}\n]]>\n</script>",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar x, i ,xmlDoc;\nvar txt = \"\";\nvar text = \"<book>\" +\n# TODO: Complete this line\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book>\";\nparser = new DOMParser();\nxmlDoc \n = parser.parseFromString(text,\"text/xml\");\n// documentElement always \n represents the root node\nx = xmlDoc.documentElement.childNodes;\nfor (i = \n 0; i < x.length ;i++) {\ntxt += x[i].nodeName + \": \" + \n x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n</script>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar x, i ,xmlDoc;\nvar txt = \"\";\nvar text = \"<book>\" +\n\"<title>Everyday Italian</title>\" +\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book>\";\nparser = new DOMParser();\nxmlDoc \n = parser.parseFromString(text,\"text/xml\");\n// documentElement always \n represents the root node\nx = xmlDoc.documentElement.childNodes;\nfor (i = \n 0; i < x.length ;i++) {\ntxt += x[i].nodeName + \": \" + \n x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n</script>\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<book>\n# TODO: Complete this line\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n</book>",
      "solution": "<book>\n<title>Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n</book>"
    }
  ],
  "related_topics": [
    {
      "id": "08267a9b-1101-4552-89d9-89070c60848e",
      "title": "Nodejs Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b362285a-a4e8-4d04-98b3-918e747a7b99",
      "title": "Nodejs Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "65bb04e7-9433-4515-b131-087030c6e380",
      "title": "Nodejs Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is XML DOM\nTraverse Node Tree\n\nTraversing?",
      "options": [
        "looping through or traveling across the node tree",
        "None of the above.",
        "None of the above.",
        "called \"Traversing the node tree\"\nThe example below loops through all child nodes of <book>"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of XML DOM\nTraverse Node Tree\n\nTraversing is 'looping through or traveling across the node tree'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "looping through or traveling across the node tree",
        "None of the above.",
        "called \"Traversing the node tree\"\nThe example below loops through all child nodes of <book>"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'called \"Traversing the node tree\"\nThe example below loops through all child nodes of <book>'."
    }
  ],
  "summary": "This tutorial covers XML DOMTraverse Node Tree concepts and techniques. You'll learn how to use XML DOMTraverse Node Tree effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOMTraverse Node Tree and how to apply it in your projects."
}