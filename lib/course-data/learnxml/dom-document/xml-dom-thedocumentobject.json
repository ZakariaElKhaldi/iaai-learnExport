{
  "id": "2abf0f77-aa26-4818-8284-5b94e081785f",
  "title": "XML DOM - TheDocumentObject",
  "slug": "xml-dom-thedocumentobject",
  "metadata": {
    "description": "Learn about XML DOM - TheDocumentObject with clear explanations and practical examples.",
    "keywords": [
      "document",
      "returns",
      "node",
      "object",
      "creates",
      "name",
      "specified",
      "element",
      "processing",
      "description"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Document"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM - The\nDocument\nObject",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Document object represents the entire XML document.\nThe XML Document Object\nThe Document object is the root of an XML document tree, and gives us the primary access to the document's data.\nSince element nodes, text nodes, comments, processing instructions, etc. \ncannot exist outside the document, the Document object also contains methods to \ncreate these objects. The Node objects have a ownerDocument property which \nassociates them with the Document where they were created.\nDocument Object Properties\nProperty\nDescription\nchildNodes\nReturns a NodeList of child nodes for the document\ndoctype\nReturns the Document Type Declaration associated with the document\ndocumentElement\nReturns the root node of the document\ndocumentURI\nSets or returns the location of the document\ndomConfig\nReturns the configuration used when normalizeDocument() is invoked\nfirstChild\nReturns the first child node of the document\nimplementation\nReturns the DOMImplementation object that handles this document\ninputEncoding\nReturns the encoding used for the document (when parsing)\nlastChild\nReturns the last child node of the document\nnodeName\nReturns the name of a node (depending on its type)\nnodeType\nReturns the node type of a node\nnodeValue\nSets or returns the value of a node (depending on its type)\nxmlEncoding\nReturns the XML encoding of the document\nxmlStandalone\nSets or returns whether the document is standalone\nxmlVersion\nSets or returns the XML version of the document\nDocument Object Methods\nMethod\nDescription\nadoptNode(sourcenode)\nAdopts a node from another document to this document, and returns the adopted node\ncreateAttribute(name)\nCreates an attribute node with the specified name, and returns the new Attr object\ncreateAttributeNS(uri,name)\nCreates an attribute node with the specified name and namespace, and returns the new Attr object\ncreateCDATASection()\nCreates a CDATA section node\ncreateComment()\nCreates a comment node\ncreateDocumentFragment()\nCreates an empty DocumentFragment object, and returns it\ncreateElement()\nCreates an element node\ncreateElementNS()\nCreates an element node with a specified namespace\ncreateEntityReference(name)\nCreates an EntityReference object, and returns it\ncreateProcessingInstruction(target,data)\nCreates a ProcessingInstruction object, and returns it\ncreateTextNode()\nCreates a text node\ngetElementById(id)\nReturns the element that has an ID attribute with the given value. If no such element exists, it returns null\ngetElementsByTagName()\nReturns a NodeList of all elements with a specified name\ngetElementsByTagNameNS()\nReturns a NodeList of all elements with a specified name and namespace\nimportNode(nodetoimport,deep)\nImports a node from another document to this document. This method creates a new copy of the source node. If the deep parameter is set to true, it imports all children of the specified node. If set to false, it imports only the node itself. This method returns the imported node\nnormalizeDocument()\nrenameNode()\nRenames an element or attribute node\nDocumentType Object Properties\nEach document has a DOCTYPE attribute that whose value is either null or a DocumentType object.\nThe DocumentType object provides an interface to the entities defined for an \nXML document.\nProperty\nDescription\nname\nReturns the name of the DTD\npublicId\nReturns the public identifier of the DTD\nsystemId\nReturns the system identifier of the external DTD\nDocumentImplementation Object Methods\nThe DOMImplementation object performs \noperations that are independent of any particular instance of the document \nobject model.\nMethod\nDescription\ncreateDocument(nsURI, name, doctype)\nCreates a new DOM Document object of the specified doctype\ncreateDocumentType(name, pubId, systemId)\nCreates an empty DocumentType node\ngetFeature(feature, version)\nReturns an object which implements the APIs of the specified feature and version, if the is any\nhasFeature(feature, version)\nChecks whether the DOM implementation implements a specific feature and version\nProcessingInstruction Object Properties\nThe ProcessingInstruction object represents a processing instruction.\nA processing instruction is used as a way to keep \nprocessor-specific information in the text of the XML document.\nProperty\nDescription\ndata\nSets or returns the content of this processing instruction\ntarget\nReturns the target of this processing instruction\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "8e1922a6-0fec-4a26-b261-7f82b74b1f8d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c4a4d459-3a86-44a7-9417-bc574d31034e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2dfe841e-b60a-4445-970c-d7a77fe518d5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The XML Document Object\nThe Document object?",
      "options": [
        "standalone\nxmlVersion\nSets or returns the XML version of the document\nDocument Object Methods\nMethod\nDescription\nadoptNode(sourcenode)\nAdopts a node from another document to this document",
        "None of the above.",
        "the root of an XML document tree",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The XML Document Object\nThe Document object is 'the root of an XML document tree'."
    },
    {
      "question": "What is xmlEncoding\nReturns the XML encoding of the document\nxmlStandalone\nSets or returns whether the document?",
      "options": [
        "None of the above.",
        "None of the above.",
        "standalone\nxmlVersion\nSets or returns the XML version of the document\nDocument Object Methods\nMethod\nDescription\nadoptNode(sourcenode)\nAdopts a node from another document to this document",
        "the root of an XML document tree"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of xmlEncoding\nReturns the XML encoding of the document\nxmlStandalone\nSets or returns whether the document is 'standalone\nxmlVersion\nSets or returns the XML version of the document\nDocument Object Methods\nMethod\nDescription\nadoptNode(sourcenode)\nAdopts a node from another document to this document'."
    }
  ],
  "summary": "This tutorial covers XML DOM - TheDocumentObject concepts and techniques. You'll learn how to use XML DOM - TheDocumentObject effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOM - TheDocumentObject and how to apply it in your projects."
}