{
  "id": "c2dd7d03-6907-4b3d-ae06-dc1c918353e4",
  "title": "XML DOMNode List",
  "slug": "xml-domnode-list",
  "metadata": {
    "description": "Learn about XML DOMNode List with clear explanations and practical examples.",
    "keywords": [
      "nodejs",
      "list",
      "node",
      "title",
      "length",
      "attribute",
      "xmldoc",
      "getelementsbytagname",
      "elements",
      "books",
      "code"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Nodejs Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Node List"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM\nNode List",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A list of nodes is returned by the getElementsByTagName() method and the childNodes property.\nDOM Node List\nWhen using properties or methods like childNodes or getElementsByTagName(), a node list object is returned.\nA node list object represents a list of nodes, in the same order as in the XML.\nNodes in the node list are accessed with index numbers starting from 0.\nThe following image represents a node list of the <title> elements in\nbooks.xml\n:\nSuppose \"books.xml\" is loaded into the variable xmlDoc.\nThis code fragment returns a node list of title elements in \"books.xml\":\nx = xmlDoc.getElementsByTagName(\"title\");\nAfter the execution of the statement above, x is a node list object.\nThe following code fragment returns the text from the first <title> element in the node list (x):\nExample\nvar txt = x[0].childNodes[0].nodeValue;\n\nAfter the execution of the statement above, txt = \"Everyday Italian\".\nNode List Length\nA node list object keeps itself up-to-date. If an element is \ndeleted or added, the list is automatically updated.\nThe length property of a node list is the number of nodes in the list.\nThis code fragment returns the number of <title> elements in \"books.xml\":\nx = xmlDoc.getElementsByTagName('title').length;\nAfter the execution of the statement above, the value of x will be 4.\nThe length of the node list can be used to loop through all the elements in the list.\nThis code fragment uses the length property to loop through the list of <title> elements:\nExample\nx = xmlDoc.getElementsByTagName('title');\nxLen = x.length;\nfor (i = 0; i <xLen; i++) {\ntxt += x[i].childNodes[0].nodeValue) + \" \";\n}\nOutput:\nEveryday Italian\nHarry Potter\nXQuery Kick Start\nLearning XML\n\nExample explained:\nSuppose\nbooks.xml\nis loaded into xmlDoc\nSet the x variable to hold a node list of all title elements\nCollect the text node values from <title> elements\nDOM Attribute List (Named Node Map)\nThe attributes property of an element node returns a list of attribute nodes.\nThis is called a named node map, and is similar to a node list, except for \nsome differences in methods and properties.\nAn attribute list keeps itself up-to-date. If an attribute is \ndeleted or added, the list is automatically updated.\nThis code fragment returns a list of attribute nodes from the first <book> element in \"books.xml\":\nx = xmlDoc.getElementsByTagName('book')[0].attributes;\nAfter the execution of the code above, x.length is the number of attributes \nand x.getNamedItem() can be used to return an attribute node.\nThis code fragment gets the value of the \"category\" \nattribute, and the number of attributes, of a book:\nExample\nx = xmlDoc.getElementsByTagName(\"book\")[0].attributes;\ntxt = x.getNamedItem(\"category\").nodeValue + \" \" + x.length;\nOutput:\ncooking\n1\n\nExample explained:\nSuppose\nbooks.xml\nis loaded into xmlDoc\nSet the x variable to hold a list of all attributes of the first <book> element\nGet the value of the \"category\" attribute and the length of the attribute list\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = xmlDoc.getElementsByTagName(\"title\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "var txt = x[0].childNodes[0].nodeValue;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = xmlDoc.getElementsByTagName('title').length;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = xmlDoc.getElementsByTagName('title');\nxLen = x.length;\nfor (i = 0; i <xLen; i++) {\ntxt += x[i].childNodes[0].nodeValue) + \" \";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "x = xmlDoc.getElementsByTagName('book')[0].attributes;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "x = xmlDoc.getElementsByTagName(\"book\")[0].attributes;\ntxt = x.getNamedItem(\"category\").nodeValue + \" \" + x.length;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "x = xmlDoc.getElementsByTagName(\"title\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var txt = x[0].childNodes[0].nodeValue;"
    }
  ],
  "related_topics": [
    {
      "id": "c71579a0-0a24-48fa-ac35-f136d61b8271",
      "title": "Nodejs Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fe58f4eb-abc1-4bbb-898a-35ac82e18182",
      "title": "Nodejs Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fd8bcce1-d8c3-4954-a0f2-e0e37e3f8065",
      "title": "Nodejs Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is XML DOM\nNode List\n\nA list of nodes?",
      "options": [
        "returned",
        "None of the above.",
        "returned by the getElementsByTagName() method and the childNodes property",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of XML DOM\nNode List\n\nA list of nodes is 'returned by the getElementsByTagName() method and the childNodes property'."
    },
    {
      "question": "What is a node list object?",
      "options": [
        "None of the above.",
        "returned by the getElementsByTagName() method and the childNodes property",
        "None of the above.",
        "returned"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of a node list object is 'returned'."
    }
  ],
  "summary": "This tutorial covers XML DOMNode List concepts and techniques. You'll learn how to use XML DOMNode List effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOMNode List and how to apply it in your projects."
}