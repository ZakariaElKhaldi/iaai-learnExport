{
  "id": "6da6ad7a-16c1-48f5-9420-2062ea7407af",
  "title": "DTD -Elements",
  "slug": "dtd-elements",
  "metadata": {
    "description": "Learn about DTD -Elements with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "element",
      "name",
      "note",
      "example",
      "elements",
      "message",
      "declared",
      "pcdata",
      "children",
      "child"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DTD Elements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DTD -\nElements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "In a DTD, elements are declared with an ELEMENT declaration.\nDeclaring Elements\nIn a DTD, XML elements are declared with the following syntax:\n<!ELEMENT element-name category>\nor\n<!ELEMENT element-name (element-content)>\nEmpty Elements\nEmpty elements are declared with the category keyword EMPTY:\n<!ELEMENT element-name EMPTY>\nExample:\n<!ELEMENT br EMPTY>\nXML example:\n<br />\nElements with Parsed Character Data\nElements with only parsed character data are declared with #PCDATA inside parentheses:\n<!ELEMENT element-name (#PCDATA)>\nExample:\n<!ELEMENT from (#PCDATA)>\nElements with any Contents\nElements declared with the category keyword ANY, can contain any combination of parsable data:\n<!ELEMENT element-name ANY>\nExample:\n<!ELEMENT note ANY>\nElements with Children (sequences)\nElements with one or more children are declared with the name of the children elements inside parentheses:\n<!ELEMENT element-name (child1)>\nor\n<!ELEMENT element-name (child1,child2,...)>\nExample:\n<!ELEMENT note (to,from,heading,body)>\nWhen children are declared in a sequence separated by commas, the children must appear in the same sequence in the document.\nIn a full declaration, the children must also be declared, and the children can also have children.\nThe full declaration of the \"note\" element is:\n<!ELEMENT note (to,from,heading,body)>\n<!ELEMENT to      (#PCDATA)>\n<!ELEMENT from    (#PCDATA)>\n<!ELEMENT heading (#PCDATA)>\n<!ELEMENT body    (#PCDATA)>\nDeclaring Only One Occurrence of an Element\n<!ELEMENT element-name (child-name)>\nExample:\n<!ELEMENT note (message)>\nThe example above declares that the child element \"message\" must occur once, and only once inside the \"note\" element.\nDeclaring Minimum One Occurrence of an Element\n<!ELEMENT element-name (child-name+)>\nExample:\n<!ELEMENT note (message+)>\nThe + sign in the example above declares that the child element \"message\" must occur\none or more times inside the \"note\" element.\nDeclaring Zero or More Occurrences of an Element\n<!ELEMENT element-name (child-name*)>\nExample:\n<!ELEMENT note (message*)>\nThe * sign in the example above declares that the child element \"message\" can occur zero or more times inside the \"note\" element.\nDeclaring Zero or One Occurrences of an Element\n<!ELEMENT element-name (child-name?)>\nExample:\n<!ELEMENT note (message?)>\nThe ? sign in the example above declares that the child element \"message\" can occur zero or one time inside the \"note\" element.\nDeclaring either/or Content\n<!ELEMENT note (to,from,header,(message|body))>\nThe example above declares that the \"note\" element must contain a \"to\" element, a \"from\"\nelement, a \"header\" element, and either a \"message\" or a \"body\" element.\nDeclaring Mixed Content\n<!ELEMENT note (#PCDATA|to|from|header|message)*>\nThe example above declares that the \"note\" element can contain zero or more occurrences of parsed character data, \"to\", \"from\", \"header\", or \"message\" elements.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!ELEMENT element-name category>\nor\n<!ELEMENT element-name (element-content)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<!ELEMENT element-name EMPTY>\nExample:\n<!ELEMENT br EMPTY>\nXML example:\n<br />",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!ELEMENT element-name (#PCDATA)>\nExample:\n<!ELEMENT from (#PCDATA)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<!ELEMENT element-name ANY>\nExample:\n<!ELEMENT note ANY>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<!ELEMENT element-name (child1)>\nor\n<!ELEMENT element-name (child1,child2,...)>\nExample:\n<!ELEMENT note (to,from,heading,body)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<!ELEMENT note (to,from,heading,body)>\n<!ELEMENT to      (#PCDATA)>\n<!ELEMENT from    (#PCDATA)>\n<!ELEMENT heading (#PCDATA)>\n<!ELEMENT body    (#PCDATA)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<!ELEMENT element-name (child-name)>\nExample:\n<!ELEMENT note (message)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<!ELEMENT element-name (child-name+)>\nExample:\n<!ELEMENT note (message+)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "<!ELEMENT element-name (child-name*)>\nExample:\n<!ELEMENT note (message*)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "<!ELEMENT element-name (child-name?)>\nExample:\n<!ELEMENT note (message?)>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "<!ELEMENT note (to,from,header,(message|body))>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "<!ELEMENT note (#PCDATA|to|from|header|message)*>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!ELEMENT element-name category>\nor\n# TODO: Complete this line",
      "solution": "<!ELEMENT element-name category>\nor\n<!ELEMENT element-name (element-content)>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!ELEMENT element-name EMPTY>\nExample:\n<!ELEMENT br EMPTY>\nXML example:\n# TODO: Complete this line",
      "solution": "<!ELEMENT element-name EMPTY>\nExample:\n<!ELEMENT br EMPTY>\nXML example:\n<br />"
    }
  ],
  "related_topics": [
    {
      "id": "f79e20f8-b49b-4f48-8c83-6d94b3e1ad36",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8d3a7e7e-deb7-405a-8762-0ba8b1db4576",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9bacf4c9-5ef4-430b-a6ee-8af4fa553c6b",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is elements?",
      "options": [
        "declared with an ELEMENT declaration",
        "None of the above.",
        "declared with the following syntax:\n<",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of elements is 'declared with an ELEMENT declaration'."
    },
    {
      "question": "What is XML elements?",
      "options": [
        "declared with the following syntax:\n<",
        "None of the above.",
        "declared with an ELEMENT declaration",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of XML elements is 'declared with the following syntax:\n<'."
    }
  ],
  "summary": "This tutorial covers DTD -Elements concepts and techniques. You'll learn how to use DTD -Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DTD -Elements and how to apply it in your projects."
}