{
  "id": "483945fb-0fa0-4435-a773-cbfe29318205",
  "title": "XQuerySyntax",
  "slug": "xquerysyntax",
  "metadata": {
    "description": "Learn about XQuerySyntax with clear explanations and practical examples.",
    "keywords": [
      "xquery",
      "adult",
      "else",
      "syntax",
      "value",
      "bookstore",
      "child",
      "expression",
      "attributes",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XQuery Syntax"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XQuery\nSyntax",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "XQuery is case-sensitive and XQuery elements, attributes, and variables must be valid XML names.\nXQuery Basic Syntax Rules\nSome basic syntax rules:\nXQuery is case-sensitive\nXQuery elements, attributes, and variables must be valid XML names\nAn XQuery string value can be in single or double quotes\nAn XQuery variable is defined with a $ followed by a name, e.g. $bookstore\nXQuery comments are delimited by (: and :), e.g. (: XQuery Comment :)\nThe XML Example Document\nWe will use the \"books.xml\" document in the examples below (same XML file as in the \nView the \"books.xml\" file in your browser\n.\nXQuery Conditional Expressions\n\"If-Then-Else\" expressions are allowed in XQuery.\nLook at the following example:\nfor $x in doc(\"books.xml\")/bookstore/book\nreturn\nif (\n$x/@category=\"children\"\n)\nthen\n<child>{data($x/title)}</child>\nelse\n<adult>{data($x/title)}</adult>\nNotes on the \"if-then-else\" syntax:\nparentheses around the if expression are required. else is required, but it can be just else ().\nThe result of the example above will be:\n<adult>Everyday Italian</adult>\n<child>Harry Potter</child>\n<adult>XQuery Kick Start</adult>\n<adult>Learning XML</adult>\nXQuery Comparisons\nIn XQuery there are two ways of comparing values.\n1. General comparisons: =, !=, <, <=, >, >=\n2. Value comparisons: eq, ne, lt, le, gt, ge\nThe difference between the two comparison methods are shown below.\nThe following expression returns true if any q attributes have a value \ngreater than 10:\n$bookstore//book/@q > 10\nThe following expression returns true if there is only one q attribute \nreturned by the expression, and its value is greater than 10. If more than one q \nis returned, an error occurs:\n$bookstore//book/@q gt 10\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "for $x in doc(\"books.xml\")/bookstore/book\nreturn\nif (\n$x/@category=\"children\"\n)\nthen\n<child>{data($x/title)}</child>\nelse\n<adult>{data($x/title)}</adult>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<adult>Everyday Italian</adult>\n<child>Harry Potter</child>\n<adult>XQuery Kick Start</adult>\n<adult>Learning XML</adult>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "$bookstore//book/@q > 10",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "$bookstore//book/@q gt 10",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for $x in doc(\"books.xml\")/bookstore/book\nreturn\nif (\n$x/@category=\"children\"\n# TODO: Complete this line\nthen\n<child>{data($x/title)}</child>\nelse\n<adult>{data($x/title)}</adult>",
      "solution": "for $x in doc(\"books.xml\")/bookstore/book\nreturn\nif (\n$x/@category=\"children\"\n)\nthen\n<child>{data($x/title)}</child>\nelse\n<adult>{data($x/title)}</adult>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<adult>Everyday Italian</adult>\n# TODO: Complete this line\n<adult>XQuery Kick Start</adult>\n<adult>Learning XML</adult>",
      "solution": "<adult>Everyday Italian</adult>\n<child>Harry Potter</child>\n<adult>XQuery Kick Start</adult>\n<adult>Learning XML</adult>"
    }
  ],
  "related_topics": [
    {
      "id": "f3e06614-4444-499f-80b2-5769fc971d02",
      "title": "Unknown Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "e5de2e8a-2c23-48d4-9c68-777a8d3995f2",
      "title": "Unknown Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is XQuery\nSyntax\n\nXQuery?",
      "options": [
        "None of the above.",
        "case-sensitive and XQuery elements",
        "case-sensitive\nXQuery elements",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of XQuery\nSyntax\n\nXQuery is 'case-sensitive and XQuery elements'."
    },
    {
      "question": "What is XQuery?",
      "options": [
        "case-sensitive\nXQuery elements",
        "case-sensitive and XQuery elements",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of XQuery is 'case-sensitive\nXQuery elements'."
    }
  ],
  "summary": "This tutorial covers XQuerySyntax concepts and techniques. You'll learn how to use XQuerySyntax effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XQuerySyntax and how to apply it in your projects."
}