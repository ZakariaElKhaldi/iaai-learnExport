{
  "id": "23fe65dd-6ac2-4153-b140-da01823bebd0",
  "title": "XML DOM - TheElementObject",
  "slug": "xml-dom-theelementobject",
  "metadata": {
    "description": "Learn about XML DOM - TheElementObject with clear explanations and practical examples.",
    "keywords": [
      "element",
      "returns",
      "node",
      "attribute",
      "object",
      "text",
      "namespace",
      "specified",
      "nodes",
      "child"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Element"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM - The\nElement\nObject",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Element object\nThe Element object represents an element in an XML document. Elements may contain attributes,\nother elements, or text. If an element contains text, the text is represented in a text-node.\nIMPORTANT!\nText is always stored in text nodes. A common error in DOM \nprocessing is to navigate to an element node and expect it to contain the text. \nHowever, even the simplest element node has a text node under it. For example, \nin <year>2005</year>, there is an element node (year), and a text node under it, \nwhich contains the text (2005).\nBecause the Element object is also a Node, it inherits the Node object's properties and methods.\nElement Object Properties\nProperty\nDescription\nattributes\nReturns a NamedNodeMap of attributes for the element\nbaseURI\nReturns the absolute base URI of the element\nchildNodes\nReturns a NodeList of child nodes for the element\nfirstChild\nReturns the first child of the element\nlastChild\nReturns the last child of the element\nlocalName\nReturns the local part of the name of the element\nnamespaceURI\nReturns the namespace URI of the element\n\nReturns the node immediately following the element\nnodeName\nReturns the name of the node, depending on its type\nnodeType\nReturns the type of the node\nownerDocument\nReturns the root element (document object) for an element\nparentNode\nReturns the parent node of the element\nprefix\nSets or returns the namespace prefix of the element\n\nReturns the node immediately before the element\nschemaTypeInfo\nReturns the type information associated with the element\ntagName\nReturns the name of the element\ntextContent\nSets or returns the text content of the element and its descendants\nElement Object Methods\nMethod\nDescription\nappendChild()\nAdds a new child node to the end of the list of children of the node\ncloneNode()\nClones a node\ncompareDocumentPosition()\nCompares the document position of two nodes\ngetAttribute()\nReturns the value of an attribute\ngetAttributeNS()\nReturns the value of an attribute (with a namespace)\ngetAttributeNode()\nReturns an attribute node as an Attribute object\ngetAttributeNodeNS()\nReturns an attribute node (with a namespace) as an Attribute object\ngetElementsByTagName()\nReturns a NodeList of matching element nodes, and their children\ngetElementsByTagNameNS()\nReturns a NodeList of matching element nodes (with a namespace), and their children\ngetFeature(feature,version)\nReturns a DOM object which implements the specialized APIs of the specified feature and version\ngetUserData(key)\nReturns the object associated to a key on a this node. The object must first have been set to this node by calling setUserData with the same key\nhasAttribute()\nReturns whether an element has any attributes matching a specified name\nhasAttributeNS()\nReturns whether an element has any attributes matching a specified name and namespace\nhasAttributes()\nReturns whether the element has any attributes\nhasChildNodes()\nReturns whether the element has any child nodes\ninsertBefore()\nInserts a new child node before an existing child node\nisDefaultNamespace(URI)\nReturns whether the specified namespaceURI is the default\nisEqualNode()\nChecks if two nodes are equal\nlookupNamespaceURI()\nReturns the namespace URI matching a specified prefix\nlookupPrefix()\nReturns the prefix matching a specified namespace URI\nnormalize()\nPuts all text nodes underneath this element (including attributes) into a \"normal\"\n form where only structure (e.g., elements, comments, processing instructions, CDATA sections,\n and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes\nremoveAttribute()\nRemoves a specified attribute\nremoveAttributeNS()\nRemoves a specified attribute (with a namespace)\nremoveAttributeNode()\nRemoves a specified attribute node\nremoveChild()\nRemoves a child node\nreplaceChild()\nReplaces a child node\nsetUserData(key,data,handler)\nAssociates an object to a key on the element\nsetAttribute()\nAdds a new attribute\nsetAttributeNS()\nAdds a new attribute (with a namespace)\nsetAttributeNode()\nAdds a new attribute node\nsetAttributeNodeNS(attrnode)\nAdds a new attribute node (with a namespace)\nsetIdAttribute(name,isId)\nIf the isId property of the Attribute object is true, this method declares the specified attribute to be a user-determined ID attribute\nsetIdAttributeNS(uri,name,isId)\nIf the isId property of the Attribute object is true, this method declares the specified attribute (with a namespace) to be a user-determined ID attribute\nsetIdAttributeNode(idAttr,isId)\nIf the isId property of the Attribute object is true, this method declares the specified attribute to be a user-determined ID attribute\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b9618b63-d59d-4003-80ca-66d4f24c929e",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5e9395ff-2dcc-4c5c-a09a-e45bc96affb9",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "82511612-5fc5-48c1-a7db-ea854d459ea7",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the text?",
      "options": [
        "represented in a text-node",
        "None of the above.",
        "None of the above.",
        "always stored in text nodes"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the text is 'represented in a text-node'."
    },
    {
      "question": "What is Text?",
      "options": [
        "represented in a text-node",
        "always stored in text nodes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Text is 'always stored in text nodes'."
    }
  ],
  "summary": "This tutorial covers XML DOM - TheElementObject concepts and techniques. You'll learn how to use XML DOM - TheElementObject effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOM - TheElementObject and how to apply it in your projects."
}