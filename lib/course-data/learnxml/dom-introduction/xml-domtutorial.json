{
  "id": "7395895a-9465-4f4b-893c-5f6ee2d96793",
  "title": "XML DOMTutorial",
  "slug": "xml-domtutorial",
  "metadata": {
    "description": "Learn about XML DOMTutorial with clear explanations and practical examples.",
    "keywords": [
      "html",
      "document",
      "example",
      "title",
      "node",
      "text",
      "standard",
      "element",
      "script",
      "xmldoc"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Introduction"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM\nTutorial",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "XML DOM\nTutorial\n\nWhat is the DOM",
      "content": "?\nThe DOM defines a standard for accessing and manipulating documents:\n\"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the \ncontent, structure, and style of a document.\"\nThe HTML DOM defines a standard way for accessing and manipulating HTML documents. \nIt presents an HTML document as a tree-structure.\nThe XML DOM defines a standard way for accessing and manipulating XML documents. \nIt presents an XML document as a tree-structure.\nUnderstanding the DOM is a must for anyone working with HTML or XML.\nThe HTML DOM\nAll \nHTML elements can be accessed through the HTML DOM.\nThis example changes the value of an HTML element with id=\"demo\":\nExample\n<h1 id=\"demo\">This is a Heading</h1>\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello World!\";\n</script>\n\nThis example changes the value of the first <h1> element in an HTML document:\nExample\n<h1>This is a Heading</h1>\n<h1>This is a Heading</h1>\n<script>\ndocument.getElementsByTagName(\"h1\")[0].innerHTML = \"Hello World!\";\n</script>\n\nNote:\nEven if the HTML document contains \nonly ONE <h1> element you still have to specify the array index [0], \nbecause the getElementsByTagName() method always returns an array.\nYou can learn a lot more about the HTML DOM in our\nJavaScript tutorial\n.\nThe XML DOM\nAll XML elements can be accessed through the XML DOM.\nThe XML DOM is:\nA standard object model for XML\nA standard programming interface for XML\nPlatform- and language-independent\nA W3C standard\nIn other words:\nThe XML DOM is a standard for how to get, change, add, or delete XML elements.\nGet the Value of an XML Element\nThis code retrieves the text value of the first <title> element in an \nXML document:\nExample\ntxt = xmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue;\nLoading an XML File\nThe XML file used in the examples below is\nbooks.xml\n.\nThis example reads \"books.xml\" into xmlDoc and retrieves the text value of the first <title> element in \nbooks.xml:\nExample\n<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\nmyFunction(this);\n}\n};\nxhttp.open(\"GET\", \"books.xml\", true);\nxhttp.send();\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\ndocument.getElementById(\"demo\").innerHTML =\nxmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue;\n}\n</script>\n</body>\n</html>",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Example Explained\nxmlDoc",
      "content": "- the XML DOM object created by the parser.\ngetElementsByTagName(\"title\")[0]\n- get the first <title> element\nchildNodes[0]\n- the first child of the <title> element (the text node)\nnodeValue\n- the value of the node (the text itself)\nLoading an XML String\nThis example loads a text string into an XML DOM object, and  \nextracts the info from it with JavaScript:\nExample\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar text, parser, \n xmlDoc;\ntext = \"<bookstore><book>\" +\n\"<title>Everyday \n Italian</title>\" +\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book></bookstore>\";\nparser = new DOMParser();\nxmlDoc = parser.parseFromString(text,\"text/xml\");\ndocument.getElementById(\"demo\").innerHTML =\nxmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue\n;\n</script>\n</body>\n</html>\n\nProgramming Interface\nThe DOM models XML as a set of node objects. The nodes can be accessed with \nJavaScript or other programming languages. In this tutorial we use JavaScript.\nThe programming interface to the DOM is defined by a set standard properties \nand methods.\nProperties\nare often referred to as something that is (i.e. nodename \nis \"book\").\nMethods\nare often referred to as something that is done (i.e. delete \n\"book\").\nXML DOM Properties\nThese are some typical DOM properties:\nx.nodeName - the name of x\nx.nodeValue - the value of x\nx.parentNode - the parent node of x\nx.childNodes - the child nodes of x\nx.attributes - the attributes nodes of x\nNote:\nIn the list above, x is a node object.\nXML DOM Methods\nx.getElementsByTagName(\nname\n) - get all elements with a specified tag name\nx.appendChild(\nnode\n) - insert a child node to x\nx.removeChild(\nnode\n) - remove a child node from x\nNote:\nIn the list above, x is a node object.\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<h1 id=\"demo\">This is a Heading</h1>\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello World!\";\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<h1>This is a Heading</h1>\n<h1>This is a Heading</h1>\n<script>\ndocument.getElementsByTagName(\"h1\")[0].innerHTML = \"Hello World!\";\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "txt = xmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\nmyFunction(this);\n}\n};\nxhttp.open(\"GET\", \"books.xml\", true);\nxhttp.send();\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\ndocument.getElementById(\"demo\").innerHTML =\nxmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue;\n}\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar text, parser, \n xmlDoc;\ntext = \"<bookstore><book>\" +\n\"<title>Everyday \n Italian</title>\" +\n\"<author>Giada De Laurentiis</author>\" +\n\"<year>2005</year>\" +\n\"</book></bookstore>\";\nparser = new DOMParser();\nxmlDoc = parser.parseFromString(text,\"text/xml\");\ndocument.getElementById(\"demo\").innerHTML =\nxmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].nodeValue\n;\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<h1 id=\"demo\">This is a Heading</h1>\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello World!\";\n# TODO: Complete this line",
      "solution": "<h1 id=\"demo\">This is a Heading</h1>\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello World!\";\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<h1>This is a Heading</h1>\n<h1>This is a Heading</h1>\n<script>\ndocument.getElementsByTagName(\"h1\")[0].innerHTML = \"Hello World!\";\n# TODO: Complete this line",
      "solution": "<h1>This is a Heading</h1>\n<h1>This is a Heading</h1>\n<script>\ndocument.getElementsByTagName(\"h1\")[0].innerHTML = \"Hello World!\";\n</script>"
    }
  ],
  "related_topics": [
    {
      "id": "e01dcc6f-434a-4530-a86c-3cf5afb6c324",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "103345ed-9f17-4d47-8a39-e14ff0c4cdb6",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3468fb56-6d16-45d0-bc15-6a2f5afaf9cb",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is XML DOM\nTutorial\n\nWhat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "the DOM",
        "Not a XML DOM\nTutorial\n\nWhat."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of XML DOM\nTutorial\n\nWhat is 'the DOM'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers XML DOMTutorial concepts and techniques. You'll learn how to use XML DOMTutorial effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOMTutorial and how to apply it in your projects."
}