{
  "id": "a4c94a85-d273-40af-92ff-a6bd23df02f7",
  "title": "XSLT -Editing XML",
  "slug": "xslt-editing-xml",
  "metadata": {
    "description": "Learn about XSLT -Editing XML with clear explanations and practical examples.",
    "keywords": [
      "value",
      "file",
      "form",
      "html",
      "tool",
      "field",
      "xmldoc",
      "server",
      "attribute",
      "function"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSLT Edit XML"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSLT -\nEditing XML",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data stored in XML files can be edited from an Internet browser.\nOpen, Edit and Save XML\nNow, we will show how to open, edit, and save an XML file that is stored on the server.\nWe will use XSL to transform the XML document into an HTML form. The values of the XML \nelements will be written to HTML input fields in an HTML form. The HTML form \nis editable. After editing the data, the data is going to be submitted back to the server and \nthe XML file will be updated (we will show code for both PHP and ASP).\nThe XML File and the XSL File\nFirst, take a look at the XML document (\"tool.xml\"):\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tool>\n<field id=\"prodName\">\n<value>HAMMER HG2606</value>\n</field>\n<field id=\"prodNo\">\n<value>32456240</value>\n</field>\n<field id=\"price\">\n<value>$30.00</value>\n</field>\n</tool>\nView the XML file\n.\nThen, take a look at the following style sheet (\"tool.xsl\"):\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<form method=\"post\" action=\"edittool.asp\">\n<h2>Tool Information (edit):</h2>\n<table border=\"0\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\"/></td>\n<td>\n<input type=\"text\">\n<xsl:attribute name=\"id\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"name\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"value\">\n<xsl:value-of select=\"value\" />\n</xsl:attribute>\n</input>\n</td>\n</tr>\n</xsl:for-each>\n</table>\n<br />\n<input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\" />\n<input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\" />\n</form>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>\nView the XSL file\n.\nThe XSL file above loops through the elements in the XML file and creates one input field for each XML \"field\" \nelement. The value of the XML \"field\" element's \"id\" attribute is added to both the \"id\" and \"name\" attributes of each HTML input \nfield. The value of each XML \"value\" element is added to the \"value\" attribute of each HTML input field. The result \nis an editable HTML form that contains the values from the XML file.\nThen, we have a second style sheet: \"tool_updated.xsl\". This is the XSL file that will be used to display the updated XML data. This style sheet will \nnot result in an editable HTML form, but a static HTML table:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<h2>Updated Tool Information:</h2>\n<table border=\"1\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\" /></td>\n<td><xsl:value-of select=\"value\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>\nView the XSL file\n.\nThe PHP File\nIn the \"tool.xsl\" file above, change the HTML form's action attribute \nto \"edittool.php\".\nThe \"edittool.php\" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() \nfunction applies the changes to the XML file:\n<?php\nfunction loadFile($xml, $xsl)\n{\n$xmlDoc = new DOMDocument();\n$xmlDoc->load($xml);\n$xslDoc = new DOMDocument();\n$xslDoc->load($xsl);\n$proc = new XSLTProcessor();\n$proc->importStyleSheet($xslDoc);\necho $proc->transformToXML($xmlDoc);\n}\nfunction updateFile($xml)\n{\n$xmlLoad = simplexml_load_file($xml);\n$postKeys = array_keys($_POST);\nforeach($xmlLoad->children() as $x)\n{\nforeach($_POST as \n$key=>$value)\n{\nif($key == \n$x->attributes())\n{\n$x->value = $value;\n}\n}\n}\n$xmlLoad->asXML($xml);\nloadFile($xml,\"tool_updated.xsl\");\n}\nif($_POST[\"btn_sub\"] == \"\")\n{\nloadFile(\"tool.xml\", \"tool.xsl\");\n}\nelse\n{\nupdateFile(\"tool.xml\");\n}\n?>\nTip:\nIf you don't know how to write PHP, please study our\nPHP tutorial\n.\nNote:\nWe are doing the transformation and applying the changes to the XML file on the server. This is a cross-browser solution. The client will only \nget HTML back from the server - which will work in any browser.\nThe ASP File\nThe HTML form in the \"tool.xsl\" file above has an action attribute with a value of \"edittool.asp\".\nThe \"edittool.asp\" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() \nfunction applies the changes to the XML file:\n<%\nfunction loadFile(xmlfile,xslfile)\nDim xmlDoc,xslDoc\n'Load XML and XSL file\nset xmlDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)\nset xslDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxslDoc.async = false\nxslDoc.load(xslfile)\n'Transform file\nResponse.Write(xmlDoc.transformNode(xslDoc))\nend function\nfunction updateFile(xmlfile)\nDim xmlDoc,rootEl,f\nDim i\n'Load XML file\nset xmlDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)\n'Set the rootEl variable equal to the root element\nSet rootEl = xmlDoc.documentElement\n'Loop through the form collection\nfor i = 1 To Request.Form.Count\n'Eliminate button elements in the form\nif instr(1,Request.Form.Key(i),\"btn_\")=0 then\n'The selectSingleNode method queries the XML file for a single node\n'that matches a query. This query requests the value element that is\n'the child of a field element that has an id attribute which matches\n'the current key value in the Form Collection. When there is a match -\n'set the text property equal to the value of the current field in the\n'Form Collection.\nset f = rootEl.selectSingleNode(\"field[@id='\" & _\nRequest.Form.Key(i) & \"']/value\")\nf.Text = Request.Form(i)\nend if\n\n'Save the modified XML file\nxmlDoc.save xmlfile\n'Release all object references\nset xmlDoc=nothing\nset rootEl=nothing\nset f=nothing\n'Load the modified XML file with a style sheet that\n'allows the client to see the edited information\nloadFile xmlfile,server.MapPath(\"tool_updated.xsl\")\nend function\n'If form is submitted, update the XML file and display result\n' - if not, transform the XML file for editing\nif Request.Form(\"btn_sub\")=\"\" then\nloadFile server.MapPath(\"tool.xml\"),server.MapPath(\"tool.xsl\")\nelse\nupdateFile server.MapPath(\"tool.xml\")\nend if\n%>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tool>\n<field id=\"prodName\">\n<value>HAMMER HG2606</value>\n</field>\n<field id=\"prodNo\">\n<value>32456240</value>\n</field>\n<field id=\"price\">\n<value>$30.00</value>\n</field>\n</tool>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<form method=\"post\" action=\"edittool.asp\">\n<h2>Tool Information (edit):</h2>\n<table border=\"0\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\"/></td>\n<td>\n<input type=\"text\">\n<xsl:attribute name=\"id\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"name\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"value\">\n<xsl:value-of select=\"value\" />\n</xsl:attribute>\n</input>\n</td>\n</tr>\n</xsl:for-each>\n</table>\n<br />\n<input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\" />\n<input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\" />\n</form>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<h2>Updated Tool Information:</h2>\n<table border=\"1\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\" /></td>\n<td><xsl:value-of select=\"value\" /></td>\n</tr>\n</xsl:for-each>\n</table>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nfunction loadFile($xml, $xsl)\n{\n$xmlDoc = new DOMDocument();\n$xmlDoc->load($xml);\n$xslDoc = new DOMDocument();\n$xslDoc->load($xsl);\n$proc = new XSLTProcessor();\n$proc->importStyleSheet($xslDoc);\necho $proc->transformToXML($xmlDoc);\n}\nfunction updateFile($xml)\n{\n$xmlLoad = simplexml_load_file($xml);\n$postKeys = array_keys($_POST);\nforeach($xmlLoad->children() as $x)\n{\nforeach($_POST as \n$key=>$value)\n{\nif($key == \n$x->attributes())\n{\n$x->value = $value;\n}\n}\n}\n$xmlLoad->asXML($xml);\nloadFile($xml,\"tool_updated.xsl\");\n}\nif($_POST[\"btn_sub\"] == \"\")\n{\nloadFile(\"tool.xml\", \"tool.xsl\");\n}\nelse\n{\nupdateFile(\"tool.xml\");\n}\n?>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<%\nfunction loadFile(xmlfile,xslfile)\nDim xmlDoc,xslDoc\n'Load XML and XSL file\nset xmlDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)\nset xslDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxslDoc.async = false\nxslDoc.load(xslfile)\n'Transform file\nResponse.Write(xmlDoc.transformNode(xslDoc))\nend function\nfunction updateFile(xmlfile)\nDim xmlDoc,rootEl,f\nDim i\n'Load XML file\nset xmlDoc = Server.CreateObject(\"Microsoft.XMLDOM\")\nxmlDoc.async = false\nxmlDoc.load(xmlfile)\n'Set the rootEl variable equal to the root element\nSet rootEl = xmlDoc.documentElement\n'Loop through the form collection\nfor i = 1 To Request.Form.Count\n'Eliminate button elements in the form\nif instr(1,Request.Form.Key(i),\"btn_\")=0 then\n'The selectSingleNode method queries the XML file for a single node\n'that matches a query. This query requests the value element that is\n'the child of a field element that has an id attribute which matches\n'the current key value in the Form Collection. When there is a match -\n'set the text property equal to the value of the current field in the\n'Form Collection.\nset f = rootEl.selectSingleNode(\"field[@id='\" & _\nRequest.Form.Key(i) & \"']/value\")\nf.Text = Request.Form(i)\nend if\nnext\n'Save the modified XML file\nxmlDoc.save xmlfile\n'Release all object references\nset xmlDoc=nothing\nset rootEl=nothing\nset f=nothing\n'Load the modified XML file with a style sheet that\n'allows the client to see the edited information\nloadFile xmlfile,server.MapPath(\"tool_updated.xsl\")\nend function\n'If form is submitted, update the XML file and display result\n' - if not, transform the XML file for editing\nif Request.Form(\"btn_sub\")=\"\" then\nloadFile server.MapPath(\"tool.xml\"),server.MapPath(\"tool.xsl\")\nelse\nupdateFile server.MapPath(\"tool.xml\")\nend if\n%>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tool>\n<field id=\"prodName\">\n<value>HAMMER HG2606</value>\n</field>\n<field id=\"prodNo\">\n<value>32456240</value>\n# TODO: Complete this line\n<field id=\"price\">\n<value>$30.00</value>\n</field>\n</tool>",
      "solution": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tool>\n<field id=\"prodName\">\n<value>HAMMER HG2606</value>\n</field>\n<field id=\"prodNo\">\n<value>32456240</value>\n</field>\n<field id=\"price\">\n<value>$30.00</value>\n</field>\n</tool>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n# TODO: Complete this line\n<html>\n<body>\n<form method=\"post\" action=\"edittool.asp\">\n<h2>Tool Information (edit):</h2>\n<table border=\"0\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\"/></td>\n<td>\n<input type=\"text\">\n<xsl:attribute name=\"id\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"name\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"value\">\n<xsl:value-of select=\"value\" />\n</xsl:attribute>\n</input>\n</td>\n</tr>\n</xsl:for-each>\n</table>\n<br />\n<input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\" />\n<input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\" />\n</form>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>",
      "solution": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<form method=\"post\" action=\"edittool.asp\">\n<h2>Tool Information (edit):</h2>\n<table border=\"0\">\n<xsl:for-each select=\"tool/field\">\n<tr>\n<td><xsl:value-of select=\"@id\"/></td>\n<td>\n<input type=\"text\">\n<xsl:attribute name=\"id\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"name\">\n<xsl:value-of select=\"@id\" />\n</xsl:attribute>\n<xsl:attribute name=\"value\">\n<xsl:value-of select=\"value\" />\n</xsl:attribute>\n</input>\n</td>\n</tr>\n</xsl:for-each>\n</table>\n<br />\n<input type=\"submit\" id=\"btn_sub\" name=\"btn_sub\" value=\"Submit\" />\n<input type=\"reset\" id=\"btn_res\" name=\"btn_res\" value=\"Reset\" />\n</form>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>"
    }
  ],
  "related_topics": [
    {
      "id": "25aedc2c-409c-4e69-a303-5fd8ed0fc9f1",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6e03e558-71b5-4d9a-83a1-d962c2b3c174",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2dddbf39-3b29-424a-96c4-251175951652",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and save an XML file that?",
      "options": [
        "editable",
        "None of the above.",
        "None of the above.",
        "stored on the server"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of and save an XML file that is 'stored on the server'."
    },
    {
      "question": "What is The HTML form?",
      "options": [
        "stored on the server",
        "None of the above.",
        "None of the above.",
        "editable"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The HTML form is 'editable'."
    }
  ],
  "summary": "This tutorial covers XSLT -Editing XML concepts and techniques. You'll learn how to use XSLT -Editing XML effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSLT -Editing XML and how to apply it in your projects."
}