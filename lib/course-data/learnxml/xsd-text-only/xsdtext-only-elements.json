{
  "id": "0746c253-ef95-46fe-bc67-ef45d0e93550",
  "title": "XSDText-Only Elements",
  "slug": "xsdtext-only-elements",
  "metadata": {
    "description": "Learn about XSDText-Only Elements with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "element",
      "complextype",
      "simplecontent",
      "name",
      "extension",
      "shoesize",
      "type",
      "text",
      "base",
      "content"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSD Text-only"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSD\nText-Only Elements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A complex text-only element can contain text and attributes.\nComplex Text-Only Elements\nThis type contains only simple content (text and attributes), therefore we \nadd a simpleContent element around the content. When using simple content, you \nmust define an extension OR a restriction within the simpleContent element, like this:\n<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"basetype\">\n....\n....\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\nOR\n<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:restriction base=\"basetype\">\n....\n....\n</xs:restriction>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\nTip:\nUse the extension/restriction element to expand or to limit the base simple type for the element.\nHere is an example of an XML element, \"shoesize\", that contains text-only:\n<shoesize country=\"france\">35</shoesize>\nThe following example declares a complexType, \"shoesize\". The content is defined as an \ninteger value, and the \"shoesize\" element also contains an attribute named \"country\":\n<xs:element name=\"shoesize\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"xs:integer\">\n<xs:attribute name=\"country\" type=\"xs:string\" />\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\nWe could also give the complexType element a name, and let the \"shoesize\" element \nhave a type attribute that refers to the name of the complexType (if you use \nthis method, several elements can refer to the same complex type):\n<xs:element name=\"shoesize\" type=\"shoetype\"/>\n<xs:complexType name=\"shoetype\">\n<xs:simpleContent>\n<xs:extension base=\"xs:integer\">\n<xs:attribute name=\"country\" type=\"xs:string\" />\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"basetype\">\n....\n....\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\nOR\n<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:restriction base=\"basetype\">\n....\n....\n</xs:restriction>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<shoesize country=\"france\">35</shoesize>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<xs:element name=\"shoesize\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"xs:integer\">\n<xs:attribute name=\"country\" type=\"xs:string\" />\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<xs:element name=\"shoesize\" type=\"shoetype\"/>\n<xs:complexType name=\"shoetype\">\n<xs:simpleContent>\n<xs:extension base=\"xs:integer\">\n<xs:attribute name=\"country\" type=\"xs:string\" />\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"basetype\">\n....\n....\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\n# TODO: Complete this line\n<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:restriction base=\"basetype\">\n....\n....\n</xs:restriction>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>",
      "solution": "<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base=\"basetype\">\n....\n....\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\nOR\n<xs:element name=\"somename\">\n<xs:complexType>\n<xs:simpleContent>\n<xs:restriction base=\"basetype\">\n....\n....\n</xs:restriction>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<shoesize country=\"france\">35</shoesize>"
    }
  ],
  "related_topics": [
    {
      "id": "6572b836-be03-4125-a464-f860fffc4092",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "07bfb6a0-a301-4d8d-8f5e-b5a5b6db9498",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7201ee80-cbcb-4527-a4d1-346a4d15420e",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "an \ninteger value",
        "an example of an XML element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Here is 'an example of an XML element'."
    },
    {
      "question": "What is The content is?",
      "options": [
        "None of the above.",
        "None of the above.",
        "an \ninteger value",
        "an example of an XML element"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The content is is 'an \ninteger value'."
    }
  ],
  "summary": "This tutorial covers XSDText-Only Elements concepts and techniques. You'll learn how to use XSDText-Only Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSDText-Only Elements and how to apply it in your projects."
}