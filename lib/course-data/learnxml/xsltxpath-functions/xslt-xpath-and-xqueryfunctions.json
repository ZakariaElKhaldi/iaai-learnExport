{
  "id": "50c1c07c-1647-42d0-b11a-cc157684234b",
  "title": "XSLT, XPath, and XQueryFunctions",
  "slug": "xslt-xpath-and-xqueryfunctions",
  "metadata": {
    "description": "Learn about XSLT, XPath, and XQueryFunctions with clear explanations and practical examples.",
    "keywords": [
      "returns",
      "example",
      "result",
      "argument",
      "string",
      "value",
      "node",
      "item",
      "datetime",
      "time"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 14,
    "category": "LearnXML",
    "subcategory": "XSLT/XPath Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSLT, XPath, and XQuery\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "XSLT 2.0, XPath 2.0, and XQuery 1.0, share the same functions library.\nFunctions Reference\nAccessor\nError and Trace\nNumeric\nString\nAnyURI\nBoolean\nDuration/Date/Time\nQName\nNode\nSequence\nContext\nThe default prefix for the function namespace is fn:\nThe URI of the function namespace is: \nTip:\nFunctions are often called with the fn: prefix, such as fn:string(). \nHowever, since fn: is the default prefix of the namespace, the function names do \nnot need to be prefixed when called.\nAccessor Functions\nName\nDescription\nfn:node-name(\nnode\n)\nReturns the node-name of the argument node\nfn:nilled(\nnode\n)\nReturns a Boolean value indicating whether the argument node is nilled\nfn:data(\nitem.item,...\n)\nTakes a sequence of items and returns a sequence of atomic values\nfn:base-uri()\nfn:base-uri(\nnode\n)\nReturns the value of the base-uri property of the current or specified node\nfn:document-uri(\nnode\n)\nReturns the value of the document-uri property for the specified node\nError and Trace Functions\nName\nDescription\nfn:error()\nfn:error(\nerror\n)\nfn:error(\nerror,description\n)\nfn:error(\nerror,description,error-object\n)\nExample: error(fn:QName(' 'err:toohigh'), 'Error: Price is too high')\nResult: Returns  and the string \"Error: Price is too high\" to the external processing environment\nfn:trace(\nvalue,label\n)\nUsed to debug queries\nFunctions on Numeric Values\nName\nDescription\nfn:number(\narg\n)\nReturns the numeric value of the argument. The argument could be a boolean, string, or node-set\nExample: number('100')\nResult: 100\nfn:abs(\nnum\n)\nReturns the absolute value of the argument\nExample: abs(3.14)\nResult: 3.14\nExample: abs(-3.14)\nResult: 3.14\nfn:ceiling(\nnum\n)\nReturns the smallest integer that is greater than the number argument\nExample: ceiling(3.14)\nResult: 4\nfn:floor(\nnum\n)\nReturns the largest integer that is not greater than the number argument\nExample: floor(3.14)\nResult: 3\nfn:round(\nnum\n)\nRounds the number argument to the nearest integer\nExample: round(3.14)\nResult: 3\nfn:round-half-to-even()\nExample: round-half-to-even(0.5)\nResult: 0\nExample: round-half-to-even(1.5)\nResult: 2\nExample: round-half-to-even(2.5)\nResult: 2\nFunctions on Strings\nName\nDescription\nfn:string(\narg\n)\nReturns the string value of the argument. The argument could be a number, boolean, or node-set\nExample: string(314)\nResult: \"314\"\nfn:codepoints-to-string((\nint,int,...\n))\nCreates a string from a sequence of the Unicode Standard code points\nExample: codepoints-to-string((84, 104, 233, 114, 232, 115, 101))\nResult: 'Th\u00e9r\u00e8se'\nfn:string-to-codepoints(\nstring\n)\nReturns the sequence of the Unicode standard code points from a string\nExample: string-to-codepoints(\"Th\u00e9r\u00e8se\")\nResult: (84, 104, 233, 114, 232, 115, 101)\nfn:codepoint-equal(\ncomp1,comp2\n)\nReturns true if the value of comp1 is equal to the value of comp2, according to the Unicode code point collation ( otherwise it returns false\nfn:compare(\ncomp1,comp2\n)\nfn:compare(\ncomp1,comp2,collation\n)\nReturns -1 if comp1 is less than comp2, 0 if comp1 is equal to comp2, or 1 if comp1 is greater than comp2 (according to the rules of the collation that is used)\nExample: compare('ghi', 'ghi')\nResult: 0\nfn:concat(\nstring,string,...\n)\nReturns the concatenation of the strings\nExample: concat('XPath ','is ','FUN!')\nResult: 'XPath is FUN!'\nfn:string-join(\n(string,string,...),sep\n)\nReturns a string created by concatenating the string arguments and using the sep argument as the separator\nExample: string-join(('We', 'are', 'having', 'fun!'), ' ')\nResult: ' We are having fun! '\nExample: string-join(('We', 'are', 'having', 'fun!'))\nResult: 'Wearehavingfun!'\nExample:string-join((), 'sep')\nResult: ''\nfn:substring(\nstring,start,len\n)\nfn:substring(\nstring,start\n)\nReturns the substring from the start position to the specified length. Index of the first character is 1. If length is omitted it returns the substring from the start position to the end\nExample: substring('Beatles',1,4)\nResult: 'Beat'\nExample: substring('Beatles',2)\nResult: 'eatles'\nfn:string-length(\nstring\n)\nfn:string-length()\nReturns the length of the specified string. If there is no string argument it returns the length of the string value of the current node\nExample: string-length('Beatles')\nResult: 7\nfn:normalize-space(\nstring\n)\nfn:normalize-space()\nRemoves leading and trailing spaces from the specified string, and \n    replaces all internal sequences of white space with one and returns the result. If there is no string argument it does the same on the current node\nExample: normalize-space(' The\u00a0\u00a0 XML ')\nResult: 'The XML'\nfn:normalize-unicode()\nfn:upper-case(\nstring\n)\nConverts the string argument to upper-case\nExample: upper-case('The XML')\nResult: 'THE XML'\nfn:lower-case(\nstring\n)\nConverts the string argument to lower-case\nExample: lower-case('The XML')\nResult: 'the xml'\nfn:translate(\nstring1,string2,string3\n)\nConverts string1 by replacing the characters in string2 with the characters in string3\nExample: translate('12:30','30','45')\nResult: '12:45'\nExample: translate('12:30','03','54')\nResult: '12:45'\nExample: translate('12:30','0123','abcd')\nResult: 'bc:da'\nfn:escape-uri(\nstringURI,esc-res\n)\nExample: escape-uri(\"\", true())\nResult: \"http%3A%2F%2Fexample.com%2Ftest#car\"\nExample: escape-uri(\"\", false())\nResult: \"\"\nExample: escape-uri (\"\", false())\nResult: \"\"\nfn:contains(\nstring1,string2\n)\nReturns true if string1 contains string2, otherwise it returns false\nExample: contains('XML','XM')\nResult: true\nfn:starts-with(\nstring1,string2\n)\nReturns true if string1 starts with string2, otherwise it returns false\nExample: starts-with('XML','X')\nResult: true\nfn:ends-with(\nstring1,string2\n)\nReturns true if string1 ends with string2, otherwise it returns false\nExample: ends-with('XML','X')\nResult: false\nfn:substring-before(\nstring1,string2\n)\nReturns the start of string1 before string2 occurs in it\nExample: substring-before('12/10','/')\nResult: '12'\nfn:substring-after(\nstring1,string2\n)\nReturns the remainder of string1 after string2 occurs in it\nExample: substring-after('12/10','/')\nResult: '10'\nfn:matches(\nstring,pattern\n)\nReturns true if the string argument matches the pattern, otherwise, it returns false\nExample: matches(\"Merano\", \"ran\")\nResult: true\nfn:replace(\nstring,pattern,replace\n)\nReturns a string that is created by replacing the given pattern with the replace argument\nExample: replace(\"Bella Italia\", \"l\", \"*\")\nResult: 'Be**a Ita*ia'\nExample: replace(\"Bella Italia\", \"l\", \"\")\nResult: 'Bea Itaia'\nfn:tokenize(\nstring,pattern\n)\nExample: tokenize(\"XPath is fun\", \"\\s+\")\nResult: (\"XPath\", \"is\", \"fun\")\nFunctions for anyURI\nName\nDescription\nfn:resolve-uri(\nrelative,base\n)\nFunctions on Boolean Values\nName\nDescription\nfn:boolean(\narg\n)\nReturns a boolean value for a number, string, or node-set\nfn:not(\narg\n)\nThe argument is first reduced to a boolean value by applying the boolean() function.\n    Returns true if the boolean value is false, and false if the boolean value is true\nExample: not(true())\nResult: false\nfn:true()\nReturns the boolean value true\nExample: true()\nResult: true\nfn:false()\nReturns the boolean value false\nExample: false()\nResult: false\nFunctions on Durations, Dates and Times\nComponent Extraction Functions on Durations, Dates and Times\nName\nDescription\nfn:dateTime(\ndate,time\n)\nConverts the arguments to a date and a time\nfn:years-from-duration(\ndatetimedur\n)\nReturns an integer that represents the years component in the canonical lexical representation of the value of the argument\nfn:months-from-duration(\ndatetimedur\n)\nReturns an integer that represents the months component in the canonical lexical representation of the value of the argument\nfn:days-from-duration(\ndatetimedur\n)\nReturns an integer that represents the days component in the canonical lexical representation of the value of the argument\nfn:hours-from-duration(\ndatetimedur\n)\nReturns an integer that represents the hours component in the canonical lexical representation of the value of the argument\nfn:minutes-from-duration(\ndatetimedur\n)\nReturns an integer that represents the minutes component in the canonical lexical representation of the value of the argument\nfn:seconds-from-duration(\ndatetimedur\n)\nReturns a decimal that represents the seconds component in the canonical lexical representation of the value of the argument\nfn:year-from-dateTime(\ndatetime\n)\nReturns an integer that represents the year component in the localized value of the argument\nExample: year-from-dateTime(xs:dateTime(\"2005-01-10T12:30-04:10\"))\nResult: 2005\nfn:month-from-dateTime(\ndatetime\n)\nReturns an integer that represents the month component in the localized value of the argument\nExample: month-from-dateTime(xs:dateTime(\"2005-01-10T12:30-04:10\"))\nResult: 01\nfn:day-from-dateTime(\ndatetime\n)\nReturns an integer that represents the day component in the localized value of the argument\nExample: day-from-dateTime(xs:dateTime(\"2005-01-10T12:30-04:10\"))\nResult: 10\nfn:hours-from-dateTime(\ndatetime\n)\nReturns an integer that represents the hours component in the localized value of the argument\nExample: hours-from-dateTime(xs:dateTime(\"2005-01-10T12:30-04:10\"))\nResult: 12\nfn:minutes-from-dateTime(\ndatetime\n)\nReturns an integer that represents the minutes component in the localized value of the argument\nExample: minutes-from-dateTime(xs:dateTime(\"2005-01-10T12:30-04:10\"))\nResult: 30\nfn:seconds-from-dateTime(\ndatetime\n)\nReturns a decimal that represents the seconds component in the localized value of the argument\nExample: seconds-from-dateTime(xs:dateTime(\"2005-01-10T12:30:00-04:10\"))\nResult: 0\nfn:timezone-from-dateTime(\ndatetime\n)\nReturns the time zone component of the argument if any\nfn:year-from-date(\ndate\n)\nReturns an integer that represents the year in the localized value of the argument\nExample: year-from-date(xs:date(\"2005-04-23\"))\nResult: 2005\nfn:month-from-date(\ndate\n)\nReturns an integer that represents the month in the localized value of the argument\nExample: month-from-date(xs:date(\"2005-04-23\"))\nResult: 4\nfn:day-from-date(\ndate\n)\nReturns an integer that represents the day in the localized value of the argument\nExample: day-from-date(xs:date(\"2005-04-23\"))\nResult: 23\nfn:timezone-from-date(\ndate\n)\nReturns the time zone component of the argument if any\nfn:hours-from-time(\ntime\n)\nReturns an integer that represents the hours component in the localized value of the argument\nExample: hours-from-time(xs:time(\"10:22:00\"))\nResult: 10\nfn:minutes-from-time(\ntime\n)\nReturns an integer that represents the minutes component in the localized value of the argument\nExample: minutes-from-time(xs:time(\"10:22:00\"))\nResult: 22\nfn:seconds-from-time(\ntime\n)\nReturns an integer that represents the seconds component in the localized value of the argument\nExample: seconds-from-time(xs:time(\"10:22:00\"))\nResult: 0\nfn:timezone-from-time(\ntime\n)\nReturns the time zone component of the argument if any\nfn:adjust-dateTime-to-timezone(\ndatetime,timezone\n)\nIf the timezone argument is empty, it returns a dateTime without a timezone. Otherwise, it returns a dateTime with a timezone\nfn:adjust-date-to-timezone(\ndate\n,timezone\n)\nIf the timezone argument is empty, it returns a date without a timezone. Otherwise, it returns a date with a timezone\nfn:adjust-time-to-timezone(\ntime\n,timezone\n)\nIf the timezone argument is empty, it returns a time without a timezone. Otherwise, it returns a time with a timezone\nFunctions Related to QNames\nName\nDescription\nfn:QName()\nfn:local-name-from-QName()\nfn:namespace-uri-from-QName()\nfn:namespace-uri-for-prefix()\nfn:in-scope-prefixes()\nfn:resolve-QName()\nFunctions on Nodes\nName\nDescription\nfn:name()\nfn:name(\nnodeset\n)\nReturns the name of the current node or the first node in the specified node set\nfn:local-name()\nfn:local-name(\nnodeset\n)\nReturns the name of the current node or the first node in the specified node set - without the namespace prefix\nfn:namespace-uri()\nfn:namespace-uri(\nnodeset\n)\nReturns the namespace URI of the current node or the first node in the specified node set\nfn:lang(\nlang\n)\nReturns true if the language of the current node matches the language of the specified language\nExample: Lang(\"en\") is true for\n<p xml:lang=\"en\">...</p>\nExample: Lang(\"de\") is false for\n<p xml:lang=\"en\">...</p>\nfn:root()\nfn:root(\nnode\n)\nReturns the root of the tree to which the current node or the specified belongs. This will usually be a document node\nFunctions on Sequences\nGeneral Functions on Sequences\nName\nDescription\nfn:index-of(\n(item,item,...),searchitem\n)\nReturns the positions within the sequence of items that are equal to the searchitem argument\nExample: index-of ((15, 40, 25, 40, 10), 40)\nResult: (2, 4)\nExample: index-of ((\"a\", \"dog\", \"and\", \"a\", \"duck\"), \"a\")\nResult (1, 4)\nExample: index-of ((15, 40, 25, 40, 10), 18)\nResult: ()\nfn:remove(\n(item,item,...),position\n)\nReturns a new sequence constructed from the value of the item arguments - with the item specified by the position argument removed\nExample: remove((\"ab\", \"cd\", \"ef\"), 0)\nResult: (\"ab\", \"cd\", \"ef\")\nExample: remove((\"ab\", \"cd\", \"ef\"), 1)\nResult: (\"cd\", \"ef\")\nExample: remove((\"ab\", \"cd\", \"ef\"), 4)\nResult: (\"ab\", \"cd\", \"ef\")\nfn:empty(\nitem,item,...\n)\nReturns true if the value of the arguments IS an empty sequence, otherwise it returns false\nExample: empty(remove((\"ab\", \"cd\"), 1))\nResult: false\nfn:exists(\nitem,item,...\n)\nReturns true if the value of the arguments IS NOT an empty sequence, otherwise it returns false\nExample: exists(remove((\"ab\"), 1))\nResult: false\nfn:distinct-values(\n(item,item,...),collation\n)\nReturns only distinct (different) values\nExample: distinct-values((1, 2, 3, 1, 2))\nResult: (1, 2, 3)\nfn:insert-before(\n(item,item,...),pos,inserts\n)\nReturns a new sequence constructed from the value of the item arguments - with the value of the inserts argument inserted in the position specified by the pos argument\nExample: insert-before((\"ab\", \"cd\"), 0, \"gh\")\nResult: (\"gh\", \"ab\", \"cd\")\nExample: insert-before((\"ab\", \"cd\"), 1, \"gh\")\nResult: (\"gh\", \"ab\", \"cd\")\nExample: insert-before((\"ab\", \"cd\"), 2, \"gh\")\nResult: (\"ab\", \"gh\", \"cd\")\nExample: insert-before((\"ab\", \"cd\"), 5, \"gh\")\nResult: (\"ab\", \"cd\", \"gh\")\nfn:reverse(\n(item,item,...)\n)\nReturns the reversed order of the items specified\nExample: reverse((\"ab\", \"cd\", \"ef\"))\nResult: (\"ef\", \"cd\", \"ab\")\nExample: reverse((\"ab\"))\nResult: (\"ab\")\nfn:subsequence(\n(item,item,...),start,len\n)\nReturns a sequence of items from the position specified by the start argument and continuing for the number of items specified by the len argument. The first item is located at position 1\nExample: subsequence(($item1, $item2, $item3,...), 3)\nResult: ($item3, ...)\nExample: subsequence(($item1, $item2, $item3, ...), 2, 2)\nResult: ($item2, $item3)\nfn:unordered(\n(item,item,...)\n)\nReturns the items in an implementation dependent order\nFunctions That Test the Cardinality of Sequences\nName\nDescription\nfn:zero-or-one(\nitem,item,...\n)\nReturns the argument if it contains zero or one items, otherwise it raises an error\nfn:one-or-more(\nitem,item,...\n)\nReturns the argument if it contains one or more items, otherwise it raises an error\nfn:exactly-one(\nitem,item,...\n)\nReturns the argument if it contains exactly one item, otherwise it raises an error\nEquals, Union, Intersection and Except\nName\nDescription\nfn:deep-equal(\nparam1,param2,collation\n)\nReturns true if param1 and param2 are deep-equal to each other, otherwise it returns false\nAggregate Functions\nName\nDescription\nfn:count(\n(item,item,...)\n)\nReturns the count of nodes\nfn:avg(\n(arg,arg,...)\n)\nReturns the average of the argument values\nExample: avg((1,2,3))\nResult: 2\nfn:max(\n(arg,arg,...)\n)\nReturns the argument that is greater than the others\nExample: max((1,2,3))\nResult: 3\nExample: max(('a', 'k'))\nResult: 'k'\nfn:min(\n(arg,arg,...)\n)\nReturns the argument that is less than the others\nExample: min((1,2,3))\nResult: 1\nExample: min(('a', 'k'))\nResult: 'a'\nfn:sum(\narg,arg,...\n)\nReturns the sum of the numeric value of each node in the specified node-set\nFunctions that Generate Sequences\nName\nDescription\nfn:id(\n(string,string,...),node\n)\nReturns a sequence of element nodes that have an ID value equal to the value of one or more of the values specified in the string argument\nfn:idref(\n(string,string,...),node\n)\nReturns a sequence of element or attribute nodes that have an IDREF value equal to the value of one or more of the values specified in the string argument\nfn:doc(\nURI\n)\nfn:doc-available(\nURI\n)\nReturns true if the doc() function returns a document node, otherwise it returns false\nfn:collection()\nfn:collection(\nstring\n)\nContext Functions\nName\nDescription\nfn:position()\nReturns the index position of the node that is currently being processed\nExample: //book[position()<=3]\nResult: Selects the first three book elements\nfn:last()\nReturns the number of items in the processed node list\nExample: //book[last()]\nResult: Selects the last book element\nfn:current-dateTime()\nReturns the current dateTime (with timezone)\nfn:current-date()\nReturns the current date (with timezone)\nfn:current-time()\nReturns the current time (with timezone)\nfn:implicit-timezone()\nReturns the value of the implicit timezone\nfn:default-collation()\nReturns the value of the default collation\nfn:static-base-uri()\nReturns the value of the base-uri\nXSLT Functions\nIn addition, there are the following built-in XSLT functions:\nName\nDescription\ncurrent()\nReturns the current node\ndocument()\nUsed to access the nodes in an external XML document\nelement-available()\nTests whether the element specified is supported by the XSLT processor\nformat-number()\nConverts a number into a string\nfunction-available()\nTests whether the function specified is supported by the XSLT processor\ngenerate-id()\nReturns a string value that uniquely identifies a specified node\nkey()\nReturns a node-set using the index specified by an <xsl:key> element\nsystem-property()\nReturns the value of the system properties\nunparsed-entity-uri()\nReturns the URI of an unparsed entity\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "e0156be9-e961-4868-856d-52b2974e0fdc",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "aef834dc-ca22-4e55-a0cd-49bbc57b09af",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "721bed24-fbb5-4162-97ae-be9ac00fb128",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Time\nQName\nNode\nSequence\nContext\nThe default prefix for the function namespace?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Not a Time\nQName\nNode\nSequence\nContext\nThe default prefix for the function namespace.",
        "fn:\nThe URI of the function namespace is: \nTip:\nFunctions are often called with the fn: prefix"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Time\nQName\nNode\nSequence\nContext\nThe default prefix for the function namespace is 'fn:\nThe URI of the function namespace is: \nTip:\nFunctions are often called with the fn: prefix'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers XSLT, XPath, and XQueryFunctions concepts and techniques. You'll learn how to use XSLT, XPath, and XQueryFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSLT, XPath, and XQueryFunctions and how to apply it in your projects."
}