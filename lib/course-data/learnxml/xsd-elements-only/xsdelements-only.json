{
  "id": "6beb0c47-4e5e-4e71-a5ff-126652d7e432",
  "title": "XSDElements Only",
  "slug": "xsdelements-only",
  "metadata": {
    "description": "Learn about XSDElements Only with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "element",
      "name",
      "type",
      "person",
      "elements",
      "complextype",
      "firstname",
      "lastname",
      "sequence",
      "string"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSD Elements-only"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSD\nElements Only",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "An \"elements-only\" complex type contains an element that contains only other elements.\nComplex Types Containing Elements Only\nAn XML element, \"person\", that contains only other elements:\n<person>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</person>\nYou can define the \"person\" element in a schema, like this:\n<xs:element name=\"person\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\nNotice the <xs:sequence> tag. It means that the elements defined (\"firstname\" \nand \"lastname\") must appear in that order inside a \"person\" element.\nOr you can give the complexType element a name, and let the \"person\" element \nhave a type attribute that refers to the name of the complexType (if you use \nthis method, several elements can refer to the same complex type):\n<xs:element name=\"person\" type=\"persontype\"/>\n<xs:complexType name=\"persontype\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<person>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</person>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<xs:element name=\"person\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<xs:element name=\"person\" type=\"persontype\"/>\n<xs:complexType name=\"persontype\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<person>\n<firstname>John</firstname>\n# TODO: Complete this line\n</person>",
      "solution": "<person>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</person>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<xs:element name=\"person\">\n<xs:complexType>\n<xs:sequence>\n# TODO: Complete this line\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>",
      "solution": "<xs:element name=\"person\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>"
    }
  ],
  "related_topics": [
    {
      "id": "a23046b6-4a63-469f-8499-65a99b4d18c2",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4c2b48ee-8d2f-476b-afb8-c21bc09ebcd5",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "01f12545-eb37-45c8-8415-7dea0a268036",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "that the elements defined (\"firstname\" \nand \"lastname\") must appear in that order inside a \"person\" element"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'that the elements defined (\"firstname\" \nand \"lastname\") must appear in that order inside a \"person\" element'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers XSDElements Only concepts and techniques. You'll learn how to use XSDElements Only effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSDElements Only and how to apply it in your projects."
}