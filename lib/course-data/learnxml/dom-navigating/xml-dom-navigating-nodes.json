{
  "id": "7334d148-d052-4f9a-a2e6-e5d94e077db0",
  "title": "XML DOM -Navigating Nodes",
  "slug": "xml-dom-navigating-nodes",
  "metadata": {
    "description": "Learn about XML DOM -Navigating Nodes with clear explanations and practical examples.",
    "keywords": [
      "nodejs",
      "node",
      "nodes",
      "element",
      "function",
      "first",
      "book",
      "xmldoc",
      "navigating",
      "lastchild",
      "books"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Nodejs Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Navigating"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM -\nNavigating Nodes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Nodes can be navigated using node relationships.\nNavigating DOM Nodes\nAccessing nodes in the node tree via the relationship between nodes, is often called \"navigating nodes\".\nIn the XML DOM, node relationships are defined as properties to the nodes:\nparentNode\nchildNodes\nfirstChild\nlastChild\n\nThe following image illustrates a part of the node tree and the relationship between nodes in\nbooks.xml\n:\nDOM - Parent Node\nAll nodes have exactly one parent node. The following code navigates to the parent node of <book>:\nExample\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = xmlDoc.getElementsByTagName(\"book\")[0];\ndocument.getElementById(\"demo\").innerHTML = x.parentNode.nodeName;\n}\n\nExample explained:\nLoad\nbooks.xml\ninto xmlDoc\nGet the first <book> element\nOutput the node name of the parent node of \"x\"\nAvoid Empty Text Nodes\nSome browsers might treat empty white-spaces or new lines as text nodes. This causes a problem when using the properties: firstChild, lastChild, \nTo avoid navigating to empty text nodes (spaces and new-line characters between element nodes), we use a function that checks the node type:\nfunction get_\n{\nvar y = n.\nwhile (y.nodeType != 1)\n  {\ny = y.\n}\nreturn y;\n}\nThe function above allows you to use get_\nnode\n) instead of the property\nnode\n.\nCode explained:\nElement nodes are type 1. If the sibling node is not an element node, it \nmoves to the \nGet the First Child Element\nThe following code displays the first element node of the first <book>:\nExample\n<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\nmyFunction(this);\n}\n};\nxhttp.open(\"GET\", \n \"books.xml\", true);\nxhttp.send();\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = get_firstChild(xmlDoc.getElementsByTagName(\"book\")[0]);\ndocument.getElementById(\"demo\").innerHTML = x.nodeName;\n}\n//check if \n the first node is an element node\nfunction get_firstChild(n) {\nvar y = n.firstChild;\nwhile (y.nodeType != 1) {\ny = y.\n}\nreturn y;\n}\n</script>\n</body>\n</html>\nOutput:\ntitle\n\nExample explained:\nLoad\nbooks.xml\ninto xmlDoc\nUse the get_firstChild function on the first <book> element node to get the first child node that is an element node\nOutput the node name of first child node that is an element node\nMore Examples\nlastChild()\nUse the lastChild() method and a custom function to get the last child node of a node.\n\nUse the\n\nUse the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = xmlDoc.getElementsByTagName(\"book\")[0];\ndocument.getElementById(\"demo\").innerHTML = x.parentNode.nodeName;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function get_nextSibling(n)\n{\nvar y = n.nextSibling;\nwhile (y.nodeType != 1)\n  {\ny = y.nextSibling;\n}\nreturn y;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<p id=\"demo\"></p>\n<script>\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\nmyFunction(this);\n}\n};\nxhttp.open(\"GET\", \n \"books.xml\", true);\nxhttp.send();\nfunction myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = get_firstChild(xmlDoc.getElementsByTagName(\"book\")[0]);\ndocument.getElementById(\"demo\").innerHTML = x.nodeName;\n}\n//check if \n the first node is an element node\nfunction get_firstChild(n) {\nvar y = n.firstChild;\nwhile (y.nodeType != 1) {\ny = y.nextSibling;\n}\nreturn y;\n}\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = xmlDoc.getElementsByTagName(\"book\")[0];\ndocument.getElementById(\"demo\").innerHTML = x.parentNode.nodeName;\n# TODO: Complete this line",
      "solution": "function myFunction(xml) {\nvar xmlDoc = xml.responseXML;\nvar x = xmlDoc.getElementsByTagName(\"book\")[0];\ndocument.getElementById(\"demo\").innerHTML = x.parentNode.nodeName;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function get_nextSibling(n)\n{\nvar y = n.nextSibling;\nwhile (y.nodeType != 1)\n  {\n# TODO: Complete this line\n}\nreturn y;\n}",
      "solution": "function get_nextSibling(n)\n{\nvar y = n.nextSibling;\nwhile (y.nodeType != 1)\n  {\ny = y.nextSibling;\n}\nreturn y;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "51b7afcf-21c4-4d7c-b462-e87d7241594e",
      "title": "Nodejs Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c0f41f14-b426-47d0-a354-1ad737f86ed2",
      "title": "Nodejs Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f4c65dc1-7166-47ee-b910-7e4ee1dacb3f",
      "title": "Nodejs Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is node relationships are?",
      "options": [
        "properties to the nodes:\nparentNode\nchildNodes\nfirstChild\nlastChild\n\nThe following image illustrates a part of the node tree and the relationship between nodes in\nbooks",
        "None of the above.",
        "Not a node relationships are.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of node relationships are is 'properties to the nodes:\nparentNode\nchildNodes\nfirstChild\nlastChild\n\nThe following image illustrates a part of the node tree and the relationship between nodes in\nbooks'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers XML DOM -Navigating Nodes concepts and techniques. You'll learn how to use XML DOM -Navigating Nodes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOM -Navigating Nodes and how to apply it in your projects."
}