{
  "id": "8a2864bb-7ab1-4ffe-95a3-e620d35f0f07",
  "title": "XML DOMAdd Nodes",
  "slug": "xml-domadd-nodes",
  "metadata": {
    "description": "Learn about XML DOMAdd Nodes with clear explanations and practical examples.",
    "keywords": [
      "nodejs",
      "node",
      "xmldoc",
      "book",
      "element",
      "example",
      "method",
      "edition",
      "first",
      "attribute",
      "appendchild"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Nodejs Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "DOM Add Nodes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML DOM\nAdd Nodes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Add a Node - appendChild()\nThe\nappendChild()\nmethod adds a child node to an existing node.\nThe new node is added (appended) after any existing child nodes.\nNote:\nUse insertBefore() if the position of the node is important.\nThis code fragment creates an element (<edition>), and adds it after the last child of the first <book> element:\nExample\nnewEle = xmlDoc.createElement(\"edition\");\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);\n\nExample explained:\nSuppose\nbooks.xml\nis loaded into xmlDoc\nCreate a new node <edition>\nAppend the node to the first <book> element\nThis code fragment does the same as above, but the new element is added with a value:\nExample\nnewEle = xmlDoc.createElement(\"edition\");\nnewText=xmlDoc.createTextNode(\"first\");\nnewEle.appendChild(newText);\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);\n\nExample explained:\nSuppose\nbooks.xml\nis loaded into xmlDoc\nCreate a new node <edition>\nCreate a new text node \"first\"\nAppend the text node to the <edition> node\nAppend the <addition> node to the <book> element\nInsert a Node - insertBefore()\nThe\ninsertBefore()\nmethod inserts a node before a specified child node.\nThis method is useful when the position of the added node is important:\nExample\nnewNode = xmlDoc.createElement(\"book\");\nx = xmlDoc.documentElement;\ny = xmlDoc.getElementsByTagName(\"book\")[3];\nx.insertBefore(newNode,y);\n\nExample explained:\nSuppose\nbooks.xml\nis loaded into xmlDoc\nCreate a new element node <book>\nInsert the new node in front of the last <book> element node\nIf the second parameter of insertBefore() is null, the new node will be added \nafter the last existing child node.\nx.insertBefore(newNode,null)\nand\nx.appendChild(newNode)\nwill \nboth append a new child node to x.\nAdd a New Attribute\nThe\nsetAttribute()\nmethod sets the value of an attribute.\nExample\nxmlDoc.getElementsByTagName('book')[0].setAttribute(\"edition\",\"first\");\n\nExample explained:\nSuppose\nbooks.xml\nhas been loaded into xmlDoc\nSet the value of the attribute \"edition\" to \"first\" for the first <book> element\nThere is no method called add Attribute()\nThe setAttribute() will create a new attribute if the attribute does not exist.\nNote:\nIf the attribute already exists, the setAttribute() method will overwrite the existing value.\nAdd Text to a Text Node - insertData()\nThe\ninsertData()\nmethod inserts data into an existing \ntext node.\nThe insertData() method has two parameters:\noffset - Where to begin inserting characters (starts at zero)\nstring - The string to insert\nThe following code fragment will add \"Easy\" to the text node of the first <title> element of the loaded XML:\nExample\nxmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].insertData(0,\"Easy \");\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "newEle = xmlDoc.createElement(\"edition\");\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "newEle = xmlDoc.createElement(\"edition\");\nnewText=xmlDoc.createTextNode(\"first\");\nnewEle.appendChild(newText);\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "newNode = xmlDoc.createElement(\"book\");\nx = xmlDoc.documentElement;\ny = xmlDoc.getElementsByTagName(\"book\")[3];\nx.insertBefore(newNode,y);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "xmlDoc.getElementsByTagName('book')[0].setAttribute(\"edition\",\"first\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "xmlDoc.getElementsByTagName(\"title\")[0].childNodes[0].insertData(0,\"Easy \");",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "newEle = xmlDoc.createElement(\"edition\");\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "newEle = xmlDoc.createElement(\"edition\");\nnewText=xmlDoc.createTextNode(\"first\");\n# TODO: Complete this line\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);",
      "solution": "newEle = xmlDoc.createElement(\"edition\");\nnewText=xmlDoc.createTextNode(\"first\");\nnewEle.appendChild(newText);\nxmlDoc.getElementsByTagName(\"book\")[0].appendChild(newEle);"
    }
  ],
  "related_topics": [
    {
      "id": "ee22ac7e-fd00-40f5-a0b2-796eec230be0",
      "title": "Nodejs Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4f4768b5-0a45-4bd9-897c-a117ea5ef813",
      "title": "Nodejs Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "39d422b5-0054-4e95-93f2-acbf4d2d8063",
      "title": "Nodejs Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The new node?",
      "options": [
        "important",
        "None of the above.",
        "added (appended) after any existing child nodes",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The new node is 'added (appended) after any existing child nodes'."
    },
    {
      "question": "What is if the position of the node?",
      "options": [
        "None of the above.",
        "important",
        "added (appended) after any existing child nodes",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of if the position of the node is 'important'."
    }
  ],
  "summary": "This tutorial covers XML DOMAdd Nodes concepts and techniques. You'll learn how to use XML DOMAdd Nodes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XML DOMAdd Nodes and how to apply it in your projects."
}