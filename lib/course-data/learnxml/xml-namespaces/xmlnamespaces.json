{
  "id": "b7c1b278-c66c-4bb7-92c9-56ac38578732",
  "title": "XMLNamespaces",
  "slug": "xmlnamespaces",
  "metadata": {
    "description": "Learn about XMLNamespaces with clear explanations and practical examples.",
    "keywords": [
      "c",
      "table",
      "name",
      "xmlns",
      "namespace",
      "width",
      "length",
      "element",
      "html",
      "information",
      "prefix"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XML Namespaces"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XML\nNamespaces",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "XML Namespaces provide a method to avoid element name conflicts.\nName Conflicts\nIn XML, element names are defined by the developer. This often results in a conflict when trying to mix XML documents from different XML applications.\nThis XML carries HTML table information:\n<table>\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n</table>\nThis XML carries information about a table (a piece of furniture):\n<table>\n<name>African Coffee Table</name>\n<width>80</width>\n<length>120</length>\n</table>\nIf these XML fragments were added together, there would be a name conflict. Both contain a <table> element, but the elements have different content and meaning.\nA user or an XML application will not know how to handle these differences.\nSolving the Name Conflict Using a Prefix\nName conflicts in XML can easily be avoided using a name prefix.\nThis XML carries information about an HTML table, and a piece of furniture:\n<h:table>\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table>\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>\nIn the example above, there will be no conflict because the two <table> elements have different names.\nXML Namespaces - The xmlns Attribute\nWhen using prefixes in XML, a\nnamespace\nfor the prefix must be defined.\nThe namespace can be defined by an\nxmlns\nattribute in the start tag of an element.\nThe namespace declaration has the following syntax. xmlns:\nprefix\n=\"\nURI\n\".\n<root>\n<h:table xmlns:h=\"http://www.w3.org/TR/html4/\">\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table xmlns:f=\"https://www..com/furniture\">\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>\n</root>\nIn the example above:\nThe xmlns attribute in the first <table> element gives the h: prefix a qualified namespace.\nThe xmlns attribute in the second <table> element gives the f: prefix a qualified namespace.\nWhen a namespace is defined for an element, all child elements with the same prefix are associated with the same namespace.\nNamespaces can also be declared in the XML root element:\n<root xmlns:h=\"http://www.w3.org/TR/html4/\"\nxmlns:f=\"https://www..com/furniture\">\n<h:table>\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table>\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>\n</root>\nNote:\nThe namespace URI is not used by the parser to look up information.\nThe purpose of using an URI is to give the namespace a unique name.\nHowever, companies often use the namespace as a pointer to a\nweb page containing namespace information.\nUniform Resource Identifier (URI)\nA\nUniform Resource Identifier\n(URI) is a string of characters which identifies an Internet Resource.\nThe most common URI is the\nUniform Resource Locator\n(URL) which identifies an Internet domain address. Another, not so common type of URI is the\nUniform Resource Name\n(URN).\nDefault Namespaces\nDefining a default namespace for an element saves us from using prefixes in all the child elements. It has the following syntax:\nxmlns=\"\nnamespaceURI\n\"\nThis XML carries HTML table information:\n<table xmlns=\"http://www.w3.org/TR/html4/\">\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n</table>\nThis XML carries information about a piece of furniture:\n<table xmlns=\"https://www..com/furniture\">\n<name>African Coffee Table</name>\n<width>80</width>\n<length>120</length>\n</table>\nNamespaces in Real Use\nXSLT is a language that can be used to transform XML documents into other formats.\nThe XML document below, is a document used to transform XML into HTML.\nThe namespace \"http://www.w3.org/1999/XSL/Transform\" identifies XSLT \nelements inside an HTML document:\n<?xml version=\"1.0\" encoding=\"UTF-8\n\"\n?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr>\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n<td><xsl:value-of select=\"title\"/></td>\n<td><xsl:value-of select=\"artist\"/></td>\n</tr>\n</xsl:for-each>\n</table>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>\nIf you want to learn more about XSLT, please read our\nXSLT Tutorial\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<table>\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n</table>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<table>\n<name>African Coffee Table</name>\n<width>80</width>\n<length>120</length>\n</table>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<h:table>\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table>\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<root>\n<h:table xmlns:h=\"http://www.w3.org/TR/html4/\">\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table xmlns:f=\"https://www.w3schools.com/furniture\">\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>\n</root>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<root xmlns:h=\"http://www.w3.org/TR/html4/\"\nxmlns:f=\"https://www.w3schools.com/furniture\">\n<h:table>\n<h:tr>\n<h:td>Apples</h:td>\n<h:td>Bananas</h:td>\n</h:tr>\n</h:table>\n<f:table>\n<f:name>African Coffee Table</f:name>\n<f:width>80</f:width>\n<f:length>120</f:length>\n</f:table>\n</root>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "xmlns=\"\nnamespaceURI\n\"",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<table xmlns=\"http://www.w3.org/TR/html4/\">\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n</table>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<table xmlns=\"https://www.w3schools.com/furniture\">\n<name>African Coffee Table</name>\n<width>80</width>\n<length>120</length>\n</table>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "<?xml version=\"1.0\" encoding=\"UTF-8\n\"\n?>\n<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n<xsl:template match=\"/\">\n<html>\n<body>\n<h2>My CD Collection</h2>\n<table border=\"1\">\n<tr>\n<th style=\"text-align:left\">Title</th>\n<th style=\"text-align:left\">Artist</th>\n</tr>\n<xsl:for-each select=\"catalog/cd\">\n<tr>\n<td><xsl:value-of select=\"title\"/></td>\n<td><xsl:value-of select=\"artist\"/></td>\n</tr>\n</xsl:for-each>\n</table>\n</body>\n</html>\n</xsl:template>\n</xsl:stylesheet>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<table>\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n# TODO: Complete this line",
      "solution": "<table>\n<tr>\n<td>Apples</td>\n<td>Bananas</td>\n</tr>\n</table>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<table>\n<name>African Coffee Table</name>\n<width>80</width>\n# TODO: Complete this line\n</table>",
      "solution": "<table>\n<name>African Coffee Table</name>\n<width>80</width>\n<length>120</length>\n</table>"
    }
  ],
  "related_topics": [
    {
      "id": "d3c2fb7b-e6b4-4dd2-954e-0b3336ce2a87",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c99022af-4b1d-4d0f-a357-2f19ae8c30fb",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6758d698-d30f-4627-86d6-a8c1c6f68cd6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is element names?",
      "options": [
        "defined for an element",
        "None of the above.",
        "defined by the developer",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of element names is 'defined by the developer'."
    },
    {
      "question": "What is When a namespace?",
      "options": [
        "None of the above.",
        "defined by the developer",
        "defined for an element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of When a namespace is 'defined for an element'."
    }
  ],
  "summary": "This tutorial covers XMLNamespaces concepts and techniques. You'll learn how to use XMLNamespaces effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XMLNamespaces and how to apply it in your projects."
}