{
  "id": "0712aad8-7c24-4e31-98e3-3721d19374f5",
  "title": "XSDComplex Elements",
  "slug": "xsdcomplex-elements",
  "metadata": {
    "description": "Learn about XSDComplex Elements with clear explanations and practical examples.",
    "keywords": [
      "c",
      "element",
      "type",
      "name",
      "elements",
      "complex",
      "employee",
      "sequence",
      "string",
      "complextype",
      "firstname"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSD Complex Elements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSD\nComplex Elements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A complex element contains other elements and/or attributes.\nWhat is a Complex Element?\nA complex element is an XML element that contains other elements and/or attributes.\nThere are four kinds of complex elements:\nempty elements\nelements that contain only other elements\nelements that contain only text\nelements that contain both other elements and text\nNote:\nEach of these elements may contain attributes as well!\nExamples of Complex Elements\nA complex XML element, \"product\", which is empty:\n<product pid=\"1345\"/>\nA complex XML element, \"employee\", which contains only other elements:\n<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</employee>\nA complex XML element, \"food\", which contains only text:\n<food type=\"dessert\">Ice cream</food>\nA complex XML element, \"description\", which contains both elements and text:\n<description>\nIt happened on <date lang=\"norwegian\">03.03.99</date> ....\n</description>\nHow to Define a Complex Element\nLook at this complex XML element, \"employee\", which contains only other elements:\n<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</employee>\nWe can define a complex element in an XML Schema two different ways:\n1. The \"employee\" element can be declared directly by naming the element, like this:\n<xs:element name=\"employee\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\nIf you use the method described above, only the \"employee\" element can use the \nspecified complex type. Note that the child elements, \"firstname\" and \"lastname\", are surrounded \nby the <sequence> indicator. This means that the child elements must appear in \nthe same order as they are declared. You will learn more about indicators in the XSD Indicators chapter.\n2. The \"employee\" element can have a type attribute that refers to the name of the complex type to use:\n<xs:element name=\"employee\" type=\"personinfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\nIf you use the method described above, several elements can refer to the same complex type, like this:\n<xs:element name=\"employee\" type=\"personinfo\"/>\n<xs:element name=\"student\" type=\"personinfo\"/>\n<xs:element name=\"member\" type=\"personinfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\nYou can also base a complex type on an existing complex type and add some elements, like this:\n<xs:element name=\"employee\" type=\"fullpersoninfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:complexType name=\"fullpersoninfo\">\n<xs:complexContent>\n<xs:extension base=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"address\" type=\"xs:string\"/>\n<xs:element name=\"city\" type=\"xs:string\"/>\n<xs:element name=\"country\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:extension>\n</xs:complexContent>\n</xs:complexType>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<product pid=\"1345\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</employee>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<food type=\"dessert\">Ice cream</food>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<description>\nIt happened on <date lang=\"norwegian\">03.03.99</date> ....\n</description>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</employee>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<xs:element name=\"employee\">\n<xs:complexType>\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<xs:element name=\"employee\" type=\"personinfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<xs:element name=\"employee\" type=\"personinfo\"/>\n<xs:element name=\"student\" type=\"personinfo\"/>\n<xs:element name=\"member\" type=\"personinfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "<xs:element name=\"employee\" type=\"fullpersoninfo\"/>\n<xs:complexType name=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"firstname\" type=\"xs:string\"/>\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:complexType>\n<xs:complexType name=\"fullpersoninfo\">\n<xs:complexContent>\n<xs:extension base=\"personinfo\">\n<xs:sequence>\n<xs:element name=\"address\" type=\"xs:string\"/>\n<xs:element name=\"city\" type=\"xs:string\"/>\n<xs:element name=\"country\" type=\"xs:string\"/>\n</xs:sequence>\n</xs:extension>\n</xs:complexContent>\n</xs:complexType>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<product pid=\"1345\"/>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n# TODO: Complete this line",
      "solution": "<employee>\n<firstname>John</firstname>\n<lastname>Smith</lastname>\n</employee>"
    }
  ],
  "related_topics": [
    {
      "id": "b0b34bc2-8647-406f-b04f-4fbfe39283f5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "136d0b42-6be1-4dca-8538-7309553d8ab1",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "418c03fc-7986-4545-bcea-eddc7e83a9d8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "an XML element that contains other elements and/or attributes",
        "a Complex Element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is 'a Complex Element'."
    },
    {
      "question": "What is A complex element?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a Complex Element",
        "an XML element that contains other elements and/or attributes"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A complex element is 'an XML element that contains other elements and/or attributes'."
    }
  ],
  "summary": "This tutorial covers XSDComplex Elements concepts and techniques. You'll learn how to use XSDComplex Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSDComplex Elements and how to apply it in your projects."
}