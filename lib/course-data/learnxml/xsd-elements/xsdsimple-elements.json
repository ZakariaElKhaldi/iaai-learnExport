{
  "id": "35f4a558-5fdf-4719-a853-df8e5f23fe52",
  "title": "XSDSimple Elements",
  "slug": "xsdsimple-elements",
  "metadata": {
    "description": "Learn about XSDSimple Elements with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "element",
      "simple",
      "type",
      "value",
      "elements",
      "name",
      "string",
      "default",
      "fixed",
      "text"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnXML",
    "subcategory": "XSD Elements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "XSD\nSimple Elements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "XML Schemas define the elements of your XML files.\nA simple element is an XML element that contains only text. It cannot contain any other elements or attributes.\nWhat is a Simple Element?\nA simple element is an XML element that can contain only text. It cannot contain any other elements or attributes.\nHowever, the \"only text\" restriction is quite misleading. The text can be of many different types. It can be one of the types included in\nthe XML Schema definition (boolean, string, date, etc.), or it can be a custom type that you can define yourself.\nYou can also add restrictions (facets) to a data type in order to limit its content, or you can require the data to match a specific pattern.\nDefining a Simple Element\nThe syntax for defining a simple element is:\n<xs:element name=\"xxx\" type=\"yyy\"/>\nwhere xxx is the name of the element and yyy is the data type of the element.\nXML Schema has a lot of built-in data types. The most\ncommon types are:\nxs:string\nxs:decimal\nxs:integer\nxs:boolean\nxs:date\nxs:time\nExample\nHere are some XML elements:\n<lastname>Refsnes</lastname>\n<age>36</age>\n<dateborn>1970-03-27</dateborn>\nAnd here are the corresponding simple element definitions:\n<xs:element name=\"lastname\" type=\"xs:string\"/>\n<xs:element name=\"age\" type=\"xs:integer\"/>\n<xs:element name=\"dateborn\" type=\"xs:date\"/>\nDefault and Fixed Values for Simple Elements\nSimple elements may have a default value OR a fixed value specified.\nA default value is automatically assigned to the element when no other value is specified.\nIn the following example the default value is \"red\":\n<xs:element name=\"color\" type=\"xs:string\" default=\"red\"/>\nA fixed value is also automatically assigned to the element, and you cannot specify another value.\nIn the following example the fixed value is \"red\":\n<xs:element name=\"color\" type=\"xs:string\" fixed=\"red\"/>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<xs:element name=\"xxx\" type=\"yyy\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<lastname>Refsnes</lastname>\n<age>36</age>\n<dateborn>1970-03-27</dateborn>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<xs:element name=\"lastname\" type=\"xs:string\"/>\n<xs:element name=\"age\" type=\"xs:integer\"/>\n<xs:element name=\"dateborn\" type=\"xs:date\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<xs:element name=\"color\" type=\"xs:string\" default=\"red\"/>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<xs:element name=\"color\" type=\"xs:string\" fixed=\"red\"/>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<xs:element name=\"xxx\" type=\"yyy\"/>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<lastname>Refsnes</lastname>\n<age>36</age>\n# TODO: Complete this line",
      "solution": "<lastname>Refsnes</lastname>\n<age>36</age>\n<dateborn>1970-03-27</dateborn>"
    }
  ],
  "related_topics": [
    {
      "id": "abaf8d26-b14b-47be-848d-29f116776e0b",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "88836981-27c3-4665-a852-3952e87f63de",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "68e20b1e-9e8e-4f38-87f9-3a0c9e6f550b",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is A simple element?",
      "options": [
        "None of the above.",
        "an XML element that contains only text",
        "a Simple Element",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of A simple element is 'an XML element that contains only text'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "None of the above.",
        "an XML element that contains only text",
        "a Simple Element"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of What is 'a Simple Element'."
    }
  ],
  "summary": "This tutorial covers XSDSimple Elements concepts and techniques. You'll learn how to use XSDSimple Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of XSDSimple Elements and how to apply it in your projects."
}