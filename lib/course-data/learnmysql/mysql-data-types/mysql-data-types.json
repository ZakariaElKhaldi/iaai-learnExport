{
  "id": "ab234e8a-b73c-4c31-b16a-7caf14493147",
  "title": "MySQL Data Types",
  "slug": "mysql-data-types",
  "metadata": {
    "description": "Learn about MySQL Data Types with clear explanations and practical examples.",
    "keywords": [
      "size",
      "data",
      "number",
      "range",
      "column",
      "parameter",
      "maximum",
      "type",
      "value",
      "length"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMySQL",
    "subcategory": "MySQL Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "MySQL Data Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The data type of a column defines what value the column can hold: \ninteger, character, money, date and time, binary, \nand so on.\nMySQL Data Types (Version 8.0)\nEach column in a database table is required to have a name and a data type.\nAn SQL developer must decide what type of data that will be stored inside each \ncolumn when creating a table. The data type is a \nguideline for SQL to understand what type of data is expected inside of each \ncolumn, and it also identifies how SQL will interact with the stored data.\nIn MySQL there are three main data types: string, numeric, and date and time.\nString Data Types\nData type\nDescription\nCHAR(size)\nA FIXED length string (can contain letters, numbers, and special characters). The\nsize\nparameter specifies the column length in characters - can be \n      from 0 to   255. Default is 1\nVARCHAR(size)\nA VARIABLE length string (can contain letters, numbers, and special \n      characters). The\nsize\nparameter specifies the maximum column \n      length in characters - can be from 0 to 65535\nBINARY(size)\nEqual to CHAR(), but stores binary byte strings. The\nsize\nparameter specifies the column length in bytes. Default is 1\nVARBINARY(size)\nEqual to VARCHAR(), but stores binary byte strings. The\nsize\nparameter specifies the maximum column length in bytes.\nTINYBLOB\nFor BLOBs (Binary Large OBjects). Max length: 255 bytes\nTINYTEXT\nHolds a string with a maximum length of 255 characters\nTEXT(size)\nHolds a string with a maximum length of 65,535 bytes\nBLOB(size)\nFor BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data\nMEDIUMTEXT\nHolds a string with a maximum length of 16,777,215 characters\nMEDIUMBLOB\nFor BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data\nLONGTEXT\nHolds a string with a maximum length of 4,294,967,295 characters\nLONGBLOB\nFor BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data\nENUM(val1, val2, val3, ...)\nA string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a   blank value will be inserted. \n      The values are sorted in the order you enter them\nSET(val1, val2, val3, ...)\nA string object that can have 0 or more values, chosen from a list of \n      possible values. You can list up to 64 values in a SET list\nNumeric Data Types\nData type\nDescription\nBIT(\nsize\n)\nA bit-value type. The number of bits per value is specified in\nsize\n. \n      The\nsize\nparameter can hold a value from 1 to 64. The default \n      value for\nsize\nis 1.\nTINYINT(\nsize\n)\nA very small integer. Signed range is from -128 to 127. Unsigned range \n      is from 0 to 255. The\nsize\nparameter specifies the maximum \n      display width (which is 255)\nBOOL\nZero is considered as false, nonzero values are considered as true.\nBOOLEAN\nEqual to BOOL\nSMALLINT(\nsize\n)\nA small integer. Signed range is from -32768 to 32767. Unsigned range \n      is from 0 to 65535. The\nsize\nparameter specifies the maximum \n      display width (which is 255)\nMEDIUMINT(\nsize\n)\nA medium integer. Signed range is from -8388608 to 8388607. Unsigned \n      range is from 0 to 16777215. The\nsize\nparameter specifies the \n      maximum display width (which is 255)\nINT(\nsize\n)\nA medium integer. Signed range is from -2147483648 to 2147483647. \n      Unsigned range is from 0 to 4294967295. The\nsize\nparameter \n      specifies the maximum display width (which is 255)\nINTEGER(\nsize\n)\nEqual to INT(size)\nBIGINT(\nsize\n)\nA large integer. Signed range is from -9223372036854775808 to \n      9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The\nsize\nparameter specifies the maximum display width (which is 255)\nFLOAT(\nsize\n,\nd\n)\nA floating point number. The total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter. This syntax is deprecated in MySQL 8.0.17, \n      and it will be removed in future MySQL versions\nFLOAT(\np\n)\nA floating point number. MySQL uses the\np\nvalue to determine \n      whether to use FLOAT or DOUBLE for the resulting data type. If\np\nis from 0 to 24, the data type becomes FLOAT(). If\np\nis from 25 to \n      53, the data type becomes DOUBLE()\nDOUBLE(\nsize\n,\nd\n)\nA normal-size floating point number. The total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter\nDOUBLE PRECISION(\nsize\n,\nd\n)\nDECIMAL(\nsize\n,\nd\n)\nAn exact fixed-point number. The   total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter. The maximum number for\nsize\nis 65. \n      The maximum number for\nd\nis 30. The default value for\nsize\nis 10. The default value for\nd\nis 0.\nDEC(\nsize\n,\nd\n)\nEqual to DECIMAL(size,d)\nNote:\nAll the numeric data types may have an extra option: UNSIGNED \nor ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for \nthe column. If you add the ZEROFILL option, MySQL automatically also adds the \nUNSIGNED attribute to the column.\nDate and Time Data Types\nData type\nDescription\nDATE\nA date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'\nDATETIME(\nfsp\n)\nA date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. \n      Adding DEFAULT and ON UPDATE in the column definition to get automatic \n      initialization and updating to the current date and time\nTIMESTAMP(\nfsp\n)\nA timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD   \n      hh:mm:ss. The supported range is from '1970-01-01 00:00:01'   UTC to '2038-01-09 03:14:07' UTC. \n      Automatic initialization and updating to the current date and time can be \n      specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP \n      in the column definition\nTIME(\nfsp\n)\nA time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'\nYEAR\nA year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.\nMySQL 8.0 does not support year in two-digit format.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "4153645e-3f8c-4859-9b56-580b35ef1888",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "85f98d37-8d3f-4325-b880-206866ab60d0",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "eb8fbfef-7101-4ea1-aa45-a9ef6af5d62d",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Each column in a database table?",
      "options": [
        "None of the above.",
        "required to have a name and a data type",
        "expected inside of each \ncolumn",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Each column in a database table is 'required to have a name and a data type'."
    },
    {
      "question": "What is The data type is a \nguideline for SQL to understand what type of data?",
      "options": [
        "required to have a name and a data type",
        "None of the above.",
        "expected inside of each \ncolumn",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The data type is a \nguideline for SQL to understand what type of data is 'expected inside of each \ncolumn'."
    }
  ],
  "summary": "This tutorial covers MySQL Data Types concepts and techniques. You'll learn how to use MySQL Data Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MySQL Data Types and how to apply it in your projects."
}