{
  "id": "c03e35ae-becd-412c-819b-471d7d6d2e20",
  "title": "MySQLWorking With Dates",
  "slug": "mysqlworking-with-dates",
  "metadata": {
    "description": "Learn about MySQLWorking With Dates with clear explanations and practical examples.",
    "keywords": [
      "date",
      "dates",
      "orderdate",
      "format",
      "time",
      "table",
      "select",
      "mysql",
      "data",
      "yyyy"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMySQL",
    "subcategory": "MySQL Dates"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "MySQL\nWorking With Dates\n\nMySQL Dates\nThe most difficult part when working with dates is to be sure that the format of the date you are trying to insert",
      "content": ",\nmatches the format of the date column in the database.\nAs long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets \nmore complicated.\nMySQL Date Data Types\nMySQL comes with the following data types for storing a date or a date/time value in the database:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "DATE",
      "content": "- format YYYY-MM-DD",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "DATETIME",
      "content": "- format: YYYY-MM-DD HH:MI:SS",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "TIMESTAMP",
      "content": "- format: YYYY-MM-DD HH:MI:SS",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "YEAR",
      "content": "- format YYYY or YY\nNote:\nThe date data type are set for a column when you create a new table in your database!\nWorking with Dates\nLook at the following table:\nOrders Table\nOrderId\nProductName\nOrderDate\n1\nGeitost\n2008-11-11\n2\nCamembert Pierrot\n2008-11-09\n3\nMozzarella di Giovanni\n2008-11-11\n4\nMascarpone Fabioli\n2008-10-29\nNow we want to select the records with an OrderDate of \"2008-11-11\" from the table above.\nWe use the following\nSELECT\nstatement:\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\nThe result-set will look like this:\nOrderId\nProductName\nOrderDate\n1\nGeitost\n2008-11-11\n3\nMozzarella di Giovanni\n2008-11-11\nNote:\nTwo dates can easily be compared if there is no time component involved!\nNow, assume that the \"Orders\" table looks like this (notice the \nadded time-component in the \"OrderDate\" column):\nOrderId\nProductName\nOrderDate\n1\nGeitost\n2008-11-11 13:23:44\n2\nCamembert Pierrot\n2008-11-09 15:45:21\n3\nMozzarella di Giovanni\n2008-11-11 11:12:01\n4\nMascarpone Fabioli\n2008-10-29 14:56:59\nIf we use the same\nSELECT\nstatement as above:\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\nwe will get no result! This is because the query is looking only for dates with no time portion.\nTip:\nTo keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!\n\n\u2605\n+1",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b02a32bf-b46c-4f60-b594-b8f13abec7f7",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3ca20f2d-64dd-44c3-a439-0bdf6e5193ac",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c8c2149d-36b3-4f5f-87dd-42df6a0890df",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is MySQL\nWorking With Dates\n\nMySQL Dates\nThe most difficult part when working with dates is to be sure that the format of the date you?",
      "options": [
        "trying to insert",
        "involved",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of MySQL\nWorking With Dates\n\nMySQL Dates\nThe most difficult part when working with dates is to be sure that the format of the date you is 'trying to insert'."
    },
    {
      "question": "What is if a time portion?",
      "options": [
        "trying to insert",
        "None of the above.",
        "involved",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of if a time portion is 'involved'."
    }
  ],
  "summary": "This tutorial covers MySQLWorking With Dates concepts and techniques. You'll learn how to use MySQLWorking With Dates effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MySQLWorking With Dates and how to apply it in your projects."
}