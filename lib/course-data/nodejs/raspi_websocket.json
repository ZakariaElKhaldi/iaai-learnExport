{
  "title": "Node.js Raspberry Pi Webserver with WebSocket",
  "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_webserver_websocket.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Node.js and Raspberry Pi - Webserver with WebSocket",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What is WebSocket?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "WebSocket enables bidirectional communication in real time over the web.",
      "html": "<p>WebSocket enables bidirectional communication in real time over the web.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "WebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways!",
      "html": "<p>WebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways!</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "turning a LED on and off with a button",
          "href": "https://www.w3schools.com/nodejs_raspberrypi_led_pushbutton.asp",
          "title": ""
        }
      ],
      "text": "In this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example of turning a LED on and off with a button .",
      "html": "<p>In this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example of <a href=\"nodejs_raspberrypi_led_pushbutton.asp\">turning a LED on and off with a button</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What Do I Need?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, but this tutorial should work for most versions.",
      "html": "<p>For this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, \nbut this tutorial should work for most versions.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this you need:",
      "html": "<p>For this you need:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click the links in the list above for descriptions of the different components.",
      "html": "<p>Click the links in the list above for descriptions of the different \ncomponents.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will shine.",
      "html": "<p><strong>Note:</strong> The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Compared to our earlier example, the only new thing we need is to set up a web server, and install the socket.io module.",
      "html": "<p>Compared to our earlier example, the only new thing we need is to set up a \nweb server, and install the socket.io module.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Webserver for Raspberry Pi and Node.js",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Following the earlier chapters in this Node.js tutorial, lets set up a web server that can serve HTML files.",
      "html": "<p>Following the earlier chapters in this Node.js tutorial, lets set up a web \nserver that can serve HTML files.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In our \"nodetest\" directory create a new directory we can use for static html files:",
      "html": "<p>In our \"nodetest\" directory create a new directory we can use for static html files:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $\nmkdir public",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest $ \n  mkdir public</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now lets set up a webserver. Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error.",
      "html": "<p>Now lets set up a webserver. Create a Node.js file that opens the requested \nfile and returns the content to the client. If anything goes wrong, throw a 404 \nerror.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $\nnano webserver.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest $ \n  nano webserver.js</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulehttp.listen(8080); //listen to port 8080\n    function handler (req, res) { //create server\u00a0\u00a0fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0\u00a0});} ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'http'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "createServer",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//require http server, and \n    create server with function handler()",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'fs'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require filesystem module",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "listen",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "8080",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//listen to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//create server",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "readFile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'/public/index.html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//read \n    file index.html in public folder",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "404",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//display 404 on error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"404 Not Found\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//write HTML",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "write",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//write data from index.html",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var http = require('http').createServer(handler); //require http server, and\ncreate server with function handler()var fs = require('fs'); //require filesystem modulehttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\u00a0\u00a0fs.readFile(__dirname + '/public/index.html', function(err, data) { //read\nfile index.html in public folder\u00a0\u00a0\u00a0 if (err)\n{\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404,\n{'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\nreturn res.end();\u00a0\u00a0});}",
      "syntax_highlighting": [
        {
          "text": "\n var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulehttp.listen(8080); //listen to port 8080\n function handler (req, res) { //create server\u00a0\u00a0fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n return res.end();\u00a0\u00a0});} ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'http'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "createServer",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'fs'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require filesystem module",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "listen",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "8080",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//listen to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//create server",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "readFile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'/public/index.html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//read \n    file index.html in public folder",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "404",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//display 404 on error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"404 Not Found\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//write HTML",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "write",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//write data from index.html",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> http = require(<span class=\"jsstringcolor\" style=\"color:green\">'http'</span>).<span class=\"jspropertycolor\" style=\"color:black\">createServer</span>(handler); <span class=\"commentcolor\" style=\"color:slategray\">//require http server, and \n    create server with function handler()<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> fs = require(<span class=\"jsstringcolor\" style=\"color:green\">'fs'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//require filesystem module<br/></span><br/>http.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">8080</span>); <span class=\"commentcolor\" style=\"color:slategray\">//listen to port 8080<br/></span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handler (req, res) { <span class=\"commentcolor\" style=\"color:slategray\">//create server<br/></span>\u00a0\u00a0fs.<span class=\"jspropertycolor\" style=\"color:black\">readFile</span>(__dirname + <span class=\"jsstringcolor\" style=\"color:green\">'/public/index.html'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(err, data) { <span class=\"commentcolor\" style=\"color:slategray\">//read \n    file index.html in public folder<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//display 404 on error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"404 Not Found\"</span>);<br/>\u00a0\u00a0\u00a0 } <br/>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//write HTML<br/></span>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">write</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//write data from index.html<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>();<br/>\u00a0\u00a0});<br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulehttp.listen(8080); //listen to port 8080\n    function handler (req, res) { //create server\u00a0\u00a0fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0\u00a0});} ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'http'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "createServer",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'fs'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require filesystem module",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "listen",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "8080",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//listen to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//create server",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "readFile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'/public/index.html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//read \n    file index.html in public folder",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "404",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//display 404 on error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"404 Not Found\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//write HTML",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "write",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//write data from index.html",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Go to the folder \"public\":",
      "html": "<p>Go to the folder \"public\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $\ncd public",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest $ \n  cd public\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And create a HTML file, index.html:",
      "html": "<p>And create a HTML file, index.html:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest/public $\nnano index.html",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest/public $ \n  nano index.html</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "html",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<!DOCTYPE html>",
            "color": "rgb(112, 128, 144)",
            "class": "doctypecolor"
          },
          {
            "text": "<html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input \n    id=\"light\" type=\"checkbox\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " \n    id=\"light\" type=\"checkbox\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"light\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"checkbox\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Control LED light</h1>\n<input \nid=\"light\" type=\"checkbox\">LED\n\n</body>\n</html>",
      "syntax_highlighting": [
        {
          "text": "<!DOCTYPE html>",
          "color": "slategray",
          "class": [
            "doctypecolor"
          ]
        },
        {
          "text": "<html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input \n    id=\"light\" type=\"checkbox\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " \n    id=\"light\" type=\"checkbox\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"light\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"checkbox\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"doctypecolor\" style=\"color:slategray\">&lt;!DOCTYPE html&gt;</span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>Control LED light<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> \n    id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"light\"</span> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"checkbox\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>LED<br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<!DOCTYPE html>",
          "color": "rgb(112, 128, 144)",
          "class": "doctypecolor"
        },
        {
          "text": "<html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input \n    id=\"light\" type=\"checkbox\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " \n    id=\"light\" type=\"checkbox\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"light\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"checkbox\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This file will not have any functionality yet. For now it is just a placeholder. Lets see if the webserver is working:",
      "html": "<p>This file will not have any functionality yet. For now it is just a \nplaceholder. Lets see if the webserver is working:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest/public $ cd ..",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\npi@w3demopi:~/nodetest/public $ cd ..</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $ node webserver.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\npi@w3demopi:~/nodetest $ node webserver.js</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
      "html": "<p>Open the website in a browser using http://[RaspberryPi_IP]:8080/:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The webserver should now be up and running, and we can move on to the WebSocket part.",
      "html": "<p>The webserver should now be up and running, and we can move on to the \nWebSocket part.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Install socket.io for Node.js",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With the webserver set up, update your Raspberry Pi system packages to their latest versions.",
      "html": "<p>With the webserver set up, update your Raspberry Pi system packages to their latest versions.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Update your system package list:",
      "html": "<p>Update your system package list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo apt-get update",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo apt-get update\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Upgrade all your installed packages to their latest version:",
      "html": "<p>Upgrade all your installed packages to their latest version:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo apt-get dist-upgrade",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo apt-get dist-upgrade\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Doing this regularly will keep your Raspberry Pi installation up to date.",
      "html": "<p>Doing this regularly will keep your Raspberry Pi installation up to date.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To download and install newest version of socket.io, use the following command:",
      "html": "<p>To download and install newest version of socket.io, use the following command:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $\nnpm install socket.io --save",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ \n  npm install socket.io --save</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Adding WebSocket to our Webserver",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can use WebSocket in our application. Lets update our index.html file:",
      "html": "<p>Now we can use WebSocket in our application. Lets update our index.html \nfile:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "html",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<!DOCTYPE html>",
            "color": "rgb(112, 128, 144)",
            "class": "doctypecolor"
          },
          {
            "text": "<html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input type=\"checkbox\" id=\"light\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"checkbox\" id=\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"checkbox\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"light\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<!-- include socket.io client side script -->",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "<script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "var socket = io(); \n    //load socket.io-client and connect to the host that serves the page\n    window.addEventListener(\"load\", function(){ //when page loads\u00a0 var \n    lightbox = document.getElementById(\"light\"); \u00a0 \n    lightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changes\u00a0\u00a0\u00a0 socket.emit(\"light\", Number(this.checked)); \n    //send button status to server (as 1 or 0)\u00a0 });});socket.on('light', \n    function (data) { //get button status from client\u00a0 \n    document.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pi\u00a0 socket.emit(\"light\", data); //send \n    push button status to back to server});",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//load socket.io-client and connect to the host that serves the page",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"load\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//when page loads",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"change\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//add event listener for \n    when checkbox changes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "checked",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//send button status to server (as 1 or 0)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'light'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//get button status from client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "checked",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//change checkbox according \n    to push button on Raspberry Pi",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send \n    push button status to back to server",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Control LED \nlight</h1>\n<p><input type=\"checkbox\" id=\"light\"></p>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script>\n<!-- include socket.io client side script -->\n<script>var socket = io(); \n//load socket.io-client and connect to the host that serves the page\nwindow.addEventListener(\"load\", function(){ //when page loads\u00a0 var\nlightbox = document.getElementById(\"light\");\nlightbox.addEventListener(\"change\", function() { //add event listener for\nwhen checkbox changes\u00a0\u00a0\u00a0 socket.emit(\"light\", Number(this.checked));\n//send button status to server (as 1 or 0)\u00a0 });});socket.on('light',\nfunction (data) { //get button status from client\ndocument.getElementById(\"light\").checked = data; //change checkbox according\nto push button on Raspberry Pi\u00a0 socket.emit(\"light\", data); //send\npush button status to back to server});</script>\n\n</body>\n</html>",
      "syntax_highlighting": [
        {
          "text": "<!DOCTYPE html>",
          "color": "slategray",
          "class": [
            "doctypecolor"
          ]
        },
        {
          "text": "<html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input type=\"checkbox\" id=\"light\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"checkbox\" id=\"light\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"checkbox\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"light\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<!-- include socket.io client side script -->",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "<script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "var socket = io(); \n //load socket.io-client and connect to the host that serves the page\n    window.addEventListener(\"load\", function(){ //when page loads\u00a0 var \n    lightbox = document.getElementById(\"light\"); \u00a0 \n    lightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changes\u00a0\u00a0\u00a0 socket.emit(\"light\", Number(this.checked)); \n //send button status to server (as 1 or 0)\u00a0 });});socket.on('light', \n function (data) { //get button status from client\u00a0 \n    document.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pi\u00a0 socket.emit(\"light\", data); //send \n    push button status to back to server});",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//load socket.io-client and connect to the host that serves the page",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"load\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//when page loads",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"light\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"change\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//add event listener for \n    when checkbox changes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"light\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "checked",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//send button status to server (as 1 or 0)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'light'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//get button status from client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"light\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "checked",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//change checkbox according \n    to push button on Raspberry Pi",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"light\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send \n    push button status to back to server",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"doctypecolor\" style=\"color:slategray\">&lt;!DOCTYPE html&gt;</span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>Control LED \n    light<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"checkbox\"</span> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"light\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>\n<span class=\"commentcolor\" style=\"color:slategray\">&lt;!-- include socket.io client side script --&gt;</span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> socket = io(); <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//load socket.io-client and connect to the host that serves the page<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    window.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"load\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(){ <span class=\"commentcolor\" style=\"color:slategray\">//when page loads<br/></span>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    lightbox = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>); <br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    lightbox.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"change\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { <span class=\"commentcolor\" style=\"color:slategray\">//add event listener for \n    when checkbox changes<br/></span>\u00a0\u00a0\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>, Number(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">checked</span>)); <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//send button status to server (as 1 or 0)<br/></span>\u00a0 });<br/>});<br/>socket.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'light'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (data) { <span class=\"commentcolor\" style=\"color:slategray\">//get button status from client<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">checked</span> = data; <span class=\"commentcolor\" style=\"color:slategray\">//change checkbox according \n    to push button on Raspberry Pi<br/></span>\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>, data); <span class=\"commentcolor\" style=\"color:slategray\">//send \n    push button status to back to server<br/></span>});<br/></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<!DOCTYPE html>",
          "color": "rgb(112, 128, 144)",
          "class": "doctypecolor"
        },
        {
          "text": "<html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input type=\"checkbox\" id=\"light\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"checkbox\" id=\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"checkbox\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"light\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<!-- include socket.io client side script -->",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "<script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "var socket = io(); \n    //load socket.io-client and connect to the host that serves the page\n    window.addEventListener(\"load\", function(){ //when page loads\u00a0 var \n    lightbox = document.getElementById(\"light\"); \u00a0 \n    lightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changes\u00a0\u00a0\u00a0 socket.emit(\"light\", Number(this.checked)); \n    //send button status to server (as 1 or 0)\u00a0 });});socket.on('light', \n    function (data) { //get button status from client\u00a0 \n    document.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pi\u00a0 socket.emit(\"light\", data); //send \n    push button status to back to server});",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//load socket.io-client and connect to the host that serves the page",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"load\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//when page loads",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"change\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//add event listener for \n    when checkbox changes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "checked",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//send button status to server (as 1 or 0)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'light'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//get button status from client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "checked",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//change checkbox according \n    to push button on Raspberry Pi",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send \n    push button status to back to server",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And our webserver.js file:",
      "html": "<p>And our webserver.js file:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)http.listen(8080); //listen to port 8080\n    function handler (req, res) { //create server\u00a0 fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n    var lightvalue = 0; //static variable for current status\u00a0 socket.on('light', \n    function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n    lightvalue = data;\u00a0\u00a0\u00a0 if (lightvalue) {\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log\u00a0\u00a0\u00a0 }\u00a0 });}); ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'http'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "createServer",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//require http server, and \n    create server with function handler()",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'fs'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require filesystem module",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'socket.io'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require socket.io module and pass the http \n    object (server)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "listen",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "8080",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//listen to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//create server",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "readFile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'/public/index.html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//read \n    file index.html in public folder",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "404",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//display 404 on error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"404 Not Found\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//write HTML",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "write",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//write data from index.html",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "sockets",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'connection'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// WebSocket Connection",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//static variable for current status",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'light'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//get light switch status from client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//turn LED on or off, for now we will just show it \n    in console.log",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var http = require('http').createServer(handler); //require http server, and\ncreate server with function handler()var fs = require('fs'); //require filesystem modulevar io\n= require('socket.io')(http) //require socket.io module and pass the http\nobject (server)http.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\u00a0 fs.readFile(__dirname + '/public/index.html', function(err, data) { //read\nfile index.html in public folder\u00a0\u00a0\u00a0 if (err)\n{\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404,\n{'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\nreturn res.end();\u00a0 });}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\u00a0 socket.on('light',\nfunction(data) { //get light switch status from client\nlightvalue = data;\u00a0\u00a0\u00a0 if (lightvalue) {\nconsole.log(lightvalue); //turn LED on or off, for now we will just show it\nin console.log\u00a0\u00a0\u00a0 }\u00a0 });});",
      "syntax_highlighting": [
        {
          "text": "\n var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)http.listen(8080); //listen to port 8080\n function handler (req, res) { //create server\u00a0 fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n var lightvalue = 0; //static variable for current status\u00a0 socket.on('light', \n function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n    lightvalue = data;\u00a0\u00a0\u00a0 if (lightvalue) {\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log\u00a0\u00a0\u00a0 }\u00a0 });}); ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'http'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "createServer",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'fs'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require filesystem module",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'socket.io'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require socket.io module and pass the http \n    object (server)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "listen",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "8080",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//listen to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//create server",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "readFile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'/public/index.html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//read \n    file index.html in public folder",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "404",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//display 404 on error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"404 Not Found\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//write HTML",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "write",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//write data from index.html",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "sockets",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'connection'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// WebSocket Connection",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//static variable for current status",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'light'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//get light switch status from client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//turn LED on or off, for now we will just show it \n    in console.log",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> http = require(<span class=\"jsstringcolor\" style=\"color:green\">'http'</span>).<span class=\"jspropertycolor\" style=\"color:black\">createServer</span>(handler); <span class=\"commentcolor\" style=\"color:slategray\">//require http server, and \n    create server with function handler()<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> fs = require(<span class=\"jsstringcolor\" style=\"color:green\">'fs'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//require filesystem module<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> io <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    = require(<span class=\"jsstringcolor\" style=\"color:green\">'socket.io'</span>)(http) <span class=\"commentcolor\" style=\"color:slategray\">//require socket.io module and pass the http \n    object (server)<br/></span><br/>http.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">8080</span>); <span class=\"commentcolor\" style=\"color:slategray\">//listen to port 8080<br/></span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handler (req, res) { <span class=\"commentcolor\" style=\"color:slategray\">//create server<br/></span>\u00a0 fs.<span class=\"jspropertycolor\" style=\"color:black\">readFile</span>(__dirname + <span class=\"jsstringcolor\" style=\"color:green\">'/public/index.html'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(err, data) { <span class=\"commentcolor\" style=\"color:slategray\">//read \n    file index.html in public folder<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//display 404 on error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"404 Not Found\"</span>);<br/>\u00a0\u00a0\u00a0 } <br/>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//write HTML<br/></span>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">write</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//write data from index.html<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>();<br/>\u00a0 });<br/>}<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    io.<span class=\"jspropertycolor\" style=\"color:black\">sockets</span>.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'connection'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (socket) {<span class=\"commentcolor\" style=\"color:slategray\">// WebSocket Connection<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> lightvalue = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; <span class=\"commentcolor\" style=\"color:slategray\">//static variable for current status<br/></span>\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'light'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(data) { <span class=\"commentcolor\" style=\"color:slategray\">//get light switch status from client<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    lightvalue = data;<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (lightvalue) {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(lightvalue); <span class=\"commentcolor\" style=\"color:slategray\">//turn LED on or off, for now we will just show it \n    in console.log<br/></span>\u00a0\u00a0\u00a0 }<br/>\u00a0 });<br/>}); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)http.listen(8080); //listen to port 8080\n    function handler (req, res) { //create server\u00a0 fs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\u00a0\u00a0\u00a0 if (err) \n    {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n    var lightvalue = 0; //static variable for current status\u00a0 socket.on('light', \n    function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n    lightvalue = data;\u00a0\u00a0\u00a0 if (lightvalue) {\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log\u00a0\u00a0\u00a0 }\u00a0 });}); ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'http'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "createServer",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'fs'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require filesystem module",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'socket.io'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require socket.io module and pass the http \n    object (server)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "listen",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "8080",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//listen to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//create server",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "readFile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'/public/index.html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//read \n    file index.html in public folder",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "404",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//display 404 on error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"404 Not Found\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//write HTML",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "write",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//write data from index.html",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "sockets",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'connection'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// WebSocket Connection",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//static variable for current status",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'light'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//get light switch status from client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//turn LED on or off, for now we will just show it \n    in console.log",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lets test the server:",
      "html": "<p>Lets test the server:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $\nnode webserver.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ \n  node webserver.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
      "html": "<p>Open the website in a browser using http://[RaspberryPi_IP]:8080/:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now the server should output all the changes to the checkbox to the console on the Raspberry Pi.",
      "html": "<p>Now the server should output all the changes to the checkbox to the console \non the Raspberry Pi.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The client is sending the changes to the server, and the server is responding.",
      "html": "<p>The client is sending the changes to the server, and the server is \nresponding.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "push button \ncontrolled LED",
          "href": "https://www.w3schools.com/nodejs_raspberrypi_led_pushbutton.asp",
          "title": ""
        }
      ],
      "text": "Lets add the push button controlled LED from a previous chapter.",
      "html": "<p>Lets add the <a href=\"nodejs_raspberrypi_led_pushbutton.asp\">push button \ncontrolled LED</a> from a previous chapter.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Adding Hardware, and sending a response to the Client",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lets update our webserver.js file again. We will use a lot of the code from the Pushbutton controlled LED chapter.",
      "html": "<p>Lets update our webserver.js file again. We will use a lot of the code from \nthe Pushbutton controlled LED chapter.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)var Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIOvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    outputvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled\n    http.listen(8080); //listen to port 8080function handler (req, res) \n    { //create server\u00a0 fs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder\u00a0\u00a0\u00a0 if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n    var lightvalue = 0; //static variable for current status\u00a0 \n    pushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton\u00a0\u00a0\u00a0 if (err) { //if an error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.error('There was an error', err); //output error message to console\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return;\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 lightvalue = value;\u00a0\u00a0\u00a0 \n    socket.emit('light', lightvalue); //send button status to client\u00a0 \n    });\u00a0 socket.on('light', function(data) { //get light switch status \n    from client\u00a0\u00a0\u00a0 lightvalue = data;\u00a0\u00a0\u00a0 \n    if (lightvalue != LED.readSync()) { //only change LED if status has changed\u00a0\u00a0\u00a0\u00a0\u00a0 \n    LED.writeSync(lightvalue); //turn LED on or off\u00a0\u00a0\u00a0 }\u00a0 \n    });});process.on('SIGINT', function () { //on ctrl+c\u00a0 \n    LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n    GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n    GPIO to free resources\u00a0 process.exit(); //exit completely}); ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'http'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "createServer",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//require http server, and \n    create server with function handler()",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'fs'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require filesystem module",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'socket.io'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require socket.io module and pass the http \n    object (server)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'onoff'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "Gpio",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//include onoff to \n    interact with the GPIO",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'out'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//use GPIO pin 4 as \n    output",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "17",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'in'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'both'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "listen",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "8080",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//listen to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//create server",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "readFile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'/public/index.html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//read file index.html in \n    public folder",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "404",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//display 404 on error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"404 Not Found\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//write HTML",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "write",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//write data from index.html",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "sockets",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'connection'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// WebSocket Connection",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//static variable for current status",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "watch",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//Watch for hardware interrupts on \n    pushButton",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//if an error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "error",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'There was an error'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//output error message to console",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'light'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send button status to client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'light'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//get light switch status \n    from client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "readSync",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//only change LED if status has changed",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeSync",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//turn LED on or off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'SIGINT'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//on ctrl+c",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeSync",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "unexport",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// Unexport LED \n    GPIO to free resources",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "unexport",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// Unexport Button \n    GPIO to free resources",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "exit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//exit completely",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var http = require('http').createServer(handler); //require http server, and\ncreate server with function handler()var fs = require('fs'); //require filesystem modulevar io\n= require('socket.io')(http) //require socket.io module and pass the http\nobject (server)var Gpio = require('onoff').Gpio; //include onoff to\ninteract with the GPIOvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as\noutputvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as\ninput, and 'both' button presses, and releases should be handled\nhttp.listen(8080); //listen to port 8080function handler (req, res)\n{ //create server\u00a0 fs.readFile(__dirname\n+ '/public/index.html', function(err, data) { //read file index.html in\npublic folder\u00a0\u00a0\u00a0 if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\nreturn res.end();\u00a0 });}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\npushButton.watch(function (err, value) { //Watch for hardware interrupts on\npushButton\u00a0\u00a0\u00a0 if (err) { //if an error\nconsole.error('There was an error', err); //output error message to console\nreturn;\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 lightvalue = value;\nsocket.emit('light', lightvalue); //send button status to client\n});\u00a0 socket.on('light', function(data) { //get light switch status\nfrom client\u00a0\u00a0\u00a0 lightvalue = data;\nif (lightvalue != LED.readSync()) { //only change LED if status has changed\nLED.writeSync(lightvalue); //turn LED on or off\u00a0\u00a0\u00a0 }\n});});process.on('SIGINT', function () { //on ctrl+c\nLED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED\nGPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button\nGPIO to free resources\u00a0 process.exit(); //exit completely});",
      "syntax_highlighting": [
        {
          "text": "\n var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)var Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIOvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    outputvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled\n    http.listen(8080); //listen to port 8080function handler (req, res) \n    { //create server\u00a0 fs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder\u00a0\u00a0\u00a0 if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n var lightvalue = 0; //static variable for current status\u00a0 \n    pushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton\u00a0\u00a0\u00a0 if (err) { //if an error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.error('There was an error', err); //output error message to console\u00a0\u00a0\u00a0\u00a0\u00a0 \n return;\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 lightvalue = value;\u00a0\u00a0\u00a0 \n    socket.emit('light', lightvalue); //send button status to client\u00a0 \n    });\u00a0 socket.on('light', function(data) { //get light switch status \n    from client\u00a0\u00a0\u00a0 lightvalue = data;\u00a0\u00a0\u00a0 \n if (lightvalue != LED.readSync()) { //only change LED if status has changed\u00a0\u00a0\u00a0\u00a0\u00a0 \n    LED.writeSync(lightvalue); //turn LED on or off\u00a0\u00a0\u00a0 }\u00a0 \n    });});process.on('SIGINT', function () { //on ctrl+c\u00a0 \n    LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n    GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n    GPIO to free resources\u00a0 process.exit(); //exit completely}); ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'http'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "createServer",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'fs'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require filesystem module",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'socket.io'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require socket.io module and pass the http \n    object (server)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'onoff'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "Gpio",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//include onoff to \n    interact with the GPIO",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'out'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//use GPIO pin 4 as \n    output",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "17",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'in'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'both'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "listen",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "8080",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//listen to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//create server",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "readFile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'/public/index.html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//read file index.html in \n    public folder",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "404",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//display 404 on error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"404 Not Found\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//write HTML",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "write",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//write data from index.html",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "sockets",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'connection'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// WebSocket Connection",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//static variable for current status",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "watch",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//Watch for hardware interrupts on \n    pushButton",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//if an error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "error",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'There was an error'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//output error message to console",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'light'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send button status to client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'light'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//get light switch status \n    from client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "readSync",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//only change LED if status has changed",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeSync",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//turn LED on or off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'SIGINT'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//on ctrl+c",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeSync",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "unexport",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// Unexport LED \n    GPIO to free resources",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "unexport",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// Unexport Button \n    GPIO to free resources",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "exit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//exit completely",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> http = require(<span class=\"jsstringcolor\" style=\"color:green\">'http'</span>).<span class=\"jspropertycolor\" style=\"color:black\">createServer</span>(handler); <span class=\"commentcolor\" style=\"color:slategray\">//require http server, and \n    create server with function handler()<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> fs = require(<span class=\"jsstringcolor\" style=\"color:green\">'fs'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//require filesystem module<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> io <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    = require(<span class=\"jsstringcolor\" style=\"color:green\">'socket.io'</span>)(http) <span class=\"commentcolor\" style=\"color:slategray\">//require socket.io module and pass the http \n    object (server)<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> Gpio = require(<span class=\"jsstringcolor\" style=\"color:green\">'onoff'</span>).<span class=\"jspropertycolor\" style=\"color:black\">Gpio</span>; <span class=\"commentcolor\" style=\"color:slategray\">//include onoff to \n    interact with the GPIO<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> LED = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsstringcolor\" style=\"color:green\">'out'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 4 as \n    output<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> pushButton = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">17</span>, <span class=\"jsstringcolor\" style=\"color:green\">'in'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'both'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled<br/></span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    http.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">8080</span>); <span class=\"commentcolor\" style=\"color:slategray\">//listen to port 8080<br/></span><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handler (req, res) <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    { <span class=\"commentcolor\" style=\"color:slategray\">//create server<br/></span>\u00a0 fs.<span class=\"jspropertycolor\" style=\"color:black\">readFile</span>(__dirname <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    + <span class=\"jsstringcolor\" style=\"color:green\">'/public/index.html'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(err, data) { <span class=\"commentcolor\" style=\"color:slategray\">//read file index.html in \n    public folder<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//display 404 on error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"404 Not Found\"</span>);<br/>\u00a0\u00a0\u00a0 } <br/>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//write HTML<br/></span>\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">write</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//write data from index.html<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>();<br/>\u00a0 });<br/>}<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    io.<span class=\"jspropertycolor\" style=\"color:black\">sockets</span>.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'connection'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (socket) {<span class=\"commentcolor\" style=\"color:slategray\">// WebSocket Connection<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> lightvalue = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; <span class=\"commentcolor\" style=\"color:slategray\">//static variable for current status<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    pushButton.<span class=\"jspropertycolor\" style=\"color:black\">watch</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (err, value) { <span class=\"commentcolor\" style=\"color:slategray\">//Watch for hardware interrupts on \n    pushButton<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) { <span class=\"commentcolor\" style=\"color:slategray\">//if an error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'There was an error'</span>, err); <span class=\"commentcolor\" style=\"color:slategray\">//output error message to console<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span>;<br/>\u00a0\u00a0\u00a0 }<br/>\u00a0\u00a0\u00a0 lightvalue = value;<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">'light'</span>, lightvalue); <span class=\"commentcolor\" style=\"color:slategray\">//send button status to client<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/>\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'light'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(data) { <span class=\"commentcolor\" style=\"color:slategray\">//get light switch status \n    from client<br/></span>\u00a0\u00a0\u00a0 lightvalue = data;<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (lightvalue != LED.<span class=\"jspropertycolor\" style=\"color:black\">readSync</span>()) { <span class=\"commentcolor\" style=\"color:slategray\">//only change LED if status has changed<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    LED.<span class=\"jspropertycolor\" style=\"color:black\">writeSync</span>(lightvalue); <span class=\"commentcolor\" style=\"color:slategray\">//turn LED on or off<br/></span>\u00a0\u00a0\u00a0 }<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/>});<br/><br/>process.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'SIGINT'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> () { <span class=\"commentcolor\" style=\"color:slategray\">//on ctrl+c<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    LED.<span class=\"jspropertycolor\" style=\"color:black\">writeSync</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn LED off<br/></span>\u00a0 LED.<span class=\"jspropertycolor\" style=\"color:black\">unexport</span>(); <span class=\"commentcolor\" style=\"color:slategray\">// Unexport LED \n    GPIO to free resources<br/></span>\u00a0 pushButton.<span class=\"jspropertycolor\" style=\"color:black\">unexport</span>(); <span class=\"commentcolor\" style=\"color:slategray\">// Unexport Button \n    GPIO to free resources<br/></span>\u00a0 process.<span class=\"jspropertycolor\" style=\"color:black\">exit</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//exit completely<br/></span>}); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n    var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()var fs = require('fs'); //require filesystem modulevar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)var Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIOvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    outputvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled\n    http.listen(8080); //listen to port 8080function handler (req, res) \n    { //create server\u00a0 fs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder\u00a0\u00a0\u00a0 if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 res.write(data); //write data from index.html\u00a0\u00a0\u00a0 \n    return res.end();\u00a0 });}\n    io.sockets.on('connection', function (socket) {// WebSocket Connection\u00a0 \n    var lightvalue = 0; //static variable for current status\u00a0 \n    pushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton\u00a0\u00a0\u00a0 if (err) { //if an error\u00a0\u00a0\u00a0\u00a0\u00a0 \n    console.error('There was an error', err); //output error message to console\u00a0\u00a0\u00a0\u00a0\u00a0 \n    return;\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 lightvalue = value;\u00a0\u00a0\u00a0 \n    socket.emit('light', lightvalue); //send button status to client\u00a0 \n    });\u00a0 socket.on('light', function(data) { //get light switch status \n    from client\u00a0\u00a0\u00a0 lightvalue = data;\u00a0\u00a0\u00a0 \n    if (lightvalue != LED.readSync()) { //only change LED if status has changed\u00a0\u00a0\u00a0\u00a0\u00a0 \n    LED.writeSync(lightvalue); //turn LED on or off\u00a0\u00a0\u00a0 }\u00a0 \n    });});process.on('SIGINT', function () { //on ctrl+c\u00a0 \n    LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n    GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n    GPIO to free resources\u00a0 process.exit(); //exit completely}); ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'http'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "createServer",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//require http server, and \n    create server with function handler()",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'fs'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require filesystem module",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'socket.io'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require socket.io module and pass the http \n    object (server)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'onoff'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "Gpio",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//include onoff to \n    interact with the GPIO",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'out'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//use GPIO pin 4 as \n    output",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "17",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'in'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'both'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "listen",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "8080",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//listen to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//create server",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "readFile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'/public/index.html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//read file index.html in \n    public folder",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "404",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//display 404 on error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"404 Not Found\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//write HTML",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "write",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//write data from index.html",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "sockets",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'connection'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// WebSocket Connection",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//static variable for current status",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "watch",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//Watch for hardware interrupts on \n    pushButton",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//if an error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "error",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'There was an error'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//output error message to console",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'light'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send button status to client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'light'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//get light switch status \n    from client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "readSync",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//only change LED if status has changed",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeSync",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//turn LED on or off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'SIGINT'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//on ctrl+c",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeSync",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "unexport",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// Unexport LED \n    GPIO to free resources",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "unexport",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// Unexport Button \n    GPIO to free resources",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "exit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//exit completely",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lets test the server:",
      "html": "<p>Lets test the server:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ node webserver.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ node webserver.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Open the website in a browser using http://[RaspberryPi_IP]:8080/:",
      "html": "<p>Open the website in a browser using http://[RaspberryPi_IP]:8080/:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now the server should output all the changes to the checkbox to the console on the Raspberry Pi.",
      "html": "<p>Now the server should output all the changes to the checkbox to the console \non the Raspberry Pi.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The client is sending the changes to the server, and the server is responding.",
      "html": "<p>The client is sending the changes to the server, and the server is \nresponding.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "End the program with Ctrl+c .",
      "html": "<p>End the program with <code>Ctrl+c</code>.</p>"
    }
  ]
}