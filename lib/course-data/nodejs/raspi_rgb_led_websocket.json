{
  "title": "Node.js Raspberry Pi RGB LED and WebSocket",
  "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_rgb_led_websocket.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Node.js Raspberry Pi RGB LED with WebSocket",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using Pulse-Width Modulation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the previous chapters we have learned how to use WebSocket, and how to use GPIO to turn LEDs on and off.",
      "html": "<p>In the previous chapters we have learned how to use WebSocket, and how to \nuse GPIO to turn LEDs on and off.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this we will use chapter we use a RGB LED, with PWM (Pulse-width modulation) to display different colors based on user input via WebSocket.",
      "html": "<p>In this we will use chapter we use a RGB LED, with PWM (Pulse-width \nmodulation) to display different colors based on user input via WebSocket.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An RGB LED is a LED with 3 different colors. It has a RED, GREEN and BLUE LED (RGB LED).",
      "html": "<p>An RGB LED is a LED with 3 different colors. It has a RED, GREEN and \nBLUE LED (RGB LED).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And using PWM, we can set the individual strength of the 3 LEDs. This will allow us to mix them, to set a color.",
      "html": "<p>And using PWM, we can set the individual strength of the 3 LEDs. This will allow us to \nmix them, to set a color.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What do we need?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this chapter we will create an example where we control an RGB LED with a web page via WebSocket.",
      "html": "<p>In this chapter we will create an example where \nwe control an RGB LED with a web page via WebSocket.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this you need:",
      "html": "<p>For this you need:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click the links in the list above for descriptions of the different components.",
      "html": "<p>Click the links in the list above for descriptions of the different \ncomponents.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will shine.",
      "html": "<p><strong>Note:</strong> The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Install the pigpio Module",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Earlier, we have used the \"onoff\" module, which works great for just turning on and off. Now we want to set the set the strength of the LEDs, so we need a GPIO Module with a bit more functionality.",
      "html": "<p>Earlier, we have used the \"onoff\" module, which works great for just turning \non and off. Now we want to set the set the strength of the LEDs, so we need a \nGPIO Module with a bit more functionality.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will use the \"pigpio\" Node.js module, as this allows for PWM.",
      "html": "<p>We will use the \"pigpio\" Node.js module, as this allows for PWM.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With PWM we can set the strength of a LED from 0 to 255.",
      "html": "<p>With PWM we \ncan set the strength of a LED from 0 to 255.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The \"pigpio\" Node.js module is based on the pigpio C library.",
      "html": "<p>The \"pigpio\" Node.js module is based on the pigpio C library.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you are using the \"Lite\" version of Raspbian, this is most likely not included and must be manually installed.",
      "html": "<p>If you are using the \"Lite\" version of Raspbian, this is most likely not \nincluded and must be manually installed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Update your system package list:",
      "html": "<p>Update your system package list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo apt-get update",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo apt-get update</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Install the pigpio C library:",
      "html": "<p>Install the pigpio C library:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo apt-get install pigpio",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo apt-get install pigpio</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can install the \"pigpio\" Node.js module using npm:",
      "html": "<p>Now we can install the \"pigpio\" Node.js module using npm:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ npm install pigpio",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ npm install pigpio</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now the \"pigpio\" module should be installed and we can use it to interact with the GPIO of the Raspberry Pi.",
      "html": "<p>Now the \"pigpio\" module should be installed and we can use it to \ninteract with the GPIO of the Raspberry Pi.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Since the \"pigpio\" module uses the pigpio C library, it requires root/sudo privileges to access hardware peripherals (like the GPIO).",
      "html": "<p><strong>Note:</strong> Since the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Building the Circuit",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now it is time to build the circuit on our Breadboard.",
      "html": "<p>Now it is time to build the circuit on our Breadboard.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.",
      "html": "<p>If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Shut down the Raspberry Pi properly with the command:",
      "html": "<p>Shut down the Raspberry Pi properly with the command:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo shutdown -h now",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo shutdown -h now\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn of the power strip it is connected to).",
      "html": "<p>After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
      "html": "<p>Just pulling the plug without shutting down properly may cause corruption of the memory card.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In building this Circuit it is important to know if you have a common anode, or common cathode, RGB LED:",
      "html": "<p>In building this Circuit it is important to know if you have a common \n  anode, or common cathode, RGB LED:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can check with your provider, or test it yourself:",
      "html": "<p>You can check with your provider, or test it yourself:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Connect cables to GND and 3.3V pin. Connect GND to the longest leg of the RGB LED and the 3.3 V to any other leg. If the it lights up, your RGB LED has a common cathode. If not, it has a common anode.",
      "html": "<p>Connect cables to GND and 3.3V pin. Connect GND to the longest leg of the \n  RGB LED and the 3.3 V to any other leg. If the it lights up, your RGB LED has \n  a common cathode. If not, it has a common anode.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Look at the above illustration of the circuit.",
      "html": "<p>Look at the above illustration of the circuit.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Your circuit should now be complete, and your connections should look pretty similar to the illustration above.",
      "html": "<p>Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now it is time to boot up the Raspberry Pi, and write the Node.js script to interact with it.",
      "html": "<p>Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Look at the above illustration of the circuit.",
      "html": "<p>Look at the above illustration of the circuit.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Your circuit should now be complete, and your connections should look pretty similar to the illustration above.",
      "html": "<p>Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now it is time to boot up the Raspberry Pi, and write the Node.js script to interact with it.",
      "html": "<p>Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Raspberry Pi and Node.js RGB LED and WebSocket Script",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Go to the \"nodetest\" directory, and create a new file called \" rgbws.js \":",
      "html": "<p>Go to the \"nodetest\" directory, and create a new file called \"<code>rgbws.js</code>\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ nano rgbws.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ nano rgbws.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The file is now open and can be edited with the built in Nano Editor.",
      "html": "<p>The file is now open and can be edited with the built in Nano Editor.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Write, or paste the following:",
      "html": "<p>Write, or paste the following:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\n  greenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)blueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)//RESET RGB LEDledRed.digitalWrite(0); // Turn RED \n  LED offledGreen.digitalWrite(0); // Turn GREEN LED off\n  ledBlue.digitalWrite(0); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n  if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n  return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n  function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n  //for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\u00a0\u00a0\u00a0 redRGB=parseInt(data.red);\n  \u00a0\u00a0\u00a0 greenRGB=parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=parseInt(data.blue);\u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n  function () { //on ctrl+c\u00a0 ledRed.digitalWrite(0); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(0); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(0); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'http'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "createServer",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//require http server, and \n  create server with function handler()",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'fs'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require \n  filesystem module",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'socket.io'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require socket.io \n  module and pass the http object (server)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'pigpio'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "Gpio",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//include pigpio to interact with the GPIO",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 4 as output for RED",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "17",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 17 as output for GREEN",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "27",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 27 as output for BLUE",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of RED variable to off (0 for common cathode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of GREEN variable to off (0 for common \n  cathode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of BLUE variable to off (0 for \n  common cathode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "//RESET RGB LED",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn RED \n  LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn GREEN LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn BLUE LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "listen",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "8080",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//listen to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//what to do on \n  requests to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "readFile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'/public/rgb.html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//read file rgb.html in public folder",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "404",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//display 404 on error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"404 Not Found\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//write HTML",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "write",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//write data from rgb.html",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "sockets",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'connection'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Web Socket Connection",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'rgbLed'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//get light switch status from client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//output data from WebSocket connection to console",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set RED LED to specified \n  value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set GREEN LED to \n  specified value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set BLUE \n  LED to specified value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'SIGINT'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//on ctrl+c",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn RED LED \n  off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn GREEN LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn BLUE LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "exit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//exit \n  completely",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var http = require('http').createServer(handler); //require http server, and\ncreate server with function handler()var fs = require('fs'); //require\nfilesystem modulevar io = require('socket.io')(http) //require socket.io\nmodule and pass the http object (server)var Gpio = require('pigpio').Gpio,\n//include pigpio to interact with the GPIOledRed = new Gpio(4, {mode:\nGpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17,\n{mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new\nGpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB\n= 0, //set starting value of RED variable to off (0 for common cathode)\ngreenRGB = 0, //set starting value of GREEN variable to off (0 for common\ncathode)blueRGB = 0; //set starting value of BLUE variable to off (0 for\ncommon cathode)//RESET RGB LEDledRed.digitalWrite(0); // Turn RED\nLED offledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED offhttp.listen(8080);\n//listen to port 8080function handler (req, res) { //what to do on\nrequests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html',\nfunction(err, data) { //read file rgb.html in public folder\nif (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404,\n{'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return\nres.end();\u00a0 });}io.sockets.on('connection', function\n(socket) {// Web Socket Connection\u00a0 socket.on('rgbLed',\nfunction(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\u00a0\u00a0\u00a0 redRGB=parseInt(data.red);\ngreenRGB=parseInt(data.green);\nblueRGB=parseInt(data.blue);\u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified\nvalue\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to\nspecified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE\nLED to specified value\u00a0 });});process.on('SIGINT',\nfunction () { //on ctrl+c\u00a0 ledRed.digitalWrite(0); // Turn RED LED\noff\u00a0 ledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\u00a0 process.exit(); //exit\ncompletely});",
      "syntax_highlighting": [
        {
          "text": "\n var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\n  greenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)blueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)//RESET RGB LEDledRed.digitalWrite(0); // Turn RED \n  LED offledGreen.digitalWrite(0); // Turn GREEN LED off\n  ledBlue.digitalWrite(0); // Turn BLUE LED offhttp.listen(8080); \n //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n //for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\u00a0\u00a0\u00a0 redRGB=parseInt(data.red);\n \u00a0\u00a0\u00a0 greenRGB=parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=parseInt(data.blue);\u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n function () { //on ctrl+c\u00a0 ledRed.digitalWrite(0); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(0); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(0); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'http'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "createServer",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//require http server, and \n  create server with function handler()",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'fs'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require \n  filesystem module",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'socket.io'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require socket.io \n  module and pass the http object (server)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'pigpio'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "Gpio",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//include pigpio to interact with the GPIO",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 4 as output for RED",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "17",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 17 as output for GREEN",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "27",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 27 as output for BLUE",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of RED variable to off (0 for common cathode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of GREEN variable to off (0 for common \n  cathode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of BLUE variable to off (0 for \n  common cathode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "//RESET RGB LED",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn RED \n  LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "listen",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "8080",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//listen to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//what to do on \n  requests to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "readFile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'/public/rgb.html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//read file rgb.html in public folder",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "404",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//display 404 on error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"404 Not Found\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//write HTML",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "write",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//write data from rgb.html",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "sockets",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'connection'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Web Socket Connection",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'rgbLed'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//get light switch status from client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//output data from WebSocket connection to console",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set RED LED to specified \n  value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set GREEN LED to \n  specified value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set BLUE \n  LED to specified value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'SIGINT'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//on ctrl+c",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn RED LED \n  off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "exit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//exit \n  completely",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> http = require(<span class=\"jsstringcolor\" style=\"color:green\">'http'</span>).<span class=\"jspropertycolor\" style=\"color:black\">createServer</span>(handler); <span class=\"commentcolor\" style=\"color:slategray\">//require http server, and \n  create server with function handler()<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> fs = require(<span class=\"jsstringcolor\" style=\"color:green\">'fs'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//require \n  filesystem module<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> io = require(<span class=\"jsstringcolor\" style=\"color:green\">'socket.io'</span>)(http) <span class=\"commentcolor\" style=\"color:slategray\">//require socket.io \n  module and pass the http object (server)<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> Gpio = require(<span class=\"jsstringcolor\" style=\"color:green\">'pigpio'</span>).<span class=\"jspropertycolor\" style=\"color:black\">Gpio</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//include pigpio to interact with the GPIO<br/></span>ledRed = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, {mode: <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 4 as output for RED<br/></span>ledGreen = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">17</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {mode: Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 17 as output for GREEN<br/></span>ledBlue = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">27</span>, {mode: Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 27 as output for BLUE<br/></span>redRGB <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of RED variable to off (0 for common cathode)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  greenRGB = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of GREEN variable to off (0 for common \n  cathode)<br/></span>blueRGB = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of BLUE variable to off (0 for \n  common cathode)<br/></span><br/><span class=\"commentcolor\" style=\"color:slategray\">//RESET RGB LED<br/></span>ledRed.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn RED \n  LED off<br/></span>ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn GREEN LED off<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn BLUE LED off<br/></span><br/>http.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">8080</span>); <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//listen to port 8080<br/></span><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handler (req, res) { <span class=\"commentcolor\" style=\"color:slategray\">//what to do on \n  requests to port 8080<br/></span>\u00a0 fs.<span class=\"jspropertycolor\" style=\"color:black\">readFile</span>(__dirname + <span class=\"jsstringcolor\" style=\"color:green\">'/public/rgb.html'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(err, data) { <span class=\"commentcolor\" style=\"color:slategray\">//read file rgb.html in public folder<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//display 404 on error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"404 Not Found\"</span>);<br/>\u00a0\u00a0\u00a0 }<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//write HTML<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">write</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//write data from rgb.html<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>();<br/>\u00a0 });<br/>}<br/><br/>io.<span class=\"jspropertycolor\" style=\"color:black\">sockets</span>.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'connection'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  (socket) {<span class=\"commentcolor\" style=\"color:slategray\">// Web Socket Connection<br/></span>\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'rgbLed'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(data) { <span class=\"commentcolor\" style=\"color:slategray\">//get light switch status from client<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//output data from WebSocket connection to console<br/></span><br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on<br/></span>\u00a0\u00a0\u00a0 redRGB=parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">red</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/>\u00a0\u00a0\u00a0 greenRGB=parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">green</span>);<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  blueRGB=parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">blue</span>);<br/><br/>\u00a0\u00a0\u00a0 ledRed.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(redRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set RED LED to specified \n  value<br/></span>\u00a0\u00a0\u00a0 ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(greenRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set GREEN LED to \n  specified value<br/></span>\u00a0\u00a0\u00a0 ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(blueRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set BLUE \n  LED to specified value<br/></span>\u00a0 });<br/>});<br/><br/>process.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'SIGINT'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> () { <span class=\"commentcolor\" style=\"color:slategray\">//on ctrl+c<br/></span>\u00a0 ledRed.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn RED LED \n  off<br/></span>\u00a0 ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn GREEN LED off<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn BLUE LED off<br/></span>\u00a0 process.<span class=\"jspropertycolor\" style=\"color:black\">exit</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//exit \n  completely<br/></span>}); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\n  greenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)blueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)//RESET RGB LEDledRed.digitalWrite(0); // Turn RED \n  LED offledGreen.digitalWrite(0); // Turn GREEN LED off\n  ledBlue.digitalWrite(0); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n  if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n  return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n  function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n  //for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\u00a0\u00a0\u00a0 redRGB=parseInt(data.red);\n  \u00a0\u00a0\u00a0 greenRGB=parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=parseInt(data.blue);\u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n  function () { //on ctrl+c\u00a0 ledRed.digitalWrite(0); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(0); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(0); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'http'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "createServer",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//require http server, and \n  create server with function handler()",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'fs'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require \n  filesystem module",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'socket.io'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require socket.io \n  module and pass the http object (server)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'pigpio'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "Gpio",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//include pigpio to interact with the GPIO",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 4 as output for RED",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "17",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 17 as output for GREEN",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "27",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 27 as output for BLUE",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of RED variable to off (0 for common cathode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of GREEN variable to off (0 for common \n  cathode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of BLUE variable to off (0 for \n  common cathode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "//RESET RGB LED",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn RED \n  LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "listen",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "8080",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//listen to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//what to do on \n  requests to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "readFile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'/public/rgb.html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//read file rgb.html in public folder",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "404",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//display 404 on error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"404 Not Found\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//write HTML",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "write",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//write data from rgb.html",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "sockets",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'connection'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Web Socket Connection",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'rgbLed'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//get light switch status from client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//output data from WebSocket connection to console",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set RED LED to specified \n  value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set GREEN LED to \n  specified value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set BLUE \n  LED to specified value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'SIGINT'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//on ctrl+c",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn RED LED \n  off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "exit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//exit \n  completely",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Press \" Ctrl+x \" to save the code. Confirm with \" y \", and confirm the name with \" Enter \".",
      "html": "<p>Press \"<code>Ctrl+x</code>\" to save the code. Confirm with \"<code>y</code>\", and confirm the name with \"<code>Enter</code>\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Write, or paste the following:",
      "html": "<p>Write, or paste the following:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\n  greenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)blueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)//RESET RGB LEDledRed.digitalWrite(1); // Turn RED \n  LED offledGreen.digitalWrite(1); // Turn GREEN LED off\n  ledBlue.digitalWrite(1); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n  if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n  return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n  function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n  //for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\u00a0\u00a0\u00a0 redRGB=255-parseInt(data.red);\n  \u00a0\u00a0\u00a0 greenRGB=255-parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=255-parseInt(data.blue);\u00a0\u00a0\u00a0 console.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\n  \u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n  function () { //on ctrl+c\u00a0 ledRed.digitalWrite(1); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(1); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(1); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'http'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "createServer",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//require http server, and \n  create server with function handler()",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'fs'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require \n  filesystem module",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'socket.io'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//require socket.io \n  module and pass the http object (server)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'pigpio'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "Gpio",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//include pigpio to interact with the GPIO",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 4 as output for RED",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "17",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 17 as output for GREEN",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "27",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "OUTPUT",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//use GPIO pin 27 as output for BLUE",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of RED variable to off (255 for common anode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of GREEN variable to off (255 for common \n  anode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//set starting value of BLUE variable to off (255 for \n  common anode)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "//RESET RGB LED",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn RED \n  LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn GREEN LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn BLUE LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "listen",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "8080",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//listen to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//what to do on \n  requests to port 8080",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "readFile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'/public/rgb.html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//read file rgb.html in public folder",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "404",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//display 404 on error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"404 Not Found\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeHead",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Content-Type'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'text/html'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//write HTML",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "write",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//write data from rgb.html",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "end",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "sockets",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'connection'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Web Socket Connection",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'rgbLed'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//get light switch status from client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//output data from WebSocket connection to console",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"rbg: \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//output converted to console",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set RED LED to specified \n  value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set GREEN LED to \n  specified value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "pwmWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//set BLUE \n  LED to specified value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'SIGINT'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//on ctrl+c",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn RED LED \n  off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn GREEN LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "digitalWrite",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn BLUE LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "exit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//exit \n  completely",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var http = require('http').createServer(handler); //require http server, and\ncreate server with function handler()var fs = require('fs'); //require\nfilesystem modulevar io = require('socket.io')(http) //require socket.io\nmodule and pass the http object (server)var Gpio = require('pigpio').Gpio,\n//include pigpio to interact with the GPIOledRed = new Gpio(4, {mode:\nGpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17,\n{mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new\nGpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB\n= 255, //set starting value of RED variable to off (255 for common anode)\ngreenRGB = 255, //set starting value of GREEN variable to off (255 for common\nanode)blueRGB = 255; //set starting value of BLUE variable to off (255 for\ncommon anode)//RESET RGB LEDledRed.digitalWrite(1); // Turn RED\nLED offledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED offhttp.listen(8080);\n//listen to port 8080function handler (req, res) { //what to do on\nrequests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html',\nfunction(err, data) { //read file rgb.html in public folder\nif (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404,\n{'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return\nres.end();\u00a0 });}io.sockets.on('connection', function\n(socket) {// Web Socket Connection\u00a0 socket.on('rgbLed',\nfunction(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we\nhave to change the value from the client\u00a0\u00a0\u00a0 redRGB=255-parseInt(data.red);\ngreenRGB=255-parseInt(data.green);\nblueRGB=255-parseInt(data.blue);\u00a0\u00a0\u00a0 console.log(\"rbg: \"\n+ redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\nledRed.pwmWrite(redRGB); //set RED LED to specified\nvalue\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to\nspecified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE\nLED to specified value\u00a0 });});process.on('SIGINT',\nfunction () { //on ctrl+c\u00a0 ledRed.digitalWrite(1); // Turn RED LED\noff\u00a0 ledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\u00a0 process.exit(); //exit\ncompletely});",
      "syntax_highlighting": [
        {
          "text": "\n var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\n  greenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)blueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)//RESET RGB LEDledRed.digitalWrite(1); // Turn RED \n  LED offledGreen.digitalWrite(1); // Turn GREEN LED off\n  ledBlue.digitalWrite(1); // Turn BLUE LED offhttp.listen(8080); \n //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n //for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\u00a0\u00a0\u00a0 redRGB=255-parseInt(data.red);\n \u00a0\u00a0\u00a0 greenRGB=255-parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=255-parseInt(data.blue);\u00a0\u00a0\u00a0 console.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\n \u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n function () { //on ctrl+c\u00a0 ledRed.digitalWrite(1); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(1); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(1); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'http'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "createServer",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//require http server, and \n  create server with function handler()",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'fs'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require \n  filesystem module",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'socket.io'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//require socket.io \n  module and pass the http object (server)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'pigpio'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "Gpio",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//include pigpio to interact with the GPIO",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 4 as output for RED",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "17",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 17 as output for GREEN",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "27",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "OUTPUT",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//use GPIO pin 27 as output for BLUE",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of RED variable to off (255 for common anode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of GREEN variable to off (255 for common \n  anode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//set starting value of BLUE variable to off (255 for \n  common anode)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "//RESET RGB LED",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn RED \n  LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "listen",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "8080",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//listen to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//what to do on \n  requests to port 8080",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "readFile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'/public/rgb.html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//read file rgb.html in public folder",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "404",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//display 404 on error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"404 Not Found\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeHead",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Content-Type'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'text/html'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//write HTML",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "write",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//write data from rgb.html",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "end",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "sockets",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'connection'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Web Socket Connection",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'rgbLed'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//get light switch status from client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//output data from WebSocket connection to console",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"rbg: \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//output converted to console",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set RED LED to specified \n  value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set GREEN LED to \n  specified value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "pwmWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//set BLUE \n  LED to specified value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'SIGINT'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//on ctrl+c",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn RED LED \n  off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "digitalWrite",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "exit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//exit \n  completely",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> http = require(<span class=\"jsstringcolor\" style=\"color:green\">'http'</span>).<span class=\"jspropertycolor\" style=\"color:black\">createServer</span>(handler); <span class=\"commentcolor\" style=\"color:slategray\">//require http server, and \n  create server with function handler()<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> fs = require(<span class=\"jsstringcolor\" style=\"color:green\">'fs'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//require \n  filesystem module<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> io = require(<span class=\"jsstringcolor\" style=\"color:green\">'socket.io'</span>)(http) <span class=\"commentcolor\" style=\"color:slategray\">//require socket.io \n  module and pass the http object (server)<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> Gpio = require(<span class=\"jsstringcolor\" style=\"color:green\">'pigpio'</span>).<span class=\"jspropertycolor\" style=\"color:black\">Gpio</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//include pigpio to interact with the GPIO<br/></span>ledRed = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, {mode: <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 4 as output for RED<br/></span>ledGreen = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">17</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {mode: Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 17 as output for GREEN<br/></span>ledBlue = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">27</span>, {mode: Gpio.<span class=\"jspropertycolor\" style=\"color:black\">OUTPUT</span>}), <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 27 as output for BLUE<br/></span>redRGB <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of RED variable to off (255 for common anode)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  greenRGB = <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of GREEN variable to off (255 for common \n  anode)<br/></span>blueRGB = <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>; <span class=\"commentcolor\" style=\"color:slategray\">//set starting value of BLUE variable to off (255 for \n  common anode)<br/></span><br/><span class=\"commentcolor\" style=\"color:slategray\">//RESET RGB LED<br/></span>ledRed.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn RED \n  LED off<br/></span>ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn GREEN LED off<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn BLUE LED off<br/></span><br/>http.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">8080</span>); <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//listen to port 8080<br/></span><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handler (req, res) { <span class=\"commentcolor\" style=\"color:slategray\">//what to do on \n  requests to port 8080<br/></span>\u00a0 fs.<span class=\"jspropertycolor\" style=\"color:black\">readFile</span>(__dirname + <span class=\"jsstringcolor\" style=\"color:green\">'/public/rgb.html'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(err, data) { <span class=\"commentcolor\" style=\"color:slategray\">//read file rgb.html in public folder<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) {<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//display 404 on error<br/></span>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"404 Not Found\"</span>);<br/>\u00a0\u00a0\u00a0 }<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">writeHead</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, {<span class=\"jsstringcolor\" style=\"color:green\">'Content-Type'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'text/html'</span>}); <span class=\"commentcolor\" style=\"color:slategray\">//write HTML<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">write</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//write data from rgb.html<br/></span>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">end</span>();<br/>\u00a0 });<br/>}<br/><br/>io.<span class=\"jspropertycolor\" style=\"color:black\">sockets</span>.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'connection'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  (socket) {<span class=\"commentcolor\" style=\"color:slategray\">// Web Socket Connection<br/></span>\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'rgbLed'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(data) { <span class=\"commentcolor\" style=\"color:slategray\">//get light switch status from client<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(data); <span class=\"commentcolor\" style=\"color:slategray\">//output data from WebSocket connection to console<br/></span><br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client<br/></span>\u00a0\u00a0\u00a0 redRGB=<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>-parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">red</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/>\u00a0\u00a0\u00a0 greenRGB=<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>-parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">green</span>);<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  blueRGB=<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>-parseInt(data.<span class=\"jspropertycolor\" style=\"color:black\">blue</span>);<br/><br/>\u00a0\u00a0\u00a0 console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"rbg: \"</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  + redRGB + <span class=\"jsstringcolor\" style=\"color:green\">\", \"</span> + greenRGB + <span class=\"jsstringcolor\" style=\"color:green\">\", \"</span> + blueRGB); <span class=\"commentcolor\" style=\"color:slategray\">//output converted to console<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/>\u00a0\u00a0\u00a0 ledRed.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(redRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set RED LED to specified \n  value<br/></span>\u00a0\u00a0\u00a0 ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(greenRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set GREEN LED to \n  specified value<br/></span>\u00a0\u00a0\u00a0 ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">pwmWrite</span>(blueRGB); <span class=\"commentcolor\" style=\"color:slategray\">//set BLUE \n  LED to specified value<br/></span>\u00a0 });<br/>});<br/><br/>process.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'SIGINT'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> () { <span class=\"commentcolor\" style=\"color:slategray\">//on ctrl+c<br/></span>\u00a0 ledRed.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn RED LED \n  off<br/></span>\u00a0 ledGreen.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn GREEN LED off<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ledBlue.<span class=\"jspropertycolor\" style=\"color:black\">digitalWrite</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn BLUE LED off<br/></span>\u00a0 process.<span class=\"jspropertycolor\" style=\"color:black\">exit</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//exit \n  completely<br/></span>}); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()var fs = require('fs'); //require \n  filesystem modulevar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)var Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIOledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for REDledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREENledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUEredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\n  greenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)blueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)//RESET RGB LEDledRed.digitalWrite(1); // Turn RED \n  LED offledGreen.digitalWrite(1); // Turn GREEN LED off\n  ledBlue.digitalWrite(1); // Turn BLUE LED offhttp.listen(8080); \n  //listen to port 8080function handler (req, res) { //what to do on \n  requests to port 8080\u00a0 fs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\u00a0\u00a0\u00a0 \n  if (err) {\u00a0\u00a0\u00a0\u00a0\u00a0 res.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\u00a0\u00a0\u00a0\u00a0\u00a0 \n  return res.end(\"404 Not Found\");\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 \n  res.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\u00a0\u00a0\u00a0 \n  res.write(data); //write data from rgb.html\u00a0\u00a0\u00a0 return \n  res.end();\u00a0 });}io.sockets.on('connection', function \n  (socket) {// Web Socket Connection\u00a0 socket.on('rgbLed', \n  function(data) { //get light switch status from client\u00a0\u00a0\u00a0 \n  console.log(data); //output data from WebSocket connection to console\u00a0\u00a0\u00a0 \n  //for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\u00a0\u00a0\u00a0 redRGB=255-parseInt(data.red);\n  \u00a0\u00a0\u00a0 greenRGB=255-parseInt(data.green);\u00a0\u00a0\u00a0 \n  blueRGB=255-parseInt(data.blue);\u00a0\u00a0\u00a0 console.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\n  \u00a0\u00a0\u00a0 ledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\u00a0\u00a0\u00a0 ledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\u00a0\u00a0\u00a0 ledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\u00a0 });});process.on('SIGINT', \n  function () { //on ctrl+c\u00a0 ledRed.digitalWrite(1); // Turn RED LED \n  off\u00a0 ledGreen.digitalWrite(1); // Turn GREEN LED off\u00a0 \n  ledBlue.digitalWrite(1); // Turn BLUE LED off\u00a0 process.exit(); //exit \n  completely}); ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'http'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "createServer",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//require http server, and \n  create server with function handler()",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'fs'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require \n  filesystem module",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'socket.io'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//require socket.io \n  module and pass the http object (server)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'pigpio'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "Gpio",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//include pigpio to interact with the GPIO",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 4 as output for RED",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "17",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 17 as output for GREEN",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "27",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "OUTPUT",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//use GPIO pin 27 as output for BLUE",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of RED variable to off (255 for common anode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of GREEN variable to off (255 for common \n  anode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//set starting value of BLUE variable to off (255 for \n  common anode)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "//RESET RGB LED",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn RED \n  LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "listen",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "8080",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//listen to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//what to do on \n  requests to port 8080",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "readFile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'/public/rgb.html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//read file rgb.html in public folder",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "404",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//display 404 on error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"404 Not Found\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeHead",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Content-Type'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'text/html'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//write HTML",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "write",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//write data from rgb.html",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "end",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "sockets",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'connection'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Web Socket Connection",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'rgbLed'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//get light switch status from client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//output data from WebSocket connection to console",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"rbg: \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//output converted to console",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set RED LED to specified \n  value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set GREEN LED to \n  specified value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "pwmWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//set BLUE \n  LED to specified value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'SIGINT'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//on ctrl+c",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn RED LED \n  off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn GREEN LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "digitalWrite",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn BLUE LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "exit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//exit \n  completely",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Press \" Ctrl+x \" to save the code. Confirm with \" y \", and confirm the name with \" Enter \".",
      "html": "<p>Press \"<code>Ctrl+x</code>\" to save the code. Confirm with \"<code>y</code>\", and confirm the name with \"<code>Enter</code>\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Raspberry Pi and Node.js WebSocket UI",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now it is time add the HTML that allows for user input via WebSocket.",
      "html": "<p>Now it is time add the HTML that allows for user input via WebSocket.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this we want:",
      "html": "<p>For this we want:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Go to the folder \"public\":",
      "html": "<p>Go to the folder \"public\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $\ncd public",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest $ \n  cd public\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And create a HTML file, rgb.html:",
      "html": "<p>And create a HTML file, rgb.html:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest/public $\nnano rgb.html",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest/public $ \n  nano rgb.html</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "html",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<!DOCTYPE html>",
            "color": "rgb(112, 128, 144)",
            "class": "doctypecolor"
          },
          {
            "text": "<html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"viewport\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"width=device-width, initial-scale=1\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<link rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"stylesheet\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"https://www.w3schools.com/w3css/4/w3.css\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<style>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ".slider {\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;}.slider:hover {opacity: 1;}\n    .slider::-webkit-slider-thumb {\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;}.slider::-moz-range-thumb {\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;}#redSlider::-webkit-slider-thumb {background: red;}#redSlider::-moz-range-thumb \n    {background: red;}#greenSlider::-webkit-slider-thumb {background: \n    green;}#greenSlider::-moz-range-thumb {background: green;}#blueSlider::-webkit-slider-thumb \n    {background: blue;}#blueSlider::-moz-range-thumb {background: blue;}\n    ",
            "color": "rgb(153, 0, 85)",
            "class": "cssselectorcolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": none;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 100%;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 15px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 5px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": #d3d3d3;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": none;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 0.7;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": .2s;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": \n    opacity .2s;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "opacity: 1;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": 1;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": none;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": none;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 25px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 25px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 50%;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": pointer;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": \n    25px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 25px;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": 50%;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": #4CAF50;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ": pointer;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: red;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": red;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: red;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": red;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: \n    green;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": \n    green;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: green;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": green;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: blue;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": blue;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "{",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "background: blue;",
            "color": "rgb(215, 58, 73)",
            "class": "csspropertycolor"
          },
          {
            "text": ": blue;",
            "color": "rgb(0, 92, 197)",
            "class": "csspropertyvaluecolor"
          },
          {
            "text": ":",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": ";",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "}",
            "color": "rgb(153, 153, 153)",
            "class": "cssdelimitercolor"
          },
          {
            "text": "</style>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<div class=\"w3-container\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " class=\"w3-container\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"w3-container\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</h1>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<div class=\"w3-cell-row\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " class=\"w3-cell-row\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"w3-cell-row\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<div class=\"w3-container w3-cell w3-mobile\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " class=\"w3-container w3-cell w3-mobile\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"w3-container w3-cell w3-mobile\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"range\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"255\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"slider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"redSlider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"range\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"255\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"slider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"greenSlider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"range\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"255\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"0\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"slider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"blueSlider\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"w3-container w3-cell w3-mobile\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"background-color:black\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"colorShow\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input type=\"color\" id=\"pickColor\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"color\" id=\"pickColor\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"color\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"pickColor\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</div>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script src=\"https://www.w3schools.com/lib/w3color.js\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " src=\"https://www.w3schools.com/lib/w3color.js\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"https://www.w3schools.com/lib/w3color.js\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "\n    var socket = io(); //load socket.io-client and connect to the host that \n    serves the pagevar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an objectwindow.addEventListener(\"load\", \n    function(){ //when page loads\u00a0 var rSlider = \n    document.getElementById(\"redSlider\");\u00a0 var gSlider = \n    document.getElementById(\"greenSlider\");\u00a0 var bSlider = \n    document.getElementById(\"blueSlider\");\u00a0 var picker = \n    document.getElementById(\"pickColor\");\u00a0 rSlider.addEventListener(\"change\", \n    function() { //add event listener for when red slider changes\u00a0\u00a0\u00a0 \n    rgb.red = this.value; //update the RED color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    gSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changes\u00a0\u00a0\u00a0 rgb.green = this.value; \n    //update the GREEN color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    bSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changes\u00a0\u00a0\u00a0 rgb.blue = this.value;\u00a0 \n    //update the BLUE color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    picker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changes\u00a0\u00a0\u00a0 rgb.red = w3color(this.value).red; \n    //Update the RED color according to the picker\u00a0\u00a0\u00a0 \n    rgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the picker\u00a0\u00a0\u00a0 rgb.blue = w3color(this.value).blue; \n    //Update the BLUE color according to the picker\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the \n    \"Current color\"\u00a0\u00a0\u00a0 rSlider.value = rgb.red;\u00a0 \n    //Update the RED slider position according to the picker\u00a0\u00a0\u00a0 \n    gSlider.value = rgb.green;\u00a0 //Update the GREEN slider position \n    according to the picker\u00a0\u00a0\u00a0 bSlider.value = rgb.blue;\u00a0 \n    //Update the BLUE slider position according to the picker\u00a0\u00a0 \n    socket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via \n    WebSocket\u00a0 });});\n    ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//load socket.io-client and connect to the host that \n    serves the page",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"rgb(0,0,0)\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//we use the w3color.js \n    library to keep the color as an object",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"load\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//when page loads",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"redSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"greenSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"blueSlider\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"pickColor\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"change\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//add event listener for when red slider changes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//update the RED color according to the slider",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "style",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "backgroundColor",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "toRgbString",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//update the \"Current \n    color\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"rgbLed\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send the updated \n    color to RGB LED via WebSocket",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"change\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//add event listener for \n    when green slider changes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//update the GREEN color according to the slider",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "style",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "backgroundColor",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "toRgbString",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//update the \"Current \n    color\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"rgbLed\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send the updated \n    color to RGB LED via WebSocket",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"change\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//add event listener for \n    when blue slider changes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//update the BLUE color according to the slider",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "style",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "backgroundColor",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "toRgbString",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//update the \"Current \n    color\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"rgbLed\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send the updated \n    color to RGB LED via WebSocket",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "addEventListener",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"input\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//add event listener for when \n    colorpicker changes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Update the RED color according to the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//Update the GREEN color according to \n    the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Update the BLUE color according to the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "style",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "backgroundColor",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "toRgbString",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//update the \n    \"Current color\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "red",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Update the RED slider position according to the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "green",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//Update the GREEN slider position \n    according to the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "blue",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Update the BLUE slider position according to the picker",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "emit",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"rgbLed\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//send the updated color to RGB LED via \n    WebSocket",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" \ncontent=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" \nhref=\"https://www.w3schools.com/w3css/4/w3.css\">\n<style>.slider {\u00a0 \n-webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\nborder-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\nopacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition:\nopacity .2s;}.slider:hover {opacity: 1;}\n.slider::-webkit-slider-thumb {\u00a0 -webkit-appearance: none;\nappearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\nborder-radius: 50%;\u00a0 cursor: pointer;}.slider::-moz-range-thumb {\u00a0 width:\n25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\nbackground: #4CAF50;\u00a0 cursor: pointer;}#redSlider::-webkit-slider-thumb {background: red;}#redSlider::-moz-range-thumb\n{background: red;}#greenSlider::-webkit-slider-thumb {background:\ngreen;}#greenSlider::-moz-range-thumb {background: green;}#blueSlider::-webkit-slider-thumb\n{background: blue;}#blueSlider::-moz-range-thumb {background: blue;}\n</style>\n<body>\n\n<div class=\"w3-container\">\n<h1>RGB Color</h1>\n\n<div class=\"w3-cell-row\">\n<div class=\"w3-container w3-cell w3-mobile\">\n\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"></p>\n\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"></p>\n\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"></p>\n\n</div>\n<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \nid=\"colorShow\">\n<div></div>\n</div>\n</div>\n<p>Or pick a color: \n<input type=\"color\" id=\"pickColor\"></p>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script>\n\n<script src=\"https://www.w3schools.com/lib/w3color.js\"></script>\n<script>\nvar socket = io(); //load socket.io-client and connect to the host that\nserves the pagevar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js\nlibrary to keep the color as an objectwindow.addEventListener(\"load\",\nfunction(){ //when page loads\u00a0 var rSlider =\ndocument.getElementById(\"redSlider\");\u00a0 var gSlider =\ndocument.getElementById(\"greenSlider\");\u00a0 var bSlider =\ndocument.getElementById(\"blueSlider\");\u00a0 var picker =\ndocument.getElementById(\"pickColor\");\u00a0 rSlider.addEventListener(\"change\",\nfunction() { //add event listener for when red slider changes\nrgb.red = this.value; //update the RED color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current\ncolor\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated\ncolor to RGB LED via WebSocket\u00a0 });\ngSlider.addEventListener(\"change\", function() { //add event listener for\nwhen green slider changes\u00a0\u00a0\u00a0 rgb.green = this.value;\n//update the GREEN color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current\ncolor\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated\ncolor to RGB LED via WebSocket\u00a0 });\nbSlider.addEventListener(\"change\", function() { //add event listener for\nwhen blue slider changes\u00a0\u00a0\u00a0 rgb.blue = this.value;\n//update the BLUE color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current\ncolor\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated\ncolor to RGB LED via WebSocket\u00a0 });\npicker.addEventListener(\"input\", function() { //add event listener for when\ncolorpicker changes\u00a0\u00a0\u00a0 rgb.red = w3color(this.value).red;\n//Update the RED color according to the picker\nrgb.green = w3color(this.value).green; //Update the GREEN color according to\nthe picker\u00a0\u00a0\u00a0 rgb.blue = w3color(this.value).blue;\n//Update the BLUE color according to the picker\ncolorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the\n\"Current color\"\u00a0\u00a0\u00a0 rSlider.value = rgb.red;\n//Update the RED slider position according to the picker\ngSlider.value = rgb.green;\u00a0 //Update the GREEN slider position\naccording to the picker\u00a0\u00a0\u00a0 bSlider.value = rgb.blue;\n//Update the BLUE slider position according to the picker\nsocket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via\nWebSocket\u00a0 });});\n</script>\n\n</body>\n</html>",
      "syntax_highlighting": [
        {
          "text": "<!DOCTYPE html>",
          "color": "slategray",
          "class": [
            "doctypecolor"
          ]
        },
        {
          "text": "<html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"viewport\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"width=device-width, initial-scale=1\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<link rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"stylesheet\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"https://www.w3schools.com/w3css/4/w3.css\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<style>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ".slider {\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;}.slider:hover {opacity: 1;}\n.slider::-webkit-slider-thumb {\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;}.slider::-moz-range-thumb {\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;}#redSlider::-webkit-slider-thumb {background: red;}#redSlider::-moz-range-thumb \n    {background: red;}#greenSlider::-webkit-slider-thumb {background: \n    green;}#greenSlider::-moz-range-thumb {background: green;}#blueSlider::-webkit-slider-thumb \n    {background: blue;}#blueSlider::-moz-range-thumb {background: blue;}\n",
          "color": "#905",
          "class": [
            "cssselectorcolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": none;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 100%;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 15px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 5px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": #d3d3d3;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": none;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 0.7;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": .2s;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": \n    opacity .2s;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "opacity: 1;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": 1;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": none;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": none;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 25px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 25px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 50%;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": pointer;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": \n    25px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 25px;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": 50%;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": #4CAF50;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ": pointer;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: red;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": red;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: red;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": red;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: \n    green;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": \n    green;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: green;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": green;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: blue;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": blue;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "{",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "background: blue;",
          "color": "#d73a49",
          "class": [
            "csspropertycolor"
          ]
        },
        {
          "text": ": blue;",
          "color": "#005cc5",
          "class": [
            "csspropertyvaluecolor"
          ]
        },
        {
          "text": ":",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": ";",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "}",
          "color": "#999",
          "class": [
            "cssdelimitercolor"
          ]
        },
        {
          "text": "</style>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<div class=\"w3-container\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " class=\"w3-container\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"w3-container\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</h1>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<div class=\"w3-cell-row\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " class=\"w3-cell-row\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"w3-cell-row\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<div class=\"w3-container w3-cell w3-mobile\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " class=\"w3-container w3-cell w3-mobile\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"w3-container w3-cell w3-mobile\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"range\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"255\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"slider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"redSlider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"range\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"255\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"slider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"greenSlider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"range\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"255\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"0\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"slider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"blueSlider\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"w3-container w3-cell w3-mobile\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"background-color:black\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"colorShow\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input type=\"color\" id=\"pickColor\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"color\" id=\"pickColor\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"color\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"pickColor\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</div>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script src=\"https://www.w3schools.com/lib/w3color.js\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " src=\"https://www.w3schools.com/lib/w3color.js\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"https://www.w3schools.com/lib/w3color.js\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "\n var socket = io(); //load socket.io-client and connect to the host that \n    serves the pagevar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an objectwindow.addEventListener(\"load\", \n function(){ //when page loads\u00a0 var rSlider = \n    document.getElementById(\"redSlider\");\u00a0 var gSlider = \n    document.getElementById(\"greenSlider\");\u00a0 var bSlider = \n    document.getElementById(\"blueSlider\");\u00a0 var picker = \n    document.getElementById(\"pickColor\");\u00a0 rSlider.addEventListener(\"change\", \n function() { //add event listener for when red slider changes\u00a0\u00a0\u00a0 \n    rgb.red = this.value; //update the RED color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    gSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changes\u00a0\u00a0\u00a0 rgb.green = this.value; \n //update the GREEN color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    bSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changes\u00a0\u00a0\u00a0 rgb.blue = this.value;\u00a0 \n //update the BLUE color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    picker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changes\u00a0\u00a0\u00a0 rgb.red = w3color(this.value).red; \n //Update the RED color according to the picker\u00a0\u00a0\u00a0 \n    rgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the picker\u00a0\u00a0\u00a0 rgb.blue = w3color(this.value).blue; \n //Update the BLUE color according to the picker\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the \n    \"Current color\"\u00a0\u00a0\u00a0 rSlider.value = rgb.red;\u00a0 \n //Update the RED slider position according to the picker\u00a0\u00a0\u00a0 \n    gSlider.value = rgb.green;\u00a0 //Update the GREEN slider position \n    according to the picker\u00a0\u00a0\u00a0 bSlider.value = rgb.blue;\u00a0 \n //Update the BLUE slider position according to the picker\u00a0\u00a0 \n    socket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via \n    WebSocket\u00a0 });});\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//load socket.io-client and connect to the host that \n    serves the page",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"rgb(0,0,0)\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//we use the w3color.js \n    library to keep the color as an object",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"load\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//when page loads",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"redSlider\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"greenSlider\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"blueSlider\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"pickColor\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"change\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//add event listener for when red slider changes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//update the RED color according to the slider",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "style",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "backgroundColor",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "toRgbString",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"rgbLed\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"change\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//add event listener for \n    when green slider changes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//update the GREEN color according to the slider",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "style",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "backgroundColor",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "toRgbString",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"rgbLed\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"change\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//add event listener for \n    when blue slider changes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//update the BLUE color according to the slider",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "style",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "backgroundColor",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "toRgbString",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"rgbLed\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "addEventListener",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"input\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//add event listener for when \n    colorpicker changes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Update the RED color according to the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//Update the GREEN color according to \n    the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Update the BLUE color according to the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "style",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "backgroundColor",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "toRgbString",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//update the \n    \"Current color\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "red",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Update the RED slider position according to the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "green",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//Update the GREEN slider position \n    according to the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "blue",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Update the BLUE slider position according to the picker",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "emit",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"rgbLed\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//send the updated color to RGB LED via \n    WebSocket",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"doctypecolor\" style=\"color:slategray\">&lt;!DOCTYPE html&gt;</span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>meta<span class=\"attributecolor\" style=\"color:green\"> name<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"viewport\"</span> \n    content<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"width=device-width, initial-scale=1\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>link<span class=\"attributecolor\" style=\"color:green\"> rel<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"stylesheet\"</span> \n    href<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://www.w3schools.com/w3css/4/w3.css\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>style<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"cssselectorcolor\" style=\"color:#905\"><br/>.slider <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\"><br/>\u00a0 \n    -webkit-appearance<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> none<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 width<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 100%<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 height<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 15px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 \n    border-radius<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 5px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> #d3d3d3<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 outline<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> none<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 \n    opacity<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 0.7<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 -webkit-transition<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> .2s<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 transition<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> \n    opacity .2s<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/><br/>.slider:hover <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">opacity<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 1<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>\n<br/>.slider::-webkit-slider-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\"><br/>\u00a0 -webkit-appearance<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> none<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 \n    appearance<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> none<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 width<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 25px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 height<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 25px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 \n    border-radius<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 50%<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 cursor<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> pointer<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/><br/>.slider::-moz-range-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\"><br/>\u00a0 width<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> \n    25px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 height<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 25px<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 border-radius<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> 50%<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 \n    background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> #4CAF50<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/>\u00a0 cursor<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> pointer<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span><br/></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#redSlider::-webkit-slider-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> red<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#redSlider::-moz-range-thumb \n    <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> red<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#greenSlider::-webkit-slider-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> \n    green<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#greenSlider::-moz-range-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> green<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#blueSlider::-webkit-slider-thumb \n    <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> blue<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>#blueSlider::-moz-range-thumb <span class=\"cssdelimitercolor\" style=\"color:#999\">{</span><span class=\"csspropertycolor\" style=\"color:#d73a49\">background<span class=\"csspropertyvaluecolor\" style=\"color:#005cc5\"><span class=\"cssdelimitercolor\" style=\"color:#999\">:</span> blue<span class=\"cssdelimitercolor\" style=\"color:#999\">;</span></span></span><span class=\"cssdelimitercolor\" style=\"color:#999\">}</span><br/>\n</span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/style<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"attributecolor\" style=\"color:green\"> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"w3-container\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>RGB Color<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/h1<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"attributecolor\" style=\"color:green\"> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"w3-cell-row\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"attributecolor\" style=\"color:green\"> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"w3-container w3-cell w3-mobile\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"range\"</span> min<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> max<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"255\"</span> value<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"slider\"</span> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"redSlider\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"range\"</span> min<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> max<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"255\"</span> value<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"slider\"</span> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"greenSlider\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"range\"</span> min<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> max<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"255\"</span> value<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"0\"</span> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"slider\"</span> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"blueSlider\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"attributecolor\" style=\"color:green\"> class<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"w3-container w3-cell w3-mobile\"</span> style<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"background-color:black\"</span> \n    id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"colorShow\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>Or pick a color: \n    <span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"color\"</span> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"pickColor\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://www.w3schools.com/lib/w3color.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> socket = io(); <span class=\"commentcolor\" style=\"color:slategray\">//load socket.io-client and connect to the host that \n    serves the page<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> rgb = w3color(<span class=\"jsstringcolor\" style=\"color:green\">\"rgb(0,0,0)\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">//we use the w3color.js \n    library to keep the color as an object<br/></span>window.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"load\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(){ <span class=\"commentcolor\" style=\"color:slategray\">//when page loads<br/></span>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> rSlider = <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"redSlider\"</span>);<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> gSlider = <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"greenSlider\"</span>);<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> bSlider = <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"blueSlider\"</span>);<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> picker = <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"pickColor\"</span>);<br/><br/>\u00a0 rSlider.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"change\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { <span class=\"commentcolor\" style=\"color:slategray\">//add event listener for when red slider changes<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    rgb.<span class=\"jspropertycolor\" style=\"color:black\">red</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>; <span class=\"commentcolor\" style=\"color:slategray\">//update the RED color according to the slider<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    colorShow.<span class=\"jspropertycolor\" style=\"color:black\">style</span>.<span class=\"jspropertycolor\" style=\"color:black\">backgroundColor</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">toRgbString</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//update the \"Current \n    color\"<br/></span>\u00a0\u00a0\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"rgbLed\"</span>, rgb); <span class=\"commentcolor\" style=\"color:slategray\">//send the updated \n    color to RGB LED via WebSocket<br/></span>\u00a0 });<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    gSlider.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"change\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { <span class=\"commentcolor\" style=\"color:slategray\">//add event listener for \n    when green slider changes<br/></span>\u00a0\u00a0\u00a0 rgb.<span class=\"jspropertycolor\" style=\"color:black\">green</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>; <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//update the GREEN color according to the slider<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    colorShow.<span class=\"jspropertycolor\" style=\"color:black\">style</span>.<span class=\"jspropertycolor\" style=\"color:black\">backgroundColor</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">toRgbString</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//update the \"Current \n    color\"<br/></span>\u00a0\u00a0\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"rgbLed\"</span>, rgb); <span class=\"commentcolor\" style=\"color:slategray\">//send the updated \n    color to RGB LED via WebSocket<br/></span>\u00a0 });<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    bSlider.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"change\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { <span class=\"commentcolor\" style=\"color:slategray\">//add event listener for \n    when blue slider changes<br/></span>\u00a0\u00a0\u00a0 rgb.<span class=\"jspropertycolor\" style=\"color:black\">blue</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//update the BLUE color according to the slider<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    colorShow.<span class=\"jspropertycolor\" style=\"color:black\">style</span>.<span class=\"jspropertycolor\" style=\"color:black\">backgroundColor</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">toRgbString</span>(); <span class=\"commentcolor\" style=\"color:slategray\">//update the \"Current \n    color\"<br/></span>\u00a0\u00a0\u00a0 socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"rgbLed\"</span>, rgb); <span class=\"commentcolor\" style=\"color:slategray\">//send the updated \n    color to RGB LED via WebSocket<br/></span>\u00a0 });<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    picker.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"input\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { <span class=\"commentcolor\" style=\"color:slategray\">//add event listener for when \n    colorpicker changes<br/></span>\u00a0\u00a0\u00a0 rgb.<span class=\"jspropertycolor\" style=\"color:black\">red</span> = w3color(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>).<span class=\"jspropertycolor\" style=\"color:black\">red</span>; <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//Update the RED color according to the picker<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    rgb.<span class=\"jspropertycolor\" style=\"color:black\">green</span> = w3color(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>).<span class=\"jspropertycolor\" style=\"color:black\">green</span>; <span class=\"commentcolor\" style=\"color:slategray\">//Update the GREEN color according to \n    the picker<br/></span>\u00a0\u00a0\u00a0 rgb.<span class=\"jspropertycolor\" style=\"color:black\">blue</span> = w3color(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>).<span class=\"jspropertycolor\" style=\"color:black\">blue</span>; <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//Update the BLUE color according to the picker<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    colorShow.<span class=\"jspropertycolor\" style=\"color:black\">style</span>.<span class=\"jspropertycolor\" style=\"color:black\">backgroundColor</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">toRgbString</span>();\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">//update the \n    \"Current color\"<br/></span>\u00a0\u00a0\u00a0 rSlider.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">red</span>;\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//Update the RED slider position according to the picker<br/></span>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    gSlider.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">green</span>;\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">//Update the GREEN slider position \n    according to the picker<br/></span>\u00a0\u00a0\u00a0 bSlider.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = rgb.<span class=\"jspropertycolor\" style=\"color:black\">blue</span>;\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//Update the BLUE slider position according to the picker<br/></span>\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    socket.<span class=\"jspropertycolor\" style=\"color:black\">emit</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"rgbLed\"</span>, rgb);\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">//send the updated color to RGB LED via \n    WebSocket<br/></span>\u00a0 });<br/>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<!DOCTYPE html>",
          "color": "rgb(112, 128, 144)",
          "class": "doctypecolor"
        },
        {
          "text": "<html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"viewport\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"width=device-width, initial-scale=1\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<link rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"stylesheet\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"https://www.w3schools.com/w3css/4/w3.css\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<style>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ".slider {\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;}.slider:hover {opacity: 1;}\n    .slider::-webkit-slider-thumb {\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;}.slider::-moz-range-thumb {\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;}#redSlider::-webkit-slider-thumb {background: red;}#redSlider::-moz-range-thumb \n    {background: red;}#greenSlider::-webkit-slider-thumb {background: \n    green;}#greenSlider::-moz-range-thumb {background: green;}#blueSlider::-webkit-slider-thumb \n    {background: blue;}#blueSlider::-moz-range-thumb {background: blue;}\n    ",
          "color": "rgb(153, 0, 85)",
          "class": "cssselectorcolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "\u00a0 \n    -webkit-appearance: none;\u00a0 width: 100%;\u00a0 height: 15px;\u00a0 \n    border-radius: 5px;\u00a0 background: #d3d3d3;\u00a0 outline: none;\u00a0 \n    opacity: 0.7;\u00a0 -webkit-transition: .2s;\u00a0 transition: \n    opacity .2s;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": none;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 100%;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 15px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 5px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": #d3d3d3;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": none;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 0.7;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": .2s;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": \n    opacity .2s;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "opacity: 1;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": 1;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "\u00a0 -webkit-appearance: none;\u00a0 \n    appearance: none;\u00a0 width: 25px;\u00a0 height: 25px;\u00a0 \n    border-radius: 50%;\u00a0 cursor: pointer;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": none;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": none;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 25px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 25px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 50%;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": pointer;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "\u00a0 width: \n    25px;\u00a0 height: 25px;\u00a0 border-radius: 50%;\u00a0 \n    background: #4CAF50;\u00a0 cursor: pointer;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": \n    25px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 25px;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": 50%;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": #4CAF50;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ": pointer;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: red;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": red;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: red;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": red;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: \n    green;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": \n    green;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: green;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": green;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: blue;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": blue;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "{",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "background: blue;",
          "color": "rgb(215, 58, 73)",
          "class": "csspropertycolor"
        },
        {
          "text": ": blue;",
          "color": "rgb(0, 92, 197)",
          "class": "csspropertyvaluecolor"
        },
        {
          "text": ":",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": ";",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "}",
          "color": "rgb(153, 153, 153)",
          "class": "cssdelimitercolor"
        },
        {
          "text": "</style>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<div class=\"w3-container\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " class=\"w3-container\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"w3-container\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</h1>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<div class=\"w3-cell-row\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " class=\"w3-cell-row\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"w3-cell-row\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<div class=\"w3-container w3-cell w3-mobile\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " class=\"w3-container w3-cell w3-mobile\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"w3-container w3-cell w3-mobile\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"range\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"255\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"slider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"redSlider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"range\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"255\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"slider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"greenSlider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"range\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"255\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"0\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"slider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"blueSlider\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"w3-container w3-cell w3-mobile\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"background-color:black\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"colorShow\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input type=\"color\" id=\"pickColor\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"color\" id=\"pickColor\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"color\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"pickColor\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</div>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script src=\"https://www.w3schools.com/lib/w3color.js\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " src=\"https://www.w3schools.com/lib/w3color.js\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"https://www.w3schools.com/lib/w3color.js\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "\n    var socket = io(); //load socket.io-client and connect to the host that \n    serves the pagevar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an objectwindow.addEventListener(\"load\", \n    function(){ //when page loads\u00a0 var rSlider = \n    document.getElementById(\"redSlider\");\u00a0 var gSlider = \n    document.getElementById(\"greenSlider\");\u00a0 var bSlider = \n    document.getElementById(\"blueSlider\");\u00a0 var picker = \n    document.getElementById(\"pickColor\");\u00a0 rSlider.addEventListener(\"change\", \n    function() { //add event listener for when red slider changes\u00a0\u00a0\u00a0 \n    rgb.red = this.value; //update the RED color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    gSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changes\u00a0\u00a0\u00a0 rgb.green = this.value; \n    //update the GREEN color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    bSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changes\u00a0\u00a0\u00a0 rgb.blue = this.value;\u00a0 \n    //update the BLUE color according to the slider\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\u00a0\u00a0\u00a0 socket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\u00a0 });\u00a0 \n    picker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changes\u00a0\u00a0\u00a0 rgb.red = w3color(this.value).red; \n    //Update the RED color according to the picker\u00a0\u00a0\u00a0 \n    rgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the picker\u00a0\u00a0\u00a0 rgb.blue = w3color(this.value).blue; \n    //Update the BLUE color according to the picker\u00a0\u00a0\u00a0 \n    colorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the \n    \"Current color\"\u00a0\u00a0\u00a0 rSlider.value = rgb.red;\u00a0 \n    //Update the RED slider position according to the picker\u00a0\u00a0\u00a0 \n    gSlider.value = rgb.green;\u00a0 //Update the GREEN slider position \n    according to the picker\u00a0\u00a0\u00a0 bSlider.value = rgb.blue;\u00a0 \n    //Update the BLUE slider position according to the picker\u00a0\u00a0 \n    socket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via \n    WebSocket\u00a0 });});\n    ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//load socket.io-client and connect to the host that \n    serves the page",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"rgb(0,0,0)\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//we use the w3color.js \n    library to keep the color as an object",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"load\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//when page loads",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"redSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"greenSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"blueSlider\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"pickColor\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"change\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//add event listener for when red slider changes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//update the RED color according to the slider",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "style",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "backgroundColor",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "toRgbString",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"rgbLed\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"change\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//add event listener for \n    when green slider changes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//update the GREEN color according to the slider",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "style",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "backgroundColor",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "toRgbString",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"rgbLed\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"change\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//add event listener for \n    when blue slider changes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//update the BLUE color according to the slider",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "style",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "backgroundColor",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "toRgbString",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//update the \"Current \n    color\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"rgbLed\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send the updated \n    color to RGB LED via WebSocket",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "addEventListener",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"input\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//add event listener for when \n    colorpicker changes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Update the RED color according to the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//Update the GREEN color according to \n    the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Update the BLUE color according to the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "style",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "backgroundColor",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "toRgbString",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//update the \n    \"Current color\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "red",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Update the RED slider position according to the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "green",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//Update the GREEN slider position \n    according to the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "blue",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Update the BLUE slider position according to the picker",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "emit",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"rgbLed\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//send the updated color to RGB LED via \n    WebSocket",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Return to the \"nodetest\" folder:",
      "html": "<p>Return to the \"nodetest\" folder: </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~/nodetest $\ncd ..",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~/nodetest $ \n  cd ..</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the code:",
      "html": "<p>Run the code:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo node rgbws.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo node rgbws.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Since the \"pigpio\" module uses the pigpio C library, it requires root/sudo privileges to access hardware peripherals (like the GPIO).",
      "html": "<p><strong>Note:</strong> Since the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Open the website in a browser using http://[RaspberryPi_IP]:8080/",
      "html": "<p>Open the website in a browser using http://[RaspberryPi_IP]:8080/</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now the RGB LED should change color depending on the user input.",
      "html": "<p>Now the RGB LED should change color depending on the user input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "End the program with Ctrl+c .",
      "html": "<p>End the program with <code>Ctrl+c</code>.</p>"
    }
  ]
}