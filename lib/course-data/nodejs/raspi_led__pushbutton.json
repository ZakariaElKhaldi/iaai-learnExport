{
  "title": "Node.js Raspberry Pi LED and Pushbutton",
  "url": "https://www.w3schools.com/nodejs/nodejs_raspberrypi_led_pushbutton.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Node.js Raspberry Pi GPIO - LED and Pushbutton",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using both Input and Output",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the previous chapter we learned how to use a Raspberry Pi and its GPIO to make a LED blink.",
      "html": "<p>In the previous chapter we learned how to use a Raspberry Pi and its GPIO to \nmake a LED blink.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For that we used a GPIO pin as \"Output\".",
      "html": "<p>For that we used a GPIO pin as \"Output\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this chapter we will use another GPIO pin as \"Input\".",
      "html": "<p>In this chapter we will use another GPIO pin as \"Input\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Instead of blinking for 5 seconds, we want the LED to light up when you push a button connected to the breadboard.",
      "html": "<p>Instead of blinking for 5 seconds, we want the LED to light up when you push \na button connected to the breadboard.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What do we need?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this chapter we will create a simple example where we control a LED light with a Push Button.",
      "html": "<p>In this chapter we will create a simple example where \nwe control a LED light with a Push Button.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this you need:",
      "html": "<p>For this you need:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click the links in the list above for descriptions of the different components.",
      "html": "<p>Click the links in the list above for descriptions of the different \ncomponents.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will shine.",
      "html": "<p><strong>Note:</strong> The resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this chapter we will build on the circuit we built in last chapter, so you will recognize some of the parts in the list above.",
      "html": "<p>In this chapter we will build on the circuit we built in last chapter, so you \nwill recognize some of the parts in the list above.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Building the Circuit",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "circuit we created in the last chapter",
          "href": "https://www.w3schools.com/nodejs_raspberrypi_gpio_led.asp",
          "title": ""
        }
      ],
      "text": "Now it is time to build the circuit on our Breadboard. We will use the circuit we created in the last chapter as a starting point.",
      "html": "<p>Now it is time to build the circuit on our Breadboard. We will use the <a href=\"nodejs_raspberrypi_gpio_led.asp\">circuit we created in the last chapter</a> as a starting point.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you are new to electronics, we recommend you turn off the power for the Raspberry Pi. And use an anti-static mat or a grounding strap to avoid damaging it.",
      "html": "<p>If you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Shut down the Raspberry Pi properly with the command:",
      "html": "<p>Shut down the Raspberry Pi properly with the command:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ sudo shutdown -h now",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ sudo shutdown -h now\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After the LEDs stop blinking on the Raspberry Pi, then pull out the power plug from the Raspberry Pi (or turn of the power strip it is connected to).",
      "html": "<p>After the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just pulling the plug without shutting down properly may cause corruption of the memory card.",
      "html": "<p>Just pulling the plug without shutting down properly may cause corruption of the memory card.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Look at the above illustration of the circuit.",
      "html": "<p>Look at the above illustration of the circuit.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Your circuit should now be complete, and your connections should look pretty similar to the illustration above.",
      "html": "<p>Your circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now it is time to boot up the Raspberry Pi, and write the Node.js script to interact with it.",
      "html": "<p>Now it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Raspberry Pi and Node.js LED and Button Script",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Go to the \"nodetest\" directory, and create a new file called \" buttonled.js \":",
      "html": "<p>Go to the \"nodetest\" directory, and create a new file called \"<code>buttonled.js</code>\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ nano buttonled.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ nano buttonled.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The file is now open and can be edited with the built in Nano Editor.",
      "html": "<p>The file is now open and can be edited with the built in Nano Editor.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Write, or paste the following:",
      "html": "<p>Write, or paste the following:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  var\n  Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar \n  LED = new Gpio(4, 'out'); //use GPIO pin 4 as outputvar pushButton = new \n  Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handledpushButton.watch(function (err, value) { \n  //Watch for hardware interrupts on pushButton GPIO, specify callback function\u00a0 \n  if (err) { //if an error\u00a0\u00a0\u00a0 console.error('There was an \n  error', err); //output error message to console\u00a0 return;\u00a0 }\u00a0 \n  LED.writeSync(value); //turn LED on or off depending on the button state (0 or \n  1)});\n  function unexportOnClose() { //function to run when exiting program\u00a0 \n  LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n  GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n  GPIO to free resources};process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+c ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'onoff'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "Gpio",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//include onoff to interact with the GPIO",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'out'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//use GPIO pin 4 as output",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "var",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "17",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'in'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'both'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handled",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "watch",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Watch for hardware interrupts on pushButton GPIO, specify callback function",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//if an error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "error",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'There was an \n  error'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//output error message to console",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeSync",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "//turn LED on or off depending on the button state (0 or \n  1)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "//function to run when exiting program",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "writeSync",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Turn LED off",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "unexport",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// Unexport LED \n  GPIO to free resources",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "unexport",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// Unexport Button \n  GPIO to free resources",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "on",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'SIGINT'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "//function to \n  run when user closes using ctrl+c ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "var\nGpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar\nLED = new Gpio(4, 'out'); //use GPIO pin 4 as outputvar pushButton = new\nGpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses,\nand releases should be handledpushButton.watch(function (err, value) {\n//Watch for hardware interrupts on pushButton GPIO, specify callback function\nif (err) { //if an error\u00a0\u00a0\u00a0 console.error('There was an\nerror', err); //output error message to console\u00a0 return;\u00a0 }\nLED.writeSync(value); //turn LED on or off depending on the button state (0 or\n1)});\nfunction unexportOnClose() { //function to run when exiting program\nLED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED\nGPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button\nGPIO to free resources};process.on('SIGINT', unexportOnClose); //function to\nrun when user closes using ctrl+c",
      "syntax_highlighting": [
        {
          "text": "\n var\n  Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar \n  LED = new Gpio(4, 'out'); //use GPIO pin 4 as outputvar pushButton = new \n  Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handledpushButton.watch(function (err, value) { \n //Watch for hardware interrupts on pushButton GPIO, specify callback function\u00a0 \n if (err) { //if an error\u00a0\u00a0\u00a0 console.error('There was an \n  error', err); //output error message to console\u00a0 return;\u00a0 }\u00a0 \n  LED.writeSync(value); //turn LED on or off depending on the button state (0 or \n  1)});\n function unexportOnClose() { //function to run when exiting program\u00a0 \n  LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n  GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n  GPIO to free resources};process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+c ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'onoff'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "Gpio",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//include onoff to interact with the GPIO",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'out'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//use GPIO pin 4 as output",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "var",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "17",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'in'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'both'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handled",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "watch",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Watch for hardware interrupts on pushButton GPIO, specify callback function",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//if an error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "error",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'There was an \n  error'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//output error message to console",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeSync",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "//turn LED on or off depending on the button state (0 or \n  1)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "//function to run when exiting program",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "writeSync",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Turn LED off",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "unexport",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// Unexport LED \n  GPIO to free resources",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "unexport",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// Unexport Button \n  GPIO to free resources",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "on",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'SIGINT'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "//function to \n  run when user closes using ctrl+c ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio = require(<span class=\"jsstringcolor\" style=\"color:green\">'onoff'</span>).<span class=\"jspropertycolor\" style=\"color:black\">Gpio</span>; <span class=\"commentcolor\" style=\"color:slategray\">//include onoff to interact with the GPIO<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  LED = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsstringcolor\" style=\"color:green\">'out'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 4 as output<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> pushButton = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Gpio(<span class=\"jsnumbercolor\" style=\"color:#905\">17</span>, <span class=\"jsstringcolor\" style=\"color:green\">'in'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'both'</span>); <span class=\"commentcolor\" style=\"color:slategray\">//use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handled<br/></span><br/>pushButton.<span class=\"jspropertycolor\" style=\"color:black\">watch</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (err, value) { <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//Watch for hardware interrupts on pushButton GPIO, specify callback function<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (err) { <span class=\"commentcolor\" style=\"color:slategray\">//if an error<br/></span>\u00a0\u00a0\u00a0 console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'There was an \n  error'</span>, err); <span class=\"commentcolor\" style=\"color:slategray\">//output error message to console<br/></span>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span>;<br/>\u00a0 }<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  LED.<span class=\"jspropertycolor\" style=\"color:black\">writeSync</span>(value); <span class=\"commentcolor\" style=\"color:slategray\">//turn LED on or off depending on the button state (0 or \n  1)<br/></span>});<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> unexportOnClose() { <span class=\"commentcolor\" style=\"color:slategray\">//function to run when exiting program<br/></span>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  LED.<span class=\"jspropertycolor\" style=\"color:black\">writeSync</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Turn LED off<br/></span>\u00a0 LED.<span class=\"jspropertycolor\" style=\"color:black\">unexport</span>(); <span class=\"commentcolor\" style=\"color:slategray\">// Unexport LED \n  GPIO to free resources<br/></span>\u00a0 pushButton.<span class=\"jspropertycolor\" style=\"color:black\">unexport</span>(); <span class=\"commentcolor\" style=\"color:slategray\">// Unexport Button \n  GPIO to free resources<br/></span>};<br/><br/>process.<span class=\"jspropertycolor\" style=\"color:black\">on</span>(<span class=\"jsstringcolor\" style=\"color:green\">'SIGINT'</span>, unexportOnClose); <span class=\"commentcolor\" style=\"color:slategray\">//function to \n  run when user closes using ctrl+c </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  var\n  Gpio = require('onoff').Gpio; //include onoff to interact with the GPIOvar \n  LED = new Gpio(4, 'out'); //use GPIO pin 4 as outputvar pushButton = new \n  Gpio(17, 'in', 'both'); //use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handledpushButton.watch(function (err, value) { \n  //Watch for hardware interrupts on pushButton GPIO, specify callback function\u00a0 \n  if (err) { //if an error\u00a0\u00a0\u00a0 console.error('There was an \n  error', err); //output error message to console\u00a0 return;\u00a0 }\u00a0 \n  LED.writeSync(value); //turn LED on or off depending on the button state (0 or \n  1)});\n  function unexportOnClose() { //function to run when exiting program\u00a0 \n  LED.writeSync(0); // Turn LED off\u00a0 LED.unexport(); // Unexport LED \n  GPIO to free resources\u00a0 pushButton.unexport(); // Unexport Button \n  GPIO to free resources};process.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+c ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'onoff'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "Gpio",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//include onoff to interact with the GPIO",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'out'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//use GPIO pin 4 as output",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "var",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "17",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'in'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'both'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//use GPIO pin 17 as input, and 'both' button presses, \n  and releases should be handled",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "watch",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Watch for hardware interrupts on pushButton GPIO, specify callback function",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//if an error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "error",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'There was an \n  error'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//output error message to console",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeSync",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "//turn LED on or off depending on the button state (0 or \n  1)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "//function to run when exiting program",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "writeSync",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Turn LED off",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "unexport",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// Unexport LED \n  GPIO to free resources",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "unexport",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// Unexport Button \n  GPIO to free resources",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "on",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'SIGINT'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "//function to \n  run when user closes using ctrl+c ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Press \" Ctrl+x \" to save the code. Confirm with \" y \", and confirm the name with \" Enter \".",
      "html": "<p>Press \"<code>Ctrl+x</code>\" to save the code. Confirm with \"<code>y</code>\", and confirm the name with \"<code>Enter</code>\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the code:",
      "html": "<p>Run the code:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate",
          "w3-black"
        ],
        "isNotranslate": true
      },
      "code": "pi@w3demopi:~ $ node buttonled.js",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate w3-black\">\n  pi@w3demopi:~ $ node buttonled.js\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate",
        "w3-black"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now the LED should turn on when you press the button, and turn off when you release it.",
      "html": "<p>Now the LED should turn on when you press the button, and turn off when you \nrelease it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "End the program with Ctrl+c .",
      "html": "<p>End the program with <code>Ctrl+c</code>.</p>"
    }
  ]
}