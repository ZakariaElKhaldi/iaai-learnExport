{
  "title": "C# For Loop",
  "url": "https://www.w3schools.com/cs/cs_for_loop.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# For Loop",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "C# For Loop",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:",
      "html": "<p>When you know exactly how many times you want to loop through a block of \ncode, use the <code>for</code> loop instead of a <code>while</code> loop:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "for\n\n(\nstatement\n1\n;\nstatement\n2\n;\nstatement\n3\n)\n\n\n{\n\n\n// code block to be executed\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><i>statement <span class=\"token number\">1</span></i><span class=\"token number\"></span><span class=\"token punctuation\">;</span><i> statement <span class=\"token number\">2</span></i><span class=\"token number\"></span><span class=\"token punctuation\">;</span><i> statement <span class=\"token number\">3</span></i><span class=\"token number\"></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><i>// code block to be executed</i></span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 1 is executed (one time) before the execution of the code block.",
      "html": "<p><strong>Statement 1</strong> is executed (one time) before the execution of the code block.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 2 defines the condition for executing the code block.",
      "html": "<p><strong>Statement 2</strong> defines the condition for executing the code block.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 3 is executed (every time) after the code block has been executed.",
      "html": "<p><strong>Statement 3</strong> is executed (every time) after the code block has been executed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example below will print the numbers 0 to 4:",
      "html": "<p>The example below will print the numbers 0 to 4:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "for\n\n(\nint\ni\n=\n\n0\n;\ni\n<\n\n5\n;\ni\n++\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\ni\n)\n;\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Example explained",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 1 sets a variable before the loop starts ( int i = 0 ).",
      "html": "<p>Statement 1 sets a variable before the loop starts (<code>int i = 0</code>).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 2 defines the condition for the loop to run ( i must be less than 5 ). If the condition is true , the loop will start over again, if it is false , the loop will end.",
      "html": "<p>Statement 2 defines the condition for the loop to run (<code>i</code> must be less than \n<code>5</code>). If the condition is <code>true</code>, the loop will start over again, if it is <code>false</code>, \nthe loop will end.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statement 3 increases a value ( i++ ) each time the code block in the loop has been executed.",
      "html": "<p>Statement 3 increases a value (<code>i++</code>) each time the code block in the loop has \nbeen executed.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Another Example",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This example will only print even values between 0 and 10:",
      "html": "<p>This example will only print even values between 0 and 10:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop_even",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "for\n\n(\nint\ni\n=\n\n0\n;\ni\n<=\n\n10\n;\ni\n=\ni\n+\n\n2\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\ni\n)\n;\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop_even",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Nested Loops",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is also possible to place a loop inside another loop. This is called a nested loop .",
      "html": "<p>It is also possible to place a loop inside another loop. This is called a \n<strong>nested loop</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":",
      "html": "<p>The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop_nested",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "// Outer loop\n\n\nfor\n\n(\nint\ni\n=\n\n1\n;\ni\n<=\n\n2\n;\n\n++\ni\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"Outer: \"\n\n+\ni\n)\n;\n\n// Executes 2 times\n\n\n\n// Inner loop\n\n\nfor\n\n(\nint\nj\n=\n\n1\n;\nj\n<=\n\n3\n;\nj\n++\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\" Inner: \"\n\n+\nj\n)\n;\n\n// Executes 6 times (2 * 3)\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Outer loop</span>\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Executes 2 times</span>\n\n  <span class=\"token comment\">// Inner loop</span>\n  <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Inner: \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Executes 6 times (2 * 3)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_for_loop_nested",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    }
  ]
}