{
  "title": "C# Inheritance",
  "url": "https://www.w3schools.com/cs/cs_inheritance.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Inheritance",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Inheritance (Derived and Base Class)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In C#, it is possible to inherit fields and methods from one class to another. We group the \"inheritance concept\" into two categories:",
      "html": "<p>In C#, it is possible to inherit fields and methods from one class to another. We group the \"inheritance concept\" into two categories:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To inherit from a class, use the : symbol.",
      "html": "<p>To inherit from a class, use the <code>:</code> symbol.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example below, the Car class (child) inherits the fields and methods from the Vehicle class (parent):",
      "html": "<p>In the example below, the <code>Car</code> class \n(child) inherits the fields and methods from the <code>Vehicle</code> class \n(parent):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nVehicle\n\n// base class (parent)\n\n\n{\n\n\npublic\n\nstring\nbrand\n=\n\n\"Ford\"\n;\n\n// Vehicle field\n\n\npublic\n\nvoid\n\nhonk\n(\n)\n\n// Vehicle method\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"Tuut, tuut!\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nCar\n\n:\n\nVehicle\n\n// derived class (child)\n\n\n{\n\n\npublic\n\nstring\nmodelName\n=\n\n\"Mustang\"\n;\n\n// Car field\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\n// Create a myCar object\n\n\nCar\nmyCar\n=\n\nnew\n\nCar\n(\n)\n;\n\n\n\n// Call the honk() method (From the Vehicle class) on the myCar object\n\nmyCar\n.\nhonk\n(\n)\n;\n\n\n\n// Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class\n\nConsole\n.\nWriteLine\n(\nmyCar\n.\nbrand\n+\n\n\" \"\n\n+\nmyCar\n.\nmodelName\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"10\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Vehicle</span>  <span class=\"token comment\">// base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> brand <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Vehicle field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">// Vehicle method </span>\n  <span class=\"token punctuation\">{</span>                    \n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tuut, tuut!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Vehicle</span></span>  <span class=\"token comment\">// derived class (child)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> modelName <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Car field</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a myCar object</span>\n    <span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Call the honk() method (From the Vehicle class) on the myCar object</span>\n    myCar<span class=\"token punctuation\">.</span><span class=\"token function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myCar<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> myCar<span class=\"token punctuation\">.</span>modelName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"10\" data-start=\"10\" style=\"top: 198px; width: 1092px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Why And When To Use \"Inheritance\"?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.",
      "html": "<p>- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Polymorphism",
          "href": "https://www.w3schools.com/cs_polymorphism.php",
          "title": ""
        }
      ],
      "text": "Tip: Also take a look at the next chapter, Polymorphism , which uses inherited methods to perform different tasks.",
      "html": "<p><strong>Tip:</strong> Also take a look at the next chapter, <a href=\"cs_polymorphism.php\">Polymorphism</a>, which uses inherited methods to perform different tasks.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The sealed Keyword",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you don't want other classes to inherit from a class, use the sealed keyword:",
      "html": "<p>If you don't want other classes to inherit from a class, use the <code>sealed</code> keyword:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "w3-border-red",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "sealed\n\nclass\n\nVehicle\n\n\n{\n\n\n..\n.\n\n\n}\n\n\n\nclass\n\nCar\n\n:\n\nVehicle\n\n\n{\n\n\n..\n.\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white w3-border-red language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-sealed\">sealed</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Vehicle</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Vehicle</span></span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "w3-border-red",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "w3-border-red",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    }
  ]
}