{
  "title": "C# Polymorphism",
  "url": "https://www.w3schools.com/cs/cs_polymorphism.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Polymorphism",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Polymorphism and Overriding Methods",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.",
      "html": "<p>Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Inheritance",
          "href": "https://www.w3schools.com/cs_inheritance.php",
          "title": ""
        }
      ],
      "text": "Like we specified in the previous chapter; Inheritance lets us inherit fields and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.",
      "html": "<p>Like we specified in the previous chapter; \n<a href=\"cs_inheritance.php\"><strong>Inheritance</strong></a> lets us \ninherit fields and methods from another class. <strong>Polymorphism</strong> \nuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example, think of a base class called Animal that has a method called animalSound() . Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):",
      "html": "<p>For example, think of a base class called <code>Animal</code> that has a method called <code>animalSound()</code>. Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nAnimal\n\n// Base class (parent)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The animal makes a sound\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nPig\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The pig says: wee wee\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nDog\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The dog says: bow wow\"\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"3,11,19\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3\" data-start=\"3\" style=\"top: 44px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"11\" data-start=\"11\" style=\"top: 220px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"19\" data-start=\"19\" style=\"top: 396px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Inheritance chapter",
          "href": "https://www.w3schools.com/cs_inheritance.php",
          "title": ""
        }
      ],
      "text": "Remember from the Inheritance chapter that we use the : symbol to inherit from a class.",
      "html": "<p>Remember from the <a href=\"cs_inheritance.php\">Inheritance chapter</a> that we use the <code>:</code> symbol to inherit from a class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can create Pig and Dog objects and call the animalSound() method on both of them:",
      "html": "<p>Now we can create <code>Pig</code> and <code>\nDog</code> objects and call the <code>animalSound()</code> method on both of them:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_polymorphism",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nAnimal\n\n// Base class (parent)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The animal makes a sound\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nPig\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The pig says: wee wee\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nDog\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The dog says: bow wow\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nAnimal\nmyAnimal\n=\n\nnew\n\nAnimal\n(\n)\n;\n\n// Create a Animal object\n\n\nAnimal\nmyPig\n=\n\nnew\n\nPig\n(\n)\n;\n\n// Create a Pig object\n\n\nAnimal\nmyDog\n=\n\nnew\n\nDog\n(\n)\n;\n\n// Create a Dog object\n\n\nmyAnimal\n.\nanimalSound\n(\n)\n;\n\nmyPig\n.\nanimalSound\n(\n)\n;\n\nmyDog\n.\nanimalSound\n(\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"3,11,19\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Animal</span> myAnimal <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Animal object</span>\n    <span class=\"token class-name\">Animal</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    <span class=\"token class-name\">Animal</span> myDog <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Dog object</span>\n\n    myAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myDog<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3\" data-start=\"3\" style=\"top: 44px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"11\" data-start=\"11\" style=\"top: 220px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"19\" data-start=\"19\" style=\"top: 396px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_polymorphism",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Not The Output I Was Looking For",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The output from the example above was probably not what you expected. That is because the base class method overrides the derived class method, when they share the same name.",
      "html": "<p>The output from the example above was probably not what you expected. That is because the base class method overrides the derived class method, when they share the same name.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "However, C# provides an option to override the base class method, by adding the virtual keyword to the method inside the base class, and by using the override keyword for each derived class methods:",
      "html": "<p>However, C# provides an option to override the base class method, by adding the <code>virtual</code> keyword to the method inside the base class, and by using the <code>override</code> keyword for each derived class methods:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_polymorphism2",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nAnimal\n\n// Base class (parent)\n\n\n{\n\n\npublic\n\nvirtual\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The animal makes a sound\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nPig\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\noverride\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The pig says: wee wee\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nDog\n\n:\n\nAnimal\n\n// Derived class (child)\n\n\n{\n\n\npublic\n\noverride\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"The dog says: bow wow\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nAnimal\nmyAnimal\n=\n\nnew\n\nAnimal\n(\n)\n;\n\n// Create a Animal object\n\n\nAnimal\nmyPig\n=\n\nnew\n\nPig\n(\n)\n;\n\n// Create a Pig object\n\n\nAnimal\nmyDog\n=\n\nnew\n\nDog\n(\n)\n;\n\n// Create a Dog object\n\n\nmyAnimal\n.\nanimalSound\n(\n)\n;\n\nmyPig\n.\nanimalSound\n(\n)\n;\n\nmyDog\n.\nanimalSound\n(\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"3,11,19\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-virtual\"><strong>virtual</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\"><strong>override</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\"><strong>override</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Animal</span> myAnimal <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Animal object</span>\n    <span class=\"token class-name\">Animal</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    <span class=\"token class-name\">Animal</span> myDog <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Dog object</span>\n\n    myAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myDog<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3\" data-start=\"3\" style=\"top: 44px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"11\" data-start=\"11\" style=\"top: 220px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"19\" data-start=\"19\" style=\"top: 396px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_polymorphism2",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Why And When To Use \"Inheritance\" and \"Polymorphism\"?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.",
      "html": "<p>- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    }
  ]
}