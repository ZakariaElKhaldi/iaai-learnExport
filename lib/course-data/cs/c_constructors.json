{
  "title": "C# Constructors",
  "url": "https://www.w3schools.com/cs/cs_constructors.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Constructors",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Constructors",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A constructor is a special method that is used to initialize objects. The advantage of a constructor, is that it is called when an object of a class is created. It can be used to set initial values for fields:",
      "html": "<p>A constructor is a <strong>special method</strong> that is used to initialize \nobjects. The advantage of a constructor, is that it is called when an object of a class is created. It can \nbe used to set initial values for fields:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "// Create a Car class\n\n\nclass\n\nCar\n\n\n{\n\n\npublic\n\nstring\nmodel\n;\n\n// Create a field\n\n\n\n// Create a\nclass constructor\nfor the Car class\n\n\npublic\n\nCar\n(\n)\n\n\n{\n\nmodel\n=\n\n\"Mustang\"\n;\n\n// Set the initial value for model\n\n\n}\n\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nCar\nFord\n=\n\nnew\n\nCar\n(\n)\n;\n\n// Create an object of the Car Class (this will\ncall the constructor\n)\n\nConsole\n.\nWriteLine\n(\nFord\n.\nmodel\n)\n;\n\n// Print the value of model\n\n\n}\n\n\n}\n\n\n\n// Outputs \"Mustang\"",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"7\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Create a Car class</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a field</span>\n\n  <span class=\"token comment\">// Create a <strong>class constructor</strong> for the Car class</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the initial value for model</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create an object of the Car Class (this will <strong>call the constructor</strong>)</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Print the value of model</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"Mustang\"</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7\" data-start=\"7\" style=\"top: 132px; width: 894px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note that the constructor name must match the class name , and it cannot have a return type (like void or int ).",
      "html": "<p>Note that the constructor name must <strong>match the class name</strong>, and it cannot have a \n<strong>return type</strong> (like <code>void</code> or <code>int</code>). </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also note that the constructor is called when the object is created.",
      "html": "<p>Also note that the constructor is called when the object is created.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All classes have constructors by default: if you do not create a class constructor yourself, C# creates one for you. However, then you are not able to set initial values for fields.",
      "html": "<p>All classes have constructors by default: if you do not create a class \n  constructor yourself, C# creates one for you. However, then you are not able \n  to set initial values for fields.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Constructors save time! Take a look at the last example on this page to really understand why.",
      "html": "<p><strong>Constructors save time!</strong> Take a look at the last example on this page to really understand why.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Constructor Parameters",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Constructors can also take parameters, which is used to initialize fields.",
      "html": "<p>Constructors can also take parameters, which is used to initialize \nfields.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example adds a string modelName parameter to the constructor. Inside the constructor we set model to modelName ( model=modelName ). When we call the constructor, we pass a parameter to the constructor ( \"Mustang\" ), which will set the value of model to \"Mustang\" :",
      "html": "<p>The following example adds a <code>string modelName</code> parameter \nto the constructor. \nInside the constructor we set <code>model</code> to <code>modelName</code> (<code>model=modelName</code>). When we call \nthe constructor, we pass a parameter to the constructor (<code>\"Mustang\"</code>), which will set the value of \n<code>model</code> to <code>\"Mustang\"</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor_para",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n\n{\n\n\npublic\n\nstring\nmodel\n;\n\n\n\n// Create a class constructor with a parameter\n\n\npublic\n\nCar\n(\nstring\nmodelName\n)\n\n\n{\n\nmodel\n=\nmodelName\n;\n\n\n}\n\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nCar\nFord\n=\n\nnew\n\nCar\n(\n\"Mustang\"\n)\n;\n\nConsole\n.\nWriteLine\n(\nFord\n.\nmodel\n)\n;\n\n\n}\n\n\n}\n\n\n\n// Outputs \"Mustang\"",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"6\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a class constructor with a parameter</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> modelName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> modelName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"Mustang\"</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"6\" data-start=\"6\" style=\"top: 110px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor_para",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can have as many parameters as you want:",
      "html": "<p>You can have as many parameters as you want:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor_para2",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-java"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n\n{\n\n\npublic\nstring model\n;\n\n\npublic\nstring color\n;\n\n\npublic\n\nint\nyear\n;\n\n\n\n// Create a class constructor with multiple parameters\n\n\npublic\n\nCar\n(\nstring modelName\n,\nstring modelColor\n,\n\nint\nmodelYear\n)\n\n\n{\n\nmodel\n=\nmodelName\n;\n\ncolor\n=\nmodelColor\n;\n\nyear\n=\nmodelYear\n;\n\n\n}\n\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nCar\n\nFord\n\n=\n\nnew\n\nCar\n(\n\"Mustang\"\n,\n\n\"Red\"\n,\n\n1969\n)\n;\n\n\nConsole\n.\nWriteLine\n(\nFord\n.\ncolor\n+\n\n\" \"\n\n+\n\nFord\n.\nyear\n+\n\n\" \"\n\n+\n\nFord\n.\nmodel\n)\n;\n\n\n}\n\n\n}\n\n\n\n\n// Outputs Red 1969 Mustang",
      "language": "java",
      "code_html": "<pre class=\"w3-white language-java\" data-line=\"8\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> string model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> string color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-int\">int</span> year<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a class constructor with multiple parameters</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>string modelName<span class=\"token punctuation\">,</span> string modelColor<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-int\">int</span> modelYear<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> modelName<span class=\"token punctuation\">;</span>\n    color <span class=\"token operator\">=</span> modelColor<span class=\"token punctuation\">;</span>\n    year <span class=\"token operator\">=</span> modelYear<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <span class=\"token class-name\">Ford</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Outputs Red 1969 Mustang</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"8\" data-start=\"8\" style=\"top: 154px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-java"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_constructor_para2",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-java"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tip: Just like other methods, constructors can be overloaded by using different numbers of parameters.",
      "html": "<p><strong>Tip:</strong> Just like other methods, constructors can be <strong>overloaded</strong> by using different numbers of parameters.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Constructors Save Time",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When you consider the example from the previous chapter, you will notice that constructors are very useful, as they help reducing the amount of code:",
      "html": "<p>When you consider the example from the previous chapter, you will notice that constructors \nare very useful, as they help reducing the amount of code:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Without constructor:",
      "html": "<p>Without constructor:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nCar\nFord\n=\n\nnew\n\nCar\n(\n)\n;\n\nFord\n.\nmodel\n=\n\n\"Mustang\"\n;\n\nFord\n.\ncolor\n=\n\n\"red\"\n;\n\nFord\n.\nyear\n=\n\n1969\n;\n\n\n\nCar\nOpel\n=\n\nnew\n\nCar\n(\n)\n;\n\nOpel\n.\nmodel\n=\n\n\"Astra\"\n;\n\nOpel\n.\ncolor\n=\n\n\"white\"\n;\n\nOpel\n.\nyear\n=\n\n2005\n;\n\n\nConsole\n.\nWriteLine\n(\nFord\n.\nmodel\n)\n;\n\nConsole\n.\nWriteLine\n(\nOpel\n.\nmodel\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Try it Yourself \u00bb",
          "href": "https://www.w3schools.com/trycs_multi.php?filename=demo_fields_classes&multi=demo_fields_classes_multi",
          "title": ""
        }
      ],
      "text": "Try it Yourself \u00bb",
      "html": "<p><a class=\"ws-btn\" href=\"trycs_multi.php?filename=demo_fields_classes&amp;multi=demo_fields_classes_multi\" target=\"_blank\">Try it Yourself \u00bb</a>\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With constructor:",
      "html": "<p>With constructor:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nCar\nFord\n=\n\nnew\n\nCar\n(\n\"Mustang\"\n,\n\n\"Red\"\n,\n\n1969\n)\n;\n\n\nCar\nOpel\n=\n\nnew\n\nCar\n(\n\"Astra\"\n,\n\n\"White\"\n,\n\n2005\n)\n;\n\n\nConsole\n.\nWriteLine\n(\nFord\n.\nmodel\n)\n;\n\nConsole\n.\nWriteLine\n(\nOpel\n.\nmodel\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"White\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Try it Yourself \u00bb",
          "href": "https://www.w3schools.com/trycs_multi.php?filename=demo_constructor_time&multi=demo_constructor_time_multi",
          "title": ""
        }
      ],
      "text": "Try it Yourself \u00bb",
      "html": "<p><a class=\"ws-btn\" href=\"trycs_multi.php?filename=demo_constructor_time&amp;multi=demo_constructor_time_multi\" target=\"_blank\">Try it Yourself \u00bb</a>\n</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is a constructor in C#?",
      "html": "<p>What is a constructor in C#?</p>"
    }
  ]
}