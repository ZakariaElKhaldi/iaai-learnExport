{
  "title": "C# Abstraction",
  "url": "https://www.w3schools.com/cs/cs_abstract.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Abstraction",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Abstract Classes and Methods",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "interfaces",
          "href": "https://www.w3schools.com/cs_interface.php",
          "title": ""
        }
      ],
      "text": "Data abstraction is the process of hiding certain details and showing only essential information to the user. Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).",
      "html": "<p>Data <strong>abstraction</strong> is the process of hiding certain details and showing only essential information to the user.<br/>\nAbstraction can be achieved with either <strong>abstract classes</strong> or \n<a href=\"cs_interface.php\"><strong>interfaces</strong></a> (which you will learn more about in the next chapter).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The abstract keyword is used for classes and methods:",
      "html": "<p>The <code>abstract</code> keyword is used for classes and methods:\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An abstract class can have both abstract and regular methods:",
      "html": "<p>An abstract class can have both abstract and regular methods:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-java"
        ],
        "isNotranslate": false
      },
      "code": "abstract\n\nclass\n\nAnimal\n\n\n{\n\n\npublic\n\nabstract\n\nvoid\n\nanimalSound\n(\n)\n;\n\n\npublic\n\nvoid\n\nsleep\n(\n)\n\n\n{\n\n\nConsole\n.\nWriteLine\n(\n\"Zzz\"\n)\n;\n\n\n}\n\n\n}",
      "language": "java",
      "code_html": "<pre class=\"w3-white language-java\" data-line=\"1,2\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"1\" data-start=\"1\" style=\"top: 0px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"2\" data-start=\"2\" style=\"top: 22px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-java"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-java"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "From the example above, it is not possible to create an object of the Animal class:",
      "html": "<p>From the example above, it is not possible to create an object of the Animal class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "w3-border-red",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "Animal\nmyObj\n=\n\nnew\n\nAnimal\n(\n)\n;\n\n// Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white w3-border-red language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\">Animal</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "w3-border-red",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "w3-border-red",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Polymorphism",
          "href": "https://www.w3schools.com/cs_polymorphism.php",
          "title": ""
        }
      ],
      "text": "To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class.",
      "html": "<p>To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the <a href=\"cs_polymorphism.php\">Polymorphism</a> \nchapter to an abstract class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Inheritance chapter",
          "href": "https://www.w3schools.com/cs_inheritance.php",
          "title": ""
        }
      ],
      "text": "Remember from the Inheritance chapter that we use the : symbol to inherit from a class, and that we use the override keyword to override the base class method.",
      "html": "<p>Remember from the <a href=\"cs_inheritance.php\">Inheritance chapter</a> that we use the <code>\n:</code> symbol to inherit from a class, \nand that we use the <code>override</code> keyword to override the base class method.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_abstract",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "// Abstract class\n\n\nabstract\n\nclass\n\nAnimal\n\n\n{\n\n\n// Abstract method (does not have a body)\n\n\npublic\n\nabstract\n\nvoid\n\nanimalSound\n(\n)\n;\n\n\n// Regular method\n\n\npublic\n\nvoid\n\nsleep\n(\n)\n\n\n{\n\nConsole\n.\nWriteLine\n(\n\"Zzz\"\n)\n;\n\n\n}\n\n\n}\n\n\n\n// Derived class (inherit from Animal)\n\n\nclass\n\nPig\n\n:\n\nAnimal\n\n\n{\n\n\npublic\n\noverride\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\n\n// The body of animalSound() is provided here\n\nConsole\n.\nWriteLine\n(\n\"The pig says: wee wee\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nPig\nmyPig\n=\n\nnew\n\nPig\n(\n)\n;\n\n// Create a Pig object\n\nmyPig\n.\nanimalSound\n(\n)\n;\n\n// Call the abstract method\n\nmyPig\n.\nsleep\n(\n)\n;\n\n// Call the regular method\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"2,5,14,16,19,28\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Abstract class</span>\n<span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Abstract method (does not have a body)</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Regular method</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Derived class (inherit from Animal)</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The body of animalSound() is provided here</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pig</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create a Pig object</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the abstract method</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the regular method</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"2\" data-start=\"2\" style=\"top: 22px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"5\" data-start=\"5\" style=\"top: 88px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"14\" data-start=\"14\" style=\"top: 286px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"16\" data-start=\"16\" style=\"top: 330px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"19\" data-start=\"19\" style=\"top: 396px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"28\" data-start=\"28\" style=\"top: 594px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_abstract",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Why And When To Use Abstract Classes and Methods?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To achieve security - hide certain details and only show the important details of an object.",
      "html": "<p>To achieve security - hide certain details and only show the important \ndetails of an object.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Interfaces",
          "href": "https://www.w3schools.com/cs_interface.php",
          "title": ""
        }
      ],
      "text": "Note: Abstraction can also be achieved with Interfaces , which you will learn more about in the next chapter.",
      "html": "<p><strong>Note:</strong> Abstraction can also be achieved with <a href=\"cs_interface.php\">Interfaces</a>, which you will learn more about in the next chapter.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is the purpose of abstraction in C#?",
      "html": "<p>What is the purpose of abstraction in C#?</p>"
    }
  ]
}