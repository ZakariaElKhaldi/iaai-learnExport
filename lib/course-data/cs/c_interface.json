{
  "title": "C# Interface",
  "url": "https://www.w3schools.com/cs/cs_interface.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Interface",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Interfaces",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "abstraction",
          "href": "https://www.w3schools.com/cs_abstract.php",
          "title": ""
        }
      ],
      "text": "Another way to achieve abstraction in C#, is with interfaces.",
      "html": "<p>Another way to achieve <a href=\"cs_abstract.php\">abstraction</a> in C#, is with interfaces.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An interface is a completely \" abstract class \", which can only contain abstract methods and properties (with empty bodies):",
      "html": "<p>An <code>interface</code> is a completely \"<strong>abstract class</strong>\", \nwhich can only contain abstract methods and properties (with empty bodies):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-java"
        ],
        "isNotranslate": false
      },
      "code": "// interface\n\n\ninterface\n\nAnimal\n\n\n{\n\n\nvoid\n\nanimalSound\n(\n)\n;\n\n// interface method (does not have a body)\n\n\nvoid\n\nrun\n(\n)\n;\n\n// interface method (does not have a body)\n\n\n}",
      "language": "java",
      "code_html": "<pre class=\"w3-white language-java\" data-line=\"2\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// interface</span>\n<span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Animal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"2\" data-start=\"2\" style=\"top: 22px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-java"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-java"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is considered good practice to start with the letter \"I\" at the beginning of an interface, as it makes it easier for yourself and others to remember that it is an interface and not a class.",
      "html": "<p>It is considered good practice to start with the letter \"I\" at the beginning of an interface, as it makes it easier for yourself and others to remember that \nit is an interface and not a class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By default, members of an interface are abstract and public .",
      "html": "<p>By default, members of an interface are <code>abstract</code> and <code>public</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Interfaces can contain properties and methods, but not fields.",
      "html": "<p><strong>Note:</strong> Interfaces can contain properties and methods, but \n  not fields.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class. To implement an interface, use the : symbol (just like with inheritance). The body of the interface method is provided by the \"implement\" class. Note that you do not have to use the override keyword when implementing an interface:",
      "html": "<p>To access the interface methods, the interface must be \"implemented\" (kinda \nlike inherited) by another class. To implement an interface, use the <code>:</code> \nsymbol (just like with inheritance). The body of the interface method is \nprovided by the \"implement\" class. Note that you do not have to use the <code>override</code> \nkeyword when implementing an interface:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_interface",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-java"
        ],
        "isNotranslate": false
      },
      "code": "// Interface\n\n\ninterface\n\nIAnimal\n\n\n{\n\n\nvoid\n\nanimalSound\n(\n)\n;\n\n// interface method (does not have a body)\n\n\n}\n\n\n\n// Pig \"implements\" the IAnimal interface\n\n\nclass\n\nPig\n\n:\n\nIAnimal\n\n\n{\n\n\npublic\n\nvoid\n\nanimalSound\n(\n)\n\n\n{\n\n\n// The body of animalSound() is provided here\n\n\nConsole\n.\nWriteLine\n(\n\"The pig says: wee wee\"\n)\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nPig\nmyPig\n=\n\nnew\n\nPig\n(\n)\n;\n\n// Create a Pig object\n\nmyPig\n.\nanimalSound\n(\n)\n;\n\n\n}\n\n\n}",
      "language": "java",
      "code_html": "<pre class=\"w3-white language-java\" data-line=\"2,8\" tabindex=\"0\"><code class=\"language-java\"><span class=\"token comment\">// Interface</span>\n<span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">IAnimal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Pig \"implements\" the IAnimal interface</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">IAnimal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The body of animalSound() is provided here</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pig</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"2\" data-start=\"2\" style=\"top: 22px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"8\" data-start=\"8\" style=\"top: 154px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-java"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs.php?filename=demo_interface",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-java"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Notes on Interfaces:",
      "level": "h4"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Why And When To Use Interfaces?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "1) To achieve security - hide certain details and only show the important details of an object (interface).",
      "html": "<p>1) To achieve security - hide certain details and only show the important \ndetails of an object (interface).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "2) C# does not support \"multiple inheritance\" (a class can only inherit from one base class). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example in the next chapter).",
      "html": "<p>2) C# does not support \"multiple inheritance\" (a class can only inherit from one \n  base class). However, it can be achieved \n  with interfaces, because the class can <strong>implement</strong> multiple interfaces.\n  <strong>Note:</strong> To implement multiple interfaces, separate them with a comma (see example in the next chapter).</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is an interface in C#?",
      "html": "<p>What is an interface in C#?</p>"
    }
  ]
}