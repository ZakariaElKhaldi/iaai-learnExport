{
  "title": "C# Properties (Get and Set)",
  "url": "https://www.w3schools.com/cs/cs_properties.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C# Properties (Get and Set)",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Properties and Encapsulation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Before we start to explain properties, you should have a basic understanding of \" Encapsulation \".",
      "html": "<p>Before we start to explain properties, you should have a basic understanding of \"<strong>Encapsulation</strong>\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The meaning of Encapsulation , is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must:",
      "html": "<p>The meaning of <strong>Encapsulation</strong>, is to make sure that \"sensitive\" data is hidden \nfrom users. To achieve this, you must:\n</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Properties",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, sometimes we need to access them - and it can be done with properties.",
      "html": "<p>You learned from the previous chapter that <code>private</code> variables can only be \naccessed within the same class (an outside class has no access to it). However, \nsometimes we need to access them - and it can be done with properties.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A property is like a combination of a variable and a method, and it has two methods: a get and a set method:",
      "html": "<p>A property is like a combination of a variable and a method, and it has two methods: a <code>get</code> and a <code>set</code> method:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nPerson\n\n\n{\n\n\nprivate\n\nstring\nname\n;\n\n// field\n\n\n\npublic\n\nstring\nName\n// property\n\n\n{\n\n\nget\n\n{\n\nreturn\nname\n;\n\n}\n\n// get method\n\n\nset\n\n{\nname\n=\n\nvalue\n;\n\n}\n\n// set method\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"5,7,8\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span>\n\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name   <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-get\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-return\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// get method</span>\n    <span class=\"token keyword keyword-set\">set</span> <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token keyword keyword-value\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// set method</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"5\" data-start=\"5\" style=\"top: 88px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7\" data-start=\"7\" style=\"top: 132px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"8\" data-start=\"8\" style=\"top: 154px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Example explained",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Name property is associated with the name field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.",
      "html": "<p>The <code>Name</code> property is associated with the <code>name</code> field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The get method returns the value of the variable name .",
      "html": "<p>The <code>get</code> method returns the value of the variable <code>name</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The set method assigns a value to the name variable. The value keyword represents the value we assign to the property.",
      "html": "<p>The <code>set</code> method assigns a <code>value</code> to the\n<code>name</code> variable. The <code>value</code> keyword represents the value we assign to the property.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you don't fully understand it, take a look at the example below.",
      "html": "<p>If you don't fully understand it, take a look at the example below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can use the Name property to access and update the private field of the Person class:",
      "html": "<p>Now we can use the <code>Name</code> property to access and update the <code>private</code> field of the <code>Person</code> class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs_multi.php?filename=demo_properties&multi=demo_properties_multi",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nPerson\n\n\n{\n\n\nprivate\n\nstring\nname\n;\n\n// field\n\n\npublic\n\nstring\nName\n// property\n\n\n{\n\n\nget\n\n{\n\nreturn\nname\n;\n\n}\n\n\nset\n\n{\nname\n=\n\nvalue\n;\n\n}\n\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nPerson\nmyObj\n=\n\nnew\n\nPerson\n(\n)\n;\n\nmyObj\n.\nName\n=\n\n\"Liam\"\n;\n\nConsole\n.\nWriteLine\n(\nmyObj\n.\nName\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"3,4,6,7,16\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name   <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-get\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-return\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-set\">set</span> <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token keyword keyword-value\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3\" data-start=\"3\" style=\"top: 44px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"4\" data-start=\"4\" style=\"top: 66px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"6\" data-start=\"6\" style=\"top: 110px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7\" data-start=\"7\" style=\"top: 132px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"16\" data-start=\"16\" style=\"top: 330px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs_multi.php?filename=demo_properties&multi=demo_properties_multi",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Automatic Properties (Short Hand)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "C# also provides a way to use short-hand / automatic properties, where you do not have to define the field for the property, and you only have to write get; and set; inside the property.",
      "html": "<p>C# also provides a way to use short-hand / automatic properties, where you do \nnot have to define the field for the property, and you only have to write <code>get;</code> \nand <code>set;</code> inside the property.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example will produce the same result as the example above. The only difference is that there is less code:",
      "html": "<p>The following example will produce the same result as the example above. The only difference is that there is less code:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/cs/trycs_multi.php?filename=demo_properties_auto&multi=demo_properties_auto_multi",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nPerson\n\n\n{\n\n\npublic\n\nstring\nName\n// property\n\n\n{\n\nget\n;\n\nset\n;\n\n}\n\n\n}\n\n\n\nclass\n\nProgram\n\n\n{\n\n\nstatic\n\nvoid\n\nMain\n(\nstring\n[\n]\nargs\n)\n\n\n{\n\n\nPerson\nmyObj\n=\n\nnew\n\nPerson\n(\n)\n;\n\nmyObj\n.\nName\n=\n\n\"Liam\"\n;\n\nConsole\n.\nWriteLine\n(\nmyObj\n.\nName\n)\n;\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" data-line=\"3,4\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name  <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-get\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword keyword-set\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3\" data-start=\"3\" style=\"top: 44px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"4\" data-start=\"4\" style=\"top: 66px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/cs/trycs_multi.php?filename=demo_properties_auto&multi=demo_properties_auto_multi",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Why Encapsulation?",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is the main purpose of encapsulation in C#?",
      "html": "<p>What is the main purpose of encapsulation in C#?</p>"
    }
  ]
}