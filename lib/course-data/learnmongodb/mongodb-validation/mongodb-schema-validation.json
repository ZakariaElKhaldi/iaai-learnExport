{
  "id": "beafd9b0-0d88-4162-bc25-fc2a12d99303",
  "title": "MongoDB Schema Validation",
  "slug": "mongodb-schema-validation",
  "metadata": {
    "description": "Learn about MongoDB Schema Validation with clear explanations and practical examples.",
    "keywords": [
      "schema",
      "validation",
      "bsontype",
      "description",
      "string",
      "post",
      "optional",
      "mongodb",
      "collection",
      "required"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMongoDB",
    "subcategory": "MongoDB Validation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "MongoDB Schema Validation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Schema Validation\nBy default MongoDB has a flexible schema. This means that there is no strict schema validation set up initially.\nSchema validation rules can be created in order to ensure that all documents \nin a collection share a similar structure.\nSchema Validation\nMongoDB supports\nJSON Schema\nvalidation. The\n$jsonSchema\noperator allows us to define our document structure.\nExample\ndb.createCollection(\"posts\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [ \"title\", \"body\" ],\n      properties: {\n        title: {\n          bsonType: \"string\",\n          description: \"Title of post - Required.\"\n        },\n        body: {\n          bsonType: \"string\",\n          description: \"Body of post - Required.\"\n        },\n        category: {\n          bsonType: \"string\",\n          description: \"Category of post - Optional.\"\n        },\n        likes: {\n          bsonType: \"int\",\n          description: \"Post like count. Must be an integer - Optional.\"\n        },\n        tags: {\n          bsonType: [\"string\"],\n          description: \"Must be an array of strings - Optional.\"\n        },\n        date: {\n          bsonType: \"date\",\n          description: \"Must be a date - Optional.\"\n        }\n      }\n    }\n  }\n})\n\nThis will create the\nposts\ncollection in the current database and specify the JSON Schema validation requirements for the collection.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "dae3ecf6-a4c0-4c70-a476-66f12ab28ae2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e2794033-ad4c-4c9b-84a9-57de466c9f99",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "64b9d9ad-3254-41bb-b7f7-6ae76ed7f6e7",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This means that there?",
      "options": [
        "None of the above.",
        "None of the above.",
        "no strict schema validation set up initially",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This means that there is 'no strict schema validation set up initially'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers MongoDB Schema Validation concepts and techniques. You'll learn how to use MongoDB Schema Validation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MongoDB Schema Validation and how to apply it in your projects."
}