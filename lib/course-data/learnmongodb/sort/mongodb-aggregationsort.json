{
  "id": "10c50aa1-367f-43a2-ba87-03a04f74e6ff",
  "title": "MongoDB Aggregation$sort",
  "slug": "mongodb-aggregationsort",
  "metadata": {
    "description": "Learn about MongoDB Aggregation$sort with clear explanations and practical examples.",
    "keywords": [
      "sort",
      "order",
      "aggregation",
      "documents",
      "accommodates",
      "stage",
      "example",
      "using",
      "descending",
      "mongodb"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMongoDB",
    "subcategory": "$sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "MongoDB Aggregation\n$sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Aggregation\n$sort\nThis aggregation stage groups sorts all documents in the specified sort order.\nRemember that the order of your stages matters. Each stage only acts upon the documents that \nExample\nIn this example, we are using the \"sample_airbnb\" database loaded from our sample data in the\nIntro to Aggregations\nsection.\ndb.listingsAndReviews.aggregate([ \n  { \n    $sort: { \"accommodates\": -1 } \n  },\n  {\n    $project: {\n      \"name\": 1,\n      \"accommodates\": 1\n    }\n  },\n  {\n    $limit: 5\n  }\n])\n\nThis will return the documents sorted in descending order by the\naccommodates\nfield.\nThe sort order can be chosen by using\n1\nor\n-1\n.\n1\nis ascending and\n-1\nis descending.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6996c74f-c045-4422-b224-e76481876462",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fa4a92a8-842c-4c43-a137-33f9d9fa4992",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d52c56b9-c372-42ff-ae89-3b14da8a47dc",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is we?",
      "options": [
        "Not a we.",
        "None of the above.",
        "using the \"sample_airbnb\" database loaded from our sample data in the\nIntro to Aggregations\nsection",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of we is 'using the \"sample_airbnb\" database loaded from our sample data in the\nIntro to Aggregations\nsection'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers MongoDB Aggregation$sort concepts and techniques. You'll learn how to use MongoDB Aggregation$sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of MongoDB Aggregation$sort and how to apply it in your projects."
}