{
  "id": "b41ae15b-304f-485c-86f5-15a905e3e99b",
  "title": "AngularJS Application",
  "slug": "angularjs-application",
  "metadata": {
    "description": "Learn about AngularJS Application with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "scope",
      "products",
      "function",
      "controller",
      "application",
      "list",
      "items",
      "shopping",
      "myshoppinglist",
      "myctrl"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAngularJS",
    "subcategory": "AngularJS Application"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AngularJS Application",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "It is time to create a real AngularJS Application.\nMake a Shopping List\nLets use some of the AngularJS features to make a shopping list, where you can \nadd or remove items:\nMy Shopping List\n{{x}}\n\u00d7\nAdd\n{{errortext}}\nApplication Explained\nStep 1. Getting Started:\nStart by making an application called\nmyShoppingList\n, and add a \ncontroller named\nmyCtrl\nto it.\nThe controller adds an array named\nproducts\nto the current\n$scope\n.\nIn the HTML, we use the\nng-repeat\ndirective to display a list \nusing the items in the array.\nExample\nSo far we have made an HTML list based on the items of an array:\n<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n</div>\n\nStep 2. Adding Items:\nIn the HTML, add a text field, and bind it to the application with the\nng-model\ndirective.\nIn the controller, make a function named\naddItem\n, and use the \nvalue of the\naddMe\ninput field to add an item to the\nproducts\narray.\nAdd a button, and give it an\nng-click\ndirective that will run \nthe\naddItem\nfunction when the button is clicked.\nExample\nNow we can add items to our shopping list:\n<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>\n\nStep 3. Removing Items:\nWe also want to be able to remove items from the shopping list.\nIn the controller, make a function named\nremoveItem\n, which takes \nthe index of the item you want to remove, as a parameter.\nIn the HTML, make a\n<span>\nelement for each item, and give them \nan\nng-click\ndirective which calls the\nremoveItem\nfunction with the current\n$index\n.\nExample\nNow we can remove items from our shopping list:\n<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n$scope.removeItem = function (x) {\n$scope.products.splice(x, 1);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">\n{{x}}\n<span ng-click=\"removeItem($index)\">&times;</span>\n</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>\n\nStep 4. Error Handling:\nThe application has some errors, like if you try to add the same item twice, \nthe application crashes. Also, it should not be allowed to add empty items.\nWe will fix that by checking the value before adding new \nitems.\nIn the HTML, we will add a container for error messages, and write an error \nmessage when someone tries to add an existing item.\nExample\nA shopping list, with the possibility to write error messages:\n<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.errortext = \"\";\nif (!$scope.addMe) {return;}\nif ($scope.products.indexOf($scope.addMe) \n    == -1) {\n$scope.products.push($scope.addMe);\n} else {\n$scope.errortext = \"The item is already \n    in your shopping list.\";\n}\n}\n$scope.removeItem = function (x) {\n$scope.errortext = \"\";\n$scope.products.splice(x, 1);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">\n{{x}}<span ng-click=\"removeItem($index)\">&times;</span>\n</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n<p>{{errortext}}</p>\n</div>\n\nStep 5. Design:\nThe application works, but could use a better design. We use the W3.CSS stylesheet to style our application.\nAdd the W3.CSS stylesheet, and include the proper classes throughout the \napplication, and the result will be the same as the shopping list at the top of \nthis page.\nExample\nStyle your application using the W3.CSS stylesheet:\n<link rel=\"stylesheet\" href=\"https://www..com/w3css/4/w3.css\">\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n</div>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n$scope.removeItem = function (x) {\n$scope.products.splice(x, 1);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">\n{{x}}\n<span ng-click=\"removeItem($index)\">&times;</span>\n</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.errortext = \"\";\nif (!$scope.addMe) {return;}\nif ($scope.products.indexOf($scope.addMe) \n    == -1) {\n$scope.products.push($scope.addMe);\n} else {\n$scope.errortext = \"The item is already \n    in your shopping list.\";\n}\n}\n$scope.removeItem = function (x) {\n$scope.errortext = \"\";\n$scope.products.splice(x, 1);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">\n{{x}}<span ng-click=\"removeItem($index)\">&times;</span>\n</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n<p>{{errortext}}</p>\n</div>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n});\n# TODO: Complete this line\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n</div>",
      "solution": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n</div>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n# TODO: Complete this line\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>",
      "solution": "<script>\nvar app = angular.module(\"myShoppingList\", []);\napp.controller(\"myCtrl\", function($scope) {\n$scope.products \n    = [\"Milk\", \"Bread\", \"Cheese\"];\n$scope.addItem = function () {\n$scope.products.push($scope.addMe);\n}\n});\n</script>\n<div ng-app=\"myShoppingList\" \n    ng-controller=\"myCtrl\">\n<ul>\n<li ng-repeat=\"x in products\">{{x}}</li>\n</ul>\n<input ng-model=\"addMe\">\n<button ng-click=\"addItem()\">Add</button>\n</div>"
    }
  ],
  "related_topics": [
    {
      "id": "926c719d-537f-46bf-8c7f-fbca7a2e1145",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "34992be3-36af-4828-9fa5-30cbc347069c",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2ad4c291-48c5-470f-b26f-41322d48ac81",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is AngularJS Application\n\nIt?",
      "options": [
        "time to create a real AngularJS Application",
        "clicked",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of AngularJS Application\n\nIt is 'time to create a real AngularJS Application'."
    },
    {
      "question": "What is click\ndirective that will run \nthe\naddItem\nfunction when the button?",
      "options": [
        "clicked",
        "time to create a real AngularJS Application",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of click\ndirective that will run \nthe\naddItem\nfunction when the button is 'clicked'."
    }
  ],
  "summary": "This tutorial covers AngularJS Application concepts and techniques. You'll learn how to use AngularJS Application effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AngularJS Application and how to apply it in your projects."
}