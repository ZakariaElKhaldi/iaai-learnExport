{
  "id": "0229e5b4-928a-4e59-997d-ca3ceefa34e7",
  "title": "AngularJS ng-model Directive",
  "slug": "angularjs-ng-model-directive",
  "metadata": {
    "description": "Learn about AngularJS ng-model Directive with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "model",
      "name",
      "input",
      "directive",
      "form",
      "myform",
      "example",
      "myaddress",
      "email",
      "status"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAngularJS",
    "subcategory": "AngularJS Model"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AngularJS ng-model Directive",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The ng-model directive binds the value of HTML controls (input, \nselect, textarea) to application data.\nThe ng-model Directive\nWith the\nng-model\ndirective you can bind the value of an input field \nto a variable created in AngularJS.\nExample\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.name \n    = \"John Doe\";\n});\n</script>\n\nTwo-Way Binding\nThe binding goes both ways. If the user changes the value inside the input \nfield, the AngularJS property will also change its value:\nExample\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n<h1>You entered: {{name}}</h1>\n</div>\n\nValidate User Input\nThe\nng-model\ndirective can provide type validation for application data (number, \ne-mail, required):\nExample\n<form ng-app=\"\" name=\"myForm\">\nEmail:\n<input type=\"email\" name=\"myAddress\" ng-model=\"text\">\n<span ng-show=\"myForm.myAddress.$error.email\">Not a valid e-mail \n    address</span>\n</form>\n\nIn the example above, the span will be displayed only if the expression in \nthe\nng-show\nattribute returns\ntrue\n.\nIf the property in the\nng-model\nattribute does not exist, \nAngularJS will create one for you.\nApplication Status\nThe\nng-model\ndirective can provide status for application data (valid, \ndirty, touched, error):\nExample\n<form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'post@myweb.com'\">\nEmail:\n<input type=\"email\" name=\"myAddress\" ng-model=\"myText\" \n    required>\n<h1>Status</h1>\n{{myForm.myAddress.$valid}}\n{{myForm.myAddress.$dirty}}\n{{myForm.myAddress.$touched}}\n</form>\n\nCSS Classes\nThe\nng-model\ndirective provides CSS classes for HTML elements, depending \non their status:\nExample\n<style>\ninput.ng-invalid {\nbackground-color: \n        lightblue;\n}\n</style>\n<body>\n<form ng-app=\"\" name=\"myForm\">\nEnter your name:\n<input name=\"myName\" ng-model=\"myText\" required>\n</form>\n\nThe\nng-model\ndirective adds/removes the following classes, according to the \nstatus of the form field:\nng-empty\nng-not-empty\nng-touched\nng-untouched\nng-valid\nng-invalid\nng-dirty\nng-pending\nng-pristine\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.name \n    = \"John Doe\";\n});\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n<h1>You entered: {{name}}</h1>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<form ng-app=\"\" name=\"myForm\">\nEmail:\n<input type=\"email\" name=\"myAddress\" ng-model=\"text\">\n<span ng-show=\"myForm.myAddress.$error.email\">Not a valid e-mail \n    address</span>\n</form>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'post@myweb.com'\">\nEmail:\n<input type=\"email\" name=\"myAddress\" ng-model=\"myText\" \n    required>\n<h1>Status</h1>\n{{myForm.myAddress.$valid}}\n{{myForm.myAddress.$dirty}}\n{{myForm.myAddress.$touched}}\n</form>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<style>\ninput.ng-invalid {\nbackground-color: \n        lightblue;\n}\n</style>\n<body>\n<form ng-app=\"\" name=\"myForm\">\nEnter your name:\n<input name=\"myName\" ng-model=\"myText\" required>\n</form>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n</div>\n# TODO: Complete this line\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.name \n    = \"John Doe\";\n});\n</script>",
      "solution": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.name \n    = \"John Doe\";\n});\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n# TODO: Complete this line\n</div>",
      "solution": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: \n    <input ng-model=\"name\">\n<h1>You entered: {{name}}</h1>\n</div>"
    }
  ],
  "related_topics": [
    {
      "id": "38506457-6b5d-4ffb-b2e9-729baac598e2",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "50c5ded4-b315-41e5-8898-06fbb90ffa40",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "85f1f742-cae3-45bb-812f-0ce3257fef84",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers AngularJS ng-model Directive concepts and techniques. You'll learn how to use AngularJS ng-model Directive effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AngularJS ng-model Directive and how to apply it in your projects."
}