{
  "id": "105bbb10-5671-4f09-b762-e2f0723c3077",
  "title": "AngularJS Data Binding",
  "slug": "angularjs-data-binding",
  "metadata": {
    "description": "Learn about AngularJS Data Binding with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "model",
      "view",
      "data",
      "scope",
      "firstname",
      "angularjs",
      "controller",
      "binding",
      "example",
      "myapp"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAngularJS",
    "subcategory": "AngularJS Data Binding"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AngularJS Data Binding",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data binding in AngularJS is the synchronization between the model and the \nview.\nData Model\nAngularJS applications usually have a data model. The data model is a \ncollection of data available for the application.\nExample\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.lastname = \"Doe\";\n});\nHTML View\nThe HTML container where the AngularJS application is displayed, is called the view.\nThe view has access to the model, and there are several ways of displaying \nmodel data in the view.\nYou can use the\nng-bind\ndirective, which will bind the innerHTML \nof the element to the specified model property:\nExample\n<p ng-bind=\"firstname\"></p>\n\nYou can also use double braces\n{{\n}}\nto display content \nfrom the model:\nExample\n<p>First name: {{firstname}}</p>\n\nOr you can use the\nng-model\ndirective on HTML controls to bind \nthe model to the view.\nThe\nng-model\nDirective\nUse the\nng-model\ndirective to bind data from the model to the view on HTML \ncontrols (input, select, textarea)\nExample\n<input ng-model=\"firstname\">\n\nThe\nng-model\ndirective provides a two-way binding between the \nmodel and the view.\nTwo-way Binding\nData binding in AngularJS is the synchronization between the model and the \nview.\nWhen data in the\nmodel\nchanges, the\nview\nreflects the \nchange, and when data in the\nview\nchanges, the\nmodel\nis \nupdated as well. This happens immediately and automatically, which makes sure \nthat the model and the view is updated at all times.\nExample\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: <input ng-model=\"firstname\">\n<h1>{{firstname}}</h1>\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.lastname = \"Doe\";\n});\n</script>\n\nAngularJS Controller\nApplications in AngularJS are controlled by controllers. Read about \ncontrollers in the\nAngularJS Controllers\nchapter.\nBecause of the immediate synchronization of the model and the view, the \ncontroller can be completely separated from the view, and simply concentrate on \nthe model data. Thanks to the data binding in AngularJS, the view will reflect \nany changes made in the controller.\nExample\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n<h1 ng-click=\"changeName()\">{{firstname}}</h1>\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.changeName \n    = function() {\n$scope.firstname \n    = \"Nelly\";\n}\n});\n</script>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.lastname = \"Doe\";\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<p ng-bind=\"firstname\"></p>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<p>First name: {{firstname}}</p>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<input ng-model=\"firstname\">",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\nName: <input ng-model=\"firstname\">\n<h1>{{firstname}}</h1>\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.lastname = \"Doe\";\n});\n</script>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n<h1 ng-click=\"changeName()\">{{firstname}}</h1>\n</div>\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.changeName \n    = function() {\n$scope.firstname \n    = \"Nelly\";\n}\n});\n</script>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n# TODO: Complete this line\n});",
      "solution": "var app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n$scope.firstname \n    = \"John\";\n$scope.lastname = \"Doe\";\n});"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<p ng-bind=\"firstname\"></p>"
    }
  ],
  "related_topics": [
    {
      "id": "08cb3ce7-9774-4b8f-988c-aab681cac9f1",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4d888333-3c30-4425-bae4-6be06f64cf2a",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9c92dc24-e957-4323-9b5f-a544a2066e7a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is AngularJS Data Binding\n\nData binding in AngularJS?",
      "options": [
        "None of the above.",
        "the synchronization between the model and the \nview",
        "None of the above.",
        "a \ncollection of data available for the application"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of AngularJS Data Binding\n\nData binding in AngularJS is 'the synchronization between the model and the \nview'."
    },
    {
      "question": "What is The data model?",
      "options": [
        "a \ncollection of data available for the application",
        "the synchronization between the model and the \nview",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The data model is 'a \ncollection of data available for the application'."
    }
  ],
  "summary": "This tutorial covers AngularJS Data Binding concepts and techniques. You'll learn how to use AngularJS Data Binding effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AngularJS Data Binding and how to apply it in your projects."
}