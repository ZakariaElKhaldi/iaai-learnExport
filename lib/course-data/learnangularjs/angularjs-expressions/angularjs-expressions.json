{
  "id": "7b40173c-5df2-4049-b793-c0c39716bee8",
  "title": "AngularJS Expressions",
  "slug": "angularjs-expressions",
  "metadata": {
    "description": "Learn about AngularJS Expressions with clear explanations and practical examples.",
    "keywords": [
      "angularjs",
      "expressions",
      "example",
      "javascript",
      "init",
      "html",
      "bind",
      "lastname",
      "expression",
      "span"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAngularJS",
    "subcategory": "AngularJS Expressions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AngularJS Expressions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "AngularJS binds data to HTML using\nExpressions\n.\nAngularJS Expressions\nAngularJS expressions can be written inside double braces:\n{{\nexpression\n}}\n.\nAngularJS expressions can also be written inside a directive:\nng-bind=\"\nexpression\n\"\n.\nAngularJS will resolve the expression, and return the result exactly where the expression is written.\nAngularJS expressions\nare much like\nJavaScript \nexpressions:\nThey can contain literals, operators, and variables.\nExample {{ 5 + 5 }} or {{ firstName + \" \" + lastName }}\nExample\n<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div ng-app=\"\">\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>\n\nIf you remove the\nng-app\ndirective, HTML will display the \nexpression as it is, without solving it:\nExample\n<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div>\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>\n\nYou can write expressions wherever you like, AngularJS will simply resolve the \nexpression and return the result.\nExample: Let AngularJS change the value of CSS properties.\nChange the color of the input box below, by changing its value:\nExample\n<div ng-app=\"\" ng-init=\"myCol='lightblue'\">\n<input \n    style=\"background-color:{{myCol}}\" ng-model=\"myCol\">\n</div>\n\nAngularJS Numbers\nAngularJS numbers are like JavaScript numbers:\nExample\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: {{ quantity * cost }}</p>\n</div>\n\nSame example using\nng-bind\n:\nExample\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: <span ng-bind=\"quantity * cost\"></span></p>\n</div>\n\nUsing\nng-init\nis not very common. You will learn a better way to initialize data \nin the chapter about controllers.\nAngularJS Strings\nAngularJS strings are like JavaScript strings:\nExample\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is {{ firstName + \" \" + lastName }}</p>\n</div>\n\nSame example using\nng-bind\n:\nExample\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is <span ng-bind=\"firstName + ' ' + lastName\"></span></p>\n</div>\n\nAngularJS Objects\nAngularJS objects are like JavaScript objects:\nExample\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is {{ person.lastName }}</p>\n</div>\n\nSame example using\nng-bind\n:\nExample\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is <span ng-bind=\"person.lastName\"></span></p>\n</div>\n\nAngularJS Arrays\nAngularJS arrays are like JavaScript arrays:\nExample\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is {{ points[2] }}</p>\n</div>\n\nSame example using\nng-bind\n:\nExample\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is <span ng-bind=\"points[2]\"></span></p>\n</div>\n\nAngularJS Expressions vs. JavaScript Expressions\nLike JavaScript expressions, AngularJS expressions can contain literals, \noperators, and variables.\nUnlike JavaScript expressions, AngularJS expressions can be written inside \nHTML.\nAngularJS expressions do not support \nconditionals, loops, and exceptions, while JavaScript expressions do.\nAngularJS expressions support filters, while JavaScript expressions do not.\nLearn about JavaScript in our\nJavaScript Tutorial\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div ng-app=\"\">\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div>\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<div ng-app=\"\" ng-init=\"myCol='lightblue'\">\n<input \n    style=\"background-color:{{myCol}}\" ng-model=\"myCol\">\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: {{ quantity * cost }}</p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n<p>Total in dollar: <span ng-bind=\"quantity * cost\"></span></p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is {{ firstName + \" \" + lastName }}</p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n<p>The name is <span ng-bind=\"firstName + ' ' + lastName\"></span></p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is {{ person.lastName }}</p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n<p>The name is <span ng-bind=\"person.lastName\"></span></p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is {{ points[2] }}</p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n<p>The third result is <span ng-bind=\"points[2]\"></span></p>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n# TODO: Complete this line\n<div ng-app=\"\">\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div ng-app=\"\">\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n# TODO: Complete this line\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div>\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n<div>\n<p>My first expression: {{ 5 + 5 }}</p>\n</div>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "5b188689-3c63-4def-9b1c-1fb5bb4b699f",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bd12d8f6-1d4d-4403-bf31-a2d35256f1a4",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b534fe77-c362-49d5-b83b-004b00abb461",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and return the result exactly where the expression?",
      "options": [
        "None of the above.",
        "None of the above.",
        "written",
        "much like\nJavaScript \nexpressions:\nThey can contain literals"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of and return the result exactly where the expression is 'written'."
    },
    {
      "question": "What is AngularJS expressions?",
      "options": [
        "written",
        "None of the above.",
        "None of the above.",
        "much like\nJavaScript \nexpressions:\nThey can contain literals"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of AngularJS expressions is 'much like\nJavaScript \nexpressions:\nThey can contain literals'."
    }
  ],
  "summary": "This tutorial covers AngularJS Expressions concepts and techniques. You'll learn how to use AngularJS Expressions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AngularJS Expressions and how to apply it in your projects."
}