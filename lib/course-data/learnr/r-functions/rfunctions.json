{
  "id": "7f6cabcd-7d4c-4815-9195-d42131a6566b",
  "title": "RFunctions",
  "slug": "rfunctions",
  "metadata": {
    "description": "Learn about RFunctions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "arguments",
      "example",
      "fname",
      "print",
      "call",
      "return",
      "name",
      "argument",
      "value"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\nCreating a Function\nTo create a function, use the\nfunction()\nkeyword:\nExample\nmy_function <- function() { # create a function with the name my_function\nprint(\"Hello World!\")\n}\nCall a Function\nTo call a function, use the function name followed by parenthesis, like\nmy_function()\n:\nExample\nmy_function <- function() {\nprint(\"Hello World!\")\n}\nmy_function()\n# call the function named my_function\n\nArguments\nInformation can be passed into functions as arguments.\nArguments are specified after the function name, inside the parentheses. You can add as many\narguments as you want, just separate them with a comma.\nThe following example has a function with one argument (fname). When the function is called, we\npass along a first name, which is used inside the function to print the full name:\nExample\nmy_function <- function(fname) {\npaste(fname, \"Griffin\")\n}\nmy_function(\"Peter\")\nmy_function(\"Lois\")\nmy_function(\"Stewie\")\n\nParameters or Arguments?\nThe terms \"parameter\" and \"argument\" can be used for the same thing: information that are passed into\na function.\nFrom a function's perspective:\nA parameter is the variable listed inside the parentheses in the function definition.\nAn argument is the value that is sent to the function when it is called.\nNumber of Arguments\nBy default, a function must be called with the correct number of arguments. Meaning that if your\nfunction expects 2 arguments, you have to call the function with 2 arguments, not more, and not less:\nExample\nThis function expects 2 arguments, and gets 2 arguments:\nmy_function <- function(fname, lname) {\npaste(fname, lname)\n}\nmy_function(\"Peter\", \"Griffin\")\n\nIf you try to call the function with 1 or 3 arguments, you will get an error:\nExample\nThis function expects 2 arguments, and gets 1 argument:\nmy_function <- function(fname, lname) {\npaste(fname, lname)\n}\nmy_function(\"Peter\")\n\nDefault Parameter Value\nThe following example shows how to use a default parameter value.\nIf we call the function without an argument, it uses the default value:\nExample\nmy_function <- function(country = \"Norway\") {\npaste(\"I am \n  from\", country)\n}\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function() \n  # will get the default value, which is Norway\nmy_function(\"USA\")\n\nReturn Values\nTo let a function return a result, use the\nreturn()\nfunction:\nExample\nmy_function <- function(x) {\nreturn (5 * x)\n}\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))\n\nThe output of the code above will be:\n[1] 15\n[1] 25\n[1] 45\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "my_function <- function() { # create a function with the name my_function\nprint(\"Hello World!\")\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "my_function <- function() {\nprint(\"Hello World!\")\n}\nmy_function()\n# call the function named my_function",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "my_function <- function(fname) {\npaste(fname, \"Griffin\")\n}\nmy_function(\"Peter\")\nmy_function(\"Lois\")\nmy_function(\"Stewie\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "my_function <- function(fname, lname) {\npaste(fname, lname)\n}\nmy_function(\"Peter\", \"Griffin\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "my_function <- function(fname, lname) {\npaste(fname, lname)\n}\nmy_function(\"Peter\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "my_function <- function(country = \"Norway\") {\npaste(\"I am \n  from\", country)\n}\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function() \n  # will get the default value, which is Norway\nmy_function(\"USA\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "my_function <- function(x) {\nreturn (5 * x)\n}\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "my_function <- function() { # create a function with the name my_function\nprint(\"Hello World!\")\n# TODO: Complete this line",
      "solution": "my_function <- function() { # create a function with the name my_function\nprint(\"Hello World!\")\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "my_function <- function() {\nprint(\"Hello World!\")\n# TODO: Complete this line\nmy_function()\n# call the function named my_function",
      "solution": "my_function <- function() {\nprint(\"Hello World!\")\n}\nmy_function()\n# call the function named my_function"
    }
  ],
  "related_topics": [
    {
      "id": "b5d965ae-0c7f-4006-8a07-418a23a17a66",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "e2a4035e-682d-4d2a-9c8b-c759c2dcc006",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "2de5f66f-f73c-469e-8072-00068db882f2",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nFunctions\n\nA function is a block of code which only runs when it?",
      "options": [
        "specified after the function name",
        "None of the above.",
        "None of the above.",
        "called"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of R\nFunctions\n\nA function is a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Arguments?",
      "options": [
        "None of the above.",
        "specified after the function name",
        "called",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Arguments is 'specified after the function name'."
    }
  ],
  "summary": "This tutorial covers RFunctions concepts and techniques. You'll learn how to use RFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RFunctions and how to apply it in your projects."
}