{
  "id": "967eda4c-62d7-40d8-89c4-59b60ec7ef9a",
  "title": "RData Structures",
  "slug": "rdata-structures",
  "metadata": {
    "description": "Learn about RData Structures with clear explanations and practical examples.",
    "keywords": [
      "c",
      "data",
      "matrix",
      "list",
      "values",
      "structure",
      "type",
      "example",
      "array",
      "frame",
      "structures"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R Data Structures"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nData Structures",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data Structures\nData structures are used to store and organize values.\nR provides many built-in data structures. Each is used to handle data in different ways:\nVectors\nLists\nMatrices\nArrays\nData Frames\nWe will explore all of them in detail later, but for now, here's a quick introduction to each one.\nVectors\nA vector is the most basic data structure in R. It contains a list of items \nof the same type.\nExample\n# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print \n  fruits\nfruits\n\nLists\nA list can hold different types of data in one structure. You can combine numbers, strings, vectors, and even other lists.\nExample\n# List of strings\nthislist <- list(\"apple\", \"banana\", \n  50, 100)\n# \n  Print the list\nthislist\n\nMatrices\nA matrix is a 2D data structure where all elements are of the same type. It \nis like a table with rows and columns.\nExample\n# Create a matrix\nthismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)\n# Print the matrix\nthismatrix\n\nUse\nnrow\nand\nncol\nto control the size of the matrix.\nArrays\nAn array is like a matrix but can have more than two dimensions. It stores elements of the same type in multiple dimensions.\nExample\n# An array with one dimension with values ranging from 1 to 24\nthisarray <- \n  c(1:24)\nthisarray\n# An array with more than one dimension\nmultiarray <- array(thisarray, dim = c(4, 3, 2))\nmultiarray\n\nArrays are useful for working with 3D or higher-dimensional data.\nData Frames\nA data frame is like a table in a spreadsheet. It can hold different types of data across multiple columns.\nExample\n# Create a data frame\nData_Frame <- data.frame (\nTraining = \n  c(\"Strength\", \"Stamina\", \"Other\"),\nPulse = c(100, 150, 120),\nDuration = c(60, 30, 45)\n)\n# Print the data frame\nData_Frame\n\nSummary\nData Structure\nContains\nSame Type?\nUse Case\nVector\nSingle row of values\nYes\nSimple sequences\nList\nMultiple types\nNo\nGrouped mixed data\nMatrix\n2D same-type values\nYes\nTables with numeric data\nArray\nMulti-dimensional values\nYes\n3D or higher-dimensional data\nData Frame\nColumns of mixed types\nNo\nWorking with tabular data\n\n, let's take a closer look at each data structure in more detail.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print \n  fruits\nfruits",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "# List of strings\nthislist <- list(\"apple\", \"banana\", \n  50, 100)\n# \n  Print the list\nthislist",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "# Create a matrix\nthismatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)\n# Print the matrix\nthismatrix",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "# An array with one dimension with values ranging from 1 to 24\nthisarray <- \n  c(1:24)\nthisarray\n# An array with more than one dimension\nmultiarray <- array(thisarray, dim = c(4, 3, 2))\nmultiarray",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "# Create a data frame\nData_Frame <- data.frame (\nTraining = \n  c(\"Strength\", \"Stamina\", \"Other\"),\nPulse = c(100, 150, 120),\nDuration = c(60, 30, 45)\n)\n# Print the data frame\nData_Frame",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "# Vector of strings\n# TODO: Complete this line\n# Print \n  fruits\nfruits",
      "solution": "# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print \n  fruits\nfruits"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "# List of strings\nthislist <- list(\"apple\", \"banana\", \n  50, 100)\n# \n# TODO: Complete this line\nthislist",
      "solution": "# List of strings\nthislist <- list(\"apple\", \"banana\", \n  50, 100)\n# \n  Print the list\nthislist"
    }
  ],
  "related_topics": [
    {
      "id": "fbfa19e0-591f-413a-a04b-6c97f51ee10b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b551cb6e-9e39-4a0b-a204-7d18c0ac05bd",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f07d9fb9-5ac7-4725-bbae-9cf951837827",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nData Structures\n\nData Structures\nData structures?",
      "options": [
        "used to handle data in different ways:\nVectors\nLists\nMatrices\nArrays\nData Frames\nWe will explore all of them in detail later",
        "used to store and organize values",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of R\nData Structures\n\nData Structures\nData structures is 'used to store and organize values'."
    },
    {
      "question": "What is Each?",
      "options": [
        "used to handle data in different ways:\nVectors\nLists\nMatrices\nArrays\nData Frames\nWe will explore all of them in detail later",
        "used to store and organize values",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Each is 'used to handle data in different ways:\nVectors\nLists\nMatrices\nArrays\nData Frames\nWe will explore all of them in detail later'."
    }
  ],
  "summary": "This tutorial covers RData Structures concepts and techniques. You'll learn how to use RData Structures effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RData Structures and how to apply it in your projects."
}