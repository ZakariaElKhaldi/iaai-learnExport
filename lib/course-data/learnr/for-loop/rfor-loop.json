{
  "id": "2624ee28-43d8-41ed-a492-038ff2736c94",
  "title": "RFor Loop",
  "slug": "rfor-loop",
  "metadata": {
    "description": "Learn about RFor Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "print",
      "cherry",
      "example",
      "dice",
      "yahtzee",
      "fruits",
      "banana",
      "number",
      "list"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "For Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nFor Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "For Loops\nA\nfor\nloop is used for iterating over a sequence:\nExample\nfor (x in 1:10) {\nprint(x)\n}\n\nThis is less like the\nfor\nkeyword in other programming languages, and works more like an iterator\nmethod as found in other object-oriented programming languages.\nWith the\nfor\nloop we can execute a set of statements, once for each item in a vector, \narray, list, etc..\nYou will learn about\nlists\nand\nvectors\n, etc in a later chapter.\nExample\nPrint every item in a list:\nfruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nprint(x)\n}\n\nExample\nPrint the number of dices:\ndice <- c(1, 2, 3, 4, 5, 6)\nfor (x in dice) {\nprint(x)\n}\n\nThe\nfor\nloop does not require an indexing variable to set beforehand, like with\nwhile\nloops.\nBreak\nWith the\nbreak\nstatement, we can stop the loop before it has looped through all the items:\nExample\nStop the loop at \"cherry\":\nfruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nif (x == \"cherry\") {\nbreak\n}\nprint(x)\n}\n\nThe loop will stop at \"cherry\" because we have chosen to finish the loop by using the\nbreak\nstatement when\nx\nis equal to \"cherry\" (\nx == \n\"cherry\"\n).\n\nWith the\n\nstatement, we can skip an iteration without terminating the loop:\nExample\nSkip \"banana\":\nfruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nif (x == \"banana\") {\n\n}\nprint(x)\n}\n\nWhen the loop passes \"banana\", it will skip it and continue to loop.\nYahtzee!\nIf .. Else Combined with a For Loop\nTo demonstrate a practical example, let us say we play a game of Yahtzee!\nExample\nPrint \"Yahtzee!\" If the dice number is 6:\ndice <- 1:6\nfor(x in dice) {\nif (x == 6) {\nprint(paste(\"The dice number is\", x, \"Yahtzee!\"))\n} else {\nprint(paste(\"The dice number is\", x, \"Not Yahtzee\"))\n}\n}\n\nIf the loop reaches the values ranging from 1 to 5, it prints \"No Yahtzee\" and its number. When it\nreaches the value 6, it prints \"Yahtzee!\" and its number.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "for (x in 1:10) {\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "fruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "dice <- c(1, 2, 3, 4, 5, 6)\nfor (x in dice) {\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nif (x == \"cherry\") {\nbreak\n}\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nif (x == \"banana\") {\nnext\n}\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "dice <- 1:6\nfor(x in dice) {\nif (x == 6) {\nprint(paste(\"The dice number is\", x, \"Yahtzee!\"))\n} else {\nprint(paste(\"The dice number is\", x, \"Not Yahtzee\"))\n}\n}",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for (x in 1:10) {\nprint(x)\n# TODO: Complete this line",
      "solution": "for (x in 1:10) {\nprint(x)\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fruits <- list(\"apple\", \"banana\", \"cherry\")\n# TODO: Complete this line\nprint(x)\n}",
      "solution": "fruits <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in fruits) {\nprint(x)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "ffdbb0e4-18c1-4dc0-85a7-85e460869a13",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2be4943e-72da-4fa8-b126-8bc050cc15a3",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7e22fdb6-0438-4553-b5a3-0570722d877b",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nFor Loop\n\nFor Loops\nA\nfor\nloop?",
      "options": [
        "used for iterating over a sequence:\nExample\nfor (x in 1:10) {\nprint(x)\n}\n\nThis is less like the\nfor\nkeyword in other programming languages",
        "None of the above.",
        "None of the above.",
        "equal to \"cherry\" (\nx == \n\"cherry\"\n)"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of R\nFor Loop\n\nFor Loops\nA\nfor\nloop is 'used for iterating over a sequence:\nExample\nfor (x in 1:10) {\nprint(x)\n}\n\nThis is less like the\nfor\nkeyword in other programming languages'."
    },
    {
      "question": "What is because we have chosen to finish the loop by using the\nbreak\nstatement when\nx?",
      "options": [
        "None of the above.",
        "equal to \"cherry\" (\nx == \n\"cherry\"\n)",
        "used for iterating over a sequence:\nExample\nfor (x in 1:10) {\nprint(x)\n}\n\nThis is less like the\nfor\nkeyword in other programming languages",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of because we have chosen to finish the loop by using the\nbreak\nstatement when\nx is 'equal to \"cherry\" (\nx == \n\"cherry\"\n)'."
    }
  ],
  "summary": "This tutorial covers RFor Loop concepts and techniques. You'll learn how to use RFor Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RFor Loop and how to apply it in your projects."
}