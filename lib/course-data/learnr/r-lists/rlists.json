{
  "id": "e0b3ec9e-9553-4884-8def-2ab74e2596ad",
  "title": "RLists",
  "slug": "rlists",
  "metadata": {
    "description": "Learn about RLists with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "list",
      "thislist",
      "apple",
      "example",
      "banana",
      "item",
      "cherry",
      "index",
      "items",
      "lists"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R Lists"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nLists",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Lists\nA list in R can contain many different data types inside it. A list is a collection of data which is ordered and\nchangeable.\nTo create a list, use the\nlist()\nfunction:\nExample\n# List of strings\nthislist <- list(\"apple\", \"banana\", \"cherry\")\n# Print the list\nthislist\n\nAccess Lists\nYou can access the list items by referring to its index number, inside brackets. The first item has index 1, the second item has index 2, and so on:\nExample\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nthislist[1]\n\nChange Item Value\nTo change the value of a specific item, refer to the index number:\nExample\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nthislist[1] <- \"blackcurrant\"\n# Print the updated list\nthislist\n\nList Length\nTo find out how many items a list has, use the\nlength()\nfunction:\nExample\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nlength(thislist)\n\nCheck if Item Exists\nTo find out if a specified item is present in a list, use the\n%in%\noperator:\nExample\nCheck if \"apple\" is present in the list:\nthislist <- list(\"apple\", \"banana\", \"cherry\")\n\"apple\" %in% thislist\n\nAdd List Items\nTo add an item to the end of the list, use the\nappend()\nfunction:\nExample\nAdd \"orange\" to the list:\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nappend(thislist, \n  \"orange\")\n\nTo add an item to the right of a specified index, add \"\nafter=\nindex number\n\" in the\nappend()\nfunction:\nExample\nAdd \"orange\" to the list after \"banana\" (index 2):\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nappend(thislist, \n  \"orange\", after = 2)\n\nRemove List Items\nYou can also remove list items. The following example creates a new, updated list without \nan \"apple\" item:\nExample\nRemove \"apple\" from the list:\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nnewlist <- thislist[-1]\n# Print the new list\nnewlist\n\nRange of Indexes\nYou can specify a range of indexes by specifying where to start and where to end the range, by using the\n:\noperator:\nExample\nReturn the second, third, fourth and fifth item:\nthislist <- list(\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \n  \"mango\")\n(thislist)[2:5]\n\nNote:\nThe search will start at index 2 (included) and end at index 5 (included).\nRemember that the first item has index 1.\nLoop Through a List\nYou can loop through the list items by using a\nfor\nloop:\nExample\nPrint all items in the list, one by one:\nthislist <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in thislist) {\nprint(x)\n}\n\nJoin Two Lists\nThere are several ways to join, or concatenate, two or more lists in R.\nThe most common way is to use the\nc()\nfunction, which combines two elements together:\nExample\nlist1 <- list(\"a\", \"b\", \"c\")\nlist2 <- list(1,2,3)\nlist3 <- \n  c(list1,list2)\nlist3\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "# List of strings\nthislist <- list(\"apple\", \"banana\", \"cherry\")\n# Print the list\nthislist",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nthislist[1]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nthislist[1] <- \"blackcurrant\"\n# Print the updated list\nthislist",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nlength(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\n\"apple\" %in% thislist",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nappend(thislist, \n  \"orange\")",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nappend(thislist, \n  \"orange\", after = 2)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nnewlist <- thislist[-1]\n# Print the new list\nnewlist",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \n  \"mango\")\n(thislist)[2:5]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nfor (x in thislist) {\nprint(x)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "list1 <- list(\"a\", \"b\", \"c\")\nlist2 <- list(1,2,3)\nlist3 <- \n  c(list1,list2)\nlist3",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "# List of strings\nthislist <- list(\"apple\", \"banana\", \"cherry\")\n# Print the list\n# TODO: Complete this line",
      "solution": "# List of strings\nthislist <- list(\"apple\", \"banana\", \"cherry\")\n# Print the list\nthislist"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "thislist <- list(\"apple\", \"banana\", \"cherry\")\nthislist[1]"
    }
  ],
  "related_topics": [
    {
      "id": "318c0b56-54a8-45e5-8483-e6f8bb401f45",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5c5a7214-9326-410a-a335-74a58da0319f",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "585cb007-ed4b-4f20-a9b3-ac1695e08a87",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is A list is a collection of data which?",
      "options": [
        "None of the above.",
        "None of the above.",
        "ordered and\nchangeable",
        "present in a list"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A list is a collection of data which is 'ordered and\nchangeable'."
    },
    {
      "question": "What is Check if Item Exists\nTo find out if a specified item?",
      "options": [
        "ordered and\nchangeable",
        "None of the above.",
        "None of the above.",
        "present in a list"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Check if Item Exists\nTo find out if a specified item is 'present in a list'."
    }
  ],
  "summary": "This tutorial covers RLists concepts and techniques. You'll learn how to use RLists effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RLists and how to apply it in your projects."
}