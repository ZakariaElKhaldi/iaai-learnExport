{
  "id": "10bd1b0c-6d1f-4eb0-85df-9374c5a04b9d",
  "title": "RBooleans / Logical Values",
  "slug": "rbooleans-logical-values",
  "metadata": {
    "description": "Learn about RBooleans / Logical Values with clear explanations and practical examples.",
    "keywords": [
      "c",
      "false",
      "greater",
      "logical",
      "values",
      "expression",
      "true",
      "example",
      "booleans",
      "compare",
      "also"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R Booleans"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nBooleans / Logical Values",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Booleans (Logical Values)\nIn programming, you often need to know if an expression is\ntrue\nor\nfalse\n.\nYou can evaluate any expression in R, and get one of two answers,\nTRUE\nor\nFALSE\n.\nWhen you compare two values, the expression is evaluated and R returns the logical answer:\nExample\n10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9\n\nYou can also compare two variables:\nExample\na <- 10\nb <- 9\na > b\n\nYou can also run a condition in an\nif\nstatement, \nwhich you will learn much more about in the\nif..else\nchapter.\nExample\na <- 200\nb <- 33\nif (b > a) {\nprint (\"b is greater than \n  a\")\n} else {\nprint(\"b is not greater than a\")\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "a <- 10\nb <- 9\na > b",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "a <- 200\nb <- 33\nif (b > a) {\nprint (\"b is greater than \n  a\")\n} else {\nprint(\"b is not greater than a\")\n}",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n# TODO: Complete this line\n  because 10 is greater than 9",
      "solution": "10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "a <- 10\n# TODO: Complete this line\na > b",
      "solution": "a <- 10\nb <- 9\na > b"
    }
  ],
  "related_topics": [
    {
      "id": "267c4622-6d89-4391-94fc-0294c1f1c5a9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b4622f2e-85e2-4173-af04-91d68a7861d4",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cc869059-6d2e-44b0-b34a-a2e1ccc2c89d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is you often need to know if an expression?",
      "options": [
        "true\nor\nfalse",
        "evaluated and R returns the logical answer:\nExample\n10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9\n\nYou can also compare two variables:\nExample\na <- 10\nb <- 9\na > b\n\nYou can also run a condition in an\nif\nstatement",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of you often need to know if an expression is 'true\nor\nfalse'."
    },
    {
      "question": "What is the expression?",
      "options": [
        "true\nor\nfalse",
        "None of the above.",
        "evaluated and R returns the logical answer:\nExample\n10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9\n\nYou can also compare two variables:\nExample\na <- 10\nb <- 9\na > b\n\nYou can also run a condition in an\nif\nstatement",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of the expression is 'evaluated and R returns the logical answer:\nExample\n10 > 9\u00a0\u00a0\u00a0 # TRUE because 10 is greater than 9\n10 == 9\u00a0\u00a0 \n  # FALSE because 10 is not equal to 9\n10 < 9\u00a0\u00a0\u00a0 # FALSE \n  because 10 is greater than 9\n\nYou can also compare two variables:\nExample\na <- 10\nb <- 9\na > b\n\nYou can also run a condition in an\nif\nstatement'."
    }
  ],
  "summary": "This tutorial covers RBooleans / Logical Values concepts and techniques. You'll learn how to use RBooleans / Logical Values effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RBooleans / Logical Values and how to apply it in your projects."
}