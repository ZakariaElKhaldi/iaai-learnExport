{
  "id": "2fa80647-f1c2-46dc-938a-4ba8d02c7927",
  "title": "RNested Functions",
  "slug": "rnested-functions",
  "metadata": {
    "description": "Learn about RNested Functions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "call",
      "output",
      "nested",
      "within",
      "example",
      "return",
      "functions",
      "create",
      "another"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "Nested Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nNested Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Nested Functions\nThere are two ways to create a nested function:\nCall a function within another function.\nWrite a function within a function.\nExample\nCall a function within another function:\nNested_function <- function(x, y) {\na <- x + y\nreturn(a)\n}\nNested_function(Nested_function(2,2), Nested_function(3,3))\n\nExample Explained\nThe function tells x to add y.\nThe first input Nested_function(2,2) is \"x\" of the main function.\nThe second input Nested_function(3,3) is \"y\" of the main function.\nThe output is therefore (2+2) + (3+3) =\n10\n.\nExample\nWrite a function within a function:\nOuter_func <- function(x) {\nInner_func <- function(y) {\na <- x + y\nreturn(a)\n}\nreturn \n  (Inner_func)\n}\noutput <- Outer_func(3) # To \n  call the Outer_func\noutput(5)\n\nExample Explained\nYou cannot directly call the function because the Inner_func has been defined (nested) inside the\nOuter_func.\nWe need to call Outer_func first in order to call Inner_func as a second step.\nWe need to create a new variable called output and give it a value, which is 3 here.\nWe then print the output with the desired value of \"y\", which in this case is 5.\nThe output is therefore\n8\n(3 + 5).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "Nested_function <- function(x, y) {\na <- x + y\nreturn(a)\n}\nNested_function(Nested_function(2,2), Nested_function(3,3))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "Outer_func <- function(x) {\nInner_func <- function(y) {\na <- x + y\nreturn(a)\n}\nreturn \n  (Inner_func)\n}\noutput <- Outer_func(3) # To \n  call the Outer_func\noutput(5)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "Nested_function <- function(x, y) {\na <- x + y\n# TODO: Complete this line\n}\nNested_function(Nested_function(2,2), Nested_function(3,3))",
      "solution": "Nested_function <- function(x, y) {\na <- x + y\nreturn(a)\n}\nNested_function(Nested_function(2,2), Nested_function(3,3))"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "Outer_func <- function(x) {\nInner_func <- function(y) {\na <- x + y\nreturn(a)\n}\nreturn \n# TODO: Complete this line\n}\noutput <- Outer_func(3) # To \n  call the Outer_func\noutput(5)",
      "solution": "Outer_func <- function(x) {\nInner_func <- function(y) {\na <- x + y\nreturn(a)\n}\nreturn \n  (Inner_func)\n}\noutput <- Outer_func(3) # To \n  call the Outer_func\noutput(5)"
    }
  ],
  "related_topics": [
    {
      "id": "b737bfa1-dde0-4996-8a7a-11878b15e86d",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "1d1bd663-5111-4787-86b7-9dfac5adc2dc",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "a1ec4612-2cac-4980-9d0d-3ab2a36115c5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nNested Functions\n\nNested Functions\nThere?",
      "options": [
        "None of the above.",
        "Not a R\nNested Functions\n\nNested Functions\nThere.",
        "two ways to create a nested function:\nCall a function within another function",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of R\nNested Functions\n\nNested Functions\nThere is 'two ways to create a nested function:\nCall a function within another function'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers RNested Functions concepts and techniques. You'll learn how to use RNested Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RNested Functions and how to apply it in your projects."
}