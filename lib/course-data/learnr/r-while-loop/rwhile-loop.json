{
  "id": "8f8cca98-ed38-4c96-ab07-15a3ae838386",
  "title": "RWhile Loop",
  "slug": "rwhile-loop",
  "metadata": {
    "description": "Learn about RWhile Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "example",
      "print",
      "yahtzee",
      "loops",
      "dice",
      "break",
      "long",
      "condition",
      "continue"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R While Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nWhile Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable.\nR has two loop commands:\nwhile\nloops\nfor\nloops\nR While Loops\nWith the\nwhile\nloop we can execute a set of statements as long as a condition is TRUE:\nExample\nPrint\ni\nas long as\ni\nis less than 6:\ni <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\n}\n\nIn the example above, the loop will continue to produce numbers ranging from \n1 to 5. The loop will stop at 6 because\n6 < 6\nis FALSE.\nThe\nwhile\nloop requires relevant variables to be ready, in this example we \nneed to define an indexing variable,\ni\n, which we set to 1.\nNote:\nremember to increment i, or else the loop will continue forever.\nBreak\nWith the\nbreak\nstatement, we can stop the loop even if the while condition is TRUE:\nExample\nExit the loop if\ni\nis equal to 4.\ni <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\nif \n  (i == 4) {\nbreak\n}\n}\n\nThe loop will stop at 3 because we have chosen to finish the loop by using the\nbreak\nstatement when\ni\nis equal to 4 (\ni == 4\n).\n\nWith the\n\nstatement, we can skip an iteration without terminating the loop:\nExample\nSkip the value of 3:\ni <- 0\nwhile (i < 6) {\ni <- i + 1\nif (i == 3) {\n\n}\nprint(i)\n}\n\nWhen the loop passes the value 3, it will skip it and continue to loop.\nYahtzee!\nIf .. Else Combined with a While Loop\nTo demonstrate a practical example, let us say we play a game of Yahtzee!\nExample\nPrint \"Yahtzee!\" If the dice number is 6:\ndice <- 1\nwhile (dice <= 6) {\nif (dice < 6) {\nprint(\"No \n  Yahtzee\")\n} else {\nprint(\"Yahtzee!\")\n}\ndice <- dice \n  + 1\n}\n\nIf the loop passes the values ranging from 1 to 5, it prints \"No Yahtzee\". Whenever it passes the value\n6, it prints \"Yahtzee!\".\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "i <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "i <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\nif \n  (i == 4) {\nbreak\n}\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "i <- 0\nwhile (i < 6) {\ni <- i + 1\nif (i == 3) {\nnext\n}\nprint(i)\n}",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "dice <- 1\nwhile (dice <= 6) {\nif (dice < 6) {\nprint(\"No \n  Yahtzee\")\n} else {\nprint(\"Yahtzee!\")\n}\ndice <- dice \n  + 1\n}",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "i <- 1\nwhile (i < 6) {\n# TODO: Complete this line\ni <- i + 1\n}",
      "solution": "i <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "i <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\nif \n  (i == 4) {\nbreak\n# TODO: Complete this line\n}",
      "solution": "i <- 1\nwhile (i < 6) {\nprint(i)\ni <- i + 1\nif \n  (i == 4) {\nbreak\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "9fc711f9-06ad-4263-8f49-80308bc3064b",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4f0bcb05-4749-4488-8c9c-423ec951ac2b",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e64f06bf-f757-489c-8711-b6e8e620d060",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nWhile Loop\n\nLoops\nLoops can execute a block of code as long as a specified condition?",
      "options": [
        "handy because they save time",
        "reached",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of R\nWhile Loop\n\nLoops\nLoops can execute a block of code as long as a specified condition is 'reached'."
    },
    {
      "question": "What is Loops?",
      "options": [
        "None of the above.",
        "handy because they save time",
        "reached",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Loops is 'handy because they save time'."
    }
  ],
  "summary": "This tutorial covers RWhile Loop concepts and techniques. You'll learn how to use RWhile Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RWhile Loop and how to apply it in your projects."
}