{
  "id": "b73e241f-8afd-4bef-9e9e-55f0c1de4805",
  "title": "RVectors",
  "slug": "rvectors",
  "metadata": {
    "description": "Learn about RVectors with clear explanations and practical examples.",
    "keywords": [
      "c",
      "vector",
      "example",
      "fruits",
      "numbers",
      "sequence",
      "banana",
      "items",
      "orange",
      "numerical",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnR",
    "subcategory": "R Vectors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "R\nVectors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vectors\nA vector is simply a list of items that are of the same type.\nTo combine the list of items to a vector, use the\nc()\nfunction and separate the items by a comma.\nIn the example below, we create a vector variable called\nfruits\n, \nthat combine strings:\nExample\n# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print fruits\nfruits\n\nIn this example, we create a vector that combines numerical values:\nExample\n# Vector of numerical \n  values\nnumbers <- c(1, 2, 3)\n# Print numbers\nnumbers\n\nTo create a vector with numerical values in a sequence, use the\n:\noperator:\nExample\n# Vector with numerical values in a sequence\nnumbers <- \n  1:10\nnumbers\n\nYou can also create numerical values with decimals in a sequence, but note that if the last element does not belong to the sequence, it is not used:\nExample\n# Vector with numerical \n  decimals in a sequence\nnumbers1 <- \n  1.5:6.5\nnumbers1\n# Vector with numerical \n  decimals in a sequence where the last element is not used\nnumbers2 <- \n  1.5:6.3\nnumbers2\nResult:\n[1] 1.5 2.5 3.5 4.5 5.5 6.5\n[1] 1.5 2.5 3.5 4.5 5.5\n\nIn the example below, we create a vector of logical values:\nExample\n# Vector of logical values\nlog_values <- \n  c(TRUE, FALSE, TRUE, FALSE)\nlog_values\n\nVector Length\nTo find out how many items a vector has, use the\nlength()\nfunction:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\")\nlength(fruits)\n\nSort a Vector\nTo sort items in a vector alphabetically or numerically, use the\nsort()\nfunction:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\nnumbers <- c(13, 3, 5, 7, 20, 2)\nsort(fruits)\u00a0\n  # Sort a string\nsort(numbers) # Sort numbers\n\nAccess Vectors\nYou can access the vector items by referring to its index number inside brackets\n[]\n. The first item has index 1, the second item has index 2, and so on:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Access the first item (banana)\nfruits[1]\n\nYou can also access multiple elements by referring to different index \npositions with the\nc()\nfunction:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\", \n  \"mango\", \"lemon\")\n# Access the first and third item \n  (banana and orange)\nfruits[c(1, 3)]\n\nYou can also use negative index numbers to access all items except the ones specified:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\n# Access all \n  items except for the first item\nfruits[c(-1)]\n\nChange an Item\nTo change the value of a specific item, refer to the index number:\nExample\nfruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\n# Change \n  \"banana\" to \"pear\"\nfruits[1] <- \"pear\"\n# Print fruits\nfruits\n\nRepeat Vectors\nTo repeat vectors, use the\nrep()\nfunction:\nExample\nRepeat each value:\nrepeat_each <- rep(c(1,2,3), each = 3)\nrepeat_each\n\nExample\nRepeat the sequence of the vector:\nrepeat_times <- rep(c(1,2,3), times = 3)\nrepeat_times\n\nExample\nRepeat each value independently:\nrepeat_indepent <- rep(c(1,2,3), times = c(5,2,1))\nrepeat_indepent\n\nGenerating Sequenced Vectors\nOne of the examples on top, showed you how to create a vector with numerical values in a sequence with the\n:\noperator:\nExample\nnumbers <- \n  1:10\nnumbers\n\nTo make bigger or smaller steps in a sequence, use the\nseq()\nfunction:\nExample\nnumbers <- seq(from = 0, to = 100, by = 20)\nnumbers\n\nNote:\nThe\nseq()\nfunction has three parameters:\nfrom\nis where the sequence starts,\nto\nis where the sequence stops, and\nby\nis the interval of the\nsequence.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print fruits\nfruits",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "# Vector of numerical \n  values\nnumbers <- c(1, 2, 3)\n# Print numbers\nnumbers",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "# Vector with numerical values in a sequence\nnumbers <- \n  1:10\nnumbers",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "# Vector with numerical \n  decimals in a sequence\nnumbers1 <- \n  1.5:6.5\nnumbers1\n# Vector with numerical \n  decimals in a sequence where the last element is not used\nnumbers2 <- \n  1.5:6.3\nnumbers2",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "# Vector of logical values\nlog_values <- \n  c(TRUE, FALSE, TRUE, FALSE)\nlog_values",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\")\nlength(fruits)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\nnumbers <- c(13, 3, 5, 7, 20, 2)\nsort(fruits)\u00a0\n  # Sort a string\nsort(numbers) # Sort numbers",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\")\n# Access the first item (banana)\nfruits[1]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\", \n  \"mango\", \"lemon\")\n# Access the first and third item \n  (banana and orange)\nfruits[c(1, 3)]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\n# Access all \n  items except for the first item\nfruits[c(-1)]",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "fruits <- c(\"banana\", \"apple\", \"orange\", \"mango\", \"lemon\")\n# Change \n  \"banana\" to \"pear\"\nfruits[1] <- \"pear\"\n# Print fruits\nfruits",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "repeat_each <- rep(c(1,2,3), each = 3)\nrepeat_each",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "repeat_times <- rep(c(1,2,3), times = 3)\nrepeat_times",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "repeat_indepent <- rep(c(1,2,3), times = c(5,2,1))\nrepeat_indepent",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "numbers <- \n  1:10\nnumbers",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "numbers <- seq(from = 0, to = 100, by = 20)\nnumbers",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# TODO: Complete this line\nfruits",
      "solution": "# Vector of strings\nfruits <- c(\"banana\", \"apple\", \"orange\")\n# Print fruits\nfruits"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "# Vector of numerical \n  values\nnumbers <- c(1, 2, 3)\n# TODO: Complete this line\nnumbers",
      "solution": "# Vector of numerical \n  values\nnumbers <- c(1, 2, 3)\n# Print numbers\nnumbers"
    }
  ],
  "related_topics": [
    {
      "id": "8127f8b8-a2ee-4754-ba21-9f46c3031bcc",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "43a437eb-3704-4364-8ea6-8d0f45d41ce0",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ae5725ed-d989-4075-8cf9-b2ca95a4e6d0",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is R\nVectors\n\nVectors\nA vector is simply a list of items that?",
      "options": [
        "of the same type",
        "None of the above.",
        "not used:\nExample\n# Vector with numerical \n  decimals in a sequence\nnumbers1 <- \n  1",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of R\nVectors\n\nVectors\nA vector is simply a list of items that is 'of the same type'."
    },
    {
      "question": "What is it?",
      "options": [
        "of the same type",
        "not used:\nExample\n# Vector with numerical \n  decimals in a sequence\nnumbers1 <- \n  1",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it is 'not used:\nExample\n# Vector with numerical \n  decimals in a sequence\nnumbers1 <- \n  1'."
    }
  ],
  "summary": "This tutorial covers RVectors concepts and techniques. You'll learn how to use RVectors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RVectors and how to apply it in your projects."
}