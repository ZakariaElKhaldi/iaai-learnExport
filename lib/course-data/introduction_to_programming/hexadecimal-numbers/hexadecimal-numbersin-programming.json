{
  "id": "ca31a441-5101-489c-b4d2-51ea4c621c8f",
  "title": "Hexadecimal Numbersin Programming",
  "slug": "hexadecimal-numbersin-programming",
  "metadata": {
    "description": "Learn about Hexadecimal Numbersin Programming with clear explanations and practical examples.",
    "keywords": [
      "hexadecimal",
      "decimal",
      "numbers",
      "digit",
      "digits",
      "number",
      "counting",
      "underline",
      "cdot",
      "system"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "Introduction to Programming",
    "subcategory": "Hexadecimal Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Hexadecimal Numbers\nin Programming",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Hexadecimal numbers are numbers with sixteen possible values for each digit: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F.\nWhat is a Hexadecimal Number?\nA hexadecimal number uses digits with values\n0\nthrough\n9\n, like in our normal decimal system, but uses values\nA\nthrough\nF\nin addition.\nPress the buttons below to see how counting in hexadecimal numbers works:\nHexadecimal\n{{ aValueHexadecimal }}\nDecimal\n{{ aValue }}\nCount up\nReset\nCount down\nThe term\nhexadecimal\ncomes from the Latin 'hex', meaning 'six', and 'decimal', meaning 'ten', because this number system has sixteen possible digits.\nThe reason for using hexadecimal numbers is that they are more compact than decimal numbers, and easier to convert to and from binary numbers, since one hexadecimal digit corresponds exactly to four binary digits.\nFor example, the hexadecimal number\n0\nis\n0000\nin binary, and\nF\nis\n1111\nin\nbinary numbers\n.\nThis means that writing three bytes (24 bits) in hexadecimal\nFF0000\ntakes only 6 characters, far easier than writing the same number in binary.\nAnd writing\n#FF0000\nis in fact a way to set the color red using\nRGB in CSS\n, with hexadecimal numbers.\nGet an even deeper understanding of hexadecimal numbers by learning about\nbinary numbers\nand\nbits and bytes\nas well.\nCounting in Decimal Numbers\nTo better understand counting with hexadecimal numbers, it's a good idea to first understand the numbers we are used to: decimal numbers.\nThe decimal system has 10 different digits to choose from (0,..,9).\nWe start counting at the lowest value:\n0\n.\nCounting upwards from\n0\nlooks like this:\n1, 2, 3, 4, 5, 6, 7, 8, 9\n.\nAfter counting up to\n9\n, we have used up all the different values available to us in the decimal system, so we need to add a new digit\n1\nto the left, and we reset the rightmost digit to\n0\n, we get\n10\n.\nA similar thing happens at\n99\n. To count further, we need to add a new digit\n1\nto the left, and reset the existing digits to\n0\n, we get\n100\n.\nCounting upwards, every time all possible combinations of digits have been used, we must add a new digit to continue counting. This is also true for counting using\nbinary numbers\nand hexadecimal numbers.\nCounting in Hexadecimal\nCounting in hexadecimal is very similar to counting in decimal to start with:\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n.\nAt this point in the decimal system, we have used up all the different digits available to us, but in the hexadecimal system, we have 6 more possible digits, so we can keep counting!\nA\nB\nC\nD\nE\nF\nAt this point, we have used up all the different digits available to us in the hexadecimal system, so we need to add a new digit\n1\nto the left, and reset the existing digit to\n0\n, we get\n10\n(which is equal to the decimal number\n16\n).\nWe continue counting, using two digits:\n10\n11\n..\n...\n1F\n20\n21\n...\nFF\nIt happened again! We have used up all the different possibilities with two digits, so we need to add another new digit\n1\nto the left, and reset the existing digits to\n0\n, we get\n100\n, which is equal to the decimal number\n256\n.\nThis is similar to what happens in decimal when we count from\n99\nto\n100\n.\nUnderstanding hexadecimal numbers becomes a lot easier if you're able to see the similarities between counting in hexadecimal and counting in decimal and\nbinary\n.\nDecimal Values\nTo understand how hexadecimal numbers are converted to decimal numbers, it's a good idea to first see how decimal numbers get their value in the base 10 decimal system.\nThe decimal number\n374\nhas\n3\nhundreds,\n7\ntens, and\n4\nones, right?\nWe can write this as:\n\\[\n\\begin{equation}\n\\begin{aligned}\n374 {} & = 3 \\cdot \\underline{10^2} + 7 \\cdot \\underline{10^1} + 4 \\cdot \\underline{10^0} \\\\[8pt]\n           & = 3 \\cdot \\underline{100} + 7 \\cdot \\underline{10} + 4 \\cdot \\underline{1} \\\\[8pt]\n           & = 300 + 70 + 4 \\\\[8pt]\n           & = 374\n\\end{aligned}\n\\end{equation}\n\\]\nThe math above helps us better understand how hexadecimal numbers are converted to decimal numbers.\nNotice how \\(10\\) appears three times in the first line of calculation?\n\\[ 374 = 3 \\cdot \\underline{10}^2 + 7 \\cdot \\underline{10}^1 + 4 \\cdot \\underline{10}^0 \\]\nThat is because \\(10\\) is the basis of the decimal number system. Each decimal digit is a multiple of \\(10\\), and that is why it is called a\nbase 10 number system\n.\nConverting Hexadecimal to Decimal\nWhen converting from hexadecimal to decimal, we multiply the digits by powers of\n16\n(instead of powers of\n10\n).\nLet's convert the hexadecimal number\n3C\nto decimal:\n\\[\n\\begin{equation}\n\\begin{aligned}\n3C {} & = 3 \\cdot \\underline{16^1} + 12 \\cdot \\underline{16^0} \\\\[8pt]\n           & = 3 \\cdot \\underline{16} + 12 \\cdot \\underline{1} \\\\[8pt]\n           & = 48 + 12 \\\\[8pt]\n           & = 60\n\\end{aligned}\n\\end{equation}\n\\]\nIn the first line of calculation, each hexadecimal digit gets multiplied by 16 in the power of the digit's position.\nThe first position is 0, starting from the rightmost digit. That is why\nC\n, which is equal to\n12\n, is multiplied by \\(16^0\\) since\nC\n's position is 0.\nThe fact that each hexadecimal digit is a multiple of 16 is why it is called a\nbase 16 number system\n.\nThe calculation above shows that the hexadecimal number\n3C\nis equal to the decimal number\n60\n.\nClick the individual hexadecimal digits below to see how other hexadecimal numbers are converted to decimal numbers:\nHexadecimal\nDecimal\n{{ digitToHex(digit) }}\n{{ aValueDecimal }}\nCalculation\n{{aValueHexadecimal}}\n=\n=\n=\n=\nAs you can see, each hexadecimal digit is a multiple of 16, 16 in the power of the digit's position.\nConverting Decimal to Hexadecimal\nTo convert a decimal number to a hexadecimal number, we can divide by 16, repeatedly, while keeping track of the remainders.\nLet's convert the decimal number\n42\nto hexadecimal:\n\\[\n\\begin{aligned}\n42 \\div 16 &= 2,\\ \\text{remainder } \\underline{10} \\\\[8pt]\n2 \\div 16  &= 0,\\ \\text{remainder } \\underline{2} \\\\[8pt]\n\\end{aligned}\n\\]\nReading the remainders from bottom to top, with\n10\nbeing\nA\nin hexadecimal, we get that\n2A\nis the hexadecimal representation of\n42\n.\nClick the individual decimal digits below to see how other decimal numbers are converted to hexadecimal numbers:\nDecimal\nHexadecimal\n{{ digit }}\n{{ aValueHexadecimal }}\nCalculation\nResult:\nIt is important to note why we use hexadecimal numbers.\nHexadecimal numbers are used because they are a more compact representation of binary numbers, which means they are easier to write and read.\nFor example, the value of\nB\nis easier to write and read than the value of\n1011\n.\nFurthermore, each hexadecimal digit maps exactly to 4 binary digits, meaning there are 16 possible values for a hexadecimal digit, just like there are 16 possible values for a group of 4 binary digits. So that for example a one byte (8-bit) value can be represented exactlyby 2 hexadecimal digits.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a4ae2396-eb0f-4eeb-9660-48a8424148cd",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c46d1a63-448d-409b-b3ca-543cc111903e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bd30ee4c-f674-4a18-b209-f2907a2a2de9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Hexadecimal Numbers\nin Programming\n\nHexadecimal numbers?",
      "options": [
        "a Hexadecimal Number",
        "numbers with sixteen possible values for each digit: 0",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Hexadecimal Numbers\nin Programming\n\nHexadecimal numbers is 'numbers with sixteen possible values for each digit: 0'."
    },
    {
      "question": "What is What?",
      "options": [
        "a Hexadecimal Number",
        "None of the above.",
        "None of the above.",
        "numbers with sixteen possible values for each digit: 0"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'a Hexadecimal Number'."
    }
  ],
  "summary": "This tutorial covers Hexadecimal Numbersin Programming concepts and techniques. You'll learn how to use Hexadecimal Numbersin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Hexadecimal Numbersin Programming and how to apply it in your projects."
}