{
  "id": "d2008634-e548-47c9-862e-f68819992ec6",
  "title": "Arraysin Programming",
  "slug": "arraysin-programming",
  "metadata": {
    "description": "Learn about Arraysin Programming with clear explanations and practical examples.",
    "keywords": [
      "myfruits",
      "array",
      "banana",
      "apple",
      "orange",
      "value",
      "string",
      "values",
      "listofnames",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 9,
    "category": "Introduction to Programming",
    "subcategory": "Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Arrays\nin Programming\n\nArrays are made for storing many values together",
      "content": ".\nWhat is an Array?\nAn array is a collection of values.\nThe image below shows how we can think of an array named\nmyFruits\n, with the values\n'banana'\n,\n'apple'\n, and\n'orange'\nstored inside it.\n'apple'\n'orange'\n'banana'\nValues\nArray Name\nmyFruits\nIndexes\n0\n1\n2\nEach value in an array has a position, called index, which starts at\n0\n.\nBelow is how the\nmyFruits\narray is created, using Python code:\nmyFruits =\nName\n['banana',\n'apple',\n'orange']\nValues\nIndexes\n0\n1\n2\nThe first value\n'banana'\nis positioned at index\n0\nin the array.\nWhat Can I Do With an Array?\nArrays make it easier to work with groups of values compared to using a separate variable for each value.\nSo instead of creating 3 variables:\nfruit1 = 'banana'\nfruit2 = 'apple'\nfruit3 = 'orange'\nWe can just create an array:\nmyFruits = ['banana','apple','orange']\nWith an array, you can:\nStore a collection of numbers, words, or objects.\nAccess any value using its index (position).\nRead, update, insert, or remove any of the array values.\nSee how an array can be created and used in the sections below.\nCreating an Array\nWhen creating an array we must specify the name of the array and the values inside it.\nHere is how the\nmyFruits\narray can be created using different programming languages:\nmyFruits = ['banana','apple','orange']\nconst myFruits = ['banana','apple','orange'];\nString[] myFruits = {\"banana\",\"apple\",\"orange\"};\nstring myFruits[] = {\"banana\",\"apple\",\"orange\"};\nRun Example \u00bb\nIn the Python code above:\nmyFruits\nis the name of the array.",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The equal sign",
      "content": "=\nstores the values on the right side into the array.\nThe square brackets\n[ ]\nmean we are creating an array.\n'banana','apple','orange'\nare the values inside the array, separated by comma.\nNote:\nWhen creating an array in programming languages like C/C++ and Java, the data type of the values inside the array must be stated.\nArray Operations\nArrays can be read and manipulated in many different ways, here are some common things you can do with an array:\nOperation\nDescription\nread\nReads a value from an index in the array.\nupdate\nUpdates the existing value at an array index position.\ninsert\nInserts a new value in the array, in addition to the existing values.\nremove\nRemoves a value from the array at a given index position.\nlength\nGives us the number of values in the array. The number of values is the length of an array.\nloop\nVisits each value in the array, using a\nloop\n.\nGo to the sections below to see how the code for these array operations look like in different programming languages.\nReading an Array Value\nTo read an array value, we use the array name with the index of the value we want to read in brackets, like this\nmyFruits[0]\n.\n{{ i }}\n'{{ el.value }}'\nResult:\n'{{ result }}'\nRun code\nWe must also use a command to write\nmyFruits[0]\nto the console/terminal, so that we can actually see the result, and that is done a little different depending on the programming language.\nmyFruits = ['banana','apple','orange']\n\nprint(myFruits[0])\nconst myFruits = ['banana','apple','orange'];\n\nconsole.log(myFruits[0]);\nString[] myFruits = {\"banana\",\"apple\",\"orange\"};\n\nSystem.out.println(myFruits[0]);\nstring myFruits[] = {\"banana\",\"apple\",\"orange\"};\n\ncout << myFruits[0];\nRun Example \u00bb\nUpdating an Array Value\nTo update a value in an array, we use the array name with the index position of the value we want to update, like this\nmyFruits[0]\n, and then we use the equal sign\n=\nto store a new value there.\n{{ i }}\n'{{ el.value }}'\nValue:\nRun code\nThis is how updating an array value at index 0 can be done in different programming languages:\nmyFruits = ['banana','apple','orange']\n\nmyFruits[0] = 'kiwi'\nconst myFruits = ['banana','apple','orange'];\n\nmyFruits[0] = 'kiwi';\nString[] myFruits = {\"banana\",\"apple\",\"orange\"};\n\nmyFruits[0] = \"kiwi\";\nstring myFruits[] = {\"banana\",\"apple\",\"orange\"};\n\nmyFruits[0] = \"kiwi\";\nRun Example \u00bb\nInserting an Array Value\nTo insert a value into an array, in addition to the existing values, we need:\nthe array name\na command to do the insert operation\nthe value to be inserted\n{{ i }}\n'{{ el.value }}'\nValue:\nRun code\nReset\nWhen we do insert this way, the new value is inserted at the end of the array.\nThe command to insert a value into an array varies a bit between the programming languages.\nmyFruits = ['banana','apple','orange']\n\nmyFruits.append('kiwi')\nconst myFruits = ['banana','apple','orange'];\n\nmyFruits.push('kiwi');\nArrayList<String> myFruits = new ArrayList<String>();\nmyFruits.add(\"banana\");\nmyFruits.add(\"apple\");\nmyFruits.add(\"orange\");\n\nmyFruits.add(\"kiwi\");\nvector<string> myFruits = {\"banana\", \"apple\", \"orange\"};\n\nmyFruits.push_back(\"kiwi\");\nRun Example \u00bb\nA\nDynamic Array\nis an array that is able to change size, like it must for insert and remove operations. In such cases where the array changes size, we use\nArrayList\nin Java and\nvector\nin C++.\nA value can also be added to a specific position in an array, using the index, like this:\nmyFruits = ['banana','apple','orange']\n\nmyFruits.insert(1,'kiwi')\nconst myFruits = ['banana','apple','orange'];\n\nmyFruits.splice(1,0,'kiwi');\nArrayList<String> myFruits = new ArrayList<String>();\nmyFruits.add(\"banana\");\nmyFruits.add(\"apple\");\nmyFruits.add(\"orange\");\n\nmyFruits.add(1,\"kiwi\");\nvector<string> myFruits = {\"banana\", \"apple\", \"orange\"};\n\nmyFruits.insert(myFruits.begin() + 1, \"kiwi\");\nRun Example \u00bb\nRemoving an Array Value\nAn array value is removed by specifying the index where the value should be removed from.\n{{ i }}\n'{{ el.value }}'\nIndex:\nRun code\nReset\nThis is how an array value placed at index 1 can be removed in different programming languages:\nmyFruits = ['banana','apple','orange']\n\nmyFruits.pop(1)\nconst myFruits = ['banana','apple','orange'];\n\nmyFruits.splice(1,1);\nArrayList<String> myFruits = new ArrayList<String>();\nmyFruits.add(\"banana\");\nmyFruits.add(\"apple\");\nmyFruits.add(\"orange\");\n\nmyFruits.remove(1);\nvector<string> myFruits = {\"banana\", \"apple\", \"orange\"};\n\nmyFruits.erase(myFruits.begin() + 1);\nRun Example \u00bb\nA value can also be removed from the end of an array, without using the index (except for Java), like this:\nmyFruits = ['banana','apple','orange']\n\nmyFruits.pop()\nconst myFruits = ['banana','apple','orange'];\n\nmyFruits.pop();\nArrayList<String> myFruits = new ArrayList<String>();\nmyFruits.add(\"banana\");\nmyFruits.add(\"apple\");\nmyFruits.add(\"orange\");\n\nmyFruits.remove(myFruits.size()-1);\nvector<string> myFruits = {\"banana\", \"apple\", \"orange\"};\n\nmyFruits.pop_back();\nRun Example \u00bb\nFinding the length of an Array\nYou can always check the length of an array:\n{{ i }}\n'{{ el.value }}'\nResult:\n{{ result }}\nRun code\nThis is how the length of an array is found in different programming languages:\nmyFruits = ['banana','apple','orange']\n\nprint(len(myFruits))\nconst myFruits = ['banana','apple','orange'];\n\nconsole.log(myFruits.length);\nArrayList<String> myFruits = new ArrayList<String>();\nmyFruits.add(\"banana\");\nmyFruits.add(\"apple\");\nmyFruits.add(\"orange\");\n\nSystem.out.println(myFruits.size());\nvector<string> myFruits = {\"banana\", \"apple\", \"orange\"};\n\ncout << myFruits.size();\nRun Example \u00bb\nLooping Through an Array\nSee\nthis page\nfor an explanation of what a loop is.\nLooping through an array means to look at every value in the array.\nHere is how we can loop through the\nmyFruits\narray using a\nfor\nloop, printing every value:\n{{ i }}\n'{{ el.value }}'\nResult:\nRun code\nThere is more than one way to loop through an array, but using a\nfor\nloop is perhaps the most straight forward way that is also supported in all programming languages, like this:\nmyFruits = ['banana','apple','orange']\n\nfor fruit in myFruits:\n  print(fruit)\nconst myFruits = ['banana','apple','orange'];\n\nfor (let fruit of myFruits) {\n  console.log(fruit);\n}\nString[] myFruits = {\"banana\", \"apple\", \"orange\"};\n\nfor (String fruit : myFruits) {\n  System.out.println(fruit);\n}\nstring myFruits[] = {\"banana\", \"apple\", \"orange\"};\n\nfor (auto fruit : myFruits) {\n  cout << fruit + \"\\n\";\n}\nRun Example \u00bb\nAnother way to loop through an array is to use a\nfor\nloop with a counting variable for the indexes, like this:\nmyFruits = ['banana','apple','orange']\n\nfor i in range(len(myFruits)):\n  print(myFruits[i])\nconst myFruits = ['banana','apple','orange'];\n\nfor (let i = 0; i < myFruits.length; i++) {\n  console.log(myFruits[i]);\n}\nString[] myFruits = {\"banana\", \"apple\", \"orange\"};\n\nfor (int i = 0; i < myFruits.length; i++) {\n  System.out.println(myFruits[i]);\n}\nstring myFruits[] = {\"banana\", \"apple\", \"orange\"};\nint size = sizeof(myFruits) / sizeof(myFruits[0]);\n\nfor (int i = 0; i < size; i++) {\n  cout << myFruits[i] + \"\\n\";\n}\nRun Example \u00bb\nOther things we can do with looping through arrays is to find out if \"Bob\" appears in an array of names, or we can loop through an array of groceries for example, to find the total sum we need to pay for them.\nBelow is an example of looping through an array of names, looking for \"Bob\".\nlistOfNames = ['Jones','Jill','Lisa','Stan','Bob','Alice']\n\nfor i in range(len(listOfNames)):\n  print(listOfNames[i])\n  if listOfNames[i] == 'Bob':\n    print('Found Bob!')\n    break\nlet listOfNames = ['Jones','Jill','Lisa','Stan','Bob','Alice'];\n\nfor (let i = 0; i < listOfNames.length; i++) {\n  console.log(listOfNames[i]);\n  if (listOfNames[i] === 'Bob') {\n    console.log('Found Bob!');\n     break;\n  }\n}\nString[] listOfNames = {\"Jones\", \"Jill\", \"Lisa\", \"Stan\", \"Bob\", \"Alice\"};\n\nfor (int i = 0; i < listOfNames.length; i++) {\n  System.out.println(listOfNames[i]);\n  if (listOfNames[i] == \"Bob\") {\n    System.out.println(\"Found Bob!\");\n    break;\n  }\n}\nstring listOfNames[] = {\"Jones\", \"Jill\", \"Lisa\", \"Stan\", \"Bob\", \"Alice\"};\nint size = sizeof(listOfNames) / sizeof(listOfNames[0]);\n\nfor (int i = 0; i < size; i++) {\n  cout << listOfNames[i] + \"\\n\";\n  if (listOfNames[i] == \"Bob\") {\n    cout << \"Found Bob!\\n\";\n    break;\n  }\n}\nRun Example \u00bb\nIn the code above, the\nbreak\nstatement stops the loop once \"Bob\" is found. That is why \"Alice\" is not printed.\nStrict Definition of an Array\nArrays found in modern languages like Python or JavaScript are flexible, meaning arrays can grow, shrink, and hold different types of values. Other programming languages, like C and Java, require arrays to be defined more strictly.\nA more strict definition of an array means that in addition to being a collection of values, an array is also:\nfixed length\nsame data type for all values\nstored contiguously in memory\nFixed length\nmeans that the array length (the number of values inside the array), cannot be changed.\nWhen using the C programming language for example, if you have created an array of 4 values, the array length (4) is fixed and cannot be changed. So if you want to insert a 5th value at the end of your array, you must create a new array 5 values long, put in the original 4 values, and put the 5th value in the last place in new array where there is now place for it.\nSame datatype\nmeans that all values in the array must be of the same type, so they must all be whole numbers for example, or decimal numbers, or characters, or strings, or some other data type.\nHaving the array\nstored contiguously in memory\nmeans that the values are stored right after each other in one block of memory, like a group of friends living right \nhere\n.\nUsing arrays in their strict form gives the user full control over how the program actually executes, but it also makes it hard to do certain things, and it is more prone to errors.\nWhen in need for more flexible/dynamic array functionality in languages such as C or Java, developers often use libraries to help them get the expanded dynamic array functionality they are looking for.\nIn the code examples on this page, to achieve a dynamic array length so that we can insert and remove values, we have used\nPython Lists\n,\nJavaScript Arrays\n,\nJava ArrayList\n, and\nC++ Vectors\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "161ed61e-e2b1-4c9b-9edf-3ac50585eb7f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "55dc16bf-174d-4f07-a912-729360d0d8a6",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6d20cb54-6cf7-4ecf-b547-f592cb1abc79",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Arrays\nin Programming\n\nArrays?",
      "options": [
        "an Array",
        "None of the above.",
        "made for storing many values together",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Arrays\nin Programming\n\nArrays is 'made for storing many values together'."
    },
    {
      "question": "What is What?",
      "options": [
        "an Array",
        "None of the above.",
        "None of the above.",
        "made for storing many values together"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'an Array'."
    }
  ],
  "summary": "This tutorial covers Arraysin Programming concepts and techniques. You'll learn how to use Arraysin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Arraysin Programming and how to apply it in your projects."
}