{
  "id": "b76b7d89-154c-4a1d-b490-fbdb7ba1d27b",
  "title": "If Statementsin Programming",
  "slug": "if-statementsin-programming",
  "metadata": {
    "description": "Learn about If Statementsin Programming with clear explanations and practical examples.",
    "keywords": [
      "else",
      "adult",
      "print",
      "dice",
      "console",
      "system",
      "println",
      "cout",
      "statement",
      "condition"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "Introduction to Programming",
    "subcategory": "If Statements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "If Statements\nin Programming",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "If statements allow your program to make decisions, so it can do different things depending on the situation.\nWhat is an If Statement?\nAn if statement runs a block of code if the condition is true.\nWe do similar things in real life, like using an umbrella if it's raining, or wearing a coat if it's cold.\nSee how an if statement works in the simple game below. The goal is to get 6 when you roll the dice.\nRoll\nTo make the game do something different depending on the dice result, we use\nif\nwith a condition that checks if the dice result is 6.\nIn case the condition is true, we print \"You got 6!\" and launch the confetti. And in case the condition is not true, we print \"Try again\".\nHere is the flow chart and Python code for the game:\nFlow chart\nCode\nstart\ndice = random(1,6)\nfalse\ntrue\nTry again\nYou got 6!\ndice == 6?\nCondition\ndice = random.randint(1,6)\nif\nelse:\ndice == 6:\nCondition\nprint('You got 6!\ud83e\udd73')\nlaunchConfetti()\nCode runs\nif condition\nis true\nprint('Try again')\nCode runs\nif condition\nis false\nWe must use\nelse\nin the code above, to handle the case when the dice is not 6, so that we can write \"Try again\".\nClick the \"Run Example\" button below to see the dice rolling code in action.\ndice = random.randint(1,6)\nprint('You rolled a ' + str(dice))\n\nif dice == 6:\n  print('You got 6!\ud83e\udd73')\nelse:\n  print('Try again')\nconst dice = Math.floor(Math.random() * 6) + 1;\nconsole.log('You rolled a ' + dice);\n\nif (dice == 6) {\n  console.log('You got 6!\ud83e\udd73');\n} else {\n  console.log('Try again');\n}\nint dice = random.\nSystem.out.println(\"You rolled a \" + dice);\n\nif (dice == 6) {\n  System.out.println(\"You got 6!\ud83e\udd73\");\n} else {\n  System.out.println(\"Try again\");\n}\nint dice = rand() % 6 + 1;\ncout << \"You rolled a \" + to_string(dice) + \"\\\\n\";\n\nif (dice == 6) {\n  cout << \"You got 6!\ud83e\udd73\\\\n\";\n} else {\n  cout << \"Try again\\\\n\";\n}\nRun Example \u00bb\nWhen Should I Use an If Statement?\nWhen you want your program to do something different depending on the situation, you should use an if statement.\nFor example, in case you want your program to print \"Welcome!\" when the user enters the correct password, and \"Access denied\" when the user enters the wrong password, you should use an if statement.\nIf, Else, and Else If\nAn if-statement allways starts with an\nif\n.\nAn if-statement can contain zero or many\nelse if\n, and zero or one\nelse\n.\nWhen\nelse\nis present, it has to come last, after all the\nelse if\n.\nThe\nelse\nstatement ensures that one (and only one) of the code blocks will execute.\nSometimes it is enough to just use a single\nif\n, like this:\nage = 32\nprint('Age: ' + str(age))\n\nif age > 17:\n  print('You are an adult!')\nconst age = 32;\nconsole.log('Age: ' + age);\n\nif (age > 17) {\n  console.log('You are an adult!');\n}\nint age = 32;\nSystem.out.println(\"Age: \" + age);\n\nif (age > 17) {\n  System.out.println(\"You are an adult!\");\n}\nint age = 32;\ncout << \"Age: \" + to_string(age) + \"\\\\n\";\n\nif (age > 17) {\n  cout << \"You are an adult!\\\\n\";\n}\nRun Example \u00bb\nBut usually, we also want to handle the case when the condition is not true, so we use an\nelse\nstatement for that.\nage = 10\nprint('Age: ' + str(age))\n\nif age > 17:\n  print('You are an adult!')\nelse:\n  print('You are not an adult yet.')\nconst age = 10;\nconsole.log('Age: ' + age);\n\nif (age > 17) {\n  console.log('You are an adult!');\n} else {\n  console.log('You are not an adult yet.');\n}\nint age = 10;\nSystem.out.println(\"Age: \" + age);\n\nif (age > 17) {\n  System.out.println(\"You are an adult!\");\n} else {\n  System.out.println(\"You are not an adult yet.\");\n}\nint age = 10;\ncout << \"Age: \" + to_string(age) + \"\\\\n\";\n\nif (age > 17) {\n  cout << \"You are an adult!\\\\n\";\n} else {\n  cout << \"You are not an adult yet.\\\\n\";\n}\nRun Example \u00bb\nThe code block that belongs to the\nelse\nwill only be executed in case the condition in the\nif\nis false.\nWe can also use\nelse if\nto check more than one condition, so that we get more than two outcomes.\nage = 15\nprint('Age: ' + str(age))\n\nif age < 13:\n  print('You are a child')\nelif age < 20:\n  print('You are a teenager')\nelse:\n  print('You are an adult')\nconst age = 15;\nconsole.log('Age: ' + age);\n\nif (age < 13) {\n  console.log('You are a child');\n} else if (age < 20) {\n  console.log('You are a teenager');\n} else {\n  console.log('You are an adult');\n}\nint age = 15;\nSystem.out.println(\"Age: \" + age);\n\nif (age < 13) {\n  System.out.println(\"You are a child\");\n} else if (age < 20) {\n  System.out.println(\"You are a teenager\");\n} else {\n  System.out.println(\"You are an adult\");\n}\nint age = 15;\ncout << \"Age: \" + to_string(age) + \"\\\\n\";\n\nif (age < 13) {\n  cout << \"You are a child\";\n} else if (age < 20) {\n  cout << \"You are a teenager\";\n} else {\n  cout << \"You are an adult\";\n}\nRun Example \u00bb\nYou can only have one\nif\nstatement, and only one\nelse\nstatement, but you can have as many\nelse if\nstatements as you want.\nAlso, the\nif\nis always first, the\nelse\nis always last, and the\nelse if\nstatements are in between.\nNested If Statements\nA nested if statement is an if statement inside another if statement.\nNested if statements are useful in cases where you want to check a condition, only if another condition is true.\nage = 19\nprint('Age: ' + str(age))\n\nif age < 13:\n  print('You are a child')\nelif age < 20:\n  print('You are a teenager')\n  if age > 17:\n    print('and an adult!') \nelse:\n  print('You are an adult')\nconst age = 19;\nconsole.log('Age: ' + age);\n\nif (age < 13) {\n  console.log('You are a child');\n} else if (age < 20) {\n  console.log('You are a teenager');\n  if (age > 17) {\n    console.log('and an adult!');\n  } \n} else {\n  console.log('You are an adult');\n}\nint age = 19;\nSystem.out.println(\"Age: \" + age);\n\nif (age < 13) {\n  System.out.println(\"You are a child\");\n} else if (age < 20) {\n  System.out.println(\"You are a teenager\");\n  if (age > 17) {\n    System.out.println(\"and an adult!\");\n  } \n} else {\n  System.out.println(\"You are an adult\");\n}\nint age = 19;\ncout << \"Age: \" + to_string(age) + \"\\n\";\n\nif (age < 13) {\n  cout << \"You are a child\";\n} else if (age < 20) {\n  cout << \"You are a teenager\";\n  if (age > 17) {\n    cout << \"\\nand an adult!\";\n  } \n} else {\n  cout << \"You are an adult\";\n}\nRun Example \u00bb\nIn the code above, the nested if statement allows us to filter out the special case of ages 18 and 19, when you are both a teenager and an adult.\nage = {{age}}\nage < 13\ntrue\n'child'\nfalse\nfalse\nage < 20\ntrue\n'teen'\nage > 17\ntrue\n'and adult'\n'adult'\nAge\nIn the flowchart above, we can see that the code block for\nage > 17\nis only executed if the\nage\nis 18 or 19.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a71aff3e-9a22-41f9-98e1-a1dbb9c01bf9",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6fdaed4d-6524-47ce-800f-5ba8b581bb3f",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "06d6830f-4e4b-47da-9b56-463a8f588f2a",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "an If Statement",
        "None of the above.",
        "true",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'an If Statement'."
    },
    {
      "question": "What is An if statement runs a block of code if the condition?",
      "options": [
        "true",
        "an If Statement",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of An if statement runs a block of code if the condition is 'true'."
    }
  ],
  "summary": "This tutorial covers If Statementsin Programming concepts and techniques. You'll learn how to use If Statementsin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of If Statementsin Programming and how to apply it in your projects."
}