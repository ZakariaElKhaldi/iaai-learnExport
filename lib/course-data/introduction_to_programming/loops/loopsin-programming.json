{
  "id": "736c5b9c-f5e9-4d7f-9920-03fc01bd23c6",
  "title": "Loopsin Programming",
  "slug": "loopsin-programming",
  "metadata": {
    "description": "Learn about Loopsin Programming with clear explanations and practical examples.",
    "keywords": [
      "dice",
      "loop",
      "count",
      "myfruits",
      "code",
      "times",
      "random",
      "numexperiments",
      "console",
      "print"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 7,
    "category": "Introduction to Programming",
    "subcategory": "Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Loops\nin Programming",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Loops are used when we need to run the same code lines many times.\nWhat is a Loop?\nA loop runs the same code over and over again, as long as the condition is\ntrue\n.\nThe simulation below uses a loop to roll dice until the result is 6, counting how many times the dice was rolled.\nRolled {{diceCountDelayed}} times\n{{btnText}}\nThe loop continues to roll the dice until the result is 6, so the condition that ensures we roll the dice again is \"dice is not 6\".\nBelow is a flow chart explaining how the loop runs, together with the code:\nFlow chart\nCode\nstart\ndice = random(1,6)\ntrue\nfalse\nYou got 6!\nend\ndice != 6?\nCondition\ndice = random(1,6)\ncount += 1\nRepeated\ncode\ndice = random.randint(1,6)\nprint('You got 6!')\nwhile\nLoop type\ndice != 6:\nCondition\ndice = random.randint(1,6)\ncount += 1\nRepeated code\nNote:\n!=\nis a comparison operator, and it is the same as saying \"not equal to\".\nThe code example above uses a\nwhile\nloop.\nOther loop types are\nfor\n,\nfor-each\n, and\ndo-while\n.\nThe loop types are all similar and described in more detail below.\nWhile Loop\nA\nwhile\nloop is best to use when you don't know how many times the code should run.\nThe\nwhile\nloop is the most intuitive loop type because it resembles many things we do in our every day life:\nKeep walking (taking new steps) until you reach your destination.\nAs long as the pot is dirty, continue washing it.\nKeep filling the tank of the car until it is full.\nAs we saw in the example above, we cannot know how many times the code should run, because we don't know when the user will roll a 6, and that is why we use a\nwhile\nloop.\nBelow is the complete code for the dice rolling, written in different programming languages.\ndice = random.randint(1,6)\nprint(dice)\ncount = 1\n\nwhile dice != 6:\n  dice = random.randint(1,6)\n  print(dice)\n  count += 1\nprint('You got 6!')\nprint('You rolled',count,'times')\nlet dice = Math.ceil(Math.random()*6);\nconsole.log(dice);\nlet count = 1;\n\nwhile (dice != 6) {\n  dice = Math.ceil(Math.random()*6);\n  console.log(dice);\n  count += 1;\n}\n\nconsole.log('You got 6!');\nconsole.log('You rolled',count,'times');\nint dice = random.\nSystem.out.println(dice);\nint count = 1;\n\nwhile (dice != 6) {\n  dice = random.\n  System.out.println(dice);\n  count++;\n}\n\nSystem.out.println(\"You got 6!\");\nSystem.out.println(\"You rolled \" + count + \" times\");\nint dice = rand() % 6 + 1;\ncout << to_string(dice) + \"\\\\n\";\nint count = 1;\n\nwhile (dice != 6) {\n  dice = rand() % 6 + 1;\n  cout << to_string(dice) + \"\\\\n\";\n  count++;\n}\n\ncout << \"You got 6!\\\\n\";\ncout << \"You rolled \" + to_string(count) + \" times\\\\n\";\nRun Example \u00bb\nIf we know how many times the code should run, it usually makes sense to use a\nfor\nloop instead of a\nwhile\nloop.\nFor Loop\nA\nfor\nloop is best to use when you know how many times the code should run, and the most basic thing we can do with a\nfor\nloop is counting.\nTo count, a\nfor\nloop uses a\ncounting variable\nto keep track of how many times the code has run.\nThe counting variable in a\nfor\nloop is set up like this:\nStarting value.\nCondition using the counting variable, the for loop runs as long as the condition is true.\nDescription of how the counting variable should change each time the loop runs.\nfor (\nconsole.log(i);\n}\nconsole.log('Liftoff!');\nlet i = 10;\n1. Starting value\ni > 0;\n2. Condition\ni--) {\n3.Change of\ncounting\nvariable\nThe code example below simulates the launch of a space rocket. It counts down from 10 to 1, and then writes \"Liftoff!\", using a\nfor\nloop with a counting variable\ni\n.\nfor i in range(10, 0, -1):\n  print(i)\nprint('Liftoff!')\nfor (let i = 10; i > 0; i--) {\n  console.log(i);\n}\nconsole.log('Liftoff!');\nfor (int i = 10; i > 0; i--) {\n  System.out.println(i);\n}\nSystem.out.println(\"Liftoff!\");\nfor (int i = 10; i > 0; i--) {\n  cout << to_string(i) + \"\\n\";\n}\ncout << \"Liftoff!\\n\";\nRun Example \u00bb\nSuch for loops using a counting variable are written slightly different in Python, using the Python\nrange()\nfunction, but the idea is the same. You can read more about how for loops work in Python\nhere\n.\nNote:\nThe counting variable is often named\ni\n,\nj\n, or\nk\n. This keeps it short and makes it easier to read. These letters are also used in Mathematics, for similar things.\nFor-Each Loop\nGoing through a list of items, like an\narray\nfor example, using a\nfor\nloop without a counting variable, can be called \"iterating\", or \"using a for-each loop\".\nThis is how we use a for-each loop to iterate over the values in an array:\nmyFruits = ['banana','apple','orange']\n\nfor fruit in myFruits:\n  print(fruit)\nconst myFruits = ['banana','apple','orange'];\n\nfor (let fruit of myFruits) {\n  console.log(fruit);\n}\nString[] myFruits = {\"banana\", \"apple\", \"orange\"};\n\nfor (String fruit : myFruits) {\n  System.out.println(fruit);\n}\nstring myFruits[] = {\"banana\", \"apple\", \"orange\"};\n\nfor (auto fruit : myFruits) {\n  cout << fruit + \"\\n\";\n}\nRun Example \u00bb\nAnother way to iterate through an array is to use a\nfor\nloop with a counting variable for the indexes, like this:\nmyFruits = ['banana','apple','orange']\n\nfor i in range(len(myFruits)):\n  print(myFruits[i])\nconst myFruits = ['banana','apple','orange'];\n\nfor (let i = 0; i < myFruits.length; i++) {\n  console.log(myFruits[i]);\n}\nString[] myFruits = {\"banana\", \"apple\", \"orange\"};\n\nfor (int i = 0; i < myFruits.length; i++) {\n  System.out.println(myFruits[i]);\n}\nstring myFruits[] = {\"banana\", \"apple\", \"orange\"};\nint size = sizeof(myFruits)/sizeof(myFruits[0]);\n\nfor (int i = 0; i < size; i++) {\n  cout << myFruits[i] + \"\\n\";\n}\nRun Example \u00bb\nThe Do-While Loop\nA\ndo-while\nloop is just like a regular\nwhile\nloop, but the code inside the loop runs first, and the condition is checked after.\nThis means a\ndo-while\nloop is useful when you want to make sure the code inside the loop runs at least once.\nWe can take the first code example on this page that demonstrates how a regular\nwhile\nloop works (rolling dice untill you get a 6), and simplify it using a\ndo-while\nloop, like this:\ncount = 0\n\nwhile True:\n  dice = random.randint(1,6)\n  print(dice)\n  count += 1\n  if dice == 6:\n    break\n\nprint('You got 6!')\nprint('You rolled',count,'times')\nlet dice;\nlet count = 0;\n\ndo {\n  dice = Math.ceil(Math.random()*6);\n  console.log(dice);\n  count += 1;\n} while (dice != 6);\n\nconsole.log('You got 6!');\nconsole.log('You rolled',count,'times');\nint dice;\nint count = 0;\n\ndo {\n  dice = random.\n  System.out.println(dice);\n  count++;\n} while (dice != 6);\n\nSystem.out.println(\"You got 6!\");\nSystem.out.println(\"You rolled \" + count + \" times\");\nint dice;\nint count = 0;\n\ndo {\n  dice = rand() % 6 + 1;\n  cout << to_string(dice) + \"\\n\";\n  count++;\n} while (dice != 6);\n\ncout << \"You got 6!\\n\";\ncout << \"You rolled \" + to_string(count) + \" times\\n\";\nRun Example \u00bb\nA\ndo-while\nfits better for this purpose, because we roll the dice first, and then check if we got a 6, right?\nNote:\nPython actually does not have a do-while loop, but it can be simulated as you can see in the code example above, using a while loop with an if to break out of the loop when the dice is 6.\nNested Loops\nA nested loop is a loop inside another loop.\nThis is how we can use a nested loop (while loop inside a for loop) to calculate the average number of rolls it takes to get a 6:\nnumExperiments = 1000\ntotalRolls = 0\n\nfor i in range(numExperiments):\n  count = 0\n  while True:\n    dice = random.randint(1,6)\n    count += 1\n    if dice == 6:\n      break\n  totalRolls += count\n\nprint('Doing',numExperiments,'experiments')\nprint('Average rolls to get 6:',totalRolls/numExperiments)\nlet numExperiments = 1000;\nlet totalRolls = 0;\n\nfor (let i = 0; i < numExperiments; i++) {\n  let count = 0;\n  while (true) {\n    let dice = Math.floor(Math.random() * 6) + 1;\n    count++;\n    if (dice === 6) {\n      break;\n    }\n  }\n  totalRolls += count;\n}\n\nconsole.log('Doing ' + numExperiments + ' experiments');\nconsole.log('Average rolls to get 6:', totalRolls / numExperiments);\nint numExperiments = 1000;\nint totalRolls = 0;\n\nfor (int i = 0; i < numExperiments; i++) {\n  int count = 0;\n  while (true) {\n    int dice = random.\n    count++;\n    if (dice == 6) {\n      break;\n    }\n  }\n  totalRolls += count;\n}\nSystem.out.println(\"Doing \" + numExperiments + \" experiments\");\ndouble average = (double) totalRolls / numExperiments;\nSystem.out.println(\"Average rolls to get 6: \" + average);\nint numExperiments = 1000;\nint totalRolls = 0;\n\nfor (int i = 0; i < numExperiments; i++) {\n  int count = 0;\n  while (true) {\n    int dice = rand() % 6 + 1;\n    count++;\n    if (dice == 6) {\n      break;\n    }\n  }\n  totalRolls += count;\n}\ncout << \"Doing \" + to_string(numExperiments) + \" experiments\\n\";\ndouble average = static_cast(totalRolls) / numExperiments;\ncout << \"Average rolls to get 6: \" + to_string(average) + \"\\n\";\nRun Example \u00bb\nNotice how the\nbreak\nstatement is used to break out of the inner loop when a 6 is rolled, but the outer loop continues to run.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7b1c71b5-8421-4b8b-9c3d-f4c5141a20ae",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "85fb79b9-15c2-453b-b608-7f5455de9942",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c639f3e6-e659-4e85-9678-58f2435a6bd2",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Loops\nin Programming\n\nLoops?",
      "options": [
        "None of the above.",
        "used when we need to run the same code lines many times",
        "None of the above.",
        "a Loop"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Loops\nin Programming\n\nLoops is 'used when we need to run the same code lines many times'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "used when we need to run the same code lines many times",
        "a Loop",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is 'a Loop'."
    }
  ],
  "summary": "This tutorial covers Loopsin Programming concepts and techniques. You'll learn how to use Loopsin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Loopsin Programming and how to apply it in your projects."
}