{
  "id": "66f5af78-649c-4745-9678-631db8fe30c5",
  "title": "Functionsin Programming",
  "slug": "functionsin-programming",
  "metadata": {
    "description": "Learn about Functionsin Programming with clear explanations and practical examples.",
    "keywords": [
      "converttocelsius",
      "function",
      "celsius",
      "fahrenheit",
      "return",
      "code",
      "double",
      "functions",
      "print",
      "console"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "Introduction to Programming",
    "subcategory": "Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Functions\nin Programming",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Functions are used to structure your code in a better way, so that your code becomes easier to read and to use.\nFunctions makes it possible to re-use the same code many times, which is a huge benefit.\nWhat is a Function?\nA function holds a piece of code that does a specific task.\nA function takes some data as input, the code inside the function does something with the data, and then the result is returned.\nClick the \"Run\" button below to see the function converting a temperature from Fahrenheit to Celsius.\n{{tmpMov}}\nfunction\ncode\n{{tmpVal}}\n\u00b0F\ninput\n\u00b0C\nreturn\nRun\nBelow is how the Python code looks like for the\nconvertToCelsius\nfunction:\ndef\nDefines the\nfunction\nconvertToCelsius(\nFunction\nname\nfahrenheit):\nInput\ncelsius = (fahrenheit - 32) * 5 / 9\nreturn\nCode inside\nfunction\ncelsius\nReturn\nvalue\nThe function above takes a temperature in Fahrenheit as input, converts it into Celsius, and returns the Celsius value as output.\nNote:\nFunctions can have different shapes and forms. Input and return are optional for example, but functions as explained here are how they usually appear, and how we normally think of them.\nWhen Should I Use a Function?\nIf a part of your program does a specific task, you should create a function for it.\nIt is especially useful to create a function if you need to run that code more than once, and from different parts of your program.\nCreating a Function\nBefore using a function, you need to create it.\nRecipe for creating a function:\nName the function.\nDefine the input.\nWrite the code inside the function, what you want the function to do.\nDefine the return value.\nCreating our\nconvertToCelsius\nfunction looks like this:\ndef convertToCelsius(fahrenheit):\n  celsius = (fahrenheit - 32) * 5 / 9\n  return celsius\nfunction convertToCelsius(fahrenheit) {\n  const celsius = (fahrenheit - 32) * 5 / 9;\n  return celsius;\n}\npublic static double convertToCelsius(double fahrenheit) {\n  double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n  return celsius;\n}\ndouble convertToCelsius(double fahrenheit) {\n  double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n  return celsius;\n}\nOur function is named\nconvertToCelsius\n. It takes\nfahrenheit\nas input, and returns\ncelsius\n.\nBut to make the function run, we need to call it.\nCalling a Function\nTo call a function you write its name together with the input, and that makes the function run.\nAfter creating the\nconvertToCelsius\nfunction, we can call it, converting 100\u00b0F into Celsius like this:\ndef convertToCelsius(fahrenheit):\n  celsius = (fahrenheit - 32) * 5 / 9\n  return celsius\n\nprint(convertToCelsius(100))\nfunction convertToCelsius(fahrenheit) {\n  const celsius = (fahrenheit - 32) * 5 / 9;\n  return celsius;\n}\n\nconsole.log(convertToCelsius(100));\npublic class Main {\n  public static double convertToCelsius(double fahrenheit) {\n    double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n    return celsius;\n  }\n\npublic static void main(String[] args) {\n    System.out.println(convertToCelsius(100));\n  }\n}\ndouble convertToCelsius(double fahrenheit) {\n  double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n  return celsius;\n}\n\nint main() {\n  cout << to_string(convertToCelsius(100)) + \"\\n\";\n\nreturn 0;\n}\nRun Example \u00bb\nRunning the example above, you can see we use\nprint\nstatements to see the result of the function call (the return value).\nImagine we have many temperature measurements we need to convert from Fahrenheit to Celsius.\nNow that we have created the\nconvertToCelsius\nfunction, we can just call that same function over and over again for each temperature in Fahrenheit we want to convert.\ndef convertToCelsius(fahrenheit):\n  celsius = (fahrenheit - 32) * 5 / 9 \n  return celsius\n\nprint('Fahrenheit values 0, 20, 40, 60, 80, 100')\nprint('converted to Celsius:\\n')\n\nprint(convertToCelsius(0))\nprint(convertToCelsius(20))\nprint(convertToCelsius(40))\nprint(convertToCelsius(60))\nprint(convertToCelsius(80))\nprint(convertToCelsius(100))\nfunction convertToCelsius(fahrenheit) {\n  const celsius = (fahrenheit - 32) * 5 / 9;\n  return celsius;\n}\n\nconsole.log('Fahrenheit values 0, 20, 40, 60, 80, 100');\nconsole.log('converted to Celsius:\\n');\n\nconsole.log(convertToCelsius(0));\nconsole.log(convertToCelsius(20));\nconsole.log(convertToCelsius(40));\nconsole.log(convertToCelsius(60));\nconsole.log(convertToCelsius(80));\nconsole.log(convertToCelsius(100));\npublic static double convertToCelsius(double fahrenheit) {\n  double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n  return celsius;\n}\n\npublic static void main(String[] args) {\n  System.out.println(\"Fahrenheit values 0, 20, 40, 60, 80, 100\");\n  System.out.println(\"converted to Celsius:\\n\");\n\nSystem.out.println(convertToCelsius(0));\n  System.out.println(convertToCelsius(20));\n  System.out.println(convertToCelsius(40));\n  System.out.println(convertToCelsius(60));\n  System.out.println(convertToCelsius(80));\n  System.out.println(convertToCelsius(100));\n}\ndouble convertToCelsius(double fahrenheit) {\n  double celsius = (fahrenheit - 32) * 5.0 / 9.0;\n  return celsius;\n}\n\nint main() {\n  cout << \"Fahrenheit values 0, 20, 40, 60, 80, 100\\n\";\n  cout << \"converted to Celsius:\\n\\n\";\n\ncout\n  << to_string(convertToCelsius(0)) + \"\\n\"\n  << to_string(convertToCelsius(20)) + \"\\n\"\n  << to_string(convertToCelsius(40)) + \"\\n\"\n  << to_string(convertToCelsius(60)) + \"\\n\"\n  << to_string(convertToCelsius(80)) + \"\\n\"\n  << to_string(convertToCelsius(100)) + \"\\n\";\n\nreturn 0;\n}\nRun Example \u00bb\nAs you can see, functions can be called many times, and after making a function, we can use it knowing\nwhat\nit does, without having to understand\nhow\nit does it.\nThe Benefits of Using Functions\nThe more programming you do, and the longer your programs get, the benefits from using functions become more and more obvious.\nThe benefits we get from wrapping code that does a specific task into a function are many.\nReusability:\nWrite the code once, and reuse it as many times as you like, from different parts of your program. This saves time and effort, and you avoid repetition.\nSimpler programs:\nFunctions make it easier to break down complex problems into smaller, more manageable pieces. This way of solving a problem is called\ndivide and conquer\n.\nReadability:\nCreating functions for tasks, with names describing what the functions do, makes it easier to understand the code by reading it.\nIt is easier to understand what this line of code does:\nconvertToCelsius(60)\nthan this:\n(60 - 32) * 5 / 9\nFixing errors:\nIf there is something wrong with the code inside the function, we only need to change the code in one place, so the code becomes easier to maintain. Alternatively, without using a function, the code with the error in it would perhaps be repeated many times in many places, making the error harder to fix.\nCollaboration:\nPeople can work together more easily when splitting the problem into functions that can be written separately. Functions create clear boundaries between parts of the program.\nTesting:\nFunctions can be tested independently to ensure they work correctly.\nScalability:\nFunctions make it easier to expand and add new features to your programs.\nAbstraction:\nAllows you to hide complex details and focus on what the function does instead of how it works.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "870c2d85-cca1-45a2-9735-2239631b9392",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "7613b965-f24b-4ad7-8d2a-4eddb2bb1fb0",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "9ef4a1cf-9d09-48f6-8fd3-16bd0bb9c678",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Functions\nin Programming\n\nFunctions?",
      "options": [
        "a huge benefit",
        "used to structure your code in a better way",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Functions\nin Programming\n\nFunctions is 'used to structure your code in a better way'."
    },
    {
      "question": "What is which?",
      "options": [
        "a huge benefit",
        "used to structure your code in a better way",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'a huge benefit'."
    }
  ],
  "summary": "This tutorial covers Functionsin Programming concepts and techniques. You'll learn how to use Functionsin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Functionsin Programming and how to apply it in your projects."
}