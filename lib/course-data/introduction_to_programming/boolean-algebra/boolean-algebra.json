{
  "id": "7fbb7844-a1e9-4023-b348-baddfb5f8bab",
  "title": "Boolean Algebra",
  "slug": "boolean-algebra",
  "metadata": {
    "description": "Learn about Boolean Algebra with clear explanations and practical examples.",
    "keywords": [
      "cdot",
      "boolean",
      "algebra",
      "overline",
      "true",
      "logic",
      "false",
      "using",
      "written",
      "aligned"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 11,
    "category": "Introduction to Programming",
    "subcategory": "Boolean Algebra"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Boolean Algebra",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Boolean algebra is math that deals with operations on Boolean values.\n\"Boolean\" is written with an upper case first letter because it's named after a person: George Boole (1815-1864), who developed this algebra of logic.\nWhat is Boolean Algebra?\nBoolean algebra is the study of what happens when logic operations (AND, OR, NOT) are used on Boolean values (either\ntrue\nor\nfalse\n).\nBoolean algebra helps us understand how computers and digital electronics work, and how to simplify logic expressions.\nCheck out our page about\nlogical operators\nto see how logic operations AND, OR, and NOT are used in programming.\nDifferent Representations of Boolean Algebra\nBoolean algebra can be expressed in different ways, depending on the context.\nBelow are how the logic operations AND, OR, and NOT can be represented in math, and in programming:\nLogic Operation\nMath\nProgramming\nA AND B\n\\(A \\cdot B\\)\nA && B\nA OR B\n\\(A + B\\)\nA || B\nNOT A\n\\(\\overline{A}\\)\n!A\nMost of this page is dedicated to Boolean algebra as math, but there are some programming examples in between, and an explanation of\nlogic gates\nfurther down.\nSee our page about\nlogical operators\nto see more about how these operators are programmed.\nAND, OR, and NOT\nBefore we start looking at Boolean algebra, we need to be sure how the AND, OR, and NOT operations work.\nNote:\nIn Boolean algebra, we use 1 instead of\ntrue\nand 0 instead of\nfalse\n.\nAND\ntakes two Boolean values. The result is only\ntrue\nif both values are\ntrue\n, otherwise it is\nfalse\n.\nA\nB\nA\nAND\nB\n1\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\nOR\ntakes two Boolean values, and is\ntrue\nif at least one of the values is\ntrue\n, otherwise it is\nfalse\n.\nA\nB\nA\nOR\nB\n1\n1\n1\n1\n0\n1\n0\n1\n1\n0\n0\n0\nNOT\ntakes one Boolean value, and makes it the opposite. If the value is\nfalse\n, the NOT operation on that value will return\ntrue\n, and if the value is\ntrue\n, the NOT operation on that value will return\nfalse\n.\nA\nNOT\nA\n1\n0\n0\n1\nDoing the NOT operation \"NOT A\", we often say \"the complement of A\", \"A bar\" (written as \\(\\overline{A}\\)), \"A negated\", \"A prime\" (written as \\(A'\\)), or simply \"NOT A\".\nWriting Boolean Algebra\nThese are the components used to write Boolean algebra:\ntrue\nis written as \\(1\\)\nfalse\nis written as \\(0\\)\nAND is written using multiplication symbol (\\(\\cdot\\))\nOR is written using addition symbol (\\(+\\))\nNOT is written using overline (\\(\\overline{A}\\))\nAND, OR, and NOT can also be written using symbols \\(\\wedge\\), \\(\\vee\\), and \\(\\neg\\), but we will use the symbols stated in the list above.\nBasic Boolean Algebra Examples\nCalculating\ntrue\nAND\nfalse\nusing Boolean algebra looks like this:\n\\[1 \\cdot 0 = 0 \\]\nThe calculation tells us: \"\ntrue\nANDed with\nfalse\nis\nfalse\n\".\nUsing math syntax, Boolean algebra can be written in a very compact way.\nDoing the same AND operation using programming looks like this:\nprint(True and False)\nconsole.log(true && false);\nSystem.out.println(true && false);\ncout << (true && false);\nRun Example \u00bb\nThe calculation \"NOT\ntrue\n\", using overline, looks like this:\n\\[ \\overline{1} = 0 \\]\nThe calculation tells us: \"NOT\ntrue\nresults in\nfalse\n\".\nUsing OR looks like this:\n\\[ 1 + 0 = 1 \\]\nThe calculation tells us: \"\ntrue\nORed with\nfalse\nis\ntrue\n\".\nCan you guess this one?\n\\[ 1 + 1 = \\text{ ?} \\]\nThe answer will hopefully not upset you, because remember: we are not doing normal math here. We are doing Boolean algebra.\nWe get\n\\[ 1 + 1 = 1 \\]\nWhich just means that \"\ntrue\nORed with\ntrue\nresults in\ntrue\n\".\nThe Order of Operations\nLike there are rules for what operations we do first in normal math, there is also an order of operations for Boolean algebra.\nBefore going on to more complex Boolean algebra, we need to know the order of operations.\nParentheses\nNOT\nAND\nOR\nFor example, in this expression:\n\\[ 1 + 0 \\cdot 0 \\]\nThe correct order is to do AND first, so \\(0 \\cdot 0\\), the initial expression is reduced to:\n\\[ 1 + 0 \\]\nWhich is \\(1\\) (\ntrue\n).\nSo solving the expression in the correct order:\n\\[\n\\begin{aligned}\n1 + 0 \\cdot 0 &= 1 + 0 \\\\[8pt]\n&= 1\n\\end{aligned}\n\\]\nSolving this expression with the wrong order, doing OR before AND, would result in \\(0\\) (\nfalse\n) as the answer, so keeping to the correct order of operations is important.\nBoolean Algebra with Variables\nAfter establishing the basic concepts of Boolean algebra, we can finally start seeing more useful and interesting results.\nBoolean variables are usually written in uppercase, like \\(A\\), \\(B\\), \\(C\\), etc.\nWe need to think about a Boolean variable as unknown, but it is either\ntrue\nor\nfalse\n.\nBelow are some basic Boolean algebra results we get, using variables:\n\\[\n\\begin{aligned}\nA + 0     &= A \\\\[8pt]\nA + 1     &= 1 \\\\[8pt]\nA + A     &= A \\\\[8pt]\nA + \\overline{A} &= 1 \\\\[8pt]\nA \\cdot 0 &= 0 \\\\[8pt]\nA \\cdot 1 &= A \\\\[8pt]\nA \\cdot A &= A \\\\[8pt]\nA \\cdot \\overline{A} &= 0 \\\\[8pt]\n\\overline{\\overline{A}} &= A \\\\[8pt]\n\\end{aligned}\n\\]\nThe results above are simple, but important. You should go through them one by one and make sure you understand them. (You can replace variable \\(A\\) with \\(1\\), see if it's correct, and then replace \\(A\\) with \\(0\\), and see if it's still correct.)\nSimplifying Code Using Boolean Algebra\nThe rules above can be used to simplify code.\nLet's look at a code example, where a condition is checked to see if a person can borrow a book from the university library.\nif is_student and (age < 18 or age >= 18):\n  print(\"You can borrow a book from the university library\")\nif (is_student && (age < 18 || age >= 18)) {\n  console.log(\"You can borrow a book from the university library\");\n}\nif (is_student && (age < 18 || age >= 18)) {\n  System.out.println(\"You can borrow a book from the university library\");\n}\nif (is_student && (age < 18 || age >= 18)) {\n  cout << \"You can borrow a book from the university library\";\n}\nRun Example \u00bb\nThe condition in the if statement above\n\\[ is\\_student \\text{ AND } (age \\lt 18 \\text{ OR } age \\geq 18) \\]\ncan be written using Boolean algebra, like this:\n\\[ is\\_student \\cdot (under18 + \\overline{under18}) \\]\nOr:\n\\[ A \\cdot (B + \\overline{B}) \\]\nFrom the list of Boolean algebra results above, we see that\n\\[B + \\overline{B} = 1\\]\n(We know this rule from the list of Boolean algebra results in the \nSo the condition in the if statement can be simplified:\n\\[ \n\\begin{aligned}\n&is\\_student \\cdot (under18 + \\overline{under18}) \\\\[8pt]\n&= is\\_student \\cdot (1) \\\\[8pt]\n&= is\\_student\n\\end{aligned}\n\\]\nThe result is that we don't have to check the age at all to see if the person can borrow a book from the university library, we just need to check if they are a student.\nThe condition is simplified:\nif is_student:\n  print(\"You can borrow a book from the university library\")\nif (is_student) {\n  console.log(\"You can borrow a book from the university library\");\n}\nif (is_student) {\n  System.out.println(\"You can borrow a book from the university library\");\n}\nif (is_student) {\n  cout << \"You can borrow a book from the university library\";\n}\nRun Example \u00bb\nSo checking the student ID is enough, no need to check their age to see if they are allowed to borrow a book.\nYou might be able to see how the condition can be simplified without the use of Boolean algebra, but in more complex expressions, Boolean algebra can be very useful.\nBoolean Algebra Laws\nIn addition to the basic Boolean algebra laws listed in the \nThe\ncommutative law\njust shows us that the order of the variables does not matter.\n\\[ A \\cdot B = B \\cdot A \\]\n\\[ A + B = B + A \\]\nThe\ndistributive law\ntells us that we can distribute the AND operation over the OR operation.\n\\[ A \\cdot (B + C) = A \\cdot B + A \\cdot C \\]\n\\[ A + B \\cdot C = (A + B) \\cdot (A + C) \\]\nThe first law above is quite straightforward and similar to the distributive law in normal algebra.\nBut the second law aboveis not that obvious, so let's see how we can arrive at the same result, starting with the right hand side:\n\\[\n\\begin{aligned}\n&(A + B) \\cdot (A + C)  \\\\[8pt]\n&= A \\cdot A + A \\cdot C + B \\cdot A + B \\cdot C \\\\[8pt]\n&= A + A \\cdot C + A \\cdot B + B \\cdot C \\\\[8pt]\n&= A \\cdot (1 + C + B) + B \\cdot C \\\\[8pt]\n&= A \\cdot 1 + B \\cdot C \\\\[8pt]\n&= A + B \\cdot C\n\\end{aligned}\n\\]\nThe\nassociative law\ntells us that we can group the variables in different ways, without changing the result.\n\\[ (A \\cdot B) \\cdot C = A \\cdot (B \\cdot C) \\]\n\\[ (A + B) + C = A + (B + C) \\]\nDe Morgan's Laws\nDe Morgan's laws are two widely used and recognized laws in Boolean algebra.\nDe Morgan's first law.\nThe complement of a product is the same as taking the sum of the complements.\n\\[ \\overline{A \\cdot B} = \\overline{A} + \\overline{B} \\]\nThe word\ncomplement\nis used in Boolean algebra meaning the opposite, to\nnegate\nsomething, or using the NOT operator. The complement of \\(A\\) is written as \\(\\overline{A}\\).\nBelow is an an example of how a condition can be re-written and work exactly the same way, using De Morgan's first law.\nLet's say a tank in a production process is safe if both the temperature and pressure in it are below certain limits.\n\\[ tmp < 100 \\text{ AND } press < 20 = \\text{Safe} \\]\nIn the oposite case, the tank is not safe, and we should sound the alarm.\n\\[ \\overline{tmp < 100 \\text{ AND } press < 20} = \\text{Alarm} \\]\nUsing De Morgan's first law, we can rewrite the expression:\n\\[\n\\begin{aligned}\n&\\overline{tmp < 100 \\text{ AND } press < 20} \\\\[8pt] \n&= \\overline{tmp < 100} \\text{ OR } \\overline{press < 20} \\\\[8pt]\n&= tmp &geq; 100 \\text{ OR } press &geq; 20\n\\end{aligned}\n\\]\nThe result we have arrived at here is both easier to understand, and to program, and since we've used De Morgan's first law correctly, we can be sure that the condition will work the same way as the original.\nDe Morgan's second law.\nThe complement of a sum is the same as taking the product of the complements.\n\\[ \\overline{A + B} = \\overline{A} \\cdot \\overline{B} \\]\nFor example, if you say\n\"I do not have dogs or cats\"\n\\[ \\overline{haveDogs + haveCats} \\]\nYou might as well say\n\"I do not have dogs and I do not have cats\"\n\\[ \\overline{haveDogs} \\cdot \\overline{haveCats} \\]\nThose two statements are the same, and they follow De Morgan's second law.\nSimplifying a Complex Expression Using Boolean Algebra\nImagine a security system with sensors to detect open windows and doors, and sensors for motion detection.\nopen window \\(W\\)\nopen door \\(D\\)\nmotion detected in kitcken \\(M_K\\)\nmotion detected in living room \\(M_L\\)\nKitchen\nLiving Room\nW\nD\nM\nK\nM\nL\nThese are all the different conditions, or scenarios, that should trigger the alarm:\nMotion detected in living room AND window is open (\\(M_L \\cdot W\\))\nMotion detected in living room AND door is open (\\(M_L \\cdot D\\))\nMotion detected in kitchen AND window is open (\\(M_K \\cdot W\\))\nMotion detected in kitchen AND door is open (\\(M_K \\cdot D\\))\nUsing Boolean algebra, when this expression is\ntrue\n, the alarm will sound:\n\\[ (M_L \\cdot W) + (M_L \\cdot D) + (M_K \\cdot W) + (M_K \\cdot D) \\]\nPerhaps you see how this could be simplified right away? But even if you do see it, how can you be sure that the simiplified expression works the same way as the original?\nLet's use Boolean algebra to simplify the expression:\n\\[ \n  \\begin{aligned}\n  &(M_L \\cdot W) + (M_L \\cdot D) + (M_K \\cdot W) + (M_K \\cdot D) \\\\[8pt] \n  &= M_L \\cdot W + M_L \\cdot D + M_K \\cdot W + M_K \\cdot D \\\\[8pt]\n  &= M_L \\cdot (W + D) + M_K \\cdot (W + D) \\\\[8pt]\n  &= (M_L + M_K) \\cdot (W + D) \\\\[8pt]\n  \\end{aligned}\n  \\]\nUsing Boolean algebra, we have simplified the expression.\nThe alarm will sound if motion is detected in the living room or kitchen, if at the same time the window or door is open.\nLogic Gates\nA logic gate is an electronic device made of transistors that implements a logical operation (Boolean function) AND, OR, or NOT. Other common logic gates are NAND, NOR, XOR, and XNOR.\nTry the simulation below to see for yourself how the different logic gates work.\nClick on inputs A and B below to toggle them between 0 and 1, and click on the gate to cycle through the different logic gates.\n{{logicGates[currentGateIndex].name}}\n{{ logicGates[currentGateIndex].compute(inputA, inputB) ? '1' : '0' }}\nB\n{{ inputB }}\nA\n{{ inputA }}\nLogic gates are used everywhere in computers and electronic devices: headsets, cars, mobile phones, SSD, RAM, CPU, etc.\nBelow is an overview of the most common logic gates.\nLogic Operation\nLogic Gate\nMath\nAND\nA\nB\n\\(A \\cdot B\\)\nOR\nA\nB\n\\(A + B\\)\nNOT\nA\n\\(\\overline{A}\\)\nNAND\nA\nB\n\\(\\overline{A \\cdot B}\\)\nNOR\nA\nB\n\\(\\overline{A + B}\\)\nXOR\nA\nB\n\\(A \\oplus B\\) \u00a0\n    \\(= A\\cdot\\overline{B} + \\overline{A}\\cdot B \\)\nXNOR\nA\nB\n\\(\\overline{A \\oplus B}\\) \u00a0\n    \\(= A\\cdot B + \\overline{A}\\cdot\\overline{B} \\)\nThe logic gates for AND, OR, and NOT are the basic logic gates, and works just like described in the \nThe logic gates for NAND and NOR are just the opposite of AND and OR, so they will not be described any further here.\nBut the logic gates for XOR and XNOR are a bit more special.\nThe XOR gate\nchecks if the inputs are different \\(A \\neq B\\), and outputs 1 if they are. XOR is like the running\nA != B\nin programming.\nThe XNOR gate\nchecks if the inputs are equal \\(A = B\\), and outputs 1 if they are. XNOR is like the running\nA == B\nin programming.\nThe truth tables for XOR and XNOR look like this:\nA\nB\nA\nXOR\nB\n1\n1\n0\n1\n0\n1\n0\n1\n1\n0\n0\n0\nA\nB\nA\nXNOR\nB\n1\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n1\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a8342727-e411-45bd-aac9-c1c28647997c",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "95a2ca71-0c36-428a-9c56-d7e620e4fa7c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3af25680-f1fe-470a-adad-830dc61f61b0",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Boolean Algebra\n\nBoolean algebra?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Not a Boolean Algebra\n\nBoolean algebra.",
        "math that deals with operations on Boolean values"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Boolean Algebra\n\nBoolean algebra is 'math that deals with operations on Boolean values'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Boolean Algebra concepts and techniques. You'll learn how to use Boolean Algebra effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Boolean Algebra and how to apply it in your projects."
}