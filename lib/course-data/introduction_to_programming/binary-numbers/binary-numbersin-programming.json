{
  "id": "b7b7c851-c060-46e8-a142-740be9f8f4d0",
  "title": "Binary Numbersin Programming",
  "slug": "binary-numbersin-programming",
  "metadata": {
    "description": "Learn about Binary Numbersin Programming with clear explanations and practical examples.",
    "keywords": [
      "binary",
      "decimal",
      "numbers",
      "number",
      "digit",
      "cdot",
      "underline",
      "counting",
      "digits",
      "system"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 7,
    "category": "Introduction to Programming",
    "subcategory": "Binary Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Binary Numbers\nin Programming",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Binary numbers are numbers with only two possible values for each digit: 0 and 1.\nWhat is a Binary Number?\nA binary number can only have digits with values\n0\nor\n1\n.\nPress the buttons below to see how counting in binary numbers works:\nBinary\n{{ aValueBinary }}\nDecimal\n{{ aValue }}\nCount up\nReset\nCount down\nIt is important to understand binary numbers because they are the basis of all digital data, since computers can only store data in binary form, using\nbits and bytes\n.\nThe binary number\n01000001\nfor example, stored in the computer, could be either the letter\nA\nor the decimal number\n65\ndepending on the\ndata type\n, how the computer interprets the data.\nThe term\ndecimal\ncomes from the Latin 'decem', meaning 'ten', because this number system (our normal everyday numbers) is based on ten digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9, to represent values.\nIn a similar way, the term\nbinary\ncomes from the Latin 'bi', meaning 'two', because this number system uses only two digits: 0 and 1, to represent values.\nCounting in Decimal Numbers\nTo better understand counting with binary numbers, it's a good idea to first understand the numbers we are used to: decimal numbers.\nThe decimal system has 10 different digits to choose from (0,..,9).\nWe start counting at the lowest value:\n0\n.\nCounting upwards from\n0\nlooks like this:\n1, 2, 3, 4, 5, 6, 7, 8, 9\n.\nAfter counting up to\n9\n, we have used up all the different digits available to us in the decimal system, so we need to add a new digit\n1\nto the left, and we reset the rightmost digit to\n0\n, we get\n10\n.\nA similar thing happens at\n99\n. To count further, we need to add a new digit\n1\nto the left, and we reset the existing digits to\n0\n, we get\n100\n.\nCounting upwards, every time all possible combinations of digits have been used, we must add a new digit to continue counting. This is also true for counting using binary numbers.\nCounting in Binary\nCounting in binary is very similar to counting in decimal, but instead of using 10 different digits, we only have two possible digits:\n0\nand\n1\n.\nWe start counting in binary:\n0\nThe \n1\nSo far, so good, right?\nBut now we have already used up all the different digits available to us in the binary system, so we need to add a new digit\n1\nto the left, and we reset the rightmost digit to\n0\n, we get\n10\n.\nWe continue counting:\n10\n11\nIt happened again! We have used up all the possible combinations of values, so we need to add another new digit\n1\nto the left, and reset the existing digits to\n0\n, we get\n100\n.\nThis is similar to what happens in decimal when we count from\n99\nto\n100\n.\nUsing a third digit, we continue:\n100\n101\n110\n111\nAnd now we have used up all the different digits again, so we need to add yet another digit\n1\nto the left, and reset the existing digits to\n0\n, we get\n1000\n.\nUsing the new fourth digit, we can continue counting:\n1000\n1001\n...\n..\nAnd so on.\nUnderstanding binary numbers becomes a lot easier if you're able to see the similarities between counting in binary and counting in decimal.\nConverting Decimal to Decimal\nTo understand how binary numbers are converted to decimal numbers, it's a good idea to first see how decimal numbers get their value in the base 10 decimal system.\nThe decimal number\n374\nhas\n3\nhundreds,\n7\ntens, and\n4\nones, right?\nWe can write this as:\n\\[\n\\begin{equation}\n\\begin{aligned}\n374 {} & = 3 \\cdot \\underline{10^2} + 7 \\cdot \\underline{10^1} + 4 \\cdot \\underline{10^0} \\\\[8pt]\n           & = 3 \\cdot \\underline{100} + 7 \\cdot \\underline{10} + 4 \\cdot \\underline{1} \\\\[8pt]\n           & = 300 + 70 + 4 \\\\[8pt]\n           & = 374\n\\end{aligned}\n\\end{equation}\n\\]\nThe math above helps us better understand how binary numbers are converted to decimal numbers.\nNotice how \\(10\\) appears three times in the first line of calculation?\n\\[ 374 = 3 \\cdot \\underline{10}^2 + 7 \\cdot \\underline{10}^1 + 4 \\cdot \\underline{10}^0 \\]\nThat is because \\(10\\) is the basis of the decimal number system. Each decimal digit is a multiple of \\(10\\), and that is why it is called a\nbase 10 number system\n.\nConverting Binary to Decimal\nWhen converting from binary to decimal, we multiply the digits by powers of\n2\n(instead of powers of\n10\n).\nLet's convert the binary number\n101\nto decimal:\n\\[\n\\begin{equation}\n\\begin{aligned}\n101 {} & = 1 \\cdot \\underline{2^2} + 0 \\cdot \\underline{2^1} + 1 \\cdot \\underline{2^0} \\\\[8pt]\n           & = 1 \\cdot \\underline{4} + 0 \\cdot \\underline{2} + 1 \\cdot \\underline{1} \\\\[8pt]\n           & = 4 + 0 + 1 \\\\[8pt]\n           & = 5\n\\end{aligned}\n\\end{equation}\n\\]\nIn the first line of calculation, each binary digit gets multiplied by 2 in the power of the digit's position.\nThe first position is 0, starting from the rightmost digit. So for example, the leftmost digit is multiplied by \\(2^2\\) since the leftmost digit's position is 2.\nThe fact that each binary digit is a multiple of 2 is why it is called a\nbase 2 number system\n.\nThe calculation above shows that the binary number\n101\nis equal to the decimal number\n5\n.\nClick the individual binary digits below to see how other binary numbers are converted to decimal numbers:\nBinary\nDecimal\n{{ bit }}\n{{ aValueDecimal }}\nCalculation\n{{aValueBinary}}\n=\n=\n=\n=\nThe further a binary digit is to the left, the more it is multiplied by, and that is why the leftmost binary digit is called the\nmost significant bit\n.\nSimilarly, the rightmost digit is called the\nleast significant bit\n, because it is just multiplied by \\(2^0 = 1\\).\nLet's convert another binary number\n110101\nto decimal, just to get the hang of it:\n\\[\n  \\begin{equation}\n  \\begin{aligned}\n  110101 {} & = 1 \\cdot 2^5 + 1 \\cdot 2^4 + 0 \\cdot 2^3 + 1 \\cdot 2^2 + 0 \\cdot 2^1 + 1 \\cdot 2^0 \\\\[8pt]\n            & = 32 + 16 + 0 + 4 + 0 + 1 \\\\[8pt]\n            & = 53\n  \\end{aligned}\n  \\end{equation}\n  \\]\nAs you can see, each binary digit is a multiple of 2, 2 in the power of the digit's position.\nConverting Decimal to Binary\nTo convert a decimal number to a binary number, we can divide by 2, repeatedly, while keeping track of the remainders.\nLet's convert\n13\nto binary:\n\\[\n\\begin{aligned}\n13 \\div 2 &= 6,\\ \\text{remainder } \\underline{1} \\\\[8pt]\n6 \\div 2  &= 3,\\ \\text{remainder } \\underline{0} \\\\[8pt]\n3 \\div 2  &= 1,\\ \\text{remainder } \\underline{1} \\\\[8pt]\n1 \\div 2  &= 0,\\ \\text{remainder } \\underline{1}\n\\end{aligned}\n\\]\nReading the remainders from bottom to top, we get\n1101\n, which is the binary representation of\n13\n.\nClick the individual decimal digits below to see how a decimal number is converted to a binary number:\nDecimal\nBinary\n{{ digit }}\n{{ aValueBinary }}\nCalculation\nBinary result:\nNegative Binary Numbers\nBinary numbers can represent negative values as well, by interpreting the leftmost bit as the sign.\nA signed binary number is negative if the leftmost bit is\n1\n, and positive if the leftmost bit is\n0\n.\nUsing the leftmost bit as the sign bit, the highest positive number that can be represented with 8 bits is\n01111111\n, which is\n127\n.\nSigned binary numbers that are positive (the leftmost bit being\n0\n), are calculated into decimal numbers just like described above on this page.\nBut when the sign bit is\n1\n, the number is negative, and something called the\ntwo's complement\nmethod is used to calculate the decimal value.\nThe two's complement method flips all the bits of the binary number (exept the sign bit) and adds\n1\nto the result.\nLet's take the binary number\n11111110\nas an example.\nThe computer notices that the sign bit is\n1\n, so it knows the number is negative, and uses the two's complement method to calculate the decimal value.\nRemoving the sign bit, we get\n1111110\n.\nFlipping all the bits, we get\n0000001\n.\nAdding\n1\nto the result, we get\n0000010\nwhich is\n2\n.\nSince the original number was negative, the result of converting the signed binary number\n11111110\ninto decimal is\n-2\n.\nOther Binary Operations\nBinary numbers can be added, subtracted, multiplied and divided just like decimal numbers.\nThere are actually many more operations the computer can perform on binary numbers, but this page is just aimed at giving a basic understanding of binary numbers.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "be575fca-7b47-4e33-897a-1541b1753a91",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "13f064f7-bd48-40c3-ad9e-4d9981236f1a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6c5a4d5-f5a4-4f72-ab66-2d18a16ed2b7",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Binary Numbers\nin Programming\n\nBinary numbers?",
      "options": [
        "numbers with only two possible values for each digit: 0 and 1",
        "None of the above.",
        "a Binary Number",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Binary Numbers\nin Programming\n\nBinary numbers is 'numbers with only two possible values for each digit: 0 and 1'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "None of the above.",
        "numbers with only two possible values for each digit: 0 and 1",
        "a Binary Number"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of What is 'a Binary Number'."
    }
  ],
  "summary": "This tutorial covers Binary Numbersin Programming concepts and techniques. You'll learn how to use Binary Numbersin Programming effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Binary Numbersin Programming and how to apply it in your projects."
}