{
  "id": "5117d43d-cf82-48a6-8227-b8526523c983",
  "title": "Brain.js",
  "slug": "brainjs",
  "metadata": {
    "description": "Learn about Brain.js with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "network",
      "output",
      "input",
      "dark",
      "brain",
      "neural",
      "example",
      "light",
      "train",
      "result"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAI",
    "subcategory": "ML Brain.js"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Brain.js",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Brain.js\nis a JavaScript library that makes it easy to understand Neural Networks\nbecause it hides the complexity of the mathematics.\nBuilding a Neural Network\nBuilding a neural network with Brain.js:\nExample:\n// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];\n\nExample Explained:\nA Neural Network is created with:\nnew brain.NeuralNetwork()\nThe network is trained with\nnetwork.train([examples])\nThe examples represent 4 input values with a corresponding output value.\nWith\nnetwork.run([1,0])\n, you ask \"What is the likely output of [1,0]?\"\nThe answer from the network is:\none: 93% (close to 1)\nzero: 6% (close to 0)\nHow to Predict a Contrast\nWith CSS, colors can be set by RGB:\nExample\nColor\nRGB\nBlack\nRGB(0,0,0)\nYellow\nRGB(255,255,0)\nRed\nRGB(255,0,0)\nWhite\nRGB(255,255,255)\nLight Gray\nRGB(192,192,192)\nDark Gray\nRGB(65,65,65)\n\nThe example below demonstrates how to predict the darkness of a color:\nExample:\n// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];\n\nExample Explained:\nA Neural Network is created with:\nnew brain.NeuralNetwork()\nThe network is trained with\nnetwork.train([examples])\nThe examples represent 4 input values a corresponding output value.\nWith\nnetwork.run([0,0,128/255])\n, you ask \"What is the likely output of dark blue?\"\nThe answer from the network is:\nDark: 95%\nLight: 4%\nWhy not edit the example to test the likely output of yellow or red?\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example:",
      "content": "",
      "order": 3,
      "code": "// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];",
      "language": "javascript",
      "explanation": "Example of example:"
    },
    {
      "type": "code_example",
      "title": "Example:",
      "content": "",
      "order": 4,
      "code": "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];",
      "language": "javascript",
      "explanation": "Example of example:"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n# TODO: Complete this line\n... result[\"one\"] + \" \" + result[\"zero\"];",
      "solution": "// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n# TODO: Complete this line\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];",
      "solution": "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];"
    }
  ],
  "related_topics": [
    {
      "id": "19962af2-1edb-4d58-b2b2-26dca90e39af",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "87472c57-18fe-4728-91ea-0d0a825261ce",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d35bb92e-bdf2-4343-a9a2-d17124f6ece7",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is js?",
      "options": [
        "the expected output of [1",
        "None of the above.",
        "a JavaScript library that makes it easy to understand Neural Networks\nbecause it hides the complexity of the mathematics",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of js is 'a JavaScript library that makes it easy to understand Neural Networks\nbecause it hides the complexity of the mathematics'."
    },
    {
      "question": "What is What?",
      "options": [
        "the expected output of [1",
        "a JavaScript library that makes it easy to understand Neural Networks\nbecause it hides the complexity of the mathematics",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'the expected output of [1'."
    }
  ],
  "summary": "This tutorial covers Brain.js concepts and techniques. You'll learn how to use Brain.js effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Brain.js and how to apply it in your projects."
}