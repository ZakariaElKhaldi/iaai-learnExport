{
  "id": "34361120-cf32-4089-a412-ed58c53a701b",
  "title": "Training a Perceptron",
  "slug": "training-a-perceptron",
  "metadata": {
    "description": "Learn about Training a Perceptron with clear explanations and practical examples.",
    "keywords": [
      "c",
      "perceptron",
      "inputs",
      "weights",
      "function",
      "const",
      "guess",
      "create",
      "random",
      "desired",
      "plotter"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAI",
    "subcategory": "ML Training"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Training a Perceptron",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Create a\nPerceptron Object\nCreate a\nTraining Function\nTrain\nthe perceptron against correct answers\nTraining Task\nImagine a straight line in a space with scattered x y points.\nTrain a perceptron to classify the points over and under the line.\nClick to Train Me\nCreate a Perceptron Object\nCreate a Perceptron object. Name it anything (like Perceptron).\nLet the perceptron accept two parameters:\nThe number of inputs (no)\nThe learning rate (learningRate).\nSet the default learning rate to 0.00001.\nThen create random weights between -1 and 1 for each input.\nExample\n// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// End Perceptron Object\n}\nThe Random Weights\nThe Perceptron will start with a\nrandom weight\nfor each input.\nThe Learning Rate\nFor each mistake, while training the Perceptron, the weights will be adjusted with a small fraction.\nThis small fraction is the \"\nPerceptron's learning rate\n\".\nIn the Perceptron object we call it\nlearnc\n.\nThe Bias\nSometimes, if both inputs are zero, the perceptron might produce an incorrect output.\nTo avoid this, we give the perceptron an extra input with the value of 1.\nThis is called a\nbias\n.\nAdd an Activate Function\nRemember the perceptron algorithm:\nMultiply each input with the perceptron's weights\nSum the results\nCompute the outcome\nExample\nthis.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}\nThe activation function will output:\n1 if the sum is greater than 0\n0 if the sum is less than 0\nCreate a Training Function\nThe training function guesses the outcome based on the activate function.\nEvery time the guess is wrong, the perceptron should adjust the weights.\nAfter many guesses and adjustments, the weights will be correct.\nExample\nthis.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}\n\nBackpropagation\nAfter each guess, the perceptron calculates how wrong the guess was.\nIf the guess is wrong, the perceptron adjusts the bias and the weights\nso that the guess will be a little bit more correct the \nThis type of learning is called\nbackpropagation\n.\nAfter trying (a few thousand times) your perceptron will become quite good at guessing.\nCreate Your Own Library\nLibrary Code\n// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// Activate Function\nthis.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}\n// Train Function\nthis.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}\n// End Perceptron Object\n}\nNow you can include the library in HTML:\n<script src=\"myperceptron.js\"></script>\nUse Your Library\nExample\n// Initiate Values\nconst numPoints = 500;\nconst learningRate = 0.00001;\n// Create a Plotter\nconst plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;\n// Create Random XY Points\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}\n// Line Function\nfunction f(x) {\nreturn x * 1.2 + 50;\n}\n//Plot the Line\nplotter.plotLine(xMin, f(xMin), xMax, f(xMax), \"black\");\n// Compute Desired Answers\nconst desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1}\n}\n// Create a Perceptron\nconst ptron = new Perceptron(2, learningRate);\n// Train the Perceptron\nfor (let j = 0; j <= 10000; j++) {\nfor (let i = 0; i < numPoints; i++) {\nptron.train([xPoints[i], yPoints[i]], desired[i]);\n}\n}\n// Display the Result\nfor (let i = 0; i < numPoints; i++) {\nconst x = xPoints[i];\nconst y = yPoints[i];\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// End Perceptron Object\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "this.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "this.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Library Code",
      "content": "",
      "order": 6,
      "code": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// Activate Function\nthis.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}\n// Train Function\nthis.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}\n// End Perceptron Object\n}",
      "language": "javascript",
      "explanation": "Example of library code"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Initiate Values\nconst numPoints = 500;\nconst learningRate = 0.00001;\n// Create a Plotter\nconst plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;\n// Create Random XY Points\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}\n// Line Function\nfunction f(x) {\nreturn x * 1.2 + 50;\n}\n//Plot the Line\nplotter.plotLine(xMin, f(xMin), xMax, f(xMax), \"black\");\n// Compute Desired Answers\nconst desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1}\n}\n// Create a Perceptron\nconst ptron = new Perceptron(2, learningRate);\n// Train the Perceptron\nfor (let j = 0; j <= 10000; j++) {\nfor (let i = 0; i < numPoints; i++) {\nptron.train([xPoints[i], yPoints[i]], desired[i]);\n}\n}\n// Display the Result\nfor (let i = 0; i < numPoints; i++) {\nconst x = xPoints[i];\nconst y = yPoints[i];\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// End Perceptron Object\n# TODO: Complete this line",
      "solution": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n// End Perceptron Object\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "this.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n# TODO: Complete this line\nif (sum > 0) {return 1} else {return 0}\n}",
      "solution": "this.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "b671170c-ee33-49d9-aa0f-fa2d9d6c9e02",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "20932a8b-ba21-402e-8c9c-93658a6b7ec7",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "75d7e8e0-93cc-42c3-ac5a-8bf845db1dad",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This small fraction?",
      "options": [
        "the \"\nPerceptron's learning rate\n\"",
        "zero",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This small fraction is 'the \"\nPerceptron's learning rate\n\"'."
    },
    {
      "question": "What is if both inputs?",
      "options": [
        "the \"\nPerceptron's learning rate\n\"",
        "None of the above.",
        "zero",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of if both inputs is 'zero'."
    }
  ],
  "summary": "This tutorial covers Training a Perceptron concepts and techniques. You'll learn how to use Training a Perceptron effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Training a Perceptron and how to apply it in your projects."
}