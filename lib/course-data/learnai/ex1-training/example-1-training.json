{
  "id": "20a00854-6935-4d6f-a3f3-683476e360e1",
  "title": "Example 1 Training",
  "slug": "example-1-training",
  "metadata": {
    "description": "Learn about Example 1 Training with clear explanations and practical examples.",
    "keywords": [
      "model",
      "const",
      "callbacks",
      "function",
      "inputs",
      "epochs",
      "result",
      "example",
      "training",
      "labels"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnAI",
    "subcategory": "Ex1 Training"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Example 1 Training",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Training Function\nExample\nasync function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}\n\nepochs\ndefines how many iterations (loops) the model will do.\nmodel.fit\nis the function that runs the loops.\ncallbacks\ndefines the callback function to call\nwhen the model wants to redraw the graphics.\nTest the Model\nWhen a model is trained, it is important to test and evaluate it.\nWe do this by inspecting what the model predicts for a range of different inputs.\nBut, before we can do that, we have to un-normalize the data:\nUn Normalize\nlet unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();\nThen we can look at the result:\nPlot the Result\nconst predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n// Plot the Result\ntfPlot([values, predicted], surface1)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Un Normalize",
      "content": "",
      "order": 4,
      "code": "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();",
      "language": "javascript",
      "explanation": "Example of un normalize"
    },
    {
      "type": "code_example",
      "title": "Plot the Result",
      "content": "",
      "order": 5,
      "code": "const predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n// Plot the Result\ntfPlot([values, predicted], surface1)",
      "language": "javascript",
      "explanation": "Example of plot the result"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n# TODO: Complete this line",
      "solution": "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\n# TODO: Complete this line\nunY = unNormunY.dataSync();",
      "solution": "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();"
    }
  ],
  "related_topics": [
    {
      "id": "e97e4634-8f9e-4739-a34d-fb2979124157",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d14fbe38-ea45-413b-a82d-748175e5e0f2",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "39737e5f-4673-4190-bf90-07329cec60a4",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is fit?",
      "options": [
        "trained",
        "None of the above.",
        "None of the above.",
        "the function that runs the loops"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of fit is 'the function that runs the loops'."
    },
    {
      "question": "What is Test the Model\nWhen a model?",
      "options": [
        "the function that runs the loops",
        "None of the above.",
        "None of the above.",
        "trained"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Test the Model\nWhen a model is 'trained'."
    }
  ],
  "summary": "This tutorial covers Example 1 Training concepts and techniques. You'll learn how to use Example 1 Training effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Example 1 Training and how to apply it in your projects."
}