{
  "id": "3c3ebcd0-316c-49d6-ae1c-b4262ad0a45b",
  "title": "Example 1 Model",
  "slug": "example-1-model",
  "metadata": {
    "description": "Learn about Example 1 Model with clear explanations and practical examples.",
    "keywords": [
      "model",
      "data",
      "const",
      "inputs",
      "sequential",
      "input",
      "values",
      "labels",
      "tensorflow",
      "inputtensor"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnAI",
    "subcategory": "Ex1 Model"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Example 1 Model",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Shuffle Data\nAlways shuffle data before training.\nWhen a model is trained, the data is divided into small sets (batches).\nEach batch is then fed to the model.\nShuffling is important to prevent the model getting the same data over again.\nIf using the same data twice, the model will not be able to generalize the data\nand give the right output. Shuffling gives a better variety of data in each batch.\nExample\ntf.util.shuffle(data);\nTensorFlow Tensors\nTo use TensorFlow, input data needs to be converted to tensor data:\n// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);\nData Normalization\nData should be normalized before being used in a neural network.\nA range of 0 - 1 using min-max are often best for numerical data:\nconst inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\nTensorflow Model\nA\nMachine Learning Model\nis an algorithm that produces output from input.\nThis example uses 3 lines to define a\nML Model\n:\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));\nSequential ML Model\nconst model = tf.sequential();\ncreates a\nSequential ML Model\n.\nIn a sequential model, the input flows directly to the output. \nOther models can have multiple inputs and multiple outputs.\nSequential is the easiest ML model.\nIt allows you to build a model layer by layer,\nwith weights that correspond to the \nTensorFlow Layers\nmodel.add()\nis used to add two layers to the model.\ntf.layer.dense\nis a layer type that works in most cases.\nIt multiplies its inputs by a weight-matrix and adds a number (bias) to the result.\nShapes and Units\ninputShape: [1]\nbecause we have 1 input (x = horsepower).\nunits: 1\ndefines the size of the weight matrix:\n1 weight for each input (x value).\nCompiling a Model\nCompile the model with a specified\noptimizer\nand\nloss\nfunction:\nmodel.compile({loss: 'meanSquaredError', optimizer:'sgd'});\nThe compiler is set to use the\nsgd\noptimizer.\nIt is simple to use and quite effective.\nmeanSquaredError\nis the function we want to use to compare model predictions and true values.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "tf.util.shuffle(data);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "tf.util.shuffle(data);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Map x values to Tensor inputs\n# TODO: Complete this line\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
      "solution": "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);"
    }
  ],
  "related_topics": [
    {
      "id": "56af1842-98ed-4b82-834b-42f1cb441f9b",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ea2d0fb6-4e3c-4f5c-8abe-eeb9b1a57273",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6547e46-2f49-48af-bc64-bd8d6153bbea",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is When a model?",
      "options": [
        "trained",
        "None of the above.",
        "then fed to the model",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of When a model is 'trained'."
    },
    {
      "question": "What is Each batch?",
      "options": [
        "None of the above.",
        "None of the above.",
        "then fed to the model",
        "trained"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Each batch is 'then fed to the model'."
    }
  ],
  "summary": "This tutorial covers Example 1 Model concepts and techniques. You'll learn how to use Example 1 Model effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Example 1 Model and how to apply it in your projects."
}