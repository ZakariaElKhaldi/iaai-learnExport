{
  "id": "f596a33f-055e-49e1-84f3-9f3d8c035d1b",
  "title": "Pattern Recognition",
  "slug": "pattern-recognition",
  "metadata": {
    "description": "Learn about Pattern Recognition with clear explanations and practical examples.",
    "keywords": [
      "c",
      "plotter",
      "line",
      "desired",
      "points",
      "display",
      "const",
      "create",
      "perceptron",
      "random",
      "answers"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAI",
    "subcategory": "ML Recognition"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Pattern Recognition",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Neural Networks\nare used in applications like Facial Recognition.\nThese applications use\nPattern Recognition\n.\nThis type of\nClassification\ncan be done with a\nPerceptron\n.\nPerceptrons can be used to classify data into two parts.\nPerceptrons are also known as a\nLinear Binary Classifiers\n.\nPattern Classification\nImagine a strait line (a linear graph) in a space with scattered x y points.\nHow can you classify the points over and under the line?\nA perceptron can be trained to recognize the points over the line,\nwithout knowing the formula for the line.\nHow to Program a Perceptron\nTo program a perceptron, we can use a simple JavaScript program that will:\nCreate a simple plotter\nCreate 500 random x y points\nDisplay the x y points\nCreate a line function: f(x)\nDisplay the line\nCompute the desired answers\nDisplay the desired answers\nCreate a Simple Plotter\nCreating a simple plotter object is described in the\nAI Canvas Chapter\n.\nExample\nconst plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;\nCreate Random X Y Points\nCreate as many xy points as wanted.\nLet the x values be random (between 0 and maximum).\nLet the y values be random (between 0 and maximum).\nDisplay the points in the plotter:\nExample\nconst numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}\n\nCreate a Line Function\nDisplay the line in the plotter:\nExample\nfunction f(x) {\nreturn x * 1.2 + 50;\n}\n\nCompute Correct Answers\nCompute the correct answers based on the line function:\ny = x * 1.2 + 50.\nThe desired answer is 1 if y is over the line and 0 if y is under the line.\nStore the desired answers in an array (desired[]).\nExample\nlet desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1;}\n}\nDisplay the Correct Answers\nFor each point, if desired[i] = 1 display a black point,\nelse display a blue point.\nExample\nfor (let i = 0; i < numPoints; i++) {\nlet color = \"blue\";\nif (desired[i]) color = \"black\";\nplotter.plotPoint(xPoints[i], yPoints[i], color);\n}\n\nHow to Train a Perceptron\nIn the \nTrain a perceptron\nto predict the output values of unknown input values.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function f(x) {\nreturn x * 1.2 + 50;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1;}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "for (let i = 0; i < numPoints; i++) {\nlet color = \"blue\";\nif (desired[i]) color = \"black\";\nplotter.plotPoint(xPoints[i], yPoints[i], color);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\n# TODO: Complete this line\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;",
      "solution": "const plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\n# TODO: Complete this line\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}",
      "solution": "const numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "71594d1d-3019-4747-b96a-c356f23d2481",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fda6c260-bd63-44e9-a136-a9d91e00c8d1",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "606e9615-9a88-46fb-a3df-b823f94e10c6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Pattern Recognition\n\nNeural Networks?",
      "options": [
        "None of the above.",
        "also known as a\nLinear Binary Classifiers",
        "None of the above.",
        "used in applications like Facial Recognition"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Pattern Recognition\n\nNeural Networks is 'used in applications like Facial Recognition'."
    },
    {
      "question": "What is Perceptrons?",
      "options": [
        "also known as a\nLinear Binary Classifiers",
        "used in applications like Facial Recognition",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Perceptrons is 'also known as a\nLinear Binary Classifiers'."
    }
  ],
  "summary": "This tutorial covers Pattern Recognition concepts and techniques. You'll learn how to use Pattern Recognition effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Pattern Recognition and how to apply it in your projects."
}