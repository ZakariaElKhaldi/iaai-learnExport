{
  "title": "Git Help",
  "url": "https://www.w3schools.com/git/git_help.asp?remote=github",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Git Help",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Change Platform:",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Why and When to Use Git Help?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Git has many commands and options.",
      "html": "<p>Git has many commands and options.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you forget how a command works or want to learn about its options, you can use Git's built-in help.",
      "html": "<p>If you forget how a command works or want to learn about its options, you can use Git's built-in help.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is the fastest way to get answers without leaving your terminal.",
      "html": "<p>This is the fastest way to get answers without leaving your terminal.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Key Commands for Getting Help",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "See Help for a Specific Command ( git help < command > )",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Shows the full manual page for a specific command, including all options and examples:",
      "html": "<p>Shows the full manual page for a specific command, including all options and examples:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "command-line",
          "language-shell"
        ],
        "isNotranslate": false
      },
      "code": "git\n\nhelp\ncommit\nGIT-COMMIT(1)\nNAME\ngit-commit - Record changes to the repository\nSYNOPSIS\ngit commit [options] [--]\n...\nDESCRIPTION\nStores the current contents of the index in a new commit\ntogether with a log message from the user describing the changes.\n...",
      "language": "unknown",
      "code_html": "<pre class=\"command-line language-shell\" data-host=\"localhost\" data-output=\"2-10\" data-user=\"user\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-host=\"localhost\" data-user=\"user\"></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token function\">git</span> <span class=\"token builtin class-name\">help</span> commit\nGIT-COMMIT(1)\nNAME\n    git-commit - Record changes to the repository\nSYNOPSIS\n    git commit [options] [--] <pathspec>...\nDESCRIPTION\n    Stores the current contents of the index in a new commit\n    together with a log message from the user describing the changes.\n...</pathspec></code></pre>",
      "code_classes": [
        "command-line",
        "language-shell"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "command-line",
        "language-shell"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This command opens the full documentation for git commit in your terminal.",
      "html": "<p>This command opens the full documentation for <code class=\"language-shell\"><span class=\"token function\">git</span> commit</code> in your terminal.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "See Help with --help ( git < command > --help )",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This does the same as git help < command > . Most users prefer this form:",
      "html": "<p>This does the same as <code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token builtin class-name\">help</span> <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">&gt;</span></code>. Most users prefer this form:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "command-line",
          "language-shell"
        ],
        "isNotranslate": false
      },
      "code": "git\nstatus --help\nGIT-STATUS(1)\nNAME\ngit-status - Show the working tree status\nSYNOPSIS\ngit status [options] [--] [pathspec...]\nDESCRIPTION\nDisplays paths that have differences between the index file and the current HEAD commit.\n...",
      "language": "unknown",
      "code_html": "<pre class=\"command-line language-shell\" data-host=\"localhost\" data-output=\"2-10\" data-user=\"user\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-host=\"localhost\" data-user=\"user\"></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token function\">git</span> status --help\nGIT-STATUS(1)\nNAME\n    git-status - Show the working tree status\nSYNOPSIS\n    git status [options] [--] [pathspec...]\nDESCRIPTION\n    Displays paths that have differences between the index file and the current HEAD commit.\n...</code></pre>",
      "code_classes": [
        "command-line",
        "language-shell"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "command-line",
        "language-shell"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This command opens the manual page for git status .",
      "html": "<p>This command opens the manual page for <code class=\"language-shell\"><span class=\"token function\">git</span> status</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "See a Quick Summary with -h ( git < command > -h )",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Shows a short summary of the command's options, right in the terminal window (does not open the full manual):",
      "html": "<p>Shows a short summary of the command's options, right in the terminal window (does not open the full manual):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "sql",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "command-line",
          "language-shell"
        ],
        "isNotranslate": false
      },
      "code": "git\n\nadd\n-h\nusage: git add [options] [--]\n...\n-n, --dry-run         dry run\n-v, --verbose        be verbose\n-i, --interactive    interactive picking\n-p, --patch          select hunks interactively\n-e, --edit           edit current diff and apply\n-u, --update         update tracked files\n-A, --all            add changes from all tracked and untracked files\n...",
      "language": "sql",
      "code_html": "<pre class=\"command-line language-shell\" data-host=\"localhost\" data-output=\"2-10\" data-user=\"user\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-host=\"localhost\" data-user=\"user\"></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token function\">git</span> <span class=\"token function\">add</span> -h\nusage: git add [options] [--] <pathspec>...\n    -n, --dry-run         dry run\n    -v, --verbose        be verbose\n    -i, --interactive    interactive picking\n    -p, --patch          select hunks interactively\n    -e, --edit           edit current diff and apply\n    -u, --update         update tracked files\n    -A, --all            add changes from all tracked and untracked files\n...</pathspec></code></pre>",
      "code_classes": [
        "command-line",
        "language-shell"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "command-line",
        "language-shell"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This command gives you a brief overview of available options for a command.",
      "html": "<p>This command gives you a brief overview of available options for a command.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "List All Git Commands ( git help --all )",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lists every Git command available on your system, grouped by category:",
      "html": "<p>Lists every Git command available on your system, grouped by category:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Warning: This will display a very long list of commands",
      "html": "<p><strong>Warning:</strong> This will display a very long list of commands</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "command-line",
          "language-shell"
        ],
        "isNotranslate": false
      },
      "code": "$\ngit\n\nhelp\n--all\nSee 'git help\n' to read about a specific subcommand\n\nMain Porcelain Commands\nadd                  Add file contents to the index\nam                   Apply a series of patches from a mailbox\narchive              Create an archive of files from a named tree\nbisect               Use binary search to find the commit that introduced a bug\nbranch               List, create, or delete branches\nbundle               Move objects and refs by archive\ncheckout             Switch branches or restore working tree files\ncherry-pick          Apply the changes introduced by some existing commits\ncitool               Graphical alternative to git-commit\nclean                Remove untracked files from the working tree\nclone                Clone a repository into a new directory\ncommit               Record changes to the repository\ndescribe             Give an object a human readable name based on an available ref\ndiff                 Show changes between commits, commit and working tree, etc\nfetch                Download objects and refs from another repository\nformat-patch         Prepare patches for e-mail submission\ngc                   Cleanup unnecessary files and optimize the local repository\ngitk                 The Git repository browser\ngrep                 Print lines matching a pattern\ngui                  A portable graphical interface to Git\ninit                 Create an empty Git repository or reinitialize an existing one\nlog                  Show commit logs\nmaintenance          Run tasks to optimize Git repository data\nmerge                Join two or more development histories together\nmv                   Move or rename a file, a directory, or a symlink\nnotes                Add or inspect object notes\npull                 Fetch from and integrate with another repository or a local branch\npush                 Update remote refs along with associated objects\nrange-diff           Compare two commit ranges (e.g. two versions of a branch)\nrebase               Reapply commits on top of another base tip\nreset                Reset current HEAD to the specified state\nrestore              Restore working tree files\nrevert               Revert some existing commits\nrm                   Remove files from the working tree and from the index\nshortlog             Summarize 'git log' output\nshow                 Show various types of objects\nsparse-checkout      Initialize and modify the sparse-checkout\nstash                Stash the changes in a dirty working directory away\nstatus               Show the working tree status\nsubmodule            Initialize, update or inspect submodules\nswitch               Switch branches\ntag                  Create, list, delete or verify a tag object signed with GPG\nworktree             Manage multiple working trees\n\nAncillary Commands / Manipulators\nconfig               Get and set repository or global options\nfast-export          Git data exporter\nfast-import          Backend for fast Git data importers\nfilter-branch        Rewrite branches\nmergetool            Run merge conflict resolution tools to resolve merge conflicts\npack-refs            Pack heads and tags for efficient repository access\nprune                Prune all unreachable objects from the object database\nreflog               Manage reflog information\nremote               Manage set of tracked repositories\nrepack               Pack unpacked objects in a repository\nreplace              Create, list, delete refs to replace objects\n\nAncillary Commands / Interrogators\nannotate             Annotate file lines with commit information\nblame                Show what revision and author last modified each line of a file\nbugreport            Collect information for user to file a bug report\ncount-objects        Count unpacked number of objects and their disk consumption\ndifftool             Show changes using common diff tools\nfsck                 Verifies the connectivity and validity of the objects in the database\ngitweb               Git web interface (web frontend to Git repositories)\nhelp                 Display help information about Git\ninstaweb             Instantly browse your working repository in gitweb\nmerge-tree           Show three-way merge without touching index\nrerere               Reuse recorded resolution of conflicted merges\nshow-branch          Show branches and their commits\nverify-commit        Check the GPG signature of commits\nverify-tag           Check the GPG signature of tags\nwhatchanged          Show logs with difference each commit introduces\n\nInteracting with Others\narchimport           Import a GNU Arch repository into Git\ncvsexportcommit      Export a single commit to a CVS checkout\ncvsimport            Salvage your data out of another SCM people love to hate\ncvsserver            A CVS server emulator for Git\nimap-send            Send a collection of patches from stdin to an IMAP folder\np4                   Import from and submit to Perforce repositories\nquiltimport          Applies a quilt patchset onto the current branch\nrequest-pull         Generates a summary of pending changes\nsend-email           Send a collection of patches as emails\nsvn                  Bidirectional operation between a Subversion repository and Git\n\nLow-level Commands / Manipulators\napply                Apply a patch to files and/or to the index\ncheckout-index       Copy files from the index to the working tree\ncommit-graph         Write and verify Git commit-graph files\ncommit-tree          Create a new commit object\nhash-object          Compute object ID and optionally creates a blob from a file\nindex-pack           Build pack index file for an existing packed archive\nmerge-file           Run a three-way file merge\nmerge-index          Run a merge for files needing merging\nmktag                Creates a tag object\nmktree               Build a tree-object from ls-tree formatted text\nmulti-pack-index     Write and verify multi-pack-indexes\npack-objects         Create a packed archive of objects\nprune-packed         Remove extra objects that are already in pack files\nread-tree            Reads tree information into the index\nsymbolic-ref         Read, modify and delete symbolic refs\nunpack-objects       Unpack objects from a packed archive\nupdate-index         Register file contents in the working tree to the index\nupdate-ref           Update the object name stored in a ref safely\nwrite-tree           Create a tree object from the current index\n\nLow-level Commands / Interrogators\ncat-file             Provide content or type and size information for repository objects\ncherry               Find commits yet to be applied to upstream\ndiff-files           Compares files in the working tree and the index\ndiff-index           Compare a tree to the working tree or index\ndiff-tree            Compares the content and mode of blobs found via two tree objects\nfor-each-ref         Output information on each ref\nfor-each-repo        Run a Git command on a list of repositories\nget-tar-commit-id    Extract commit ID from an archive created using git-archive\nls-files             Show information about files in the index and the working tree\nls-remote            List references in a remote repository\nls-tree              List the contents of a tree object\nmerge-base           Find as good common ancestors as possible for a merge\nname-rev             Find symbolic names for given revs\npack-redundant       Find redundant pack files\nrev-list             Lists commit objects in reverse chronological order\nrev-parse            Pick out and massage parameters\nshow-index           Show packed archive index\nshow-ref             List references in a local repository\nunpack-file          Creates a temporary file with a blob's contents\nvar                  Show a Git logical variable\nverify-pack          Validate packed Git archive files\n\nLow-level Commands / Syncing Repositories\ndaemon               A really simple server for Git repositories\nfetch-pack           Receive missing objects from another repository\nhttp-backend         Server side implementation of Git over HTTP\nsend-pack            Push objects over Git protocol to another repository\nupdate-server-info   Update auxiliary info file to help dumb servers\n\nLow-level Commands / Internal Helpers\ncheck-attr           Display gitattributes information\ncheck-ignore         Debug gitignore / exclude files\ncheck-mailmap        Show canonical names and email addresses of contacts\ncheck-ref-format     Ensures that a reference name is well formed\ncolumn               Display data in columns\ncredential           Retrieve and store user credentials\ncredential-cache     Helper to temporarily store passwords in memory\ncredential-store     Helper to store credentials on disk\nfmt-merge-msg        Produce a merge commit message\ninterpret-trailers   Add or parse structured information in commit messages\nmailinfo             Extracts patch and authorship from a single e-mail message\nmailsplit            Simple UNIX mbox splitter program\nmerge-one-file       The standard helper program to use with git-merge-index\npatch-id             Compute unique ID for a patch\nsh-i18n              Git's i18n setup code for shell scripts\nsh-setup             Common Git shell script setup code\nstripspace           Remove unnecessary whitespace\n\nExternal commands\naskyesno\ncredential-helper-selector\nflow\nlfs",
      "language": "javascript",
      "code_html": "<pre class=\"command-line language-shell\" data-host=\"localhost\" data-output=\"2-165\" data-user=\"user\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-host=\"localhost\" data-user=\"user\"></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>$ <span class=\"token function\">git</span> <span class=\"token builtin class-name\">help</span> --all\nSee 'git help <command/>' to read about a specific subcommand\n\nMain Porcelain Commands\n   add                  Add file contents to the index\n   am                   Apply a series of patches from a mailbox\n   archive              Create an archive of files from a named tree\n   bisect               Use binary search to find the commit that introduced a bug\n   branch               List, create, or delete branches\n   bundle               Move objects and refs by archive\n   checkout             Switch branches or restore working tree files\n   cherry-pick          Apply the changes introduced by some existing commits\n   citool               Graphical alternative to git-commit\n   clean                Remove untracked files from the working tree\n   clone                Clone a repository into a new directory\n   commit               Record changes to the repository\n   describe             Give an object a human readable name based on an available ref\n   diff                 Show changes between commits, commit and working tree, etc\n   fetch                Download objects and refs from another repository\n   format-patch         Prepare patches for e-mail submission\n   gc                   Cleanup unnecessary files and optimize the local repository\n   gitk                 The Git repository browser\n   grep                 Print lines matching a pattern\n   gui                  A portable graphical interface to Git\n   init                 Create an empty Git repository or reinitialize an existing one\n   log                  Show commit logs\n   maintenance          Run tasks to optimize Git repository data\n   merge                Join two or more development histories together\n   mv                   Move or rename a file, a directory, or a symlink\n   notes                Add or inspect object notes\n   pull                 Fetch from and integrate with another repository or a local branch\n   push                 Update remote refs along with associated objects\n   range-diff           Compare two commit ranges (e.g. two versions of a branch)\n   rebase               Reapply commits on top of another base tip\n   reset                Reset current HEAD to the specified state\n   restore              Restore working tree files\n   revert               Revert some existing commits\n   rm                   Remove files from the working tree and from the index\n   shortlog             Summarize 'git log' output\n   show                 Show various types of objects\n   sparse-checkout      Initialize and modify the sparse-checkout\n   stash                Stash the changes in a dirty working directory away\n   status               Show the working tree status\n   submodule            Initialize, update or inspect submodules\n   switch               Switch branches\n   tag                  Create, list, delete or verify a tag object signed with GPG\n   worktree             Manage multiple working trees\n\nAncillary Commands / Manipulators\n   config               Get and set repository or global options\n   fast-export          Git data exporter\n   fast-import          Backend for fast Git data importers\n   filter-branch        Rewrite branches\n   mergetool            Run merge conflict resolution tools to resolve merge conflicts\n   pack-refs            Pack heads and tags for efficient repository access\n   prune                Prune all unreachable objects from the object database\n   reflog               Manage reflog information\n   remote               Manage set of tracked repositories\n   repack               Pack unpacked objects in a repository\n   replace              Create, list, delete refs to replace objects\n\nAncillary Commands / Interrogators\n   annotate             Annotate file lines with commit information\n   blame                Show what revision and author last modified each line of a file\n   bugreport            Collect information for user to file a bug report\n   count-objects        Count unpacked number of objects and their disk consumption\n   difftool             Show changes using common diff tools\n   fsck                 Verifies the connectivity and validity of the objects in the database\n   gitweb               Git web interface (web frontend to Git repositories)\n   help                 Display help information about Git\n   instaweb             Instantly browse your working repository in gitweb\n   merge-tree           Show three-way merge without touching index\n   rerere               Reuse recorded resolution of conflicted merges\n   show-branch          Show branches and their commits\n   verify-commit        Check the GPG signature of commits\n   verify-tag           Check the GPG signature of tags\n   whatchanged          Show logs with difference each commit introduces\n\nInteracting with Others\n   archimport           Import a GNU Arch repository into Git\n   cvsexportcommit      Export a single commit to a CVS checkout\n   cvsimport            Salvage your data out of another SCM people love to hate\n   cvsserver            A CVS server emulator for Git\n   imap-send            Send a collection of patches from stdin to an IMAP folder\n   p4                   Import from and submit to Perforce repositories\n   quiltimport          Applies a quilt patchset onto the current branch\n   request-pull         Generates a summary of pending changes\n   send-email           Send a collection of patches as emails\n   svn                  Bidirectional operation between a Subversion repository and Git\n\nLow-level Commands / Manipulators\n   apply                Apply a patch to files and/or to the index\n   checkout-index       Copy files from the index to the working tree\n   commit-graph         Write and verify Git commit-graph files\n   commit-tree          Create a new commit object\n   hash-object          Compute object ID and optionally creates a blob from a file\n   index-pack           Build pack index file for an existing packed archive\n   merge-file           Run a three-way file merge\n   merge-index          Run a merge for files needing merging\n   mktag                Creates a tag object\n   mktree               Build a tree-object from ls-tree formatted text\n   multi-pack-index     Write and verify multi-pack-indexes\n   pack-objects         Create a packed archive of objects\n   prune-packed         Remove extra objects that are already in pack files\n   read-tree            Reads tree information into the index\n   symbolic-ref         Read, modify and delete symbolic refs\n   unpack-objects       Unpack objects from a packed archive\n   update-index         Register file contents in the working tree to the index\n   update-ref           Update the object name stored in a ref safely\n   write-tree           Create a tree object from the current index\n\nLow-level Commands / Interrogators\n   cat-file             Provide content or type and size information for repository objects\n   cherry               Find commits yet to be applied to upstream\n   diff-files           Compares files in the working tree and the index\n   diff-index           Compare a tree to the working tree or index\n   diff-tree            Compares the content and mode of blobs found via two tree objects\n   for-each-ref         Output information on each ref\n   for-each-repo        Run a Git command on a list of repositories\n   get-tar-commit-id    Extract commit ID from an archive created using git-archive\n   ls-files             Show information about files in the index and the working tree\n   ls-remote            List references in a remote repository\n   ls-tree              List the contents of a tree object\n   merge-base           Find as good common ancestors as possible for a merge\n   name-rev             Find symbolic names for given revs\n   pack-redundant       Find redundant pack files\n   rev-list             Lists commit objects in reverse chronological order\n   rev-parse            Pick out and massage parameters\n   show-index           Show packed archive index\n   show-ref             List references in a local repository\n   unpack-file          Creates a temporary file with a blob's contents\n   var                  Show a Git logical variable\n   verify-pack          Validate packed Git archive files\n\nLow-level Commands / Syncing Repositories\n   daemon               A really simple server for Git repositories\n   fetch-pack           Receive missing objects from another repository\n   http-backend         Server side implementation of Git over HTTP\n   send-pack            Push objects over Git protocol to another repository\n   update-server-info   Update auxiliary info file to help dumb servers\n\nLow-level Commands / Internal Helpers\n   check-attr           Display gitattributes information\n   check-ignore         Debug gitignore / exclude files\n   check-mailmap        Show canonical names and email addresses of contacts\n   check-ref-format     Ensures that a reference name is well formed\n   column               Display data in columns\n   credential           Retrieve and store user credentials\n   credential-cache     Helper to temporarily store passwords in memory\n   credential-store     Helper to store credentials on disk\n   fmt-merge-msg        Produce a merge commit message\n   interpret-trailers   Add or parse structured information in commit messages\n   mailinfo             Extracts patch and authorship from a single e-mail message\n   mailsplit            Simple UNIX mbox splitter program\n   merge-one-file       The standard helper program to use with git-merge-index\n   patch-id             Compute unique ID for a patch\n   sh-i18n              Git's i18n setup code for shell scripts\n   sh-setup             Common Git shell script setup code\n   stripspace           Remove unnecessary whitespace\n\nExternal commands\n   askyesno\n   credential-helper-selector\n   flow\n   lfs</code></pre>",
      "code_classes": [
        "command-line",
        "language-shell"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "command-line",
        "language-shell"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.",
      "html": "<p><strong>Note:</strong> If you find yourself stuck in the list view, <code class=\"language-shell\">SHIFT + G</code> to jump the end of the list, then <code class=\"language-shell\">q</code> to exit the view.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "List Guides and Concepts ( git help -g )",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Shows a list of guides and concept topics for deeper learning:",
      "html": "<p>Shows a list of guides and concept topics for deeper learning:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "command-line",
          "language-shell"
        ],
        "isNotranslate": false
      },
      "code": "git\n\nhelp\n-g\nThe common Git guides are:\nattributes   Defining attributes per path\neveryday     Everyday Git With 20 Commands Or So\nglossary     A Git glossary of terms\nrevisions    Specifying revisions and ranges for Git\n...",
      "language": "unknown",
      "code_html": "<pre class=\"command-line language-shell\" data-host=\"localhost\" data-output=\"2-10\" data-user=\"user\"><code class=\"language-shell\"><span class=\"command-line-prompt\"><span data-host=\"localhost\" data-user=\"user\"></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token function\">git</span> <span class=\"token builtin class-name\">help</span> -g\nThe common Git guides are:\n   attributes   Defining attributes per path\n   everyday     Everyday Git With 20 Commands Or So\n   glossary     A Git glossary of terms\n   revisions    Specifying revisions and ranges for Git\n...</code></pre>",
      "code_classes": [
        "command-line",
        "language-shell"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "command-line",
        "language-shell"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This command is great for learning about Git's advanced concepts and best practices.",
      "html": "<p>This command is great for learning about Git's advanced concepts and best practices.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Troubleshooting",
      "level": "h2"
    }
  ]
}