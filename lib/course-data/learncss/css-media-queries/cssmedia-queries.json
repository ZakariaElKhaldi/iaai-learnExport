{
  "id": "08666553-74dd-4bfd-bec0-0826407d495c",
  "title": "CSSMedia Queries",
  "slug": "cssmedia-queries",
  "metadata": {
    "description": "Learn about CSSMedia Queries with clear explanations and practical examples.",
    "keywords": [
      "c",
      "media",
      "viewport",
      "width",
      "queries",
      "height",
      "screen",
      "query",
      "type",
      "features",
      "different"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnCSS",
    "subcategory": "CSS Media Queries"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nMedia Queries",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "CSS Media Queries\nThe\n@media\nrule, introduced in CSS2, made it possible to define different style rules for different media types.\nMedia queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, \nthey look at the capability of the \ndevice.\nMedia queries can be used to check many things, such as:\nwidth and height of the viewport\norientation of the viewport (landscape or portrait)\nresolution\nUsing media queries are a popular technique for delivering a tailored style \nsheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).\nCSS Media Types\nValue\nDescription\nall\nUsed for all media type devices\nprint\nUsed for print preview mode\nscreen\nUsed for computer screens, tablets, smart-phones etc.\nCSS Common Media Features\nHere are some commonly used media features:\nValue\nDescription\norientation\nOrientation of the viewport. Landscape or portrait\nmax-height\nMaximum height of the viewport\nmin-height\nMinimum height of the viewport\nheight\nHeight of the viewport (including scrollbar)\nmax-width\nMaximum width of the viewport\nmin-width\nMinimum width of the viewport\nwidth\nWidth of the viewport (including scrollbar)\nMedia Query Syntax\nA media query consists of a media type and can contain one or more \nmedia features, which resolve to either true or false.\n@media not|only\nmediatype\nand\n(\nmedia feature\n) \n  and\n(\nmedia feature\n) {\nCSS-Code;\n}\nThe\nmediatype\nis optional (if omitted, it will be set to all). However, if you use\nnot\nor\nonly\n, you must also specify a\nmediatype\n.\nThe result of the query is \ntrue if the specified media type matches the type of device the document is \nbeing displayed on and all media features in the media query are true. When a media query is true, the corresponding style sheet or style rules are \napplied, following the normal cascading rules.\nMeaning of the\nnot\n,\nonly,\nand\nand\nkeywords:\nnot:\nThis keyword inverts the meaning of an entire media query.\nonly:\nThis keyword prevents older browsers that do not support media queries from applying the specified styles.\nIt has no effect on modern browsers.\nand:\nThis keyword combines a media type and one or more \nmedia features.\nYou can also link to different stylesheets for different media and different \nwidths of the browser window (viewport):\n<link rel=\"stylesheet\" media=\"print\" href=\"print.css\">\n<link rel=\"stylesheet\" media=\"screen\" href=\"screen.css\">\n<link rel=\"stylesheet\" media=\"screen and (min-width: \n  480px)\" \nhref=\"example1.css\">\n<link rel=\"stylesheet\" media=\"screen and (min-width: \n  701px) and (max-width: 900px)\" href=\"example2.css\">\netc....\nMedia Queries Simple Examples\nOne way to use media queries is to have an alternate CSS section right inside your style sheet.\nThe following example changes the background-color to lightgreen if the \nviewport is 480 pixels wide or wider (if the viewport is less than \n480 pixels, the background-color will be pink):\nExample\n@media screen and (min-width: 480px) {\nbody {\nbackground-color: lightgreen;\n}\n}\n\nThe following example shows a menu that will float to the left of the page if \nthe viewport is 480 pixels wide or wider (if the viewport is less than \n480 pixels, the menu will be on top of the content):\nExample\n@media screen and (min-width: 480px) {\n#leftsidebar \n{width: 200px; float: left;}\n#main \n{margin-left: 216px;}\n}\n\nMore Media Query Examples\nFor much more examples on media queries, go to the \nCSS MQ Examples\n.\nCSS @media Reference\nFor a full overview of all the media types and features/expressions, please look at the\n@media rule in our CSS reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "@media screen and (min-width: 480px) {\nbody {\nbackground-color: lightgreen;\n}\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "@media screen and (min-width: 480px) {\n#leftsidebar \n{width: 200px; float: left;}\n#main \n{margin-left: 216px;}\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@media screen and (min-width: 480px) {\nbody {\n# TODO: Complete this line\n}\n}",
      "solution": "@media screen and (min-width: 480px) {\nbody {\nbackground-color: lightgreen;\n}\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@media screen and (min-width: 480px) {\n#leftsidebar \n# TODO: Complete this line\n#main \n{margin-left: 216px;}\n}",
      "solution": "@media screen and (min-width: 480px) {\n#leftsidebar \n{width: 200px; float: left;}\n#main \n{margin-left: 216px;}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "32bbabec-7545-45da-9802-f2a6586f984f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3cb711e4-d28c-4c51-aad3-4d02b22ea436",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d8606f78-d8bb-4ca9-86c1-812e5e2f0920",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is resolution\nUsing media queries?",
      "options": [
        "some commonly used media features:\nValue\nDescription\norientation\nOrientation of the viewport",
        "None of the above.",
        "a popular technique for delivering a tailored style \nsheet to desktops",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of resolution\nUsing media queries is 'a popular technique for delivering a tailored style \nsheet to desktops'."
    },
    {
      "question": "What is CSS Common Media Features\nHere?",
      "options": [
        "None of the above.",
        "a popular technique for delivering a tailored style \nsheet to desktops",
        "None of the above.",
        "some commonly used media features:\nValue\nDescription\norientation\nOrientation of the viewport"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of CSS Common Media Features\nHere is 'some commonly used media features:\nValue\nDescription\norientation\nOrientation of the viewport'."
    }
  ],
  "summary": "This tutorial covers CSSMedia Queries concepts and techniques. You'll learn how to use CSSMedia Queries effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSMedia Queries and how to apply it in your projects."
}