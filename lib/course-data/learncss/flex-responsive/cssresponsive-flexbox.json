{
  "id": "22d247e6-c73a-48f0-b702-1c09d7c3c0e8",
  "title": "CSSResponsive Flexbox",
  "slug": "cssresponsive-flexbox",
  "metadata": {
    "description": "Learn about CSSResponsive Flexbox with clear explanations and practical examples.",
    "keywords": [
      "c",
      "flex",
      "responsive",
      "column",
      "layout",
      "flexbox",
      "create",
      "screen",
      "example",
      "media",
      "different"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnCSS",
    "subcategory": "Flex Responsive"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nResponsive Flexbox",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Responsive Flexbox\nYou learned from the\nCSS Media Queries\nchapter that you can use media queries to create different layouts for different screen sizes and devices.\nLaptop and Desktops:\n1\n2\n3\nMobile\nphones\nand Tablets:\n1\n2\n3\nFor example, if you want to create a two-column layout for most screen sizes, and \na one-column layout for small screen sizes (such as phones \nand tablets), you can change the\nflex-direction\nfrom\nrow\nto\ncolumn\nat a specific breakpoint (800px in the example below):\nExample\n.flex-container {\ndisplay: flex;\nflex-direction: row;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-container {\nflex-direction: column;\n}\n}\n\nAnother way is to change the percentage of the\nflex\nproperty of the flex items \nto create different layouts for different screen sizes. Note that we \nalso have to include\nflex-wrap: wrap;\non the flex container for this example to \nwork:\nExample\n.flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}\n.flex-item-left {\nflex: 50%;\n}\n.flex-item-right {\nflex: 50%;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-item-right, \n  .flex-item-left {\nflex: 100%;\n}\n}\n\nResponsive Image Gallery using Flexbox\nUse flexbox to create a responsive image gallery that varies between four, \ntwo or full-width images, depending on screen size:\n\nResponsive Website using Flexbox\nUse flexbox to create a responsive website, containing a flexible navigation bar and flexible content:\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": ".flex-container {\ndisplay: flex;\nflex-direction: row;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-container {\nflex-direction: column;\n}\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": ".flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}\n.flex-item-left {\nflex: 50%;\n}\n.flex-item-right {\nflex: 50%;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-item-right, \n  .flex-item-left {\nflex: 100%;\n}\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": ".flex-container {\ndisplay: flex;\nflex-direction: row;\n}\n# TODO: Complete this line\n  layout */\n@media (max-width: 800px) {\n.flex-container {\nflex-direction: column;\n}\n}",
      "solution": ".flex-container {\ndisplay: flex;\nflex-direction: row;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-container {\nflex-direction: column;\n}\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": ".flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}\n.flex-item-left {\nflex: 50%;\n}\n.flex-item-right {\nflex: 50%;\n}\n# TODO: Complete this line\n  layout */\n@media (max-width: 800px) {\n.flex-item-right, \n  .flex-item-left {\nflex: 100%;\n}\n}",
      "solution": ".flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}\n.flex-item-left {\nflex: 50%;\n}\n.flex-item-right {\nflex: 50%;\n}\n/* Responsive layout - makes a one column layout instead of a two-column \n  layout */\n@media (max-width: 800px) {\n.flex-item-right, \n  .flex-item-left {\nflex: 100%;\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "3c6c41d8-925c-4b39-8ea7-773b6fed3a7a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fbea8367-e100-459e-bf69-d1c0da6cec9e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d08cadea-11c7-4a73-b80e-afbcc099e382",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Another way?",
      "options": [
        "None of the above.",
        "to change the percentage of the\nflex\nproperty of the flex items \nto create different layouts for different screen sizes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Another way is 'to change the percentage of the\nflex\nproperty of the flex items \nto create different layouts for different screen sizes'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers CSSResponsive Flexbox concepts and techniques. You'll learn how to use CSSResponsive Flexbox effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSResponsive Flexbox and how to apply it in your projects."
}