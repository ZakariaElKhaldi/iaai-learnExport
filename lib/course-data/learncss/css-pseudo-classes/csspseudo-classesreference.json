{
  "id": "eb8ec462-8f13-4b23-8b53-796f331998cd",
  "title": "CSSPseudo-classesReference",
  "slug": "csspseudo-classesreference",
  "metadata": {
    "description": "Learn about CSSPseudo-classesReference with clear explanations and practical examples.",
    "keywords": [
      "selects",
      "element",
      "input",
      "elements",
      "child",
      "focus",
      "type",
      "first",
      "used",
      "form"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnCSS",
    "subcategory": "CSS Pseudo-classes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nPseudo-classes\nReference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "CSS Pseudo-classes\nA pseudo-class is used to define a special state of an element.\nFor example, it can be used to:\nStyle an element when a user moves the mouse over it\nStyle visited and unvisited links differently\nStyle an element when it gets focus\nStyle valid/invalid/required/optional form elements\nThe table below shows the different pseudo-classes in CSS:\nPseudo-class\nExamples\nExample description\n:active\na:active\nSelects the active link\n:any-link\na:anylink\narea:anylink\nSelects any <a> or <area> element with an href attribute\n:auto-fill\ninput:autofill\nSelects any <input> element with its value autofilled by the \n    browser\n:checked\ninput:checked\noption:checked\nMatches any <input> or <option> element that is checked\n:default\ninput:default\nbutton:default\noption:default\nSelects form elements that are default in a group of related elements\n:defined\n:defined\nSelects any element that has been defined (standard or custom \n    elements)\n:dir()\n:dir(ltr)\n:dir(rtl)\nSelects any element with the specified text direction\n:disabled\n:disabled\ninput:disabled\noption:disabled\nSelects any element that is disabled. Most used for form elements\n:empty\ndiv:empty\nSelects any element that has no children (including text nodes)\n:enabled\n:enabled\ninput:enabled\nSelects any element that is enabled. Most used for form elements\n:first\n@page :first\nRepresents the first page of a printed document (used with the @page \n    rule)\n:first-child\np:first-child\nli:first-child\nSelects the element that is the first child of its parent (among a group \n    of sibling elements)\n:first-of-type\np:first-of-type\nli:first-of-type\nSelects the first element of its type among a group of sibling elements\n:focus\ninput:focus\nselect:focus\nSelects the element that gets focus. Most used for form elements\n:focus-visible\nbutton:focus-visible\nSelects the element that gets focus (used to apply focus styles only \n    when the keyboard is used to focus something, not the mouse)\n:focus-within\nform:focus-within\nlabel:focus-within\nMatches an element if the element or any of its descendants gets focus\n:fullscreen\n:fullscreen\nSelects any element that is currently in full-screen mode\n:has()\nh2:has(+p)\nSelects h2 elements that are immediately followed by a p element, and \n    applies the style to h2\n:hover\na:hover\np:hover\nSelects element on mouse over\n:in-range\ninput:in-range\nSelect any <input> element with a value within the specified range \n    limit\n:indeterminate\ninput:indeterminate\nSelects any form element that is in an indeterminate state\n:invalid\ninput:invalid\nfieldset:invalid\nSelects invalid form elements\n:is()\n:is(ul, ol)\nSelects all <ul> and <ol>elements\n:lang()\np:lang(it)\nSelects any <p> element with a lang attribute equal to \"it\" (Italian)\n:last-child\nli:last-child\nSelects any <li> element that is the last child of its parent\n:last-of-type\np:last-of-type\nSelects any <p> element that is the last <p> element of its parent\n:left\n@page :left\nRepresents all left-hand pages of a printed document (used with the @page \n    rule)\n:link\na:link\nSelects any unvisited link\n:modal\n:modal\nSelects the element that is in a modal state\n:not()\n:not(p)\nSelects any element that is not a <p> element\n:nth-child()\np:nth-child(2)\nSelects any <p> element that is the second child of its parent\n:nth-last-child()\np:nth-last-child(2)\nSelects any <p> element that is the second child of its parent, counting from the \n    end\n:nth-last-of-type()\np:nth-last-of-type(2)\nSelects any <p> element that is the second <p> element of its parent, counting from the \n    end\n:nth-of-type()\np:nth-of-type(2)\nSelects any <p> element that is the second <p> element of its parent\n:only-child\np:only-child\nSelects any <p> element that is the only child of its parent\n:only-of-type\np:only-of-type\nSelects any <p> element that is the only <p> element of its parent\n:optional\ninput:optional\nselect:optional\ntextarea:optional\nSelects any <input>, <select>, or <textarea> elements without \n    a \"required\" attribute\n:out-of-range\ninput:out-of-range\nSelects any <input> element with a value outside the specified range \n    limit\n:placeholder-shown\ninput:placeholder-shown\ntextarea:placeholder-shown\nSelects any <input> or <textarea> element that is currently displaying \n    placeholder text\n:popover-open\n:popover-open\nSelects any element that is in a showing popover state\n:read-only\ninput:read-only\nSelects input elements with the \"readonly\" attribute specified\n:read-write\ninput:read-write\nSelects editable input elements\n:required\ninput:required\nSelects input elements with the \"required\" attribute specified\n:right\n@page :right\nRepresents all right-hand pages of a printed document (used with the @page \n    rule)\n:root\n:root\nSelects the document's root element\n:scope\n:scope\nSelects elements that are a reference point, or scope, for selectors to \n    match against\n:state()\n:state()\nSelects custom elements that have the specified custom state\n:target\n:target\nSelects the current active target element\n:user-invalid\n:user-invalid\nSelects any form element with an invalid value (after the user have \n    interacted with it)\n:user-valid\n:user-valid\nSelects any form element with a valid value (after the user have \n    interacted with it)\n:valid\ninput:valid\nSelects all input elements with a valid value\n:visited\na:visited\narea:visited\nSelects all visited links\n:where()\n:where(ol, ul)\nSelects all <ul> and <ol>elements\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7f6d9150-823c-478e-8630-9ec8cbf512db",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "4a137fb4-f3b6-40e2-a448-3309aae4c5a6",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "1b3e1d6b-3002-436f-b2e5-57971695ec26",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is class?",
      "options": [
        "used to define a special state of an element",
        "None of the above.",
        "None of the above.",
        "checked\n:default\ninput:default\nbutton:default\noption:default\nSelects form elements that are default in a group of related elements\n:defined\n:defined\nSelects any element that has been defined (standard or custom \n    elements)\n:dir()\n:dir(ltr)\n:dir(rtl)\nSelects any element with the specified text direction\n:disabled\n:disabled\ninput:disabled\noption:disabled\nSelects any element that is disabled"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of class is 'used to define a special state of an element'."
    },
    {
      "question": "What is element that?",
      "options": [
        "used to define a special state of an element",
        "checked\n:default\ninput:default\nbutton:default\noption:default\nSelects form elements that are default in a group of related elements\n:defined\n:defined\nSelects any element that has been defined (standard or custom \n    elements)\n:dir()\n:dir(ltr)\n:dir(rtl)\nSelects any element with the specified text direction\n:disabled\n:disabled\ninput:disabled\noption:disabled\nSelects any element that is disabled",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of element that is 'checked\n:default\ninput:default\nbutton:default\noption:default\nSelects form elements that are default in a group of related elements\n:defined\n:defined\nSelects any element that has been defined (standard or custom \n    elements)\n:dir()\n:dir(ltr)\n:dir(rtl)\nSelects any element with the specified text direction\n:disabled\n:disabled\ninput:disabled\noption:disabled\nSelects any element that is disabled'."
    }
  ],
  "summary": "This tutorial covers CSSPseudo-classesReference concepts and techniques. You'll learn how to use CSSPseudo-classesReference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSPseudo-classesReference and how to apply it in your projects."
}