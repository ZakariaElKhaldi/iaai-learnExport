{
  "id": "e8443b59-957b-4b0b-841e-aba32c251df2",
  "title": "CSS - The @property Rule",
  "slug": "css-the-property-rule",
  "metadata": {
    "description": "Learn about CSS - The @property Rule with clear explanations and practical examples.",
    "keywords": [
      "c",
      "property",
      "color",
      "value",
      "custom",
      "example",
      "inherits",
      "initial",
      "syntax",
      "lightgray",
      "rule"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnCSS",
    "subcategory": "CSS @property"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS - The @property Rule",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "CSS @property Rule\nThe\n@property\nrule is used to define custom \nCSS properties directly in the stylesheet without having to run any \nJavaScript.\nThe\n@property\nrule has data type checking \nand constraining, sets default values, and defines whether the property can \ninherit values or not.\nExample of defining a custom property:\n@property --myColor {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}\nThe definition above says that --myColor is a color property, it can inherit values from parent elements, and its default value is lightgray.\nTo use the custom property in CSS, we use the\nvar()\nfunction:\nbody {\nbackground-color: var(--myColor);\n}\nThe benefits of using\n@property\n:\nType checking:\nYou must specify the data type of the \n  custom property, such as <number>, <color>, <length>, etc. This prevents \n  errors and ensures that custom properties are used correctly\nSet default value:\nYou set a default value for the custom property. \n  This ensures that if an invalid value is assigned later, the browser uses the \n  defined fallback value\nSet inheritance behavior:\nYou must specify whether the custom property \n  will, by default, inherit values from its parent elements or not\nBrowser Support\nThe numbers in the table specifies the first browser version that fully supports the \nrule.\nProperty\n@property\n85\n85\n128\n16.4\n71\nSimple @property Example\nThe following example defines two custom properties: my-bg-color and \nmy-txt-color. Then, the div uses the custom properties in background-color and \ncolor:\nExample\n@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\n@property --my-txt-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: darkblue;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\ncolor: var(--my-txt-color);\n}\n\nAnother @property Example\nIn the following example we use the default custom property on the <div> \nelement. Then we override the custom property in class .fresh and class .nature \n(by setting some other colors), and it works perfectly fine:\nExample\n@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: rgb(120, \n  180, 30);\n}\n\nAvoid Error with Type Checking and Fallback Value\nIn the following example we set the custom property in class .nature \nto an integer. This is not valid, and the browser will use the fallback color, \nwhich is defined in the initial-value property (lightgray):\nExample\n@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: \n  2;\n}\n\nUse of the inherits Value\nIn the following example we will set the inherits value to false. This means \nthat the custom property \n  WILL NOT inherit values from its parent elements. Look at the result:\nExample\n@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  false;\ninitial-value: lightgray;\n}\n\nThe \nthat the custom property \n  WILL inherit values from its parent elements. Look at the result:\nExample\n@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\n\nCreate Smooth Animation with @property\nA complete new opportunity you can achieve with the\n@property\nrule, is to animate something that could not be animated before: Gradients. Look at the \nfollowing example:\nExample\nSpecify two custom properties for a gradient:\n@property --startColor {\nsyntax: \"<color>\";\ninitial-value: #EADEDB;\ninherits: false;\n}\n@property --endColor {\nsyntax: \n    \"<color>\";\ninitial-value: #BC70A4;\ninherits: false;\n}\n\nCSS @property Rule\nProperty\nDescription\n@property\nDefine custom CSS properties directly in the stylesheet without having to run any JavaScript\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\n@property --my-txt-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: darkblue;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\ncolor: var(--my-txt-color);\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: rgb(120, \n  180, 30);\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: \n  2;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  false;\ninitial-value: lightgray;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "@property --startColor {\nsyntax: \"<color>\";\ninitial-value: #EADEDB;\ninherits: false;\n}\n@property --endColor {\nsyntax: \n    \"<color>\";\ninitial-value: #BC70A4;\ninherits: false;\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\n@property --my-txt-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: darkblue;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\ncolor: var(--my-txt-color);\n# TODO: Complete this line",
      "solution": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\n@property --my-txt-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: darkblue;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\ncolor: var(--my-txt-color);\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n# TODO: Complete this line\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: rgb(120, \n  180, 30);\n}",
      "solution": "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: \n  true;\ninitial-value: lightgray;\n}\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n.fresh {\n--my-bg-color: #ff6347;\n}\n.nature {\n--my-bg-color: rgb(120, \n  180, 30);\n}"
    }
  ],
  "related_topics": [
    {
      "id": "b3fe2e1a-ca21-4f26-8298-da887efd8da7",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e0f10a66-5371-4c2e-bab9-6674aa135617",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e73a0c0b-2c90-4774-871f-87dd6941dfd6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is property\nrule?",
      "options": [
        "None of the above.",
        "used to define custom \nCSS properties directly in the stylesheet without having to run any \nJavaScript",
        "a color property",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of property\nrule is 'used to define custom \nCSS properties directly in the stylesheet without having to run any \nJavaScript'."
    },
    {
      "question": "What is myColor?",
      "options": [
        "used to define custom \nCSS properties directly in the stylesheet without having to run any \nJavaScript",
        "None of the above.",
        "None of the above.",
        "a color property"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of myColor is 'a color property'."
    }
  ],
  "summary": "This tutorial covers CSS - The @property Rule concepts and techniques. You'll learn how to use CSS - The @property Rule effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSS - The @property Rule and how to apply it in your projects."
}