{
  "id": "6838bc21-183a-4bb8-8a26-f25db475a39f",
  "title": "Node.jsMongoDBQuery",
  "slug": "nodejsmongodbquery",
  "metadata": {
    "description": "Learn about Node.jsMongoDBQuery with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "query",
      "result",
      "address",
      "find",
      "mongoclient",
      "mongodb",
      "name",
      "documents",
      "example",
      "function"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRaspberry Pi",
    "subcategory": "MongoDB Query"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nMongoDB\nQuery",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Filter the Result\nWhen finding documents in a collection, you can filter the result by using a \nquery object.\nThe first argument of the\nfind()\nmethod \nis a query object, and is used to limit the search.\nExample\nFind documents with the address \"Park Lane 38\":\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address: \"Park Lane 38\" };\ndbo.collection(\"customers\").find(\nquery\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nSave the code above in a file called \"demo_mongodb_query.js\" and run the file:\nRun \"demo_mongodb_query.js\"\nC:\\Users\\\nYour Name\n>node demo_mongodb_query.js\nWhich will give you this result:\n[\n{ _id: 58fdbf5c0ef8a50b4cdd9a8e \n  , name: 'Ben', address: 'Park Lane 38' }\n]\nFilter With Regular Expressions\nYou can write regular expressions to find exactly what you are searching for.\nRegular expressions can only be used to query\nstrings\n.\nTo find only the documents where the \"address\" field starts with the letter \"S\", use the regular \nexpression\n/^S/\n:\nExample\nFind documents where the address starts with the letter \"S\":\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address:\n/^S/\n};\ndbo.collection(\"customers\").find(query).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nSave the code above in a file called \"demo_mongodb_query_s.js\" and run the file:\nRun \"demo_mongodb_query_s.js\"\nC:\\Users\\\nYour Name\n>node demo_mongodb_query_s.js\nWhich will give you this result:\n[\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331' },\n{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633' }\n]\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address: \"Park Lane 38\" };\ndbo.collection(\"customers\").find(\nquery\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "C:\\Users\\\nYour Name\n>node demo_mongodb_query.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "[\n{ _id: 58fdbf5c0ef8a50b4cdd9a8e \n  , name: 'Ben', address: 'Park Lane 38' }\n]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address:\n/^S/\n};\ndbo.collection(\"customers\").find(query).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "C:\\Users\\\nYour Name\n>node demo_mongodb_query_s.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "[\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331' },\n{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633' }\n]",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address: \"Park Lane 38\" };\ndbo.collection(\"customers\").find(\nquery\n).toArray(function(err, result) {\n# TODO: Complete this line\nconsole.log(result);\ndb.close();\n});\n});",
      "solution": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\nvar query = { address: \"Park Lane 38\" };\ndbo.collection(\"customers\").find(\nquery\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\n# TODO: Complete this line\n>node demo_mongodb_query.js",
      "solution": "C:\\Users\\\nYour Name\n>node demo_mongodb_query.js"
    }
  ],
  "related_topics": [
    {
      "id": "b6150abe-0662-417e-9bba-b67e8ec24110",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "48854f9c-12aa-4a32-b6f4-64c7c4814cf7",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f9988b68-9a61-443f-9ff4-263bf8bc1003",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "searching for",
        "a query object",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of method is 'a query object'."
    },
    {
      "question": "What is Filter With Regular Expressions\nYou can write regular expressions to find exactly what you?",
      "options": [
        "None of the above.",
        "a query object",
        "None of the above.",
        "searching for"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Filter With Regular Expressions\nYou can write regular expressions to find exactly what you is 'searching for'."
    }
  ],
  "summary": "This tutorial covers Node.jsMongoDBQuery concepts and techniques. You'll learn how to use Node.jsMongoDBQuery effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsMongoDBQuery and how to apply it in your projects."
}