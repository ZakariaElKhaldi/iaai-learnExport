{
  "id": "7e82abda-bd89-47fc-9720-f556c20b5ff5",
  "title": "Node.js andRaspberry Pi - Webserver with WebSocket",
  "slug": "nodejs-andraspberry-pi-webserver-with-websocket",
  "metadata": {
    "description": "Learn about Node.js andRaspberry Pi - Webserver with WebSocket with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "html",
      "server",
      "socket",
      "http",
      "function",
      "require",
      "webserver",
      "data",
      "light",
      "index"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 6,
    "category": "LearnRaspberry Pi",
    "subcategory": "RasPi WebSocket"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js and\nRaspberry Pi - Webserver with WebSocket",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is WebSocket?\nWebSocket enables bidirectional communication in real time over the web.\nWebSocket can be run together with a normal HTTP server. You can click a button in a web browser, and enable a GPIO on your Raspberry Pi which turns on a light in your house. All in real time, and with communication going both ways!\nIn this chapter, we will set up a web server with WebSocket. Then create a browser UI to interact with our earlier example of\nturning a LED on and off with a button\n.\nWhat Do I Need?\nFor this tutorial you need a Raspberry Pi. In our examples we use a a Raspberry Pi 3, \nbut this tutorial should work for most versions.\nFor this you need:\nA Raspberry Pi with Raspian, internet, SSH, with Node.js installed\nThe\nonoff module\nfor Node.js\nThe\nsocket.io module\nfor Node.js\n1 x\nBreadboard\n1 x\n68 Ohm resistor\n1 x\n1k Ohm resistor\n1 x\nThrough Hole LED\n1 x\nPush Button\n4 x\nFemale to male jumper wires\n1 x\nMale to Male jumper wires\nClick the links in the list above for descriptions of the different \ncomponents.\nNote:\nThe resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.\nCompared to our earlier example, the only new thing we need is to set up a \nweb server, and install the socket.io module.\nWebserver for Raspberry Pi and Node.js\nFollowing the earlier chapters in this Node.js tutorial, lets set up a web \nserver that can serve HTML files.\nIn our \"nodetest\" directory create a new directory we can use for static html files:\npi@w3demopi:~/nodetest $ \n  mkdir public\nNow lets set up a webserver. Create a Node.js file that opens the requested \nfile and returns the content to the client. If anything goes wrong, throw a 404 \nerror.\npi@w3demopi:~/nodetest $ \n  nano webserver.js\nwebserver.js:\nvar http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}\nGo to the folder \"public\":\npi@w3demopi:~/nodetest $ \n  cd public\nAnd create a HTML file, index.html:\npi@w3demopi:~/nodetest/public $ \n  nano index.html\nindex.html:\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Control LED light</h1>\n<input \n    id=\"light\" type=\"checkbox\">LED\n</body>\n</html>\nThis file will not have any functionality yet. For now it is just a \nplaceholder. Lets see if the webserver is working:\npi@w3demopi:~/nodetest/public $ cd ..\npi@w3demopi:~/nodetest $ node webserver.js\nOpen the website in a browser using http://[RaspberryPi_IP]:8080/:\nThe webserver should now be up and running, and we can move on to the \nWebSocket part.\nInstall socket.io for Node.js\nWith the webserver set up, update your Raspberry Pi system packages to their latest versions.\nUpdate your system package list:\npi@w3demopi:~ $ sudo apt-get update\nUpgrade all your installed packages to their latest version:\npi@w3demopi:~ $ sudo apt-get dist-upgrade\nDoing this regularly will keep your Raspberry Pi installation up to date.\nTo download and install newest version of socket.io, use the following command:\npi@w3demopi:~ $ \n  npm install socket.io --save\nAdding WebSocket to our Webserver\nNow we can use WebSocket in our application. Lets update our index.html \nfile:\nindex.html:\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Control LED \n    light</h1>\n<p><input type=\"checkbox\" id=\"light\"></p>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script> \n    <!-- include socket.io client side script -->\n<script>\nvar socket = io(); \n    //load socket.io-client and connect to the host that serves the page\nwindow.addEventListener(\"load\", function(){ //when page loads\nvar \n    lightbox = document.getElementById(\"light\");\nlightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changes\nsocket.emit(\"light\", Number(this.checked)); \n    //send button status to server (as 1 or 0)\n});\n});\nsocket.on('light', \n    function (data) { //get button status from client\ndocument.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pi\nsocket.emit(\"light\", data); //send \n    push button status to back to server\n});\n</script>\n</body>\n</html>\nAnd our webserver.js file:\nwebserver.js:\nvar http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nvar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\nsocket.on('light', \n    function(data) { //get light switch status from client\nlightvalue = data;\nif (lightvalue) {\nconsole.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log\n}\n});\n});\nLets test the server:\npi@w3demopi:~ $ \n  node webserver.js\nOpen the website in a browser using http://[RaspberryPi_IP]:8080/:\nNow the server should output all the changes to the checkbox to the console \non the Raspberry Pi.\nThe client is sending the changes to the server, and the server is \nresponding.\nLets add the\npush button \ncontrolled LED\nfrom a \nAdding Hardware, and sending a response to the Client\nLets update our webserver.js file again. We will use a lot of the code from \nthe Pushbutton controlled LED chapter.\nwebserver.js:\nvar http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nvar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)\nvar Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIO\nvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    output\nvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) \n    { //create server\nfs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder\nif (err) {\nres.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\npushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton\nif (err) { //if an error\nconsole.error('There was an error', err); //output error message to console\nreturn;\n}\nlightvalue = value;\nsocket.emit('light', lightvalue); //send button status to client\n});\nsocket.on('light', function(data) { //get light switch status \n    from client\nlightvalue = data;\nif (lightvalue != LED.readSync()) { //only change LED if status has changed\nLED.writeSync(lightvalue); //turn LED on or off\n}\n});\n});\nprocess.on('SIGINT', function () { //on ctrl+c\nLED.writeSync(0); // Turn LED off\nLED.unexport(); // Unexport LED \n    GPIO to free resources\npushButton.unexport(); // Unexport Button \n    GPIO to free resources\nprocess.exit(); //exit completely\n});\nLets test the server:\npi@w3demopi:~ $ node webserver.js\nOpen the website in a browser using http://[RaspberryPi_IP]:8080/:\nNow the server should output all the changes to the checkbox to the console \non the Raspberry Pi.\nThe client is sending the changes to the server, and the server is \nresponding.\nEnd the program with\nCtrl+c\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<h1>Control LED light</h1>\n<input \n    id=\"light\" type=\"checkbox\">LED\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<h1>Control LED \n    light</h1>\n<p><input type=\"checkbox\" id=\"light\"></p>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script> \n    <!-- include socket.io client side script -->\n<script>\nvar socket = io(); \n    //load socket.io-client and connect to the host that serves the page\nwindow.addEventListener(\"load\", function(){ //when page loads\nvar \n    lightbox = document.getElementById(\"light\");\nlightbox.addEventListener(\"change\", function() { //add event listener for \n    when checkbox changes\nsocket.emit(\"light\", Number(this.checked)); \n    //send button status to server (as 1 or 0)\n});\n});\nsocket.on('light', \n    function (data) { //get button status from client\ndocument.getElementById(\"light\").checked = data; //change checkbox according \n    to push button on Raspberry Pi\nsocket.emit(\"light\", data); //send \n    push button status to back to server\n});\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nvar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\nsocket.on('light', \n    function(data) { //get light switch status from client\nlightvalue = data;\nif (lightvalue) {\nconsole.log(lightvalue); //turn LED on or off, for now we will just show it \n    in console.log\n}\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nvar io \n    = require('socket.io')(http) //require socket.io module and pass the http \n    object (server)\nvar Gpio = require('onoff').Gpio; //include onoff to \n    interact with the GPIO\nvar LED = new Gpio(4, 'out'); //use GPIO pin 4 as \n    output\nvar pushButton = new Gpio(17, 'in', 'both'); //use GPIO pin 17 as \n    input, and 'both' button presses, and releases should be handled\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) \n    { //create server\nfs.readFile(__dirname \n    + '/public/index.html', function(err, data) { //read file index.html in \n    public folder\nif (err) {\nres.writeHead(404, {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}\nio.sockets.on('connection', function (socket) {// WebSocket Connection\nvar lightvalue = 0; //static variable for current status\npushButton.watch(function (err, value) { //Watch for hardware interrupts on \n    pushButton\nif (err) { //if an error\nconsole.error('There was an error', err); //output error message to console\nreturn;\n}\nlightvalue = value;\nsocket.emit('light', lightvalue); //send button status to client\n});\nsocket.on('light', function(data) { //get light switch status \n    from client\nlightvalue = data;\nif (lightvalue != LED.readSync()) { //only change LED if status has changed\nLED.writeSync(lightvalue); //turn LED on or off\n}\n});\n});\nprocess.on('SIGINT', function () { //on ctrl+c\nLED.writeSync(0); // Turn LED off\nLED.unexport(); // Unexport LED \n    GPIO to free resources\npushButton.unexport(); // Unexport Button \n    GPIO to free resources\nprocess.exit(); //exit completely\n});",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\n# TODO: Complete this line\n});\n}",
      "solution": "var http = require('http').createServer(handler); //require http server, and \n    create server with function handler()\nvar fs = require('fs'); //require filesystem module\nhttp.listen(8080); //listen to port 8080\nfunction handler (req, res) { //create server\nfs.readFile(__dirname + '/public/index.html', function(err, data) { //read \n    file index.html in public folder\nif (err) \n    {\nres.writeHead(404, \n    {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from index.html\nreturn res.end();\n});\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n# TODO: Complete this line\n<body>\n<h1>Control LED light</h1>\n<input \n    id=\"light\" type=\"checkbox\">LED\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<body>\n<h1>Control LED light</h1>\n<input \n    id=\"light\" type=\"checkbox\">LED\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "82715808-2975-4153-be3b-235d18472e0d",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a552cd29-bdf3-488d-935e-5595c830ca7d",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f21c4ddb-e4fd-48e0-93d4-935a91cd04ee",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Webserver with WebSocket\n\nWhat?",
      "options": [
        "generally not critical what exact value you use",
        "WebSocket",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Webserver with WebSocket\n\nWhat is 'WebSocket'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "WebSocket",
        "None of the above.",
        "generally not critical what exact value you use"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'generally not critical what exact value you use'."
    }
  ],
  "summary": "Node.js and\nRaspberry Pi - Webserver with WebSocket"
}