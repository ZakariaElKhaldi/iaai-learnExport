{
  "id": "476b7932-1c45-457c-a1c8-73f7f6c37036",
  "title": "Node.jsRaspberry Pi - Components",
  "slug": "nodejsraspberry-pi-components",
  "metadata": {
    "description": "Learn about Node.jsRaspberry Pi - Components with clear explanations and practical examples.",
    "keywords": [
      "gpio",
      "used",
      "points",
      "raspberry",
      "pins",
      "breadboard",
      "connected",
      "light",
      "connect",
      "jumper"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRaspberry Pi",
    "subcategory": "RasPi Components"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Node",
      "content": ".js\nRaspberry Pi - Components\n\nWhat are Components?\nComponents are parts of a larger whole. In this chapter, we explain the different components we use in our tutorial.\nThe Raspberry Pi and GPIO Pins\nThis is an illustration of the Raspberry Pi 3.\nThe GPIO pins are the small \nred squares in two rows on the right side of the Raspberry Pi, on the actual Raspberry Pi they are small metal pins.\nInput pins are like switches that you can turn on or off from the outside \n  world (like a on/off light switch).\nOutput pins are like switches that the Raspberry Pi can turn on or off (like \nturning on/off a LED light).\nThe Raspberry Pi 3 has 26 GPIO pins, the rest of the pins are power, ground \nor \"other\".\nThe pin placements correspond with the table below.\nRaspberry Pi B+, 2, 3 & Zero\n3V3\n1\n2\n5V\nGPIO 2\n3\n4\n5V\nGPIO 3\n5\n6\nGND\nGPIO 4\n7\n8\nGPIO 14\nGND\n9\n10\nGPIO 15\nGPIO 17\n11\n12\nGPIO 18\nGPIO 27\n13\n14\nGND\nGPIO 22\n15\n16\nGPIO 23\n3V3\n17\n18\nGPIO 24\nGPIO 10\n19\n20\nGND\nGPIO 9\n21\n22\nGPIO 25\nGPIO 11\n23\n24\nGPIO 8\nGND\n25\n26\nGPIO 7\nDNC\n27\n28\nDNC\nGPIO 5\n29\n30\nGND\nGPIO 6\n31\n32\nGPIO 12\nGPIO 13\n33\n34\nGND\nGPIO 19\n35\n36\nGPIO 16\nGPIO 26\n37\n38\nGPIO 20\nGND\n39\n40\nGPIO 21\nLegend\nPhysical Pin Number\nPower +\nGround\nUART\nI2C\nSPI\nGPIO\nDo Not Connect\nThe Breadboard\nA breadboard is used for prototyping electronics, it allows you to create \ncircuits without soldering. It is basically a plastic board, with a grid of \ntie-points (holes). Inside the board there are metal strips connecting the \ndifferent tie-points in specific ways.\nIn the illustration below we have highlighted some of the sections with different colors. This is to show you how the grid is connected.\nThe different sections of the breadboard:\nOn the left, and right, side there are 2 columns of tie-points. All the \n    tie points in each of these columns are connected.",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The Power Bus",
      "content": "- The columns highlighted with red. There are usually used \n    to connect power to the Breadboard. Since the entire column is connected, \n    you can connect power to any of the tie-points in the column.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The Ground Bus",
      "content": "- The columns highlighted with blue. There are usually \n    used to connect Ground to the Breadboard. Since the entire column is \n    connected, you can connect ground to any of the tie-points in the column.\nRows of connected Tie-Points\n- The rows highlighted with green. The \n    tie-points of each of these rows are connected, but not the entire row! The \n    left side tie-points are connected (A-B-C-D-E), and the right side \n    tie-points are connected (F-G-H-I-J).\nIn the center of the Breadboard there is a Trench, this separates the \n    left and right rows. The width of the trench is designed so that many \n    Integrated Circuits fit across it.\nOther Electrical Components\nThrough Hole LED\nLight emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. In our example we use a Through Hole LED. \n    They have a positive (called Anode), and a negative (called Cathode) pin. The \n    longer leg on the LED should indicate the positive pin.\nRGB LED\nLight emitting diode (LED). An LED is a diode that emits light when a voltage is applied to it. An RGB LED has 4 pins. One for each color (R = Red, G = Green, and, B = Blue), and a common cathode/anode. This one LED can display the pure colors, or with PWD to modulate and mix colors.\nPush Button\nA push button is a type of switch. A switch makes or breaks a connection an an electric circuit.\nJumper Wire - Female to Male\nShort pieces of wire called jumper wires are used to make connections. \n    Female to Male jumper wires can be used to connect from the GPIO on the \n    Raspberry Pi to the Breadboard.\nJumper Wire - Male to Male\nShort pieces of wire called jumper wires are used to make connections. \n    Male to Male jumper wires can be used to make connections between different \n    parts of the Breadboard.\nResistor - 68 Ohm\nResistors are used to reduce current, adjust signal levels, etc. This is \n    a 68 Ohm resistor.\nResistor - 220 Ohm\nResistors are used to reduce current, adjust signal levels, etc. This is \n    a 220 Ohm resistor.\nResistor - 1k Ohm\nResistors are used to reduce current, adjust signal levels, etc. This is \n    a 1k Ohm resistor.\nNode.js Modules\nonoff - GPIO access and interrupt detection with Node.js\ndocumentation\nSocket.IO - real-time bidirectional event-based communication\ndocumentation\npigpio - wrapper for pigpio C library. Enables GPIO, PWM, servo control, state change notification and interrupt handling with Node.js\ndocumentation\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "5eeacd74-88a5-4313-a0e5-9ae866ba751a",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b8a24eb5-0e90-4793-8716-2037d897103b",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b2caa699-dc20-4672-9f3c-9b17e208e24a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Components\n\nWhat?",
      "options": [
        "None of the above.",
        "parts of a larger whole",
        "None of the above.",
        "Components"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Components\n\nWhat is 'Components'."
    },
    {
      "question": "What is Components?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Components",
        "parts of a larger whole"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Components is 'parts of a larger whole'."
    }
  ],
  "summary": "This tutorial covers Node.jsRaspberry Pi - Components concepts and techniques. You'll learn how to use Node.jsRaspberry Pi - Components effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsRaspberry Pi - Components and how to apply it in your projects."
}