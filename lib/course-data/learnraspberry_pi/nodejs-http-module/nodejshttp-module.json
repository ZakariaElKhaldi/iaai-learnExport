{
  "id": "7c249bdf-bca0-4188-b419-766dc35b1ed1",
  "title": "Node.jsHTTP Module",
  "slug": "nodejshttp-module",
  "metadata": {
    "description": "Learn about Node.jsHTTP Module with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "http",
      "example",
      "node",
      "module",
      "require",
      "server",
      "createserver",
      "object",
      "function",
      "file"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRaspberry Pi",
    "subcategory": "Node.js HTTP Module"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nHTTP Module",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Built-in HTTP Module\nNode.js has a built-in module called HTTP, which allows Node.js to transfer \ndata over the Hyper Text Transfer Protocol (HTTP).\nTo include the HTTP module, use the\nrequire()\nmethod:\nvar http = require('http');\nNode.js as a Web Server\nThe HTTP module can create an HTTP server that listens to \nserver ports and gives a response back to \nthe client.\nUse the\ncreateServer()\nmethod to create an \nHTTP server:\nExample\nvar http = require('http');\n//create a server object:\nhttp.createServer(function \n  (req, res) {\nres.write('Hello World!'); //write a response to the \n  client\nres.end(); //end the response\n}).listen(8080); //the \n  server object listens on port 8080\nRun example \u00bb\nThe function passed into the\nhttp.createServer()\nmethod, will be executed when someone tries to access the \ncomputer on port 8080.\nSave the code above in a file called \"demo_http.js\", and initiate \nthe file:\nInitiate demo_http.js:\nC:\\Users\\\nYour Name\n>node demo_http.js\nIf you have followed the same steps on your computer, you will see the same result as the example:\nhttp://localhost:8080\nAdd an HTTP Header\nIf the response from the HTTP server is supposed to be displayed as HTML, you \nshould include an HTTP header with the correct content type:\nExample\nvar http = require('http');\nhttp.createServer(function \n  (req, res) {\nres.writeHead(200, \n  {'Content-Type': 'text/html'});\nres.write('Hello \n  World!');\nres.end();\n}).listen(8080);\nRun example \u00bb\nThe first argument of the\nres.writeHead()\nmethod is the status code, 200 means \nthat \nall is OK, the second argument is an object containing the response headers.\nRead the Query String\nThe function passed into the\nhttp.createServer()\nhas a\nreq\nargument that represents the request from the \nclient, as an object (http.IncomingMessage object).\nThis object has a property called \"url\" which holds the \npart of the url that comes after the domain name:\ndemo_http_url.js\nvar http = require('http');\nhttp.createServer(function \n  (\nreq\n, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(\nreq.url\n);\nres.end();\n}).listen(8080);\nSave the code above in a file called \"demo_http_url.js\" and \ninitiate the file:\nInitiate demo_http_url.js:\nC:\\Users\\\nYour Name\n>node demo_http_url.js\nIf you have followed the same steps on your computer, you should see two \ndifferent results when opening these two addresses:\nhttp://localhost:8080/summer\nWill produce this result:\n/summer\nRun example \u00bb\nhttp://localhost:8080/winter\nWill produce this result:\n/winter\nRun example \u00bb\nSplit the Query String\nThere are built-in modules to easily split the query string into readable \nparts, such as the URL module.\nExample\nSplit the query string into readable parts:\nvar http = require('http');\nvar url = require('url');\nhttp.createServer(function (req, res) {\nres.writeHead(200, \n    {'Content-Type': 'text/html'});\nvar q = url.parse(req.url, \n    true).query;\nvar txt =\nq.year\n+ \" \" +\nq.month\n;\nres.end(txt);\n}).listen(8080);\nSave the code above in a file called \"demo_querystring.js\" and \ninitiate the file:\nInitiate demo_querystring.js:\nC:\\Users\\\nYour Name\n>node demo_querystring.js\nThe address:\nhttp://localhost:8080/?year=2017&month=July\nWill produce this result:\n2017 July\nRun example \u00bb\nRead more about the URL module in the\nNode.js URL \nModule\nchapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var http = require('http');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "var http = require('http');\n//create a server object:\nhttp.createServer(function \n  (req, res) {\nres.write('Hello World!'); //write a response to the \n  client\nres.end(); //end the response\n}).listen(8080); //the \n  server object listens on port 8080",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "C:\\Users\\\nYour Name\n>node demo_http.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var http = require('http');\nhttp.createServer(function \n  (req, res) {\nres.writeHead(200, \n  {'Content-Type': 'text/html'});\nres.write('Hello \n  World!');\nres.end();\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "var http = require('http');\nhttp.createServer(function \n  (\nreq\n, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(\nreq.url\n);\nres.end();\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "C:\\Users\\\nYour Name\n>node demo_http_url.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "/summer",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "/winter",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "var http = require('http');\nvar url = require('url');\nhttp.createServer(function (req, res) {\nres.writeHead(200, \n    {'Content-Type': 'text/html'});\nvar q = url.parse(req.url, \n    true).query;\nvar txt =\nq.year\n+ \" \" +\nq.month\n;\nres.end(txt);\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "C:\\Users\\\nYour Name\n>node demo_querystring.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "2017 July",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var http = require('http');"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var http = require('http');\n//create a server object:\nhttp.createServer(function \n  (req, res) {\nres.write('Hello World!'); //write a response to the \n  client\nres.end(); //end the response\n}).listen(8080); //the \n# TODO: Complete this line",
      "solution": "var http = require('http');\n//create a server object:\nhttp.createServer(function \n  (req, res) {\nres.write('Hello World!'); //write a response to the \n  client\nres.end(); //end the response\n}).listen(8080); //the \n  server object listens on port 8080"
    }
  ],
  "related_topics": [
    {
      "id": "05cebc6d-3120-45b4-bd00-515185392a29",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "94e6fad4-ee4b-4f57-8e01-6fe8cd4c10b1",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b90851ec-bfc8-4ecc-836b-41d8447be0b6",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Add an HTTP Header\nIf the response from the HTTP server?",
      "options": [
        "the status code",
        "None of the above.",
        "supposed to be displayed as HTML",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Add an HTTP Header\nIf the response from the HTTP server is 'supposed to be displayed as HTML'."
    },
    {
      "question": "What is method?",
      "options": [
        "None of the above.",
        "None of the above.",
        "supposed to be displayed as HTML",
        "the status code"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'the status code'."
    }
  ],
  "summary": "This tutorial covers Node.jsHTTP Module concepts and techniques. You'll learn how to use Node.jsHTTP Module effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsHTTP Module and how to apply it in your projects."
}