{
  "id": "c63c651c-9bd4-40a4-900e-cb4c9a6d534b",
  "title": "Node.jsModules",
  "slug": "nodejsmodules",
  "metadata": {
    "description": "Learn about Node.jsModules with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "module",
      "modules",
      "http",
      "node",
      "include",
      "file",
      "example",
      "require",
      "function",
      "create"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRaspberry Pi",
    "subcategory": "Node.js Modules"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nModules",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is a Module in Node.js?\nConsider modules to be the same as JavaScript libraries.\nA set of functions you want to include in your application.\nBuilt-in Modules\nNode.js has a set of built-in modules which you can use without any further \ninstallation.\nLook at our\nBuilt-in Modules Reference\nfor a \ncomplete list of modules.\nInclude Modules\nTo include a module, use the\nrequire()\nfunction with the name of the module:\nvar http = require('http');\nNow your application has access to the HTTP module, and is able to create a server:\nhttp.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.end('Hello World!');\n}).listen(8080);\nCreate Your Own Modules\nYou can create your own modules, and easily include them in your applications.\nThe following example creates a module that returns a date and time object:\nExample\nCreate a module that returns the current date and time:\nexports.myDateTime = function () {\nreturn Date();\n};\nUse the\nexports\nkeyword to make properties and methods available outside the module file.\nSave the code above in a file called \"myfirstmodule.js\"\nInclude Your Own Module\nNow you can include and use the module in any of your Node.js files.\nExample\nUse the module \"myfirstmodule\" in a Node.js file:\nvar http = require('http');\nvar dt = require('./myfirstmodule');\nhttp.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(\"The date and time are currently: \" +\ndt.myDateTime()\n);\nres.end();\n}).listen(8080);\nRun example \u00bb\nNotice that we use\n./\nto locate the module, that means that the \nmodule is located in the same folder as the Node.js file.\nSave the code above in a file called \"demo_module.js\", and initiate the file:\nInitiate demo_module.js:\nC:\\Users\\\nYour Name\n>node demo_module.js\nIf you have followed the same steps on your computer, you will see the same result as the example:\nhttp://localhost:8080\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var http = require('http');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "http.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.end('Hello World!');\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "exports.myDateTime = function () {\nreturn Date();\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var http = require('http');\nvar dt = require('./myfirstmodule');\nhttp.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(\"The date and time are currently: \" +\ndt.myDateTime()\n);\nres.end();\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "C:\\Users\\\nYour Name\n>node demo_module.js",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var http = require('http');"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "http.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\n# TODO: Complete this line\n}).listen(8080);",
      "solution": "http.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.end('Hello World!');\n}).listen(8080);"
    }
  ],
  "related_topics": [
    {
      "id": "5a155d03-b995-41a4-bee2-3c0bffbf1519",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0529c59f-856a-4f8d-852c-3d7022705a80",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "10b2a7a9-59e4-4309-816a-ba7be387529d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is js\nModules\n\nWhat?",
      "options": [
        "a Module in Node",
        "None of the above.",
        "None of the above.",
        "able to create a server:\nhttp"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of js\nModules\n\nWhat is 'a Module in Node'."
    },
    {
      "question": "What is and?",
      "options": [
        "a Module in Node",
        "able to create a server:\nhttp",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and is 'able to create a server:\nhttp'."
    }
  ],
  "summary": "This tutorial covers Node.jsModules concepts and techniques. You'll learn how to use Node.jsModules effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsModules and how to apply it in your projects."
}