{
  "title": "C Memory Management (Memory Allocation)",
  "url": "https://www.w3schools.com/c/c_memory_management.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C Memory Management",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Memory management is the process of handling how much memory a program uses through different operations.",
      "html": "<p class=\"intro\">Memory management is the process of handling how much memory a program uses through different operations.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Memory in C",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Understanding how memory works in C is important. When you create a basic variable, C will automatically reserve space for that variable. An int variable for example, will typically occupy 4 bytes of memory, while a double variable will occupy 8 bytes of memory.",
      "html": "<p>Understanding how memory works in C is important. When you create a basic variable, C will automatically reserve space for that variable. An <code>int</code> variable for example, will typically occupy 4 bytes of memory, while a <code>double</code> variable will occupy 8 bytes of memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can use the sizeof operator to find the size of different types:",
      "html": "<p>You can use the <code>sizeof</code> operator to find the size of different types:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_sizeof",
        "syntaxHighlighting": [
          {
            "text": "\n  int myInt;float myFloat;double myDouble;char myChar;\n  printf(\"%lu\\n\", sizeof(myInt));\u00a0\u00a0\u00a0\u00a0\u00a0 // 4 bytesprintf(\"%lu\\n\", sizeof(myFloat));\u00a0\u00a0\u00a0 \n  // 4 bytes\n  printf(\"%lu\\n\", sizeof(myDouble));\u00a0\u00a0 // 8 bytesprintf(\"%lu\\n\", sizeof(myChar));\u00a0\u00a0\u00a0\u00a0 // 1 byte ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "float",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "double",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "char",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\"%lu\\n\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "// 4 bytes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\"%lu\\n\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "// 4 bytes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\"%lu\\n\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "// 8 bytes",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\"%lu\\n\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "// 1 byte ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int myInt;float myFloat;double myDouble;char myChar;\nprintf(\"%lu\\n\", sizeof(myInt));\u00a0\u00a0\u00a0\u00a0\u00a0 // 4 bytesprintf(\"%lu\\n\", sizeof(myFloat));\n// 4 bytes\nprintf(\"%lu\\n\", sizeof(myDouble));\u00a0\u00a0 // 8 bytesprintf(\"%lu\\n\", sizeof(myChar));\u00a0\u00a0\u00a0\u00a0 // 1 byte",
      "syntax_highlighting": [
        {
          "text": "\n int myInt;float myFloat;double myDouble;char myChar;\n printf(\"%lu\\n\", sizeof(myInt));\u00a0\u00a0\u00a0\u00a0\u00a0 // 4 bytesprintf(\"%lu\\n\", sizeof(myFloat));\u00a0\u00a0\u00a0 \n // 4 bytes\n  printf(\"%lu\\n\", sizeof(myDouble));\u00a0\u00a0 // 8 bytesprintf(\"%lu\\n\", sizeof(myChar));\u00a0\u00a0\u00a0\u00a0 // 1 byte ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "float",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "double",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "char",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\"%lu\\n\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "// 4 bytes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\"%lu\\n\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "// 4 bytes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\"%lu\\n\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "// 8 bytes",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\"%lu\\n\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "// 1 byte ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> myInt;<br/><span class=\"javakeywordcolor\" style=\"color:#005cc5\">float</span> myFloat;<br/><span class=\"javakeywordcolor\" style=\"color:#005cc5\">double</span> myDouble;<br/><span class=\"javakeywordcolor\" style=\"color:#005cc5\">char</span> myChar;<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <br/>printf(<span class=\"javastringcolor\" style=\"color:green\">\"%lu\\n\"</span>, sizeof(myInt));\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// 4 bytes<br/></span>printf(<span class=\"javastringcolor\" style=\"color:green\">\"%lu\\n\"</span>, sizeof(myFloat));\u00a0\u00a0\u00a0 <span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// 4 bytes<br/></span><span class=\"javanumbercolor\" style=\"color:#905\">\n</span>  printf(<span class=\"javastringcolor\" style=\"color:green\">\"%lu\\n\"</span>, sizeof(myDouble));\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// 8 bytes<br/></span>printf(<span class=\"javastringcolor\" style=\"color:green\">\"%lu\\n\"</span>, sizeof(myChar));\u00a0\u00a0\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// 1 byte </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_sizeof",
      "syntax_highlighting_data": [
        {
          "text": "\n  int myInt;float myFloat;double myDouble;char myChar;\n  printf(\"%lu\\n\", sizeof(myInt));\u00a0\u00a0\u00a0\u00a0\u00a0 // 4 bytesprintf(\"%lu\\n\", sizeof(myFloat));\u00a0\u00a0\u00a0 \n  // 4 bytes\n  printf(\"%lu\\n\", sizeof(myDouble));\u00a0\u00a0 // 8 bytesprintf(\"%lu\\n\", sizeof(myChar));\u00a0\u00a0\u00a0\u00a0 // 1 byte ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "float",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "double",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "char",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\"%lu\\n\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "// 4 bytes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\"%lu\\n\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "// 4 bytes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\"%lu\\n\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "// 8 bytes",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\"%lu\\n\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "// 1 byte ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Why is it important to know?",
      "html": "<p><strong>Why is it important to know?</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you create a program that occupies too much, or unnecessary memory, it can result in slow and poor performance.",
      "html": "<p>If you create a program that occupies too much, or unnecessary memory, it can result in slow and poor performance.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In C, you have to manage memory yourself. It is a complicated task, but is also quite powerful when used correctly: Properly managing the computer memory optimizes the performance of the program, so it is useful that you know how to release memory when it is no longer required and only use as little as necessary for the task.",
      "html": "<p>In C, you have to manage memory yourself. It is a complicated task, but is also quite powerful when used correctly: Properly managing the computer memory optimizes the performance of the program, so it is useful that you know how to release memory when it is no longer required and only use as little as necessary for the task.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "memory addresses",
          "href": "https://www.w3schools.com/c/c_memory_address.php",
          "title": ""
        },
        {
          "text": "pointers",
          "href": "https://www.w3schools.com/c/c_pointers.php",
          "title": ""
        }
      ],
      "text": "In previous chapters you learned about memory addresses and pointers .",
      "html": "<p>In previous chapters you learned about <strong><a href=\"/c/c_memory_address.php\">memory addresses</a></strong> and <strong><a href=\"/c/c_pointers.php\">pointers</a></strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "pointers",
          "href": "https://www.w3schools.com/c/c_pointers.php",
          "title": ""
        }
      ],
      "text": "Both have an importance when it comes to memory management, since it is possible to work directly with memory through pointers .",
      "html": "<p>Both have an importance when it comes to memory management, since it is possible to work directly with memory through <strong><a href=\"/c/c_pointers.php\">pointers</a></strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But be careful; pointers must be handled with care , since it is possible to damage data stored in other memory addresses.",
      "html": "<p>But be careful; <strong>pointers must be handled with care</strong>, since it is possible to damage data stored in other memory addresses.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Memory Management",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Memory management is the process of handling how much memory a program uses through allocation, reallocation and deallocation (often referred to as \"freeing\"). We will introduce each of these topics in the following chapters.",
      "html": "<p>Memory management is the process of handling how much memory a program uses through allocation, reallocation and deallocation (often referred to as \"freeing\"). We will introduce each of these topics in the following chapters.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What does the following code output? double myDouble; printf(\"%lu\", sizeof(myDouble));",
      "html": "<p>What does the following code output?<br/><code>double myDouble;<br/>printf(\"%lu\", sizeof(myDouble));<br/></code></p>"
    }
  ]
}