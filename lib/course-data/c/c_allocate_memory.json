{
  "title": "C Allocate Memory",
  "url": "https://www.w3schools.com/c/c_memory_allocate.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C Allocate Memory",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The process of reserving memory is called allocation. The way to allocate memory depends on the type of memory.",
      "html": "<p class=\"intro\">The process of reserving memory is called allocation. The way to allocate memory depends on the type of memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "C has two types of memory: Static memory and dynamic memory.",
      "html": "<p class=\"intro\">C has two types of memory: Static memory and dynamic memory.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Static Memory",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Static memory is memory that is reserved for variables before the program runs. Allocation of static memory is also known as compile time memory allocation.",
      "html": "<p>Static memory is memory that is reserved for variables <strong>before</strong> the program runs. Allocation of static memory is also known as <em>compile time</em> memory allocation.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "C automatically allocates memory for every variable when the program is compiled.",
      "html": "<p>C automatically allocates memory for every variable when the program is compiled.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example, if you create an integer array of 20 students (e.g. for a summer semester), C will reserve space for 20 elements which is typically 80 bytes of memory (20 * 4):",
      "html": "<p>For example, if you create an integer array of 20 students (e.g. for a summer semester), C will reserve space for 20 elements which is typically 80 bytes of memory (20 * 4):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_static",
        "syntaxHighlighting": [
          {
            "text": "\n  int students[20];printf(\"%lu\", sizeof(students)); // 80 bytes ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\"%lu\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "// 80 bytes ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int students[20];printf(\"%lu\", sizeof(students)); // 80 bytes",
      "syntax_highlighting": [
        {
          "text": "\n int students[20];printf(\"%lu\", sizeof(students)); // 80 bytes ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\"%lu\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "// 80 bytes ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> students[<span class=\"javanumbercolor\" style=\"color:#905\">20</span>];<br/>printf(<span class=\"javastringcolor\" style=\"color:green\">\"%lu\"</span>, sizeof(students)); <span class=\"commentcolor\" style=\"color:slategray\">// 80 bytes </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_static",
      "syntax_highlighting_data": [
        {
          "text": "\n  int students[20];printf(\"%lu\", sizeof(students)); // 80 bytes ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\"%lu\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "// 80 bytes ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But when the semester starts, it turns out that only 12 students are attending. Then you have wasted the space of 8 unused elements.",
      "html": "<p>But when the semester starts, it turns out that only 12 students are attending. Then you have wasted the space of 8 unused elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since you are not able to change the size of the array, you are left with unnecessary reserved memory.",
      "html": "<p>Since you are not able to change the size of the array, you are left with unnecessary reserved memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note that the program will still run, and it is not damaged in any way. But if your program contains a lot of this kind of code, it may run slower than it optimally could.",
      "html": "<p>Note that the program will still run, and it is not damaged in any way. But if your program contains a lot of this kind of code, it may run slower than it optimally could.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you want better control of allocated memory, take a look at Dynamic Memory below.",
      "html": "<p>If you want better control of allocated memory, take a look at Dynamic Memory below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Dynamic Memory",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Dynamic memory is memory that is allocated after the program starts running. Allocation of dynamic memory can also be referred to as runtime memory allocation.",
      "html": "<p>Dynamic memory is memory that is allocated <strong>after</strong> the program starts running. Allocation of dynamic memory can also be referred to as <em>runtime</em> memory allocation.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Unlike with static memory, you have full control over how much memory is being used at any time. You can write code to determine how much memory you need and allocate it.",
      "html": "<p>Unlike with static memory, you have full control over how much memory is being used at any time. You can write code to determine how much memory you need and allocate it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Dynamic memory does not belong to a variable, it can only be accessed with pointers.",
      "html": "<p>Dynamic memory does not belong to a variable, it can only be accessed with pointers.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To allocate dynamic memory, you can use the malloc() or calloc() functions. It is necessary to include the <stdlib.h> header to use them. The malloc() and calloc() functions allocate some memory and return a pointer to its address.",
      "html": "<p>To allocate dynamic memory, you can use the <code>malloc()</code> or <code>calloc()</code> functions. It is necessary to include the <code>&lt;stdlib.h&gt;</code> header to use them. The <code>malloc()</code> and <code>calloc()</code> functions allocate some memory and return a pointer to its address.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nint *ptr1 = malloc(size);\nint *ptr2 = calloc(amount, size);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int *ptr1 = malloc(size);\nint *ptr2 = calloc(amount, size);",
      "syntax_highlighting": [
        {
          "text": "\nint *ptr1 = malloc(size);\nint *ptr2 = calloc(amount, size);\n ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\">\n<span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr1 = malloc(<em>size</em>);<br/>\n<span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr2 = calloc(<em>amount</em>, <em>size</em>);<span class=\"javanumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nint *ptr1 = malloc(size);\nint *ptr2 = calloc(amount, size);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The malloc() function has one parameter, size , which specifies how much memory to allocate, measured in bytes.",
      "html": "<p>The <code>malloc()</code> function has one parameter, <em>size</em>, which specifies how much memory to allocate, measured in bytes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The calloc() function has two parameters:",
      "html": "<p>The <code>calloc()</code> function has two parameters:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The data in the memory allocated by malloc() is unpredictable. To avoid unexpected values, make sure to write something into the memory before reading it.",
      "html": "<p><strong>Note:</strong> The data in the memory allocated by <code>malloc()</code> is unpredictable. To avoid unexpected values, make sure to write something into the memory before reading it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Unlike malloc() , the calloc() function writes zeroes into all of the allocated memory. However, this makes calloc() slightly less efficient.",
      "html": "<p>Unlike <code>malloc()</code>, the <code>calloc()</code> function writes zeroes into all of the allocated memory. However, this makes <code>calloc()</code> slightly less efficient.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The best way to allocate the right amount of memory for a data type is to use the sizeof operator:",
      "html": "<p>The best way to allocate the right amount of memory for a data type is to use the <code>sizeof</code> operator:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nint *ptr1, *ptr2;\nptr1 = malloc(sizeof(*ptr1));\nptr2 = calloc(1, sizeof(*ptr2));\n ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int *ptr1, *ptr2;\nptr1 = malloc(sizeof(*ptr1));\nptr2 = calloc(1, sizeof(*ptr2));",
      "syntax_highlighting": [
        {
          "text": "\nint *ptr1, *ptr2;\nptr1 = malloc(sizeof(*ptr1));\nptr2 = calloc(1, sizeof(*ptr2));\n ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\">\n<span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr1, *ptr2;<br/>\nptr1 = malloc(sizeof(*ptr1));<br/>\nptr2 = calloc(<span class=\"javanumbercolor\" style=\"color:#905\">1</span>, sizeof(*ptr2));<span class=\"javanumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nint *ptr1, *ptr2;\nptr1 = malloc(sizeof(*ptr1));\nptr2 = calloc(1, sizeof(*ptr2));\n ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Be careful: sizeof(*ptr1) tells C to measure the size of the data at the address. If you forget the * and write sizeof(ptr1) instead, it will measure the size of the pointer itself, which is the (usually) 8 bytes that are needed to store a memory address.",
      "html": "<p><strong>Be careful:</strong> <code>sizeof(*ptr1)</code> tells C to measure the size of the data at the address. If you forget the <code>*</code> and write <code>sizeof(ptr1)</code> instead, it will measure the size of the pointer itself, which is the (usually) 8 bytes that are needed to store a memory address.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The sizeof operator cannot measure how much dynamic memory is allocated. When measuring dynamic memory, it only tells you the size of the data type of the memory. For example, if you reserve space for 5 float values, the sizeof operator will return 4, which is the number of bytes needed for a single float value.",
      "html": "<p><strong>Note:</strong> The <code>sizeof</code> operator cannot measure how much dynamic memory is allocated. When measuring dynamic memory, it only tells you the size of the <em>data type</em> of the memory. For example, if you reserve space for 5 <code>float</code> values, the <code>sizeof</code> operator will return 4, which is the number of bytes needed for a single <code>float</code> value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's use dynamic memory to improve the students example above.",
      "html": "<p>Let's use dynamic memory to improve the students example above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As noted previously, we cannot use sizeof to measure how much memory was allocated, we have to calculate that by multiplying the amount of items by the size of the data type:",
      "html": "<p>As noted previously, we cannot use <code>sizeof</code> to \nmeasure how much memory was allocated, we have to calculate that by multiplying \nthe amount of items by the size of the data type:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_allocate",
        "syntaxHighlighting": [
          {
            "text": "\n  int *students;int numStudents = 12;students = calloc(numStudents, \n  sizeof(*students));printf(\"%d\", numStudents * sizeof(*students)); // 48 \n  bytes ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "12",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\"%d\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "// 48 \n  bytes ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int *students;int numStudents = 12;students = calloc(numStudents,\nsizeof(*students));printf(\"%d\", numStudents * sizeof(*students)); // 48\nbytes",
      "syntax_highlighting": [
        {
          "text": "\n int *students;int numStudents = 12;students = calloc(numStudents, \n  sizeof(*students));printf(\"%d\", numStudents * sizeof(*students)); // 48 \n  bytes ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "12",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\"%d\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "// 48 \n  bytes ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *students;<br/><span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> numStudents = <span class=\"javanumbercolor\" style=\"color:#905\">12</span>;<br/>students = calloc(numStudents, <span class=\"javanumbercolor\" style=\"color:#905\">\n</span>  sizeof(*students));<br/>printf(<span class=\"javastringcolor\" style=\"color:green\">\"%d\"</span>, numStudents * sizeof(*students)); <span class=\"commentcolor\" style=\"color:slategray\">// 48 \n  bytes </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_allocate",
      "syntax_highlighting_data": [
        {
          "text": "\n  int *students;int numStudents = 12;students = calloc(numStudents, \n  sizeof(*students));printf(\"%d\", numStudents * sizeof(*students)); // 48 \n  bytes ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "12",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\"%d\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "// 48 \n  bytes ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Notes",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When working with dynamic memory allocation, you should also check for errors and free memory at the end of the program. You will learn more about this in the next chapters.",
      "html": "<p>When working with dynamic memory allocation, you should also <strong>check for errors</strong> and \n<strong>free memory</strong> at the end of the program. You will learn more about this in the next chapters.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Stack Memory",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For completeness, it is worth mentioning stack memory. Stack memory is a type of dynamic memory which is reserved for variables that are declared inside functions. Variables declared inside a function use stack memory rather than static memory.",
      "html": "<p>For completeness, it is worth mentioning stack memory. Stack memory is a type of dynamic memory which is reserved for variables that are declared inside functions. Variables declared inside a function use stack memory rather than static memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When a function is called, stack memory is allocated for the variables in the function. When the function returns the stack memory is freed.",
      "html": "<p>When a function is called, stack memory is allocated for the variables in the function. When the function returns the stack memory is freed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is good to be aware of stack memory to be able to handle the memory usage of nested function calls and recursion. Recursion that repeats itself too many times may take up too much stack memory. When that happens it is called a stack overflow .",
      "html": "<p>It is good to be aware of stack memory to be able to handle the memory usage of nested function calls and recursion. Recursion that repeats itself too many times may take up too much stack memory. When that happens it is called a <strong>stack overflow</strong>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is the main difference between static and dynamic memory allocation?",
      "html": "<p>What is the main difference between static and dynamic memory allocation?</p>"
    }
  ]
}