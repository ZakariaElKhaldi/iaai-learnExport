{
  "title": "C Deallocate Memory / Free Memory",
  "url": "https://www.w3schools.com/c/c_memory_deallocate.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "C Deallocate Memory",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Deallocate (free) Memory",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When you no longer need a block of memory you should deallocate it. Deallocation is also referred to as \"freeing\" the memory.",
      "html": "<p>When you no longer need a block of memory you should deallocate it. Deallocation is also referred to as \"freeing\" the memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Dynamic memory stays reserved until it is deallocated or until the program ends.",
      "html": "<p>Dynamic memory stays reserved until it is deallocated or until the program ends.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Once the memory is deallocated it can be used by other programs or it may even be allocated to another part of your program.",
      "html": "<p>Once the memory is deallocated it can be used by other programs or it may even be allocated to another part of your program.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Free Memory",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To deallocate memory, use the free() function:",
      "html": "<p>To deallocate memory, use the <code>free()</code> function:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "htmlHigh",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "free();",
      "language": "html",
      "code_html": "<div class=\"w3-code htmlHigh notranslate\">\nfree(<em>pointer</em>);\n </div>",
      "code_classes": [
        "w3-code",
        "htmlHigh",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "htmlHigh",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The pointer parameter is a pointer to the address of the memory to be deallocated:",
      "html": "<p>The <em>pointer</em> parameter is a pointer to the address of the memory to \nbe deallocated:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  int *ptr;ptr = malloc(sizeof(*ptr));free(ptr);ptr = NULL; ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int *ptr;ptr = malloc(sizeof(*ptr));free(ptr);ptr = NULL;",
      "syntax_highlighting": [
        {
          "text": "\n int *ptr;ptr = malloc(sizeof(*ptr));free(ptr);ptr = NULL; ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr;<br/>ptr = malloc(sizeof(*ptr));<br/><br/><strong>free(ptr);</strong><br/>ptr = NULL; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  int *ptr;ptr = malloc(sizeof(*ptr));free(ptr);ptr = NULL; ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is considered a good practice to set a pointer to NULL after freeing memory so that you cannot accidentally continue using it.",
      "html": "<p>It is considered a good practice to set a pointer to <code>NULL</code> after freeing memory so that you cannot accidentally continue using it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you continue using memory after it has been freed you may corrupt data from other programs or even another part of your own program.",
      "html": "<p>If you continue using memory after it has been freed you may corrupt data from other programs or even another part of your own program.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_free",
        "syntaxHighlighting": [
          {
            "text": "\n  int *ptr;ptr = malloc(sizeof(*ptr)); // Allocate memory for one integer\n  // If memory cannot be allocated, print a message and end the main() \n  functionif (ptr == NULL) {\n  \u00a0\n  printf(\"Unable to allocate memory\");\u00a0 return 1;}\n  // Set the value of the integer*ptr = 20;// Print the \n  integer valueprintf(\"Integer value: %d\\n\", *ptr);\n  // Free allocated memoryfree(ptr);// Set the pointer to \n  NULL to prevent it from being accidentally usedptr = NULL; ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "// Allocate memory for one integer",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "// If memory cannot be allocated, print a message and end the main() \n  function",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\"Unable to allocate memory\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "// Set the value of the integer",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "// Print the \n  integer value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\"Integer value: %d\\n\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "// Free allocated memory",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "// Set the pointer to \n  NULL to prevent it from being accidentally used",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int *ptr;ptr = malloc(sizeof(*ptr)); // Allocate memory for one integer\n// If memory cannot be allocated, print a message and end the main()\nfunctionif (ptr == NULL) {\n\nprintf(\"Unable to allocate memory\");\u00a0 return 1;}\n// Set the value of the integer*ptr = 20;// Print the\ninteger valueprintf(\"Integer value: %d\\n\", *ptr);\n// Free allocated memoryfree(ptr);// Set the pointer to\nNULL to prevent it from being accidentally usedptr = NULL;",
      "syntax_highlighting": [
        {
          "text": "\n int *ptr;ptr = malloc(sizeof(*ptr)); // Allocate memory for one integer\n // If memory cannot be allocated, print a message and end the main() \n  functionif (ptr == NULL) {\n  \u00a0\n  printf(\"Unable to allocate memory\");\u00a0 return 1;}\n // Set the value of the integer*ptr = 20;// Print the \n  integer valueprintf(\"Integer value: %d\\n\", *ptr);\n // Free allocated memoryfree(ptr);// Set the pointer to \n  NULL to prevent it from being accidentally usedptr = NULL; ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "// Allocate memory for one integer",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "// If memory cannot be allocated, print a message and end the main() \n  function",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\"Unable to allocate memory\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "// Set the value of the integer",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "// Print the \n  integer value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\"Integer value: %d\\n\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "// Free allocated memory",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "// Set the pointer to \n  NULL to prevent it from being accidentally used",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr;<br/>ptr = malloc(sizeof(*ptr)); <span class=\"commentcolor\" style=\"color:slategray\">// Allocate memory for one integer<br/></span><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"commentcolor\" style=\"color:slategray\">// If memory cannot be allocated, print a message and end the main() \n  function<br/></span><span class=\"javakeywordcolor\" style=\"color:#005cc5\">if</span> (ptr == NULL) {<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span>  \u00a0<span class=\"javanumbercolor\" style=\"color:#905\">\n</span>  printf(<span class=\"javastringcolor\" style=\"color:green\">\"Unable to allocate memory\"</span>);<br/>\u00a0 <span class=\"javakeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"javanumbercolor\" style=\"color:#905\">1</span>;<br/>}<br/><br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Set the value of the integer<br/></span>*ptr = <span class=\"javanumbercolor\" style=\"color:#905\">20</span>;<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// Print the \n  integer value<br/></span>printf(<span class=\"javastringcolor\" style=\"color:green\">\"Integer value: %d\\n\"</span>, *ptr);<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"commentcolor\" style=\"color:slategray\">// Free allocated memory<br/></span><strong>free(ptr);</strong><br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// Set the pointer to \n  NULL to prevent it from being accidentally used<br/></span><strong>ptr = NULL;</strong> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": "https://www.w3schools.com/c/tryc.php?filename=demo_memory_free",
      "syntax_highlighting_data": [
        {
          "text": "\n  int *ptr;ptr = malloc(sizeof(*ptr)); // Allocate memory for one integer\n  // If memory cannot be allocated, print a message and end the main() \n  functionif (ptr == NULL) {\n  \u00a0\n  printf(\"Unable to allocate memory\");\u00a0 return 1;}\n  // Set the value of the integer*ptr = 20;// Print the \n  integer valueprintf(\"Integer value: %d\\n\", *ptr);\n  // Free allocated memoryfree(ptr);// Set the pointer to \n  NULL to prevent it from being accidentally usedptr = NULL; ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "// Allocate memory for one integer",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "// If memory cannot be allocated, print a message and end the main() \n  function",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\"Unable to allocate memory\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "// Set the value of the integer",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "// Print the \n  integer value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\"Integer value: %d\\n\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "// Free allocated memory",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "// Set the pointer to \n  NULL to prevent it from being accidentally used",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Memory Leaks",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A memory leak happens when dynamic memory is allocated but never freed.",
      "html": "<p>A <strong>memory leak</strong> happens when dynamic memory is allocated but never freed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If a memory leak happens in a loop or in a function that is called frequently it could take up too much memory and cause the computer to slow down.",
      "html": "<p>If a memory leak happens in a loop or in a function that is called frequently it could take up too much memory and cause the computer to slow down.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There is a risk of a memory leak if a pointer to dynamic memory is lost before the memory can be freed. This can happen accidentally, so it is important to be careful and keep track of pointers to dynamic memory.",
      "html": "<p>There is a risk of a memory leak if a pointer to dynamic memory is lost before the memory can be freed. This can happen accidentally, so it is important to be careful and keep track of pointers to dynamic memory. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Here are some examples of how a pointer to dynamic memory may be lost.",
      "html": "<p>Here are some examples of how a pointer to dynamic memory may be lost.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  int x = 5;int *ptr;ptr = calloc(2, sizeof(*ptr));ptr = &x; ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int x = 5;int *ptr;ptr = calloc(2, sizeof(*ptr));ptr = &x;",
      "syntax_highlighting": [
        {
          "text": "\n int x = 5;int *ptr;ptr = calloc(2, sizeof(*ptr));ptr = &x; ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> x = <span class=\"javanumbercolor\" style=\"color:#905\">5</span>;<br/><span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr;<br/>ptr = calloc(<span class=\"javanumbercolor\" style=\"color:#905\">2</span>, sizeof(*ptr));<br/>ptr = &amp;x; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  int x = 5;int *ptr;ptr = calloc(2, sizeof(*ptr));ptr = &x; ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  void myFunction() {\u00a0 int *ptr;\u00a0 ptr = malloc(sizeof(*ptr));\n  }\n  int main() {\u00a0 myFunction();\u00a0 printf(\"The function has \n  ended\");\u00a0 return 0;} ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "void",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\"The function has \n  ended\"",
            "color": "rgb(0, 128, 0)",
            "class": "javastringcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "void myFunction() {\u00a0 int *ptr;\u00a0 ptr = malloc(sizeof(*ptr));\n}\nint main() {\u00a0 myFunction();\u00a0 printf(\"The function has\nended\");\u00a0 return 0;}",
      "syntax_highlighting": [
        {
          "text": "\n void myFunction() {\u00a0 int *ptr;\u00a0 ptr = malloc(sizeof(*ptr));\n  }\n int main() {\u00a0 myFunction();\u00a0 printf(\"The function has \n  ended\");\u00a0 return 0;} ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "void",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\"The function has \n  ended\"",
          "color": "green",
          "class": [
            "javastringcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">void</span> myFunction() {<br/>\u00a0 <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> *ptr;<br/>\u00a0 ptr = malloc(sizeof(*ptr));<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span>  }<br/><br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span> main() {<br/>\u00a0 myFunction();<br/>\u00a0 printf(<span class=\"javastringcolor\" style=\"color:green\">\"The function has \n  ended\"</span>);<br/>\u00a0 <span class=\"javakeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"javanumbercolor\" style=\"color:#905\">0</span>;<br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  void myFunction() {\u00a0 int *ptr;\u00a0 ptr = malloc(sizeof(*ptr));\n  }\n  int main() {\u00a0 myFunction();\u00a0 printf(\"The function has \n  ended\");\u00a0 return 0;} ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "void",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\"The function has \n  ended\"",
          "color": "rgb(0, 128, 0)",
          "class": "javastringcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  int* ptr;ptr = malloc(sizeof(*ptr));ptr = realloc(ptr, \n  2*sizeof(*ptr)); ",
            "color": "rgb(0, 0, 0)",
            "class": "javacolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "int",
            "color": "rgb(0, 92, 197)",
            "class": "javakeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "javanumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "javaHigh"
        ],
        "isNotranslate": true
      },
      "code": "int* ptr;ptr = malloc(sizeof(*ptr));ptr = realloc(ptr,\n2*sizeof(*ptr));",
      "syntax_highlighting": [
        {
          "text": "\n int* ptr;ptr = malloc(sizeof(*ptr));ptr = realloc(ptr, \n 2*sizeof(*ptr)); ",
          "color": "black",
          "class": [
            "javacolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "int",
          "color": "#005cc5",
          "class": [
            "javakeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "javanumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate javaHigh\"><span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javakeywordcolor\" style=\"color:#005cc5\">int</span>* ptr;<br/>ptr = malloc(sizeof(*ptr));<br/>ptr = realloc(ptr, <span class=\"javanumbercolor\" style=\"color:#905\">\n</span> <span class=\"javanumbercolor\" style=\"color:#905\">2</span>*sizeof(*ptr)); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  int* ptr;ptr = malloc(sizeof(*ptr));ptr = realloc(ptr, \n  2*sizeof(*ptr)); ",
          "color": "rgb(0, 0, 0)",
          "class": "javacolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "int",
          "color": "rgb(0, 92, 197)",
          "class": "javakeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "javanumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "javaHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Summary",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In summary, when managing memory in C, use best practices:",
      "html": "<p>In summary, when managing memory in C, use \nbest practices:\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What does the free() function do?",
      "html": "<p>What does the <code>free()</code> function do?</p>"
    }
  ]
}