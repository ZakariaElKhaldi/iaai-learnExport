{
  "title": "DSA Huffman Coding",
  "url": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Huffman Coding",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Huffman Coding",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Huffman Coding is an algorithm used for lossless data compression.",
      "html": "<p>Huffman Coding is an algorithm used for lossless data compression.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Huffman Coding is also used as a component in many different compression algorithms. It is used as a component in lossless compressions such as zip, gzip, and png, and even as part of lossy compression algorithms like mp3 and jpeg.",
      "html": "<p>Huffman Coding is also used as a component in many different compression algorithms. It is used as a component in lossless compressions such as zip, gzip, and png, and even as part of lossy compression algorithms like mp3 and jpeg.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the animation below to see how a text can be compressed using Huffman Coding.",
      "html": "<p>Use the animation below to see how a text can be compressed using Huffman Coding.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "0 bits",
      "html": "<p style=\"text-align: right; margin: 0px; padding: 0px; display: none;\">0 bits</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result The Huffman code is -1% of the original size.",
      "html": "<p style=\"padding: 20px; margin: 0px;\"><span style=\"opacity: 0.5;\">Result</span><span style=\"display: none;\">The Huffman code is -1% of the original size.</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "UTF-8",
          "href": "https://www.w3schools.com/charsets/ref_html_utf8.asp",
          "title": ""
        }
      ],
      "text": "The animation shows how the letters in a text are normally stored using UTF-8 , and how Huffman Coding makes it possible to store the same text with fewer bits.",
      "html": "<p>The animation shows how the letters in a text are normally stored using <a href=\"../charsets/ref_html_utf8.asp\">UTF-8</a>, and how Huffman Coding makes it possible to store the same text with fewer bits.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Huffman Coding uses a variable length of bits to represent each piece of data, with a shorter bit representation for the pieces of data that occurs more often.",
      "html": "<p>Huffman Coding uses a variable length of bits to represent each piece of data, with a shorter bit representation for the pieces of data that occurs more often.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Furthermore, Huffman Coding ensures that no code is the prefix of another code, which makes the compressed data easy to decode.",
      "html": "<p>Furthermore, Huffman Coding ensures that no code is the prefix of another code, which makes the compressed data easy to decode.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Data compression is when the original data size is reduced, but the information is mostly, or fully, kept. Sound or music files are for example usually stored in a compressed format, roughly just 10% of the original data size, but with most of the information kept.",
      "html": "<p><strong>Data compression</strong> is when the original data size is reduced, but the information is mostly, or fully, kept. Sound or music files are for example usually stored in a compressed format, roughly just 10% of the original data size, but with most of the information kept.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lossless means that even after the data is compressed, all the information is still there. This means that for example a compressed text still has all the same letters and characters as the original.",
      "html": "<p><strong>Lossless</strong> means that even after the data is compressed, all the information is still there. This means that for example a compressed text still has all the same letters and characters as the original.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lossy is the other variant of data compression, where some of the original information is lost, or sacrificed, so that the data can be compressed even more. Music, images, and video is normally stored and streamed with lossy compression like mp3, jpeg, and mp4.",
      "html": "<p><strong>Lossy</strong> is the other variant of data compression, where some of the original information is lost, or sacrificed, so that the data can be compressed even more. Music, images, and video is normally stored and streamed with lossy compression like mp3, jpeg, and mp4.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Creating A Huffman Code Manually",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To get a better understanding of how Huffman Coding works, let's create a Huffman code manually, using the same text as in the animation: 'lossless'.",
      "html": "<p>To get a better understanding of how Huffman Coding works, let's create a Huffman code manually, using the same text as in the animation: 'lossless'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "UTF-8",
          "href": "https://www.w3schools.com/charsets/ref_html_utf8.asp",
          "title": ""
        }
      ],
      "text": "A text is normally stored in the computer using UTF-8 , which means that each letter is stored using 8 bits for normal latin letters, like we have in 'lossless'. Other letters or symbols such as '\u20ac' or '\ud83e\udd84' are stored using more bits.",
      "html": "<p>A text is normally stored in the computer using <a href=\"../charsets/ref_html_utf8.asp\">UTF-8</a>, which means that each letter is stored using 8 bits for normal latin letters, like we have in 'lossless'. Other letters or symbols such as '\u20ac' or '\ud83e\udd84' are stored using more bits.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To compress the text 'lossless' using Huffman Coding, we start by counting each letter.",
      "html": "<p>To compress the text 'lossless' using Huffman Coding, we start by counting each letter.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see in the nodes above, 's' occurs 4 times, 'l' occurs 2 times, and 'o' and 'e' occurs just 1 time each.",
      "html": "<p>As you can see in the nodes above, 's' occurs 4 times, 'l' occurs 2 times, and 'o' and 'e' occurs just 1 time each.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We start building the tree with the least occurring letters 'o' and 'e', and their parent node gets count '2', because the counts for letter 'o' and 'e' are summarized.",
      "html": "<p>We start building the tree with the least occurring letters 'o' and 'e', and their parent node gets count '2', because the counts for letter 'o' and 'e' are summarized.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next nodes that get a new parent node, are the nodes with the lowest count: 'l', and the parent node of 'o' and 'e'.",
      "html": "<p>The next nodes that get a new parent node, are the nodes with the lowest count: 'l', and the parent node of 'o' and 'e'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now, the last node 's' must be added to the binary tree. Letter node 's' and the parent node with count '4' get a new parent node with count '8'.",
      "html": "<p>Now, the last node 's' must be added to the binary tree. Letter node 's' and the parent node with count '4' get a new parent node with count '8'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Following the edges from the root node, we can now determine the Huffman code for each letter in the word 'lossless'.",
      "html": "<p>Following the edges from the root node, we can now determine the Huffman code for each letter in the word 'lossless'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Huffman code for each letter can now be found under each letter node in the image above. A good thing about Huffman coding is that the most used data pieces get the shortest code, so just '0' is the code for the letter 's'.",
      "html": "<p>The Huffman code for each letter can now be found under each letter node in the image above. A good thing about Huffman coding is that the most used data pieces get the shortest code, so just '0' is the code for the letter 's'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As mentioned earlier, such normal latin letters are usually stored with UTF-8, which means they take up 8 bits each. So for example the letter 'o' is stored as '01101111' with UTF-8, but it is stored as '110' with our Huffman code for the word 'lossless'.",
      "html": "<p>As mentioned earlier, such normal latin letters are usually stored with UTF-8, which means they take up 8 bits each. So for example the letter 'o' is stored as '01101111' with UTF-8, but it is stored as '110' with our Huffman code for the word 'lossless'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: With UTF-8, a letter has always the same binary code, but with Huffman code, the binary code for each letter (piece of data) changes with text (data set) we are compressing.",
      "html": "<p><strong>Note: </strong>With UTF-8, a letter has always the same binary code, but with Huffman code, the binary code for each letter (piece of data) changes with text (data set) we are compressing.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To summarize, we have now compressed the word 'lossless' from its UTF-8 code",
      "html": "<p>To summarize, we have now compressed the word 'lossless' from its UTF-8 code</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "01101100 01101111 01110011 01110011 01101100 01100101 01110011 01110011",
      "html": "<p><code>01101100 01101111 01110011 01110011 01101100 01100101 01110011 01110011</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "to just",
      "html": "<p>to just</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "10 110 0 0 10 111 0 0",
      "html": "<p><code>10 110 0 0 10 111 0 0</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "using Huffman Coding, which is a huge improvement.",
      "html": "<p>using Huffman Coding, which is a huge improvement.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But if data is stored with Huffman Coding as 10 110 0 0 10 111 0 0 , or the code is sent to us, how can it be decoded so that we see what information the Huffman code contains?",
      "html": "<p>But if data is stored with Huffman Coding as <code>10 110 0 0 10 111 0 0</code>, or the code is sent to us, how can it be decoded so that we see what information the Huffman code contains?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Furthermore, the binary code is really 10110001011100 , without the spaces, and with variable bit lengths for each piece of data, so how can the computer understand where the binary code for each piece of data starts and ends?",
      "html": "<p>Furthermore, the binary code is really <code>10110001011100</code>, without the spaces, and with variable bit lengths for each piece of data, so how can the computer understand where the binary code for each piece of data starts and ends?</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Decoding Huffman Code",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just like with code stored as UTF-8, which our computers can already decode to the correct letters, the computer needs to know which bits represent which piece of data in the Huffman code.",
      "html": "<p>Just like with code stored as UTF-8, which our computers can already decode to the correct letters, the computer needs to know which bits represent which piece of data in the Huffman code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So along with a Huffman code, there must also be a conversion table with information about what the Huffman binary code is for each piece of data, so that it can be decoded.",
      "html": "<p>So along with a Huffman code, there must also be a conversion table with information about what the Huffman binary code is for each piece of data, so that it can be decoded.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So, for this Huffman code:",
      "html": "<p>So, for this Huffman code:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "100110110",
      "html": "<p><code>100110110</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With this conversion table:",
      "html": "<p>With this conversion table:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\" style=\"width: auto;\">\n<tbody><tr>\n<th style=\"width: 10ch;\">Letter</th>\n<th style=\"width: 15ch;\">Huffman Code</th>\n</tr>\n<tr>\n<td>a</td>\n<td><code class=\"w3-codespan\">0</code></td>\n</tr>\n<tr>\n<td>b</td>\n<td><code class=\"w3-codespan\">10</code></td>\n</tr>\n<tr>\n<td>n</td>\n<td><code class=\"w3-codespan\">11</code></td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Are you able to decode the Huffman code?",
      "html": "<p>Are you able to decode the Huffman code?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We start with the first bit:",
      "html": "<p>We start with the first bit:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There is no letter in the table with just 1 as the Huffman code, so we continue and include the next bit as well.",
      "html": "<p>There is no letter in the table with just <code>1</code> as the Huffman code, so we continue and include the next bit as well.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can see from the table that 10 is 'b', so now we have the first letter. We check the next bit:",
      "html": "<p>We can see from the table that <code>10</code> is 'b', so now we have the first letter. We check the next bit:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We find that 0 is 'a', so now we have the two first letters 'ba' stored in the Huffman code.",
      "html": "<p>We find that <code>0</code> is 'a', so now we have the two first letters 'ba' stored in the Huffman code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We continue looking up Huffman codes in the table:",
      "html": "<p>We continue looking up Huffman codes in the table:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Code 11 is 'n'.",
      "html": "<p>Code <code>11</code> is 'n'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Code 0 is 'a'.",
      "html": "<p>Code <code>0</code> is 'a'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Code 11 is 'n'.",
      "html": "<p>Code <code>11</code> is 'n'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Code 0 is 'a'.",
      "html": "<p>Code <code>0</code> is 'a'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Huffman code is now decoded, and the word is 'banana'!",
      "html": "<p>The Huffman code is now decoded, and the word is 'banana'!</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Huffman Code Prefixes",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An interesting and very useful part of the Huffman coding algorithm is that it ensures that there is no code that is the prefix of another code.",
      "html": "<p>An interesting and very useful part of the Huffman coding algorithm is that it ensures that there is no code that is the prefix of another code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just image if the conversion table we just used, looked like this:",
      "html": "<p>Just image if the conversion table we just used, looked like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\" style=\"width: auto;\">\n<tbody><tr>\n<th style=\"width: 10ch;\">Letter</th>\n<th style=\"width: 15ch;\">Huffman Code</th>\n</tr>\n<tr>\n<td>a</td>\n<td><code class=\"w3-codespan\">1</code></td>\n</tr>\n<tr>\n<td>b</td>\n<td><code class=\"w3-codespan\">10</code></td>\n</tr>\n<tr>\n<td>n</td>\n<td><code class=\"w3-codespan\">11</code></td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If this was the case, we would get confused right from the start of the decoding, right?",
      "html": "<p>If this was the case, we would get confused right from the start of the decoding, right?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Because how would we know if the first bit 1 represents the letter 'a' or if it is the first bit for the letter 'b' or 'c'?",
      "html": "<p>Because how would we know if the first bit <code>1</code> represents the letter 'a' or if it is the first bit for the letter 'b' or 'c'?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This property, that no code is the prefix of another code, makes it possible to decode. And it is especially important in Huffman Coding because of the variable bit lengths.",
      "html": "<p>This property, that no code is the prefix of another code, makes it possible to decode. And it is especially important in Huffman Coding because of the variable bit lengths.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Huffman Coding Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The correct word for creating Huffman code based on data or text is \"encoding\", and the opposite would be \"decoding\", when the original data or text is recreated based on the code.",
      "html": "<p>The correct word for creating Huffman code based on data or text is \"encoding\", and the opposite would be \"decoding\", when the original data or text is recreated based on the code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code example below takes a word, or any text really, and compress it using Huffman Coding.",
      "html": "<p>The code example below takes a word, or any text really, and compress it using Huffman Coding.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\nchar\n=\nNone\n,\nfreq\n=\n0\n)\n:\n\nself\n.\nchar\n=\nchar\nself\n.\nfreq\n=\nfreq\nself\n.\nleft\n=\n\nNone\n\nself\n.\nright\n=\n\nNone\n\n\nnodes\n=\n\n[\n]\n\n\n\ndef\n\ncalculate_frequencies\n(\nword\n)\n:\n\nfrequencies\n=\n\n{\n}\n\n\nfor\nchar\nin\nword\n:\n\n\nif\nchar\nnot\n\nin\nfrequencies\n:\n\nfreq\n=\nword\n.\ncount\n(\nchar\n)\n\nfrequencies\n[\nchar\n]\n\n=\nfreq\nnodes\n.\nappend\n(\nNode\n(\nchar\n,\nfreq\n)\n)\n\n\n\ndef\n\nbuild_huffman_tree\n(\n)\n:\n\n\nwhile\n\nlen\n(\nnodes\n)\n\n>\n\n1\n:\n\nnodes\n.\nsort\n(\nkey\n=\nlambda\nx\n:\nx\n.\nfreq\n)\n\nleft\n=\nnodes\n.\npop\n(\n0\n)\n\nright\n=\nnodes\n.\npop\n(\n0\n)\n\n\nmerged\n=\nNode\n(\nfreq\n=\nleft\n.\nfreq\n+\nright\n.\nfreq\n)\n\nmerged\n.\nleft\n=\nleft\nmerged\n.\nright\n=\nright\n\nnodes\n.\nappend\n(\nmerged\n)\n\n\n\nreturn\nnodes\n[\n0\n]\n\n\n\ndef\n\ngenerate_huffman_codes\n(\nnode\n,\ncurrent_code\n,\ncodes\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\n\n\nif\nnode\n.\nchar\nis\n\nnot\n\nNone\n:\n\ncodes\n[\nnode\n.\nchar\n]\n\n=\ncurrent_code\n\ngenerate_huffman_codes\n(\nnode\n.\nleft\n,\ncurrent_code\n+\n\n'0'\n,\ncodes\n)\n\ngenerate_huffman_codes\n(\nnode\n.\nright\n,\ncurrent_code\n+\n\n'1'\n,\ncodes\n)\n\n\n\ndef\n\nhuffman_encoding\n(\nword\n)\n:\n\n\nglobal\nnodes\nnodes\n=\n\n[\n]\n\ncalculate_frequencies\n(\nword\n)\n\nroot\n=\nbuild_huffman_tree\n(\n)\n\ncodes\n=\n\n{\n}\n\ngenerate_huffman_codes\n(\nroot\n,\n\n''\n,\ncodes\n)\n\n\nreturn\ncodes\n\nword\n=\n\n\"lossless\"\n\ncodes\n=\nhuffman_encoding\n(\nword\n)\n\nencoded_word\n=\n\n''\n.\njoin\n(\ncodes\n[\nchar\n]\n\nfor\nchar\nin\nword\n)\n\n\n\nprint\n(\n\"Word:\"\n,\nword\n)\n\n\nprint\n(\n\"Huffman code:\"\n,\nencoded_word\n)\n\n\nprint\n(\n\"Conversion table:\"\n,\ncodes\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> char<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>char <span class=\"token operator\">=</span> char\n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_frequencies</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> char <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> frequencies<span class=\"token punctuation\">:</span>\n            freq <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n            frequencies<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> freq\n            nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">build_huffman_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        nodes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        merged <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>freq<span class=\"token operator\">=</span>left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n        \n        nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">generate_huffman_codes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> current_code<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-if\">if</span> node<span class=\"token punctuation\">.</span>char <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        codes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_code\n\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_encoding</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> nodes\n    nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    calculate_frequencies<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> build_huffman_tree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> codes\n\nword <span class=\"token operator\">=</span> <span class=\"token string\">\"lossless\"</span>\ncodes <span class=\"token operator\">=</span> huffman_encoding<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\nencoded_word <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Word:\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Huffman code:\"</span><span class=\"token punctuation\">,</span> encoded_word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Conversion table:\"</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Huffman Decoding Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In addition to encode data using Huffman coding, we should also have a way to decode it, to recreate the original information.",
      "html": "<p>In addition to encode data using Huffman coding, we should also have a way to decode it, to recreate the original information.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The implementation below is basically the same as the previous code example, but with an additional function for decoding the Huffman code.",
      "html": "<p>The implementation below is basically the same as the previous code example, but with an additional function for decoding the Huffman code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Python dictionary",
          "href": "https://www.w3schools.com/python/python_dictionaries.asp",
          "title": ""
        },
        {
          "text": "hashmap",
          "href": "https://www.w3schools.com/dsa_data_hashmaps.php",
          "title": ""
        }
      ],
      "text": "The huffman_decoding function takes the Huffman code, and the codes Python dictionary (a hashmap ) with the characters and their corresponding binary codes. The Function then reverse the mapping, and checks the Huffman code bit-by-bit to recreate the original text.",
      "html": "<p>The <code>huffman_decoding</code> function takes the Huffman code, and the <code>codes</code> <a href=\"../python/python_dictionaries.asp\">Python dictionary</a> (a <a href=\"dsa_data_hashmaps.php\">hashmap</a>) with the characters and their corresponding binary codes. The Function then reverse the mapping, and checks the Huffman code bit-by-bit to recreate the original text.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\nchar\n=\nNone\n,\nfreq\n=\n0\n)\n:\n\nself\n.\nchar\n=\nchar\nself\n.\nfreq\n=\nfreq\nself\n.\nleft\n=\n\nNone\n\nself\n.\nright\n=\n\nNone\n\n\nnodes\n=\n\n[\n]\n\n\n\ndef\n\ncalculate_frequencies\n(\nword\n)\n:\n\nfrequencies\n=\n\n{\n}\n\n\nfor\nchar\nin\nword\n:\n\n\nif\nchar\nnot\n\nin\nfrequencies\n:\n\nfreq\n=\nword\n.\ncount\n(\nchar\n)\n\nfrequencies\n[\nchar\n]\n\n=\nfreq\nnodes\n.\nappend\n(\nNode\n(\nchar\n,\nfreq\n)\n)\n\n\n\ndef\n\nbuild_huffman_tree\n(\n)\n:\n\n\nwhile\n\nlen\n(\nnodes\n)\n\n>\n\n1\n:\n\nnodes\n.\nsort\n(\nkey\n=\nlambda\nx\n:\nx\n.\nfreq\n)\n\nleft\n=\nnodes\n.\npop\n(\n0\n)\n\nright\n=\nnodes\n.\npop\n(\n0\n)\n\n\nmerged\n=\nNode\n(\nfreq\n=\nleft\n.\nfreq\n+\nright\n.\nfreq\n)\n\nmerged\n.\nleft\n=\nleft\nmerged\n.\nright\n=\nright\n\nnodes\n.\nappend\n(\nmerged\n)\n\n\n\nreturn\nnodes\n[\n0\n]\n\n\n\ndef\n\ngenerate_huffman_codes\n(\nnode\n,\ncurrent_code\n,\ncodes\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\n\n\nif\nnode\n.\nchar\nis\n\nnot\n\nNone\n:\n\ncodes\n[\nnode\n.\nchar\n]\n\n=\ncurrent_code\n\ngenerate_huffman_codes\n(\nnode\n.\nleft\n,\ncurrent_code\n+\n\n'0'\n,\ncodes\n)\n\ngenerate_huffman_codes\n(\nnode\n.\nright\n,\ncurrent_code\n+\n\n'1'\n,\ncodes\n)\n\n\n\ndef\n\nhuffman_encoding\n(\nword\n)\n:\n\n\nglobal\nnodes\nnodes\n=\n\n[\n]\n\ncalculate_frequencies\n(\nword\n)\n\nroot\n=\nbuild_huffman_tree\n(\n)\n\ncodes\n=\n\n{\n}\n\ngenerate_huffman_codes\n(\nroot\n,\n\n''\n,\ncodes\n)\n\n\nreturn\ncodes\n\n\ndef\n\nhuffman_decoding\n(\nencoded_word\n,\ncodes\n)\n:\n\ncurrent_code\n=\n\n''\n\ndecoded_chars\n=\n\n[\n]\n\n\n\n# Invert the codes dictionary to get the reverse mapping\n\ncode_to_char\n=\n\n{\nv\n:\nk\nfor\nk\n,\nv\nin\ncodes\n.\nitems\n(\n)\n}\n\n\n\nfor\nbit\nin\nencoded_word\n:\n\ncurrent_code\n+=\nbit\n\nif\ncurrent_code\nin\ncode_to_char\n:\n\ndecoded_chars\n.\nappend\n(\ncode_to_char\n[\ncurrent_code\n]\n)\n\ncurrent_code\n=\n\n''\n\n\n\nreturn\n\n''\n.\njoin\n(\ndecoded_chars\n)\n\n\nword\n=\n\n\"lossless\"\n\ncodes\n=\nhuffman_encoding\n(\nword\n)\n\nencoded_word\n=\n\n''\n.\njoin\n(\ncodes\n[\nchar\n]\n\nfor\nchar\nin\nword\n)\n\ndecoded_word\n=\nhuffman_decoding\n(\nencoded_word\n,\ncodes\n)\n\n\n\nprint\n(\n\"Initial word:\"\n,\nword\n)\n\n\nprint\n(\n\"Huffman code:\"\n,\nencoded_word\n)\n\n\nprint\n(\n\"Conversion table:\"\n,\ncodes\n)\n\n\nprint\n(\n\"Decoded word:\"\n,\ndecoded_word\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" data-line=\"51-64\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> char<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>char <span class=\"token operator\">=</span> char\n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_frequencies</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> char <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> frequencies<span class=\"token punctuation\">:</span>\n            freq <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n            frequencies<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> freq\n            nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">build_huffman_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        nodes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        merged <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>freq<span class=\"token operator\">=</span>left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n        \n        nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">generate_huffman_codes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> current_code<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-if\">if</span> node<span class=\"token punctuation\">.</span>char <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        codes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_code\n\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_encoding</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> nodes\n    nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    calculate_frequencies<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> build_huffman_tree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> codes\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_decoding</span><span class=\"token punctuation\">(</span>encoded_word<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current_code <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    decoded_chars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Invert the codes dictionary to get the reverse mapping</span>\n    code_to_char <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> codes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-for\">for</span> bit <span class=\"token keyword keyword-in\">in</span> encoded_word<span class=\"token punctuation\">:</span>\n        current_code <span class=\"token operator\">+=</span> bit\n        <span class=\"token keyword keyword-if\">if</span> current_code <span class=\"token keyword keyword-in\">in</span> code_to_char<span class=\"token punctuation\">:</span>\n            decoded_chars<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>code_to_char<span class=\"token punctuation\">[</span>current_code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            current_code <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>decoded_chars<span class=\"token punctuation\">)</span>\n\nword <span class=\"token operator\">=</span> <span class=\"token string\">\"lossless\"</span>\ncodes <span class=\"token operator\">=</span> huffman_encoding<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\nencoded_word <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">)</span>\ndecoded_word <span class=\"token operator\">=</span> huffman_decoding<span class=\"token punctuation\">(</span>encoded_word<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial word:\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Huffman code:\"</span><span class=\"token punctuation\">,</span> encoded_word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Conversion table:\"</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoded word:\"</span><span class=\"token punctuation\">,</span> decoded_word<span class=\"token punctuation\">)</span>\n<div aria-hidden=\"true\" class=\"line-highlight\" data-end=\"64\" data-range=\"51-64\" data-start=\"51\" style=\"top: 1100px; width: 789px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You have now seen how a text can be compressed using Huffman coding, and how a Huffman code can be decoded to recreate the original text.",
      "html": "<p>You have now seen how a text can be compressed using Huffman coding, and how a Huffman code can be decoded to recreate the original text.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Huffman Coding can be used for lossless compression of any kind of data, not just text. Huffman Coding is also used as a component in other compression algorithms like zip, and even in lossy compressions like jpeg and mp3.",
      "html": "<p><strong>Note: </strong>Huffman Coding can be used for lossless compression of any kind of data, not just text. Huffman Coding is also used as a component in other compression algorithms like zip, and even in lossy compressions like jpeg and mp3.</p>"
    }
  ]
}