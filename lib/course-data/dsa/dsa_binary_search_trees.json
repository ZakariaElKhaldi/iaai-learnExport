{
  "title": "DSA Binary Search Trees",
  "url": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Binary Search Trees",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Binary Search Tree is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value.",
      "html": "<p>A <strong>Binary Search Tree</strong> is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.",
      "html": "<p>A clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Search Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Tree data structure",
          "href": "https://www.w3schools.com/dsa_data_binarytrees.php",
          "title": ""
        }
      ],
      "text": "A Binary Search Tree (BST) is a type of Binary Tree data structure , where the following properties must be true for any node \"X\" in the tree:",
      "html": "<p>A Binary Search Tree (BST) is a type of <a href=\"dsa_data_binarytrees.php\">Binary Tree data structure</a>, where the following properties must be true for any node \"X\" in the tree:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These properties makes it faster to search, add and delete values than a regular binary tree.",
      "html": "<p>These properties makes it faster to search, add and delete values than a regular binary tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.",
      "html": "<p>To make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the Binary Search Tree below to better understand these concepts and relevant terminology.",
      "html": "<p>Use the Binary Search Tree below to better understand these concepts and relevant terminology.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Binary Search Tree (BST)",
      "html": "<p><label><input checked=\"\" name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"all\"/>Binary Search Tree (BST)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tree size (n=8)",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"allNodes\"/>Tree size (n=8)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Root node",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"root\"/>Root node</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "7's left child",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"aLeft\"/>7's left child</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "7's right child",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"aRight\"/>7's right child</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tree height (h=3)",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"height13\"/>Tree height (h=3)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "15's height (h=2)",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"height15\"/>15's height (h=2)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "13's right subtree",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"subtree15\"/>13's right subtree</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "13's in-order successor",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"successor13\"/>13's in-order successor</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Child nodes",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"children\"/>Child nodes</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Parent/Internal nodes",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"parents\"/>Parent/Internal nodes</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Leaf nodes",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"leaves\"/>Leaf nodes</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The size of a tree is the number of nodes in it ( n n ).",
      "html": "<p>The <strong>size</strong> of a tree is the number of nodes in it (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A subtree starts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.",
      "html": "<p>A <strong>subtree</strong> starts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The descendants of a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.",
      "html": "<p>The <strong>descendants</strong> of a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The node's height is the maximum number of edges between that node and a leaf node.",
      "html": "<p>The <strong>node's height</strong> is the maximum number of edges between that node and a leaf node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A node's in-order successor is the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.",
      "html": "<p>A <strong>node's in-order successor</strong> is the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Traversal of a Binary Search Tree",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.",
      "html": "<p>Just to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Another way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the previous page) and check if the resulting list of values are in an increasing order.",
      "html": "<p>Another way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the previous page) and check if the resulting list of values are in an increasing order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below is an implementation of the Binary Search Tree in the figure above, with traversal.",
      "html": "<p>The code below is an implementation of the Binary Search Tree in the figure above, with traversal.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nTreeNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nleft\n=\n\nNone\n\nself\n.\nright\n=\n\nNone\n\n\n\ndef\n\ninOrderTraversal\n(\nnode\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\ninOrderTraversal\n(\nnode\n.\nleft\n)\n\n\nprint\n(\nnode\n.\ndata\n,\nend\n=\n\", \"\n)\n\ninOrderTraversal\n(\nnode\n.\nright\n)\n\n\nroot\n=\nTreeNode\n(\n13\n)\n\nnode7\n=\nTreeNode\n(\n7\n)\n\nnode15\n=\nTreeNode\n(\n15\n)\n\nnode3\n=\nTreeNode\n(\n3\n)\n\nnode8\n=\nTreeNode\n(\n8\n)\n\nnode14\n=\nTreeNode\n(\n14\n)\n\nnode19\n=\nTreeNode\n(\n19\n)\n\nnode18\n=\nTreeNode\n(\n18\n)\n\n\nroot\n.\nleft\n=\nnode7\nroot\n.\nright\n=\nnode15\n\nnode7\n.\nleft\n=\nnode3\nnode7\n.\nright\n=\nnode8\n\nnode15\n.\nleft\n=\nnode14\nnode15\n.\nright\n=\nnode19\n\nnode19\n.\nleft\n=\nnode18\n\n\n# Traverse\n\ninOrderTraversal\n(\nroot\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\nroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode7 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode15 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode8 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nnode14 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\nnode19 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\nnode18 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node7\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node15\n\nnode7<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node3\nnode7<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node8\n\nnode15<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node14\nnode15<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node19\n\nnode19<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node18\n\n<span class=\"token comment\"># Traverse</span>\ninOrderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.",
      "html": "<p>As we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Search for a Value in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Search",
          "href": "https://www.w3schools.com/dsa_algo_binarysearch.php",
          "title": ""
        }
      ],
      "text": "Searching for a value in a BST is very similar to how we found a value using Binary Search on an array.",
      "html": "<p>Searching for a value in a BST is very similar to how we found a value using <a href=\"dsa_algo_binarysearch.php\">Binary Search</a> on an array.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.",
      "html": "<p>For Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Similarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.",
      "html": "<p>Similarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the animation below to see how we search for a value in a Binary Search Tree.",
      "html": "<p>Use the animation below to see how we search for a value in a Binary Search Tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click Search.",
      "html": "<p class=\"pElStatus\" style=\"min-height: 1.5em;\">Click Search.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The algorithm above can be implemented like this:",
      "html": "<p>The algorithm above can be implemented like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nsearch\n(\nnode\n,\ntarget\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\nNone\n\n\nelif\nnode\n.\ndata\n==\ntarget\n:\n\n\nreturn\nnode\n\nelif\ntarget\n<\nnode\n.\ndata\n:\n\n\nreturn\nsearch\n(\nnode\n.\nleft\n,\ntarget\n)\n\n\nelse\n:\n\n\nreturn\nsearch\n(\nnode\n.\nright\n,\ntarget\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span> \n    <span class=\"token keyword keyword-elif\">elif</span> node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> node\n    <span class=\"token keyword keyword-elif\">elif</span> target <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The time complexity for searching a BST for a value is O ( h ) O ( h ) , where h h is the height of the tree.",
      "html": "<p>The time complexity for searching a BST for a value is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-7\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-8\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></math></span></span>, where <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-10\"><span class=\"mjx-mrow\" id=\"MJXc-Node-11\"><span class=\"mjx-mi\" id=\"MJXc-Node-12\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi></math></span></span> is the height of the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.",
      "html": "<p>For a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Both Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.",
      "html": "<p>Both Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will use the next page to describe a type of Binary Tree called AVL Trees. AVL trees are self-balancing, which means that the height of the tree is kept to a minimum so that operations like search, insertion and deletion take less time.",
      "html": "<p>We will use the next page to describe a type of Binary Tree called AVL Trees. AVL trees are self-balancing, which means that the height of the tree is kept to a minimum so that operations like search, insertion and deletion take less time.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insert a Node in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting a node in a BST is similar to searching for a value.",
      "html": "<p>Inserting a node in a BST is similar to searching for a value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting nodes as described above means that an inserted node will always become a new leaf node.",
      "html": "<p>Inserting nodes as described above means that an inserted node will always become a new leaf node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the simulation below to see how new nodes are inserted.",
      "html": "<p>Use the simulation below to see how new nodes are inserted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click Insert.",
      "html": "<p>Click Insert.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.",
      "html": "<p>All nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how node insertion in BST can be implemented:",
      "html": "<p>This is how node insertion in BST can be implemented:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\ninsert\n(\nnode\n,\ndata\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\nTreeNode\n(\ndata\n)\n\n\nelse\n:\n\n\nif\ndata\n<\nnode\n.\ndata\n:\n\nnode\n.\nleft\n=\ninsert\n(\nnode\n.\nleft\n,\ndata\n)\n\n\nelif\ndata\n>\nnode\n.\ndata\n:\n\nnode\n.\nright\n=\ninsert\n(\nnode\n.\nright\n,\ndata\n)\n\n\nreturn\nnode",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> TreeNode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> node</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Find The Lowest Value in a BST Subtree",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next section will explain how we can delete a node in a BST, but to do that we need a function that finds the lowest value in a node's subtree.",
      "html": "<p>The next section will explain how we can delete a node in a BST, but to do that we need a function that finds the lowest value in a node's subtree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the figure below, if we start at node 13 and keep going left, we end up in node 3, which is the lowest value, right?",
      "html": "<p>In the figure below, if we start at node 13 and keep going left, we end up in node 3, which is the lowest value, right?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And if we start at node 15 and keep going left, we end up in node 14, which is the lowest value in node 15's subtree.",
      "html": "<p>And if we start at node 15 and keep going left, we end up in node 14, which is the lowest value in node 15's subtree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the function for finding the lowest value in the subtree of a BST node looks like:",
      "html": "<p>This is how the function for finding the lowest value in the subtree of a BST node looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nminValueNode\n(\nnode\n)\n:\n\ncurrent\n=\nnode\n\nwhile\ncurrent\n.\nleft\nis\n\nnot\n\nNone\n:\n\ncurrent\n=\ncurrent\n.\nleft\n\nreturn\ncurrent",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">minValueNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current <span class=\"token operator\">=</span> node\n    <span class=\"token keyword keyword-while\">while</span> current<span class=\"token punctuation\">.</span>left <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword keyword-return\">return</span> current</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will use this minValueNode() function in the section below, to find a node's in-order successor, and use that to delete a node.",
      "html": "<p>We will use this <code>minValueNode()</code> function in the section below, to find a node's in-order successor, and use that to delete a node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Delete a Node in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To delete a node, our function must first search the BST to find it.",
      "html": "<p>To delete a node, our function must first search the BST to find it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After the node is found there are three different cases where deleting a node must be done differently.",
      "html": "<p>After the node is found there are three different cases where deleting a node must be done differently.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.",
      "html": "<p>In step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the animation below to see how different nodes are deleted.",
      "html": "<p>Use the animation below to see how different nodes are deleted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Node 8 is a leaf node (case 1), so after we find it, we can just delete it.",
      "html": "<p><strong>Node 8</strong> is a leaf node (case 1), so after we find it, we can just delete it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Node 19 has only one child node (case 2). To delete node 19, the parent node 15 is connected directly to node 18, and then node 19 can be removed.",
      "html": "<p><strong>Node 19</strong> has only one child node (case 2). To delete node 19, the parent node 15 is connected directly to node 18, and then node 19 can be removed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Node 13 has two child nodes (case 3). We find the successor, the node that comes right after during in-order traversal, by finding the lowest node in node 13's right subtree, which is node 14. Value 14 is put into node 13, and then we can delete node 14.",
      "html": "<p><strong>Node 13</strong> has two child nodes (case 3). We find the successor, the node that comes right after during in-order traversal, by finding the lowest node in node 13's right subtree, which is node 14. Value 14 is put into node 13, and then we can delete node 14.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how a BST can be implemented with functionality for deleting a node:",
      "html": "<p>This is how a BST can be implemented with functionality for deleting a node:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\ndelete\n(\nnode\n,\ndata\n)\n:\n\n\nif\n\nnot\nnode\n:\n\n\nreturn\n\nNone\n\n\n\nif\ndata\n<\nnode\n.\ndata\n:\n\nnode\n.\nleft\n=\ndelete\n(\nnode\n.\nleft\n,\ndata\n)\n\n\nelif\ndata\n>\nnode\n.\ndata\n:\n\nnode\n.\nright\n=\ndelete\n(\nnode\n.\nright\n,\ndata\n)\n\n\nelse\n:\n\n\n# Node with only one child or no child\n\n\nif\n\nnot\nnode\n.\nleft\n:\n\ntemp\n=\nnode\n.\nright\nnode\n=\n\nNone\n\n\nreturn\ntemp\n\nelif\n\nnot\nnode\n.\nright\n:\n\ntemp\n=\nnode\n.\nleft\nnode\n=\n\nNone\n\n\nreturn\ntemp\n\n\n# Node with two children, get the in-order successor\n\nnode\n.\ndata\n=\nminValueNode\n(\nnode\n.\nright\n)\n.\ndata\nnode\n.\nright\n=\ndelete\n(\nnode\n.\nright\n,\nnode\n.\ndata\n)\n\n\n\nreturn\nnode",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Node with only one child or no child</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n        <span class=\"token keyword keyword-elif\">elif</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n\n        <span class=\"token comment\"># Node with two children, get the in-order successor</span>\n        node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> minValueNode<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> node<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 1 : The node argument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the data we want to delete.",
      "html": "<p><strong>Line 1</strong>: The <code>node</code> argument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the <code>data</code> we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 2-8 : This is searching for the node with correct data that we want to delete.",
      "html": "<p><strong>Line 2-8</strong>: This is searching for the node with correct <code>data</code> that we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 9-22 : The node we want to delete has been found. There are three such cases:",
      "html": "<p><strong>Line 9-22</strong>: The node we want to delete has been found. There are three such cases:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 24 : node is returned to maintain the recursive functionality.",
      "html": "<p><strong>Line 24</strong>: <code>node</code> is returned to maintain the recursive functionality.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "BST Compared to Other Data Structures",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Binary Search Trees take the best from two other data structures: Arrays and Linked Lists.",
      "html": "<p>Binary Search Trees take the best from two other data structures: Arrays and Linked Lists.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "MathJax_Preview"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "MathJax_Preview"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "MathJax_Preview"
          }
        ],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "syntax_highlighting": [
        {
          "text": "",
          "color": "inherit",
          "class": [
            "MathJax_Preview"
          ]
        },
        {
          "text": "",
          "color": "inherit",
          "class": [
            "MathJax_Preview"
          ]
        },
        {
          "text": "",
          "color": "inherit",
          "class": [
            "MathJax_Preview"
          ]
        }
      ],
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody>\n<tr>\n<th style=\"width:20ch\">Data Structure</th>\n<th>Searching for a value</th>\n<th>Delete / Insert leads to shifting in memory</th>\n</tr>\n<tr>\n<td>Sorted Array</td>\n<td><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi mathvariant=\"bold-italic\"&gt;O&lt;/mi&gt;&lt;mo mathvariant=\"bold\" stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi mathvariant=\"bold\"&gt;log&lt;/mi&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi mathvariant=\"bold-italic\"&gt;n&lt;/mi&gt;&lt;mo mathvariant=\"bold\" stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-4-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-13\"><span class=\"mjx-mrow\" id=\"MJXc-Node-14\"><span class=\"mjx-mi\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-math-BI\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-17\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-18\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-19\"><span class=\"mjx-char MJXc-TeX-math-BI\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-20\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi mathvariant=\"bold-italic\">O</mi><mo mathvariant=\"bold\" stretchy=\"false\">(</mo><mi mathvariant=\"bold\">log</mi><mo>\u2061</mo><mi mathvariant=\"bold-italic\">n</mi><mo mathvariant=\"bold\" stretchy=\"false\">)</mo></math></span></span><script id=\"MathJax-Element-4\" type=\"math/tex\">\\boldsymbol{O(\\log n)}</script></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Linked List</td>\n<td><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-5-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-21\"><span class=\"mjx-mrow\" id=\"MJXc-Node-22\"><span class=\"mjx-mi\" id=\"MJXc-Node-23\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-24\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-25\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-26\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span><script id=\"MathJax-Element-5\" type=\"math/tex\">O(n)</script></td>\n<td><strong>No</strong></td>\n</tr>\n<tr>\n<td>Binary Search Tree</td>\n<td><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi mathvariant=\"bold-italic\"&gt;O&lt;/mi&gt;&lt;mo mathvariant=\"bold\" stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi mathvariant=\"bold\"&gt;log&lt;/mi&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi mathvariant=\"bold-italic\"&gt;n&lt;/mi&gt;&lt;mo mathvariant=\"bold\" stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-27\"><span class=\"mjx-mrow\" id=\"MJXc-Node-28\"><span class=\"mjx-mi\" id=\"MJXc-Node-29\"><span class=\"mjx-char MJXc-TeX-math-BI\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-30\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-31\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-32\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-33\"><span class=\"mjx-char MJXc-TeX-math-BI\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-34\"><span class=\"mjx-char MJXc-TeX-main-B\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi mathvariant=\"bold-italic\">O</mi><mo mathvariant=\"bold\" stretchy=\"false\">(</mo><mi mathvariant=\"bold\">log</mi><mo>\u2061</mo><mi mathvariant=\"bold-italic\">n</mi><mo mathvariant=\"bold\" stretchy=\"false\">)</mo></math></span></span><script id=\"MathJax-Element-6\" type=\"math/tex\">\\boldsymbol{O(\\log n)}</script></td>\n<td><strong>No</strong></td>\n</tr>\n</tbody>\n</table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "MathJax_Preview"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "MathJax_Preview"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "MathJax_Preview"
        }
      ],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Search",
          "href": "https://www.w3schools.com/dsa_algo_binarysearch.php",
          "title": ""
        }
      ],
      "text": "Searching a BST is just as fast as Binary Search on an array, with the same time complexity O ( log n ) O ( log \u2061 n ) .",
      "html": "<p>Searching a BST is just as fast as <a href=\"dsa_algo_binarysearch.php\">Binary Search</a> on an array, with the same time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-35\"><span class=\"mjx-mrow\" id=\"MJXc-Node-36\"><span class=\"mjx-mi\" id=\"MJXc-Node-37\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-38\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-39\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-40\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-41\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-42\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>\u2061</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.",
      "html": "<p>And deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "BST Balance and Time Complexity",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "On a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually O ( h ) O ( h ) . That means that the higher the tree is ( h h ), the longer the operation will take.",
      "html": "<p>On a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-43\"><span class=\"mjx-mrow\" id=\"MJXc-Node-44\"><span class=\"mjx-mi\" id=\"MJXc-Node-45\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-46\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-47\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-48\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></math></span></span>. That means that the higher the tree is (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-49\"><span class=\"mjx-mrow\" id=\"MJXc-Node-50\"><span class=\"mjx-mi\" id=\"MJXc-Node-51\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi></math></span></span>), the longer the operation will take.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The reason why we wrote that searching for a value is O ( log n ) O ( log \u2061 n ) in the table above is because that is true if the tree is \"balanced\", like in the image below.",
      "html": "<p>The reason why we wrote that searching for a value is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-10-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-52\"><span class=\"mjx-mrow\" id=\"MJXc-Node-53\"><span class=\"mjx-mi\" id=\"MJXc-Node-54\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-55\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-56\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-57\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-58\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-59\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>\u2061</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span> in the table above is because that is true if the tree is \"balanced\", like in the image below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.",
      "html": "<p>We call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one. In the image above, the left subtree of the root node has height h = 2 h = 2 , and the right subtree has height h = 3 h = 3 .",
      "html": "<p>The exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one. In the image above, the left subtree of the root node has height <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-11-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-60\"><span class=\"mjx-mrow\" id=\"MJXc-Node-61\"><span class=\"mjx-mi\" id=\"MJXc-Node-62\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-63\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-64\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi><mo>=</mo><mn>2</mn></math></span></span>, and the right subtree has height <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-12-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-65\"><span class=\"mjx-mrow\" id=\"MJXc-Node-66\"><span class=\"mjx-mi\" id=\"MJXc-Node-67\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-68\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-69\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi><mo>=</mo><mn>3</mn></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For a balanced BST, with a large number of nodes (big n n ), we get height h \u2248 log 2 n h \u2248 log 2 \u2061 n , and therefore the time complexity for searching, deleting, or inserting a node can be written as O ( h ) = O ( log n ) O ( h ) = O ( log \u2061 n ) .",
      "html": "<p>For a balanced BST, with a large number of nodes (big <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-13-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-70\"><span class=\"mjx-mrow\" id=\"MJXc-Node-71\"><span class=\"mjx-mi\" id=\"MJXc-Node-72\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>), we get height <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo&gt;&amp;#x2248;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-14-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-73\"><span class=\"mjx-mrow\" id=\"MJXc-Node-74\"><span class=\"mjx-mi\" id=\"MJXc-Node-75\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-76\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.171em; padding-bottom: 0.339em;\">\u2248</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-77\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-78\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.377em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-79\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-80\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-81\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi><mo>\u2248</mo><msub><mi>log</mi><mn>2</mn></msub><mo>\u2061</mo><mi>n</mi></math></span></span>, and therefore the time complexity for searching, deleting, or inserting a node can be written as <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-15-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-82\"><span class=\"mjx-mrow\" id=\"MJXc-Node-83\"><span class=\"mjx-mi\" id=\"MJXc-Node-84\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-85\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-86\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-87\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-88\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-89\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-90\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-91\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-92\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-93\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-94\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>\u2061</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes, h \u2248 n h \u2248 n , and we get time complexity O ( h ) = O ( n ) O ( h ) = O ( n ) for searching, deleting, or inserting a node.",
      "html": "<p>But, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes, <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo&gt;&amp;#x2248;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-16-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-95\"><span class=\"mjx-mrow\" id=\"MJXc-Node-96\"><span class=\"mjx-mi\" id=\"MJXc-Node-97\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-98\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.171em; padding-bottom: 0.339em;\">\u2248</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-99\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>h</mi><mo>\u2248</mo><mi>n</mi></math></span></span>, and we get time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-17-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-100\"><span class=\"mjx-mrow\" id=\"MJXc-Node-101\"><span class=\"mjx-mi\" id=\"MJXc-Node-102\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-103\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-104\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">h</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-105\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-106\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-107\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-108\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-109\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-110\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span> for searching, deleting, or inserting a node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.",
      "html": "<p>So, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the next page.",
      "html": "<p>And keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the next page.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting a node with value 6 in this Binary Search Tree:",
      "html": "<p>Inserting a node with value 6 in this Binary Search Tree:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Where is the new node inserted?",
      "html": "<p>Where is the new node inserted?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "The node with value 6\nbecomes the right child node\nof the node with value\n.",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\">The node with value 6 \nbecomes the right child node\nof the node with value <input maxlength=\"2\" name=\"ex1\" style=\"width: 3ch;\"/>.\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_data_binarysearchtrees1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_data_binarysearchtrees1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}