{
  "title": "DSA Hash Sets",
  "url": "https://www.w3schools.com/dsa/dsa_data_hashsets.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Hash Sets",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Hash Sets",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Hash Table",
          "href": "https://www.w3schools.com/dsa_theory_hashtables.php",
          "title": ""
        }
      ],
      "text": "A Hash Set is a form of Hash Table data structure that usually holds a large number of elements.",
      "html": "<p>A Hash Set is a form of <a href=\"dsa_theory_hashtables.php\">Hash Table</a> data structure that usually holds a large number of elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using a Hash Set we can search, add, and remove elements really fast.",
      "html": "<p>Using a Hash Set we can search, add, and remove elements really fast.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Sets are used for lookup, to check if an element is part of a set.",
      "html": "<p>Hash Sets are used for lookup, to check if an element is part of a set.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Set",
      "html": "<p style=\"font-weight: bold;\">Hash Set</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Code",
      "html": "<p style=\"font-weight: bold;\">Hash Code</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "0 % 10 = 0",
      "html": "<p>0 % 10 = <span class=\"hashcode\">0</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Try interacting with the Hash Set 0",
      "html": "<p>Try interacting with the Hash Set<span style=\"opacity: 0;\">0</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Hash Set stores unique elements in buckets according to the element's hash code.",
      "html": "<p>A Hash Set stores unique elements in buckets according to the element's hash code.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Finding The Hash Code",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A hash code is generated by a hash function .",
      "html": "<p>A hash code is generated by a <strong>hash function</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The hash function in the animation above takes the name written in the input, and sums up the Unicode code points for every character in that name.",
      "html": "<p>The hash function in the animation above takes the name written in the input, and sums up the Unicode code points for every character in that name.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After that, the hash function does a modulo 10 operation ( % 10 ) on the sum of characters to get the hash code as a number from 0 to 9.",
      "html": "<p>After that, the hash function does a modulo 10 operation (<code>% 10</code>) on the sum of characters to get the hash code as a number from 0 to 9.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that a name is put into one of ten possible buckets in the Hash Set, according to the hash code of that name. The same hash code is generated and used when we want to search for or remove a name from the Hash Set.",
      "html": "<p>This means that a name is put into one of ten possible buckets in the Hash Set, according to the hash code of that name. The same hash code is generated and used when we want to search for or remove a name from the Hash Set.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Hash Code gives us instant access as long as there is just one name in the corresponding bucket.",
      "html": "<p>The Hash Code gives us instant access as long as there is just one name in the corresponding bucket.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/charsets/ref_utf_basic_latin.asp",
          "title": ""
        }
      ],
      "text": "Unicode code point: Everything in our computers are stored as numbers, and the Unicode code point is a unique number that exist for every character. For example, the character A has Unicode code point 65 . Just try it in the simulation above. See this page for more information about how characters are represented as numbers.",
      "html": "<p><strong>Unicode code point: </strong>Everything in our computers are stored as numbers, and the Unicode code point is a unique number that exist for every character. For example, the character <code>A</code> has Unicode code point <code>65</code>. Just try it in the simulation above. See <a href=\"/charsets/ref_utf_basic_latin.asp\">this page</a> for more information about how characters are represented as numbers.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Modulo: A mathematical operation, written as % in most programming languages (or m o d m o d in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example, 7 % 3 will give us the remainder 1 . (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)",
      "html": "<p><strong>Modulo: </strong>A mathematical operation, written as <code>%</code> in most programming languages (or <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">m</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-4\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">o</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-5\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.003em;\">d</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>m</mi><mi>o</mi><mi>d</mi></math></span></span> in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example, <code>7 % 3</code> will give us the remainder <code>1</code>. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Direct Access in Hash Sets",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Searching for Peter in the Hash Set above, means that the hash code 2 is generated ( 512 % 10 ), and that directs us right to the bucket Peter is in. If that is the only name in that bucket, we will find Peter right away.",
      "html": "<p>Searching for <code>Peter</code> in the Hash Set above, means that the hash code <code>2</code> is generated (<code>512 % 10</code>), and that directs us right to the bucket <code>Peter</code> is in. If that is the only name in that bucket, we will find <code>Peter</code> right away.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In cases like this we say that the Hash Set has constant time O ( 1 ) O ( 1 ) for searching, adding, and removing elements, which is really fast.",
      "html": "<p>In cases like this we say that the Hash Set has constant time <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-6\"><span class=\"mjx-mrow\" id=\"MJXc-Node-7\"><span class=\"mjx-mi\" id=\"MJXc-Node-8\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-10\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-11\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></math></span></span> for searching, adding, and removing elements, which is really fast.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But, if we search for Jens , we need to search through the other names in that bucket before we find Jens . In a worst case scenario, all names end up in the same bucket, and the name we are searching for is the last one. In such a worst case scenario the Hash Set has time complexity O ( n ) O ( n ) , which is the same time complexity as arrays and linked lists.",
      "html": "<p>But, if we search for <code>Jens</code>, we need to search through the other names in that bucket before we find <code>Jens</code>. In a worst case scenario, all names end up in the same bucket, and the name we are searching for is the last one. In such a worst case scenario the Hash Set has time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-12\"><span class=\"mjx-mrow\" id=\"MJXc-Node-13\"><span class=\"mjx-mi\" id=\"MJXc-Node-14\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-17\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>, which is the same time complexity as arrays and linked lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To keep Hash Sets fast, it is therefore important to have a hash function that will distribute the elements evenly between the buckets, and to have around as many buckets as Hash Set elements.",
      "html": "<p>To keep Hash Sets fast, it is therefore important to have a hash function that will distribute the elements evenly between the buckets, and to have around as many buckets as Hash Set elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Having a lot more buckets than Hash Set elements is a waste of memory, and having a lot less buckets than Hash Set elements is a waste of time.",
      "html": "<p>Having a lot more buckets than Hash Set elements is a waste of memory, and having a lot less buckets than Hash Set elements is a waste of time.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Hash Set Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "set data type",
          "href": "https://www.w3schools.com/python/python_sets.asp",
          "title": ""
        }
      ],
      "text": "Hash Sets in Python are typically done by using Python's own set data type , but to get a better understanding of how Hash Sets work we will not use that here.",
      "html": "<p>Hash Sets in Python are typically done by using Python's own <a href=\"python/python_sets.asp\"><code>set</code> data type</a>, but to get a better understanding of how Hash Sets work we will not use that here.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement a Hash Set in Python we create a class SimpleHashSet .",
      "html": "<p>To implement a Hash Set in Python we create a class <code>SimpleHashSet</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inside the SimpleHashSet class we have a method __init__ to initialize the Hash Set, a method hash_function for the hash function, and methods for the basic Hash Set operations: add , contains , and remove .",
      "html": "<p>Inside the <code>SimpleHashSet</code> class we have a method <code>__init__</code> to initialize the Hash Set, a method <code>hash_function</code> for the hash function, and methods for the basic Hash Set operations: <code>add</code>, <code>contains</code>, and <code>remove</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We also create a method print_set to better see how the Hash Set looks like.",
      "html": "<p>We also create a method <code>print_set</code> to better see how the Hash Set looks like.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nSimpleHashSet\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n=\n100\n)\n:\n\nself\n.\nsize\n=\nsize\nself\n.\nbuckets\n=\n\n[\n[\n]\n\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\n# A list of buckets, each is a list (to handle collisions)\n\n\n\ndef\n\nhash_function\n(\nself\n,\nvalue\n)\n:\n\n\n# Simple hash function: sum of character codes modulo the number of buckets\n\n\nreturn\n\nsum\n(\nord\n(\nchar\n)\n\nfor\nchar\nin\nvalue\n)\n\n%\nself\n.\nsize\n\n\ndef\n\nadd\n(\nself\n,\nvalue\n)\n:\n\n\n# Add a value if it's not already present\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nif\nvalue\nnot\n\nin\nbucket\n:\n\nbucket\n.\nappend\n(\nvalue\n)\n\n\n\ndef\n\ncontains\n(\nself\n,\nvalue\n)\n:\n\n\n# Check if a value exists in the set\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nreturn\nvalue\nin\nbucket\n\n\ndef\n\nremove\n(\nself\n,\nvalue\n)\n:\n\n\n# Remove a value\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nif\nvalue\nin\nbucket\n:\n\nbucket\n.\nremove\n(\nvalue\n)\n\n\n\ndef\n\nprint_set\n(\nself\n)\n:\n\n\n# Print all elements in the hash set\n\n\nprint\n(\n\"Hash Set Contents:\"\n)\n\n\nfor\nindex\n,\nbucket\nin\n\nenumerate\n(\nself\n.\nbuckets\n)\n:\n\n\nprint\n(\nf\"Bucket\n{\nindex\n}\n:\n{\nbucket\n}\n\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashSet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Simple hash function: sum of character codes modulo the number of buckets</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add a value if it's not already present</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Check if a value exists in the set</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-return\">return</span> value <span class=\"token keyword keyword-in\">in</span> bucket\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a value</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all elements in the hash set</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Set Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using the SimpleHashSet class we can create the same Hash Set as in the top of this page:",
      "html": "<p>Using the <code>SimpleHashSet</code> class we can create the same Hash Set as in the top of this page:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nSimpleHashSet\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n=\n100\n)\n:\n\nself\n.\nsize\n=\nsize\nself\n.\nbuckets\n=\n\n[\n[\n]\n\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\n# A list of buckets, each is a list (to handle collisions)\n\n\n\ndef\n\nhash_function\n(\nself\n,\nvalue\n)\n:\n\n\n# Simple hash function: sum of character codes modulo the number of buckets\n\n\nreturn\n\nsum\n(\nord\n(\nchar\n)\n\nfor\nchar\nin\nvalue\n)\n\n%\nself\n.\nsize\n\n\ndef\n\nadd\n(\nself\n,\nvalue\n)\n:\n\n\n# Add a value if it's not already present\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nif\nvalue\nnot\n\nin\nbucket\n:\n\nbucket\n.\nappend\n(\nvalue\n)\n\n\n\ndef\n\ncontains\n(\nself\n,\nvalue\n)\n:\n\n\n# Check if a value exists in the set\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nreturn\nvalue\nin\nbucket\n\n\ndef\n\nremove\n(\nself\n,\nvalue\n)\n:\n\n\n# Remove a value\n\nindex\n=\nself\n.\nhash_function\n(\nvalue\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nif\nvalue\nin\nbucket\n:\n\nbucket\n.\nremove\n(\nvalue\n)\n\n\n\ndef\n\nprint_set\n(\nself\n)\n:\n\n\n# Print all elements in the hash set\n\n\nprint\n(\n\"Hash Set Contents:\"\n)\n\n\nfor\nindex\n,\nbucket\nin\n\nenumerate\n(\nself\n.\nbuckets\n)\n:\n\n\nprint\n(\nf\"Bucket\n{\nindex\n}\n:\n{\nbucket\n}\n\"\n)\n\n\n\n# Creating the Hash Set from the simulation\n\nhash_set\n=\nSimpleHashSet\n(\nsize\n=\n10\n)\n\n\nhash_set\n.\nadd\n(\n\"Charlotte\"\n)\n\nhash_set\n.\nadd\n(\n\"Thomas\"\n)\n\nhash_set\n.\nadd\n(\n\"Jens\"\n)\n\nhash_set\n.\nadd\n(\n\"Peter\"\n)\n\nhash_set\n.\nadd\n(\n\"Lisa\"\n)\n\nhash_set\n.\nadd\n(\n\"Adele\"\n)\n\nhash_set\n.\nadd\n(\n\"Michaela\"\n)\n\nhash_set\n.\nadd\n(\n\"Bob\"\n)\n\n\nhash_set\n.\nprint_set\n(\n)\n\n\n\nprint\n(\n\"\\n'Peter' is in the set:\"\n,\nhash_set\n.\ncontains\n(\n'Peter'\n)\n)\n\n\nprint\n(\n\"Removing 'Peter'\"\n)\n\nhash_set\n.\nremove\n(\n'Peter'\n)\n\n\nprint\n(\n\"'Peter' is in the set:\"\n,\nhash_set\n.\ncontains\n(\n'Peter'\n)\n)\n\n\nprint\n(\n\"'Adele' has hash code:\"\n,\nhash_set\n.\nhash_function\n(\n'Adele'\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" id=\"codeBlock\" style=\"height: 32em; overflow-y: scroll;\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashSet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Simple hash function: sum of character codes modulo the number of buckets</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add a value if it's not already present</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Check if a value exists in the set</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-return\">return</span> value <span class=\"token keyword keyword-in\">in</span> bucket\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a value</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all elements in the hash set</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Set Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Creating the Hash Set from the simulation</span>\nhash_set <span class=\"token operator\">=</span> SimpleHashSet<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Charlotte\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jens\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Adele\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Michaela\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n\nhash_set<span class=\"token punctuation\">.</span>print_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n'Peter' is in the set:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Removing 'Peter'\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Peter' is in the set:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Adele' has hash code:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span><span class=\"token string\">'Adele'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    }
  ]
}