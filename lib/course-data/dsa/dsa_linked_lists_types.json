{
  "title": "DSA Linked Lists Types",
  "url": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Linked Lists Types",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Types of Linked Lists",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are three basic forms of linked lists:",
      "html": "<p>There are three basic forms of linked lists:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A singly linked list is the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the next node, like in the image below.",
      "html": "<p>A <strong>singly linked list</strong> is the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the next node, like in the image below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A doubly linked list has nodes with addresses to both the previous and the next node, like in the image below, and therefore takes up more memory. But doubly linked lists are good if you want to be able to move both up and down in the list.",
      "html": "<p>A <strong>doubly linked list</strong> has nodes with addresses to both the previous and the next node, like in the image below, and therefore takes up more memory. But doubly linked lists are good if you want to be able to move both up and down in the list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A circular linked list is like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.",
      "html": "<p>A <strong>circular linked list</strong> is like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In singly or doubly linked lists, we can find the start and end of a list by just checking if the links are null . But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.",
      "html": "<p>In singly or doubly linked lists, we can find the start and end of a list by just checking if the links are <span>null</span>. But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Circular linked lists are good for lists you need to cycle through continuously.",
      "html": "<p>Circular linked lists are good for lists you need to cycle through continuously.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The image below is an example of a singly circular linked list:",
      "html": "<p>The image below is an example of a singly circular linked list:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The image below is an example of a doubly circular linked list:",
      "html": "<p>The image below is an example of a doubly circular linked list:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: What kind of linked list you need depends on the problem you are trying to solve.",
      "html": "<p><strong>Note: </strong>What kind of linked list you need depends on the problem you are trying to solve.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked List Implementations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below are basic implementations of:",
      "html": "<p>Below are basic implementations of:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next page will cover different operations that can be done on linked lists.",
      "html": "<p>The next page will cover different operations that can be done on linked lists.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "1. Singly Linked List Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is an implementation of this singly linked list:",
      "html": "<p>Below is an implementation of this singly linked list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\nnode1\n=\nNode\n(\n3\n)\n\nnode2\n=\nNode\n(\n5\n)\n\nnode3\n=\nNode\n(\n13\n)\n\nnode4\n=\nNode\n(\n2\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\n\ncurrentNode\n=\nnode1\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"null\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\ncurrentNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "2. Doubly Linked List Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is an implementation of this doubly linked list:",
      "html": "<p>Below is an implementation of this doubly linked list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\nself\n.\nprev\n=\n\nNone\n\n\nnode1\n=\nNode\n(\n3\n)\n\nnode2\n=\nNode\n(\n5\n)\n\nnode3\n=\nNode\n(\n13\n)\n\nnode4\n=\nNode\n(\n2\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\n\nnode2\n.\nprev\n=\nnode1\nnode2\n.\nnext\n\n=\nnode3\n\nnode3\n.\nprev\n=\nnode2\nnode3\n.\nnext\n\n=\nnode4\n\nnode4\n.\nprev\n=\nnode3\n\n\nprint\n(\n\"\\nTraversing forward:\"\n)\n\ncurrentNode\n=\nnode1\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"null\"\n)\n\n\n\nprint\n(\n\"\\nTraversing backward:\"\n)\n\ncurrentNode\n=\nnode4\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nprev\n\nprint\n(\n\"null\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\n\nnode2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node1\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\n\nnode3<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node2\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\nnode4<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node3\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing forward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing backward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node4\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "3. Circular Singly Linked List Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is an implementation of this circular singly linked list:",
      "html": "<p>Below is an implementation of this circular singly linked list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\nnode1\n=\nNode\n(\n3\n)\n\nnode2\n=\nNode\n(\n5\n)\n\nnode3\n=\nNode\n(\n13\n)\n\nnode4\n=\nNode\n(\n2\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\nnode4\n.\nnext\n\n=\nnode1\n\ncurrentNode\n=\nnode1\nstartNode\n=\nnode1\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\n\nwhile\ncurrentNode\n!=\nstartNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\n\nprint\n(\n\"...\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"14,17\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node1\n\ncurrentNode <span class=\"token operator\">=</span> node1\nstartNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span> \ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> \n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"14\" style=\"top: 287px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"17\" style=\"top: 353px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 14: This makes the singly list circular.",
      "html": "<p><strong>Line 14: </strong>This makes the singly list circular.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 17: This is how the program knows when to stop so that it only goes through the list one time.",
      "html": "<p><strong>Line 17: </strong>This is how the program knows when to stop so that it only goes through the list one time.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "4. Circular Doubly Linked List Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is an implementation of this circular doubly linked list:",
      "html": "<p>Below is an implementation of this circular doubly linked list:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\nself\n.\nprev\n=\n\nNone\n\n\nnode1\n=\nNode\n(\n3\n)\n\nnode2\n=\nNode\n(\n5\n)\n\nnode3\n=\nNode\n(\n13\n)\n\nnode4\n=\nNode\n(\n2\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode1\n.\nprev\n=\nnode4\n\nnode2\n.\nprev\n=\nnode1\nnode2\n.\nnext\n\n=\nnode3\n\nnode3\n.\nprev\n=\nnode2\nnode3\n.\nnext\n\n=\nnode4\n\nnode4\n.\nprev\n=\nnode3\nnode4\n.\nnext\n\n=\nnode1\n\n\nprint\n(\n\"\\nTraversing forward:\"\n)\n\ncurrentNode\n=\nnode1\nstartNode\n=\nnode1\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\n\nwhile\ncurrentNode\n!=\nstartNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"...\"\n)\n\n\n\nprint\n(\n\"\\nTraversing backward:\"\n)\n\ncurrentNode\n=\nnode4\nstartNode\n=\nnode4\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nprev\n\n\nwhile\ncurrentNode\n!=\nstartNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nprev\n\nprint\n(\n\"...\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"13,22,26\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode1<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node4\n\nnode2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node1\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\n\nnode3<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node2\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\nnode4<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node3\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node1\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing forward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node1\nstartNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing backward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node4\nstartNode <span class=\"token operator\">=</span> node4\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"13\" style=\"top: 265px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"22\" style=\"top: 463px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"26\" style=\"top: 551px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lines 13 and 22: These links makes the doubly linked list circular.",
      "html": "<p><strong>Lines 13 and 22: </strong>These links makes the doubly linked list circular.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lines 26: This is how the program knows when to stop so that it only goes through the list one time.",
      "html": "<p><strong>Lines 26: </strong>This is how the program knows when to stop so that it only goes through the list one time.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Take a look at this singly Linked List:",
      "html": "<p>Take a look at this singly Linked List: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How can we make this Linked List circular?",
      "html": "<p>How can we make this Linked List circular?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "The list can be made circular\nby connecting the next pointer\nin the last node, to the\nnode.",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\">The list can be made circular \nby connecting the next pointer \nin the last node, to the <input maxlength=\"5\" name=\"ex1\" style=\"width: 6ch;\"/> node.\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_theory_linkedlists3",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_theory_linkedlists3\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}