{
  "title": "DSA Graphs Traversal",
  "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Graphs Traversal",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Graphs Traversal",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To traverse a Graph means to start in one vertex, and go along the edges to visit other vertices until all vertices, or as many as possible, have been visited.",
      "html": "<p>To traverse a Graph means to start in one vertex, and go along the edges to visit other vertices until all vertices, or as many as possible, have been visited.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Understanding how a Graph can be traversed is important for understanding how algorithms that run on Graphs work.",
      "html": "<p>Understanding how a Graph can be traversed is important for understanding how algorithms that run on Graphs work.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The two most common ways a Graph can be traversed are:",
      "html": "<p>The two most common ways a Graph can be traversed are:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Stack",
          "href": "https://www.w3schools.com/dsa_data_stacks.php",
          "title": ""
        },
        {
          "text": "Queue",
          "href": "https://www.w3schools.com/dsa_data_queues.php",
          "title": ""
        }
      ],
      "text": "DFS is usually implemented using a Stack or by the use of recursion (which utilizes the call stack), while BFS is usually implemented using a Queue .",
      "html": "<p>DFS is usually implemented using a <a href=\"dsa_data_stacks.php\">Stack</a> or by the use of recursion (which utilizes the call stack), while BFS is usually implemented using a <a href=\"dsa_data_queues.php\">Queue</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Call Stack keeps functions running in the correct order.",
      "html": "<p>The <strong>Call Stack</strong> keeps functions running in the correct order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If for example FunctionA calls FunctionB, FunctionB is placed on top of the call stack and starts running. Once FunctionB is finished, it is removed from the stack, and then FunctionA resumes its work.",
      "html": "<p>If for example FunctionA calls FunctionB, FunctionB is placed on top of the call stack and starts running. Once FunctionB is finished, it is removed from the stack, and then FunctionA resumes its work.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Depth First Search Traversal",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Depth First Search is said to go \"deep\" because it visits a vertex, then an adjacent vertex, and then that vertex' adjacent vertex, and so on, and in this way the distance from the starting vertex increases for each recursive iteration.",
      "html": "<p>Depth First Search is said to go \"deep\" because it visits a vertex, then an adjacent vertex, and then that vertex' adjacent vertex, and so on, and in this way the distance from the starting vertex increases for each recursive iteration.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the animation below to see how Depth First Search (DFS) traversal runs on a specific Graph, starting in vertex D (it is the same as the previous animation).",
      "html": "<p>Run the animation below to see how Depth First Search (DFS) traversal runs on a specific Graph, starting in vertex D (it is the same as the previous animation).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The DFS traversal starts in vertex D, marks vertex D as visited. Then, for every new vertex visited, the traversal method is called recursively on all adjacent vertices that have not been visited yet. So when vertex A is visited in the animation above, vertex C or vertex E (depending on the implementation) is the next vertex where the traversal continues.",
      "html": "<p>The DFS traversal starts in vertex D, marks vertex D as visited. Then, for every new vertex visited, the traversal method is called recursively on all adjacent vertices that have not been visited yet. So when vertex A is visited in the animation above, vertex C or vertex E (depending on the implementation) is the next vertex where the traversal continues.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n=\n\n1\n\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\nprint_graph\n(\nself\n)\n:\n\n\nprint\n(\n\"Adjacency Matrix:\"\n)\n\n\nfor\nrow\nin\nself\n.\nadj_matrix\n:\n\n\nprint\n(\n' '\n.\njoin\n(\nmap\n(\nstr\n,\nrow\n)\n)\n)\n\n\nprint\n(\n\"\\nVertex Data:\"\n)\n\n\nfor\nvertex\n,\ndata\nin\n\nenumerate\n(\nself\n.\nvertex_data\n)\n:\n\n\nprint\n(\nf\"Vertex\n{\nvertex\n}\n:\n{\ndata\n}\n\"\n)\n\n\n\ndef\n\ndfs_util\n(\nself\n,\nv\n,\nvisited\n)\n:\n\nvisited\n[\nv\n]\n\n=\n\nTrue\n\n\nprint\n(\nself\n.\nvertex_data\n[\nv\n]\n,\nend\n=\n' '\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\nv\n]\n[\ni\n]\n\n==\n\n1\n\nand\n\nnot\nvisited\n[\ni\n]\n:\n\nself\n.\ndfs_util\n(\ni\n,\nvisited\n)\n\n\n\ndef\n\ndfs\n(\nself\n,\nstart_vertex_data\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nstart_vertex\n=\nself\n.\nvertex_data\n.\nindex\n(\nstart_vertex_data\n)\n\nself\n.\ndfs_util\n(\nstart_vertex\n,\nvisited\n)\n\n\ng\n=\nGraph\n(\n7\n)\n\n\ng\n.\nadd_vertex_data\n(\n0\n,\n\n'A'\n)\n\ng\n.\nadd_vertex_data\n(\n1\n,\n\n'B'\n)\n\ng\n.\nadd_vertex_data\n(\n2\n,\n\n'C'\n)\n\ng\n.\nadd_vertex_data\n(\n3\n,\n\n'D'\n)\n\ng\n.\nadd_vertex_data\n(\n4\n,\n\n'E'\n)\n\ng\n.\nadd_vertex_data\n(\n5\n,\n\n'F'\n)\n\ng\n.\nadd_vertex_data\n(\n6\n,\n\n'G'\n)\n\n\ng\n.\nadd_edge\n(\n3\n,\n\n0\n)\n\n# D - A\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n)\n\n# A - C\n\ng\n.\nadd_edge\n(\n0\n,\n\n3\n)\n\n# A - D\n\ng\n.\nadd_edge\n(\n0\n,\n\n4\n)\n\n# A - E\n\ng\n.\nadd_edge\n(\n4\n,\n\n2\n)\n\n# E - C\n\ng\n.\nadd_edge\n(\n2\n,\n\n5\n)\n\n# C - F\n\ng\n.\nadd_edge\n(\n2\n,\n\n1\n)\n\n# C - B\n\ng\n.\nadd_edge\n(\n2\n,\n\n6\n)\n\n# C - G\n\ng\n.\nadd_edge\n(\n1\n,\n\n5\n)\n\n# B - F\n\n\ng\n.\nprint_graph\n(\n)\n\n\n\nprint\n(\n\"\\nDepth First Search starting from vertex D:\"\n)\n\ng\n.\ndfs\n(\n'D'\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" data-line=\"24-35,60\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - F</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDepth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"24-35\" style=\"top: 507px; height: 264px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"60\" style=\"top: 1299px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 60: The DFS traversal starts when the dfs() method is called.",
      "html": "<p><strong>Line 60: </strong>The DFS traversal starts when the <code>dfs()</code> method is called.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 33: The visited array is first set to false for all vertices, because no vertices are visited yet at this point.",
      "html": "<p><strong>Line 33: </strong>The <code>visited</code> array is first set to <code>false</code> for all vertices, because no vertices are visited yet at this point.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 35: The visited array is sent as an argument to the dfs_util() method. When the visited array is sent as an argument like this, it is actually just a reference to the visited array that is sent to the dfs_util() method, and not the actual array with the values inside. So there is always just one visited array in our program, and the dfs_util() method can make changes to it as nodes are visited (line 25).",
      "html": "<p><strong>Line 35: </strong>The <code>visited</code> array is sent as an argument to the <code>dfs_util()</code> method. When the <code>visited</code> array is sent as an argument like this, it is actually just a reference to the <code>visited</code> array that is sent to the <code>dfs_util()</code> method, and not the actual array with the values inside. So there is always just one <code>visited</code> array in our program, and the <code>dfs_util()</code> method can make changes to it as nodes are visited (line 25).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 28-30: For the current vertex v , all adjacent nodes are called recursively if they are not already visited.",
      "html": "<p><strong>Line 28-30: </strong>For the current vertex <code>v</code>, all adjacent nodes are called recursively if they are not already visited.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Breadth First Search Traversal",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Breadth First Search visits all adjacent vertices of a vertex before visiting neighboring vertices to the adjacent vertices. This means that vertices with the same distance from the starting vertex are visited before vertices further away from the starting vertex are visited.",
      "html": "<p>Breadth First Search visits all adjacent vertices of a vertex before visiting neighboring vertices to the adjacent vertices. This means that vertices with the same distance from the starting vertex are visited before vertices further away from the starting vertex are visited.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the animation below to see how Breadth First Search (BFS) traversal runs on a specific Graph, starting in vertex D.",
      "html": "<p>Run the animation below to see how Breadth First Search (BFS) traversal runs on a specific Graph, starting in vertex D.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see in the animation above, BFS traversal visits vertices the same distance from the starting vertex, before visiting vertices further away. So for example, after visiting vertex A, vertex E and C are visited before visiting B, F and G because those vertices are further away.",
      "html": "<p>As you can see in the animation above, BFS traversal visits vertices the same distance from the starting vertex, before visiting vertices further away. So for example, after visiting vertex A, vertex E and C are visited before visiting B, F and G because those vertices are further away.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Breadth First Search traversal works this way by putting all adjacent vertices in a queue (if they are not already visited), and then using the queue to visit the next vertex.",
      "html": "<p>Breadth First Search traversal works this way by putting all adjacent vertices in a queue (if they are not already visited), and then using the queue to visit the next vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This code example for Breadth First Search traversal is the same as for the Depth First Search code example above, except for the bfs() method:",
      "html": "<p>This code example for Breadth First Search traversal is the same as for the Depth First Search code example above, except for the <code>bfs()</code> method:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nbfs\n(\nself\n,\nstart_vertex_data\n)\n:\n\nqueue\n=\n\n[\nself\n.\nvertex_data\n.\nindex\n(\nstart_vertex_data\n)\n]\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nvisited\n[\nqueue\n[\n0\n]\n]\n\n=\n\nTrue\n\n\n\nwhile\nqueue\n:\n\ncurrent_vertex\n=\nqueue\n.\npop\n(\n0\n)\n\n\nprint\n(\nself\n.\nvertex_data\n[\ncurrent_vertex\n]\n,\nend\n=\n' '\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\ncurrent_vertex\n]\n[\ni\n]\n\n==\n\n1\n\nand\n\nnot\nvisited\n[\ni\n]\n:\n\nqueue\n.\nappend\n(\ni\n)\n\nvisited\n[\ni\n]\n\n=\n\nTrue",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" data-line=\"24-35,60\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n    visited<span class=\"token punctuation\">[</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n          \n    <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n        current_vertex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n      \n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 2-4: The bfs() method starts by creating a queue with the start vertex inside, creating a visited array, and setting the start vertex as visited.",
      "html": "<p><strong>Line 2-4: </strong>The <code>bfs()</code> method starts by creating a queue with the start vertex inside, creating a <code>visited</code> array, and setting the start vertex as visited.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 6-13: The BFS traversal works by taking a vertex from the queue, printing it, and adding adjacent vertices to the queue if they are not visited yet, and then continue to take vertices from the queue in this way. The traversal finishes when the last element in the queue has no unvisited adjacent vertices.",
      "html": "<p><strong>Line 6-13: </strong>The BFS traversal works by taking a vertex from the queue, printing it, and adding adjacent vertices to the queue if they are not visited yet, and then continue to take vertices from the queue in this way. The traversal finishes when the last element in the queue has no unvisited adjacent vertices.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DFS and BFS Traversal of a Directed Graph",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Depth first and breadth first traversals can actually be implemented to work on directed Graphs (instead of undirected) with just very few changes.",
      "html": "<p>Depth first and breadth first traversals can actually be implemented to work on directed Graphs (instead of undirected) with just very few changes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the animation below to see how a directed Graph can be traversed using DFS or BFS.",
      "html": "<p>Run the animation below to see how a directed Graph can be traversed using DFS or BFS.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To go from traversing a directed Graph instead of an undirected Graph, we just need to remove the last line in the add_edge() method:",
      "html": "<p>To go from traversing a directed Graph instead of an undirected Graph, we just need to remove the last line in the <code>add_edge()</code> method:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\n\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n=\n\n1",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <del>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></del><span class=\"token number\"></span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We must also take care when we build our Graph because the edges are now directed.",
      "html": "<p>We must also take care when we build our Graph because the edges are now directed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code example below contains both BFS and DFS traversal of the directed Graph from the animation above:",
      "html": "<p>The code example below contains both BFS and DFS traversal of the directed Graph from the animation above:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\n\n#self.adj_matrix[v][u] = 1\n\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\nprint_graph\n(\nself\n)\n:\n\n\nprint\n(\n\"Adjacency Matrix:\"\n)\n\n\nfor\nrow\nin\nself\n.\nadj_matrix\n:\n\n\nprint\n(\n' '\n.\njoin\n(\nmap\n(\nstr\n,\nrow\n)\n)\n)\n\n\nprint\n(\n\"\\nVertex Data:\"\n)\n\n\nfor\nvertex\n,\ndata\nin\n\nenumerate\n(\nself\n.\nvertex_data\n)\n:\n\n\nprint\n(\nf\"Vertex\n{\nvertex\n}\n:\n{\ndata\n}\n\"\n)\n\n\n\ndef\n\ndfs_util\n(\nself\n,\nv\n,\nvisited\n)\n:\n\nvisited\n[\nv\n]\n\n=\n\nTrue\n\n\nprint\n(\nself\n.\nvertex_data\n[\nv\n]\n,\nend\n=\n' '\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\nv\n]\n[\ni\n]\n\n==\n\n1\n\nand\n\nnot\nvisited\n[\ni\n]\n:\n\nself\n.\ndfs_util\n(\ni\n,\nvisited\n)\n\n\n\ndef\n\ndfs\n(\nself\n,\nstart_vertex_data\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\n\nstart_vertex\n=\nself\n.\nvertex_data\n.\nindex\n(\nstart_vertex_data\n)\n\nself\n.\ndfs_util\n(\nstart_vertex\n,\nvisited\n)\n\n\n\ndef\n\nbfs\n(\nself\n,\nstart_vertex_data\n)\n:\n\nqueue\n=\n\n[\nself\n.\nvertex_data\n.\nindex\n(\nstart_vertex_data\n)\n]\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nvisited\n[\nqueue\n[\n0\n]\n]\n\n=\n\nTrue\n\n\n\nwhile\nqueue\n:\n\ncurrent_vertex\n=\nqueue\n.\npop\n(\n0\n)\n\n\nprint\n(\nself\n.\nvertex_data\n[\ncurrent_vertex\n]\n,\nend\n=\n' '\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\ncurrent_vertex\n]\n[\ni\n]\n\n==\n\n1\n\nand\n\nnot\nvisited\n[\ni\n]\n:\n\nqueue\n.\nappend\n(\ni\n)\n\nvisited\n[\ni\n]\n\n=\n\nTrue\n\n\ng\n=\nGraph\n(\n7\n)\n\n\ng\n.\nadd_vertex_data\n(\n0\n,\n\n'A'\n)\n\ng\n.\nadd_vertex_data\n(\n1\n,\n\n'B'\n)\n\ng\n.\nadd_vertex_data\n(\n2\n,\n\n'C'\n)\n\ng\n.\nadd_vertex_data\n(\n3\n,\n\n'D'\n)\n\ng\n.\nadd_vertex_data\n(\n4\n,\n\n'E'\n)\n\ng\n.\nadd_vertex_data\n(\n5\n,\n\n'F'\n)\n\ng\n.\nadd_vertex_data\n(\n6\n,\n\n'G'\n)\n\n\ng\n.\nadd_edge\n(\n3\n,\n\n0\n)\n\n# D -> A\n\ng\n.\nadd_edge\n(\n3\n,\n\n4\n)\n\n# D -> E\n\ng\n.\nadd_edge\n(\n4\n,\n\n0\n)\n\n# E -> A\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n)\n\n# A -> C\n\ng\n.\nadd_edge\n(\n2\n,\n\n5\n)\n\n# C -> F\n\ng\n.\nadd_edge\n(\n2\n,\n\n6\n)\n\n# C -> G\n\ng\n.\nadd_edge\n(\n5\n,\n\n1\n)\n\n# F -> B\n\ng\n.\nadd_edge\n(\n1\n,\n\n2\n)\n\n# B -> C\n\n\ng\n.\nprint_graph\n(\n)\n\n\n\nprint\n(\n\"\\nDepth First Search starting from vertex D:\"\n)\n\ng\n.\ndfs\n(\n'D'\n)\n\n\n\nprint\n(\n\"\\n\\nBreadth First Search starting from vertex D:\"\n)\n\ng\n.\nbfs\n(\n'D'\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token comment\">#self.adj_matrix[v][u] = 1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        visited<span class=\"token punctuation\">[</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        \n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            current_vertex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># F -&gt; B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; C</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDepth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\nBreadth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now that we have looked at two basic algorithms for how to traverse Graphs, we will use the next pages to see how other algorithms can run on the Graph data structure.",
      "html": "<p>Now that we have looked at two basic algorithms for how to traverse Graphs, we will use the next pages to see how other algorithms can run on the Graph data structure.</p>"
    }
  ]
}