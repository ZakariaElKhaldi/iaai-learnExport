{
  "title": "DSA Memoization",
  "url": "https://www.w3schools.com/dsa/dsa_ref_memoization.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Memoization",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Memoization",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Memoization is a technique where results are stored to avoid doing the same computations many times.",
      "html": "<p>Memoization is a technique where results are stored to avoid doing the same computations many times.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When Memoization is used to improve recursive algorithms, it is called a \"top-down\" approach because of how it starts with the main problem and breaks it down into smaller subproblems.",
      "html": "<p>When Memoization is used to improve recursive algorithms, it is called a \"top-down\" approach because of how it starts with the main problem and breaks it down into smaller subproblems.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Dynamic Programming",
          "href": "https://www.w3schools.com/dsa_ref_dynamic_programming.php",
          "title": ""
        }
      ],
      "text": "Memoization is used in Dynamic Programming .",
      "html": "<p>Memoization is used in <a href=\"dsa_ref_dynamic_programming.php\">Dynamic Programming</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using Memoization To Find The n n th Fibonacci Number",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/dsa_algo_simple.php#nthfibo",
          "title": ""
        }
      ],
      "text": "The n n th Fibonacci number can be found using recursion. Read more about how that is done on this page .",
      "html": "<p>The <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>th Fibonacci number can be found using recursion. Read more about how that is done on <a href=\"dsa_algo_simple.php#nthfibo\">this page</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The problem with this implementation is that the number of computations and recursive calls \"explodes\" when trying to find a higher Fibonacci number, because the same computations are done over and over again.",
      "html": "<p>The problem with this implementation is that the number of computations and recursive calls \"explodes\" when trying to find a higher Fibonacci number, because the same computations are done over and over again.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nF\n(\nn\n)\n:\n\n\nprint\n(\n'Computing F('\n+\nstr\n(\nn\n)\n+\n')'\n)\n\n\nif\nn\n<=\n\n1\n:\n\n\nreturn\nn\n\nelse\n:\n\n\nreturn\nF\n(\nn\n-\n\n1\n)\n\n+\nF\n(\nn\n-\n\n2\n)\n\n\n\nprint\n(\n'F(6) = '\n,\nF\n(\n6\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Computing F('</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(6) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see from running the example above, there are 25 computations, with the same computations done many times, even for just finding the 6th Fibonacci number.",
      "html": "<p>As you can see from running the example above, there are 25 computations, with the same computations done many times, even for just finding the 6th Fibonacci number.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But using memoization can help finding the n n th Fibonacci number using recursion much more effectively.",
      "html": "<p>But using memoization can help finding the <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-7\"><span class=\"mjx-mrow\" id=\"MJXc-Node-8\"><span class=\"mjx-mi\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>th Fibonacci number using recursion much more effectively.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We use memoization by creating an array memo to hold the Fibonacci numbers, so that Fibonacci number n can be found as element memo[n] . And we only compute the Fibonacci number if it does not already exist in the memo array.",
      "html": "<p>We use memoization by creating an array <code>memo</code> to hold the Fibonacci numbers, so that Fibonacci number <code>n</code> can be found as element <code>memo[n]</code>. And we only compute the Fibonacci number if it does not already exist in the <code>memo</code> array.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nF\n(\nn\n)\n:\n\n\nif\nmemo\n[\nn\n]\n\n!=\n\nNone\n:\n\n# Already computed\n\n\nreturn\nmemo\n[\nn\n]\n\n\nelse\n:\n\n# Computation needed\n\n\nprint\n(\n'Computing F('\n+\nstr\n(\nn\n)\n+\n')'\n)\n\n\nif\nn\n<=\n\n1\n:\n\nmemo\n[\nn\n]\n\n=\nn\n\nelse\n:\n\nmemo\n[\nn\n]\n\n=\nF\n(\nn\n-\n\n1\n)\n\n+\nF\n(\nn\n-\n\n2\n)\n\n\nreturn\nmemo\n[\nn\n]\n\n\nmemo\n=\n\n[\nNone\n]\n*\n7\n\n\nprint\n(\n'F(6) = '\n,\nF\n(\n6\n)\n)\n\n\nprint\n(\n'memo = '\n,\nmemo\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Already computed</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Computation needed</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Computing F('</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> \n\nmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(6) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memo = '</span><span class=\"token punctuation\">,</span>memo<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see by running the examples above, memoization is very helpful to reduce the number of computations.",
      "html": "<p>As you can see by running the examples above, memoization is very helpful to reduce the number of computations. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The number of computations is reduced from 25 in the initial code, to just 7 in the last example using memoization, and the benefit of using memoization increases really fast by how high the Fibonacci number we want to find is.",
      "html": "<p>The number of computations is reduced from 25 in the initial code, to just 7 in the last example using memoization, and the benefit of using memoization increases really fast by how high the Fibonacci number we want to find is.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finding the 30th Fibonacci number requires 2,692,537 computations in the initial code, but it just requires 31 computations in the algorithm implemented using memoization!",
      "html": "<p>Finding the 30th Fibonacci number requires 2,692,537 computations in the initial code, but it just requires 31 computations in the algorithm implemented using memoization!</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You get this result by running the code below.",
      "html": "<p>You get this result by running the code below.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "computation_count\n=\n\n0\n\n\ndef\n\nF\n(\nn\n)\n:\n\n\nglobal\ncomputation_count\ncomputation_count\n+=\n\n1\n\n\nif\nn\n<=\n\n1\n:\n\n\nreturn\nn\n\nelse\n:\n\n\nreturn\nF\n(\nn\n-\n\n1\n)\n\n+\nF\n(\nn\n-\n\n2\n)\n\n\ncomputation_count_mem\n=\n\n0\n\n\ndef\n\nF_mem\n(\nn\n)\n:\n\n\nif\nmemo\n[\nn\n]\n\n!=\n\nNone\n:\n\n# Already computed\n\n\nreturn\nmemo\n[\nn\n]\n\n\nelse\n:\n\n# Computation needed\n\n\nglobal\ncomputation_count_mem\ncomputation_count_mem\n+=\n\n1\n\n\nif\nn\n<=\n\n1\n:\n\nmemo\n[\nn\n]\n\n=\nn\n\nelse\n:\n\nmemo\n[\nn\n]\n\n=\nF_mem\n(\nn\n-\n\n1\n)\n\n+\nF_mem\n(\nn\n-\n\n2\n)\n\n\nreturn\nmemo\n[\nn\n]\n\n\n\nprint\n(\n'F(30) = '\n,\nF\n(\n30\n)\n)\n\n\nprint\n(\nf'Number of computations:\n{\ncomputation_count\n}\n'\n)\n\n\nprint\n(\n'\\nUsing memoization:'\n)\n\nmemo\n=\n\n[\nNone\n]\n*\n31\n\n\nprint\n(\n'F(30) = '\n,\nF_mem\n(\n30\n)\n)\n\n\nprint\n(\nf'Number of computations with memoiztion:\n{\ncomputation_count_mem\n}\n'\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\">computation_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> computation_count\n    computation_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        \ncomputation_count_mem <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F_mem</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Already computed</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Computation needed</span>\n        <span class=\"token keyword keyword-global\">global</span> computation_count_mem\n        computation_count_mem <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F_mem<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F_mem<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> \n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(30) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Number of computations: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>computation_count<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nUsing memoization:'</span><span class=\"token punctuation\">)</span>\nmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">31</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(30) = '</span><span class=\"token punctuation\">,</span>F_mem<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Number of computations with memoiztion: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>computation_count_mem<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Memoization in AVL Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/dsa_data_avltrees.php",
          "title": ""
        }
      ],
      "text": "For more details about what an AVL Tree is, please see this page .",
      "html": "<p>For more details about what an AVL Tree is, please see <a href=\"dsa_data_avltrees.php\">this page</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An AVL tree is a type of Binary Tree that is self-balancing.",
      "html": "<p>An AVL tree is a type of Binary Tree that is self-balancing.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Every time a node is inserted or deleted from an AVL tree, the balancing factor must be calculated for all ancestors, using the height of the left and right subtrees to find out if a rotation is needed to restore balance.",
      "html": "<p>Every time a node is inserted or deleted from an AVL tree, the balancing factor must be calculated for all ancestors, using the height of the left and right subtrees to find out if a rotation is needed to restore balance.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To avoid calculating the height of each node (going all the way down to the leaf nodes) to calculate the balancing factors, each node has its subtree height stored.",
      "html": "<p>To avoid calculating the height of each node (going all the way down to the leaf nodes) to calculate the balancing factors, each node has its subtree height stored.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nTreeNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nleft\n=\n\nNone\n\nself\n.\nright\n=\n\nNone\n\nself\n.\nheight\n=\n\n1",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" data-line=\"6\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"6\" data-start=\"6\" style=\"top: 110px; width: 789px;\"> \n</div></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that to find the balance factor for a node, the already stored left child's height is subtracted from the already stored right child's height, no other calculations needed.",
      "html": "<p>This means that to find the balance factor for a node, the already stored left child's height is subtracted from the already stored right child's height, no other calculations needed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Storing height in AVL trees is a form of memoization, because values are stored to avoid re-calculating them. In AVL trees, when the height is stored like this, it is called an augmented property .",
      "html": "<p>Storing height in AVL trees is a form of memoization, because values are stored to avoid re-calculating them. In AVL trees, when the height is stored like this, it is called an <strong>augmented property</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An augmented property is a property of an element that does not have to be stored, but is stored to make operations more efficient.",
      "html": "<p>An augmented property is a property of an element that does not have to be stored, but is stored to make operations more efficient.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "retracing",
          "href": "https://www.w3schools.com/dsa_data_avltrees.php#retracing",
          "title": ""
        }
      ],
      "text": "The node heights must be calculated at some point of course, but that is only done when strictly needed, using retracing .",
      "html": "<p>The node heights must be calculated at some point of course, but that is only done when strictly needed, using <a href=\"dsa_data_avltrees.php#retracing\">retracing</a>.</p>"
    }
  ]
}