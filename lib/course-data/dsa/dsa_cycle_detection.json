{
  "title": "DSA Graphs Cycle Detection",
  "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Graphs Cycle Detection",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Cycles in Graphs",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A cycle in a Graph is a path that starts and ends at the same vertex, where no edges are repeated. It is similar to walking through a maze and ending up exactly where you started.",
      "html": "<p>A cycle in a Graph is a path that starts and ends at the same vertex, where no edges are repeated. It is similar to walking through a maze and ending up exactly where you started.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Is cyclic:",
      "html": "<p>Is cyclic: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A cycle can be defined slightly different depending on the situation. A self-loop for example, where an edge goes from and to the same vertex, might or might not be considered a cycle, depending on the problem you are trying to solve.",
      "html": "<p>A cycle can be defined slightly different depending on the situation. A self-loop for example, where an edge goes from and to the same vertex, might or might not be considered a cycle, depending on the problem you are trying to solve.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Cycle Detection",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is important to be able to detect cycles in Graphs because cycles can indicate problems or special conditions in many applications like networking, scheduling, and circuit design.",
      "html": "<p>It is important to be able to detect cycles in Graphs because cycles can indicate problems or special conditions in many applications like networking, scheduling, and circuit design.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The two most common ways to detect cycles are:",
      "html": "<p>The two most common ways to detect cycles are:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How cycle detection with DFS and Union-Find work, and how they are implemented, are explained in more detail below.",
      "html": "<p>How cycle detection with DFS and Union-Find work, and how they are implemented, are explained in more detail below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DFS Cycle Detection for Undirected Graphs",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "the DFS traversal code",
          "href": "https://www.w3schools.com/dsa_algo_graphs_traversal.php#dfsTraversal",
          "title": ""
        }
      ],
      "text": "To detect cycles in an undirected Graph using Depth First Search (DFS), we use a code very similar to the DFS traversal code on the previous page, with just a few changes.",
      "html": "<p>To detect cycles in an undirected Graph using Depth First Search (DFS), we use a code very similar to <a href=\"dsa_algo_graphs_traversal.php#dfsTraversal\">the DFS traversal code</a> on the previous page, with just a few changes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the animation below to see how DFS cycle detection runs on a specific Graph, starting in vertex A (this is the same as the previous animation).",
      "html": "<p>Run the animation below to see how DFS cycle detection runs on a specific Graph, starting in vertex A (this is the same as the previous animation).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Is cyclic:",
      "html": "<p>Is cyclic: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The DFS traversal starts in vertex A because that is the first vertex in the adjacency matrix. Then, for every new vertex visited, the traversal method is called recursively on all adjacent vertices that have not been visited yet. The cycle is detected when vertex F is visited, and it is discovered that the adjacent vertex C has already been visited.",
      "html": "<p>The DFS traversal starts in vertex A because that is the first vertex in the adjacency matrix. Then, for every new vertex visited, the traversal method is called recursively on all adjacent vertices that have not been visited yet. The cycle is detected when vertex F is visited, and it is discovered that the adjacent vertex C has already been visited.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n=\n\n1\n\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\nprint_graph\n(\nself\n)\n:\n\n\nprint\n(\n\"Adjacency Matrix:\"\n)\n\n\nfor\nrow\nin\nself\n.\nadj_matrix\n:\n\n\nprint\n(\n' '\n.\njoin\n(\nmap\n(\nstr\n,\nrow\n)\n)\n)\n\n\nprint\n(\n\"\\nVertex Data:\"\n)\n\n\nfor\nvertex\n,\ndata\nin\n\nenumerate\n(\nself\n.\nvertex_data\n)\n:\n\n\nprint\n(\nf\"Vertex\n{\nvertex\n}\n:\n{\ndata\n}\n\"\n)\n\n\n\ndef\n\ndfs_util\n(\nself\n,\nv\n,\nvisited\n,\nparent\n)\n:\n\nvisited\n[\nv\n]\n\n=\n\nTrue\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\nv\n]\n[\ni\n]\n\n==\n\n1\n:\n\n\nif\n\nnot\nvisited\n[\ni\n]\n:\n\n\nif\nself\n.\ndfs_util\n(\ni\n,\nvisited\n,\nv\n)\n:\n\n\nreturn\n\nTrue\n\n\nelif\nparent\n!=\ni\n:\n\n\nreturn\n\nTrue\n\n\nreturn\n\nFalse\n\n\n\ndef\n\nis_cyclic\n(\nself\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\n\nnot\nvisited\n[\ni\n]\n:\n\n\nif\nself\n.\ndfs_util\n(\ni\n,\nvisited\n,\n\n-\n1\n)\n:\n\n\nreturn\n\nTrue\n\n\nreturn\n\nFalse\n\n\ng\n=\nGraph\n(\n7\n)\n\n\ng\n.\nadd_vertex_data\n(\n0\n,\n\n'A'\n)\n\ng\n.\nadd_vertex_data\n(\n1\n,\n\n'B'\n)\n\ng\n.\nadd_vertex_data\n(\n2\n,\n\n'C'\n)\n\ng\n.\nadd_vertex_data\n(\n3\n,\n\n'D'\n)\n\ng\n.\nadd_vertex_data\n(\n4\n,\n\n'E'\n)\n\ng\n.\nadd_vertex_data\n(\n5\n,\n\n'F'\n)\n\ng\n.\nadd_vertex_data\n(\n6\n,\n\n'G'\n)\n\n\ng\n.\nadd_edge\n(\n3\n,\n\n0\n)\n\n# D - A\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n)\n\n# A - C\n\ng\n.\nadd_edge\n(\n0\n,\n\n3\n)\n\n# A - D\n\ng\n.\nadd_edge\n(\n0\n,\n\n4\n)\n\n# A - E\n\ng\n.\nadd_edge\n(\n4\n,\n\n2\n)\n\n# E - C\n\ng\n.\nadd_edge\n(\n2\n,\n\n5\n)\n\n# C - F\n\ng\n.\nadd_edge\n(\n2\n,\n\n1\n)\n\n# C - B\n\ng\n.\nadd_edge\n(\n2\n,\n\n6\n)\n\n# C - G\n\ng\n.\nadd_edge\n(\n1\n,\n\n5\n)\n\n# B - F\n\n\ng\n.\nprint_graph\n(\n)\n\n\n\nprint\n(\n\"\\nGraph has cycle:\"\n,\ng\n.\nis_cyclic\n(\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" data-line=\"24-34,36-42,66\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword keyword-elif\">elif</span> parent <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - F</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nGraph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"24-34\" style=\"top: 507px; height: 242px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"36-42\" style=\"top: 771px; height: 154px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"66\" style=\"top: 1431px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 66: The DFS cycle detection starts when the is_cyclic() method is called.",
      "html": "<p><strong>Line 66: </strong>The DFS cycle detection starts when the <code>is_cyclic()</code> method is called.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 37: The visited array is first set to false for all vertices, because no vertices are visited yet at this point.",
      "html": "<p><strong>Line 37: </strong>The <code>visited</code> array is first set to <code>false</code> for all vertices, because no vertices are visited yet at this point.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 38-42: DFS cycle detection is run on all vertices in the Graph. This is to make sure all vertices are visited in case the Graph is not connected. If a node is already visited, there must be a cycle, and True is returned. If all nodes are visited just ones, which means no cycles are detected, False is returned.",
      "html": "<p><strong>Line 38-42: </strong>DFS cycle detection is run on all vertices in the Graph. This is to make sure all vertices are visited in case the Graph is not connected. If a node is already visited, there must be a cycle, and <code>True</code> is returned. If all nodes are visited just ones, which means no cycles are detected, <code>False</code> is returned.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 24-34: This is the part of the DFS cycle detection that visits a vertex, and then visits adjacent vertices recursively. A cycle is detected and True is returned if an adjacent vertex has already been visited, and it is not the parent node.",
      "html": "<p><strong>Line 24-34: </strong>This is the part of the DFS cycle detection that visits a vertex, and then visits adjacent vertices recursively. A cycle is detected and <code>True</code> is returned if an adjacent vertex has already been visited, and it is not the parent node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DFS Cycle Detection for Directed Graphs",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To detect cycles in Graphs that are directed, the algorithm is still very similar as for undirected Graphs, but the code must be modified a little bit because for a directed Graph, if we come to an adjacent node that has already been visited, it does not necessarily mean that there is a cycle.",
      "html": "<p>To detect cycles in Graphs that are directed, the algorithm is still very similar as for undirected Graphs, but the code must be modified a little bit because for a directed Graph, if we come to an adjacent node that has already been visited, it does not necessarily mean that there is a cycle.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just consider the following Graph where two paths are explored, trying to detect a cycle:",
      "html": "<p>Just consider the following Graph where two paths are explored, trying to detect a cycle:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In path 1, the first path to be explored, vertices A-> B-> C are visited, no cycles detected.",
      "html": "<p>In path 1, the first path to be explored, vertices A-&gt;B-&gt;C are visited, no cycles detected.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the second path to be explored (path 2), vertices D-> B-> C are visited, and the path has no cycles, right? But without changes in our program, a false cycle would actually be detected when going from D to the adjacent vertex B, because B has already been visited in path 1. To avoid such false detections, the code is modified to detect cycles only in case a node has been visited before in the same path.",
      "html": "<p>In the second path to be explored (path 2), vertices D-&gt;B-&gt;C are visited, and the path has no cycles, right? But without changes in our program, a false cycle would actually be detected when going from D to the adjacent vertex B, because B has already been visited in path 1. To avoid such false detections, the code is modified to detect cycles only in case a node has been visited before in the same path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Is cyclic:",
      "html": "<p>Is cyclic: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement DFS cycle detection on a directed Graph, like in the animation above, we need to remove the symmetry we have in the adjacency matrix for undirected Graphs. We also need to use a recStack array to keep track of visited vertices in the current recursive path.",
      "html": "<p>To implement DFS cycle detection on a directed Graph, like in the animation above, we need to remove the symmetry we have in the adjacency matrix for undirected Graphs. We also need to use a <code>recStack</code> array to keep track of visited vertices in the current recursive path.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\n# ......\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\n\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n=\n\n1\n\n\n# ......\n\n\ndef\n\ndfs_util\n(\nself\n,\nv\n,\nvisited\n,\nrecStack\n)\n:\n\nvisited\n[\nv\n]\n\n=\n\nTrue\n\nrecStack\n[\nv\n]\n\n=\n\nTrue\n\n\nprint\n(\n\"Current vertex:\"\n,\nself\n.\nvertex_data\n[\nv\n]\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\nv\n]\n[\ni\n]\n\n==\n\n1\n:\n\n\nif\n\nnot\nvisited\n[\ni\n]\n:\n\n\nif\nself\n.\ndfs_util\n(\ni\n,\nvisited\n,\nrecStack\n)\n:\n\n\nreturn\n\nTrue\n\n\nelif\nrecStack\n[\ni\n]\n:\n\n\nreturn\n\nTrue\n\n\nrecStack\n[\nv\n]\n\n=\n\nFalse\n\n\nreturn\n\nFalse\n\n\n\ndef\n\nis_cyclic\n(\nself\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nrecStack\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nif\n\nnot\nvisited\n[\ni\n]\n:\n\n\nprint\n(\n)\n\n#new line\n\n\nif\nself\n.\ndfs_util\n(\ni\n,\nvisited\n,\nrecStack\n)\n:\n\n\nreturn\n\nTrue\n\n\nreturn\n\nFalse\n\n\ng\n=\nGraph\n(\n7\n)\n\n\n\n# ......\n\n\ng\n.\nadd_edge\n(\n3\n,\n\n0\n)\n\n# D -> A\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n)\n\n# A -> C\n\ng\n.\nadd_edge\n(\n2\n,\n\n1\n)\n\n# C -> B\n\ng\n.\nadd_edge\n(\n2\n,\n\n4\n)\n\n# C -> E\n\ng\n.\nadd_edge\n(\n1\n,\n\n5\n)\n\n# B -> F\n\ng\n.\nadd_edge\n(\n4\n,\n\n0\n)\n\n# E -> A\n\ng\n.\nadd_edge\n(\n2\n,\n\n6\n)\n\n# C -> G\n\n\ng\n.\nprint_graph\n(\n)\n\n\n\nprint\n(\n\"Graph has cycle:\"\n,\ng\n.\nis_cyclic\n(\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" data-line=\"6,26, 14-19\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ......</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <del>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></del><span class=\"token number\"></span>\n    <span class=\"token comment\"># ......</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        recStack<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current vertex:\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword keyword-elif\">elif</span> recStack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        \n        recStack<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        recStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#new line</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ......</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; G</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"6\" style=\"top: 111px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"26\" style=\"top: 551px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"14-19\" style=\"top: 287px; height: 132px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 6: This line is removed because it is only applicable for undirected Graphs.",
      "html": "<p><strong>Line 6: </strong>This line is removed because it is only applicable for undirected Graphs.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 26: The recStack array keeps an overview over which vertices have been visited during a recursive exploration of a path.",
      "html": "<p><strong>Line 26: </strong>The <code>recStack</code> array keeps an overview over which vertices have been visited during a recursive exploration of a path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 14-19: For every adjacent vertex not visited before, do a recursive DFS cycle detection. If an adjacent vertex has been visited before, also in the same recursive path (line 13), a cycle has been found, and True is returned.",
      "html": "<p><strong>Line 14-19: </strong>For every adjacent vertex not visited before, do a recursive DFS cycle detection. If an adjacent vertex has been visited before, also in the same recursive path (line 13), a cycle has been found, and <code>True</code> is returned.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Union-Find Cycle Detection",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Detecting cycles using Union-Find is very different from using Depth First Search.",
      "html": "<p>Detecting cycles using Union-Find is very different from using Depth First Search.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Union-Find cycle detection works by first putting each node in its own subset (like a bag or container). Then, for every edge, the subsets belonging to each vertex are merged. For an edge, if the vertices already belong to the same subset, it means that we have found a cycle.",
      "html": "<p>Union-Find cycle detection works by first putting each node in its own subset (like a bag or container). Then, for every edge, the subsets belonging to each vertex are merged. For an edge, if the vertices already belong to the same subset, it means that we have found a cycle.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Is cyclic:",
      "html": "<p>Is cyclic: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the animation above, Union-Find cycle detection explores the edges in the Graph. As edges are explored, the subset of vertex A grows to also include vertices B, C, and D. The cycle is detected when the edge between A and D is explored, and it is discovered that both A and D already belong to the same subset.",
      "html": "<p>In the animation above, Union-Find cycle detection explores the edges in the Graph. As edges are explored, the subset of vertex A grows to also include vertices B, C, and D. The cycle is detected when the edge between A and D is explored, and it is discovered that both A and D already belong to the same subset.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The edges between D, E, and F also construct a circle, but this circle is not detected because the algorithm stops (returns True ) when the first circle is detected.",
      "html": "<p>The edges between D, E, and F also construct a circle, but this circle is not detected because the algorithm stops (returns <code>True</code>) when the first circle is detected.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Union-Find cycle detection is only applicable for Graphs that are undirected.",
      "html": "<p>Union-Find cycle detection is only applicable for Graphs that are undirected.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "adjacency matrix representation",
          "href": "https://www.w3schools.com/dsa_theory_graphs.php#adjMatrix",
          "title": ""
        }
      ],
      "text": "Union-Find cycle detection is implemented using the adjacency matrix representation , so setting up the Graph structure with vertices and edges is basically the same as in previous examples.",
      "html": "<p>Union-Find cycle detection is implemented using the <a href=\"dsa_theory_graphs.php#adjMatrix\">adjacency matrix representation</a>, so setting up the Graph structure with vertices and edges is basically the same as in previous examples.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\nself\n.\nparent\n=\n\n[\ni\nfor\ni\nin\n\nrange\n(\nsize\n)\n]\n\n# Union-Find array\n\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n)\n:\n\n\nif\n\n0\n\n<=\nu\n<\nself\n.\nsize\nand\n\n0\n\n<=\nv\n<\nself\n.\nsize\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\n\n1\n\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n=\n\n1\n\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\nfind\n(\nself\n,\ni\n)\n:\n\n\nif\nself\n.\nparent\n[\ni\n]\n\n==\ni\n:\n\n\nreturn\ni\n\nreturn\nself\n.\nfind\n(\nself\n.\nparent\n[\ni\n]\n)\n\n\n\ndef\n\nunion\n(\nself\n,\nx\n,\ny\n)\n:\n\nx_root\n=\nself\n.\nfind\n(\nx\n)\n\ny_root\n=\nself\n.\nfind\n(\ny\n)\n\n\nprint\n(\n'Union:'\n,\nself\n.\nvertex_data\n[\nx\n]\n,\n'+'\n,\nself\n.\nvertex_data\n[\ny\n]\n)\n\nself\n.\nparent\n[\nx_root\n]\n\n=\ny_root\n\nprint\n(\nself\n.\nparent\n,\n'\\n'\n)\n\n\n\ndef\n\nis_cyclic\n(\nself\n)\n:\n\n\nfor\ni\nin\n\nrange\n(\nself\n.\nsize\n)\n:\n\n\nfor\nj\nin\n\nrange\n(\ni\n+\n\n1\n,\nself\n.\nsize\n)\n:\n\n\nif\nself\n.\nadj_matrix\n[\ni\n]\n[\nj\n]\n:\n\nx\n=\nself\n.\nfind\n(\ni\n)\n\ny\n=\nself\n.\nfind\n(\nj\n)\n\n\nif\nx\n==\ny\n:\n\n\nreturn\n\nTrue\n\nself\n.\nunion\n(\nx\n,\ny\n)\n\n\nreturn\n\nFalse\n\n\ng\n=\nGraph\n(\n7\n)\n\n\ng\n.\nadd_vertex_data\n(\n0\n,\n\n'A'\n)\n\ng\n.\nadd_vertex_data\n(\n1\n,\n\n'B'\n)\n\ng\n.\nadd_vertex_data\n(\n2\n,\n\n'C'\n)\n\ng\n.\nadd_vertex_data\n(\n3\n,\n\n'D'\n)\n\ng\n.\nadd_vertex_data\n(\n4\n,\n\n'E'\n)\n\ng\n.\nadd_vertex_data\n(\n5\n,\n\n'F'\n)\n\ng\n.\nadd_vertex_data\n(\n6\n,\n\n'G'\n)\n\n\ng\n.\nadd_edge\n(\n1\n,\n\n0\n)\n\n# B - A\n\ng\n.\nadd_edge\n(\n0\n,\n\n3\n)\n\n# A - D\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n)\n\n# A - C\n\ng\n.\nadd_edge\n(\n2\n,\n\n3\n)\n\n# C - D\n\ng\n.\nadd_edge\n(\n3\n,\n\n4\n)\n\n# D - E\n\ng\n.\nadd_edge\n(\n3\n,\n\n5\n)\n\n# D - F\n\ng\n.\nadd_edge\n(\n3\n,\n\n6\n)\n\n# D - G\n\ng\n.\nadd_edge\n(\n4\n,\n\n5\n)\n\n# E - F\n\n\n\nprint\n(\n\"Graph has cycle:\"\n,\ng\n.\nis_cyclic\n(\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" data-line=\"6,17-38\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Union-Find array</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> i\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x_root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        y_root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Union:'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x_root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y_root\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword keyword-if\">if</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                    self<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - F</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"6\" style=\"top: 111px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"17-38\" style=\"top: 353px; height: 484px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 6: The parent array contains the root vertex for every subset. This is used to detect a cycle by checking if two vertices on either side of an edge already belong to the same subset.",
      "html": "<p><strong>Line 6: </strong>The <code>parent</code> array contains the root vertex for every subset. This is used to detect a cycle by checking if two vertices on either side of an edge already belong to the same subset.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 17: The find method finds the root of the set that the given vertex belongs to.",
      "html": "<p><strong>Line 17: </strong>The <code>find</code> method finds the root of the set that the given vertex belongs to.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 22: The union method combines two subsets.",
      "html": "<p><strong>Line 22: </strong>The <code>union</code> method combines two subsets.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 29: The is_cyclic method uses the find method to detect a cycle if two vertices x and y are already in the same subset. If a cycle is not detected, the union method is used to combine the subsets.",
      "html": "<p><strong>Line 29: </strong>The <code>is_cyclic</code> method uses the <code>find</code> method to detect a cycle if two vertices <code>x</code> and <code>y</code> are already in the same subset. If a cycle is not detected, the <code>union</code> method is used to combine the subsets.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is a cycle in a Graph?",
      "html": "<p>What is a cycle in a Graph?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "A cycle in a Graph is a path\nthat starts and ends at the\nsame\n, where no\n\nare repeated.",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\">A cycle in a Graph is a path \nthat starts and ends at the \nsame <input maxlength=\"6\" name=\"ex1\" style=\"width: 7ch;\"/>, where no <input maxlength=\"5\" name=\"ex2\" style=\"width: 6ch;\"/> \nare repeated.\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_algo_graphs_cycledetection1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_algo_graphs_cycledetection1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}