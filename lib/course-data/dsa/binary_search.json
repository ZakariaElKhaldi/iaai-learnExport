{
  "title": "DSA Selection Sort Time Complexity",
  "url": "https://www.w3schools.com/dsa/dsa_timecomplexity_binarysearch.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Selection Sort Time Complexity",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/dsa_timecomplexity_theory.php",
          "title": ""
        }
      ],
      "text": "See this page for a general explanation of what time complexity is.",
      "html": "<p>See <a href=\"dsa_timecomplexity_theory.php\">this page</a> for a general explanation of what time complexity is.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Search Time Complexity",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Search",
          "href": "https://www.w3schools.com/dsa_algo_binarysearch.php",
          "title": ""
        }
      ],
      "text": "Binary Search finds the target value in an already sorted array by checking the center value. If the center value is not the target value, Linear Search selects the left or right sub-array and continues the search until the target value is found.",
      "html": "<p><a href=\"dsa_algo_binarysearch.php\">Binary Search</a> finds the target value in an already sorted array by checking the center value. If the center value is not the target value, Linear Search selects the left or right sub-array and continues the search until the target value is found.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To find the time complexity for Binary Search, let's see how many compare operations are needed to find the target value in an array with n n values.",
      "html": "<p>To find the time complexity for Binary Search, let's see how many compare operations are needed to find the target value in an array with <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The best case scenario is if the first middle value is the same as the target value. If this happens the target value is found straight away, with only one compare, so the time complexity is O ( 1 ) O ( 1 ) in this case.",
      "html": "<p>The <strong>best case scenario</strong> is if the first middle value is the same as the target value. If this happens the target value is found straight away, with only one compare, so the time complexity is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-7\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-8\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></math></span></span> in this case.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The worst case scenario is if the search area must be cut in half over and over until the search area is just one value. When this happens, it does not affect the time complexity if the target value is found or not.",
      "html": "<p>The <strong>worst case scenario</strong> is if the search area must be cut in half over and over until the search area is just one value. When this happens, it does not affect the time complexity if the target value is found or not.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's consider array lengths that are powers of 2, like 2, 4, 8, 16, 32 64 and so on.",
      "html": "<p>Let's consider array lengths that are powers of 2, like 2, 4, 8, 16, 32 64 and so on.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How many times must 2 be cut in half until we are looking at just one value? It is just one time, right?",
      "html": "<p>How many times must 2 be cut in half until we are looking at just one value? It is just one time, right?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How about 8? We must cut an array of 8 values in half 3 times to arrive at just one value.",
      "html": "<p>How about 8? We must cut an array of 8 values in half 3 times to arrive at just one value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An array of 32 values must be cut in half 5 times.",
      "html": "<p>An array of 32 values must be cut in half 5 times.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can see that 2 = 2 1 2 = 2 1 , 8 = 2 3 8 = 2 3 and 32 = 2 5 32 = 2 5 . So the number of times we must cut an array to arrive at just one element can be found in the power with base 2. Another way to look at it is to ask \"how many times must I multiply 2 with itself to arrive at this number?\". Mathematically we can use the base-2 logarithm, so that we can find out that an array of length n n can be split in half log 2 ( n ) log 2 \u2061 ( n ) times.",
      "html": "<p>We can see that <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-10\"><span class=\"mjx-mrow\" id=\"MJXc-Node-11\"><span class=\"mjx-mn\" id=\"MJXc-Node-12\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-13\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-14\"><span class=\"mjx-base\"><span class=\"mjx-mn\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.591em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-16\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>2</mn><mo>=</mo><msup><mn>2</mn><mn>1</mn></msup></math></span></span>, <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;/math&gt;' id=\"MathJax-Element-4-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-17\"><span class=\"mjx-mrow\" id=\"MJXc-Node-18\"><span class=\"mjx-mn\" id=\"MJXc-Node-19\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">8</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-20\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-21\"><span class=\"mjx-base\"><span class=\"mjx-mn\" id=\"MJXc-Node-22\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.591em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-23\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>8</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup></math></span></span> and <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;32&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/msup&gt;&lt;/math&gt;' id=\"MathJax-Element-5-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-24\"><span class=\"mjx-mrow\" id=\"MJXc-Node-25\"><span class=\"mjx-mn\" id=\"MJXc-Node-26\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">32</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-27\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-28\"><span class=\"mjx-base\"><span class=\"mjx-mn\" id=\"MJXc-Node-29\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.591em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-30\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">5</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>32</mn><mo>=</mo><msup><mn>2</mn><mn>5</mn></msup></math></span></span>. So the number of times we must cut an array to arrive at just one element can be found in the power with base 2. Another way to look at it is to ask \"how many times must I multiply 2 with itself to arrive at this number?\". Mathematically we can use the base-2 logarithm, so that we can find out that an array of length <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-31\"><span class=\"mjx-mrow\" id=\"MJXc-Node-32\"><span class=\"mjx-mi\" id=\"MJXc-Node-33\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> can be split in half <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mrow class=\"MJX-TeXAtom-ORD\"&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-34\"><span class=\"mjx-mrow\" id=\"MJXc-Node-35\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-36\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-37\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.377em; padding-right: 0.071em;\"><span class=\"mjx-texatom\" id=\"MJXc-Node-38\" style=\"\"><span class=\"mjx-mrow\" id=\"MJXc-Node-39\"><span class=\"mjx-mn\" id=\"MJXc-Node-40\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-41\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-42\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-43\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-44\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>log</mi><mrow class=\"MJX-TeXAtom-ORD\"><mn>2</mn></mrow></msub><mo>\u2061</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span> times.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that time complexity for Binary Search is",
      "html": "<p>This means that time complexity for Binary Search is</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "O ( log 2 n ) \u2013 \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 \u2013 \u2013 \u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013 \u2013 O ( log 2 \u2061 n ) _ _",
      "html": "<p><span class=\"math display\"><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MJXc-display\" style=\"text-align: center;\"><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"&gt;&lt;munder&gt;&lt;munder&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mrow class=\"MJX-TeXAtom-ORD\"&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mo&gt;&amp;#x005F;&lt;/mo&gt;&lt;/munder&gt;&lt;mo&gt;&amp;#x005F;&lt;/mo&gt;&lt;/munder&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; text-align: center; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-45\"><span class=\"mjx-mrow\" id=\"MJXc-Node-46\"><span class=\"mjx-munderover\" id=\"MJXc-Node-47\"><span class=\"mjx-itable\" style=\"margin-bottom: -0.223em;\"><span class=\"mjx-row\"><span class=\"mjx-cell\"><span class=\"mjx-op\"><span class=\"mjx-munderover\" id=\"MJXc-Node-48\"><span class=\"mjx-itable\" style=\"margin-bottom: -0.223em;\"><span class=\"mjx-row\"><span class=\"mjx-cell\"><span class=\"mjx-op\"><span class=\"mjx-mrow\" id=\"MJXc-Node-49\"><span class=\"mjx-mi\" id=\"MJXc-Node-50\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-51\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-52\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-53\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.377em; padding-right: 0.071em;\"><span class=\"mjx-texatom\" id=\"MJXc-Node-54\" style=\"\"><span class=\"mjx-mrow\" id=\"MJXc-Node-55\"><span class=\"mjx-mn\" id=\"MJXc-Node-56\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-57\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-58\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-59\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span></span></span><span class=\"mjx-row\"><span class=\"mjx-under\" style=\"padding-top: 0.12em;\"><span class=\"mjx-mo\" id=\"MJXc-Node-60\" style=\"vertical-align: top;\"><span class=\"mjx-delim-h\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin: 0px -0.001em 0px 0px; padding-bottom: 0.537em;\">\u2013</span><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin: 0px 0.106em 0px -0.107em; padding-bottom: 0.537em; letter-spacing: -0.115em;\">\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013</span><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: 0px; padding-bottom: 0.537em; margin-right: -0.001em; margin-bottom: 0px;\">\u2013</span></span></span></span></span></span></span></span></span></span><span class=\"mjx-row\"><span class=\"mjx-under\" style=\"padding-top: 0.12em;\"><span class=\"mjx-mo\" id=\"MJXc-Node-61\" style=\"vertical-align: top;\"><span class=\"mjx-delim-h\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin: 0px -0.001em 0px 0px; padding-bottom: 0.537em;\">\u2013</span><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin: 0px 0.106em 0px -0.107em; padding-bottom: 0.537em; letter-spacing: -0.115em;\">\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013</span><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: 0px; padding-bottom: 0.537em; margin-right: -0.001em; margin-bottom: 0px;\">\u2013</span></span></span></span></span></span></span></span></span><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\" role=\"presentation\"><math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><munder><munder><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mi>log</mi><mrow class=\"MJX-TeXAtom-ORD\"><mn>2</mn></mrow></msub><mo>\u2061</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><mo>_</mo></munder><mo>_</mo></munder></math></span></span></span></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The average case scenario is not so easy to pinpoint, but since we understand time complexity of an algorithm as the upper bound of the worst case scenario, using Big O notation, the average case scenario is not that interesting.",
      "html": "<p>The <strong>average case scenario</strong> is not so easy to pinpoint, but since we understand time complexity of an algorithm as the upper bound of the worst case scenario, using Big O notation, the average case scenario is not that interesting.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Time complexity for Binary Search O ( log 2 n ) O ( log 2 \u2061 n ) is a lot faster than Linear Search O ( n ) O ( n ) , but it is important to remember that Binary Search requires a sorted array, and Linear Search does not.",
      "html": "<p><strong>Note: </strong>Time complexity for Binary Search <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mrow class=\"MJX-TeXAtom-ORD\"&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;&amp;#x2061;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-62\"><span class=\"mjx-mrow\" id=\"MJXc-Node-63\"><span class=\"mjx-mi\" id=\"MJXc-Node-64\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-65\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-66\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-67\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.563em;\">log</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.377em; padding-right: 0.071em;\"><span class=\"mjx-texatom\" id=\"MJXc-Node-68\" style=\"\"><span class=\"mjx-mrow\" id=\"MJXc-Node-69\"><span class=\"mjx-mn\" id=\"MJXc-Node-70\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-71\"><span class=\"mjx-char\"></span></span><span class=\"mjx-mi MJXc-space1\" id=\"MJXc-Node-72\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-73\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mi>log</mi><mrow class=\"MJX-TeXAtom-ORD\"><mn>2</mn></mrow></msub><mo>\u2061</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span> is a lot faster than Linear Search <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-10-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-74\"><span class=\"mjx-mrow\" id=\"MJXc-Node-75\"><span class=\"mjx-mi\" id=\"MJXc-Node-76\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-77\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-78\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-79\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>, but it is important to remember that Binary Search requires a sorted array, and Linear Search does not.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If we draw how much time Binary Search needs to find a value in an array of n n values, compared to Linear Search, we get this graph:",
      "html": "<p>If we draw how much time Binary Search needs to find a value in an array of <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-11-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-80\"><span class=\"mjx-mrow\" id=\"MJXc-Node-81\"><span class=\"mjx-mi\" id=\"MJXc-Node-82\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> values, compared to Linear Search, we get this graph:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Search Simulation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the simulation for different number of values n n in an array, and see how many compares are needed for Binary Search to find the target value:",
      "html": "<p>Run the simulation for different number of values <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-12-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-83\"><span class=\"mjx-mrow\" id=\"MJXc-Node-84\"><span class=\"mjx-mi\" id=\"MJXc-Node-85\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> in an array, and see how many compares are needed for Binary Search to find the target value:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Set values: 300",
      "html": "<p><label>Set values: <input max=\"480\" min=\"100\" type=\"range\"/></label> 300</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Ascending",
      "html": "<p><label><input type=\"radio\" value=\"bestCase\"/> Ascending</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "10 Ascending",
      "html": "<p><label><input type=\"radio\" value=\"random30\"/> 10 Ascending</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Random",
      "html": "<p style=\"opacity: 0;\"><label><input disabled=\"\" type=\"radio\" value=\"single\"/> Random</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Descending",
      "html": "<p style=\"opacity: 0;\"><label><input disabled=\"\" type=\"radio\" value=\"worstCase\"/> Descending</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Operations: 0 Not found!",
      "html": "<p>Operations: 0<br/><span id=\"notFound\" style=\"display: none;\">Not found!</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see when running simulations of Binary Search, the search requires very few compares, even if the the array is big and the value we are looking for is not found.",
      "html": "<p>As you can see when running simulations of Binary Search, the search requires very few compares, even if the the array is big and the value we are looking for is not found.</p>"
    }
  ]
}