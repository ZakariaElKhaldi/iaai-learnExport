{
  "title": "DSA Linked Lists Operations",
  "url": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Linked Lists Operations",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked List Operations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Basic things we can do with linked lists are:",
      "html": "<p>Basic things we can do with linked lists are:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For simplicity, singly linked lists will be used to explain these operations below.",
      "html": "<p>For simplicity, singly linked lists will be used to explain these operations below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Traversal of a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Traversing a linked list means to go through the linked list by following the links from one node to the next.",
      "html": "<p>Traversing a linked list means to go through the linked list by following the links from one node to the next.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Traversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.",
      "html": "<p>Traversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's next link, and the next node's next link and so on, until the next address is null, like in the animation below:",
      "html": "<p>To traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's next link, and the next node's next link and so on, until the next address is null, like in the animation below:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below prints out the node values as it traverses along the linked list, in the same way as the animation above.",
      "html": "<p>The code below prints out the node values as it traverses along the linked list, in the same way as the animation above.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\n\ndef\n\ntraverseAndPrint\n(\nhead\n)\n:\n\ncurrentNode\n=\nhead\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"null\"\n)\n\n\nnode1\n=\nNode\n(\n7\n)\n\nnode2\n=\nNode\n(\n11\n)\n\nnode3\n=\nNode\n(\n3\n)\n\nnode4\n=\nNode\n(\n2\n)\n\nnode5\n=\nNode\n(\n9\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\nnode4\n.\nnext\n\n=\nnode5\n\ntraverseAndPrint\n(\nnode1\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Find The Lowest Value in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's find the lowest value in a singly linked list by traversing it and checking each value.",
      "html": "<p>Let's find the lowest value in a singly linked list by traversing it and checking each value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "found the lowest value in an array",
          "href": "https://www.w3schools.com/dsa_data_arrays.php#findLowest",
          "title": ""
        }
      ],
      "text": "Finding the lowest value in a linked list is very similar to how we found the lowest value in an array , except that we need to follow the next link to get to the next node.",
      "html": "<p>Finding the lowest value in a linked list is very similar to how we <a href=\"dsa_data_arrays.php#findLowest\">found the lowest value in an array</a>, except that we need to follow the next link to get to the next node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how finding the lowest value in a linked list works in principle:",
      "html": "<p>This is how finding the lowest value in a linked list works in principle:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lowest value:",
      "html": "<p>Lowest value: <span id=\"spanLowest\"></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To find the lowest value we need to traverse the list like in the previous code. But in addition to traversing the list, we must also update the current lowest value when we find a node with a lower value.",
      "html": "<p>To find the lowest value we need to traverse the list like in the previous code. But in addition to traversing the list, we must also update the current lowest value when we find a node with a lower value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the code below, the algorithm to find the lowest value is moved into a function called findLowestValue .",
      "html": "<p>In the code below, the algorithm to find the lowest value is moved into a function called <span>findLowestValue</span>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\n\ndef\n\nfindLowestValue\n(\nhead\n)\n:\n\nminValue\n=\nhead\n.\ndata\ncurrentNode\n=\nhead\n.\nnext\n\n\nwhile\ncurrentNode\n:\n\n\nif\ncurrentNode\n.\ndata\n<\nminValue\n:\n\nminValue\n=\ncurrentNode\n.\ndata\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nreturn\nminValue\n\nnode1\n=\nNode\n(\n7\n)\n\nnode2\n=\nNode\n(\n11\n)\n\nnode3\n=\nNode\n(\n3\n)\n\nnode4\n=\nNode\n(\n2\n)\n\nnode5\n=\nNode\n(\n9\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\nnode4\n.\nnext\n\n=\nnode5\n\n\nprint\n(\n\"The lowest value in the linked list is:\"\n,\nfindLowestValue\n(\nnode1\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" data-line=\"7,10-11\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">findLowestValue</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    minValue <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>data\n    currentNode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> currentNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;</span> minValue<span class=\"token punctuation\">:</span>\n            minValue <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>data\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-return\">return</span> minValue\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The lowest value in the linked list is:\"</span><span class=\"token punctuation\">,</span> findLowestValue<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7\" data-start=\"7\" style=\"top: 132px; width: 789px;\"> \n</div><div aria-hidden=\"true\" class=\"line-highlight\" data-end=\"11\" data-range=\"10-11\" data-start=\"10\" style=\"top: 198px; width: 789px;\"> \n \n</div></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Delete a Node in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this case we have the link (or pointer or address) to a node that we want to delete.",
      "html": "<p>In this case we have the link (or pointer or address) to a node that we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.",
      "html": "<p>It is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So before deleting the node, we need to get the next pointer from the previous node, and connect the previous node to the new next node before deleting the node in between.",
      "html": "<p>So before deleting the node, we need to get the next pointer from the previous node, and connect the previous node to the new next node before deleting the node in between.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In a singly linked list, like we have here, to get the next pointer from the previous node we actually need traverse the list from the start, because there is no way to go backwards from the node we want to delete.",
      "html": "<p>In a singly linked list, like we have here, to get the next pointer from the previous node we actually need traverse the list from the start, because there is no way to go backwards from the node we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.",
      "html": "<p>The simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also, it is a good idea to first connect next pointer to the node after the node we want to delete, before we delete it. This is to avoid a 'dangling' pointer, a pointer that points to nothing, even if it is just for a brief moment.",
      "html": "<p>Also, it is a good idea to first connect next pointer to the node after the node we want to delete, before we delete it. This is to avoid a 'dangling' pointer, a pointer that points to nothing, even if it is just for a brief moment.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the code below, the algorithm to delete a node is moved into a function called deleteSpecificNode .",
      "html": "<p>In the code below, the algorithm to delete a node is moved into a function called <span>deleteSpecificNode</span>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\n\ndef\n\ntraverseAndPrint\n(\nhead\n)\n:\n\ncurrentNode\n=\nhead\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"null\"\n)\n\n\n\ndef\n\ndeleteSpecificNode\n(\nhead\n,\nnodeToDelete\n)\n:\n\n\n\nif\nhead\n==\nnodeToDelete\n:\n\n\nreturn\nhead\n.\nnext\n\n\ncurrentNode\n=\nhead\n\nwhile\ncurrentNode\n.\nnext\n\nand\ncurrentNode\n.\nnext\n\n!=\nnodeToDelete\n:\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\n\nif\ncurrentNode\n.\nnext\n\nis\n\nNone\n:\n\n\nreturn\nhead\n\ncurrentNode\n.\nnext\n\n=\ncurrentNode\n.\nnext\n.\nnext\n\n\n\nreturn\nhead\n\nnode1\n=\nNode\n(\n7\n)\n\nnode2\n=\nNode\n(\n11\n)\n\nnode3\n=\nNode\n(\n3\n)\n\nnode4\n=\nNode\n(\n2\n)\n\nnode5\n=\nNode\n(\n9\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\nnode4\n.\nnext\n\n=\nnode5\n\n\nprint\n(\n\"Before deletion:\"\n)\n\ntraverseAndPrint\n(\nnode1\n)\n\n\n\n# Delete node4\n\nnode1\n=\ndeleteSpecificNode\n(\nnode1\n,\nnode4\n)\n\n\n\nprint\n(\n\"\\nAfter deletion:\"\n)\n\ntraverseAndPrint\n(\nnode1\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" data-line=\"13-27\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">deleteSpecificNode</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> nodeToDelete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword keyword-if\">if</span> head <span class=\"token operator\">==</span> nodeToDelete<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword keyword-and\">and</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">!=</span> nodeToDelete<span class=\"token punctuation\">:</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword keyword-if\">if</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> head\n\n    currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword keyword-return\">return</span> head\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before deletion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Delete node4</span>\nnode1 <span class=\"token operator\">=</span> deleteSpecificNode<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> node4<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAfter deletion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" class=\"line-highlight\" data-end=\"27\" data-range=\"13-27\" data-start=\"13\" style=\"top: 264px; width: 789px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the deleteSpecificNode function above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the next node.",
      "html": "<p>In the <span>deleteSpecificNode</span> function above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the next node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insert a Node in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the next pointers to make sure we do not break the linked list.",
      "html": "<p>Inserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the next pointers to make sure we do not break the linked list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the previous node points to the new node, and the new node points to the correct next node.",
      "html": "<p>To insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the previous node points to the new node, and the new node points to the correct next node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The simulation below shows how the links are adjusted when inserting a new node.",
      "html": "<p>The simulation below shows how the links are adjusted when inserting a new node.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nnext\n\n=\n\nNone\n\n\n\ndef\n\ntraverseAndPrint\n(\nhead\n)\n:\n\ncurrentNode\n=\nhead\n\nwhile\ncurrentNode\n:\n\n\nprint\n(\ncurrentNode\n.\ndata\n,\nend\n=\n\" -> \"\n)\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nprint\n(\n\"null\"\n)\n\n\n\ndef\n\ninsertNodeAtPosition\n(\nhead\n,\nnewNode\n,\nposition\n)\n:\n\n\nif\nposition\n==\n\n1\n:\n\nnewNode\n.\nnext\n\n=\nhead\n\nreturn\nnewNode\n\ncurrentNode\n=\nhead\n\nfor\n_\nin\n\nrange\n(\nposition\n-\n\n2\n)\n:\n\n\nif\ncurrentNode\nis\n\nNone\n:\n\n\nbreak\n\ncurrentNode\n=\ncurrentNode\n.\nnext\n\n\nnewNode\n.\nnext\n\n=\ncurrentNode\n.\nnext\n\ncurrentNode\n.\nnext\n\n=\nnewNode\n\nreturn\nhead\n\nnode1\n=\nNode\n(\n7\n)\n\nnode2\n=\nNode\n(\n3\n)\n\nnode3\n=\nNode\n(\n2\n)\n\nnode4\n=\nNode\n(\n9\n)\n\n\nnode1\n.\nnext\n\n=\nnode2\nnode2\n.\nnext\n\n=\nnode3\nnode3\n.\nnext\n\n=\nnode4\n\n\nprint\n(\n\"Original list:\"\n)\n\ntraverseAndPrint\n(\nnode1\n)\n\n\n\n# Insert a new node with value 97 at position 2\n\nnewNode\n=\nNode\n(\n97\n)\n\nnode1\n=\ninsertNodeAtPosition\n(\nnode1\n,\nnewNode\n,\n\n2\n)\n\n\n\nprint\n(\n\"\\nAfter insertion:\"\n)\n\ntraverseAndPrint\n(\nnode1\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" data-line=\"13-27\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">insertNodeAtPosition</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        newNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        <span class=\"token keyword keyword-return\">return</span> newNode\n    \n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> currentNode <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-break\">break</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    newNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> newNode\n    <span class=\"token keyword keyword-return\">return</span> head\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original list:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Insert a new node with value 97 at position 2</span>\nnewNode <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span>\nnode1 <span class=\"token operator\">=</span> insertNodeAtPosition<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAfter insertion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" class=\"line-highlight\" data-end=\"27\" data-range=\"13-27\" data-start=\"13\" style=\"top: 264px; width: 789px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the insertNodeAtPosition function above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.",
      "html": "<p>In the <span>insertNodeAtPosition</span> function above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Other Linked Lists Operations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We have only covered three basic linked list operations above: traversal (or search), node deletion, and node insertion.",
      "html": "<p>We have only covered three basic linked list operations above: traversal (or search), node deletion, and node insertion.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are a lot of other operations that could be done with linked lists, like sorting for example.",
      "html": "<p>There are a lot of other operations that could be done with linked lists, like sorting for example.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Previously in the tutorial we have covered many sorting algorithms, and we could do many of these sorting algorithms on linked lists as well. Let's take selection sort for example. In selection sort we find the lowest value, remove it, and insert it at the beginning. We could do the same with a linked list as well, right? We have just seen how to search through a linked list, how to remove a node, and how to insert a node.",
      "html": "<p>Previously in the tutorial we have covered many sorting algorithms, and we could do many of these sorting algorithms on linked lists as well. Let's take selection sort for example. In selection sort we find the lowest value, remove it, and insert it at the beginning. We could do the same with a linked list as well, right? We have just seen how to search through a linked list, how to remove a node, and how to insert a node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: We cannot sort linked lists with sorting algorithms like Counting Sort, Radix Sort or Quicksort because they use indexes to modify array elements directly based on their position.",
      "html": "<p><strong>Note:</strong> We cannot sort linked lists with sorting algorithms like Counting Sort, Radix Sort or Quicksort because they use indexes to modify array elements directly based on their position.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked Lists vs Arrays",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These are some key linked list properties, compared to arrays:",
      "html": "<p>These are some key linked list properties, compared to arrays:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: When using arrays in programming languages like Java or Python, even though we do not need to write code to handle when an array fills up its memory space, and we do not have to shift elements up or down in memory when an element is removed or inserted, these things still happen in the background and can cause problems in time critical applications.",
      "html": "<p><strong>Note: </strong>When using arrays in programming languages like Java or Python, even though we do not need to write code to handle when an array fills up its memory space, and we do not have to shift elements up or down in memory when an element is removed or inserted, these things still happen in the background and can cause problems in time critical applications.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Time Complexity of Linked Lists Operations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Here we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed previously in this tutorial.",
      "html": "<p>Here we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed previously in this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Remember that time complexity just says something about the approximate number of operations needed by the algorithm based on a large set of data n n , and does not tell us the exact time a specific implementation of an algorithm takes.",
      "html": "<p>Remember that time complexity just says something about the approximate number of operations needed by the algorithm based on a large set of data <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>, and does not tell us the exact time a specific implementation of an algorithm takes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that even though linear search is said to have the same time complexity for arrays as for linked list: O ( n ) O ( n ) , it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.",
      "html": "<p>This means that even though linear search is said to have the same time complexity for arrays as for linked list: <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-7\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-8\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>, it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Linear search",
          "href": "https://www.w3schools.com/dsa_algo_linearsearch.php",
          "title": ""
        }
      ],
      "text": "Linear search for linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is O ( n ) O ( n ) .",
      "html": "<p><a href=\"dsa_algo_linearsearch.php\">Linear search</a> for linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-10\"><span class=\"mjx-mrow\" id=\"MJXc-Node-11\"><span class=\"mjx-mi\" id=\"MJXc-Node-12\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-13\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-14\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary search",
          "href": "https://www.w3schools.com/dsa_algo_binarysearch.php",
          "title": ""
        }
      ],
      "text": "Binary search is not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.",
      "html": "<p><a href=\"dsa_algo_binarysearch.php\">Binary search</a> is not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Sorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.",
      "html": "<p>Sorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Complete the code for the Linked List traversal function.",
      "html": "<p>Complete the code for the Linked List traversal function.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "def traverseAndPrint(head):\ncurrentNode =\n\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.\n\nprint(\"null\")",
      "language": "python",
      "code_html": "<pre style=\"overflow: auto;\">def traverseAndPrint(head):\n    currentNode = <input maxlength=\"4\" name=\"ex1\" style=\"width: 5ch;\"/>\n    while currentNode:\n        print(currentNode.data, end=\" -&gt; \")\n        currentNode = currentNode.<input maxlength=\"4\" name=\"ex2\" style=\"width: 5ch;\"/>\n    print(\"null\")\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_theory_linkedlists4",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_theory_linkedlists4\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}