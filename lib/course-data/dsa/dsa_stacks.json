{
  "title": "DSA Stacks",
  "url": "https://www.w3schools.com/dsa/dsa_data_stacks.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Stacks",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Stacks",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A stack is a data structure that can hold many elements.",
      "html": "<p>A stack is a data structure that can hold many elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Think of a stack like a pile of pancakes.",
      "html": "<p>Think of a stack like a pile of pancakes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In a pile of pancakes, the pancakes are both added and removed from the top. So when removing a pancake, it will always be the last pancake you added. This way of organizing elements is called LIFO: Last In First Out.",
      "html": "<p>In a pile of pancakes, the pancakes are both added and removed from the top. So when removing a pancake, it will always be the last pancake you added. This way of organizing elements is called LIFO: Last In First Out.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Basic operations we can do on a stack are:",
      "html": "<p>Basic operations we can do on a stack are:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Experiment with these basic operations in the stack animation above.",
      "html": "<p>Experiment with these basic operations in the stack animation above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Stacks can be implemented by using arrays or linked lists.",
      "html": "<p>Stacks can be implemented by using arrays or linked lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Stacks can be used to implement undo mechanisms, to revert to previous states, to create algorithms for depth-first search in graphs, or for backtracking.",
      "html": "<p>Stacks can be used to implement undo mechanisms, to revert to previous states, to create algorithms for depth-first search in graphs, or for backtracking.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Stacks are often mentioned together with Queues, which is a similar data structure described on the next page.",
      "html": "<p>Stacks are often mentioned together with Queues, which is a similar data structure described on the next page.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Stack Implementation using Arrays",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/dsa_theory_linkedlists_memory.php",
          "title": ""
        }
      ],
      "text": "To better understand the benefits with using arrays or linked lists to implement stacks, you should check out this page that explains how arrays and linked lists are stored in memory.",
      "html": "<p>To better understand the benefits with using arrays or linked lists to implement stacks, you should check out <a href=\"dsa_theory_linkedlists_memory.php\">this page</a> that explains how arrays and linked lists are stored in memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how it looks like when we use an array as a stack:",
      "html": "<p>This is how it looks like when we use an array as a stack:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Reasons to implement stacks using arrays:",
      "html": "<p>Reasons to implement stacks using arrays:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A reason for not using arrays to implement stacks:",
      "html": "<p>A reason for <strong>not</strong> using arrays to implement stacks:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/python/python_lists.asp",
          "title": ""
        }
      ],
      "text": "Note: When using arrays in Python for this tutorial, we are really using the Python 'list' data type, but for the scope of this tutorial the 'list' data type can be used in the same way as an array. Learn more about Python lists here .",
      "html": "<p><strong>Note:</strong> When using arrays in Python for this tutorial, we are really using the Python 'list' data type, but for the scope of this tutorial the 'list' data type can be used in the same way as an array. Learn more about Python lists <a href=\"https://www.w3schools.com/python/python_lists.asp\">here</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since Python lists has good support for functionality needed to implement stacks, we start with creating a stack and do stack operations with just a few lines like this:",
      "html": "<p>Since Python lists has good support for functionality needed to implement stacks, we start with creating a stack and do stack operations with just a few lines like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "stack\n=\n\n[\n]\n\n\n\n# Push\n\nstack\n.\nappend\n(\n'A'\n)\n\nstack\n.\nappend\n(\n'B'\n)\n\nstack\n.\nappend\n(\n'C'\n)\n\n\nprint\n(\n\"Stack: \"\n,\nstack\n)\n\n\n\n# Pop\n\nelement\n=\nstack\n.\npop\n(\n)\n\n\nprint\n(\n\"Pop: \"\n,\nelement\n)\n\n\n\n# Peek\n\ntopElement\n=\nstack\n[\n-\n1\n]\n\n\nprint\n(\n\"Peek: \"\n,\ntopElement\n)\n\n\n\n# isEmpty\n\nisEmpty\n=\n\nnot\n\nbool\n(\nstack\n)\n\n\nprint\n(\n\"isEmpty: \"\n,\nisEmpty\n)\n\n\n\n# Size\n\n\nprint\n(\n\"Size: \"\n,\nlen\n(\nstack\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\">stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Push</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack: \"</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Pop</span>\nelement <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Peek</span>\ntopElement <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> topElement<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># isEmpty</span>\nisEmpty <span class=\"token operator\">=</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> isEmpty<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Size</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But to explicitly create a data structure for stacks, with basic operations, we should create a stack class instead. This way of creating stacks in Python is also more similar to how stacks can be created in other programming languages like C and Java.",
      "html": "<p>But to explicitly create a data structure for stacks, with basic operations, we should create a stack class instead. This way of creating stacks in Python is also more similar to how stacks can be created in other programming languages like C and Java.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nStack\n:\n\n\ndef\n\n__init__\n(\nself\n)\n:\n\nself\n.\nstack\n=\n\n[\n]\n\n\n\ndef\n\npush\n(\nself\n,\nelement\n)\n:\n\nself\n.\nstack\n.\nappend\n(\nelement\n)\n\n\n\ndef\n\npop\n(\nself\n)\n:\n\n\nif\nself\n.\nisEmpty\n(\n)\n:\n\n\nreturn\n\n\"Stack is empty\"\n\n\nreturn\nself\n.\nstack\n.\npop\n(\n)\n\n\n\ndef\n\npeek\n(\nself\n)\n:\n\n\nif\nself\n.\nisEmpty\n(\n)\n:\n\n\nreturn\n\n\"Stack is empty\"\n\n\nreturn\nself\n.\nstack\n[\n-\n1\n]\n\n\n\ndef\n\nisEmpty\n(\nself\n)\n:\n\n\nreturn\n\nlen\n(\nself\n.\nstack\n)\n\n==\n\n0\n\n\n\ndef\n\nsize\n(\nself\n)\n:\n\n\nreturn\n\nlen\n(\nself\n.\nstack\n)\n\n\n\n# Create a stack\n\nmyStack\n=\nStack\n(\n)\n\n\nmyStack\n.\npush\n(\n'A'\n)\n\nmyStack\n.\npush\n(\n'B'\n)\n\nmyStack\n.\npush\n(\n'C'\n)\n\n\nprint\n(\n\"Stack: \"\n,\nmyStack\n.\nstack\n)\n\n\n\nprint\n(\n\"Pop: \"\n,\nmyStack\n.\npop\n(\n)\n)\n\n\n\nprint\n(\n\"Peek: \"\n,\nmyStack\n.\npeek\n(\n)\n)\n\n\n\nprint\n(\n\"isEmpty: \"\n,\nmyStack\n.\nisEmpty\n(\n)\n)\n\n\n\nprint\n(\n\"Size: \"\n,\nmyStack\n.\nsize\n(\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create a stack</span>\nmyStack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Stack Implementation using Linked Lists",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A reason for using linked lists to implement stacks:",
      "html": "<p>A reason for using linked lists to implement stacks:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Reasons for not using linked lists to implement stacks:",
      "html": "<p>Reasons for <strong>not</strong> using linked lists to implement stacks:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how a stack can be implemented using a linked list.",
      "html": "<p>This is how a stack can be implemented using a linked list.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\nvalue\n)\n:\n\nself\n.\nvalue\n=\nvalue\nself\n.\nnext\n\n=\n\nNone\n\n\n\nclass\n\nStack\n:\n\n\ndef\n\n__init__\n(\nself\n)\n:\n\nself\n.\nhead\n=\n\nNone\n\nself\n.\nsize\n=\n\n0\n\n\n\ndef\n\npush\n(\nself\n,\nvalue\n)\n:\n\nnew_node\n=\nNode\n(\nvalue\n)\n\n\nif\nself\n.\nhead\n:\n\nnew_node\n.\nnext\n\n=\nself\n.\nhead\nself\n.\nhead\n=\nnew_node\nself\n.\nsize\n+=\n\n1\n\n\n\ndef\n\npop\n(\nself\n)\n:\n\n\nif\nself\n.\nisEmpty\n(\n)\n:\n\n\nreturn\n\n\"Stack is empty\"\n\npopped_node\n=\nself\n.\nhead\nself\n.\nhead\n=\nself\n.\nhead\n.\nnext\n\nself\n.\nsize\n-=\n\n1\n\n\nreturn\npopped_node\n.\nvalue\n\n\ndef\n\npeek\n(\nself\n)\n:\n\n\nif\nself\n.\nisEmpty\n(\n)\n:\n\n\nreturn\n\n\"Stack is empty\"\n\n\nreturn\nself\n.\nhead\n.\nvalue\n\n\ndef\n\nisEmpty\n(\nself\n)\n:\n\n\nreturn\nself\n.\nsize\n==\n\n0\n\n\n\ndef\n\nstackSize\n(\nself\n)\n:\n\n\nreturn\nself\n.\nsize\n\nmyStack\n=\nStack\n(\n)\n\nmyStack\n.\npush\n(\n'A'\n)\n\nmyStack\n.\npush\n(\n'B'\n)\n\nmyStack\n.\npush\n(\n'C'\n)\n\n\n\nprint\n(\n\"Pop: \"\n,\nmyStack\n.\npop\n(\n)\n)\n\n\nprint\n(\n\"Peek: \"\n,\nmyStack\n.\npeek\n(\n)\n)\n\n\nprint\n(\n\"isEmpty: \"\n,\nmyStack\n.\nisEmpty\n(\n)\n)\n\n\nprint\n(\n\"Size: \"\n,\nmyStack\n.\nstackSize\n(\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">:</span>\n            new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        popped_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-return\">return</span> popped_node<span class=\"token punctuation\">.</span>value\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">stackSize</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>size\n\nmyStack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>stackSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The image below represents a \"Stack\" data structure.",
      "html": "<p>The image below represents a \"Stack\" data structure.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Running the peek() method on the Stack above, what is returned?",
      "html": "<p>Running the <span>peek()</span> method on the Stack above, what is returned?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\"><input maxlength=\"1\" name=\"ex1\" style=\"width: 2ch;\"/>\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_data_stacks1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_data_stacks1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}