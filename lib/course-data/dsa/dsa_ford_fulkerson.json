{
  "title": "DSA Ford-Fulkerson Algorithm",
  "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Ford-Fulkerson Algorithm",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson algorithm solves the maximum flow problem.",
      "html": "<p>The Ford-Fulkerson algorithm solves the maximum flow problem.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.",
      "html": "<p>Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Ford-Fulkerson Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "the maximum flow problem",
          "href": "https://www.w3schools.com/dsa_theory_graphs_maxflow.php",
          "title": ""
        }
      ],
      "text": "The Ford-Fulkerson algorithm solves the maximum flow problem for a directed graph.",
      "html": "<p>The Ford-Fulkerson algorithm solves <a href=\"dsa_theory_graphs_maxflow.php\">the maximum flow problem</a> for a directed graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow comes from a source vertex ( s s ) and ends up in a sink vertex ( t t ), and each edge in the graph allows a flow, limited by a capacity.",
      "html": "<p>The flow comes from a source vertex (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>) and ends up in a sink vertex (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>), and each edge in the graph allows a flow, limited by a capacity.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Max flow: 0",
      "html": "<p>Max flow: 0</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson algorithm works by looking for a path with available capacity from the source to the sink (called an augmented path ), and then sends as much flow as possible through that path.",
      "html": "<p>The Ford-Fulkerson algorithm works by looking for a path with available capacity from the source to the sink (called an <i>augmented path</i>), and then sends as much flow as possible through that path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson algorithm continues to find new paths to send more flow through until the maximum flow is reached.",
      "html": "<p>The Ford-Fulkerson algorithm continues to find new paths to send more flow through until the maximum flow is reached.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the simulation above, the Ford-Fulkerson algorithm solves the maximum flow problem: It finds out how much flow can be sent from the source vertex s s , to the sink vertex t t , and that maximum flow is 8.",
      "html": "<p>In the simulation above, the Ford-Fulkerson algorithm solves the maximum flow problem: It finds out how much flow can be sent from the source vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-7\"><span class=\"mjx-mrow\" id=\"MJXc-Node-8\"><span class=\"mjx-mi\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>, to the sink vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-4-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-10\"><span class=\"mjx-mrow\" id=\"MJXc-Node-11\"><span class=\"mjx-mi\" id=\"MJXc-Node-12\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>, and that maximum flow is 8.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numbers in the simulation above are written in fractions, where the first number is the flow, and the second number is the capacity (maximum possible flow in that edge). So for example, 0/7 on edge s \u2192 v 2 s \u2192 v 2 , means there is 0 flow, with a capacity of 7 on that edge.",
      "html": "<p>The numbers in the simulation above are written in fractions, where the first number is the flow, and the second number is the capacity (maximum possible flow in that edge). So for example, <code>0/7</code> on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-5-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-13\"><span class=\"mjx-mrow\" id=\"MJXc-Node-14\"><span class=\"mjx-mi\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-17\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-18\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-19\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub></math></span></span>, means there is <code>0</code> flow, with a capacity of <code>7</code> on that edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The Ford-Fulkerson algorithm is often described as a method instead of as an algorithm , because it does not specify how to find a path where flow can be increased. This means it can be implemented in different ways, resulting in different time complexities. But for this tutorial we will call it an algorithm, and use Depth-First-Search to find the paths.",
      "html": "<p><strong>Note: </strong>The Ford-Fulkerson algorithm is often described as a <i>method</i> instead of as an <i>algorithm</i>, because it does not specify how to find a path where flow can be increased. This means it can be implemented in different ways, resulting in different time complexities. But for this tutorial we will call it an algorithm, and use Depth-First-Search to find the paths.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can see the basic step-by-step description of how the Ford-Fulkerson algorithm works below, but we need to go into more detail later to actually understand it.",
      "html": "<p>You can see the basic step-by-step description of how the Ford-Fulkerson algorithm works below, but we need to go into more detail later to actually understand it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Residual Network in Ford-Fulkerson",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson algorithm actually works by creating and using something called a residual network , which is a representation of the original graph.",
      "html": "<p>The Ford-Fulkerson algorithm actually works by creating and using something called a <i>residual network</i>, which is a representation of the original graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the residual network, every edge has a residual capacity , which is the original capacity of the edge, minus the the flow in that edge. The residual capacity can be seen as the leftover capacity in an edge with some flow.",
      "html": "<p>In the residual network, every edge has a <i>residual capacity</i>, which is the original capacity of the edge, minus the the flow in that edge. The residual capacity can be seen as the leftover capacity in an edge with some flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example, if there is a flow of 2 in the v 3 \u2192 v 4 v 3 \u2192 v 4 edge, and the capacity is 3, the residual flow is 1 in that edge, because there is room for sending 1 more unit of flow through that edge.",
      "html": "<p>For example, if there is a flow of 2 in the <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-20\"><span class=\"mjx-mrow\" id=\"MJXc-Node-21\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-22\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-23\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-24\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-25\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-26\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-27\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-28\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> edge, and the capacity is 3, the residual flow is 1 in that edge, because there is room for sending 1 more unit of flow through that edge.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reversed Edges in Ford-Fulkerson",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson algorithm also uses something called reversed edges to send flow back. This is useful to increase the total flow.",
      "html": "<p>The Ford-Fulkerson algorithm also uses something called <i>reversed edges</i> to send flow back. This is useful to increase the total flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example, the last augmented path s \u2192 v 2 \u2192 v 4 \u2192 v 3 \u2192 t s \u2192 v 2 \u2192 v 4 \u2192 v 3 \u2192 t in the animation above and in the manual run through below shows how the total flow is increased by one more unit, by actually sending flow back on edge v 4 \u2192 v 3 v 4 \u2192 v 3 , sending the flow in the reverse direction.",
      "html": "<p>For example, the last augmented path <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-29\"><span class=\"mjx-mrow\" id=\"MJXc-Node-30\"><span class=\"mjx-mi\" id=\"MJXc-Node-31\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-32\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-33\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-34\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-35\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-36\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-37\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-38\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-39\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-40\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-41\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-42\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-43\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-44\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-45\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> in the animation above and in the manual run through below shows how the total flow is increased by one more unit, by actually sending flow back on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-46\"><span class=\"mjx-mrow\" id=\"MJXc-Node-47\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-48\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-49\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-50\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-51\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-52\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-53\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-54\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub></math></span></span>, sending the flow in the reverse direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Sending flow back in the reverse direction on edge v 3 \u2192 v 4 v 3 \u2192 v 4 in our example meas that this 1 unit of flow going out of vertex v 3 v 3 , now leaves v 3 v 3 on edge v 3 \u2192 t v 3 \u2192 t instead of v 3 \u2192 v 4 v 3 \u2192 v 4 .",
      "html": "<p>Sending flow back in the reverse direction on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-55\"><span class=\"mjx-mrow\" id=\"MJXc-Node-56\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-57\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-58\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-59\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-60\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-61\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-62\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-63\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> in our example meas that this 1 unit of flow going out of vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-10-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-64\"><span class=\"mjx-mrow\" id=\"MJXc-Node-65\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-66\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-67\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-68\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub></math></span></span>, now leaves <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-11-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-69\"><span class=\"mjx-mrow\" id=\"MJXc-Node-70\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-71\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-72\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-73\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub></math></span></span> on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-12-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-74\"><span class=\"mjx-mrow\" id=\"MJXc-Node-75\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-76\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-77\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-78\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-79\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-80\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> instead of <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-13-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-81\"><span class=\"mjx-mrow\" id=\"MJXc-Node-82\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-83\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-84\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-85\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-86\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-87\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-88\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-89\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To send flow back, in the opposite direction of the edge, a reverse edge is created for each original edge in the network. The Ford-Fulkerson algorithm can then use these reverse edges to send flow in the reverse direction.",
      "html": "<p>To send flow back, in the opposite direction of the edge, a reverse edge is created for each original edge in the network. The Ford-Fulkerson algorithm can then use these reverse edges to send flow in the reverse direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A reversed edge has no flow or capacity, just residual capacity. The residual capacity for a reversed edge is always the same as the flow in the corresponding original edge. In our example, the edge v 3 \u2192 v 4 v 3 \u2192 v 4 has a flow of 2, which means there is a residual capacity of 2 on the corresponding reversed edge v 4 \u2192 v 3 v 4 \u2192 v 3 .",
      "html": "<p>A reversed edge has no flow or capacity, just residual capacity. The residual capacity for a reversed edge is always the same as the flow in the corresponding original edge. In our example, the edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-14-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-90\"><span class=\"mjx-mrow\" id=\"MJXc-Node-91\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-92\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-93\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-94\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-95\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-96\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-97\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-98\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> has a flow of 2, which means there is a residual capacity of 2 on the corresponding reversed edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-15-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-99\"><span class=\"mjx-mrow\" id=\"MJXc-Node-100\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-101\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-102\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-103\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-104\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-105\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-106\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-107\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This just means that when there is a flow of 2 on the original edge v 3 \u2192 v 4 v 3 \u2192 v 4 , there is a possibility of sending that same amount of flow back on that edge, but in the reversed direction. Using a reversed edge to push back flow can also be seen as undoing a part of the flow that is already created.",
      "html": "<p>This just means that when there is a flow of 2 on the original edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-16-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-108\"><span class=\"mjx-mrow\" id=\"MJXc-Node-109\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-110\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-111\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-112\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-113\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-114\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-115\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-116\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span>, there is a possibility of sending that same amount of flow back on that edge, but in the reversed direction. Using a reversed edge to push back flow can also be seen as undoing a part of the flow that is already created.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The idea of a residual network with residual capacity on edges, and the idea of reversed edges, are central to how the Ford-Fulkerson algorithm works, and we will go into more detail about this when we implement the algorithm further down on this page.",
      "html": "<p>The idea of a residual network with residual capacity on edges, and the idea of reversed edges, are central to how the Ford-Fulkerson algorithm works, and we will go into more detail about this when we implement the algorithm further down on this page.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Manual Run Through",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There is no flow in the graph to start with.",
      "html": "<p>There is no flow in the graph to start with.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To find the maximum flow, the Ford-Fulkerson algorithm must increase flow, but first it needs to find out where the flow can be increased: it must find an augmented path.",
      "html": "<p>To find the maximum flow, the Ford-Fulkerson algorithm must increase flow, but first it needs to find out where the flow can be increased: it must find an augmented path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Depth First Search (DFS)",
          "href": "https://www.w3schools.com/dsa_algo_graphs_traversal.php#dfsTraversal",
          "title": ""
        }
      ],
      "text": "The Ford-Fulkerson algorithm actually does not specify how such an augmented path is found (that is why it is often described as a method instead of an algorithm), but we will use Depth First Search (DFS) to find the augmented paths for the Ford-Fulkerson algorithm in this tutorial.",
      "html": "<p>The Ford-Fulkerson algorithm actually does not specify how such an augmented path is found (that is why it is often described as a method instead of an algorithm), but we will use <a href=\"dsa_algo_graphs_traversal.php#dfsTraversal\">Depth First Search (DFS)</a> to find the augmented paths for the Ford-Fulkerson algorithm in this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The first augmented path Ford-Fulkerson finds using DFS is s \u2192 v 1 \u2192 v 3 \u2192 v 4 \u2192 t s \u2192 v 1 \u2192 v 3 \u2192 v 4 \u2192 t .",
      "html": "<p>The first augmented path Ford-Fulkerson finds using DFS is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-17-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-117\"><span class=\"mjx-mrow\" id=\"MJXc-Node-118\"><span class=\"mjx-mi\" id=\"MJXc-Node-119\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-120\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-121\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-122\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-123\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-124\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-125\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-126\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-127\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-128\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-129\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-130\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-131\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-132\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-133\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And using the bottleneck calculation, Ford-Fulkerson finds that 3 is the highest flow that can be sent through the augmented path, so the flow is increased by 3 for all the edges in this path.",
      "html": "<p>And using the bottleneck calculation, Ford-Fulkerson finds that 3 is the highest flow that can be sent through the augmented path, so the flow is increased by 3 for all the edges in this path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next iteration of the Ford-Fulkerson algorithm is to do these steps again:",
      "html": "<p>The next iteration of the Ford-Fulkerson algorithm is to do these steps again:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next augmented path is found to be s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 v 3 \u2192 t s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 v 3 \u2192 t , which includes the reversed edge v 4 \u2192 v 3 v 4 \u2192 v 3 , where flow is sent back.",
      "html": "<p>The next augmented path is found to be <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-18-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-134\"><span class=\"mjx-mrow\" id=\"MJXc-Node-135\"><span class=\"mjx-mi\" id=\"MJXc-Node-136\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-137\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-138\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-139\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-140\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-141\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-142\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-143\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-144\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-145\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-146\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-147\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-148\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-149\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-150\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-151\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-152\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-153\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-154\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>, which includes the reversed edge <span style=\"color: #c11515;\"><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-19-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-155\"><span class=\"mjx-mrow\" id=\"MJXc-Node-156\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-157\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-158\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-159\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-160\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-161\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-162\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-163\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub></math></span></span></span>, where flow is sent back.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Ford-Fulkerson concept of reversed edges comes in handy because it allows the path finding part of the algorithm to find an augmented path where reversed edges can also be included.",
      "html": "<p>The Ford-Fulkerson concept of reversed edges comes in handy because it allows the path finding part of the algorithm to find an augmented path where reversed edges can also be included.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this specific case that means that a flow of 2 can be sent back on edge v 3 \u2192 v 4 v 3 \u2192 v 4 , going into v 3 \u2192 t v 3 \u2192 t instead.",
      "html": "<p>In this specific case that means that a flow of 2 can be sent back on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-20-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-164\"><span class=\"mjx-mrow\" id=\"MJXc-Node-165\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-166\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-167\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-168\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-169\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-170\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-171\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-172\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span>, going into <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-21-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-173\"><span class=\"mjx-mrow\" id=\"MJXc-Node-174\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-175\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-176\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-177\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-178\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-179\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> instead.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can only be increased by 2 in this path because that is the capacity in the v 3 \u2192 t v 3 \u2192 t edge.",
      "html": "<p>The flow can only be increased by 2 in this path because that is the capacity in the <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-22-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-180\"><span class=\"mjx-mrow\" id=\"MJXc-Node-181\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-182\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-183\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-184\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-185\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-186\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next augmented path is found to be s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 t s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 t .",
      "html": "<p>The next augmented path is found to be <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-23-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-187\"><span class=\"mjx-mrow\" id=\"MJXc-Node-188\"><span class=\"mjx-mi\" id=\"MJXc-Node-189\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-190\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-191\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-192\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-193\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-194\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-195\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-196\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-197\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-198\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-199\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-200\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-201\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-202\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-203\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can be increased by 2 in this path. The bottleneck (limiting edge) is v 1 \u2192 v 4 v 1 \u2192 v 4 because there is only room for sending two more units of flow in that edge.",
      "html": "<p>The flow can be increased by 2 in this path. The bottleneck (limiting edge) is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-24-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-204\"><span class=\"mjx-mrow\" id=\"MJXc-Node-205\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-206\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-207\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-208\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-209\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-210\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-211\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-212\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> because there is only room for sending two more units of flow in that edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next and last augmented path is s \u2192 v 2 \u2192 v 4 \u2192 t s \u2192 v 2 \u2192 v 4 \u2192 t .",
      "html": "<p>The next and last augmented path is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-25-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-213\"><span class=\"mjx-mrow\" id=\"MJXc-Node-214\"><span class=\"mjx-mi\" id=\"MJXc-Node-215\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-216\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-217\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-218\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-219\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-220\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-221\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-222\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-223\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-224\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-225\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can only be increased by 1 in this path because of edge v 4 \u2192 t v 4 \u2192 t being the bottleneck in this path with only space for one more unit of flow ( c a p a c i t y \u2212 f l o w = 1 c a p a c i t y \u2212 f l o w = 1 ).",
      "html": "<p>The flow can only be increased by 1 in this path because of edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-26-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-226\"><span class=\"mjx-mrow\" id=\"MJXc-Node-227\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-228\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-229\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-230\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-231\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-232\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> being the bottleneck in this path with only space for one more unit of flow (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-27-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-233\"><span class=\"mjx-mrow\" id=\"MJXc-Node-234\"><span class=\"mjx-mi\" id=\"MJXc-Node-235\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">c</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-236\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">a</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-237\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.451em;\">p</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-238\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">a</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-239\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">c</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-240\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">i</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-241\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-242\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.507em; padding-right: 0.006em;\">y</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-243\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">\u2212</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-244\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-245\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">l</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-246\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">o</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-247\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">w</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-248\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-249\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi><mi>a</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>\u2212</mo><mi>f</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo>=</mo><mn>1</mn></math></span></span>).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "At this point, a new augmenting path cannot be found (it is not possible to find a path where more flow can be sent through from s s to t t ), which means the max flow has been found, and the Ford-Fulkerson algorithm is finished.",
      "html": "<p>At this point, a new augmenting path cannot be found (it is not possible to find a path where more flow can be sent through from <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-28-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-250\"><span class=\"mjx-mrow\" id=\"MJXc-Node-251\"><span class=\"mjx-mi\" id=\"MJXc-Node-252\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span> to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-29-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-253\"><span class=\"mjx-mrow\" id=\"MJXc-Node-254\"><span class=\"mjx-mi\" id=\"MJXc-Node-255\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>), which means the max flow has been found, and the Ford-Fulkerson algorithm is finished.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The maximum flow is 8. As you can see in the image above, the flow (8) is the same going out of the source vertex s s , as the flow going into the sink vertex t t .",
      "html": "<p>The maximum flow is 8. As you can see in the image above, the flow (8) is the same going out of the source vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-30-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-256\"><span class=\"mjx-mrow\" id=\"MJXc-Node-257\"><span class=\"mjx-mi\" id=\"MJXc-Node-258\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>, as the flow going into the sink vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-31-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-259\"><span class=\"mjx-mrow\" id=\"MJXc-Node-260\"><span class=\"mjx-mi\" id=\"MJXc-Node-261\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also, if you take any other vertex than s s or t t , you can see that the amount of flow going into a vertex, is the same as the flow going out of it. This is what we call conservation of flow , and this must hold for all such flow networks (directed graphs where each edge has a flow and a capacity).",
      "html": "<p>Also, if you take any other vertex than <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-32-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-262\"><span class=\"mjx-mrow\" id=\"MJXc-Node-263\"><span class=\"mjx-mi\" id=\"MJXc-Node-264\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span> or <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-33-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-265\"><span class=\"mjx-mrow\" id=\"MJXc-Node-266\"><span class=\"mjx-mi\" id=\"MJXc-Node-267\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>, you can see that the amount of flow going into a vertex, is the same as the flow going out of it. This is what we call <i>conservation of flow</i>, and this must hold for all such flow networks (directed graphs where each edge has a flow and a capacity).</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Implementation of The Ford-Fulkerson Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement the Ford-Fulkerson algorithm, we create a Graph class. The Graph represents the graph with its vertices and edges:",
      "html": "<p>To implement the Ford-Fulkerson algorithm, we create a <code>Graph</code> class. The <code>Graph</code> represents the graph with its vertices and edges:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n,\nc\n)\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\nc\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"3-5, 7-8, 10-12\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3-5\" style=\"top: 45px; height: 66px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7-8\" style=\"top: 133px; height: 44px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"10-12\" style=\"top: 199px; height: 66px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 3: We create the adj_matrix to hold all the edges and edge capacities. Initial values are set to 0 .",
      "html": "<p><strong>Line 3: </strong>We create the <code>adj_matrix</code> to hold all the edges and edge capacities. Initial values are set to <code>0</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 4: size is the number of vertices in the graph.",
      "html": "<p><strong>Line 4: </strong><code>size</code> is the number of vertices in the graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 5: The vertex_data holds the names of all the vertices.",
      "html": "<p><strong>Line 5: </strong>The <code>vertex_data</code> holds the names of all the vertices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 7-8: The add_edge method is used to add an edge from vertex u to vertex v , with capacity c .",
      "html": "<p><strong>Line 7-8: </strong>The <code>add_edge</code> method is used to add an edge from vertex <code>u</code> to vertex <code>v</code>, with capacity <code>c</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 10-12: The add_vertex_data method is used to add a vertex name to the graph. The index of the vertex is given with the vertex argument, and data is the name of the vertex.",
      "html": "<p><strong>Line 10-12: </strong>The <code>add_vertex_data</code> method is used to add a vertex name to the graph. The index of the vertex is given with the <code>vertex</code> argument, and <code>data</code> is the name of the vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Graph class also contains the dfs method to find augmented paths, using Depth-First-Search:",
      "html": "<p>The <code>Graph</code> class also contains the <code>dfs</code> method to find augmented paths, using Depth-First-Search:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\ndfs\n(\nself\n,\ns\n,\nt\n,\nvisited\n=\nNone\n,\npath\n=\nNone\n)\n:\n\n\nif\nvisited\nis\n\nNone\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\n\nif\npath\nis\n\nNone\n:\n\npath\n=\n\n[\n]\n\n\nvisited\n[\ns\n]\n\n=\n\nTrue\n\npath\n.\nappend\n(\ns\n)\n\n\n\nif\ns\n==\nt\n:\n\n\nreturn\npath\n\n\nfor\nind\n,\nval\nin\n\nenumerate\n(\nself\n.\nadj_matrix\n[\ns\n]\n)\n:\n\n\nif\n\nnot\nvisited\n[\nind\n]\n\nand\nval\n>\n\n0\n:\n\nresult_path\n=\nself\n.\ndfs\n(\nind\n,\nt\n,\nvisited\n,\npath\n.\ncopy\n(\n)\n)\n\n\nif\nresult_path\n:\n\n\nreturn\nresult_path\n\n\nreturn\n\nNone",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"15-18, 20-21, 23-24, 26-30, 32\" data-line-offset=\"14\" data-start=\"14\" style=\"counter-reset: linenumber 13;\" tabindex=\"0\"><code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> visited <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-if\">if</span> path <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-if\">if</span> s <span class=\"token operator\">==</span> t<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> path\n\n        <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-if\">if</span> result_path<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> result_path\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"15-18\" style=\"top: 23px; height: 88px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"20-21\" style=\"top: 133px; height: 44px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"23-24\" style=\"top: 199px; height: 44px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"26-30\" style=\"top: 265px; height: 110px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"32\" style=\"top: 397px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 15-18: The visited array helps to avoid revisiting the same vertices during the search for an augmented path. Vertices that belong to the augmented path are stored in the path array.",
      "html": "<p><strong>Line 15-18: </strong>The <code>visited</code> array helps to avoid revisiting the same vertices during the search for an augmented path. Vertices that belong to the augmented path are stored in the <code>path</code> array.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 20-21: The current vertex is marked as visited, and then added to the path.",
      "html": "<p><strong>Line 20-21: </strong>The current vertex is marked as visited, and then added to the path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 23-24: If the current vertex is the sink node, we have found an augmented path from the source vertex to the sink vertex, so that path can be returned.",
      "html": "<p><strong>Line 23-24: </strong>If the current vertex is the sink node, we have found an augmented path from the source vertex to the sink vertex, so that path can be returned.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 26-30: Looping through all edges in the adjacency matrix starting from the current vertex s , ind represents an adjacent node, and val is the residual capacity on the edge to that vertex. If the adjacent vertex is not visited, and has residual capacity on the edge to it, go to that node and continue searching for a path from that vertex.",
      "html": "<p><strong>Line 26-30: </strong>Looping through all edges in the adjacency matrix starting from the current vertex <code>s</code>, <code>ind</code> represents an adjacent node, and <code>val</code> is the residual capacity on the edge to that vertex. If the adjacent vertex is not visited, and has residual capacity on the edge to it, go to that node and continue searching for a path from that vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 32: None is returned if no path is found.",
      "html": "<p><strong>Line 32: </strong><code>None</code> is returned if no path is found.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The fordFulkerson method is the last method we add to the Graph class:",
      "html": "<p>The <code>fordFulkerson</code> method is the last method we add to the <code>Graph</code> class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nfordFulkerson\n(\nself\n,\nsource\n,\nsink\n)\n:\n\nmax_flow\n=\n\n0\n\n\npath\n=\nself\n.\ndfs\n(\nsource\n,\nsink\n)\n\n\nwhile\npath\n:\n\npath_flow\n=\n\nfloat\n(\n\"Inf\"\n)\n\n\nfor\ni\nin\n\nrange\n(\nlen\n(\npath\n)\n\n-\n\n1\n)\n:\n\nu\n,\nv\n=\npath\n[\ni\n]\n,\npath\n[\ni\n+\n\n1\n]\n\npath_flow\n=\n\nmin\n(\npath_flow\n,\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nlen\n(\npath\n)\n\n-\n\n1\n)\n:\n\nu\n,\nv\n=\npath\n[\ni\n]\n,\npath\n[\ni\n+\n\n1\n]\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n-=\npath_flow\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n+=\npath_flow\n\nmax_flow\n+=\npath_flow\n\npath_names\n=\n\n[\nself\n.\nvertex_data\n[\nnode\n]\n\nfor\nnode\nin\npath\n]\n\n\nprint\n(\n\"Path:\"\n,\n\n\" -> \"\n.\njoin\n(\npath_names\n)\n,\n\n\", Flow:\"\n,\npath_flow\n)\n\n\npath\n=\nself\n.\ndfs\n(\nsource\n,\nsink\n)\n\n\n\nreturn\nmax_flow",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"37,39-42,44-47,49,51-52\" data-line-offset=\"34\" data-start=\"34\" style=\"counter-reset: linenumber 33;\" tabindex=\"0\"><code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fordFulkerson</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> path<span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n            path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"37\" style=\"top: 67px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"39-42\" style=\"top: 111px; height: 88px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"44-47\" style=\"top: 221px; height: 88px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"49\" style=\"top: 331px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"51-52\" style=\"top: 375px; height: 44px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Initially, the max_flow is 0 , and the while loop keeps increasing the max_flow as long as there is an augmented path to increase flow in.",
      "html": "<p>Initially, the <code>max_flow</code> is <code>0</code>, and the <code>while</code> loop keeps increasing the <code>max_flow</code> as long as there is an augmented path to increase flow in.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 37: The augmented path is found.",
      "html": "<p><strong>Line 37: </strong>The augmented path is found.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 39-42: Every edge in the augmented path is checked to find out how much flow can be sent through that path.",
      "html": "<p><strong>Line 39-42: </strong>Every edge in the augmented path is checked to find out how much flow can be sent through that path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 44-46: The residual capacity (capacity minus flow) for every forward edge is reduced as a result of increased flow.",
      "html": "<p><strong>Line 44-46: </strong>The residual capacity (capacity minus flow) for every forward edge is reduced as a result of increased flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 47: This represents the reversed edge, used by the Ford-Fulkerson algorithm so that flow can be sent back (undone) on the the original forward edges. It is important to understand that these reversed edges are not in the original graph, they are fictitious edges introduced by Ford-Fulkerson to make the algorithm work.",
      "html": "<p><strong>Line 47: </strong>This represents the reversed edge, used by the Ford-Fulkerson algorithm so that flow can be sent back (undone) on the the original forward edges. It is important to understand that these reversed edges are not in the original graph, they are fictitious edges introduced by Ford-Fulkerson to make the algorithm work.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 49: Every time flow is increased over an augmented path, max_flow is increased by the same value.",
      "html": "<p><strong>Line 49: </strong>Every time flow is increased over an augmented path, <code>max_flow</code> is increased by the same value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 51-52: This is just for printing the augmented path before the algorithm starts the next iteration.",
      "html": "<p><strong>Line 51-52: </strong>This is just for printing the augmented path before the algorithm starts the next iteration.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After defining the Graph class, the vertices and edges must be defined to initialize the specific graph, and the complete code for the Ford-Fulkerson algorithm example looks like this:",
      "html": "<p>After defining the <code>Graph</code> class, the vertices and edges must be defined to initialize the specific graph, and the complete code for the Ford-Fulkerson algorithm example looks like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n,\nc\n)\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\nc\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\ndfs\n(\nself\n,\ns\n,\nt\n,\nvisited\n=\nNone\n,\npath\n=\nNone\n)\n:\n\n\nif\nvisited\nis\n\nNone\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\n\nif\npath\nis\n\nNone\n:\n\npath\n=\n\n[\n]\n\n\nvisited\n[\ns\n]\n\n=\n\nTrue\n\npath\n.\nappend\n(\ns\n)\n\n\n\nif\ns\n==\nt\n:\n\n\nreturn\npath\n\n\nfor\nind\n,\nval\nin\n\nenumerate\n(\nself\n.\nadj_matrix\n[\ns\n]\n)\n:\n\n\nif\n\nnot\nvisited\n[\nind\n]\n\nand\nval\n>\n\n0\n:\n\nresult_path\n=\nself\n.\ndfs\n(\nind\n,\nt\n,\nvisited\n,\npath\n.\ncopy\n(\n)\n)\n\n\nif\nresult_path\n:\n\n\nreturn\nresult_path\n\n\nreturn\n\nNone\n\n\n\ndef\n\nfordFulkerson\n(\nself\n,\nsource\n,\nsink\n)\n:\n\nmax_flow\n=\n\n0\n\n\npath\n=\nself\n.\ndfs\n(\nsource\n,\nsink\n)\n\n\nwhile\npath\n:\n\npath_flow\n=\n\nfloat\n(\n\"Inf\"\n)\n\n\nfor\ni\nin\n\nrange\n(\nlen\n(\npath\n)\n\n-\n\n1\n)\n:\n\nu\n,\nv\n=\npath\n[\ni\n]\n,\npath\n[\ni\n+\n\n1\n]\n\npath_flow\n=\n\nmin\n(\npath_flow\n,\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n)\n\n\n\nfor\ni\nin\n\nrange\n(\nlen\n(\npath\n)\n\n-\n\n1\n)\n:\n\nu\n,\nv\n=\npath\n[\ni\n]\n,\npath\n[\ni\n+\n\n1\n]\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n-=\npath_flow\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n+=\npath_flow\n\nmax_flow\n+=\npath_flow\n\npath_names\n=\n\n[\nself\n.\nvertex_data\n[\nnode\n]\n\nfor\nnode\nin\npath\n]\n\n\nprint\n(\n\"Path:\"\n,\n\n\" -> \"\n.\njoin\n(\npath_names\n)\n,\n\n\", Flow:\"\n,\npath_flow\n)\n\n\npath\n=\nself\n.\ndfs\n(\nsource\n,\nsink\n)\n\n\n\nreturn\nmax_flow\n\ng\n=\nGraph\n(\n6\n)\n\nvertex_names\n=\n\n[\n's'\n,\n\n'v1'\n,\n\n'v2'\n,\n\n'v3'\n,\n\n'v4'\n,\n\n't'\n]\n\n\nfor\ni\n,\nname\nin\n\nenumerate\n(\nvertex_names\n)\n:\n\ng\n.\nadd_vertex_data\n(\ni\n,\nname\n)\n\n\ng\n.\nadd_edge\n(\n0\n,\n\n1\n,\n\n3\n)\n\n# s  -> v1, cap: 3\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n,\n\n7\n)\n\n# s  -> v2, cap: 7\n\ng\n.\nadd_edge\n(\n1\n,\n\n3\n,\n\n3\n)\n\n# v1 -> v3, cap: 3\n\ng\n.\nadd_edge\n(\n1\n,\n\n4\n,\n\n4\n)\n\n# v1 -> v4, cap: 4\n\ng\n.\nadd_edge\n(\n2\n,\n\n1\n,\n\n5\n)\n\n# v2 -> v1, cap: 5\n\ng\n.\nadd_edge\n(\n2\n,\n\n4\n,\n\n3\n)\n\n# v2 -> v4, cap: 3\n\ng\n.\nadd_edge\n(\n3\n,\n\n4\n,\n\n3\n)\n\n# v3 -> v4, cap: 3\n\ng\n.\nadd_edge\n(\n3\n,\n\n5\n,\n\n2\n)\n\n# v3 -> t,  cap: 2\n\ng\n.\nadd_edge\n(\n4\n,\n\n5\n,\n\n6\n)\n\n# v4 -> t,  cap: 6\n\n\nsource\n=\n\n0\n;\nsink\n=\n\n5\n\n\n\nprint\n(\n\"The maximum possible flow is %d \"\n\n%\ng\n.\nfordFulkerson\n(\nsource\n,\nsink\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"\" style=\"height: 400px; overflow: auto;\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> visited <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-if\">if</span> path <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-if\">if</span> s <span class=\"token operator\">==</span> t<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> path\n\n        <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-if\">if</span> result_path<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> result_path\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fordFulkerson</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> path<span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n            path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nvertex_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> name <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>vertex_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    g<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v1, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v2, cap: 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v3, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v4, cap: 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v1, cap: 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; t,  cap: 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v4 -&gt; t,  cap: 6</span>\n\nsource <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> sink <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum possible flow is %d \"</span> <span class=\"token operator\">%</span> g<span class=\"token punctuation\">.</span>fordFulkerson<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Time Complexity for The Ford-Fulkerson Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The time complexity for the Ford-Fulkerson varies with the number of vertices V V , the number of edges E E , and it actually varies with the maximum flow f f in the graph as well.",
      "html": "<p>The time complexity for the Ford-Fulkerson varies with the number of vertices <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-34-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-268\"><span class=\"mjx-mrow\" id=\"MJXc-Node-269\"><span class=\"mjx-mi\" id=\"MJXc-Node-270\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>V</mi></math></span></span>, the number of edges <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-35-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-271\"><span class=\"mjx-mrow\" id=\"MJXc-Node-272\"><span class=\"mjx-mi\" id=\"MJXc-Node-273\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>E</mi></math></span></span>, and it actually varies with the maximum flow <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-36-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-274\"><span class=\"mjx-mrow\" id=\"MJXc-Node-275\"><span class=\"mjx-mi\" id=\"MJXc-Node-276\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>f</mi></math></span></span> in the graph as well.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The reason why the time complexity varies with the maximum flow f f in the graph, is because in a graph with a high throughput, there will be more augmented paths that increase flow, and that means the DFS method that finds these augmented paths will have to run more times.",
      "html": "<p>The reason why the time complexity varies with the maximum flow <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-37-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-277\"><span class=\"mjx-mrow\" id=\"MJXc-Node-278\"><span class=\"mjx-mi\" id=\"MJXc-Node-279\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>f</mi></math></span></span> in the graph, is because in a graph with a high throughput, there will be more augmented paths that increase flow, and that means the DFS method that finds these augmented paths will have to run more times.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Depth-first search (DFS) has time complexity O ( V + E ) O ( V + E ) .",
      "html": "<p>Depth-first search (DFS) has time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-38-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-280\"><span class=\"mjx-mrow\" id=\"MJXc-Node-281\"><span class=\"mjx-mi\" id=\"MJXc-Node-282\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-283\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-284\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-285\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">+</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-286\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-287\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "DFS runs once for every new augmented path. If we assume that each augmented graph increase flow by 1 unit, DFS must run f f times, as many times as the value of maximum flow.",
      "html": "<p>DFS runs once for every new augmented path. If we assume that each augmented graph increase flow by 1 unit, DFS must run <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-39-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-288\"><span class=\"mjx-mrow\" id=\"MJXc-Node-289\"><span class=\"mjx-mi\" id=\"MJXc-Node-290\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>f</mi></math></span></span> times, as many times as the value of maximum flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that time complexity for the Ford-Fulkerson algorithm, using DFS, is",
      "html": "<p>This means that time complexity for the Ford-Fulkerson algorithm, using DFS, is</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "O ( ( V + E ) \u22c5 f ) O ( ( V + E ) \u22c5 f )",
      "html": "<p><span class=\"math display\"><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MJXc-display\" style=\"text-align: center;\"><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-40-Frame\" role=\"presentation\" style=\"font-size: 119%; text-align: center; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-291\"><span class=\"mjx-mrow\" id=\"MJXc-Node-292\"><span class=\"mjx-mi\" id=\"MJXc-Node-293\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-294\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-295\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-296\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-297\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">+</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-298\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-299\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-300\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-301\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-302\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\" role=\"presentation\"><math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mo>\u22c5</mo><mi>f</mi><mo stretchy=\"false\">)</mo></math></span></span></span></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For dense graphs , where E > V E > V , time complexity for DFS can be simplified to O ( E ) O ( E ) , which means that the time complexity for the Ford-Fulkerson algorithm also can be simplified to",
      "html": "<p>For <i>dense graphs</i>, where <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-41-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-303\"><span class=\"mjx-mrow\" id=\"MJXc-Node-304\"><span class=\"mjx-mi\" id=\"MJXc-Node-305\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-306\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.395em;\">&gt;</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-307\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>E</mi><mo>&gt;</mo><mi>V</mi></math></span></span>, time complexity for DFS can be simplified to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-42-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-308\"><span class=\"mjx-mrow\" id=\"MJXc-Node-309\"><span class=\"mjx-mi\" id=\"MJXc-Node-310\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-311\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-312\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-313\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></math></span></span>, which means that the time complexity for the Ford-Fulkerson algorithm also can be simplified to</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "O ( E \u22c5 f ) O ( E \u22c5 f )",
      "html": "<p><span class=\"math display\"><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MJXc-display\" style=\"text-align: center;\"><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-43-Frame\" role=\"presentation\" style=\"font-size: 119%; text-align: center; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-314\"><span class=\"mjx-mrow\" id=\"MJXc-Node-315\"><span class=\"mjx-mi\" id=\"MJXc-Node-316\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-317\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-318\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-319\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-320\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-321\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\" role=\"presentation\"><math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo>\u22c5</mo><mi>f</mi><mo stretchy=\"false\">)</mo></math></span></span></span></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A dense graph does not have an accurate definition, but it is a graph with many edges.",
      "html": "<p>A dense graph does not have an accurate definition, but it is a graph with many edges.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "the Edmonds-Karp algorithm",
          "href": "https://www.w3schools.com/dsa_algo_graphs_edmondskarp.php",
          "title": ""
        }
      ],
      "text": "The next algorithm we will describe that finds maximum flow is the Edmonds-Karp algorithm .",
      "html": "<p>The next algorithm we will describe that finds maximum flow is <a href=\"dsa_algo_graphs_edmondskarp.php\">the Edmonds-Karp algorithm</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm is very similar to Ford-Fulkerson, but it uses BFS instead of DFS to find augmented paths, which leads to fewer iterations to find maximum flow.",
      "html": "<p>The Edmonds-Karp algorithm is very similar to Ford-Fulkerson, but it uses BFS instead of DFS to find augmented paths, which leads to fewer iterations to find maximum flow.</p>"
    }
  ]
}