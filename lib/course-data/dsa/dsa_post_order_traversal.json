{
  "title": "DSA Post-order Traversal",
  "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Post-order Traversal",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Post-order Traversal of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/dsa_data_binarytrees.php#traversal",
          "title": ""
        }
      ],
      "text": "Post-order Traversal is a type of Depth First Search, where each node is visited in a certain order. Read more about Binary Tree traversals in general here .",
      "html": "<p>Post-order Traversal is a type of Depth First Search, where each node is visited in a certain order. Read more about Binary Tree traversals in general <a href=\"dsa_data_binarytrees.php#traversal\">here</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Doing a Post-order Traversal on a Binary Tree can be visualized like this:",
      "html": "<p>Doing a Post-order Traversal on a Binary Tree can be visualized like this:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Post-order Traversal works by recursively doing a Post-order Traversal of the left subtree and the right subtree, followed by a visit to the root node. It is used for deleting a tree, post-fix notation of an expression tree, etc.",
      "html": "<p>Post-order Traversal works by recursively doing a Post-order Traversal of the left subtree and the right subtree, followed by a visit to the root node. It is used for deleting a tree, post-fix notation of an expression tree, etc.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What makes this traversal \"post\" is that visiting a node is done \"after\" the left and right child nodes are called recursively.",
      "html": "<p>What makes this traversal \"post\" is that visiting a node is done \"after\" the left and right child nodes are called recursively.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the code for Post-order Traversal looks like:",
      "html": "<p>This is how the code for Post-order Traversal looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\npostOrderTraversal\n(\nnode\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\npostOrderTraversal\n(\nnode\n.\nleft\n)\n\npostOrderTraversal\n(\nnode\n.\nright\n)\n\n\nprint\n(\nnode\n.\ndata\n,\nend\n=\n\", \"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    postOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    postOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The postOrderTraversal() function keeps traversing the left subtree recursively (line 4), until None is returned when C's left child node is called as the node argument.",
      "html": "<p>The <code>postOrderTraversal()</code> function keeps traversing the left subtree recursively (line 4), until <code>None</code> is returned when C's left child node is called as the <code>node</code> argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After C's left child node returns None , line 5 runs and C's right child node returns None , and then the letter 'C' is printed (line 6).",
      "html": "<p>After C's left child node returns <code>None</code>, line 5 runs and C's right child node returns <code>None</code>, and then the letter 'C' is printed (line 6).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that C is visited, or printed, \"after\" its left and right child nodes are traversed, that is why it is called \"post\" order traversal.",
      "html": "<p>This means that C is visited, or printed, \"after\" its left and right child nodes are traversed, that is why it is called \"post\" order traversal.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The postOrderTraversal() function continues to propagate back to previous recursive function calls, so the next node to be printed is 'D', then 'A'.",
      "html": "<p>The <code>postOrderTraversal()</code> function continues to propagate back to previous recursive function calls, so the next node to be printed is 'D', then 'A'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The function continues to propagate back and printing nodes until all nodes are printed, or visited.",
      "html": "<p>The function continues to propagate back and printing nodes until all nodes are printed, or visited.</p>"
    }
  ]
}