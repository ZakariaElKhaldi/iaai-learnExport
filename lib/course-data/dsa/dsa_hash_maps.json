{
  "title": "DSA Hash Maps",
  "url": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Hash Maps",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Hash Maps",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Hash Table",
          "href": "https://www.w3schools.com/dsa_theory_hashtables.php",
          "title": ""
        }
      ],
      "text": "A Hash Map is a form of Hash Table data structure that usually holds a large number of entries.",
      "html": "<p>A Hash Map is a form of <a href=\"dsa_theory_hashtables.php\">Hash Table</a> data structure that usually holds a large number of entries.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using a Hash Map we can search, add, modify, and remove entries really fast.",
      "html": "<p>Using a Hash Map we can search, add, modify, and remove entries really fast.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Maps are used to find detailed information about something.",
      "html": "<p>Hash Maps are used to find detailed information about something.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the simulation below, people are stored in a Hash Map. A person can be looked up using a person's unique social security number (the Hash Map key), and then we can see that person's name (the Hash Map value).",
      "html": "<p>In the simulation below, people are stored in a Hash Map. A person can be looked up using a person's unique social security number (the Hash Map key), and then we can see that person's name (the Hash Map value).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Map",
      "html": "<p style=\"font-weight: bold;\">Hash Map</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hash Code",
      "html": "<p style=\"font-weight: bold;\">Hash Code</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "0 % 10 = 0",
      "html": "<p>0 % 10 = <span class=\"hashcode\">0</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Try interacting with the Hash Map 0",
      "html": "<p>Try interacting with the Hash Map<span style=\"opacity: 0;\">0</span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The Hash Map would be more useful if more information about each person was attached to the corresponding social security number, like last name, birth date, and address, and maybe other things as well. But the Hash Map simulation above is made to be as simple as possible.",
      "html": "<p><strong>Note: </strong>The Hash Map would be more useful if more information about each person was attached to the corresponding social security number, like last name, birth date, and address, and maybe other things as well. But the Hash Map simulation above is made to be as simple as possible.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Hash Tables",
          "href": "https://www.w3schools.com/dsa_theory_hashtables.php",
          "title": ""
        },
        {
          "text": "Hash Sets",
          "href": "https://www.w3schools.com/dsa_data_hashsets.php",
          "title": ""
        }
      ],
      "text": "It is easier to understand how Hash Maps work if you first have a look at the two previous pages about Hash Tables and Hash Sets . It is also important to understand the meaning of the words below.",
      "html": "<p>It is easier to understand how Hash Maps work if you first have a look at the two previous pages about <a href=\"dsa_theory_hashtables.php\">Hash Tables</a> and <a href=\"dsa_data_hashsets.php\">Hash Sets</a>. It is also important to understand the meaning of the words below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Finding The Hash Code",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A hash code is generated by a hash function .",
      "html": "<p>A hash code is generated by a <strong>hash function</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The hash function in the simulation above takes the numbers in the social security number (not the dash), add them together, and does a modulo 10 operation ( % 10 ) on the sum of characters to get the hash code as a number from 0 to 9.",
      "html": "<p>The hash function in the simulation above takes the numbers in the social security number (not the dash), add them together, and does a modulo 10 operation (<code>% 10</code>) on the sum of characters to get the hash code as a number from 0 to 9.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that a person is stored in one of ten possible buckets in the Hash Map, according to the hash code of that person's social security number. The same hash code is generated and used when we want to search for or remove a person from the Hash Map.",
      "html": "<p>This means that a person is stored in one of ten possible buckets in the Hash Map, according to the hash code of that person's social security number. The same hash code is generated and used when we want to search for or remove a person from the Hash Map.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Hash Code gives us instant access as long as there is just one person in the corresponding bucket.",
      "html": "<p>The Hash Code gives us instant access as long as there is just one person in the corresponding bucket.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the simulation above, Charlotte has social security number 123-4567 . Adding the numbers together gives us a sum 28 , and modulo 10 of that is 8 . That is why she belongs to bucket 8 .",
      "html": "<p>In the simulation above, <code>Charlotte</code> has social security number <code>123-4567</code>. Adding the numbers together gives us a sum <code>28</code>, and modulo 10 of that is <code>8</code>. That is why she belongs to bucket <code>8</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Modulo: A mathematical operation, written as % in most programming languages (or m o d m o d in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example, 7 % 3 will give us the remainder 1 . (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)",
      "html": "<p><strong>Modulo: </strong>A mathematical operation, written as <code>%</code> in most programming languages (or <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">m</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-4\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">o</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-5\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.003em;\">d</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>m</mi><mi>o</mi><mi>d</mi></math></span></span> in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example, <code>7 % 3</code> will give us the remainder <code>1</code>. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Direct Access in Hash Maps",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Searching for Charlotte in the Hash Map, we must use the social security number 123-4567 (the Hash Map key), which generates the hash code 8 , as explained above.",
      "html": "<p>Searching for <code>Charlotte</code> in the Hash Map, we must use the social security number <code>123-4567</code> (the Hash Map key), which generates the hash code <code>8</code>, as explained above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means we can go straight to bucket 8 to get her name (the Hash Map value), without searching through other entries in the Hash Map.",
      "html": "<p>This means we can go straight to bucket <code>8</code> to get her name (the Hash Map value), without searching through other entries in the Hash Map.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In cases like this we say that the Hash Map has constant time O ( 1 ) O ( 1 ) for searching, adding, and removing entries, which is really fast compared to using an array or a linked list.",
      "html": "<p>In cases like this we say that the Hash Map has constant time <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-6\"><span class=\"mjx-mrow\" id=\"MJXc-Node-7\"><span class=\"mjx-mi\" id=\"MJXc-Node-8\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-10\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-11\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></math></span></span> for searching, adding, and removing entries, which is really fast compared to using an array or a linked list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But, in a worst case scenario, all the people are stored in the same bucket, and if the person we are trying to find is last person in this bucket, we need to compare with all the other social security numbers in that bucket before we find the person we are looking for.",
      "html": "<p>But, in a worst case scenario, all the people are stored in the same bucket, and if the person we are trying to find is last person in this bucket, we need to compare with all the other social security numbers in that bucket before we find the person we are looking for.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In such a worst case scenario the Hash Map has time complexity O ( n ) O ( n ) , which is the same time complexity as arrays and linked lists.",
      "html": "<p>In such a worst case scenario the Hash Map has time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-12\"><span class=\"mjx-mrow\" id=\"MJXc-Node-13\"><span class=\"mjx-mi\" id=\"MJXc-Node-14\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-17\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>, which is the same time complexity as arrays and linked lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To keep Hash Maps fast, it is therefore important to have a hash function that will distribute the entries evenly between the buckets, and to have around as many buckets as Hash Map entries.",
      "html": "<p>To keep Hash Maps fast, it is therefore important to have a hash function that will distribute the entries evenly between the buckets, and to have around as many buckets as Hash Map entries.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Having a lot more buckets than Hash Map entries is a waste of memory, and having a lot less buckets than Hash Map entries is a waste of time.",
      "html": "<p>Having a lot more buckets than Hash Map entries is a waste of memory, and having a lot less buckets than Hash Map entries is a waste of time.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: A social security number can be really long, like 11 digits, which means it is possible to store 100 billion people with unique social security numbers. This is a lot more than in any country's population, and even a lot more than there are people on Earth.",
      "html": "<p><strong>Note: </strong>A social security number can be really long, like 11 digits, which means it is possible to store 100 billion people with unique social security numbers. This is a lot more than in any country's population, and even a lot more than there are people on Earth.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using an array where each person's social security number is the index in the array where this person is stored is therefore a huge waste of space (mostly empty buckets).",
      "html": "<p>Using an array where each person's social security number is the index in the array where this person is stored is therefore a huge waste of space (mostly empty buckets).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using a Hash Map (or a database with similar properties) makes more sense as the number of buckets can be adjusted to the number of people.",
      "html": "<p>Using a Hash Map (or a database with similar properties) makes more sense as the number of buckets can be adjusted to the number of people.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Hash Map Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "dictionary data type",
          "href": "https://www.w3schools.com/python/python_dictionaries.asp",
          "title": ""
        }
      ],
      "text": "Hash Maps in Python are typically done by using Python's own dictionary data type , but to get a better understanding of how Hash Maps work we will not use that here.",
      "html": "<p>Hash Maps in Python are typically done by using Python's own <a href=\"python/python_dictionaries.asp\"><code>dictionary</code> data type</a>, but to get a better understanding of how Hash Maps work we will not use that here.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement a Hash Map in Python we create a class SimpleHashMap .",
      "html": "<p>To implement a Hash Map in Python we create a class <code>SimpleHashMap</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inside the SimpleHashMap class we have a method __init__ to initialize the Hash Map, a method hash_function for the hash function, and methods for the basic Hash Map operations: put , get , and remove .",
      "html": "<p>Inside the <code>SimpleHashMap</code> class we have a method <code>__init__</code> to initialize the Hash Map, a method <code>hash_function</code> for the hash function, and methods for the basic Hash Map operations: <code>put</code>, <code>get</code>, and <code>remove</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We also create a method print_map to better see how the Hash Map looks like.",
      "html": "<p>We also create a method <code>print_map</code> to better see how the Hash Map looks like.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nSimpleHashMap\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n=\n100\n)\n:\n\nself\n.\nsize\n=\nsize\nself\n.\nbuckets\n=\n\n[\n[\n]\n\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\n# A list of buckets, each is a list (to handle collisions)\n\n\n\ndef\n\nhash_function\n(\nself\n,\nkey\n)\n:\n\n\n# Sum only the numerical values of the key, ignoring non-numeric characters\n\nnumeric_sum\n=\n\nsum\n(\nint\n(\nchar\n)\n\nfor\nchar\nin\nkey\nif\nchar\n.\nisdigit\n(\n)\n)\n\n\nreturn\nnumeric_sum\n%\n\n10\n\n# Perform modulo 10 on the sum\n\n\n\ndef\n\nput\n(\nself\n,\nkey\n,\nvalue\n)\n:\n\n\n# Add or update a key-value pair\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\ni\n,\n\n(\nk\n,\nv\n)\n\nin\n\nenumerate\n(\nbucket\n)\n:\n\n\nif\nk\n==\nkey\n:\n\nbucket\n[\ni\n]\n\n=\n\n(\nkey\n,\nvalue\n)\n\n# Update existing key\n\n\nreturn\n\nbucket\n.\nappend\n(\n(\nkey\n,\nvalue\n)\n)\n\n# Add new key-value pair if not found\n\n\n\ndef\n\nget\n(\nself\n,\nkey\n)\n:\n\n\n# Retrieve a value by key\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\nk\n,\nv\nin\nbucket\n:\n\n\nif\nk\n==\nkey\n:\n\n\nreturn\nv\n\nreturn\n\nNone\n\n# Key not found\n\n\n\ndef\n\nremove\n(\nself\n,\nkey\n)\n:\n\n\n# Remove a key-value pair\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\ni\n,\n\n(\nk\n,\nv\n)\n\nin\n\nenumerate\n(\nbucket\n)\n:\n\n\nif\nk\n==\nkey\n:\n\n\ndel\nbucket\n[\ni\n]\n\n# Remove the key-value pair\n\n\nreturn\n\n\n\ndef\n\nprint_map\n(\nself\n)\n:\n\n\n# Print all key-value pairs in the hash map\n\n\nprint\n(\n\"Hash Map Contents:\"\n)\n\n\nfor\nindex\n,\nbucket\nin\n\nenumerate\n(\nself\n.\nbuckets\n)\n:\n\n\nprint\n(\nf\"Bucket\n{\nindex\n}\n:\n{\nbucket\n}\n\"\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashMap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sum only the numerical values of the key, ignoring non-numeric characters</span>\n        numeric_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> key <span class=\"token keyword keyword-if\">if</span> char<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> numeric_sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># Perform modulo 10 on the sum</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add or update a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Update existing key</span>\n                <span class=\"token keyword keyword-return\">return</span>\n        bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add new key-value pair if not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Retrieve a value by key</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-return\">return</span> v\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># Key not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-del\">del</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Remove the key-value pair</span>\n                <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all key-value pairs in the hash map</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Map Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using the SimpleHashMap class we can create the same Hash Map as in the top of this page:",
      "html": "<p>Using the <code>SimpleHashMap</code> class we can create the same Hash Map as in the top of this page:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nSimpleHashMap\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n=\n100\n)\n:\n\nself\n.\nsize\n=\nsize\nself\n.\nbuckets\n=\n\n[\n[\n]\n\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\n# A list of buckets, each is a list (to handle collisions)\n\n\n\ndef\n\nhash_function\n(\nself\n,\nkey\n)\n:\n\n\n# Sum only the numerical values of the key, ignoring non-numeric characters\n\nnumeric_sum\n=\n\nsum\n(\nint\n(\nchar\n)\n\nfor\nchar\nin\nkey\nif\nchar\n.\nisdigit\n(\n)\n)\n\n\nreturn\nnumeric_sum\n%\n\n10\n\n# Perform modulo 10 on the sum\n\n\n\ndef\n\nput\n(\nself\n,\nkey\n,\nvalue\n)\n:\n\n\n# Add or update a key-value pair\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\ni\n,\n\n(\nk\n,\nv\n)\n\nin\n\nenumerate\n(\nbucket\n)\n:\n\n\nif\nk\n==\nkey\n:\n\nbucket\n[\ni\n]\n\n=\n\n(\nkey\n,\nvalue\n)\n\n# Update existing key\n\n\nreturn\n\nbucket\n.\nappend\n(\n(\nkey\n,\nvalue\n)\n)\n\n# Add new key-value pair if not found\n\n\n\ndef\n\nget\n(\nself\n,\nkey\n)\n:\n\n\n# Retrieve a value by key\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\nk\n,\nv\nin\nbucket\n:\n\n\nif\nk\n==\nkey\n:\n\n\nreturn\nv\n\nreturn\n\nNone\n\n# Key not found\n\n\n\ndef\n\nremove\n(\nself\n,\nkey\n)\n:\n\n\n# Remove a key-value pair\n\nindex\n=\nself\n.\nhash_function\n(\nkey\n)\n\nbucket\n=\nself\n.\nbuckets\n[\nindex\n]\n\n\nfor\ni\n,\n\n(\nk\n,\nv\n)\n\nin\n\nenumerate\n(\nbucket\n)\n:\n\n\nif\nk\n==\nkey\n:\n\n\ndel\nbucket\n[\ni\n]\n\n# Remove the key-value pair\n\n\nreturn\n\n\n\ndef\n\nprint_map\n(\nself\n)\n:\n\n\n# Print all key-value pairs in the hash map\n\n\nprint\n(\n\"Hash Map Contents:\"\n)\n\n\nfor\nindex\n,\nbucket\nin\n\nenumerate\n(\nself\n.\nbuckets\n)\n:\n\n\nprint\n(\nf\"Bucket\n{\nindex\n}\n:\n{\nbucket\n}\n\"\n)\n\n\n\n# Creating the Hash Map from the simulation\n\nhash_map\n=\nSimpleHashMap\n(\nsize\n=\n10\n)\n\n\n\n# Adding some entries\n\nhash_map\n.\nput\n(\n\"123-4567\"\n,\n\n\"Charlotte\"\n)\n\nhash_map\n.\nput\n(\n\"123-4568\"\n,\n\n\"Thomas\"\n)\n\nhash_map\n.\nput\n(\n\"123-4569\"\n,\n\n\"Jens\"\n)\n\nhash_map\n.\nput\n(\n\"123-4570\"\n,\n\n\"Peter\"\n)\n\nhash_map\n.\nput\n(\n\"123-4571\"\n,\n\n\"Lisa\"\n)\n\nhash_map\n.\nput\n(\n\"123-4672\"\n,\n\n\"Adele\"\n)\n\nhash_map\n.\nput\n(\n\"123-4573\"\n,\n\n\"Michaela\"\n)\n\nhash_map\n.\nput\n(\n\"123-6574\"\n,\n\n\"Bob\"\n)\n\n\nhash_map\n.\nprint_map\n(\n)\n\n\n\n# Demonstrating retrieval\n\n\nprint\n(\n\"\\nName associated with '123-4570':\"\n,\nhash_map\n.\nget\n(\n\"123-4570\"\n)\n)\n\n\n\nprint\n(\n\"Updating the name for '123-4570' to 'James'\"\n)\n\nhash_map\n.\nput\n(\n\"123-4570\"\n,\n\"James\"\n)\n\n\n\n# Checking if Peter is still there\n\n\nprint\n(\n\"Name associated with '123-4570':\"\n,\nhash_map\n.\nget\n(\n\"123-4570\"\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" id=\"codeBlock\" style=\"height: 38em; overflow-y: scroll;\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashMap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sum only the numerical values of the key, ignoring non-numeric characters</span>\n        numeric_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> key <span class=\"token keyword keyword-if\">if</span> char<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> numeric_sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># Perform modulo 10 on the sum</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add or update a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Update existing key</span>\n                <span class=\"token keyword keyword-return\">return</span>\n        bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add new key-value pair if not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Retrieve a value by key</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-return\">return</span> v\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># Key not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-del\">del</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Remove the key-value pair</span>\n                <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all key-value pairs in the hash map</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Map Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Creating the Hash Map from the simulation</span>\nhash_map <span class=\"token operator\">=</span> SimpleHashMap<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Adding some entries</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4567\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Charlotte\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4568\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4569\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jens\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4571\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4672\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adele\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4573\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michaela\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-6574\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n\nhash_map<span class=\"token punctuation\">.</span>print_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Demonstrating retrieval</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nName associated with '123-4570':\"</span><span class=\"token punctuation\">,</span> hash_map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updating the name for '123-4570' to 'James'\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Checking if Peter is still there</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name associated with '123-4570':\"</span><span class=\"token punctuation\">,</span> hash_map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    }
  ]
}