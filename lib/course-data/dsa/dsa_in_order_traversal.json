{
  "title": "DSA In-order Traversal",
  "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA In-order Traversal",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "In-order Traversal of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/dsa_data_binarytrees.php#traversal",
          "title": ""
        }
      ],
      "text": "In-order Traversal is a type of Depth First Search, where each node is visited in a certain order. Read more about Binary Tree traversals in general here .",
      "html": "<p>In-order Traversal is a type of Depth First Search, where each node is visited in a certain order. Read more about Binary Tree traversals in general <a href=\"dsa_data_binarytrees.php#traversal\">here</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the animation below to see how an In-order Traversal of a Binary Tree is done.",
      "html": "<p>Run the animation below to see how an In-order Traversal of a Binary Tree is done.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Result:",
      "html": "<p>Result: </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In-order Traversal does a recursive In-order Traversal of the left subtree, visits the root node, and finally, does a recursive In-order Traversal of the right subtree. This traversal is mainly used for Binary Search Trees where it returns values in ascending order.",
      "html": "<p>In-order Traversal does a recursive In-order Traversal of the left subtree, visits the root node, and finally, does a recursive In-order Traversal of the right subtree. This traversal is mainly used for Binary Search Trees where it returns values in ascending order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What makes this traversal \"in\" order, is that the node is visited in between the recursive function calls. The node is visited after the In-order Traversal of the left subtree, and before the In-order Traversal of the right subtree.",
      "html": "<p>What makes this traversal \"in\" order, is that the node is visited in between the recursive function calls. The node is visited after the In-order Traversal of the left subtree, and before the In-order Traversal of the right subtree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the code for In-order Traversal looks like:",
      "html": "<p>This is how the code for In-order Traversal looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "line-numbers",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\ninOrderTraversal\n(\nnode\n)\n:\n\n\nif\nnode\nis\n\nNone\n:\n\n\nreturn\n\ninOrderTraversal\n(\nnode\n.\nleft\n)\n\n\nprint\n(\nnode\n.\ndata\n,\nend\n=\n\", \"\n)\n\ninOrderTraversal\n(\nnode\n.\nright\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate line-numbers w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "line-numbers",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The inOrderTraversal() function keeps calling itself with the current left child node as an argument (line 4) until that argument is None and the function returns (line 2-3).",
      "html": "<p>The <code>inOrderTraversal()</code> function keeps calling itself with the current left child node as an argument (line 4) until that argument is <code>None</code> and the function returns (line 2-3).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The first time the argument node is None is when the left child of node C is given as an argument (C has no left child).",
      "html": "<p>The first time the argument <code>node</code> is <code>None</code> is when the left child of node C is given as an argument (C has no left child).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After that, the data part of node C is printed (line 5), which means that 'C' is the first thing that gets printed.",
      "html": "<p>After that, the <code>data</code> part of node C is printed (line 5), which means that 'C' is the first thing that gets printed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Then, node C's right child is given as an argument (line 6), which is None , so the function call returns without doing anything else.",
      "html": "<p>Then, node C's right child is given as an argument (line 6), which is <code>None</code>, so the function call returns without doing anything else.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After 'C' is printed, the previous inOrderTraversal() function calls continue to run, so that 'A' gets printed, then 'D', then 'R', and so on.",
      "html": "<p>After 'C' is printed, the previous <code>inOrderTraversal()</code> function calls continue to run, so that 'A' gets printed, then 'D', then 'R', and so on.</p>"
    }
  ]
}