{
  "title": "DSA The Traveling Salesman Problem",
  "url": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA The Traveling Salesman Problem",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Traveling Salesman Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem states that you are a salesperson and you must visit a number of cities or towns.",
      "html": "<p>The Traveling Salesman Problem states that you are a salesperson and you must visit a number of cities or towns.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem",
      "html": "<p><strong>The Traveling Salesman Problem</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Rules : Visit every city only once, then return back to the city you started in.",
      "html": "<p><u>Rules</u>: Visit every city only once, then return back to the city you started in.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Goal : Find the shortest possible route.",
      "html": "<p><u>Goal</u>: Find the shortest possible route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Except for the Held-Karp algorithm (which is quite advanced and time consuming, ( O ( 2 n n 2 ) O ( 2 n n 2 ) ), and will not be described here), there is no other way to find the shortest route than to check all possible routes.",
      "html": "<p>Except for the Held-Karp algorithm (which is quite advanced and time consuming, (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-4\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-5\"><span class=\"mjx-base\"><span class=\"mjx-mn\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.591em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mi\" id=\"MJXc-Node-7\" style=\"\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-8\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.513em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-10\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-11\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></math></span></span>), and will not be described here), there is no other way to find the shortest route than to check all possible routes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that the time complexity for solving this problem is O ( n ! ) O ( n ! ) , which means 720 routes needs to be checked for 6 cities, 40,320 routes must be checked for 8 cities, and if you have 10 cities to visit, more than 3.6 million routes must be checked!",
      "html": "<p>This means that the time complexity for solving this problem is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-12\"><span class=\"mjx-mrow\" id=\"MJXc-Node-13\"><span class=\"mjx-mi\" id=\"MJXc-Node-14\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-17\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-18\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>!</mo><mo stretchy=\"false\">)</mo></math></span></span>, which means 720 routes needs to be checked for 6 cities, 40,320 routes must be checked for 8 cities, and if you have 10 cities to visit, more than 3.6 million routes must be checked!</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: \"!\", or \"factorial\", is a mathematical operation used in combinatorics to find out how many possible ways something can be done. If there are 4 cities, each city is connected to every other city, and we must visit every city exactly once, there are 4 ! = 4 \u22c5 3 \u22c5 2 \u22c5 1 = 24 4 ! = 4 \u22c5 3 \u22c5 2 \u22c5 1 = 24 different routes we can take to visit those cities.",
      "html": "<p><strong>Note: </strong>\"!\", or \"factorial\", is a mathematical operation used in combinatorics to find out how many possible ways something can be done. If there are 4 cities, each city is connected to every other city, and we must visit every city exactly once, there are <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;24&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-19\"><span class=\"mjx-mrow\" id=\"MJXc-Node-20\"><span class=\"mjx-mn\" id=\"MJXc-Node-21\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-22\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-23\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-24\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-25\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-26\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-27\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-28\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-29\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-30\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-31\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-32\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">24</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>4</mn><mo>!</mo><mo>=</mo><mn>4</mn><mo>\u22c5</mo><mn>3</mn><mo>\u22c5</mo><mn>2</mn><mo>\u22c5</mo><mn>1</mn><mo>=</mo><mn>24</mn></math></span></span> different routes we can take to visit those cities.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem (TSP) is a problem that is interesting to study because it is very practical, but so time consuming to solve, that it becomes nearly impossible to find the shortest route, even in a graph with just 20-30 vertices.",
      "html": "<p>The Traveling Salesman Problem (TSP) is a problem that is interesting to study because it is very practical, but so time consuming to solve, that it becomes nearly impossible to find the shortest route, even in a graph with just 20-30 vertices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If we had an effective algorithm for solving The Traveling Salesman Problem, the consequences would be very big in many sectors, like for example chip design, vehicle routing, telecommunications, and urban planning.",
      "html": "<p>If we had an effective algorithm for solving The Traveling Salesman Problem, the consequences would be very big in many sectors, like for example chip design, vehicle routing, telecommunications, and urban planning.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Checking All Routes to Solve The Traveling Salesman Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To find the optimal solution to The Traveling Salesman Problem, we will check all possible routes, and every time we find a shorter route, we will store it, so that in the end we will have the shortest route.",
      "html": "<p>To find the optimal solution to The Traveling Salesman Problem, we will check all possible routes, and every time we find a shorter route, we will store it, so that in the end we will have the shortest route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Good: Finds the overall shortest route.",
      "html": "<p><strong>Good: </strong>Finds the overall shortest route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Bad: Requires an awful lot of calculation, especially for a large amount of cities, which means it is very time consuming.",
      "html": "<p><strong>Bad: </strong>Requires an awful lot of calculation, especially for a large amount of cities, which means it is very time consuming.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Such a way of finding the solution to a problem is called brute force .",
      "html": "<p>Such a way of finding the solution to a problem is called <strong>brute force</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Brute force is not really an algorithm, it just means finding the solution by checking all possibilities, usually because of a lack of a better way to do it.",
      "html": "<p>Brute force is not really an algorithm, it just means finding the solution by checking all possibilities, usually because of a lack of a better way to do it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finding the shortest route in The Traveling Salesman Problem by checking all routes (brute force).",
      "html": "<p style=\"margin: 15px 15px 0px;\">Finding the shortest route in The Traveling Salesman Problem by checking all routes (brute force).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Progress: 0%",
      "html": "<p style=\"margin-bottom: 0px;\">Progress: 0%</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "n = 6 cities",
      "html": "<p><input id=\"customRange\" max=\"10\" min=\"5\" step=\"1\" type=\"range\"/> n = 6 cities</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "6!=720 possible routes",
      "html": "<p>6!=720 possible routes</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Show every route: true",
      "html": "<p><label>Show every route: <input type=\"checkbox\"/> true</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The reason why the brute force approach of finding the shortest route (as shown above) is so time consuming is that we are checking all routes, and the number of possible routes increases really fast when the number of cities increases.",
      "html": "<p>The reason why the brute force approach of finding the shortest route (as shown above) is so time consuming is that we are checking all routes, and the number of possible routes increases really fast when the number of cities increases.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "from\nitertools\nimport\npermutations\n\n\ndef\n\ncalculate_distance\n(\nroute\n,\ndistances\n)\n:\n\ntotal_distance\n=\n\n0\n\n\nfor\ni\nin\n\nrange\n(\nlen\n(\nroute\n)\n\n-\n\n1\n)\n:\n\ntotal_distance\n+=\ndistances\n[\nroute\n[\ni\n]\n]\n[\nroute\n[\ni\n+\n\n1\n]\n]\n\ntotal_distance\n+=\ndistances\n[\nroute\n[\n-\n1\n]\n]\n[\nroute\n[\n0\n]\n]\n\n\nreturn\ntotal_distance\n\n\ndef\n\nbrute_force_tsp\n(\ndistances\n)\n:\n\nn\n=\n\nlen\n(\ndistances\n)\n\ncities\n=\n\nlist\n(\nrange\n(\n1\n,\nn\n)\n)\n\nshortest_route\n=\n\nNone\n\nmin_distance\n=\n\nfloat\n(\n'inf'\n)\n\n\n\nfor\nperm\nin\npermutations\n(\ncities\n)\n:\n\ncurrent_route\n=\n\n[\n0\n]\n\n+\n\nlist\n(\nperm\n)\n\ncurrent_distance\n=\ncalculate_distance\n(\ncurrent_route\n,\ndistances\n)\n\n\n\nif\ncurrent_distance\n<\nmin_distance\n:\n\nmin_distance\n=\ncurrent_distance\nshortest_route\n=\ncurrent_route\n\nshortest_route\n.\nappend\n(\n0\n)\n\n\nreturn\nshortest_route\n,\nmin_distance\n\ndistances\n=\n\n[\n\n\n[\n0\n,\n\n2\n,\n\n2\n,\n\n5\n,\n\n9\n,\n\n3\n]\n,\n\n\n[\n2\n,\n\n0\n,\n\n4\n,\n\n6\n,\n\n7\n,\n\n8\n]\n,\n\n\n[\n2\n,\n\n4\n,\n\n0\n,\n\n8\n,\n\n6\n,\n\n3\n]\n,\n\n\n[\n5\n,\n\n6\n,\n\n8\n,\n\n0\n,\n\n4\n,\n\n9\n]\n,\n\n\n[\n9\n,\n\n7\n,\n\n6\n,\n\n4\n,\n\n0\n,\n\n10\n]\n,\n\n\n[\n3\n,\n\n8\n,\n\n3\n,\n\n9\n,\n\n10\n,\n\n0\n]\n\n\n]\n\n\nroute\n,\ntotal_distance\n=\nbrute_force_tsp\n(\ndistances\n)\n\n\nprint\n(\n\"Route:\"\n,\nroute\n)\n\n\nprint\n(\n\"Total distance:\"\n,\ntotal_distance\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-from\">from</span> itertools <span class=\"token keyword keyword-import\">import</span> permutations\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_distance</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total_distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> total_distance\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">brute_force_tsp</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n    cities <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    shortest_route <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-for\">for</span> perm <span class=\"token keyword keyword-in\">in</span> permutations<span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current_route <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span>\n        current_distance <span class=\"token operator\">=</span> calculate_distance<span class=\"token punctuation\">(</span>current_route<span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword keyword-if\">if</span> current_distance <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> current_distance\n            shortest_route <span class=\"token operator\">=</span> current_route\n    \n    shortest_route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> shortest_route<span class=\"token punctuation\">,</span> min_distance\n\ndistances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\nroute<span class=\"token punctuation\">,</span> total_distance <span class=\"token operator\">=</span> brute_force_tsp<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Route:\"</span><span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total distance:\"</span><span class=\"token punctuation\">,</span> total_distance<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using A Greedy Algorithm to Solve The Traveling Salesman Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since checking every possible route to solve the Traveling Salesman Problem (like we did above) is so incredibly time consuming, we can instead find a short route by just going to the nearest unvisited city in each step, which is much faster.",
      "html": "<p>Since checking every possible route to solve the Traveling Salesman Problem (like we did above) is so incredibly time consuming, we can instead find a short route by just going to the nearest unvisited city in each step, which is much faster.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Good: Finds a solution to the Traveling Salesman Problem much faster than by checking all routes.",
      "html": "<p><strong>Good: </strong>Finds a solution to the Traveling Salesman Problem much faster than by checking all routes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Bad: Does not find the overall shortest route, it just finds a route that is much shorter than an average random route.",
      "html": "<p><strong>Bad: </strong>Does not find the overall shortest route, it just finds a route that is much shorter than an average random route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This way of finding an approximation to the shortest route in the Traveling Salesman Problem, by just going to the nearest unvisited city in each step, is called a greedy algorithm .",
      "html": "<p>This way of finding an approximation to the shortest route in the Traveling Salesman Problem, by just going to the nearest unvisited city in each step, is called a <strong>greedy algorithm</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finding an approximation to the shortest route in The Traveling Salesman Problem by always going to the nearest unvisited neighbor (greedy algorithm).",
      "html": "<p style=\"margin: 15px 15px 0px;\">Finding an approximation to the shortest route in The Traveling Salesman Problem by always going to the nearest unvisited neighbor (greedy algorithm).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see by running this simulation a few times, the routes that are found are not completely unreasonable. Except for a few times when the lines cross perhaps, especially towards the end of the algorithm, the resulting route is a lot shorter than we would get by choosing the next city at random.",
      "html": "<p>As you can see by running this simulation a few times, the routes that are found are not completely unreasonable. Except for a few times when the lines cross perhaps, especially towards the end of the algorithm, the resulting route is a lot shorter than we would get by choosing the next city at random.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nnearest_neighbor_tsp\n(\ndistances\n)\n:\n\nn\n=\n\nlen\n(\ndistances\n)\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nn\nroute\n=\n\n[\n0\n]\n\nvisited\n[\n0\n]\n\n=\n\nTrue\n\ntotal_distance\n=\n\n0\n\n\n\nfor\n_\nin\n\nrange\n(\n1\n,\nn\n)\n:\n\nlast\n=\nroute\n[\n-\n1\n]\n\nnearest\n=\n\nNone\n\nmin_dist\n=\n\nfloat\n(\n'inf'\n)\n\n\nfor\ni\nin\n\nrange\n(\nn\n)\n:\n\n\nif\n\nnot\nvisited\n[\ni\n]\n\nand\ndistances\n[\nlast\n]\n[\ni\n]\n\n<\nmin_dist\n:\n\nmin_dist\n=\ndistances\n[\nlast\n]\n[\ni\n]\n\nnearest\n=\ni\nroute\n.\nappend\n(\nnearest\n)\n\nvisited\n[\nnearest\n]\n\n=\n\nTrue\n\ntotal_distance\n+=\nmin_dist\n\ntotal_distance\n+=\ndistances\n[\nroute\n[\n-\n1\n]\n]\n[\n0\n]\n\nroute\n.\nappend\n(\n0\n)\n\n\nreturn\nroute\n,\ntotal_distance\n\ndistances\n=\n\n[\n\n\n[\n0\n,\n\n2\n,\n\n2\n,\n\n5\n,\n\n9\n,\n\n3\n]\n,\n\n\n[\n2\n,\n\n0\n,\n\n4\n,\n\n6\n,\n\n7\n,\n\n8\n]\n,\n\n\n[\n2\n,\n\n4\n,\n\n0\n,\n\n8\n,\n\n6\n,\n\n3\n]\n,\n\n\n[\n5\n,\n\n6\n,\n\n8\n,\n\n0\n,\n\n4\n,\n\n9\n]\n,\n\n\n[\n9\n,\n\n7\n,\n\n6\n,\n\n4\n,\n\n0\n,\n\n10\n]\n,\n\n\n[\n3\n,\n\n8\n,\n\n3\n,\n\n9\n,\n\n10\n,\n\n0\n]\n\n\n]\n\n\nroute\n,\ntotal_distance\n=\nnearest_neighbor_tsp\n(\ndistances\n)\n\n\nprint\n(\n\"Route:\"\n,\nroute\n)\n\n\nprint\n(\n\"Total distance:\"\n,\ntotal_distance\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">nearest_neighbor_tsp</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n    route <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    visited<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    total_distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        last <span class=\"token operator\">=</span> route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nearest <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        min_dist <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_dist<span class=\"token punctuation\">:</span>\n                min_dist <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                nearest <span class=\"token operator\">=</span> i\n        route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nearest<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        total_distance <span class=\"token operator\">+=</span> min_dist\n\n    total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> route<span class=\"token punctuation\">,</span> total_distance\n\ndistances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\nroute<span class=\"token punctuation\">,</span> total_distance <span class=\"token operator\">=</span> nearest_neighbor_tsp<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Route:\"</span><span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total distance:\"</span><span class=\"token punctuation\">,</span> total_distance<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Other Algorithms That Find Near-Optimal Solutions to The Traveling Salesman Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In addition to using a greedy algorithm to solve the Traveling Salesman Problem, there are also other algorithms that can find approximations to the shortest route.",
      "html": "<p>In addition to using a greedy algorithm to solve the Traveling Salesman Problem, there are also other algorithms that can find approximations to the shortest route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These algorithms are popular because they are much more effective than to actually check all possible solutions, but as with the greedy algorithm above, they do not find the overall shortest route.",
      "html": "<p>These algorithms are popular because they are much more effective than to actually check all possible solutions, but as with the greedy algorithm above, they do not find the overall shortest route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Algorithms used to find a near-optimal solution to the Traveling Salesman Problem include:",
      "html": "<p>Algorithms used to find a near-optimal solution to the Traveling Salesman Problem include:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Time Complexity for Solving The Traveling Salesman Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To get a near-optimal solution fast, we can use a greedy algorithm that just goes to the nearest unvisited city in each step, like in the second simulation on this page.",
      "html": "<p>To get a near-optimal solution fast, we can use a greedy algorithm that just goes to the nearest unvisited city in each step, like in the second simulation on this page.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Solving The Traveling Salesman Problem in a greedy way like that, means that at each step, the distances from the current city to all other unvisited cities are compared, and that gives us a time complexity of O ( n 2 ) O ( n 2 ) .",
      "html": "<p>Solving The Traveling Salesman Problem in a greedy way like that, means that at each step, the distances from the current city to all other unvisited cities are compared, and that gives us a time complexity of <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-4-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-33\"><span class=\"mjx-mrow\" id=\"MJXc-Node-34\"><span class=\"mjx-mi\" id=\"MJXc-Node-35\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-36\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-37\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-38\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.513em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-39\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-40\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But finding the shortest route of them all requires a lot more operations, and the time complexity for that is O ( n ! ) O ( n ! ) , like mentioned earlier, which means that for 4 cities, there are 4! possible routes, which is the same as 4 \u22c5 3 \u22c5 2 \u22c5 1 = 24 4 \u22c5 3 \u22c5 2 \u22c5 1 = 24 . And for just 12 cities for example, there are 12 ! = 12 \u22c5 11 \u22c5 10 \u22c5 . . . \u22c5 2 \u22c5 1 = 479 , 001 , 600 12 ! = 12 \u22c5 11 \u22c5 10 \u22c5 . . . \u22c5 2 \u22c5 1 = 479 , 001 , 600 possible routes!",
      "html": "<p>But finding the shortest route of them all requires a lot more operations, and the time complexity for that is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-5-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-41\"><span class=\"mjx-mrow\" id=\"MJXc-Node-42\"><span class=\"mjx-mi\" id=\"MJXc-Node-43\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-44\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-45\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-46\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-47\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>!</mo><mo stretchy=\"false\">)</mo></math></span></span>, like mentioned earlier, which means that for 4 cities, there are 4! possible routes, which is the same as <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;24&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-48\"><span class=\"mjx-mrow\" id=\"MJXc-Node-49\"><span class=\"mjx-mn\" id=\"MJXc-Node-50\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-51\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-52\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-53\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-54\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-55\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-56\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-57\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-58\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">24</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>4</mn><mo>\u22c5</mo><mn>3</mn><mo>\u22c5</mo><mn>2</mn><mo>\u22c5</mo><mn>1</mn><mo>=</mo><mn>24</mn></math></span></span>. And for just 12 cities for example, there are <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mspace width=\"thickmathspace\" /&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mspace width=\"thickmathspace\" /&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;479&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;001&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;600&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-59\"><span class=\"mjx-mrow\" id=\"MJXc-Node-60\"><span class=\"mjx-mn\" id=\"MJXc-Node-61\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">12</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-62\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-63\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-64\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">12</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-65\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-66\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">11</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-67\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-68\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">10</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-69\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mspace\" id=\"MJXc-Node-70\" style=\"width: 0.278em; height: 0px;\"></span><span class=\"mjx-mo\" id=\"MJXc-Node-71\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: -0.165em; padding-bottom: 0.339em;\">.</span></span><span class=\"mjx-mo MJXc-space1\" id=\"MJXc-Node-72\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: -0.165em; padding-bottom: 0.339em;\">.</span></span><span class=\"mjx-mo MJXc-space1\" id=\"MJXc-Node-73\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: -0.165em; padding-bottom: 0.339em;\">.</span></span><span class=\"mjx-mspace\" id=\"MJXc-Node-74\" style=\"width: 0.278em; height: 0px;\"></span><span class=\"mjx-mo MJXc-space1\" id=\"MJXc-Node-75\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-76\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-77\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-78\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-79\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-80\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">479</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-81\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: -0.165em; padding-bottom: 0.563em;\">,</span></span><span class=\"mjx-mn MJXc-space1\" id=\"MJXc-Node-82\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">001</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-83\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"margin-top: -0.165em; padding-bottom: 0.563em;\">,</span></span><span class=\"mjx-mn MJXc-space1\" id=\"MJXc-Node-84\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">600</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>12</mn><mo>!</mo><mo>=</mo><mn>12</mn><mo>\u22c5</mo><mn>11</mn><mo>\u22c5</mo><mn>10</mn><mo>\u22c5</mo><mspace width=\"thickmathspace\"></mspace><mo>.</mo><mo>.</mo><mo>.</mo><mspace width=\"thickmathspace\"></mspace><mo>\u22c5</mo><mn>2</mn><mo>\u22c5</mo><mn>1</mn><mo>=</mo><mn>479</mn><mo>,</mo><mn>001</mn><mo>,</mo><mn>600</mn></math></span></span> possible routes!</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "See the time complexity for the greedy algorithm O ( n 2 ) O ( n 2 ) , versus the time complexity for finding the shortest route by comparing all routes O ( n ! ) O ( n ! ) , in the image below.",
      "html": "<p>See the time complexity for the greedy algorithm <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-85\"><span class=\"mjx-mrow\" id=\"MJXc-Node-86\"><span class=\"mjx-mi\" id=\"MJXc-Node-87\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-88\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-89\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-90\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.513em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-91\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-92\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></math></span></span>, versus the time complexity for finding the shortest route by comparing all routes <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-93\"><span class=\"mjx-mrow\" id=\"MJXc-Node-94\"><span class=\"mjx-mi\" id=\"MJXc-Node-95\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-96\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-97\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-98\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-99\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>!</mo><mo stretchy=\"false\">)</mo></math></span></span>, in the image below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But there are two things we can do to reduce the number of routes we need to check.",
      "html": "<p>But there are two things we can do to reduce the number of routes we need to check.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the Traveling Salesman Problem, the route starts and ends in the same place, which makes a cycle. This means that the length of the shortest route will be the same no matter which city we start in. That is why we have chosen a fixed city to start in for the simulation above, and that reduces the number of possible routes from n ! n ! to ( n \u2212 1 ) ! ( n \u2212 1 ) ! .",
      "html": "<p>In the Traveling Salesman Problem, the route starts and ends in the same place, which makes a cycle. This means that the length of the shortest route will be the same no matter which city we start in. That is why we have chosen a fixed city to start in for the simulation above, and that reduces the number of possible routes from <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-10-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-100\"><span class=\"mjx-mrow\" id=\"MJXc-Node-101\"><span class=\"mjx-mi\" id=\"MJXc-Node-102\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-103\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi><mo>!</mo></math></span></span> to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-11-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-104\"><span class=\"mjx-mrow\" id=\"MJXc-Node-105\"><span class=\"mjx-mo\" id=\"MJXc-Node-106\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-107\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-108\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">\u2212</span></span><span class=\"mjx-mn MJXc-space2\" id=\"MJXc-Node-109\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-110\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-111\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>n</mi><mo>\u2212</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>!</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also, because these routes go in cycles, a route has the same distance if we go in one direction or the other, so we actually just need to check the distance of half of the routes, because the other half will just be the same routes in the opposite direction, so the number of routes we need to check is actually ( n \u2212 1 ) ! 2 ( n \u2212 1 ) ! 2 .",
      "html": "<p>Also, because these routes go in cycles, a route has the same distance if we go in one direction or the other, so we actually just need to check the distance of half of the routes, because the other half will just be the same routes in the opposite direction, so the number of routes we need to check is actually <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;/mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;/math&gt;' id=\"MathJax-Element-12-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-112\"><span class=\"mjx-mrow\" id=\"MJXc-Node-113\"><span class=\"mjx-mfrac\" id=\"MJXc-Node-114\"><span class=\"mjx-box MJXc-stacked\" style=\"width: 2.216em; padding: 0px 0.12em;\"><span class=\"mjx-numerator\" style=\"font-size: 70.7%; width: 3.134em; top: -1.644em;\"><span class=\"mjx-mrow\" id=\"MJXc-Node-115\" style=\"\"><span class=\"mjx-mo\" id=\"MJXc-Node-116\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-117\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-118\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">\u2212</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-119\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-120\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-121\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span></span></span><span class=\"mjx-denominator\" style=\"font-size: 70.7%; width: 3.134em; bottom: -0.603em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-122\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-line\" style=\"border-bottom: 1.3px solid; top: -0.285em; width: 2.216em;\"></span></span><span class=\"mjx-vsize\" style=\"height: 1.589em; vertical-align: -0.426em;\"></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>\u2212</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>!</mo></mrow><mn>2</mn></mfrac></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But even if we can reduce the number of routes we need to check to ( n \u2212 1 ) ! 2 ( n \u2212 1 ) ! 2 , the time complexity is still O ( n ! ) O ( n ! ) , because for very big n n , reducing n n by one and dividing by 2 does not make a significant change in how the time complexity grows when n n is increased.",
      "html": "<p>But even if we can reduce the number of routes we need to check to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;/mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;/math&gt;' id=\"MathJax-Element-13-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-123\"><span class=\"mjx-mrow\" id=\"MJXc-Node-124\"><span class=\"mjx-mfrac\" id=\"MJXc-Node-125\"><span class=\"mjx-box MJXc-stacked\" style=\"width: 2.216em; padding: 0px 0.12em;\"><span class=\"mjx-numerator\" style=\"font-size: 70.7%; width: 3.134em; top: -1.644em;\"><span class=\"mjx-mrow\" id=\"MJXc-Node-126\" style=\"\"><span class=\"mjx-mo\" id=\"MJXc-Node-127\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-128\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-129\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">\u2212</span></span><span class=\"mjx-mn\" id=\"MJXc-Node-130\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-131\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-132\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span></span></span><span class=\"mjx-denominator\" style=\"font-size: 70.7%; width: 3.134em; bottom: -0.603em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-133\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-line\" style=\"border-bottom: 1.3px solid; top: -0.285em; width: 2.216em;\"></span></span><span class=\"mjx-vsize\" style=\"height: 1.589em; vertical-align: -0.426em;\"></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>\u2212</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>!</mo></mrow><mn>2</mn></mfrac></math></span></span>, the time complexity is still <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-14-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-134\"><span class=\"mjx-mrow\" id=\"MJXc-Node-135\"><span class=\"mjx-mi\" id=\"MJXc-Node-136\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-137\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-138\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-139\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-140\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>!</mo><mo stretchy=\"false\">)</mo></math></span></span>, because for very big <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-15-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-141\"><span class=\"mjx-mrow\" id=\"MJXc-Node-142\"><span class=\"mjx-mi\" id=\"MJXc-Node-143\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>, reducing <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-16-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-144\"><span class=\"mjx-mrow\" id=\"MJXc-Node-145\"><span class=\"mjx-mi\" id=\"MJXc-Node-146\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> by one and dividing by 2 does not make a significant change in how the time complexity grows when <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-17-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-147\"><span class=\"mjx-mrow\" id=\"MJXc-Node-148\"><span class=\"mjx-mi\" id=\"MJXc-Node-149\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> is increased.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "this page",
          "href": "https://www.w3schools.com/dsa_timecomplexity_theory.php",
          "title": ""
        }
      ],
      "text": "To better understand how time complexity works, go to this page .",
      "html": "<p>To better understand how time complexity works, go to <a href=\"dsa_timecomplexity_theory.php\">this page</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Actual Traveling Salesman Problems Are More Complex",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The edge weight in a graph in this context of The Traveling Salesman Problem tells us how hard it is to go from one point to another, and it is the total edge weight of a route we want to minimize.",
      "html": "<p>The edge weight in a graph in this context of The Traveling Salesman Problem tells us how hard it is to go from one point to another, and it is the total edge weight of a route we want to minimize.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So far on this page, the edge weight has been the distance in a straight line between two points. And that makes it much easier to explain the Traveling Salesman Problem, and to display it.",
      "html": "<p>So far on this page, the edge weight has been the distance in a straight line between two points. And that makes it much easier to explain the Traveling Salesman Problem, and to display it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But in the real world there are many other things that affects the edge weight:",
      "html": "<p>But in the real world there are many other things that affects the edge weight:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see, just using the straight line distances as the edge weights, might be too simple compared to the real problem. And solving the Traveling Salesman Problem for such a simplified problem model would probably give us a solution that is not optimal in a practical sense.",
      "html": "<p>As you can see, just using the straight line distances as the edge weights, might be too simple compared to the real problem. And solving the Traveling Salesman Problem for such a simplified problem model would probably give us a solution that is not optimal in a practical sense.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is not easy to visualize a Traveling Salesman Problem when the edge length is not just the straight line distance between two points anymore, but the computer handles that very well.",
      "html": "<p>It is not easy to visualize a Traveling Salesman Problem when the edge length is not just the straight line distance between two points anymore, but the computer handles that very well.</p>"
    }
  ]
}