{
  "title": "DSA Binary Trees",
  "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Binary Trees",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes, a left child node and a right child node.",
      "html": "<p>A Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes, a left child node and a right child node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This restriction, that a node can have a maximum of two child nodes, gives us many benefits:",
      "html": "<p>This restriction, that a node can have a maximum of two child nodes, gives us many benefits:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the animation below to see how a Binary Tree looks, and what words we use to describe it.",
      "html": "<p>Use the animation below to see how a Binary Tree looks, and what words we use to describe it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Binary Tree",
      "html": "<p><label><input checked=\"\" name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"all\"/>The Binary Tree</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Root node",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"root\"/>Root node</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A's left child",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"aLeft\"/>A's left child</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A's right child",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"aRight\"/>A's right child</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "B's subtree",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"bSubtree\"/>B's subtree</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tree size (n=8)",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"nodes\"/>Tree size (n=8)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tree height (h=3)",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"height\"/>Tree height (h=3)</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Child nodes",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"children\"/>Child nodes</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Parent/internal nodes",
      "html": "<p><label><input name=\"rbgTree\" onchange=\"showTree(this.value)\" type=\"radio\" value=\"parents\"/>Parent/internal nodes</label></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A parent node, or internal node, in a Binary Tree is a node with one or two child nodes.",
      "html": "<p>A <strong>parent</strong> node, or <strong>internal</strong> node, in a Binary Tree is a node with one or two <strong>child</strong> nodes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The left child node is the child node to the left.",
      "html": "<p>The <strong>left child node</strong> is the child node to the left.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The right child node is the child node to the right.",
      "html": "<p>The <strong>right child node</strong> is the child node to the right.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The tree height is the maximum number of edges from the root node to a leaf node.",
      "html": "<p>The <strong>tree height</strong> is the maximum number of edges from the root node to a leaf node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Trees vs Arrays and Linked Lists",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Benefits of Binary Trees over Arrays and Linked Lists:",
      "html": "<p>Benefits of Binary Trees over Arrays and Linked Lists:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will take a closer look at how Binary Search Trees (BSTs) and AVL Trees work on the next two pages, but first let's look at how a Binary Tree can be implemented, and how it can be traversed.",
      "html": "<p>We will take a closer look at how Binary Search Trees (BSTs) and AVL Trees work on the next two pages, but first let's look at how a Binary Tree can be implemented, and how it can be traversed.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Types of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.",
      "html": "<p>There are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.",
      "html": "<p>The different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.",
      "html": "<p>Below are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A balanced Binary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.",
      "html": "<p>A <strong>balanced</strong> Binary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A complete Binary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.",
      "html": "<p>A <strong>complete</strong> Binary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A full Binary Tree is a kind of tree where each node has either 0 or 2 child nodes.",
      "html": "<p>A <strong>full</strong> Binary Tree is a kind of tree where each node has either 0 or 2 child nodes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A perfect Binary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.",
      "html": "<p>A <strong>perfect</strong> Binary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Tree Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's implement this Binary Tree:",
      "html": "<p>Let's implement this Binary Tree:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Singly Linked List",
          "href": "https://www.w3schools.com/dsa_data_linkedlists_types.php#singlyImpl",
          "title": ""
        }
      ],
      "text": "The Binary Tree above can be implemented much like we implemented a Singly Linked List , except that instead of linking each node to one next node, we create a structure where each node can be linked to both its left and right child nodes.",
      "html": "<p>The Binary Tree above can be implemented much like we implemented a <a href=\"dsa_data_linkedlists_types.php#singlyImpl\">Singly Linked List</a>, except that instead of linking each node to one next node, we create a structure where each node can be linked to both its left and right child nodes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how a Binary Tree can be implemented:",
      "html": "<p>This is how a Binary Tree can be implemented:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nTreeNode\n:\n\n\ndef\n\n__init__\n(\nself\n,\ndata\n)\n:\n\nself\n.\ndata\n=\ndata\nself\n.\nleft\n=\n\nNone\n\nself\n.\nright\n=\n\nNone\n\n\nroot\n=\nTreeNode\n(\n'R'\n)\n\nnodeA\n=\nTreeNode\n(\n'A'\n)\n\nnodeB\n=\nTreeNode\n(\n'B'\n)\n\nnodeC\n=\nTreeNode\n(\n'C'\n)\n\nnodeD\n=\nTreeNode\n(\n'D'\n)\n\nnodeE\n=\nTreeNode\n(\n'E'\n)\n\nnodeF\n=\nTreeNode\n(\n'F'\n)\n\nnodeG\n=\nTreeNode\n(\n'G'\n)\n\n\nroot\n.\nleft\n=\nnodeA\nroot\n.\nright\n=\nnodeB\n\nnodeA\n.\nleft\n=\nnodeC\nnodeA\n.\nright\n=\nnodeD\n\nnodeB\n.\nleft\n=\nnodeE\nnodeB\n.\nright\n=\nnodeF\n\nnodeF\n.\nleft\n=\nnodeG\n\n\n# Test\n\n\nprint\n(\n\"root.right.left.data:\"\n,\nroot\n.\nright\n.\nleft\n.\ndata\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span>\nnodeA <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nnodeB <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nnodeC <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\nnodeD <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\nnodeE <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\nnodeF <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\nnodeG <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeA\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeB\n\nnodeA<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeC\nnodeA<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeD\n\nnodeB<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeE\nnodeB<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeF\n\nnodeF<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeG\n\n<span class=\"token comment\"># Test</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root.right.left.data:\"</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Tree Traversal",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Going through a Tree by visiting every node, one node at a time, is called traversal.",
      "html": "<p>Going through a Tree by visiting every node, one node at a time, is called traversal.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the next until you have visited them all.",
      "html": "<p>Since Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the next until you have visited them all.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.",
      "html": "<p>But since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are two main categories of Tree traversal methods:",
      "html": "<p>There are two main categories of Tree traversal methods:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Breadth First Search (BFS) is when the nodes on the same level are visited before going to the next level in the tree. This means that the tree is explored in a more sideways direction.",
      "html": "<p><strong>Breadth First Search (BFS)</strong> is when the nodes on the same level are visited before going to the next level in the tree. This means that the tree is explored in a more sideways direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Depth First Search (DFS) is when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.",
      "html": "<p><strong>Depth First Search (DFS)</strong> is when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are three different types of DFS traversals:",
      "html": "<p>There are three different types of DFS traversals:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These three Depth First Search traversals are described in detail on the next pages.",
      "html": "<p>These three Depth First Search traversals are described in detail on the next pages.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "DSA Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In a Binary Tree data structure, like the one below:",
      "html": "<p>In a Binary Tree data structure, like the one below:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is the relationship between node B and nodes E and F?",
      "html": "<p>What is the relationship between node B and nodes E and F?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "Node E is B's\nchild node,\nand node F is B's\nchild node.",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\">Node E is B's <input maxlength=\"5\" name=\"ex1\" style=\"width: 6ch;\"/> child node, \nand node F is B's <input maxlength=\"5\" name=\"ex2\" style=\"width: 6ch;\"/> child node.\n</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_data_binarytrees1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_data_binarytrees1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}