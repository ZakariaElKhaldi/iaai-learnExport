{
  "title": "DSA Edmonds-Karp Algorithm",
  "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Edmonds-Karp Algorithm",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm solves the maximum flow problem.",
      "html": "<p>The Edmonds-Karp algorithm solves the maximum flow problem.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.",
      "html": "<p>Finding the maximum flow can be helpful in many areas: for optimizing network traffic, for manufacturing, for supply chain and logistics, or for airline scheduling.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Edmonds-Karp Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "the maximum flow problem",
          "href": "https://www.w3schools.com/dsa_theory_graphs_maxflow.php",
          "title": ""
        }
      ],
      "text": "The Edmonds-Karp algorithm solves the maximum flow problem for a directed graph.",
      "html": "<p>The Edmonds-Karp algorithm solves <a href=\"dsa_theory_graphs_maxflow.php\">the maximum flow problem</a> for a directed graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow comes from a source vertex ( s s ) and ends up in a sink vertex ( t t ), and each edge in the graph allows a flow, limited by a capacity.",
      "html": "<p>The flow comes from a source vertex (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>) and ends up in a sink vertex (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-4\"><span class=\"mjx-mrow\" id=\"MJXc-Node-5\"><span class=\"mjx-mi\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>), and each edge in the graph allows a flow, limited by a capacity.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "the Ford-Fulkerson algorithm",
          "href": "https://www.w3schools.com/dsa_algo_graphs_fordfulkerson.php",
          "title": ""
        },
        {
          "text": "Breadth First Search (BFS)",
          "href": "https://www.w3schools.com/dsa_algo_graphs_traversal.php#bfsTraversal",
          "title": ""
        }
      ],
      "text": "The Edmonds-Karp algorithm is very similar to the Ford-Fulkerson algorithm , except the Edmonds-Karp algorithm uses Breadth First Search (BFS) to find augmented paths to increase flow.",
      "html": "<p>The Edmonds-Karp algorithm is very similar to <a href=\"dsa_algo_graphs_fordfulkerson.php\">the Ford-Fulkerson algorithm</a>, except the Edmonds-Karp algorithm uses <a href=\"dsa_algo_graphs_traversal.php#bfsTraversal\">Breadth First Search (BFS)</a> to find augmented paths to increase flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Max flow: 0",
      "html": "<p>Max flow: 0</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm works by using Breadth-First Search (BFS) to find a path with available capacity from the source to the sink (called an augmented path ), and then sends as much flow as possible through that path.",
      "html": "<p>The Edmonds-Karp algorithm works by using Breadth-First Search (BFS) to find a path with available capacity from the source to the sink (called an <i>augmented path</i>), and then sends as much flow as possible through that path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm continues to find new paths to send more flow through until the maximum flow is reached.",
      "html": "<p>The Edmonds-Karp algorithm continues to find new paths to send more flow through until the maximum flow is reached.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the simulation above, the Edmonds-Karp algorithm solves the maximum flow problem: It finds out how much flow can be sent from the source vertex s s , to the sink vertex t t , and that maximum flow is 8.",
      "html": "<p>In the simulation above, the Edmonds-Karp algorithm solves the maximum flow problem: It finds out how much flow can be sent from the source vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-3-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-7\"><span class=\"mjx-mrow\" id=\"MJXc-Node-8\"><span class=\"mjx-mi\" id=\"MJXc-Node-9\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>, to the sink vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-4-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-10\"><span class=\"mjx-mrow\" id=\"MJXc-Node-11\"><span class=\"mjx-mi\" id=\"MJXc-Node-12\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>, and that maximum flow is 8.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numbers in the simulation above are written in fractions, where the first number is the flow, and the second number is the capacity (maximum possible flow in that edge). So for example, 0/7 on edge s \u2192 v 2 s \u2192 v 2 , means there is 0 flow, with a capacity of 7 on that edge.",
      "html": "<p>The numbers in the simulation above are written in fractions, where the first number is the flow, and the second number is the capacity (maximum possible flow in that edge). So for example, <code>0/7</code> on edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-5-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-13\"><span class=\"mjx-mrow\" id=\"MJXc-Node-14\"><span class=\"mjx-mi\" id=\"MJXc-Node-15\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-16\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-17\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-18\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-19\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub></math></span></span>, means there is <code>0</code> flow, with a capacity of <code>7</code> on that edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can see the basic step-by-step description of how the Edmonds-Karp algorithm works below, but we need to go into more detail later to actually understand it.",
      "html": "<p>You can see the basic step-by-step description of how the Edmonds-Karp algorithm works below, but we need to go into more detail later to actually understand it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Residual Network in Edmonds-Karp",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm works by creating and using something called a residual network , which is a representation of the original graph.",
      "html": "<p>The Edmonds-Karp algorithm works by creating and using something called a <i>residual network</i>, which is a representation of the original graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the residual network, every edge has a residual capacity , which is the original capacity of the edge, minus the the flow in that edge. The residual capacity can be seen as the leftover capacity in an edge with some flow.",
      "html": "<p>In the residual network, every edge has a <i>residual capacity</i>, which is the original capacity of the edge, minus the the flow in that edge. The residual capacity can be seen as the leftover capacity in an edge with some flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example, if there is a flow of 2 in the v 3 \u2192 v 4 v 3 \u2192 v 4 edge, and the capacity is 3, the residual flow is 1 in that edge, because there is room for sending 1 more unit of flow through that edge.",
      "html": "<p>For example, if there is a flow of 2 in the <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-20\"><span class=\"mjx-mrow\" id=\"MJXc-Node-21\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-22\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-23\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-24\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-25\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-26\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-27\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-28\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> edge, and the capacity is 3, the residual flow is 1 in that edge, because there is room for sending 1 more unit of flow through that edge.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reversed Edges in Edmonds-Karp",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm also uses something called reversed edges to send flow back. This is useful to increase the total flow.",
      "html": "<p>The Edmonds-Karp algorithm also uses something called <i>reversed edges</i> to send flow back. This is useful to increase the total flow.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To send flow back, in the opposite direction of the edge, a reverse edge is created for each original edge in the network. The Edmonds-Karp algorithm can then use these reverse edges to send flow in the reverse direction.",
      "html": "<p>To send flow back, in the opposite direction of the edge, a reverse edge is created for each original edge in the network. The Edmonds-Karp algorithm can then use these reverse edges to send flow in the reverse direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A reversed edge has no flow or capacity, just residual capacity. The residual capacity for a reversed edge is always the same as the flow in the corresponding original edge.",
      "html": "<p>A reversed edge has no flow or capacity, just residual capacity. The residual capacity for a reversed edge is always the same as the flow in the corresponding original edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In our example, the edge v 1 \u2192 v 3 v 1 \u2192 v 3 has a flow of 2, which means there is a residual capacity of 2 on the corresponding reversed edge v 3 \u2192 v 1 v 3 \u2192 v 1 .",
      "html": "<p>In our example, the edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-29\"><span class=\"mjx-mrow\" id=\"MJXc-Node-30\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-31\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-32\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-33\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-34\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-35\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-36\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-37\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub></math></span></span> has a flow of 2, which means there is a residual capacity of 2 on the corresponding reversed edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-38\"><span class=\"mjx-mrow\" id=\"MJXc-Node-39\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-40\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-41\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-42\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-43\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-44\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-45\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-46\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This just means that when there is a flow of 2 on the original edge v 1 \u2192 v 3 v 1 \u2192 v 3 , there is a possibility of sending that same amount of flow back on that edge, but in the reversed direction. Using a reversed edge to push back flow can also be seen as undoing a part of the flow that is already created.",
      "html": "<p>This just means that when there is a flow of 2 on the original edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-47\"><span class=\"mjx-mrow\" id=\"MJXc-Node-48\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-49\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-50\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-51\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-52\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-53\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-54\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-55\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub></math></span></span>, there is a possibility of sending that same amount of flow back on that edge, but in the reversed direction. Using a reversed edge to push back flow can also be seen as undoing a part of the flow that is already created.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The idea of a residual network with residual capacity on edges, and the idea of reversed edges, are central to how the Edmonds-Karp algorithm works, and we will go into more detail about this when we implement the algorithm further down on this page.",
      "html": "<p>The idea of a residual network with residual capacity on edges, and the idea of reversed edges, are central to how the Edmonds-Karp algorithm works, and we will go into more detail about this when we implement the algorithm further down on this page.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Manual Run Through",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There is no flow in the graph to start with.",
      "html": "<p>There is no flow in the graph to start with.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Edmonds-Karp algorithm starts with using Breadth-First Search to find an augmented path where flow can be increased, which is s \u2192 v 1 \u2192 v 3 \u2192 t s \u2192 v 1 \u2192 v 3 \u2192 t .",
      "html": "<p>The Edmonds-Karp algorithm starts with using Breadth-First Search to find an augmented path where flow can be increased, which is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-10-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-56\"><span class=\"mjx-mrow\" id=\"MJXc-Node-57\"><span class=\"mjx-mi\" id=\"MJXc-Node-58\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-59\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-60\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-61\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-62\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-63\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-64\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-65\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-66\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">3</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-67\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-68\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>3</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After finding the augmented path, a bottleneck calculation is done to find how much flow can be sent through that path, and that flow is: 2.",
      "html": "<p>After finding the augmented path, a bottleneck calculation is done to find how much flow can be sent through that path, and that flow is: 2.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So a flow of 2 is sent over each edge in the augmented path.",
      "html": "<p>So a flow of 2 is sent over each edge in the augmented path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next iteration of the Edmonds-Karp algorithm is to do these steps again: Find a new augmented path, find how much the flow in that path can be increased, and increase the flow along the edges in that path accordingly.",
      "html": "<p>The next iteration of the Edmonds-Karp algorithm is to do these steps again: Find a new augmented path, find how much the flow in that path can be increased, and increase the flow along the edges in that path accordingly.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next augmented path is found to be s \u2192 v 1 \u2192 v 4 \u2192 t s \u2192 v 1 \u2192 v 4 \u2192 t .",
      "html": "<p>The next augmented path is found to be <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-11-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-69\"><span class=\"mjx-mrow\" id=\"MJXc-Node-70\"><span class=\"mjx-mi\" id=\"MJXc-Node-71\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-72\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-73\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-74\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-75\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-76\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-77\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-78\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-79\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-80\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-81\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can only be increased by 1 in this path because there is only room for one more unit of flow in the s \u2192 v 1 s \u2192 v 1 edge.",
      "html": "<p>The flow can only be increased by 1 in this path because there is only room for one more unit of flow in the <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-12-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-82\"><span class=\"mjx-mrow\" id=\"MJXc-Node-83\"><span class=\"mjx-mi\" id=\"MJXc-Node-84\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-85\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-86\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-87\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-88\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub></math></span></span> edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next augmented path is found to be s \u2192 v 2 \u2192 v 4 \u2192 t s \u2192 v 2 \u2192 v 4 \u2192 t .",
      "html": "<p>The next augmented path is found to be <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-13-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-89\"><span class=\"mjx-mrow\" id=\"MJXc-Node-90\"><span class=\"mjx-mi\" id=\"MJXc-Node-91\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-92\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-93\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-94\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-95\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-96\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-97\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-98\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-99\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-100\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-101\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can be increased by 3 in this path. The bottleneck (limiting edge) is v 2 \u2192 v 4 v 2 \u2192 v 4 because the capacity is 3.",
      "html": "<p>The flow can be increased by 3 in this path. The bottleneck (limiting edge) is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;/math&gt;' id=\"MathJax-Element-14-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-102\"><span class=\"mjx-mrow\" id=\"MJXc-Node-103\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-104\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-105\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-106\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-107\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-108\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-109\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-110\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub></math></span></span> because the capacity is 3.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The last augmented path found is s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 t s \u2192 v 2 \u2192 v 1 \u2192 v 4 \u2192 t .",
      "html": "<p>The last augmented path found is <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-15-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-111\"><span class=\"mjx-mrow\" id=\"MJXc-Node-112\"><span class=\"mjx-mi\" id=\"MJXc-Node-113\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-114\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-115\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-116\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-117\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-118\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-119\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-120\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-121\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-122\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-msubsup MJXc-space3\" id=\"MJXc-Node-123\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-124\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-125\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-126\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-127\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>2</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>1</mn></msub><mo stretchy=\"false\">\u2192</mo><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The flow can only be increased by 2 in this path because of edge v 4 \u2192 t v 4 \u2192 t being the bottleneck in this path with only space for 2 more units of flow ( c a p a c i t y \u2212 f l o w = 1 c a p a c i t y \u2212 f l o w = 1 ).",
      "html": "<p>The flow can only be increased by 2 in this path because of edge <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;msub&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\"&gt;&amp;#x2192;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-16-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-128\"><span class=\"mjx-mrow\" id=\"MJXc-Node-129\"><span class=\"mjx-msubsup\" id=\"MJXc-Node-130\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-131\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">v</span></span></span><span class=\"mjx-sub\" style=\"font-size: 70.7%; vertical-align: -0.212em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-132\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">4</span></span></span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-133\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.227em; padding-bottom: 0.339em;\">\u2192</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-134\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>v</mi><mn>4</mn></msub><mo stretchy=\"false\">\u2192</mo><mi>t</mi></math></span></span> being the bottleneck in this path with only space for 2 more units of flow (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;' id=\"MathJax-Element-17-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-135\"><span class=\"mjx-mrow\" id=\"MJXc-Node-136\"><span class=\"mjx-mi\" id=\"MJXc-Node-137\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">c</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-138\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">a</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-139\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.451em;\">p</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-140\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">a</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-141\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">c</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-142\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">i</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-143\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-144\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.507em; padding-right: 0.006em;\">y</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-145\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">\u2212</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-146\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.507em; padding-right: 0.06em;\">f</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-147\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em;\">l</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-148\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">o</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-149\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">w</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-150\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mn MJXc-space3\" id=\"MJXc-Node-151\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">1</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi><mi>a</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>\u2212</mo><mi>f</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo>=</mo><mn>1</mn></math></span></span>).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "At this point, a new augmenting path cannot be found (it is not possible to find a path where more flow can be sent through from s s to t t ), which means the max flow has been found, and the Edmonds-Karp algorithm is finished.",
      "html": "<p>At this point, a new augmenting path cannot be found (it is not possible to find a path where more flow can be sent through from <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-18-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-152\"><span class=\"mjx-mrow\" id=\"MJXc-Node-153\"><span class=\"mjx-mi\" id=\"MJXc-Node-154\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span> to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-19-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-155\"><span class=\"mjx-mrow\" id=\"MJXc-Node-156\"><span class=\"mjx-mi\" id=\"MJXc-Node-157\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>), which means the max flow has been found, and the Edmonds-Karp algorithm is finished.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The maximum flow is 8. As you can see in the image above, the flow (8) is the same going out of the source vertex s s , as the flow going into the sink vertex t t .",
      "html": "<p>The maximum flow is 8. As you can see in the image above, the flow (8) is the same going out of the source vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-20-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-158\"><span class=\"mjx-mrow\" id=\"MJXc-Node-159\"><span class=\"mjx-mi\" id=\"MJXc-Node-160\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span>, as the flow going into the sink vertex <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-21-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-161\"><span class=\"mjx-mrow\" id=\"MJXc-Node-162\"><span class=\"mjx-mi\" id=\"MJXc-Node-163\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also, if you take any other vertex than s s or t t , you can see that the amount of flow going into a vertex, is the same as the flow going out of it. This is what we call conservation of flow , and this must hold for all such flow networks (directed graphs where each edge has a flow and a capacity).",
      "html": "<p>Also, if you take any other vertex than <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-22-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-164\"><span class=\"mjx-mrow\" id=\"MJXc-Node-165\"><span class=\"mjx-mi\" id=\"MJXc-Node-166\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">s</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>s</mi></math></span></span> or <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-23-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-167\"><span class=\"mjx-mrow\" id=\"MJXc-Node-168\"><span class=\"mjx-mi\" id=\"MJXc-Node-169\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.395em; padding-bottom: 0.283em;\">t</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></span></span>, you can see that the amount of flow going into a vertex, is the same as the flow going out of it. This is what we call <i>conservation of flow</i>, and this must hold for all such flow networks (directed graphs where each edge has a flow and a capacity).</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Implementation of The Edmonds-Karp Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement the Edmonds-Karp algorithm, we create a Graph class.",
      "html": "<p>To implement the Edmonds-Karp algorithm, we create a <code>Graph</code> class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Graph represents the graph with its vertices and edges:",
      "html": "<p>The <code>Graph</code> represents the graph with its vertices and edges:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n,\nc\n)\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\nc\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"3-5, 7-8, 10-12\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"3-5\" style=\"top: 45px; height: 66px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"7-8\" style=\"top: 133px; height: 44px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"10-12\" style=\"top: 199px; height: 66px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 3: We create the adj_matrix to hold all the edges and edge capacities. Initial values are set to 0 .",
      "html": "<p><strong>Line 3: </strong>We create the <code>adj_matrix</code> to hold all the edges and edge capacities. Initial values are set to <code>0</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 4: size is the number of vertices in the graph.",
      "html": "<p><strong>Line 4: </strong><code>size</code> is the number of vertices in the graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 5: The vertex_data holds the names of all the vertices.",
      "html": "<p><strong>Line 5: </strong>The <code>vertex_data</code> holds the names of all the vertices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 7-8: The add_edge method is used to add an edge from vertex u to vertex v , with capacity c .",
      "html": "<p><strong>Line 7-8: </strong>The <code>add_edge</code> method is used to add an edge from vertex <code>u</code> to vertex <code>v</code>, with capacity <code>c</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 10-12: The add_vertex_data method is used to add a vertex name to the graph. The index of the vertex is given with the vertex argument, and data is the name of the vertex.",
      "html": "<p><strong>Line 10-12: </strong>The <code>add_vertex_data</code> method is used to add a vertex name to the graph. The index of the vertex is given with the <code>vertex</code> argument, and <code>data</code> is the name of the vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Graph class also contains the bfs method to find augmented paths, using Breadth-First-Search:",
      "html": "<p>The <code>Graph</code> class also contains the <code>bfs</code> method to find augmented paths, using Breadth-First-Search:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nbfs\n(\nself\n,\ns\n,\nt\n,\nparent\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nqueue\n=\n\n[\n]\n\n# Using list as a queue\n\nqueue\n.\nappend\n(\ns\n)\n\nvisited\n[\ns\n]\n\n=\n\nTrue\n\n\n\nwhile\nqueue\n:\n\nu\n=\nqueue\n.\npop\n(\n0\n)\n\n# Pop from the start of the list\n\n\n\nfor\nind\n,\nval\nin\n\nenumerate\n(\nself\n.\nadj_matrix\n[\nu\n]\n)\n:\n\n\nif\n\nnot\nvisited\n[\nind\n]\n\nand\nval\n>\n\n0\n:\n\nqueue\n.\nappend\n(\nind\n)\n\nvisited\n[\nind\n]\n\n=\n\nTrue\n\nparent\n[\nind\n]\n\n=\nu\n\n\nreturn\nvisited\n[\nt\n]",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"15-18, 20-21, 23-27, 29\" data-line-offset=\"14\" data-start=\"14\" style=\"counter-reset: linenumber 13;\" tabindex=\"0\"><code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Using list as a queue</span>\n        queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Pop from the start of the list</span>\n\n            <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                    parent<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> visited<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"15-18\" style=\"top: 23px; height: 88px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"20-21\" style=\"top: 133px; height: 44px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"23-27\" style=\"top: 199px; height: 110px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"29\" style=\"top: 331px; height: 22px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 15-18: The visited array helps to avoid revisiting the same vertices during the search for an augmented path. The queue holds vertices to be explored, the search always starts with the source vertex s .",
      "html": "<p><strong>Line 15-18: </strong>The <code>visited</code> array helps to avoid revisiting the same vertices during the search for an augmented path. The <code>queue</code> holds vertices to be explored, the search always starts with the source vertex <code>s</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 20-21: As long as there are vertices to be explored in the queue , take the first vertex out of the queue so that a path can be found from there to the next vertex.",
      "html": "<p><strong>Line 20-21: </strong>As long as there are vertices to be explored in the <code>queue</code>, take the first vertex out of the <code>queue</code> so that a path can be found from there to the next vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 23: For every adjacent vertex to the current vertex.",
      "html": "<p><strong>Line 23: </strong>For every adjacent vertex to the current vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 24-27: If the adjacent vertex is not visited yet, and there is a residual capacity on the edge to that vertex: add it to the queue of vertices that needs to be explored, mark it as visited, and set the parent of the adjacent vertex to be the current vertex u .",
      "html": "<p><strong>Line 24-27: </strong>If the adjacent vertex is not visited yet, and there is a residual capacity on the edge to that vertex: add it to the queue of vertices that needs to be explored, mark it as visited, and set the <code>parent</code> of the adjacent vertex to be the current vertex <code>u</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The parent array holds the parent of a vertex, creating a path from the sink vertex, backwards to the source vertex. The parent is used later in the Edmonds-Karp algorithm, outside the bfs method, to increase flow in the augmented path.",
      "html": "<p>The <code>parent</code> array holds the parent of a vertex, creating a path from the sink vertex, backwards to the source vertex. The <code>parent</code> is used later in the Edmonds-Karp algorithm, outside the <code>bfs</code> method, to increase flow in the augmented path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 29: The last line returns visited[t] , which is true if the augmented path ends in the sink node t . Returning true means that an augmenting path has been found.",
      "html": "<p><strong>Line 29: </strong>The last line returns <code>visited[t]</code>, which is <code>true</code> if the augmented path ends in the sink node <code>t</code>. Returning <code>true</code> means that an augmenting path has been found.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The edmonds_karp method is the last method we add to the Graph class:",
      "html": "<p>The <code>edmonds_karp</code> method is the last method we add to the <code>Graph</code> class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "def\n\nedmonds_karp\n(\nself\n,\nsource\n,\nsink\n)\n:\n\nparent\n=\n\n[\n-\n1\n]\n\n*\nself\n.\nsize\nmax_flow\n=\n\n0\n\n\n\nwhile\nself\n.\nbfs\n(\nsource\n,\nsink\n,\nparent\n)\n:\n\npath_flow\n=\n\nfloat\n(\n\"Inf\"\n)\n\ns\n=\nsink\n\nwhile\n(\ns\n!=\nsource\n)\n:\n\npath_flow\n=\n\nmin\n(\npath_flow\n,\nself\n.\nadj_matrix\n[\nparent\n[\ns\n]\n]\n[\ns\n]\n)\n\ns\n=\nparent\n[\ns\n]\n\n\nmax_flow\n+=\npath_flow\nv\n=\nsink\n\nwhile\n(\nv\n!=\nsource\n)\n:\n\nu\n=\nparent\n[\nv\n]\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n-=\npath_flow\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n+=\npath_flow\nv\n=\nparent\n[\nv\n]\n\n\npath\n=\n\n[\n]\n\nv\n=\nsink\n\nwhile\n(\nv\n!=\nsource\n)\n:\n\npath\n.\nappend\n(\nv\n)\n\nv\n=\nparent\n[\nv\n]\n\npath\n.\nappend\n(\nsource\n)\n\npath\n.\nreverse\n(\n)\n\npath_names\n=\n\n[\nself\n.\nvertex_data\n[\nnode\n]\n\nfor\nnode\nin\npath\n]\n\n\nprint\n(\n\"Path:\"\n,\n\n\" -> \"\n.\njoin\n(\npath_names\n)\n,\n\n\", Flow:\"\n,\npath_flow\n)\n\n\n\nreturn\nmax_flow",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"35-40, 42, 44-48\" data-line-offset=\"31\" data-start=\"31\" style=\"counter-reset: linenumber 30;\" tabindex=\"0\"><code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">edmonds_karp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-while\">while</span> self<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                s <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span>\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n            path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n            path<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"35-40\" style=\"top: 89px; height: 132px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"42\" style=\"top: 243px; height: 22px; width: 789px;\"></div><div aria-hidden=\"true\" class=\"line-highlight\" data-range=\"44-48\" style=\"top: 287px; height: 110px; width: 789px;\"></div></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Initially, the parent array holds invalid index values, because there is no augmented path to begin with, and the max_flow is 0 , and the while loop keeps increasing the max_flow as long as there is an augmented path to increase flow in.",
      "html": "<p>Initially, the <code>parent</code> array holds invalid index values, because there is no augmented path to begin with, and the <code>max_flow</code> is <code>0</code>, and the <code>while</code> loop keeps increasing the <code>max_flow</code> as long as there is an augmented path to increase flow in.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 35: The outer while loop makes sure the Edmonds-Karp algorithm keeps increasing flow as long as there are augmented paths to increase flow along.",
      "html": "<p><strong>Line 35: </strong>The outer <code>while</code> loop makes sure the Edmonds-Karp algorithm keeps increasing flow as long as there are augmented paths to increase flow along.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 36-37: The initial flow along an augmented path is infinite, and the possible flow increase will be calculated starting with the sink vertex.",
      "html": "<p><strong>Line 36-37: </strong>The initial flow along an augmented path is infinite, and the possible flow increase will be calculated starting with the sink vertex.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 38-40: The value for path_flow is found by going backwards from the sink vertex towards the source vertex. The lowest value of residual capacity along the path is what decides how much flow can be sent on the path.",
      "html": "<p><strong>Line 38-40: </strong>The value for <code>path_flow</code> is found by going backwards from the sink vertex towards the source vertex. The lowest value of residual capacity along the path is what decides how much flow can be sent on the path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 42: path_flow is increased by the path_flow .",
      "html": "<p><strong>Line 42: </strong><code>path_flow</code> is increased by the <code>path_flow</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 44-48: Stepping through the augmented path, going backwards from sink to source, the residual capacity is decreased with the path_flow on the forward edges, and the residual capacity is increased with the path_flow on the reversed edges.",
      "html": "<p><strong>Line 44-48: </strong>Stepping through the augmented path, going backwards from sink to source, the residual capacity is decreased with the <code>path_flow</code> on the forward edges, and the residual capacity is increased with the <code>path_flow</code> on the reversed edges.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 50-58: This part of the code is just for printing so that we are able to track each time an augmented path is found, and how much flow is sent through that path.",
      "html": "<p><strong>Line 50-58: </strong>This part of the code is just for printing so that we are able to track each time an augmented path is found, and how much flow is sent through that path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After defining the Graph class, the vertices and edges must be defined to initialize the specific graph, and the complete code for the Edmonds-Karp algorithm example looks like this:",
      "html": "<p>After defining the <code>Graph</code> class, the vertices and edges must be defined to initialize the specific graph, and the complete code for the Edmonds-Karp algorithm example looks like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "line-numbers",
          "language-python"
        ],
        "isNotranslate": true
      },
      "code": "class\n\nGraph\n:\n\n\ndef\n\n__init__\n(\nself\n,\nsize\n)\n:\n\nself\n.\nadj_matrix\n=\n\n[\n[\n0\n]\n\n*\nsize\nfor\n_\nin\n\nrange\n(\nsize\n)\n]\n\nself\n.\nsize\n=\nsize\nself\n.\nvertex_data\n=\n\n[\n''\n]\n\n*\nsize\n\n\ndef\n\nadd_edge\n(\nself\n,\nu\n,\nv\n,\nc\n)\n:\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n=\nc\n\n\ndef\n\nadd_vertex_data\n(\nself\n,\nvertex\n,\ndata\n)\n:\n\n\nif\n\n0\n\n<=\nvertex\n<\nself\n.\nsize\n:\n\nself\n.\nvertex_data\n[\nvertex\n]\n\n=\ndata\n\n\ndef\n\nbfs\n(\nself\n,\ns\n,\nt\n,\nparent\n)\n:\n\nvisited\n=\n\n[\nFalse\n]\n\n*\nself\n.\nsize\nqueue\n=\n\n[\n]\n\n# Using list as a queue\n\nqueue\n.\nappend\n(\ns\n)\n\nvisited\n[\ns\n]\n\n=\n\nTrue\n\n\n\nwhile\nqueue\n:\n\nu\n=\nqueue\n.\npop\n(\n0\n)\n\n# Pop from the start of the list\n\n\n\nfor\nind\n,\nval\nin\n\nenumerate\n(\nself\n.\nadj_matrix\n[\nu\n]\n)\n:\n\n\nif\n\nnot\nvisited\n[\nind\n]\n\nand\nval\n>\n\n0\n:\n\nqueue\n.\nappend\n(\nind\n)\n\nvisited\n[\nind\n]\n\n=\n\nTrue\n\nparent\n[\nind\n]\n\n=\nu\n\n\nreturn\nvisited\n[\nt\n]\n\n\n\ndef\n\nedmonds_karp\n(\nself\n,\nsource\n,\nsink\n)\n:\n\nparent\n=\n\n[\n-\n1\n]\n\n*\nself\n.\nsize\nmax_flow\n=\n\n0\n\n\n\nwhile\nself\n.\nbfs\n(\nsource\n,\nsink\n,\nparent\n)\n:\n\npath_flow\n=\n\nfloat\n(\n\"Inf\"\n)\n\ns\n=\nsink\n\nwhile\n(\ns\n!=\nsource\n)\n:\n\npath_flow\n=\n\nmin\n(\npath_flow\n,\nself\n.\nadj_matrix\n[\nparent\n[\ns\n]\n]\n[\ns\n]\n)\n\ns\n=\nparent\n[\ns\n]\n\n\nmax_flow\n+=\npath_flow\nv\n=\nsink\n\nwhile\n(\nv\n!=\nsource\n)\n:\n\nu\n=\nparent\n[\nv\n]\n\nself\n.\nadj_matrix\n[\nu\n]\n[\nv\n]\n\n-=\npath_flow\nself\n.\nadj_matrix\n[\nv\n]\n[\nu\n]\n\n+=\npath_flow\nv\n=\nparent\n[\nv\n]\n\n\npath\n=\n\n[\n]\n\nv\n=\nsink\n\nwhile\n(\nv\n!=\nsource\n)\n:\n\npath\n.\nappend\n(\nv\n)\n\nv\n=\nparent\n[\nv\n]\n\npath\n.\nappend\n(\nsource\n)\n\npath\n.\nreverse\n(\n)\n\npath_names\n=\n\n[\nself\n.\nvertex_data\n[\nnode\n]\n\nfor\nnode\nin\npath\n]\n\n\nprint\n(\n\"Path:\"\n,\n\n\" -> \"\n.\njoin\n(\npath_names\n)\n,\n\n\", Flow:\"\n,\npath_flow\n)\n\n\n\nreturn\nmax_flow\n\n\n# Example usage:\n\ng\n=\nGraph\n(\n6\n)\n\nvertex_names\n=\n\n[\n's'\n,\n\n'v1'\n,\n\n'v2'\n,\n\n'v3'\n,\n\n'v4'\n,\n\n't'\n]\n\n\nfor\ni\n,\nname\nin\n\nenumerate\n(\nvertex_names\n)\n:\n\ng\n.\nadd_vertex_data\n(\ni\n,\nname\n)\n\n\ng\n.\nadd_edge\n(\n0\n,\n\n1\n,\n\n3\n)\n\n# s  -> v1, cap: 3\n\ng\n.\nadd_edge\n(\n0\n,\n\n2\n,\n\n7\n)\n\n# s  -> v2, cap: 7\n\ng\n.\nadd_edge\n(\n1\n,\n\n3\n,\n\n3\n)\n\n# v1 -> v3, cap: 3\n\ng\n.\nadd_edge\n(\n1\n,\n\n4\n,\n\n4\n)\n\n# v1 -> v4, cap: 4\n\ng\n.\nadd_edge\n(\n2\n,\n\n1\n,\n\n5\n)\n\n# v2 -> v1, cap: 5\n\ng\n.\nadd_edge\n(\n2\n,\n\n4\n,\n\n3\n)\n\n# v2 -> v4, cap: 3\n\ng\n.\nadd_edge\n(\n3\n,\n\n4\n,\n\n3\n)\n\n# v3 -> v4, cap: 3\n\ng\n.\nadd_edge\n(\n3\n,\n\n5\n,\n\n2\n)\n\n# v3 -> t,  cap: 2\n\ng\n.\nadd_edge\n(\n4\n,\n\n5\n,\n\n6\n)\n\n# v4 -> t,  cap: 6\n\n\nsource\n=\n\n0\n;\nsink\n=\n\n5\n\n\nprint\n(\n\"The maximum possible flow is %d \"\n\n%\ng\n.\nedmonds_karp\n(\nsource\n,\nsink\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white line-numbers language-python\" data-line=\"\" style=\"height: 400px; overflow: auto;\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Using list as a queue</span>\n        queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Pop from the start of the list</span>\n\n            <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                    parent<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> visited<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">edmonds_karp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-while\">while</span> self<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                s <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span>\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n            path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n            path<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow\n\n<span class=\"token comment\"># Example usage:</span>\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nvertex_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> name <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>vertex_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    g<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v1, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v2, cap: 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v3, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v4, cap: 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v1, cap: 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; t,  cap: 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v4 -&gt; t,  cap: 6</span>\n\nsource <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> sink <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum possible flow is %d \"</span> <span class=\"token operator\">%</span> g<span class=\"token punctuation\">.</span>edmonds_karp<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "line-numbers",
        "language-python"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Time Complexity for The Edmonds-Karp Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The difference between Edmonds-Karp and Ford-Fulkerson is that Edmonds-Karp uses Breadth-First Search (BFS) to find augmented paths, while Ford-Fulkerson uses Depth-First Search (DFS).",
      "html": "<p>The difference between Edmonds-Karp and Ford-Fulkerson is that Edmonds-Karp uses Breadth-First Search (BFS) to find augmented paths, while Ford-Fulkerson uses Depth-First Search (DFS).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that the time it takes to run Edmonds-Karp is easier to predict than Ford-Fulkerson, because Edmonds-Karp is not affected by the maximum flow value.",
      "html": "<p>This means that the time it takes to run Edmonds-Karp is easier to predict than Ford-Fulkerson, because Edmonds-Karp is not affected by the maximum flow value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With the number of vertices V V , the number of edges E E , the time complexity for the Edmonds-Karp algorithm is",
      "html": "<p>With the number of vertices <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-24-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-170\"><span class=\"mjx-mrow\" id=\"MJXc-Node-171\"><span class=\"mjx-mi\" id=\"MJXc-Node-172\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>V</mi></math></span></span>, the number of edges <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-25-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-173\"><span class=\"mjx-mrow\" id=\"MJXc-Node-174\"><span class=\"mjx-mi\" id=\"MJXc-Node-175\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>E</mi></math></span></span>, the time complexity for the Edmonds-Karp algorithm is</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "O ( V \u22c5 E 2 ) O ( V \u22c5 E 2 )",
      "html": "<p><span class=\"math display\"><span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MJXc-display\" style=\"text-align: center;\"><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-26-Frame\" role=\"presentation\" style=\"font-size: 119%; text-align: center; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-176\"><span class=\"mjx-mrow\" id=\"MJXc-Node-177\"><span class=\"mjx-mi\" id=\"MJXc-Node-178\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-179\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-180\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-181\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-msubsup MJXc-space2\" id=\"MJXc-Node-182\"><span class=\"mjx-base\" style=\"margin-right: -0.026em;\"><span class=\"mjx-mi\" id=\"MJXc-Node-183\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.584em; padding-left: 0.119em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-184\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-185\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML MJX_Assistive_MathML_Block\" role=\"presentation\"><math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>\u22c5</mo><msup><mi>E</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></math></span></span></span></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means Edmonds-Karp does not depend on the maximum flow, like Ford-Fulkerson does, but on how many vertices and edges we have.",
      "html": "<p>This means Edmonds-Karp does not depend on the maximum flow, like Ford-Fulkerson does, but on how many vertices and edges we have.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The reason we get this time complexity for Edmonds-Karp is that it runs BFS which has time complexity O ( E + V ) O ( E + V ) .",
      "html": "<p>The reason we get this time complexity for Edmonds-Karp is that it runs BFS which has time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-27-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-186\"><span class=\"mjx-mrow\" id=\"MJXc-Node-187\"><span class=\"mjx-mi\" id=\"MJXc-Node-188\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-189\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-190\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-191\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.283em; padding-bottom: 0.451em;\">+</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-192\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-193\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo>+</mo><mi>V</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But if we assume a bad case scenario for Edmonds-Karp, with a dense graph, where the number of edges E E is much greater than the number of vertices V V , time complexity for BFS becomes O ( E ) O ( E ) .",
      "html": "<p>But if we assume a bad case scenario for Edmonds-Karp, with a dense graph, where the number of edges <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-28-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-194\"><span class=\"mjx-mrow\" id=\"MJXc-Node-195\"><span class=\"mjx-mi\" id=\"MJXc-Node-196\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>E</mi></math></span></span> is much greater than the number of vertices <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-29-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-197\"><span class=\"mjx-mrow\" id=\"MJXc-Node-198\"><span class=\"mjx-mi\" id=\"MJXc-Node-199\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>V</mi></math></span></span>, time complexity for BFS becomes <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-30-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-200\"><span class=\"mjx-mrow\" id=\"MJXc-Node-201\"><span class=\"mjx-mi\" id=\"MJXc-Node-202\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-203\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-204\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-205\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "BFS must run one time for every augmented path, and there can actually be found close to V \u22c5 E V \u22c5 E augmented paths during running of the Edmonds-Karp algorithm.",
      "html": "<p>BFS must run one time for every augmented path, and there can actually be found close to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-31-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-206\"><span class=\"mjx-mrow\" id=\"MJXc-Node-207\"><span class=\"mjx-mi\" id=\"MJXc-Node-208\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-209\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-210\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>V</mi><mo>\u22c5</mo><mi>E</mi></math></span></span> augmented paths during running of the Edmonds-Karp algorithm.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So, BFS with time complexity O ( E ) O ( E ) can run close to V \u22c5 E V \u22c5 E times in the worst case, which means we get a total time complexity for Edmonds-Karp: O ( V \u22c5 E \u22c5 E ) = O ( V \u22c5 E 2 ) O ( V \u22c5 E \u22c5 E ) = O ( V \u22c5 E 2 ) .",
      "html": "<p>So, BFS with time complexity <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-32-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-211\"><span class=\"mjx-mrow\" id=\"MJXc-Node-212\"><span class=\"mjx-mi\" id=\"MJXc-Node-213\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-214\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-215\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-216\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></math></span></span> can run close to <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-33-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-217\"><span class=\"mjx-mrow\" id=\"MJXc-Node-218\"><span class=\"mjx-mi\" id=\"MJXc-Node-219\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-220\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-221\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>V</mi><mo>\u22c5</mo><mi>E</mi></math></span></span> times in the worst case, which means we get a total time complexity for Edmonds-Karp: <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-34-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-222\"><span class=\"mjx-mrow\" id=\"MJXc-Node-223\"><span class=\"mjx-mi\" id=\"MJXc-Node-224\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-225\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-226\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-227\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-228\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-229\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-230\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-231\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-232\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-mi MJXc-space3\" id=\"MJXc-Node-233\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-234\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-235\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.186em;\">V</span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-236\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-msubsup MJXc-space2\" id=\"MJXc-Node-237\"><span class=\"mjx-base\" style=\"margin-right: -0.026em;\"><span class=\"mjx-mi\" id=\"MJXc-Node-238\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.451em; padding-bottom: 0.283em; padding-right: 0.026em;\">E</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.513em; padding-left: 0.119em; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-239\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-240\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>\u22c5</mo><mi>E</mi><mo>\u22c5</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>\u22c5</mo><msup><mi>E</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></math></span></span>.</p>"
    }
  ]
}