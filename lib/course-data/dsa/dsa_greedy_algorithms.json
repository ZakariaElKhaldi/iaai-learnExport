{
  "title": "DSA Greedy Algorithms",
  "url": "https://www.w3schools.com/dsa/dsa_ref_greedy.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "DSA Greedy Algorithms",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Greedy Algorithms",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A greedy algorithm decides what to do in each step, only based on the current situation, without a thought of how the total problem looks like.",
      "html": "<p>A greedy algorithm decides what to do in each step, only based on the current situation, without a thought of how the total problem looks like.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In other words, a greedy algorithm makes the locally optimal choice in each step, hoping to find the global optimum solution in the end.",
      "html": "<p>In other words, a greedy algorithm makes the locally optimal choice in each step, hoping to find the global optimum solution in the end.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Dijkstra's algorithm",
          "href": "https://www.w3schools.com/dsa_algo_graphs_dijkstra.php",
          "title": ""
        }
      ],
      "text": "In Dijkstra's algorithm for example, the next vertex to be visited is always the next unvisited vertex with the currently shortest distance from the source, as seen from the current group of visited vertices.",
      "html": "<p>In <a href=\"dsa_algo_graphs_dijkstra.php\">Dijkstra's algorithm</a> for example, the next vertex to be visited is always the next unvisited vertex with the currently shortest distance from the source, as seen from the current group of visited vertices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So Dijkstra's algorithm is greedy because the choice of which vertex to visit next is only based on the currently available information, without considering the overall problem or how this choice might affect future decisions or the shortest paths in the end.",
      "html": "<p>So Dijkstra's algorithm is greedy because the choice of which vertex to visit next is only based on the currently available information, without considering the overall problem or how this choice might affect future decisions or the shortest paths in the end.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Dynamic Programming",
          "href": "https://www.w3schools.com/dsa_ref_dynamic_programming.php",
          "title": ""
        }
      ],
      "text": "Choosing a greedy algorithm is a design choice, just like Dynamic Programming is another algorithm design choice.",
      "html": "<p>Choosing a greedy algorithm is a design choice, just like <a href=\"dsa_ref_dynamic_programming.php\">Dynamic Programming</a> is another algorithm design choice.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Two properties must be true for a problem for a greedy algorithm to work:",
      "html": "<p>Two properties must be true for a problem for a greedy algorithm to work:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "finding the shortest paths",
          "href": "https://www.w3schools.com/dsa_theory_graphs_shortestpath.php",
          "title": ""
        },
        {
          "text": "Selection sort",
          "href": "https://www.w3schools.com/dsa_algo_selectionsort.php",
          "title": ""
        },
        {
          "text": "Dijkstra's algorithm",
          "href": "https://www.w3schools.com/dsa_algo_graphs_dijkstra.php",
          "title": ""
        }
      ],
      "text": "Most of the problems in this tutorial, like sorting an array, or finding the shortest paths in a graph, have these properties, and those problems can therefore be solved by greedy algorithms like Selection sort or Dijkstra's algorithm .",
      "html": "<p>Most of the problems in this tutorial, like sorting an array, or <a href=\"dsa_theory_graphs_shortestpath.php\">finding the shortest paths</a> in a graph, have these properties, and those problems can therefore be solved by greedy algorithms like <a href=\"dsa_algo_selectionsort.php\">Selection sort</a> or <a href=\"dsa_algo_graphs_dijkstra.php\">Dijkstra's algorithm</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "The Traveling Salesman",
          "href": "https://www.w3schools.com/dsa_ref_traveling_salesman.php",
          "title": ""
        },
        {
          "text": "0/1 Knapsack Problem",
          "href": "https://www.w3schools.com/dsa_ref_knapsack.php",
          "title": ""
        }
      ],
      "text": "But problems like The Traveling Salesman , or the 0/1 Knapsack Problem , do not have these properties, and so a greedy algorithm can not be used to solve them. These problems are discussed further down.",
      "html": "<p>But problems like <a href=\"dsa_ref_traveling_salesman.php\">The Traveling Salesman</a>, or the <a href=\"dsa_ref_knapsack.php\">0/1 Knapsack Problem</a>, do not have these properties, and so a greedy algorithm can not be used to solve them. These problems are discussed further down.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In addition, even if a problem can be solved by a greedy algorithm, it can also be solved by non-greedy algorithms.",
      "html": "<p>In addition, even if a problem can be solved by a greedy algorithm, it can also be solved by non-greedy algorithms.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Algorithms That Are Not Greedy",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below are algorithms that are not greedy, meaning they do not only rely on doing locally optimal choices in each step:",
      "html": "<p>Below are algorithms that are not greedy, meaning they do not only rely on doing locally optimal choices in each step:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The 0/1 Knapsack Problem",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "0/1 Knapsack Problem",
          "href": "https://www.w3schools.com/dsa_ref_knapsack.php",
          "title": ""
        }
      ],
      "text": "The 0/1 Knapsack Problem cannot be solved by a greedy algorithm because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.",
      "html": "<p>The <a href=\"dsa_ref_knapsack.php\">0/1 Knapsack Problem</a> cannot be solved by a greedy algorithm because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The 0/1 Knapsack Problem",
      "html": "<p><strong>The 0/1 Knapsack Problem</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Rules :",
      "html": "<p><u>Rules</u>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Goal :",
      "html": "<p><u>Goal</u>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This problem cannot be solved by a greedy algorithm, because choosing the item with the highest value, the lowest weight, or the highest value to weight ratio, in each step (local optimal solution, greedy), does not guarantee the optimal solution (global optimum).",
      "html": "<p>This problem cannot be solved by a greedy algorithm, because choosing the item with the highest value, the lowest weight, or the highest value to weight ratio, in each step (local optimal solution, greedy), does not guarantee the optimal solution (global optimum).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's say your backpack's limit is 10 kg, and you have these three treasures in front of you:",
      "html": "<p>Let's say your backpack's limit is 10 kg, and you have these three treasures in front of you:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\" id=\"treasureTable\">\n<tbody>\n<tr>\n<th style=\"width: 50%;\">Treasure</th>\n<th>Weight</th>\n<th>Value</th>\n</tr>\n<tr>\n<td>An old shield</td>\n<td>5 kg</td>\n<td>$300</td>\n</tr>\n<tr>\n<td>A nicely painted clay pot</td>\n<td>4 kg</td>\n<td>$500</td>\n</tr>\n<tr>\n<td>A metal horse figure</td>\n<td>7 kg</td>\n<td>$600</td>\n</tr>\n</tbody>\n</table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Making the greedy choice by taking the most valuable thing first, the horse figure with value $600, means that you can not bring any of the other things without breaking the weight limit.",
      "html": "<p>Making the greedy choice by taking the most valuable thing first, the horse figure with value $600, means that you can not bring any of the other things without breaking the weight limit.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So by trying to solve this problem in a greedy way you end up with a metal horse with value $600.",
      "html": "<p>So by trying to solve this problem in a greedy way you end up with a metal horse with value $600.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But the best solution in this case is taking the shield and the pot, maximizing the total value in the backpack to be $800, while still being under the weight limit.",
      "html": "<p>But the best solution in this case is taking the shield and the pot, maximizing the total value in the backpack to be $800, while still being under the weight limit.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What about always taking the treasure with the lowest weight? Or always taking the treasure with the highest value to weight ratio?",
      "html": "<p><span style=\"font-style: italic;\">What about always taking the treasure with the lowest weight? Or always taking the treasure with the highest value to weight ratio?</span> </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "While following those principles would actually lead us to the best solution in this specific case, we could not guarantee that those principles would work if the values and weights in this example were changed.",
      "html": "<p>While following those principles would actually lead us to the best solution in this specific case, we could not guarantee that those principles would work if the values and weights in this example were changed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that The 0/1 Knapsack Problem cannot be solved with a greedy algorithm.",
      "html": "<p>This means that The 0/1 Knapsack Problem cannot be solved with a greedy algorithm.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/dsa_ref_knapsack.php",
          "title": ""
        }
      ],
      "text": "Read more about The 0/1 Knapsack Problem here .",
      "html": "<p>Read more about The 0/1 Knapsack Problem <a href=\"dsa_ref_knapsack.php\">here</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Traveling Salesman",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "The Traveling Salesman Problem",
          "href": "https://www.w3schools.com/dsa_ref_traveling_salesman.php",
          "title": ""
        }
      ],
      "text": "The Traveling Salesman Problem is a famous problem that also cannot be solved by a greedy algorithm, because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.",
      "html": "<p><a href=\"dsa_ref_traveling_salesman.php\">The Traveling Salesman Problem</a> is a famous problem that also cannot be solved by a greedy algorithm, because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem states that you are a salesperson with a number of cities or towns you must visit to sell your things.",
      "html": "<p>The Traveling Salesman Problem states that you are a salesperson with a number of cities or towns you must visit to sell your things.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem",
      "html": "<p><strong>The Traveling Salesman Problem</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Rules : Visit every city only once, then return back to the city you started in.",
      "html": "<p><u>Rules</u>: Visit every city only once, then return back to the city you started in.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Goal : Find the shortest possible route.",
      "html": "<p><u>Goal</u>: Find the shortest possible route.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Using a greedy algorithm here, you would always go to the next unvisited city that is closest to the city you are currently in. But this would in most cases not lead you to the optimal solution with the shortest total path.",
      "html": "<p>Using a greedy algorithm here, you would always go to the next unvisited city that is closest to the city you are currently in. But this would in most cases not lead you to the optimal solution with the shortest total path.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The simulation below shows how it looks like when a greedy algorithm tries to solve The Traveling Salesman Problem.",
      "html": "<p>The simulation below shows how it looks like when a greedy algorithm tries to solve The Traveling Salesman Problem. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Running the simulation, it might not always be obvious that the algorithm is flawed, but you might notice how sometimes the lines are crossing, creating a longer total distance, when that is clearly not necessary.",
      "html": "<p>Running the simulation, it might not always be obvious that the algorithm is flawed, but you might notice how sometimes the lines are crossing, creating a longer total distance, when that is clearly not necessary.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A greedy algorithm trying to solve The Traveling Salesman Problem.",
      "html": "<p style=\"color: black; margin: 15px 15px 0px;\">A greedy algorithm trying to solve The Traveling Salesman Problem.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "While running a greedy approach to The Traveling Salesman Problem sometimes gives us a pretty good approximation to the shortest possible route, a greedy algorithm will not be able to solve The Traveling Salesman Problem in general.",
      "html": "<p>While running a greedy approach to The Traveling Salesman Problem sometimes gives us a pretty good approximation to the shortest possible route, a greedy algorithm will not be able to solve The Traveling Salesman Problem in general.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Traveling Salesman Problem does not fulfill the properties needed so that it can be solved by a greedy algorithm.",
      "html": "<p>The Traveling Salesman Problem does not fulfill the properties needed so that it can be solved by a greedy algorithm.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: There is actually no algorithm that finds the shortest route in The Traveling Salesman Problem efficiently. We just have to check all possible routes! This gives us a time complexity of O ( n ! ) O ( n ! ) , which means the number of calculations explodes when the number of cities ( n n ) is increased.",
      "html": "<p><strong>Note: </strong>There is actually no algorithm that finds the shortest route in The Traveling Salesman Problem efficiently. We just have to check all possible routes! This gives us a time complexity of <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;!&lt;/mo&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/math&gt;' id=\"MathJax-Element-1-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-1\"><span class=\"mjx-mrow\" id=\"MJXc-Node-2\"><span class=\"mjx-mi\" id=\"MJXc-Node-3\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-4\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mi\" id=\"MJXc-Node-5\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-6\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.339em;\">!</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-7\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>!</mo><mo stretchy=\"false\">)</mo></math></span></span>, which means the number of calculations explodes when the number of cities (<span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-2-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-8\"><span class=\"mjx-mrow\" id=\"MJXc-Node-9\"><span class=\"mjx-mi\" id=\"MJXc-Node-10\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span>) is increased.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/dsa_ref_traveling_salesman.php",
          "title": ""
        }
      ],
      "text": "Read more about the Traveling Salesman Problem here .",
      "html": "<p>Read more about the Traveling Salesman Problem <a href=\"dsa_ref_traveling_salesman.php\">here</a>.</p>"
    }
  ]
}