{
  "title": "React ES6 Classes",
  "url": "https://www.w3schools.com/react/react_es6_classes.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "React ES6 Classes",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Classes",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ES6 introduced classes.",
      "html": "<p>ES6 introduced classes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class , and the properties are assigned inside a constructor() method.",
      "html": "<p>A class is a type of function, but instead of using the keyword\n<code>function</code> to initiate it, we use the keyword\n<code>class</code>, and the properties are assigned inside a\n<code>constructor()</code> method.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n{\n\n\nconstructor\n(\nname\n)\n\n{\n\n\nthis\n.\nbrand\n=\nname\n;\n\n\n}\n\n\n}",
      "language": "unknown",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Notice the case of the class name. We have begun the name, \"Car\", with an uppercase character. This is a standard naming convention for classes.",
      "html": "<p>Notice the case of the class name.\nWe have begun the name, \"Car\", with an uppercase character.\nThis is a standard naming convention for classes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now you can create objects using the Car class:",
      "html": "<p>Now you can create objects using the Car class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n{\n\n\nconstructor\n(\nname\n)\n\n{\n\n\nthis\n.\nbrand\n=\nname\n;\n\n\n}\n\n\n}\n\n\n\nconst\nmycar\n=\n\nnew\n\nCar\n(\n\"Ford\"\n)\n;",
      "language": "javascript",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> mycar <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The constructor function is called automatically when the object is initialized.",
      "html": "<p><strong>Note:</strong> The constructor function is called automatically when the object is initialized.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Method in Classes",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can add your own methods in a class:",
      "html": "<p>You can add your own methods in a class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class_method",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n{\n\n\nconstructor\n(\nname\n)\n\n{\n\n\nthis\n.\nbrand\n=\nname\n;\n\n\n}\n\n\n\npresent\n(\n)\n\n{\n\n\nreturn\n\n'I have a '\n\n+\n\nthis\n.\nbrand\n;\n\n\n}\n\n\n}\n\n\n\nconst\nmycar\n=\n\nnew\n\nCar\n(\n\"Ford\"\n)\n;\n\nmycar\n.\npresent\n(\n)\n;",
      "language": "javascript",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">'I have a '</span> <span class=\"token operator\">+</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> mycar <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmycar<span class=\"token punctuation\">.</span><span class=\"token function\">present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class_method",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see in the example above, you call the method by referring to the object's method name followed by parentheses (parameters would go inside the parentheses).",
      "html": "<p>As you can see in the example above, you call the method by referring to the \nobject's method name followed by parentheses (parameters would go inside the \nparentheses).</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Class Inheritance",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a class inheritance, use the extends keyword.",
      "html": "<p>To create a class inheritance, use the <code>extends</code> \nkeyword.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A class created with a class inheritance inherits all the methods from another class:",
      "html": "<p>A class created with a class inheritance inherits all the methods from \nanother class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class_inherit",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "class\n\nCar\n\n{\n\n\nconstructor\n(\nname\n)\n\n{\n\n\nthis\n.\nbrand\n=\nname\n;\n\n\n}\n\n\n\npresent\n(\n)\n\n{\n\n\nreturn\n\n'I have a '\n\n+\n\nthis\n.\nbrand\n;\n\n\n}\n\n\n}\n\n\n\nclass\n\nModel\n\nextends\n\nCar\n\n{\n\n\nconstructor\n(\nname\n,\nmod\n)\n\n{\n\n\nsuper\n(\nname\n)\n;\n\n\nthis\n.\nmodel\n=\nmod\n;\n\n\n}\n\n\nshow\n(\n)\n\n{\n\n\nreturn\n\nthis\n.\npresent\n(\n)\n\n+\n\n', it is a '\n\n+\n\nthis\n.\nmodel\n\n}\n\n\n}\n\n\nconst\nmycar\n=\n\nnew\n\nModel\n(\n\"Ford\"\n,\n\n\"Mustang\"\n)\n;\n\nmycar\n.\nshow\n(\n)\n;",
      "language": "java",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">'I have a '</span> <span class=\"token operator\">+</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Model</span> <span class=\"token keyword keyword-extends\">extends</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-super\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>  \n  <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', it is a '</span> <span class=\"token operator\">+</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>model\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-const\">const</span> mycar <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmycar<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": "https://www.w3schools.com/react/tryit.asp?filename=tryreact_es6_class_inherit",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The super() method refers to the parent class.",
      "html": "<p>The <code>super()</code> method refers to the parent \nclass.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By calling the super() method in the constructor method, we call the parent's constructor method and get access to the parent's properties and methods.",
      "html": "<p>By calling the <code>super()</code> method in the \nconstructor method, we call the parent's constructor method and get access to \nthe parent's properties and methods.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "JavaScript Classes",
          "href": "https://www.w3schools.com/js/js_class_intro.asp",
          "title": ""
        }
      ],
      "text": "To learn more about classes, check out our JavaScript Classes section.",
      "html": "<p>To learn more about classes, check out our <a href=\"/js/js_class_intro.asp\">JavaScript Classes</a> section.</p>"
    }
  ]
}