{
  "title": "React JSX",
  "url": "https://www.w3schools.com/react/react_jsx.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "React JSX",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What is JSX?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX stands for JavaScript XML.",
      "html": "<p>JSX stands for JavaScript XML.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX allows us to write HTML in React.",
      "html": "<p>JSX allows us to write HTML in React.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX makes it easier to write and add HTML in React.",
      "html": "<p>JSX makes it easier to write and add HTML in React.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Coding JSX",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods.",
      "html": "<p>JSX allows us to write HTML elements in JavaScript and place them in the DOM \nwithout any <code>createElement()</code>\u00a0 and/or\n<code>appendChild()</code> methods.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX converts HTML tags into react elements.",
      "html": "<p>JSX converts HTML tags into react elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You are not required to use JSX, but JSX makes it easier to write React applications.",
      "html": "<p>You are not required to use JSX, but JSX makes it easier to write React applications.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Here are two examples. The first uses JSX and the second does not:",
      "html": "<p>Here are two examples. The first uses JSX and the second does \nnot:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n<\nh1\n>\nI Love JSX!\n</\nh1\n>\n;\n\n\n\nconst\nroot\n=\nReactDOM\n.\ncreateRoot\n(\ndocument\n.\ngetElementById\n(\n'root'\n)\n)\n;\n\nroot\n.\nrender\n(\nmyElement\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">I Love JSX!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\nReact\n.\ncreateElement\n(\n'h1'\n,\n\n{\n}\n,\n\n'I do not use JSX!'\n)\n;\n\n\n\nconst\nroot\n=\nReactDOM\n.\ncreateRoot\n(\ndocument\n.\ngetElementById\n(\n'root'\n)\n)\n;\n\nroot\n.\nrender\n(\nmyElement\n)\n;",
      "language": "javascript",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I do not use JSX!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.",
      "html": "<p>As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.",
      "html": "<p>JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Expressions in JSX",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With JSX you can write expressions inside curly braces { } .",
      "html": "<p>With JSX you can write expressions inside curly braces <code>{ }</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:",
      "html": "<p>The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n<\nh1\n>\nReact is\n{\n5\n\n+\n\n5\n}\ntimes better with JSX\n</\nh1\n>\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">React is </span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times better with JSX</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Inserting a Large Block of HTML",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To write HTML on multiple lines, put the HTML inside parentheses:",
      "html": "<p>To write HTML on multiple lines, put the HTML inside parentheses:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n(\n\n\n<\nul\n>\n\n\n<\nli\n>\nApples\n</\nli\n>\n\n\n<\nli\n>\nBananas\n</\nli\n>\n\n\n<\nli\n>\nCherries\n</\nli\n>\n\n\n</\nul\n>\n\n\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Apples</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Bananas</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Cherries</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "One Top Level Element",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The HTML code must be wrapped in ONE top level element.",
      "html": "<p>The HTML code must be wrapped in <em>ONE</em> top level element.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So if you like to write two paragraphs, you must put them inside a parent element, like a div element.",
      "html": "<p>So if you like to write <em>two</em> paragraphs, you must put them inside a \nparent element, like a <code>div</code> element.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n(\n\n\n<\ndiv\n>\n\n\n<\np\n>\nI am a paragraph.\n</\np\n>\n\n\n<\np\n>\nI am a paragraph too.\n</\np\n>\n\n\n</\ndiv\n>\n\n\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">I am a paragraph.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">I am a paragraph too.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.",
      "html": "<p>JSX will throw an error if the HTML is not correct, or if the HTML misses a \nparent element.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Alternatively, you can use a \"fragment\" to wrap multiple lines. This will prevent unnecessarily adding extra nodes to the DOM.",
      "html": "<p>Alternatively, you can use a \"fragment\" to wrap multiple lines.\nThis will prevent unnecessarily adding extra nodes to the DOM.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A fragment looks like an empty HTML tag: <></> .",
      "html": "<p>A fragment looks like an empty HTML tag: <code>&lt;&gt;&lt;/&gt;</code>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n(\n\n\n<\n>\n\n\n<\np\n>\nI am a paragraph.\n</\np\n>\n\n\n<\np\n>\nI am a paragraph too.\n</\np\n>\n\n\n</\n>\n\n\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">I am a paragraph.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">I am a paragraph too.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Elements Must be Closed",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX follows XML rules, and therefore HTML elements must be properly closed.",
      "html": "<p>JSX follows XML rules, and therefore HTML elements must be properly closed.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n<\ninput\n\ntype\n=\n\"\ntext\n\"\n\n/>\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX will throw an error if the HTML is not properly closed.",
      "html": "<p>JSX will throw an error if the HTML is not properly closed.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Attribute class = className",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.",
      "html": "<p>The <code>class</code> attribute is a much used attribute \nin HTML, but since JSX is rendered as JavaScript, and the\n<code>class</code> keyword is a reserved word in JavaScript, \nyou are not allowed to use it in JSX.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use attribute className instead.",
      "html": "<p>Use attribute <code>className</code> instead.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.",
      "html": "<p>JSX solved this by using <code>className</code> instead. \nWhen JSX is rendered, it translates <code>className</code> \nattributes into <code>class</code> attributes.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nmyElement\n=\n\n<\nh1\n\nclassName\n=\n\"\nmyclass\n\"\n>\nHello World\n</\nh1\n>\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myclass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Conditions - if statements",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "React supports if statements, but not inside JSX.",
      "html": "<p>React supports <code>if</code> statements, but not <em>inside </em>JSX.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead:",
      "html": "<p>To be able to use conditional statements in JSX, you should put the <code>if</code> \nstatements outside of the JSX, or you could use a ternary expression instead:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Option 1:",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Write if statements outside of the JSX code:",
      "html": "<p>Write <code>if</code> statements outside of the JSX code:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nx\n=\n\n5\n;\n\n\nlet\ntext\n=\n\n\"Goodbye\"\n;\n\n\nif\n\n(\nx\n<\n\n10\n)\n\n{\n\ntext\n=\n\n\"Hello\"\n;\n\n\n}\n\n\n\nconst\nmyElement\n=\n\n<\nh1\n>\n{\ntext\n}\n</\nh1\n>\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-let\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Goodbye\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Option 2:",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use ternary expressions instead:",
      "html": "<p>Use ternary expressions instead:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\nx\n=\n\n5\n;\n\n\n\nconst\nmyElement\n=\n\n<\nh1\n>\n{\n(\nx\n)\n\n<\n\n10\n\n?\n\n\"Hello\"\n\n:\n\n\"Goodbye\"\n}\n</\nh1\n>\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Goodbye\"</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note that in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {} .",
      "html": "<p><strong>Note</strong> that in order to embed a JavaScript expression inside JSX,\nthe JavaScript must be wrapped with curly braces, <code>{}</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Which of the following uses correct syntax for expressions in JSX?",
      "html": "<p>Which of the following uses correct syntax for expressions in JSX?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "Which of the following uses correct syntax for expressions in JSX?",
        "options": [
          {
            "value": "0",
            "text": "<h1>React is {5 + 5} times better with JSX</h1>"
          },
          {
            "value": "1",
            "text": "<h1>React is [5 + 5] times better with JSX</h1>"
          },
          {
            "value": "2",
            "text": "<h1>React is (5 + 5) times better with JSX</h1>"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_jsx1"
      },
      "quiz_type": "quiz",
      "question": "Which of the following uses correct syntax for expressions in JSX?",
      "options": [
        {
          "value": "0",
          "text": "<h1>React is {5 + 5} times better with JSX</h1>"
        },
        {
          "value": "1",
          "text": "<h1>React is [5 + 5] times better with JSX</h1>"
        },
        {
          "value": "2",
          "text": "<h1>React is (5 + 5) times better with JSX</h1>"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_jsx1",
      "html": "<form action=\"exercise.asp?x=xrcise_jsx1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\"><code>&lt;h1&gt;React is {5 + 5} times better with JSX&lt;/h1&gt;</code></label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\"><code>&lt;h1&gt;React is [5 + 5] times better with JSX&lt;/h1&gt;</code></label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\"><code>&lt;h1&gt;React is (5 + 5) times better with JSX&lt;/h1&gt;</code></label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}