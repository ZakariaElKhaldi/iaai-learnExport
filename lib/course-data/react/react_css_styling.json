{
  "title": "React CSS Styling",
  "url": "https://www.w3schools.com/react/react_css_styling.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Styling React Using CSS",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are many ways to style React with CSS, this tutorial will take a closer look at three common ways:",
      "html": "<p class=\"intro\">There are many ways to style React with CSS, this tutorial will \ntake a closer look at three common ways:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Inline Styling",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To style an element with the inline style attribute, the value must be a JavaScript object:",
      "html": "<p>To style an element with the inline style attribute, the value must be a \nJavaScript object:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\n\nHeader\n\n=\n\n(\n)\n\n=>\n\n{\n\n\nreturn\n\n(\n\n\n<\n>\n\n\n<\nh1\n\nstyle\n=\n{\n{\ncolor\n:\n\n\"red\"\n}\n}\n>\nHello Style!\n</\nh1\n>\n\n\n<\np\n>\nAdd a little style!\n</\np\n>\n\n\n</\n>\n\n\n)\n;\n\n\n}",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello Style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add a little style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, the styling in the example above is written inside two sets of curly braces {{}} .",
      "html": "<p><strong>Note:</strong> In JSX, JavaScript expressions are written inside curly braces,\nand since JavaScript objects also use curly braces,\nthe styling in the example above is written inside two sets of curly braces <code>{{}}</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "camelCased Property Names",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since the inline CSS is written in a JavaScript object, properties with hyphen separators, like background-color , must be written with camel case syntax:",
      "html": "<p>Since the inline CSS is written in a JavaScript object, properties with \nhyphen separators, like <code>background-color</code>, \nmust be written with camel case syntax:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\n\nHeader\n\n=\n\n(\n)\n\n=>\n\n{\n\n\nreturn\n\n(\n\n\n<\n>\n\n\n<\nh1\n\nstyle\n=\n{\n{\nbackgroundColor\n:\n\n\"lightblue\"\n}\n}\n>\nHello Style!\n</\nh1\n>\n\n\n<\np\n>\nAdd a little style!\n</\np\n>\n\n\n</\n>\n\n\n)\n;\n\n\n}",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lightblue\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello Style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add a little style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "JavaScript Object",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also create an object with styling information, and refer to it in the style attribute:",
      "html": "<p>You can also create an object with styling information, and refer to it in the style attribute:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "const\n\nHeader\n\n=\n\n(\n)\n\n=>\n\n{\n\n\nconst\nmyStyle\n=\n\n{\n\n\ncolor\n:\n\n\"white\"\n,\n\n\nbackgroundColor\n:\n\n\"DodgerBlue\"\n,\n\n\npadding\n:\n\n\"10px\"\n,\n\n\nfontFamily\n:\n\n\"Sans-Serif\"\n\n\n}\n;\n\n\nreturn\n\n(\n\n\n<\n>\n\n\n<\nh1\n\nstyle\n=\n{\nmyStyle\n}\n>\nHello Style!\n</\nh1\n>\n\n\n<\np\n>\nAdd a little style!\n</\np\n>\n\n\n</\n>\n\n\n)\n;\n\n\n}",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-const\">const</span> myStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DodgerBlue\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontFamily</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sans-Serif\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>myStyle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello Style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add a little style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "CSS Stylesheet",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can write your CSS styling in a separate file, just save the file with the .css file extension, and import it in your application.",
      "html": "<p>You can write your CSS styling in a separate file, just save the file with the \n<code>.css</code> file extension, and import it in your \napplication.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-css"
        ],
        "isNotranslate": false
      },
      "code": "body\n\n{\n\n\nbackground-color\n:\n#282c34\n;\n\n\ncolor\n:\nwhite\n;\n\n\npadding\n:\n40px\n;\n\n\nfont-family\n:\nSans-Serif\n;\n\n\ntext-align\n:\ncenter\n;\n\n\n}",
      "language": "css",
      "code_html": "<pre class=\"w3-white language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #282c34<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Sans-Serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-css"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-css"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: You can call the file whatever you like, just remember the correct file extension.",
      "html": "<p><strong>Note:</strong> You can call the file whatever you like, just remember the correct file extension.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Import the stylesheet in your application:",
      "html": "<p>Import the stylesheet in your application:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "import\nReact\nfrom\n\n'react'\n;\n\n\nimport\nReactDOM\nfrom\n\n'react-dom/client'\n;\n\n\nimport\n\n'./App.css'\n;\n\n\n\nconst\n\nHeader\n\n=\n\n(\n)\n\n=>\n\n{\n\n\nreturn\n\n(\n\n\n<\n>\n\n\n<\nh1\n>\nHello Style!\n</\nh1\n>\n\n\n<\np\n>\nAdd a little style!.\n</\np\n>\n\n\n</\n>\n\n\n)\n;\n\n\n}\n\n\n\nconst\nroot\n=\nReactDOM\n.\ncreateRoot\n(\ndocument\n.\ngetElementById\n(\n'root'\n)\n)\n;\n\nroot\n.\nrender\n(\n<\nHeader\n\n/>\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-import\">import</span> React <span class=\"token keyword keyword-from\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-import\">import</span> ReactDOM <span class=\"token keyword keyword-from\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-import\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello Style!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Add a little style!.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-const\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "CSS Modules",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Another way of adding styles to your application is to use CSS Modules.",
      "html": "<p>Another way of adding styles to your application is to use CSS Modules.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "CSS Modules are convenient for components that are placed in separate files.",
      "html": "<p>CSS Modules are convenient for components that are placed in separate files.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts.",
      "html": "<p>The CSS inside a module is available only for the component that imported it, \nand you do not have to worry about name conflicts.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Create the CSS module with the .module.css extension, example: my-style.module.css .",
      "html": "<p>Create the CSS module with the <code>.module.css</code> \nextension, example: <code>my-style.module.css</code>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-css"
        ],
        "isNotranslate": false
      },
      "code": ".bigblue\n\n{\n\n\ncolor\n:\nDodgerBlue\n;\n\n\npadding\n:\n40px\n;\n\n\nfont-family\n:\nSans-Serif\n;\n\n\ntext-align\n:\ncenter\n;\n\n\n}",
      "language": "css",
      "code_html": "<pre class=\"w3-white language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.bigblue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> DodgerBlue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Sans-Serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-css"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-css"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Import the stylesheet in your component:",
      "html": "<p>Import the stylesheet in your component:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "import\nstyles\nfrom\n\n'./my-style.module.css'\n;\n\n\n\nconst\n\nCar\n\n=\n\n(\n)\n\n=>\n\n{\n\n\nreturn\n\n<\nh1\n\nclassName\n=\n{\nstyles\n.\nbigblue\n}\n>\nHello Car!\n</\nh1\n>\n;\n\n\n}\n\n\n\nexport\n\ndefault\nCar\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-import\">import</span> styles <span class=\"token keyword keyword-from\">from</span> <span class=\"token string\">'./my-style.module.css'</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword keyword-const\">const</span> <span class=\"token function-variable function\">Car</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>bigblue<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello Car!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-default\">default</span> Car<span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Import the component in your application:",
      "html": "<p>Import the component in your application:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": false
      },
      "code": "import\nReactDOM\nfrom\n\n'react-dom/client'\n;\n\n\nimport\nCar\nfrom\n\n'./Car.js'\n;\n\n\n\nconst\nroot\n=\nReactDOM\n.\ncreateRoot\n(\ndocument\n.\ngetElementById\n(\n'root'\n)\n)\n;\n\nroot\n.\nrender\n(\n<\nCar\n\n/>\n)\n;",
      "language": "html",
      "code_html": "<pre class=\"w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-import\">import</span> ReactDOM <span class=\"token keyword keyword-from\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-import\">import</span> Car <span class=\"token keyword keyword-from\">from</span> <span class=\"token string\">'./Car.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Consider the following code: const Header = () => { const myStyle = { color: \"white\", backgroundColor: \"DodgerBlue\", }; return ( <> <h1> Hello Style!</h1> </> ); } What is a correct syntax for using myStyle as styling for the <h1> element in the return function?",
      "html": "<p>Consider the following code:<br/><code class=\"codeblock\">const Header = () =&gt; {<br/>\u00a0\u00a0const myStyle = {<br/>\u00a0\u00a0\u00a0\u00a0color: \"white\",<br/>\u00a0\u00a0\u00a0\u00a0backgroundColor: \"DodgerBlue\",<br/>\u00a0\u00a0};<br/>\u00a0\u00a0return (<br/>\u00a0\u00a0\u00a0\u00a0&lt;&gt;<br/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;h1&gt;Hello Style!&lt;/h1&gt;<br/>\u00a0\u00a0\u00a0\u00a0&lt;/&gt;<br/>\u00a0\u00a0);<br/>}</code><br/><br/>What is a correct syntax for using <code>myStyle</code> as styling for the <code>&lt;h1&gt;</code> element in the return function?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "Consider the following code:const Header = () => {\u00a0\u00a0const myStyle = {\u00a0\u00a0\u00a0\u00a0color: \"white\",\u00a0\u00a0\u00a0\u00a0backgroundColor: \"DodgerBlue\",\u00a0\u00a0};\u00a0\u00a0return (\u00a0\u00a0\u00a0\u00a0<>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h1>Hello Style!</h1>\u00a0\u00a0\u00a0\u00a0</>\u00a0\u00a0);}What is a correct syntax for using myStyle as styling for the <h1> element in the return function?",
        "options": [
          {
            "value": "0",
            "text": "<h1 className={myStyle}>Hello Style!</h1>"
          },
          {
            "value": "1",
            "text": "<h1 class={myStyle}>Hello Style!</h1>"
          },
          {
            "value": "2",
            "text": "<h1 style={myStyle}>Hello Style!</h1>"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_css_styling1"
      },
      "quiz_type": "quiz",
      "question": "Consider the following code:const Header = () => {\u00a0\u00a0const myStyle = {\u00a0\u00a0\u00a0\u00a0color: \"white\",\u00a0\u00a0\u00a0\u00a0backgroundColor: \"DodgerBlue\",\u00a0\u00a0};\u00a0\u00a0return (\u00a0\u00a0\u00a0\u00a0<>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h1>Hello Style!</h1>\u00a0\u00a0\u00a0\u00a0</>\u00a0\u00a0);}What is a correct syntax for using myStyle as styling for the <h1> element in the return function?",
      "options": [
        {
          "value": "0",
          "text": "<h1 className={myStyle}>Hello Style!</h1>"
        },
        {
          "value": "1",
          "text": "<h1 class={myStyle}>Hello Style!</h1>"
        },
        {
          "value": "2",
          "text": "<h1 style={myStyle}>Hello Style!</h1>"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_css_styling1",
      "html": "<form action=\"exercise.asp?x=xrcise_css_styling1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\"><code>&lt;h1 className={myStyle}&gt;Hello Style!&lt;/h1&gt;</code></label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\"><code>&lt;h1 class={myStyle}&gt;Hello Style!&lt;/h1&gt;</code></label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\"><code>&lt;h1 style={myStyle}&gt;Hello Style!&lt;/h1&gt;</code></label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}