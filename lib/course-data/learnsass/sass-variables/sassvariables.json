{
  "id": "20c204d3-6746-49c5-a2d4-e912366d6163",
  "title": "SassVariables",
  "slug": "sassvariables",
  "metadata": {
    "description": "Learn about SassVariables with clear explanations and practical examples.",
    "keywords": [
      "mycolor",
      "variables",
      "color",
      "sass",
      "green",
      "global",
      "variable",
      "example",
      "output",
      "syntax"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnSass",
    "subcategory": "Sass Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Sass\nVariables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Sass Variables\nVariables are a way to store information that you can re-use later.\nWith Sass, you can store information in variables, like:\nstrings\nnumbers\ncolors\nbooleans\nlists\nnulls\nSass uses the $ symbol, followed by a name, to declare variables:\nSass Variable Syntax:\n$\nvariablename\n:\nvalue\n;\nThe following example declares 4 variables named myFont, myColor, myFontSize, and myWidth.\nAfter the variables are declared, you can use the variables wherever you want:\nSCSS Syntax:\n$myFont: Helvetica, sans-serif;\n$myColor: red;\n$myFontSize: 18px;\n$myWidth: 680px;\nbody {\nfont-family: $myFont;\nfont-size: $myFontSize;\ncolor: $myColor;\n}\n#container {\nwidth: $myWidth;\n}\nRun Example \u00bb\nSo, when the Sass file is transpiled, it takes the variables (myFont, myColor, \netc.) and outputs normal CSS with the variable values placed in the CSS, like \nthis:\nCSS Output:\nbody {\nfont-family: Helvetica, sans-serif;\nfont-size: 18px;\ncolor: red;\n}\n#container {\nwidth: 680px;\n}\nSass Variable Scope\nSass variables are only available at the level of nesting where they are defined.\nLook at the following example:\nSCSS Syntax:\n$myColor: red;\nh1 {\n$myColor: green;\ncolor: $myColor;\n}\np {\ncolor: $myColor;\n}\nRun Example \u00bb\nWill the color of the text inside a\n<p>\ntag be red or green? It will be red!\nThe other definition, $myColor: green; is inside the\n<h1>\nrule, and will only \nbe available there!\nSo, the CSS output will be:\nCSS Output:\nh1 {\ncolor: green;\n}\np {\ncolor: red;\n}\nOk, that is the default behavior for variable scope.\nUsing Sass !global\nThe default behavior for variable scope can be overridden by using the\n!global\nswitch.\n!global\nindicates that a variable is global, \nwhich means that it is accessible on all levels.\nLook at the following example (same as above; but with\n!global\nadded):\nSCSS Syntax:\n$myColor: red;\nh1 {\n$myColor: green !global;\ncolor: $myColor;\n}\np {\ncolor: $myColor;\n}\nRun Example \u00bb\nNow the color of the text inside a\n<p>\ntag will be green!\nSo, the CSS output will be:\nCSS Output:\nh1 {\ncolor: green;\n}\np {\ncolor: green;\n}\nTip:\nGlobal variables should be defined outside any rules. It could be \nwise to define all global variables in its own file, named \"_globals.scss\", and \ninclude the file with the\n@include\nkeyword.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "$\nvariablename\n:\nvalue\n;",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "$myFont: Helvetica, sans-serif;\n$myColor: red;\n$myFontSize: 18px;\n$myWidth: 680px;\nbody {\nfont-family: $myFont;\nfont-size: $myFontSize;\ncolor: $myColor;\n}\n#container {\nwidth: $myWidth;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "body {\nfont-family: Helvetica, sans-serif;\nfont-size: 18px;\ncolor: red;\n}\n#container {\nwidth: 680px;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "$myColor: red;\nh1 {\n$myColor: green;\ncolor: $myColor;\n}\np {\ncolor: $myColor;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "h1 {\ncolor: green;\n}\np {\ncolor: red;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "$myColor: red;\nh1 {\n$myColor: green !global;\ncolor: $myColor;\n}\np {\ncolor: $myColor;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "h1 {\ncolor: green;\n}\np {\ncolor: green;\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "$\nvariablename\n# TODO: Complete this line\nvalue\n;",
      "solution": "$\nvariablename\n:\nvalue\n;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "$myFont: Helvetica, sans-serif;\n$myColor: red;\n$myFontSize: 18px;\n$myWidth: 680px;\n# TODO: Complete this line\nfont-family: $myFont;\nfont-size: $myFontSize;\ncolor: $myColor;\n}\n#container {\nwidth: $myWidth;\n}",
      "solution": "$myFont: Helvetica, sans-serif;\n$myColor: red;\n$myFontSize: 18px;\n$myWidth: 680px;\nbody {\nfont-family: $myFont;\nfont-size: $myFontSize;\ncolor: $myColor;\n}\n#container {\nwidth: $myWidth;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "546e19de-5376-422a-8922-c6e6a79390f5",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ad893468-7211-425f-b34a-5c39a8f48bff",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bc1014b2-cd6b-4a88-b8a7-1f09a17dce6d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Sass\nVariables\n\nSass Variables\nVariables?",
      "options": [
        "None of the above.",
        "declared",
        "a way to store information that you can re-use later",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Sass\nVariables\n\nSass Variables\nVariables is 'a way to store information that you can re-use later'."
    },
    {
      "question": "What is After the variables?",
      "options": [
        "None of the above.",
        "declared",
        "a way to store information that you can re-use later",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of After the variables is 'declared'."
    }
  ],
  "summary": "This tutorial covers SassVariables concepts and techniques. You'll learn how to use SassVariables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SassVariables and how to apply it in your projects."
}