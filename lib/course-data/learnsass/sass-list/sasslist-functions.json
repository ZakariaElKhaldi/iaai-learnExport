{
  "id": "fd1e76d0-bcca-447a-bb85-025a62017e6c",
  "title": "SassList Functions",
  "slug": "sasslist-functions",
  "metadata": {
    "description": "Learn about SassList Functions with clear explanations and practical examples.",
    "keywords": [
      "list",
      "result",
      "example",
      "separator",
      "lists",
      "value",
      "auto",
      "comma",
      "bracketed",
      "sass"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSass",
    "subcategory": "Sass List"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Sass\nList Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Sass List Functions\nThe list functions are used to access values in a list, combine lists, and \nadd items to lists.\nSass lists are immutable (they cannot change). So, the list functions that return a \nlist, will \nreturn a new list, and not change the original list.\nSass lists are 1-based. The first list item in a list is at index 1, not 0.\nThe following table lists all list functions in Sass:\nFunction\nDescription & Example\nappend(\nlist\n,\nvalue\n, [\nseparator\n])\nAdds a single\nvalue\nto the end of the list.\nseparator\ncan be auto, comma, or space. auto is default.\nExample:\nappend((a b c), d)\nResult: a b c d\nappend((a b c), (d), comma)\nResult: a, b, c, d\nindex(\nlist\n,\nvalue\n)\nReturns the index position for the\nvalue\nin list.\nExample:\nindex(a b c, b)\nResult: 2\nindex(a b c, f)\nResult: null\nis-bracketed(\nlist\n)\nChecks whether the list has square brackets.\nExample:\nis-bracketed([a b c])\nResult: true\nis-bracketed(a b c)\nResult: \n    false\njoin(\nlist1\n,\nlist2\n, [\nseparator, bracketed\n])\nAppends\nlist2\nto the end of\nlist1\n.\nseparator\ncan be auto, comma, or space. auto is default (will use the separator in the \n    first list).\nbracketed\ncan be auto, true, or false. auto is default.\nExample:\njoin(a b c, d e f)\nResult: a b c d e f\njoin((a b c), (d e f), \n    comma)\nResult: a, b, c, d, e, f\njoin(a b c, d e f, $bracketed: true)\nResult: \n    [a b c d e f]\nlength(\nlist\n)\nReturns the length of the list.\nExample:\nlength(a b c)\nResult: 3\nlist-separator(\nlist\n)\nReturns the list separator used, as a string. Can be either space or \n    comma.\nExample:\nlist-separator(a b c)\nResult: \"space\"\nlist-separator(a, b, c)\nResult: \"comma\"\nnth(\nlist\n,\nn\n)\nReturns the\nn\nth element in the list.\nExample:\nnth(a b c, 3)\nResult: c\nset-nth(\nlist\n,\nn\n,\nvalue\n)\nSets the\nn\nth list element to the\nvalue\nspecified.\nExample:\nset-nth(a b c, 2, x)\nResult: a x c\nzip(\nlists\n)\nCombines lists into a single multidimensional list.\nExample:\nzip(1px 2px 3px, solid dashed dotted, red green blue)\nResult: 1px \n    solid red, 2px dashed green, 3px dotted blue\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a5cfc369-28d7-4aec-83f1-85e9475d1ffe",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "3623cda2-bf37-42ce-8543-0230a2b9a264",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "4bc8f847-0b22-4b96-a8ab-47e84cc778a6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Sass\nList Functions\n\nSass List Functions\nThe list functions?",
      "options": [
        "None of the above.",
        "immutable (they cannot change)",
        "used to access values in a list",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Sass\nList Functions\n\nSass List Functions\nThe list functions is 'used to access values in a list'."
    },
    {
      "question": "What is Sass lists?",
      "options": [
        "immutable (they cannot change)",
        "None of the above.",
        "used to access values in a list",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Sass lists is 'immutable (they cannot change)'."
    }
  ],
  "summary": "This tutorial covers SassList Functions concepts and techniques. You'll learn how to use SassList Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SassList Functions and how to apply it in your projects."
}