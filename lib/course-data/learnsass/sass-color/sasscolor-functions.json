{
  "id": "be8b8b95-839a-45c5-a46d-ae67fb561a2d",
  "title": "SassColor Functions",
  "slug": "sasscolor-functions",
  "metadata": {
    "description": "Learn about SassColor Functions with clear explanations and practical examples.",
    "keywords": [
      "color",
      "amount",
      "example",
      "alpha",
      "green",
      "blue",
      "result",
      "parameter",
      "lightness",
      "saturation"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSass",
    "subcategory": "Sass Color"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Sass\nColor Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Sass Color Functions\nWe have divided the color functions in Sass into three parts: Set color \nfunctions, Get color functions, and Manipulate color functions:\nSass Set Color Functions\nFunction\nDescription & Example\nrgb(\nred\n,\ngreen\n,\nblue\n)\nSets a color using the Red-Green-Blue (RGB) model. An RGB color value is \n    specified with: rgb(red, green, blue). Each parameter defines the intensity \n    of that color and can be an integer between 0 and 255, or a percentage value \n    (from 0% to 100%).\nExample:\nrgb(0, 0, 255); // rendered as blue because the \n    blue parameter is set to its highest value (255) and the others are set to 0\nrgba(\nred\n,\ngreen\n,\nblue\n,\nalpha\n)\nSets a color using the Red-Green-Blue-Alpha (RGBA) model. RGBA color \n    values are an extension of RGB color values with an alpha channel - which \n    specifies the opacity of the color. The alpha parameter is a number between \n    0.0 (fully transparent) and 1.0 (fully opaque).\nExample:\nrgba(0, 0, 255, 0.3); // rendered as blue with \n    opacity\nhsl(\nhue\n,\nsaturation\n,\nlightness\n)\nSets a color using the Hue-Saturation-Lightness (HSL) model - and \n    represents a cylindrical-coordinate representation of colors. Hue is a \n    degree on the color wheel (from 0 to 360) - 0 or 360 is red, 120 is green, \n    240 is blue. Saturation is a percentage value; 0% means a shade of gray and \n    100% is the full color. Lightness is also a percentage; 0% is black, 100% is \n    white.\nExample:\nhsl(120, 100%, 50%); // green\nhsl(120, 100%, \n    75%); // light green\nhsl(120, 100%, 25%); // dark green\nhsl(120, 60%, \n    70%); // pastel green\nhsla(\nhue\n,\nsaturation\n,\nlightness\n,\nalpha\n)\nSets a color using the Hue-Saturation-Lightness-Alpha (HSLA) model. HSLA \n    color values are an extension of HSL color values with an alpha channel - \n    which specifies the opacity of the color. The alpha parameter is a number \n    between 0.0 (fully transparent) and 1.0 (fully opaque).\nExample:\nhsl(120, 100%, 50%, 0.3); // green with opacity\nhsl(120, 100%, 75%, 0.3); // light green with opacity\ngrayscale(\ncolor\n)\nSets a gray color with the same lightness as\ncolor\n.\nExample:\ngrayscale(#7fffd4);\nResult: #c6c6c6\ncomplement(\ncolor\n)\nSets a color that is the complementary color of\ncolor\n.\nExample:\ncomplement(#7fffd4);\nResult: #ff7faa\ninvert(\ncolor\n,\nweight\n)\nSets a color that is the inverse or negative color of\ncolor\n. \n    The\nweight\nparameter is optional and must be a number between 0% \n    and 100%. Default is 100%.\nExample:\ninvert(white);\nResult: black\nSass Get Color Functions\nFunction\nDescription & Example\nred(\ncolor\n)\nReturns the red value of\ncolor\nas a number between 0 and 255.\nExample:\nred(#7fffd4);\nResult: 127\nred(red);\nResult: \n    255\ngreen(\ncolor\n)\nReturns the green value of\ncolor\nas a number between 0 and 255.\nExample:\ngreen(#7fffd4);\nResult: 255\ngreen(blue);\nResult: \n    0\nblue(\ncolor\n)\nReturns the blue value of\ncolor\nas a number between 0 and 255.\nExample:\nblue(#7fffd4);\nResult: 212\nblue(blue);\nResult: 255\nhue(\ncolor\n)\nReturns the hue of\ncolor\nas a number between 0deg and 360deg.\nExample:\nhue(#7fffd4);\nResult: 160deg\nsaturation(\ncolor\n)\nReturns the HSL saturation of\ncolor\nas a number between 0% and \n    100%.\nExample:\nsaturation(#7fffd4);\nResult: 100%\nlightness(\ncolor\n)\nReturns the HSL lightness of\ncolor\nas a number between 0% and \n    100%.\nExample:\nlightness(#7fffd4);\nResult: 74.9%\nalpha(\ncolor\n)\nReturns the alpha channel of\ncolor\nas a number between 0 and 1.\nExample:\nalpha(#7fffd4);\nResult: 1\nopacity(\ncolor\n)\nReturns the alpha channel of\ncolor\nas a number between 0 and 1.\nExample:\nopacity(rgba(127, 255, 212, 0.5));\nResult: \n    0.5\nSass Manipulate Color Functions\nFunction\nDescription & Example\nmix(\ncolor1\n,\ncolor2\n,\nweight\n)\nCreates a color that is a mix of\ncolor1\nand\ncolor2\n. \n    The\nweight\nparameter must be between 0% and 100%. A larger weight \n    means that more of color1 should be used. A smaller weight means that more \n    of color2 should be used. Default is 50%.\nadjust-hue(\ncolor\n,\ndegrees\n)\nAdjusts the\ncolor\n's hue with a degree from -360deg to 360deg.\nExample:\nadjust-hue(#7fffd4, 80deg);\nResult: #8080ff\nadjust-color(\ncolor\n,\nred\n,\ngreen\n,\nblue\n,\nhue\n,\nsaturation\n,\nlightness\n,\nalpha\n)\nAdjusts one or more parameters by the specified amount. This function \n    adds or subtracts the specified amount to/from the existing color value.\nExample:\nadjust-color(#7fffd4, blue: 25);\nResult:\nchange-color(\ncolor\n,\nred\n,\ngreen\n,\nblue\n,\nhue\n,\nsaturation\n,\nlightness\n,\nalpha\n)\nSets one or more parameters of a\ncolor\nto new values.\nExample:\nchange-color(#7fffd4, red: 255);\nResult: \n    #ffffd4\nscale-color(\ncolor\n,\nred\n,\ngreen\n,\nblue\n,\nsaturation\n,\nlightness\n,\nalpha\n)\nScales one or more parameters of\ncolor\n.\nrgba(\ncolor\n,\nalpha\n)\nCreates a new color of\ncolor\nwith the given\nalpha\nchannel.\nExample:\nrgba(#7fffd4, 30%);\nResult: \n    rgba(127, 255, 212, 0.3)\nlighten(\ncolor\n,\namount\n)\nCreates a lighter color of\ncolor\nwith an\namount\nbetween 0% and 100%. The amount parameter increases the HSL lightness by \n    that percent.\ndarken(\ncolor\n,\namount\n)\nCreates a darker color of\ncolor\nwith an\namount\nbetween \n    0% and 100%. The amount parameter decreases the HSL lightness by that \n    percent.\nsaturate(\ncolor\n,\namount\n)\nCreates a more saturated color of\ncolor\nwith an\namount\nbetween 0% and 100%. The amount parameter increases the HSL saturation by \n    that percent.\ndesaturate(\ncolor\n,\namount\n)\nCreates a less saturated color of\ncolor\nwith an\namount\nbetween 0% and 100%. The amount parameter decreases the HSL saturation by \n    that percent.\nopacify(\ncolor\n,\namount\n)\nCreates a more opaque color of\ncolor\nwith an\namount\nbetween 0 and 1. The amount parameter increases the alpha channel by that \n    amount.\nfade-in(\ncolor\n,\namount\n)\nCreates a more opaque color of\ncolor\nwith an\namount\nbetween 0 and 1. The amount parameter increases the alpha channel by that \n    amount.\ntransparentize(\ncolor\n,\namount\n)\nCreates a more transparent color of\ncolor\nwith an\namount\nbetween 0 and 1. The amount parameter decreases the alpha channel by that \n    amount.\nfade-out(\ncolor\n,\namount\n)\nCreates a more transparent color of\ncolor\nwith an\namount\nbetween 0 and 1. The amount parameter decreases the alpha channel by that \n    amount.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "f15888d6-2d97-4dd0-a470-ff6bf550e6c8",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "81677522-7d0a-4b09-b6d4-4aa5c49eb3ff",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "8892d7c9-c777-4146-8c23-85cd1eb1660b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is An RGB color value?",
      "options": [
        "None of the above.",
        "specified with: rgb(red",
        "set to its highest value (255) and the others are set to 0\nrgba(\nred",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of An RGB color value is 'specified with: rgb(red'."
    },
    {
      "question": "What is rendered as blue because the \n    blue parameter?",
      "options": [
        "set to its highest value (255) and the others are set to 0\nrgba(\nred",
        "None of the above.",
        "specified with: rgb(red",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of rendered as blue because the \n    blue parameter is 'set to its highest value (255) and the others are set to 0\nrgba(\nred'."
    }
  ],
  "summary": "This tutorial covers SassColor Functions concepts and techniques. You'll learn how to use SassColor Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SassColor Functions and how to apply it in your projects."
}