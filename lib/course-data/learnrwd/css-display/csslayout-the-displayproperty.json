{
  "id": "32caf16a-01dd-44c6-a4b8-511871a8517e",
  "title": "CSSLayout - The displayProperty",
  "slug": "csslayout-the-displayproperty",
  "metadata": {
    "description": "Learn about CSSLayout - The displayProperty with clear explanations and practical examples.",
    "keywords": [
      "c",
      "element",
      "display",
      "inline",
      "block",
      "elements",
      "property",
      "table",
      "example",
      "none",
      "hidden"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Display"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nLayout - The display\nProperty",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\ndisplay\nproperty is the most important CSS property for controlling layout.\nThe display Property\nThe\ndisplay\nproperty is used to specify how an element is shown on a web page.\nEvery HTML element has a default display value, depending on what type of element it is. The default display value for most elements is\nblock\nor\ninline\n.\nThe\ndisplay\nproperty is used to change the default display behavior of HTML elements.\nBlock-level Elements\nA block-level element ALWAYS starts on a new line and takes up the full width available \n(stretches out to the left and right as far as it can).\nThe <div> element is a block-level element.\nExamples of block-level elements:\n<div>\n<h1> - <h6>\n<p>\n<form>\n<header>\n<footer>\n<section>\nInline Elements\nAn inline element DOES NOT start on a new line and only takes up as much width as necessary.\nThis is\nan inline <span> element \ninside\na paragraph.\nExamples of inline elements:\n<span>\n<a>\n<img>\nThe display Property Values\nThe\ndisplay\nproperty has many values:\nValue\nDescription\ninline\nDisplays an element as an inline element\nblock\nDisplays an element as a block element\ncontents\nMakes the container disappear, making the child elements children of the \n    element the \nflex\nDisplays an element as a block-level flex container\ngrid\nDisplays an element as a block-level grid container\ninline-block\nDisplays an element as an inline-level block container. The element itself is formatted as an inline \n    element, but you can apply height and width values\ninline-flex\nDisplays an element as an inline-level flex container\ninline-grid\nDisplays an element as an inline-level grid container\ninline-table\nThe element is displayed as an inline-level table\nlist-item\nLet the element behave like a <li> element\nrun-in\nDisplays an element as either block or inline, depending on context\ntable\nLet the element behave like a <table> element\ntable-caption\nLet the element behave like a <caption> element\ntable-column-group\nLet the element behave like a <colgroup> element\ntable-header-group\nLet the element behave like a <thead> element\ntable-footer-group\nLet the element behave like a <tfoot> element\ntable-row-group\nLet the element behave like a <tbody> element\ntable-cell\nLet the element behave like a <td> element\ntable-column\nLet the element behave like a <col> element\ntable-row\nLet the element behave like a <tr> element\nnone\nThe element is completely removed\ninitial\nSets this property to its default value\ninherit\nInherits this property from its parent element\nDisplay: none;\ndisplay: none;\nis commonly used with JavaScript to hide \nand show elements without deleting and recreating them. Take a look at our last \nexample on this page if you want to know how this can be achieved.\nThe\n<script>\nelement uses\ndisplay: none;\nas default.\nClick to show panel\nThis panel contains a <div> element, which is hidden by default (\ndisplay: none;\n).\nIt is styled with CSS, and we use JavaScript to show it (change it to (\ndisplay: block;\n).\nOverride The Default Display Value\nAs mentioned, every element has a default display value. However, you can \noverride this.\nChanging an inline element to a block element, or vice versa, can be useful for \nmaking the page look a specific way, and still follow the web standards.\nA common example is making inline\n<li>\nelements for horizontal menus:\nExample\nli {\ndisplay: inline;\n}\n\nNote:\nSetting the display property of an element only changes\nhow the element is displayed\n, \nNOT what kind of element it is. So, an inline element with\ndisplay: block;\nis not allowed\nto have other block elements inside it.\nThe following example displays <span> elements as block elements:\nExample\nspan {\ndisplay: block;\n}\n\nThe following example displays <a> elements as block elements:\nExample\na {\ndisplay: block;\n}\n\nHide an Element - display:none or visibility:hidden?\ndisplay:none\nRemove\nvisibility:hidden\nHide\nReset\nReset All\nHiding an element can be done by setting the\ndisplay\nproperty to\nnone\n. \nThe element will be hidden, and the page will be displayed as if the element is not \nthere:\nExample\nh1.hidden {\ndisplay: none;\n}\n\nvisibility:hidden;\nalso hides an element.\nHowever, the element will still take up the same space \nas before. The element will be hidden, but still affect the layout:\nExample\nh1.hidden {\nvisibility: hidden;\n}\n\nMore Examples\nDifferences between display: none; and visibility: hidden;\nThis example demonstrates display: none; versus visibility: hidden;\nShowing more display types\nThis example demonstrates some more display types.\nUsing CSS together with JavaScript to show content\nThis example demonstrates how to use CSS and JavaScript to show an element on click.\nCSS Display/Visibility Properties\nProperty\nDescription\ndisplay\nSpecifies how an element should be displayed\nvisibility\nSpecifies whether or not an element should be visible\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "li {\ndisplay: inline;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "span {\ndisplay: block;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "a {\ndisplay: block;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "h1.hidden {\ndisplay: none;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "h1.hidden {\nvisibility: hidden;\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "li {\n# TODO: Complete this line\n}",
      "solution": "li {\ndisplay: inline;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "span {\n# TODO: Complete this line\n}",
      "solution": "span {\ndisplay: block;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "e7581505-16ae-4e88-b60c-bda32ebd27ea",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c251ea31-c31f-401e-8291-03bf229918d6",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9ff0ba29-525a-4239-aa21-cc28f48464f5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The display\nProperty\n\nThe\ndisplay\nproperty?",
      "options": [
        "shown on a web page",
        "the most important CSS property for controlling layout",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The display\nProperty\n\nThe\ndisplay\nproperty is 'the most important CSS property for controlling layout'."
    },
    {
      "question": "What is The display Property\nThe\ndisplay\nproperty is used to specify how an element?",
      "options": [
        "shown on a web page",
        "the most important CSS property for controlling layout",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The display Property\nThe\ndisplay\nproperty is used to specify how an element is 'shown on a web page'."
    }
  ],
  "summary": "This tutorial covers CSSLayout - The displayProperty concepts and techniques. You'll learn how to use CSSLayout - The displayProperty effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSLayout - The displayProperty and how to apply it in your projects."
}