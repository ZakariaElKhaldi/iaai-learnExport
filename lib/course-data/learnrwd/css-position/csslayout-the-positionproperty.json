{
  "id": "12b795c7-e05c-4317-86c1-750423d58b3f",
  "title": "CSSLayout - The positionProperty",
  "slug": "csslayout-the-positionproperty",
  "metadata": {
    "description": "Learn about CSSLayout - The positionProperty with clear explanations and practical examples.",
    "keywords": [
      "c",
      "position",
      "element",
      "positioned",
      "relative",
      "right",
      "left",
      "fixed",
      "bottom",
      "static",
      "absolute"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Position"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nLayout - The position\nProperty",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nposition\nproperty specifies the type of \npositioning method used for an element (static, relative, fixed, absolute or \nsticky).\nThe position Property\nThe\nposition\nproperty specifies the type of positioning method used for an element.\nThere are five different position values:\nstatic\nrelative\nfixed\nabsolute\nsticky\nElements are then positioned using the top, bottom, left, and right \nproperties. However, these properties will not work unless the\nposition\nproperty is set first. They also work differently depending on the position \nvalue.\nposition: static;\nHTML elements are positioned static by default.\nStatic positioned elements are not affected by the top, bottom, left, and right properties.\nAn element with\nposition: static;\nis not positioned in any special way; it is \nalways positioned according to the normal flow of the page:\nThis <div> element has position: static;\nHere is the CSS that is used:\nExample\ndiv.static {\nposition: static;\nborder: 3px solid #73AD21;\n}\n\nposition: relative;\nAn element with\nposition: relative;\nis positioned relative to its normal position.\nSetting the top, right, bottom, and left properties of a relatively-positioned element will cause\nit to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the \nelement.\nThis <div> element has position: relative;\nHere is the CSS that is used:\nExample\ndiv.relative {\nposition: relative;\nleft: 30px;\nborder: 3px solid #73AD21;\n}\n\nposition: fixed;\nAn element with\nposition: fixed;\nis positioned relative to the viewport, which means it always \nstays in the same place even if the page is scrolled. The top, \nright, bottom, and left properties are used to position the element.\nA fixed element does not leave a gap in the page where it would normally have been located.\nNotice the fixed element in the lower-right corner of the page. Here is the CSS that is used:\nExample\ndiv.fixed {\nposition: fixed;\nbottom: 0;\nright: 0;\nwidth: \n300px;\nborder: 3px solid #73AD21;\n}\n\nThis <div> element has\nposition: fixed;\nposition: absolute;\nAn element with\nposition: absolute;\nis positioned relative to the nearest positioned ancestor \n(instead of positioned relative to the viewport, like fixed).\nHowever; if an absolute positioned element has no positioned ancestors, \nit uses the document body, and moves along with page scrolling.\nNote:\nAbsolute positioned elements are removed from the normal flow, and can overlap elements.\nHere is a simple example:\nThis <div> element has position: relative;\nThis <div> element has position: absolute;\nHere is the CSS that is used:\nExample\ndiv.relative {\nposition: relative;\nwidth: 400px;\nheight: 200px;\nborder: 3px solid #73AD21;\n}\ndiv.absolute {\nposition: absolute;\ntop: 80px;\nright: 0;\nwidth: 200px;\nheight: 100px;\nborder: 3px solid #73AD21;\n}\n\nposition: sticky;\nAn element with\nposition: sticky;\nis positioned based on the user's scroll position.\nA sticky element toggles between\nrelative\nand\nfixed\n, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed).\nNote:\nYou must specify at least one of\ntop\n,\nright\n,\nbottom\nor\nleft\nfor \nsticky positioning to work.\nIn this example, the sticky element sticks to the top of the page (\ntop: 0\n), when you reach its scroll position.\nExample\ndiv.sticky {\nposition: \n  sticky;\ntop: 0;\nbackground-color: green;\nborder: 2px solid #4CAF50;\n}\n\nPositioning Text In an Image\nHow to position text over an image:\nExample\nBottom Left\nTop Left\nTop Right\nBottom Right\nCentered\n\nTop Left \u00bb\nTop Right \u00bb\nBottom Left \u00bb\nBottom Right \u00bb\nCentered \u00bb\nMore Examples\nSet the shape of an element\nThis example demonstrates how to set the shape of an element. The element is clipped into this shape, and displayed.\nAll CSS Positioning Properties\nProperty\nDescription\nbottom\nSets the bottom margin edge for a positioned box\nclip\nClips an absolutely positioned element\nleft\nSets the left margin edge for a positioned box\nposition\nSpecifies the type of positioning for an element\nright\nSets the right margin edge for a positioned box\ntop\nSets the top margin edge for a positioned box\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "div.static {\nposition: static;\nborder: 3px solid #73AD21;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "div.relative {\nposition: relative;\nleft: 30px;\nborder: 3px solid #73AD21;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "div.fixed {\nposition: fixed;\nbottom: 0;\nright: 0;\nwidth: \n300px;\nborder: 3px solid #73AD21;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "div.relative {\nposition: relative;\nwidth: 400px;\nheight: 200px;\nborder: 3px solid #73AD21;\n}\ndiv.absolute {\nposition: absolute;\ntop: 80px;\nright: 0;\nwidth: 200px;\nheight: 100px;\nborder: 3px solid #73AD21;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "div.sticky {\nposition: \n  sticky;\ntop: 0;\nbackground-color: green;\nborder: 2px solid #4CAF50;\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "div.static {\nposition: static;\n# TODO: Complete this line\n}",
      "solution": "div.static {\nposition: static;\nborder: 3px solid #73AD21;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "div.relative {\nposition: relative;\nleft: 30px;\nborder: 3px solid #73AD21;\n# TODO: Complete this line",
      "solution": "div.relative {\nposition: relative;\nleft: 30px;\nborder: 3px solid #73AD21;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "e19c8638-e31a-4c69-aca6-efcad3720f0d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "53fbdbd8-150f-4546-9761-9a132f2c531e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "083ea6a9-a534-424a-9322-9bb593299dc5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "None of the above.",
        "five different position values:\nstatic\nrelative\nfixed\nabsolute\nsticky\nElements are then positioned using the top",
        "set first"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of There is 'five different position values:\nstatic\nrelative\nfixed\nabsolute\nsticky\nElements are then positioned using the top'."
    },
    {
      "question": "What is these properties will not work unless the\nposition\nproperty?",
      "options": [
        "five different position values:\nstatic\nrelative\nfixed\nabsolute\nsticky\nElements are then positioned using the top",
        "None of the above.",
        "None of the above.",
        "set first"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of these properties will not work unless the\nposition\nproperty is 'set first'."
    }
  ],
  "summary": "This tutorial covers CSSLayout - The positionProperty concepts and techniques. You'll learn how to use CSSLayout - The positionProperty effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSLayout - The positionProperty and how to apply it in your projects."
}