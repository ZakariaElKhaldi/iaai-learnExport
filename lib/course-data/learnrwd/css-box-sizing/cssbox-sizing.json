{
  "id": "35df2f58-bb71-45ee-aedb-d41d266730bf",
  "title": "CSSBox Sizing",
  "slug": "cssbox-sizing",
  "metadata": {
    "description": "Learn about CSSBox Sizing with clear explanations and practical examples.",
    "keywords": [
      "c",
      "border",
      "width",
      "sizing",
      "height",
      "element",
      "padding",
      "property",
      "elements",
      "example",
      "solid"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Box Sizing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nBox Sizing",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "CSS Box Sizing\nThe CSS\nbox-sizing\nproperty allows us to include the padding and border in \nan element's total width and height.\nWithout the CSS box-sizing Property\nBy default, the width and height of an element is calculated like this:\nwidth + padding + border = actual width of an element\nheight + padding + border = actual height of an element\nThis means: When you set the width/height of an element, the element often appears \nbigger than you have set (because the element's border and padding are added to the element's specified width/height).\nThe following illustration shows two <div> elements with the same \nspecified width and height:\nThis div is smaller (width is 300px and height is 100px).\nThis div is bigger (width is also 300px and height is 100px).\nThe two <div> elements above end up with different sizes in the result \n(because div2 has a padding \nspecified):\nExample\n.div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\n}\n\nThe\nbox-sizing\nproperty solves \nthis problem.\nWith the CSS box-sizing Property\nThe\nbox-sizing\nproperty allows us to include the padding and border in \nan element's total width and height.\nIf you set\nbox-sizing: border-box;\non an element, padding and border are \nincluded in the width and height:\nBoth divs are the same size now!\nHooray!\nHere is the same example as above, with\nbox-sizing: border-box;\nadded to both <div> elements:\nExample\n.div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\nbox-sizing: border-box;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\nbox-sizing: border-box;\n}\n\nSince the result of using the\nbox-sizing: border-box;\nis so much better, many developers want all elements on their \npages to work this way.\nThe code below ensures that all elements are sized in this more intuitive way. \nMany browsers already use\nbox-sizing: border-box;\nfor \nmany form elements (but not all - which is why \ninputs and text areas look different at width: 100%;).\nApplying this to all elements is safe and wise:\nExample\n* {\nbox-sizing: border-box;\n}\n\nCSS Box Sizing Property\nProperty\nDescription\nbox-sizing\nDefines how the width and height of an element are calculated: should \n    they include padding and borders, or not\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": ".div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": ".div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\nbox-sizing: border-box;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\nbox-sizing: border-box;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "* {\nbox-sizing: border-box;\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": ".div1 {\n# TODO: Complete this line\nheight: \n100px;\nborder: 1px solid blue;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\n}",
      "solution": ".div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": ".div1 {\nwidth: 300px;\nheight: \n100px;\n# TODO: Complete this line\nbox-sizing: border-box;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\nbox-sizing: border-box;\n}",
      "solution": ".div1 {\nwidth: 300px;\nheight: \n100px;\nborder: 1px solid blue;\nbox-sizing: border-box;\n}\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\nbox-sizing: border-box;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "7a1ce4b9-99b0-4853-87a5-f863db02f953",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "566ebdc8-ac28-465b-a584-b2335f238e91",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6894b460-4d6e-4a0c-9c25-7f8c6b2a8c9e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the width and height of an element?",
      "options": [
        "smaller (width is 300px and height is 100px)",
        "None of the above.",
        "calculated like this:\nwidth + padding + border = actual width of an element\nheight + padding + border = actual height of an element\nThis means: When you set the width/height of an element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of the width and height of an element is 'calculated like this:\nwidth + padding + border = actual width of an element\nheight + padding + border = actual height of an element\nThis means: When you set the width/height of an element'."
    },
    {
      "question": "What is This div?",
      "options": [
        "calculated like this:\nwidth + padding + border = actual width of an element\nheight + padding + border = actual height of an element\nThis means: When you set the width/height of an element",
        "smaller (width is 300px and height is 100px)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of This div is 'smaller (width is 300px and height is 100px)'."
    }
  ],
  "summary": "This tutorial covers CSSBox Sizing concepts and techniques. You'll learn how to use CSSBox Sizing effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSBox Sizing and how to apply it in your projects."
}