{
  "id": "69382137-3e9d-45b1-864a-ae55c5c6720f",
  "title": "CSSCounters",
  "slug": "csscounters",
  "metadata": {
    "description": "Learn about CSSCounters with clear explanations and practical examples.",
    "keywords": [
      "c",
      "counter",
      "section",
      "counters",
      "content",
      "value",
      "reset",
      "increment",
      "element",
      "subsection",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Counters"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nCounters",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Pizza\nHamburger\nHotdogs\nCSS counters are \"variables\" maintained by CSS whose values can \nbe incremented by CSS rules (to track how many times they are used). Counters \nlet you adjust the appearance of content based on its placement in the document.\nAutomatic Numbering With Counters\nCSS counters are like \"variables\". The variable values can be incremented by CSS rules \n(which will \ntrack how many times they are used).\nTo work with CSS counters we will use the following properties:\ncounter-reset\n- Creates or resets a counter\ncounter-increment\n- Increments a counter value\ncontent\n- Inserts generated \ncontent\ncounter()\nor\ncounters()\nfunction - Adds the \nvalue of a counter to an element\nTo use a CSS counter, it must first be created with\ncounter-reset\n.\nThe following example creates a counter for the page (in the body selector), \nthen increments the counter value for each <h2> element and adds \"Section <\nvalue of the counter\n>:\" \nto the beginning of each <h2> element:\nExample\nbody {\ncounter-reset: section;\n}\nh2::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \": \";\n}\n\nNesting Counters\nThe following example creates one counter for the page (section) and one \ncounter for each <h1> element (subsection). The \"section\" counter will be \ncounted for each <h1> element with \"Section <\nvalue of the \nsection counter\n>.\", and the \"subsection\" counter will be counted \nfor each <h2> element with \"<\nvalue of the section counter\n>.<\nvalue of the \nsubsection counter\n>\":\nExample\nbody {\ncounter-reset: section;\n}\nh1 {\ncounter-reset: subsection;\n}\nh1::before {\ncounter-increment: \nsection;\ncontent: \"Section \" counter(section) \". \";\n}\nh2::before {\ncounter-increment: subsection;\ncontent: \ncounter(section) \".\" counter(subsection) \" \";\n}\n\nA counter can also be useful to make outlined lists because a new \ninstance of a counter is automatically created in child elements. Here we use the\ncounters()\nfunction to insert a string between different levels of nested \ncounters:\nExample\nol {\ncounter-reset: section;\nlist-style-type: none;\n}\nli::before {\ncounter-increment: section;\ncontent: counters(section,\".\") \" \";\n}\n\nCSS Counter Properties\nProperty\nDescription\ncontent\nUsed with the ::before and ::after pseudo-elements, to insert generated content\ncounter-increment\nIncrements one or more counter values\ncounter-reset\nCreates or resets one or more counters\ncounter()\nReturns the current value of the named counter\ncounters()\nReturns the current values of the named and nested counters\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "body {\ncounter-reset: section;\n}\nh2::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \": \";\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "body {\ncounter-reset: section;\n}\nh1 {\ncounter-reset: subsection;\n}\nh1::before {\ncounter-increment: \nsection;\ncontent: \"Section \" counter(section) \". \";\n}\nh2::before {\ncounter-increment: subsection;\ncontent: \ncounter(section) \".\" counter(subsection) \" \";\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "ol {\ncounter-reset: section;\nlist-style-type: none;\n}\nli::before {\ncounter-increment: section;\ncontent: counters(section,\".\") \" \";\n}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "body {\ncounter-reset: section;\n# TODO: Complete this line\nh2::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \": \";\n}",
      "solution": "body {\ncounter-reset: section;\n}\nh2::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \": \";\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "body {\ncounter-reset: section;\n# TODO: Complete this line\nh1 {\ncounter-reset: subsection;\n}\nh1::before {\ncounter-increment: \nsection;\ncontent: \"Section \" counter(section) \". \";\n}\nh2::before {\ncounter-increment: subsection;\ncontent: \ncounter(section) \".\" counter(subsection) \" \";\n}",
      "solution": "body {\ncounter-reset: section;\n}\nh1 {\ncounter-reset: subsection;\n}\nh1::before {\ncounter-increment: \nsection;\ncontent: \"Section \" counter(section) \". \";\n}\nh2::before {\ncounter-increment: subsection;\ncontent: \ncounter(section) \".\" counter(subsection) \" \";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "baa4845e-57b8-4640-b14d-c00800fa98f8",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2eb0231c-fdfe-43c4-bde5-9dfe54bdef0b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "54af7413-5b66-4b9b-89c0-0067ab34e377",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is CSS\nCounters\n\nPizza\nHamburger\nHotdogs\nCSS counters?",
      "options": [
        "like \"variables\"",
        "None of the above.",
        "\"variables\" maintained by CSS whose values can \nbe incremented by CSS rules (to track how many times they are used)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of CSS\nCounters\n\nPizza\nHamburger\nHotdogs\nCSS counters is '\"variables\" maintained by CSS whose values can \nbe incremented by CSS rules (to track how many times they are used)'."
    },
    {
      "question": "What is Automatic Numbering With Counters\nCSS counters?",
      "options": [
        "like \"variables\"",
        "None of the above.",
        "\"variables\" maintained by CSS whose values can \nbe incremented by CSS rules (to track how many times they are used)",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Automatic Numbering With Counters\nCSS counters is 'like \"variables\"'."
    }
  ],
  "summary": "This tutorial covers CSSCounters concepts and techniques. You'll learn how to use CSSCounters effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSCounters and how to apply it in your projects."
}