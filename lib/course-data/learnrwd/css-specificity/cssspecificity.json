{
  "id": "ab8b43bb-15a5-4bd2-87ca-cf57e980b3bf",
  "title": "CSSSpecificity",
  "slug": "cssspecificity",
  "metadata": {
    "description": "Learn about CSSSpecificity with clear explanations and practical examples.",
    "keywords": [
      "c",
      "color",
      "style",
      "selector",
      "example",
      "element",
      "html",
      "background",
      "specificity",
      "class",
      "priority"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Specificity"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nSpecificity",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "CSS\nSpecificity\n\nWhat is Specificity",
      "content": "?\nIf there are two or more CSS rules that point to the same \nelement, the selector with the highest specificity will \"win\", and its \nstyle declaration will be applied to that HTML element.\nThink of specificity as a hierarchy that determines which style declaration \nis ultimately applied to an element.\nLook at the following examples:\nExample 1\nHere, we have used the \"p\" element as selector, and specified a red color \nfor this element.\nResult:\nThe text will be red:\n<html>\n<head>\n<style>\np {color: red;}\n</style>\n</head>\n<body>\n<p>Hello World!</p>\n</body>\n</html>\n\nNow, look at example 2:\nExample 2\nHere, we have added a class selector (named \"test\"), and \nspecified a green \ncolor for this class.\nResult:\nThe text will be green (even though we have specified \na red \ncolor for the element selector \"p\"). This is because the class selector \nhas \nhigher priority:\n<html>\n<head>\n<style>\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p class=\"test\">Hello World!</p>\n</body>\n</html>\n\nNow, look at example 3:\nExample 3\nHere, we have added the id selector (named \"demo\").\nResult:\nThe text will be \nblue, because the id selector has higher priority:\n<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p id=\"demo\" class=\"test\">Hello \n  World!</p>\n</body>\n</html>\n\nNow, look at example 4:\nExample 4\nHere, we have added an inline style for the \"p\" element.\nResult:\nThe \ntext will be pink, because the inline style has highest priority:\n<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p id=\"demo\" class=\"test\" \n  style=\"color: pink;\">Hello World!</p>\n</body>\n</html>\n\nSpecificity Hierarchy\nEvery CSS selector has a position in the specificity hierarchy.\nPriority\nExample\nDescription\nInline style\n<h1 style=\"color: pink;\">\nHighest priority, directly applied with the style attribute\nId selectors\n#navbar\nSecond highest priority, identified by the unique id attribute of an \n    element\nClasses and pseudo-classes\n.test, :hover\nThird highest priority, targeted using class names\nAttributes\n[type=\"text\"]\nLow priority, applies to attributes\nElements and pseudo-elements\nh1, ::before, ::after\nLowest priority, applies to HTML elements and pseudo-elements\nMore Specificity Rules Examples\nEqual specificity: the latest rule wins\n- \nIf the same rule is written twice into the external style sheet, then \nthe latest rule wins:\nExample\nh1 {background-color: yellow;}\nh1 {background-color: red;}",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "ID selectors have a higher specificity than attribute selectors",
      "content": "- Look at the following three code lines:\nExample\ndiv#myDiv {background-color: green;}\n#myDiv {background-color: yellow;}\ndiv[id=myDiv] {background-color: blue;}\n\nthe first rule is more specific than the other two, and will therefore be applied.\nContextual selectors are more specific than a single element \nselector -\nThe embedded style sheet is closer to the element to be styled. So in the \nfollowing situation\nExample\n/*From external CSS file:*/\n#content h1 {background-color: red;}\n/*In HTML file:*/\n<style>\n#content h1 {background-color: \nyellow;}\n</style>\nthe last rule will be applied.",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "A class selector beats any number of element selectors",
      "content": "- a class selector such as .intro beats h1, p, div, etc:\nExample\n.intro {background-color: yellow;}\nh1 {background-color: \n  red;}\n\nThe universal selector (*) and inherited values\n- \nThe universal selector (*) and inherited values do not impact the specificity \nweight value:\nExample\n* {background-color: yellow;}\nh1 {background-color: red;}\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 5,
      "code": "<html>\n<head>\n<style>\np {color: red;}\n</style>\n</head>\n<body>\n<p>Hello World!</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 6,
      "code": "<html>\n<head>\n<style>\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p class=\"test\">Hello World!</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example 3",
      "content": "",
      "order": 7,
      "code": "<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p id=\"demo\" class=\"test\">Hello \n  World!</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example 3"
    },
    {
      "type": "code_example",
      "title": "Example 4",
      "content": "",
      "order": 8,
      "code": "<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p id=\"demo\" class=\"test\" \n  style=\"color: pink;\">Hello World!</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example 4"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "h1 {background-color: yellow;}\nh1 {background-color: red;}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "div#myDiv {background-color: green;}\n#myDiv {background-color: yellow;}\ndiv[id=myDiv] {background-color: blue;}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "/*From external CSS file:*/\n#content h1 {background-color: red;}\n/*In HTML file:*/\n<style>\n#content h1 {background-color: \nyellow;}\n</style>",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": ".intro {background-color: yellow;}\nh1 {background-color: \n  red;}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "* {background-color: yellow;}\nh1 {background-color: red;}",
      "language": "css",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<html>\n<head>\n<style>\np {color: red;}\n</style>\n</head>\n<body>\n# TODO: Complete this line\n</body>\n</html>",
      "solution": "<html>\n<head>\n<style>\np {color: red;}\n</style>\n</head>\n<body>\n<p>Hello World!</p>\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<html>\n<head>\n# TODO: Complete this line\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p class=\"test\">Hello World!</p>\n</body>\n</html>",
      "solution": "<html>\n<head>\n<style>\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n<p class=\"test\">Hello World!</p>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "7a92dab6-ab75-4afd-9489-9e31cd06caa5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ad6f4cec-0372-4757-bb2a-d896ff40fb5b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6369ce4b-9312-4c68-9ec6-35cfadd70a71",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is CSS\nSpecificity\n\nWhat?",
      "options": [
        "Specificity",
        "None of the above.",
        "None of the above.",
        "two or more CSS rules that point to the same \nelement"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of CSS\nSpecificity\n\nWhat is 'Specificity'."
    },
    {
      "question": "What is If there?",
      "options": [
        "None of the above.",
        "Specificity",
        "two or more CSS rules that point to the same \nelement",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of If there is 'two or more CSS rules that point to the same \nelement'."
    }
  ],
  "summary": "This tutorial covers CSSSpecificity concepts and techniques. You'll learn how to use CSSSpecificity effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSSpecificity and how to apply it in your projects."
}