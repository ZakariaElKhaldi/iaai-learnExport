{
  "id": "d2734ea1-e543-472c-a0e9-c3cc65b0ba85",
  "title": "CSSAuralReference",
  "slug": "cssauralreference",
  "metadata": {
    "description": "Learn about CSSAuralReference with clear explanations and practical examples.",
    "keywords": [
      "specifies",
      "voice",
      "speaking",
      "aural",
      "pause",
      "sound",
      "speak",
      "content",
      "element",
      "none"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRWD",
    "subcategory": "CSS Reference Aural"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "CSS\nAural\nReference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Aural Style Sheets\nAural style sheets use a combination of speech synthesis and sound effects to make the user listen to information, instead of reading information.\nAural presentation can be used:\nby blind people\nto help users learning to read\nto help users who have reading problems\nfor home entertainment\nin the car\nby print-impaired communities\nThe aural presentation converts the document to plain text and feed this to a\nscreen reader (a program that reads all the characters on the screen).\nAn example of an Aural style sheet:\n@media aural {\nh1, h2, h3, h4\n{\nvoice-family: male;\nrichness: 80;\ncue-before: url(\"beep.au\")\n}\n}\nThe example above will make the speech synthesizer play a sound, then speak the headers in a very rich male voice.\nNote:\nThe aural CSS media type is deprecated.\nCSS Aural Reference\nProperty\nDescription\nValues\nazimuth\nSets where the sound should come from\nangle\nleft-side\nfar-left\nleft\ncenter-left\ncenter\ncenter-right\nright\nfar-right\nright-side\nbehind\nleftwards\nrightwards\ncue\nSets the cue properties\n      in one declaration\ncue-before\ncue-after\ncue-after\nSpecifies a sound to be played after speaking an element's\n      content\nnone\nurl\ncue-before\nSpecifies a sound to be played before speaking an element's\n      content\nnone\nurl\nelevation\nSets where the sound should come from\nangle\nbelow\nlevel\nabove\nhigher\nlower\npause\nSets the pause properties\n      in one declaration\npause-before\npause-after\npause-after\nSpecifies a pause after speaking an element's content\ntime\n%\npause-before\nSpecifies a pause before speaking an element's content\ntime\n%\npitch\nSpecifies the speaking voice\nfrequency\nx-low\nlow\nmedium\nhigh\nx-high\npitch-range\nSpecifies the variation in the speaking voice. (Monotone\n      voice or animated voice?)\nnumber\nplay-during\nSpecifies a sound to be played while speaking an element's\n      content\nauto\nnone\nurl\nmix\nrepeat\nrichness\nSpecifies the richness of the speaking voice. (Rich voice\n      or thin voice?)\nnumber\nspeak\nSpecifies whether content will render aurally\nnormal\nnone\nspell-out\nspeak-header\nSpecifies how to handle table headers. Should the headers\n      be spoken before every cell, or only before a cell with a different header\n      than the \nalways\nonce\nspeak-numeral\nSpecifies how to speak numbers\ndigits\ncontinuous\nspeak-punctuation\nSpecifies how to speak punctuation characters\nnone\ncode\nspeech-rate\nSpecifies the speed of the speaking\nnumber\nx-slow\nslow\nmedium\nfast\nx-fast\nfaster\nslower\nstress\nSpecifies the \"stress\" in the speaking voice\nnumber\nvoice-family\nSpecifies the voice family of the speaking\nspecific-voice\ngeneric-voice\nvolume\nSpecifies the volume of the speaking\nnumber\n%\nsilent\nx-soft\nsoft\nmedium\nloud\nx-loud\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "8060e4ab-1a11-4b95-bc96-a3e35e599854",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d802f58b-7e02-4781-b463-bb423254b28b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "07cb34b8-e973-4d5c-87fa-427794e52bbc",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The aural CSS media type?",
      "options": [
        "deprecated",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The aural CSS media type is 'deprecated'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers CSSAuralReference concepts and techniques. You'll learn how to use CSSAuralReference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CSSAuralReference and how to apply it in your projects."
}