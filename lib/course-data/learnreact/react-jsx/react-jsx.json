{
  "id": "007c35bd-626a-4d86-b855-ca6fe0651c0f",
  "title": "React JSX",
  "slug": "react-jsx",
  "metadata": {
    "description": "Learn about React JSX with clear explanations and practical examples.",
    "keywords": [
      "example",
      "html",
      "const",
      "myelement",
      "write",
      "javascript",
      "react",
      "inside",
      "root",
      "expression"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React JSX"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React JSX",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is JSX?\nJSX stands for JavaScript XML.\nJSX allows us to write HTML in React.\nJSX makes it easier to write and add HTML in React.\nCoding JSX\nJSX allows us to write HTML elements in JavaScript and place them in the DOM \nwithout any\ncreateElement()\nand/or\nappendChild()\nmethods.\nJSX converts HTML tags into react elements.\nYou are not required to use JSX, but JSX makes it easier to write React applications.\nHere are two examples. The first uses JSX and the second does \nnot:\nExample 1\nJSX:\nconst myElement = <h1>I Love JSX!</h1>;\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(myElement);\nRun \nExample \u00bb\nExample 2\nWithout JSX:\nconst myElement = React.createElement('h1', {}, 'I do not use JSX!');\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(myElement);\nRun \nExample \u00bb\nAs you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.\nJSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.\nExpressions in JSX\nWith JSX you can write expressions inside curly braces\n{ }\n.\nThe expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:\nExample\nExecute the expression\n5 + 5\n:\nconst myElement = <h1>React is {5 + 5} times better with JSX</h1>;\nRun \nExample \u00bb\nInserting a Large Block of HTML\nTo write HTML on multiple lines, put the HTML inside parentheses:\nExample\nCreate a list with three list items:\nconst myElement = (\n  <ul>\n    <li>Apples</li>\n    <li>Bananas</li>\n    <li>Cherries</li>\n  </ul>\n);\nRun \nExample \u00bb\nOne Top Level Element\nThe HTML code must be wrapped in\nONE\ntop level element.\nSo if you like to write\ntwo\nparagraphs, you must put them inside a \nparent element, like a\ndiv\nelement.\nExample\nWrap two paragraphs inside one DIV element:\nconst myElement = (\n  <div>\n    <p>I am a paragraph.</p>\n    <p>I am a paragraph too.</p>\n  </div>\n);\nRun \nExample \u00bb\nJSX will throw an error if the HTML is not correct, or if the HTML misses a \nparent element.\nAlternatively, you can use a \"fragment\" to wrap multiple lines.\nThis will prevent unnecessarily adding extra nodes to the DOM.\nA fragment looks like an empty HTML tag:\n<></>\n.\nExample\nWrap two paragraphs inside a fragment:\nconst myElement = (\n  <>\n    <p>I am a paragraph.</p>\n    <p>I am a paragraph too.</p>\n  </>\n);\nRun \nExample \u00bb\nElements Must be Closed\nJSX follows XML rules, and therefore HTML elements must be properly closed.\nExample\nClose empty elements with\n/>\nconst myElement = <input type=\"text\" />;\nRun \nExample \u00bb\nJSX will throw an error if the HTML is not properly closed.\nAttribute class = className\nThe\nclass\nattribute is a much used attribute \nin HTML, but since JSX is rendered as JavaScript, and the\nclass\nkeyword is a reserved word in JavaScript, \nyou are not allowed to use it in JSX.\nUse attribute\nclassName\ninstead.\nJSX solved this by using\nclassName\ninstead. \nWhen JSX is rendered, it translates\nclassName\nattributes into\nclass\nattributes.\nExample\nUse attribute\nclassName\ninstead of\nclass\nin JSX:\nconst myElement = <h1 className=\"myclass\">Hello World</h1>;\nRun \nExample \u00bb\nConditions - if statements\nReact supports\nif\nstatements, but not\ninside\nJSX.\nTo be able to use conditional statements in JSX, you should put the\nif\nstatements outside of the JSX, or you could use a ternary expression instead:\nOption 1:\nWrite\nif\nstatements outside of the JSX code:\nExample\nWrite \"Hello\" if\nx\nis less than 10, otherwise \"Goodbye\":\nconst x = 5;\nlet text = \"Goodbye\";\nif (x < 10) {\n  text = \"Hello\";\n}\n\nconst myElement = <h1>{text}</h1>;\nRun \nExample \u00bb\nOption 2:\nUse ternary expressions instead:\nExample\nWrite \"Hello\" if\nx\nis less than 10, otherwise \"Goodbye\":\nconst x = 5;\n\nconst myElement = <h1>{(x) < 10 ? \"Hello\" : \"Goodbye\"}</h1>;\nRun \nExample \u00bb\nNote\nthat in order to embed a JavaScript expression inside JSX,\nthe JavaScript must be wrapped with curly braces,\n{}\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "12626b8b-1fc0-4e05-8c44-a9e21ff92b2d",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "09f8e3cc-a9df-4278-9171-d7c29e8f6faf",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b832ed6c-bc27-41ee-9730-4d010d8bd500",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is React JSX\n\nWhat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "JSX",
        "not required to use JSX"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of React JSX\n\nWhat is 'JSX'."
    },
    {
      "question": "What is You?",
      "options": [
        "not required to use JSX",
        "None of the above.",
        "JSX",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of You is 'not required to use JSX'."
    }
  ],
  "summary": "This tutorial covers React JSX concepts and techniques. You'll learn how to use React JSX effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React JSX and how to apply it in your projects."
}