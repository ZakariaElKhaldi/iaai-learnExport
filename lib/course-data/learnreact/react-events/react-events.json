{
  "id": "5fcf59bf-3369-453b-925d-16b836f0a797",
  "title": "React Events",
  "slug": "react-events",
  "metadata": {
    "description": "Learn about React Events with clear explanations and practical examples.",
    "keywords": [
      "event",
      "shoot",
      "button",
      "function",
      "react",
      "onclick",
      "root",
      "example",
      "football",
      "events"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React Events"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React Events",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Just like HTML DOM events, React can perform actions based on user events.\nReact has the same events as HTML: click, change, mouseover etc.\nAdding Events\nReact events are written in camelCase syntax:\nonClick\ninstead of\nonclick\n.\nReact event handlers are written inside curly \nbraces:\nonClick={shoot}\ninstead of\nonclick=\"shoot()\"\n.\nReact:\n<button onClick={shoot}>Take the Shot!</button>\nHTML:\n<button onclick=\"shoot()\">Take the Shot!</button>\nExample:\nPut the\nshoot\nfunction inside the\nFootball\ncomponent:\nfunction Football() {\n  const shoot = () => {\n    alert(\"Great Shot!\");\n  }\n\nreturn (\n    <button onClick={shoot}>Take the shot!</button>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Football />);\nRun \nExample \u00bb\nPassing Arguments\nTo pass an argument to an event handler, use an arrow function.\nExample:\nSend \"Goal!\" as a parameter to the\nshoot\nfunction, using arrow \n  function:\nfunction Football() {\n  const shoot = (a) => {\n    alert(a);\n  }\n\nreturn (\n    <button onClick={() => shoot(\"Goal!\")}>Take the shot!</button>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Football />);\nRun \nExample \u00bb\nReact Event Object\nEvent handlers have access to the React event that triggered the function.\nIn our example the event is the \"click\" event.\nExample:\nArrow Function: Sending the event object manually:\nfunction Football() {\n  const shoot = (a, b) => {\n    alert(b.type);\n    /*\n    'b' represents the React event that triggered the function,\n    in this case the 'click' event\n    */\n  }\n\nreturn (\n    <button onClick={(event) => shoot(\"Goal!\", event)}>Take the shot!</button>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Football />);\nRun \nExample \u00bb\nThis will come in handy when we look at\nForm\nin \na later chapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "35ff359d-da5f-48a6-8fda-8ebb0c79f040",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f708c853-21e0-47cb-86b0-cae50f283d3a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "87aa52d4-7275-49a0-a9b7-51f93015f1f1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Adding Events\nReact events?",
      "options": [
        "None of the above.",
        "written in camelCase syntax:\nonClick\ninstead of\nonclick",
        "written inside curly \nbraces:\nonClick={shoot}\ninstead of\nonclick=\"shoot()\"",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Adding Events\nReact events is 'written in camelCase syntax:\nonClick\ninstead of\nonclick'."
    },
    {
      "question": "What is React event handlers?",
      "options": [
        "None of the above.",
        "None of the above.",
        "written in camelCase syntax:\nonClick\ninstead of\nonclick",
        "written inside curly \nbraces:\nonClick={shoot}\ninstead of\nonclick=\"shoot()\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of React event handlers is 'written inside curly \nbraces:\nonClick={shoot}\ninstead of\nonclick=\"shoot()\"'."
    }
  ],
  "summary": "This tutorial covers React Events concepts and techniques. You'll learn how to use React Events effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React Events and how to apply it in your projects."
}