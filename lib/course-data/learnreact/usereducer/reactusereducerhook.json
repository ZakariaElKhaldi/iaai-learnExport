{
  "id": "2d569339-ce96-4414-965a-e8d875e8f84f",
  "title": "ReactuseReducerHook",
  "slug": "reactusereducerhook",
  "metadata": {
    "description": "Learn about ReactuseReducerHook with clear explanations and practical examples.",
    "keywords": [
      "todo",
      "usereducer",
      "complete",
      "state",
      "hook",
      "logic",
      "const",
      "return",
      "reducer",
      "todos"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "useReducer"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React\nuseReducer\nHook",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nuseReducer\nHook is similar to the\nuseState\nHook.\nIt allows for custom state logic.\nIf you find yourself keeping track of multiple pieces of state that rely on complex logic,\nuseReducer\nmay be useful.\nSyntax\nThe useReducer Hook accepts two arguments.\nuseReducer(<reducer>, <initialState>)\nThe\nreducer\nfunction contains your custom state logic and the\ninitialState\ncan be a simple value but generally will contain an object.\nThe\nuseReducer\nHook returns the current\nstate\nand a\ndispatch\nmethod.\nHere is an example of\nuseReducer\nin a counter app:\nExample:\nimport { useReducer } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst initialTodos = [\n  {\n    id: 1,\n    title: \"Todo 1\",\n    complete: false,\n  },\n  {\n    id: 2,\n    title: \"Todo 2\",\n    complete: false,\n  },\n];\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"COMPLETE\":\n      return state.map((todo) => {\n        if (todo.id === action.id) {\n          return { ...todo, complete: !todo.complete };\n        } else {\n          return todo;\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nfunction Todos() {\n  const [todos, dispatch] = useReducer(reducer, initialTodos);\n\nconst handleComplete = (todo) => {\n    dispatch({ type: \"COMPLETE\", id: todo.id });\n  };\n\nreturn (\n    <>\n      {todos.map((todo) => (\n        <div key={todo.id}>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={todo.complete}\n              onChange={() => handleComplete(todo)}\n            />\n            {todo.title}\n          </label>\n        </div>\n      ))}\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Todos />);\nRun \nExample \u00bb\nThis is just the logic to keep track of the todo complete status.\nAll of the logic to add, delete, and complete a todo could be contained within a single\nuseReducer\nHook by adding more actions.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "5629b510-6cee-4f4b-ade6-22aa055292b4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8f3707b6-125f-45bc-b028-977f4bc713cc",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9042f8e3-dbe1-409e-b3a1-b6425b3efa90",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is React\nuseReducer\nHook\n\nThe\nuseReducer\nHook?",
      "options": [
        "None of the above.",
        "None of the above.",
        "similar to the\nuseState\nHook",
        "an example of\nuseReducer\nin a counter app:\nExample:\nimport { useReducer } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst initialTodos = [\n  {\n    id: 1"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of React\nuseReducer\nHook\n\nThe\nuseReducer\nHook is 'similar to the\nuseState\nHook'."
    },
    {
      "question": "What is Here?",
      "options": [
        "an example of\nuseReducer\nin a counter app:\nExample:\nimport { useReducer } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst initialTodos = [\n  {\n    id: 1",
        "similar to the\nuseState\nHook",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Here is 'an example of\nuseReducer\nin a counter app:\nExample:\nimport { useReducer } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst initialTodos = [\n  {\n    id: 1'."
    }
  ],
  "summary": "This tutorial covers ReactuseReducerHook concepts and techniques. You'll learn how to use ReactuseReducerHook effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ReactuseReducerHook and how to apply it in your projects."
}