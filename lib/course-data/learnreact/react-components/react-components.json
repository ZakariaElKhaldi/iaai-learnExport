{
  "id": "eca3bb74-6f1b-449f-bf78-2d9f2a0e592e",
  "title": "React Components",
  "slug": "react-components",
  "metadata": {
    "description": "Learn about React Components with clear explanations and practical examples.",
    "keywords": [
      "component",
      "components",
      "function",
      "react",
      "root",
      "example",
      "return",
      "class",
      "render",
      "props"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React Components"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React Components",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Components are like functions that return HTML elements.\nReact Components\nComponents are independent and reusable bits of code.\nThey serve the same purpose as JavaScript functions,\nbut work in isolation and return HTML.\nComponents come in two types, Class components and Function components, in \nthis tutorial we will concentrate on Function components.\nIn older React code bases, you may find Class components primarily used.\nIt is now suggested to use Function components along with Hooks,\nwhich were added in React 16.8. There is an optional section on Class components for your reference.\nCreate Your First Component\nWhen creating a React component, the component's name\nMUST\nstart with an \nupper case letter.\nClass Component\nA class component must include the\nextends React.Component\nstatement. \nThis statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.\nThe component also requires a\nrender()\nmethod, \nthis method returns HTML.\nExample\nCreate a Class component called\nCar\nclass Car extends React.Component {\n  render() {\n    return <h2>Hi, I am a Car!</h2>;\n  }\n}\nFunction Component\nHere is the same example as above, but created using a Function component instead.\nA Function component also returns HTML, and behaves much the same way as a Class component,\nbut Function components can be written using much less code,\nare easier to understand, and will be preferred in this tutorial.\nExample\nCreate a Function component called\nCar\nfunction Car() {\n  return <h2>Hi, I am a Car!</h2>;\n}\nRendering a Component\nNow your React application has a component called Car, which returns an\n<h2>\nelement.\nTo use this component in your application, use similar syntax as normal HTML:\n<Car />\nExample\nDisplay the\nCar\ncomponent in the \"root\" element:\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Car />);\nRun \nExample \u00bb\nProps\nComponents can be passed as\nprops\n, which stands for properties.\nProps are like function arguments, and you send them into the component as attributes.\nYou will learn more about\nprops\nin the \nExample\nUse an attribute to pass a color to the Car component, and use it in the \nrender() function:\nfunction Car(props) {\n  return <h2>I am a {props.color} Car!</h2>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Car color=\"red\"/>);\nRun \nExample \u00bb\nComponents in Components\nWe can refer to components inside other components:\nExample\nUse the Car component inside the Garage component:\nfunction Car() {\n  return <h2>I am a Car!</h2>;\n}\n\nfunction Garage() {\n  return (\n    <>\n      <h1>Who lives in my Garage?</h1>\n      <Car />\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Garage />);\nRun \nExample \u00bb\nComponents in Files\nReact is all about re-using code, and it is recommended to split your components into separate files.\nTo do that, create a new file with a\n.js\nfile extension and put the code inside it:\nNote that the filename must start with an uppercase character.\nExample\nThis is the new file, we named it \"Car.js\":\nfunction Car() {\n  return <h2>Hi, I am a Car!</h2>;\n}\n\nexport default Car;\nTo be able to use the Car component, you have to import the file in your \napplication.\nExample\nNow we import the \"Car.js\" file in the application, and we can use the\nCar\ncomponent as if it was created here.\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Car from './Car.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Car />);\nRun \nExample \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "fab5a7a2-d9cd-4585-959d-eb9d2c776958",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b32e3a73-780d-4072-88de-320c2b43673c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a1e41c8e-85f1-4117-a00f-97c80a7a50ab",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is React Components\n\nComponents?",
      "options": [
        "None of the above.",
        "None of the above.",
        "like functions that return HTML elements",
        "independent and reusable bits of code"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of React Components\n\nComponents is 'like functions that return HTML elements'."
    },
    {
      "question": "What is React Components\nComponents?",
      "options": [
        "None of the above.",
        "independent and reusable bits of code",
        "like functions that return HTML elements",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of React Components\nComponents is 'independent and reusable bits of code'."
    }
  ],
  "summary": "This tutorial covers React Components concepts and techniques. You'll learn how to use React Components effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React Components and how to apply it in your projects."
}