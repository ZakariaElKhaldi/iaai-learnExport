{
  "id": "a2ea32bc-a432-4200-8d3d-1338fad49e6e",
  "title": "React ES6 Destructuring",
  "slug": "react-es6-destructuring",
  "metadata": {
    "description": "Learn about React ES6 Destructuring with clear explanations and practical examples.",
    "keywords": [
      "const",
      "destructuring",
      "vehicles",
      "model",
      "function",
      "object",
      "example",
      "mustang",
      "vehicleone",
      "brand"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "ES6 Destructuring"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React ES6 Destructuring",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Destructuring\nTo illustrate destructuring, we'll make a sandwich. Do you take everything out of the refrigerator to make your sandwich? No, you only take out the items you would like to use on your sandwich.\nDestructuring is exactly the same. We may have an array or object that we are working with, but we only need some of the items contained in these.\nDestructuring makes it easy to extract only what is needed.\nDestructing Arrays\nHere is the old way of assigning array items to a variable:\nExample\nBefore:\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\n// old way\nconst car = vehicles[0];\nconst truck = vehicles[1];\nconst suv = vehicles[2];\nHere is the new way of assigning array items to a variable:\nExample\nWith destructuring:\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\nconst [car, truck, suv] = vehicles;\nWhen destructuring arrays, the order that variables are declared is important.\nIf we only want the car and suv we can simply leave out the truck but keep the comma:\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\nconst [car,, suv] = vehicles;\nDestructuring comes in handy when a function returns an array:\nExample\nfunction calculate(a, b) {\n  const add = a + b;\n  const subtract = a - b;\n  const multiply = a * b;\n  const divide = a / b;\n\nreturn [add, subtract, multiply, divide];\n}\n\nconst [add, subtract, multiply, divide] = calculate(4, 7);\n\nDestructuring Objects\nHere is the old way of using an object inside a function:\nExample\nBefore:\nconst vehicleOne = {\n  brand: 'Ford',\n  model: 'Mustang',\n  type: 'car',\n  year: 2021, \n  color: 'red'\n}\n\nmyVehicle(vehicleOne);\n\n// old way\nfunction myVehicle(vehicle) {\n  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';\n}\nHere is the new way of using an object inside a function:\nExample\nWith destructuring:\nconst vehicleOne = {\n  brand: 'Ford',\n  model: 'Mustang',\n  type: 'car',\n  year: 2021, \n  color: 'red'\n}\n\nmyVehicle(vehicleOne);\n\nfunction myVehicle({type, color, brand, model}) {\n  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';\n}\n\nNotice that the object properties do not have to be declared in a specific order.\nWe can even destructure deeply nested objects by referencing the nested object then using a colon and curly braces to again destructure the items needed from the nested object:\nExample\nconst vehicleOne = {\n  brand: 'Ford',\n  model: 'Mustang',\n  type: 'car',\n  year: 2021, \n  color: 'red',\n  registration: {\n    city: 'Houston',\n    state: 'Texas',\n    country: 'USA'\n  }\n}\n\nmyVehicle(vehicleOne)\n\nfunction myVehicle({ model, registration: { state } }) {\n  const message = 'My ' + model + ' is registered in ' + state + '.';\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "43291f7a-809a-46ec-8353-7ddfd968dedf",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "486be8e2-6da6-47fd-811c-0e03ecb1e311",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b69ae9a5-b7c2-4dc0-a7b7-075110955261",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Destructuring?",
      "options": [
        "exactly the same",
        "None of the above.",
        "working with",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Destructuring is 'exactly the same'."
    },
    {
      "question": "What is We may have an array or object that we?",
      "options": [
        "exactly the same",
        "None of the above.",
        "None of the above.",
        "working with"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of We may have an array or object that we is 'working with'."
    }
  ],
  "summary": "This tutorial covers React ES6 Destructuring concepts and techniques. You'll learn how to use React ES6 Destructuring effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React ES6 Destructuring and how to apply it in your projects."
}