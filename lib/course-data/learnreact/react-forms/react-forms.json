{
  "id": "9e3d9a10-8ba1-461e-ad1e-a1d85fe33db5",
  "title": "React Forms",
  "slug": "react-forms",
  "metadata": {
    "description": "Learn about React Forms with clear explanations and practical examples.",
    "keywords": [
      "value",
      "react",
      "form",
      "name",
      "event",
      "const",
      "textarea",
      "root",
      "input",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React Forms"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React Forms",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Just like in HTML, React uses forms to allow users to interact with the web page.\nAdding Forms in React\nYou add a form with React like any other element:\nExample:\nAdd a form that allows users to enter their name:\nfunction MyForm() {\n  return (\n    <form>\n      <label>Enter your name:\n        <input type=\"text\" />\n      </label>\n    </form>\n  )\n}\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<MyForm />);\nRun \nExample \u00bb\nThis will work as normal, the form will submit and the page will refresh.\nBut this is generally not what we want to happen in React.\nWe want to prevent this default behavior and let React control the form.\nHandling Forms\nHandling forms is about how you handle the data when it changes value or gets \nsubmitted.\nIn HTML, form data is usually handled by the DOM.\nIn React, form data is usually handled by the components.\nWhen the data is handled by the components, all the data is stored in the component \nstate.\nYou can control changes by adding event handlers in the\nonChange\nattribute.\nWe can use the\nuseState\nHook to keep track of each inputs value and provide a \"single source of truth\" for the entire application.\nSee the\nReact Hooks\nsection for more information on Hooks.\nExample:\nUse the\nuseState\nHook to manage the input:\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction MyForm() {\n  const [name, setName] = useState(\"\");\n\nreturn (\n    <form>\n      <label>Enter your name:\n        <input\n          type=\"text\" \n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </label>\n    </form>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<MyForm />);\nRun \nExample \u00bb\nSubmitting Forms\nYou can control the submit action by adding an event handler in the\nonSubmit\nattribute for the\n<form>\n:\nExample:\nAdd a submit button and an event handler in the\nonSubmit\nattribute:\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction MyForm() {\n  const [name, setName] = useState(\"\");\n\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    alert(`The name you entered was: ${name}`)\n  }\n\nreturn (\n    <form onSubmit={handleSubmit}>\n      <label>Enter your name:\n        <input \n          type=\"text\" \n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" />\n    </form>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<MyForm />);\nRun \nExample \u00bb\nMultiple Input Fields\nYou can control the values of more than one input field by adding a\nname\nattribute to each element.\nWe will initialize our state with an empty object.\nTo access the fields in the event handler use the\nevent.target.name\nand\nevent.target.value\nsyntax.\nTo update the state, use square brackets [bracket notation] around the property name.\nExample:\nWrite a form with two input fields:\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction MyForm() {\n  const [inputs, setInputs] = useState({});\n\nconst handleChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs(values => ({...values, [name]: value}))\n  }\n\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    alert(inputs);\n  }\n\nreturn (\n    <form onSubmit={handleSubmit}>\n      <label>Enter your name:\n      <input \n        type=\"text\" \n        name=\"username\" \n        value={inputs.username || \"\"} \n        onChange={handleChange}\n      />\n      </label>\n      <label>Enter your age:\n        <input \n          type=\"number\" \n          name=\"age\" \n          value={inputs.age || \"\"} \n          onChange={handleChange}\n        />\n        </label>\n        <input type=\"submit\" />\n    </form>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<MyForm />);\nRun \nExample \u00bb\nNote:\nWe use the same event handler function for both input fields, \nwe could write one event handler for each, but this gives us much cleaner code and is the preferred way in React.\nTextarea\nThe textarea element in React is slightly different from ordinary HTML.\nIn HTML the value of a textarea was the text between the start tag\n<textarea>\nand the end tag\n</textarea>\n.\n<textarea>\n  Content of the textarea.\n</textarea>\nIn React the value of a textarea is placed in a value attribute.\nWe'll use the\nuseState\nHook to manage the value of the textarea:\nExample:\nA simple textarea with some content:\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction MyForm() {\n  const [textarea, setTextarea] = useState(\n    \"The content of a textarea goes in the value attribute\"\n  );\n\nconst handleChange = (event) => {\n    setTextarea(event.target.value)\n  }\n\nreturn (\n    <form>\n      <textarea value={textarea} onChange={handleChange} />\n    </form>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<MyForm />);\nRun \nExample \u00bb\nSelect\nA drop down list, or a select box, in React is also a bit different from HTML.\nIn HTML, the selected value in the drop down list was defined with the\nselected\nattribute:\nHTML:\n<select>\n  <option value=\"Ford\">Ford</option>\n  <option value=\"Volvo\" selected>Volvo</option>\n  <option value=\"Fiat\">Fiat</option>\n</select>\nIn React, the selected value is defined with a\nvalue\nattribute on the\nselect\ntag:\nExample:\nA simple select box, where the selected value \"Volvo\" is initialized in the constructor:\nfunction MyForm() {\n  const [myCar, setMyCar] = useState(\"Volvo\");\n\nconst handleChange = (event) => {\n    setMyCar(event.target.value)\n  }\n\nreturn (\n    <form>\n      <select value={myCar} onChange={handleChange}>\n        <option value=\"Ford\">Ford</option>\n        <option value=\"Volvo\">Volvo</option>\n        <option value=\"Fiat\">Fiat</option>\n      </select>\n    </form>\n  )\n}\nRun \nExample \u00bb\nBy making these slight changes to\n<textarea>\nand\n<select>\n, React is able to handle all input elements in the same way.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "3872e541-5402-4bbe-b25e-f1d136f38272",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bc8a9e52-36a7-4873-8480-e44a50ff50ca",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0ce07f48-cfbd-4137-8186-6088cbae378a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is But this?",
      "options": [
        "None of the above.",
        "generally not what we want to happen in React",
        "None of the above.",
        "about how you handle the data when it changes value or gets \nsubmitted"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of But this is 'generally not what we want to happen in React'."
    },
    {
      "question": "What is Handling Forms\nHandling forms?",
      "options": [
        "None of the above.",
        "about how you handle the data when it changes value or gets \nsubmitted",
        "generally not what we want to happen in React",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Handling Forms\nHandling forms is 'about how you handle the data when it changes value or gets \nsubmitted'."
    }
  ],
  "summary": "This tutorial covers React Forms concepts and techniques. You'll learn how to use React Forms effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React Forms and how to apply it in your projects."
}