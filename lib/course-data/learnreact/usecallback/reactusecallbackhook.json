{
  "id": "d0e08023-14de-4bfd-b7c1-7aaaf788ce8b",
  "title": "ReactuseCallbackHook",
  "slug": "reactusecallbackhook",
  "metadata": {
    "description": "Learn about ReactuseCallbackHook with clear explanations and practical examples.",
    "keywords": [
      "todos",
      "const",
      "addtodo",
      "usecallback",
      "react",
      "button",
      "render",
      "import",
      "count",
      "todo"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "useCallback"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React\nuseCallback\nHook",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The React\nuseCallback\nHook returns a memoized callback function.\nThink of memoization as caching a value so that it does not need to be recalculated.\nThis allows us to isolate resource intensive functions so that they will not automatically run on every render.\nThe\nuseCallback\nHook only runs when one of its dependencies update.\nThis can improve performance.\nThe\nuseCallback\nand\nuseMemo\nHooks are similar.\nThe main difference is that\nuseMemo\nreturns a memoized\nvalue\nand\nuseCallback\nreturns a memoized\nfunction\n.\nYou can learn more about useMemo in the useMemo\nchapter\n.\nProblem\nOne reason to use\nuseCallback\nis to prevent a component from re-rendering unless its props have changed.\nIn this example, you might think that the\nTodos\ncomponent will not re-render unless the\ntodos\nchange:\nThis is a similar example to the one in the\nReact.memo\nsection.\nExample:\nindex.js\nimport { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport Todos from \"./Todos\";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([]);\n\nconst increment = () => {\n    setCount((c) => c + 1);\n  };\n  const addTodo = () => {\n    setTodos((t) => [...t, \"New Todo\"]);\n  };\n\nreturn (\n    <>\n      <Todos todos={todos} addTodo={addTodo} />\n      <hr />\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n      </div>\n    </>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\nTodos.js\nimport { memo } from \"react\";\n\nconst Todos = ({ todos, addTodo }) => {\n  console.log(\"child render\");\n  return (\n    <>\n      <h2>My Todos</h2>\n      {todos.map((todo, index) => {\n        return <p key={index}>{todo}</p>;\n      })}\n      <button onClick={addTodo}>Add Todo</button>\n    </>\n  );\n};\n\nexport default memo(Todos);\nRun \nExample \u00bb\nTry running this and click the count increment button.\nYou will notice that the\nTodos\ncomponent re-renders even when the\ntodos\ndo not change.\nWhy does this not work? We are using\nmemo\n, so the\nTodos\ncomponent should not re-render since neither the\ntodos\nstate nor the\naddTodo\nfunction are changing when the count is incremented.\nThis is because of something called \"referential equality\".\nEvery time a component re-renders, its functions get recreated. Because of this, the\naddTodo\nfunction has actually changed.\nSolution\nTo fix this, we can use the\nuseCallback\nhook to prevent the function from being recreated unless necessary.\nUse the\nuseCallback\nHook to prevent the\nTodos\ncomponent from re-rendering needlessly:\nExample:\nindex.js\nimport { useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport Todos from \"./Todos\";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([]);\n\nconst increment = () => {\n    setCount((c) => c + 1);\n  };\n  const addTodo = useCallback(() => {\n    setTodos((t) => [...t, \"New Todo\"]);\n  }, [todos]);\n\nreturn (\n    <>\n      <Todos todos={todos} addTodo={addTodo} />\n      <hr />\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n      </div>\n    </>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\nTodos.js\nimport { memo } from \"react\";\n\nconst Todos = ({ todos, addTodo }) => {\n  console.log(\"child render\");\n  return (\n    <>\n      <h2>My Todos</h2>\n      {todos.map((todo, index) => {\n        return <p key={index}>{todo}</p>;\n      })}\n      <button onClick={addTodo}>Add Todo</button>\n    </>\n  );\n};\n\nexport default memo(Todos);\nRun \nExample \u00bb\nNow the\nTodos\ncomponent will only re-render when the\ntodos\nprop changes.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "3b8f735c-a5fd-4c6a-b4cf-649c3d585db4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4cec2081-f20d-47b2-9ed9-44628f038e75",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bd53cf4a-fb1c-4c34-bb52-c5b98e95f1e9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The\nuseCallback\nand\nuseMemo\nHooks?",
      "options": [
        "None of the above.",
        "that\nuseMemo\nreturns a memoized\nvalue\nand\nuseCallback\nreturns a memoized\nfunction",
        "similar",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The\nuseCallback\nand\nuseMemo\nHooks is 'similar'."
    },
    {
      "question": "What is The main difference?",
      "options": [
        "that\nuseMemo\nreturns a memoized\nvalue\nand\nuseCallback\nreturns a memoized\nfunction",
        "None of the above.",
        "None of the above.",
        "similar"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The main difference is 'that\nuseMemo\nreturns a memoized\nvalue\nand\nuseCallback\nreturns a memoized\nfunction'."
    }
  ],
  "summary": "This tutorial covers ReactuseCallbackHook concepts and techniques. You'll learn how to use ReactuseCallbackHook effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ReactuseCallbackHook and how to apply it in your projects."
}