{
  "id": "9d3d1f7f-75ba-4211-ae11-22a544a31e6e",
  "title": "React Lists",
  "slug": "react-lists",
  "metadata": {
    "description": "Learn about React Lists with clear explanations and practical examples.",
    "keywords": [
      "brand",
      "garage",
      "root",
      "cars",
      "react",
      "render",
      "example",
      "function",
      "props",
      "return"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React Lists"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React Lists",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "In React, you will render lists with some type of loop.\nThe JavaScript\nmap()\narray method is generally the preferred method.\nIf you need a refresher on the\nmap()\nmethod, check out the\nES6 section\n.\nExample:\nLet's render all of the cars from our garage:\nfunction Car(props) {\n  return <li>I am a { props.brand }</li>;\n}\n\nfunction Garage() {\n  const cars = ['Ford', 'BMW', 'Audi'];\n  return (\n    <>\n      <h1>Who lives in my garage?</h1>\n      <ul>\n        {cars.map((car) => <Car brand={car} />)}\n      </ul>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Garage />);\nRun \nExample \u00bb\nWhen you run this code in your\ncreate-react-app\n, it will work but you will receive a warning that there is no \"key\" provided for the list items.\nKeys\nKeys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.\nKeys need to be unique to each sibling. But they can be duplicated globally.\nGenerally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key.\nExample:\nLet's refactor our \nfunction Car(props) {\n  return <li>I am a { props.brand }</li>;\n}\n\nfunction Garage() {\n  const cars = [\n    {id: 1, brand: 'Ford'},\n    {id: 2, brand: 'BMW'},\n    {id: 3, brand: 'Audi'}\n  ];\n  return (\n    <>\n      <h1>Who lives in my garage?</h1>\n      <ul>\n        {cars.map((car) => <Car key={car.id} brand={car.brand} />)}\n      </ul>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Garage />);\nRun \nExample \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9735b4d1-285d-4d5f-a805-d3d754078510",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a977b6d0-018e-4349-abd9-13c374496f45",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0e1de33a-aca9-4c4e-9375-1feeb2761560",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is array method?",
      "options": [
        "None of the above.",
        "no \"key\" provided for the list items",
        "None of the above.",
        "generally the preferred method"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of array method is 'generally the preferred method'."
    },
    {
      "question": "What is it will work but you will receive a warning that there?",
      "options": [
        "None of the above.",
        "no \"key\" provided for the list items",
        "None of the above.",
        "generally the preferred method"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it will work but you will receive a warning that there is 'no \"key\" provided for the list items'."
    }
  ],
  "summary": "This tutorial covers React Lists concepts and techniques. You'll learn how to use React Lists effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React Lists and how to apply it in your projects."
}