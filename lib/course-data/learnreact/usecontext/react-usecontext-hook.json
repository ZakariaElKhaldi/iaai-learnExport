{
  "id": "ea9e5668-0315-4c30-999a-f377e45ec11f",
  "title": "React useContext Hook",
  "slug": "react-usecontext-hook",
  "metadata": {
    "description": "Learn about React useContext Hook with clear explanations and practical examples.",
    "keywords": [
      "user",
      "component",
      "context",
      "function",
      "return",
      "react",
      "state",
      "usestate",
      "import",
      "const"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "useContext"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React useContext Hook",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "React Context\nReact Context is a way to manage state globally.\nIt can be used together with the\nuseState\nHook to share state between\ndeeply nested components more easily than with\nuseState\nalone.\nThe Problem\nState should be held by the highest parent component in the stack that requires access to the state.\nTo illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.\nTo do this without Context, we will need to pass the state as \"props\" through each nested component. This is called \"prop drilling\".\nExample:\nPassing \"props\" through nested components:\nimport { useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nfunction Component1() {\n  const [user, setUser] = useState(\"Jesse Hall\");\n\nreturn (\n    <>\n      <h1>{`Hello ${user}!`}</h1>\n      <Component2 user={user} />\n    </>\n  );\n}\n\nfunction Component2({ user }) {\n  return (\n    <>\n      <h1>Component 2</h1>\n      <Component3 user={user} />\n    </>\n  );\n}\n\nfunction Component3({ user }) {\n  return (\n    <>\n      <h1>Component 3</h1>\n      <Component4 user={user} />\n    </>\n  );\n}\n\nfunction Component4({ user }) {\n  return (\n    <>\n      <h1>Component 4</h1>\n      <Component5 user={user} />\n    </>\n  );\n}\n\nfunction Component5({ user }) {\n  return (\n    <>\n      <h1>Component 5</h1>\n      <h2>{`Hello ${user} again!`}</h2>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Component1 />);\nRun \nExample \u00bb\nEven though components 2-4 did not need the state, they had to pass the state along so that it could reach component 5.\nThe Solution\nThe solution is to create context.\nCreate Context\nTo create context, you must Import\ncreateContext\nand initialize \nit:\nimport { useState, createContext } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst UserContext = createContext()\n\nContext Provider\nWrap child components in the Context Provider and supply the state value.\nfunction Component1() {\n  const [user, setUser] = useState(\"Jesse Hall\");\n\nreturn (\n    <UserContext.Provider value={user}>\n      <h1>{`Hello ${user}!`}</h1>\n      <Component2 user={user} />\n    </UserContext.Provider>\n  );\n}\nNow, all components in this tree will have access to the user Context.\nUse the\nuseContext\nHook\nIn order to use the Context in a child component, we need to access it using the\nuseContext\nHook.\nFirst, include the\nuseContext\nin the import \nstatement:\nimport { useState, createContext, useContext } from \"react\";\nThen you can access the user Context in all components:\nfunction Component5() {\n  const user = useContext(UserContext);\n\nreturn (\n    <>\n      <h1>Component 5</h1>\n      <h2>{`Hello ${user} again!`}</h2>\n    </>\n  );\n}\nFull Example\nExample:\nHere is the full example using React Context:\nimport { useState, createContext, useContext } from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nconst UserContext = createContext();\n\nfunction Component1() {\n  const [user, setUser] = useState(\"Jesse Hall\");\n\nreturn (\n    <UserContext.Provider value={user}>\n      <h1>{`Hello ${user}!`}</h1>\n      <Component2 />\n    </UserContext.Provider>\n  );\n}\n\nfunction Component2() {\n  return (\n    <>\n      <h1>Component 2</h1>\n      <Component3 />\n    </>\n  );\n}\n\nfunction Component3() {\n  return (\n    <>\n      <h1>Component 3</h1>\n      <Component4 />\n    </>\n  );\n}\n\nfunction Component4() {\n  return (\n    <>\n      <h1>Component 4</h1>\n      <Component5 />\n    </>\n  );\n}\n\nfunction Component5() {\n  const user = useContext(UserContext);\n\nreturn (\n    <>\n      <h1>Component 5</h1>\n      <h2>{`Hello ${user} again!`}</h2>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Component1 />);\nRun \nExample \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ec1a173d-804e-4dee-8c55-74b4213d3250",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3d4072f1-7e58-432b-a1c5-864ee1e67038",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "78195679-99f1-4826-9394-c572f9e320f2",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is React useContext Hook\n\nReact Context\nReact Context?",
      "options": [
        "None of the above.",
        "called \"prop drilling\"",
        "None of the above.",
        "a way to manage state globally"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of React useContext Hook\n\nReact Context\nReact Context is 'a way to manage state globally'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "a way to manage state globally",
        "called \"prop drilling\"",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This is 'called \"prop drilling\"'."
    }
  ],
  "summary": "This tutorial covers React useContext Hook concepts and techniques. You'll learn how to use React useContext Hook effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React useContext Hook and how to apply it in your projects."
}