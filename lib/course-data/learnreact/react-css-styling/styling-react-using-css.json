{
  "id": "482f3c3e-fec0-40e8-a3d3-1f16da8b7d77",
  "title": "Styling React Using CSS",
  "slug": "styling-react-using-css",
  "metadata": {
    "description": "Learn about Styling React Using CSS with clear explanations and practical examples.",
    "keywords": [
      "style",
      "example",
      "import",
      "const",
      "styling",
      "color",
      "file",
      "module",
      "react",
      "object"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React CSS Styling"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Styling React Using CSS",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "There are many ways to style React with CSS, this tutorial will \ntake a closer look at three common ways:\nInline styling\nCSS stylesheets\nCSS Modules\nInline Styling\nTo style an element with the inline style attribute, the value must be a \nJavaScript object:\nExample:\nInsert an object with the styling information:\nconst Header = () => {\n  return (\n    <>\n      <h1 style={{color: \"red\"}}>Hello Style!</h1>\n      <p>Add a little style!</p>\n    </>\n  );\n}\nRun \nExample \u00bb\nNote:\nIn JSX, JavaScript expressions are written inside curly braces,\nand since JavaScript objects also use curly braces,\nthe styling in the example above is written inside two sets of curly braces\n{{}}\n.\ncamelCased Property Names\nSince the inline CSS is written in a JavaScript object, properties with \nhyphen separators, like\nbackground-color\n, \nmust be written with camel case syntax:\nExample:\nUse\nbackgroundColor\ninstead of\nbackground-color\n:\nconst Header = () => {\n  return (\n    <>\n      <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1>\n      <p>Add a little style!</p>\n    </>\n  );\n}\nRun \nExample \u00bb\nJavaScript Object\nYou can also create an object with styling information, and refer to it in the style attribute:\nExample:\nCreate a style object named\nmyStyle\n:\nconst Header = () => {\n  const myStyle = {\n    color: \"white\",\n    backgroundColor: \"DodgerBlue\",\n    padding: \"10px\",\n    fontFamily: \"Sans-Serif\"\n  };\n  return (\n    <>\n      <h1 style={myStyle}>Hello Style!</h1>\n      <p>Add a little style!</p>\n    </>\n  );\n}\nRun \nExample \u00bb\nCSS Stylesheet\nYou can write your CSS styling in a separate file, just save the file with the\n.css\nfile extension, and import it in your \napplication.\nApp.css:\nCreate a new file called \"App.css\" and insert some CSS code in it:\nbody {\n  background-color: #282c34;\n  color: white;\n  padding: 40px;\n  font-family: Sans-Serif;\n  text-align: center;\n}\nNote:\nYou can call the file whatever you like, just remember the correct file extension.\nImport the stylesheet in your application:\nindex.js:\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\n\nconst Header = () => {\n  return (\n    <>\n      <h1>Hello Style!</h1>\n      <p>Add a little style!.</p>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Header />);\nRun \nExample \u00bb\nCSS Modules\nAnother way of adding styles to your application is to use CSS Modules.\nCSS Modules are convenient for components that are placed in separate files.\nThe CSS inside a module is available only for the component that imported it, \nand you do not have to worry about name conflicts.\nCreate the CSS module with the\n.module.css\nextension, example:\nmy-style.module.css\n.\nCreate a new file called \"my-style.module.css\" and insert some CSS code in it:\nmy-style.module.css:\n.bigblue {\n  color: DodgerBlue;\n  padding: 40px;\n  font-family: Sans-Serif;\n  text-align: center;\n}\nImport the stylesheet in your component:\nCar.js:\nimport styles from './my-style.module.css';\n\nconst Car = () => {\n  return <h1 className={styles.bigblue}>Hello Car!</h1>;\n}\n\nexport default Car;\nImport the component in your application:\nindex.js:\nimport ReactDOM from 'react-dom/client';\nimport Car from './Car.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Car />);\nRun \nExample \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "4c885fd1-e682-4bae-b184-e2d3ae0aac30",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "337f0b32-1110-4b7d-befd-3a9e3a5d3668",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3bfeca60-9a29-4f73-9f9e-410fb6a18001",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Styling React Using CSS\n\nThere?",
      "options": [
        "written inside curly braces",
        "many ways to style React with CSS",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Styling React Using CSS\n\nThere is 'many ways to style React with CSS'."
    },
    {
      "question": "What is JavaScript expressions?",
      "options": [
        "written inside curly braces",
        "None of the above.",
        "many ways to style React with CSS",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript expressions is 'written inside curly braces'."
    }
  ],
  "summary": "This tutorial covers Styling React Using CSS concepts and techniques. You'll learn how to use Styling React Using CSS effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Styling React Using CSS and how to apply it in your projects."
}