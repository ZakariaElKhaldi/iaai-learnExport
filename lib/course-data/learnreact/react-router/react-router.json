{
  "id": "639596d6-fcbe-45b3-b344-0ad99e6a84ff",
  "title": "React Router",
  "slug": "react-router",
  "metadata": {
    "description": "Learn about React Router with clear explanations and practical examples.",
    "keywords": [
      "c",
      "route",
      "react",
      "blogs",
      "router",
      "contact",
      "link",
      "pages",
      "layout",
      "home",
      "path"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnReact",
    "subcategory": "React Router"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "React Router",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Create React App doesn't include page routing.\nReact Router is the most popular solution.\nAdd React Router\nTo add React Router in your application, run this in the terminal from the root directory of the application:\nnpm i -D react-router-dom\nNote:\nThis tutorial uses React Router v6.\nIf you are upgrading from v5, you will need to use the @latest flag:\nnpm i -D react-router-dom@latest\nFolder Structure\nTo create an application with multiple page routes, let's first start with the file structure.\nWithin the\nsrc\nfolder, we'll create a folder named\npages\nwith several files:\nsrc\\pages\\\n:\nLayout.js\nHome.js\nBlogs.js\nContact.js\nNoPage.js\nEach file will contain a very basic React component.\nBasic Usage\nNow we will use our Router in our\nindex.js\nfile.\nExample\nUse React Router to route to pages based on URL:\nindex.js\n:\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./pages/Layout\";\nimport Home from \"./pages/Home\";\nimport Blogs from \"./pages/Blogs\";\nimport Contact from \"./pages/Contact\";\nimport NoPage from \"./pages/NoPage\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"blogs\" element={<Blogs />} />\n          <Route path=\"contact\" element={<Contact />} />\n          <Route path=\"*\" element={<NoPage />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\nRun \nExample \u00bb\nExample Explained\nWe wrap our content first with\n<BrowserRouter>\n.\nThen we define our\n<Routes>\n.\nAn application can have multiple\n<Routes>\n.\nOur basic example only uses one.\n<Route>\ns can be nested.\nThe first\n<Route>\nhas a path of\n/\nand renders the\nLayout\ncomponent.\nThe nested\n<Route>\ns inherit and add to the parent route.\nSo the\nblogs\npath is combined with the parent and becomes\n/blogs\n.\nThe\nHome\ncomponent route does not have a path but has an\nindex\nattribute.\nThat specifies this route as the default route for the parent route, which is\n/\n.\nSetting the\npath\nto\n*\nwill act as a \ncatch-all for any undefined URLs. This is great for a 404 error page.\nPages / Components\nThe\nLayout\ncomponent has\n<Outlet>\nand\n<Link>\nelements.\nThe\n<Outlet>\nrenders the current route selected.\n<Link>\nis used to set the URL and keep track of browsing history.\nAnytime we link to an internal path, we will use\n<Link>\ninstead of\n<a href=\"\">\n.\nThe \"layout route\" is a shared component that inserts common content on all pages, such as a navigation menu.\nLayout.js\n:\nimport { Outlet, Link } from \"react-router-dom\";\n\nconst Layout = () => {\n  return (\n    <>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/blogs\">Blogs</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Contact</Link>\n          </li>\n        </ul>\n      </nav>\n\n<Outlet />\n    </>\n  )\n};\n\nexport default Layout;\nHome.js\n:\nconst Home = () => {\n  return <h1>Home</h1>;\n};\n\nexport default Home;\nBlogs.js\n:\nconst Blogs = () => {\n  return <h1>Blog Articles</h1>;\n};\n\nexport default Blogs;\nContact.js\n:\nconst Contact = () => {\n  return <h1>Contact Me</h1>;\n};\n\nexport default Contact;\nNoPage.js\n:\nconst NoPage = () => {\n  return <h1>404</h1>;\n};\n\nexport default NoPage;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "npm i -D react-router-dom",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "npm i -D react-router-dom@latest",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "npm i -D react-router-dom"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "npm i -D react-router-dom@latest"
    }
  ],
  "related_topics": [
    {
      "id": "e218d4b4-224f-43f7-9459-5fffe2f8dec9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1ff69e1c-b3f3-4827-bbd3-4ccc49ed3696",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "63067b9f-aaad-473b-93e2-718fb41b4fcd",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is React Router?",
      "options": [
        "None of the above.",
        "upgrading from v5",
        "the most popular solution",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of React Router is 'the most popular solution'."
    },
    {
      "question": "What is If you?",
      "options": [
        "None of the above.",
        "upgrading from v5",
        "None of the above.",
        "the most popular solution"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of If you is 'upgrading from v5'."
    }
  ],
  "summary": "This tutorial covers React Router concepts and techniques. You'll learn how to use React Router effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of React Router and how to apply it in your projects."
}