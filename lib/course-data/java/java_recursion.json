{
  "title": "Java Recursion",
  "url": "https://www.w3schools.com/java/java_recursion.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Java Recursion",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Java Recursion",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve.",
      "html": "<p>Recursion is the technique of making a function call itself. This technique provides a way\nto break complicated problems down into simple problems which are easier to solve.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Recursion may be a bit difficult to understand. The best way to figure out how it works is to experiment with it.",
      "html": "<p>Recursion may be a bit difficult to understand. The\nbest way to figure out how it works is to experiment with it.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Recursion Example",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Adding two numbers together is easy to do, but adding a range of numbers is more complicated. In the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers:",
      "html": "<p>Adding two numbers together is easy to do, but adding a range of numbers is more\ncomplicated. In the following example, recursion is used to add a range of numbers\ntogether by breaking it down into the simple task of adding two numbers:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "public\n\nclass\n\nMain\n\n{\n\n\npublic\n\nstatic\n\nvoid\n\nmain\n(\nString\n[\n]\nargs\n)\n\n{\n\n\nint\nresult\n=\n\nsum\n(\n10\n)\n;\n\nSystem\n.\nout\n.\nprintln\n(\nresult\n)\n;\n\n\n}\n\n\npublic\n\nstatic\n\nint\n\nsum\n(\nint\nk\n)\n\n{\n\n\nif\n\n(\nk\n>\n\n0\n)\n\n{\n\n\nreturn\nk\n+\n\nsum\n(\nk\n-\n\n1\n)\n;\n\n\n}\n\nelse\n\n{\n\n\nreturn\n\n0\n;\n\n\n}\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span><span class=\"token keyword keyword-out\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </code>}<code class=\"language-csharp\">\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> k <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    </code>}<code class=\"language-csharp\">\n  </code>}<code class=\"language-csharp\">\n</code>}</pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Example Explained",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. When running, the program follows these steps:",
      "html": "<p>When the <code>sum()</code> function is called, it adds parameter <code>k</code> to the sum of all numbers smaller\nthan <code>k</code> and returns the result. When k becomes 0, the function just returns 0. When\nrunning, the program follows these steps:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since the function does not call itself when k is 0, the program stops there and returns the result.",
      "html": "<p>Since the function does not call itself when <code>k</code> is 0, the program stops there and returns the\nresult.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Halting Condition",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just as loops can run into the problem of infinite looping, recursive functions can run into the problem of infinite recursion. Infinite recursion is when the function never stops calling itself. Every recursive function should have a halting condition, which is the condition where the function stops calling itself. In the previous example, the halting condition is when the parameter k becomes 0.",
      "html": "<p>Just as loops can run into the problem of infinite looping, recursive functions can run into\nthe problem of infinite recursion. Infinite recursion is when the function never stops calling\nitself. Every recursive function should have a halting condition, which is the condition\nwhere the function stops calling itself. In the previous example, the halting condition is\nwhen the parameter <code>k</code> becomes 0.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is helpful to see a variety of different examples to better understand the concept. In this example, the function adds a range of numbers between a start and an end. The halting condition for this recursive function is when end is not greater than start :",
      "html": "<p>It is helpful to see a variety of different examples to better understand the concept. In this\nexample, the function adds a range of numbers between a start and an end. The halting\ncondition for this recursive function is when <strong>end</strong> is not greater than <strong>start</strong>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "csharp",
        "tryItLink": "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion2",
        "syntaxHighlighting": [],
        "classList": [
          "w3-white",
          "language-csharp"
        ],
        "isNotranslate": false
      },
      "code": "public\n\nclass\n\nMain\n\n{\n\n\npublic\n\nstatic\n\nvoid\n\nmain\n(\nString\n[\n]\nargs\n)\n\n{\n\n\nint\nresult\n=\n\nsum\n(\n5\n,\n\n10\n)\n;\n\nSystem\n.\nout\n.\nprintln\n(\nresult\n)\n;\n\n\n}\n\n\npublic\n\nstatic\n\nint\n\nsum\n(\nint\nstart\n,\n\nint\nend\n)\n\n{\n\n\nif\n\n(\nend\n>\nstart\n)\n\n{\n\n\nreturn\nend\n+\n\nsum\n(\nstart\n,\nend\n-\n\n1\n)\n;\n\n\n}\n\nelse\n\n{\n\n\nreturn\nend\n;\n\n\n}\n\n\n}\n\n\n}",
      "language": "csharp",
      "code_html": "<pre class=\"w3-white language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span><span class=\"token keyword keyword-out\">out</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </code>}<code class=\"language-csharp\">\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&gt;</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> end <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> end<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "code_classes": [
        "w3-white",
        "language-csharp"
      ],
      "tryItLink": "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion2",
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-white",
        "language-csharp"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.",
      "html": "<p>The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In simple words, what is Recursion?",
      "html": "<p>In simple words, what is Recursion?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "In simple words, what is Recursion?",
        "options": [
          {
            "value": "0",
            "text": "Conditions inside switch statements"
          },
          {
            "value": "1",
            "text": "A technique of making a function call itself"
          },
          {
            "value": "2",
            "text": "Constant variables that have the possibility to be free"
          },
          {
            "value": "3",
            "text": "For-each loops with superpowers"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_recursion1"
      },
      "quiz_type": "quiz",
      "question": "In simple words, what is Recursion?",
      "options": [
        {
          "value": "0",
          "text": "Conditions inside switch statements"
        },
        {
          "value": "1",
          "text": "A technique of making a function call itself"
        },
        {
          "value": "2",
          "text": "Constant variables that have the possibility to be free"
        },
        {
          "value": "3",
          "text": "For-each loops with superpowers"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_recursion1",
      "html": "<form action=\"exercise.asp?x=xrcise_recursion1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\">Conditions inside switch statements</label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\">A technique of making a function call itself</label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\">Constant variables that have the possibility to be free</label></div><div class=\"quizoption\"><input id=\"quizoption3\" name=\"quizoption\" type=\"radio\" value=\"3\"/><label for=\"quizoption3\">For-each loops with superpowers</label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}