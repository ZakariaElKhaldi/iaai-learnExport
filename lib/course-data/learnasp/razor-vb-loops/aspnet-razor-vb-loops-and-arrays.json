{
  "id": "c6aa6554-4022-4ce6-85a2-7383b02f15c7",
  "title": "ASP.NET Razor- VB Loops and Arrays",
  "slug": "aspnet-razor-vb-loops-and-arrays",
  "metadata": {
    "description": "Learn about ASP.NET Razor- VB Loops and Arrays with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "example",
      "html",
      "body",
      "members",
      "loops",
      "collection",
      "code",
      "want",
      "counting"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "Razor VB Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Razor\n- VB Loops and Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Statements can be executed repeatedly in loops.\nFor Loops\nIf you need to run the same statements repeatedly, you can program a loop.\nIf you know how many times you want to loop, you can use a\nfor loop\n. This \nkind of loop is especially useful for counting up or counting down:\nExample\n<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\n\n</body>\n</html>\nRun example \u00bb\nFor Each Loops\nIf you work with a collection or an array, you often use a\nfor each loop\n.\nA collection is a group of similar objects, and the for each loop lets \nyou carry out a task on each item. The for each loop walks through a \ncollection until it is finished.\nThe example below walks through the ASP.NET Request.ServerVariables \ncollection.\nExample\n<html>\n<body>\n<ul>\n@For Each x \n    In Request.ServerVariables\n@<li>@x</li>\n\n</ul>\n</body>\n</html>\nRun example \u00bb\nWhile Loops\nThe\nwhile loop\nis a general purpose loop.\nA while loop begins with the while keyword, followed by parentheses, where you \nspecify how long the loop continues, then a block to repeat.\nWhile loops typically add to, or subtract from, a \nvariable used for counting.\nIn the example below, the += operator adds 1 to the variable i, each time the \nloop runs.\nExample\n<html>\n<body>\n@Code\nDim i=0\nDo While \n    i<5\ni += 1\n@<p>Line #@i</p>\nLoop\nEnd Code\n</body>\n</html>\nRun example \u00bb\nArrays\nAn array is useful when you want to store similar variables but don't want to \ncreate a separate variable for each of them:\nExample\n@Code\nDim members As String()={\"Jani\",\"Hege\",\"Kai\",\"Jim\"}\ni=Array.IndexOf(members,\"Kai\")+1\nlen=members.Length\nx=members(2-1)\nend Code\n<html>\n<body>\n<h3>Members</h3>\n@For Each person In members\n@<p>@person</p>\n\n<p>The number of names \n    in Members are\n@len\n</p>\n<p>The person at \n    position 2 is\n@x\n</p>\n<p>Kai is now in \n    position\n@i\n</p>\n</body>\n</html>\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\nNext i\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<html>\n<body>\n<ul>\n@For Each x \n    In Request.ServerVariables\n@<li>@x</li>\nNext x\n</ul>\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<html>\n<body>\n@Code\nDim i=0\nDo While \n    i<5\ni += 1\n@<p>Line #@i</p>\nLoop\nEnd Code\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "@Code\nDim members As String()={\"Jani\",\"Hege\",\"Kai\",\"Jim\"}\ni=Array.IndexOf(members,\"Kai\")+1\nlen=members.Length\nx=members(2-1)\nend Code\n<html>\n<body>\n<h3>Members</h3>\n@For Each person In members\n@<p>@person</p>\nNext person\n<p>The number of names \n    in Members are\n@len\n</p>\n<p>The person at \n    position 2 is\n@x\n</p>\n<p>Kai is now in \n    position\n@i\n</p>\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<html>\n<body>\n# TODO: Complete this line\n@<p>Line #@i</p>\nNext i\n</body>\n</html>",
      "solution": "<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\nNext i\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<html>\n<body>\n<ul>\n# TODO: Complete this line\n    In Request.ServerVariables\n@<li>@x</li>\nNext x\n</ul>\n</body>\n</html>",
      "solution": "<html>\n<body>\n<ul>\n@For Each x \n    In Request.ServerVariables\n@<li>@x</li>\nNext x\n</ul>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "91b191cf-45eb-44f7-8e3c-1c85a74ec39c",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c005d918-496c-4b1f-8a0e-42b5e84a009b",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "49a3345b-2c5c-4d94-862e-95e715b5ea3c",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This \nkind of loop?",
      "options": [
        "None of the above.",
        "especially useful for counting up or counting down:\nExample\n<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\n\n</body>\n</html>\nRun example \u00bb\nFor Each Loops\nIf you work with a collection or an array",
        "a group of similar objects",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of This \nkind of loop is 'especially useful for counting up or counting down:\nExample\n<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\n\n</body>\n</html>\nRun example \u00bb\nFor Each Loops\nIf you work with a collection or an array'."
    },
    {
      "question": "What is A collection?",
      "options": [
        "None of the above.",
        "None of the above.",
        "especially useful for counting up or counting down:\nExample\n<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\n\n</body>\n</html>\nRun example \u00bb\nFor Each Loops\nIf you work with a collection or an array",
        "a group of similar objects"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A collection is 'a group of similar objects'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Razor- VB Loops and Arrays concepts and techniques. You'll learn how to use ASP.NET Razor- VB Loops and Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Razor- VB Loops and Arrays and how to apply it in your projects."
}