{
  "id": "71bb6657-fc9a-4a8f-a2d7-39b4c26bc0c0",
  "title": "ASP.NET Web Pages- Classes",
  "slug": "aspnet-web-pages-classes",
  "metadata": {
    "description": "Learn about ASP.NET Web Pages- Classes with clear explanations and practical examples.",
    "keywords": [
      "value",
      "request",
      "string",
      "page",
      "specified",
      "path",
      "returns",
      "response",
      "data",
      "true"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "WebPages Classes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Web Pages\n- Classes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ASP.NET Classes Reference\nMethod\nDescription\nAsBool(), AsBool(true|false)\nConverts a string value to a Boolean value \n(true/false). Returns false or the specified value \nif the string does not represent true/false.\nAsDateTime(), AsDateTime(\nvalue\n)\nConverts a string value to date/time. Returns DateTime. MinValue or the specified value if \nthe string does not represent a date/time.\nAsDecimal(), AsDecimal(\nvalue\n)\nConverts a string value to a decimal value. Returns \n0.0 or the specified value if the string does not \nrepresent a decimal value.\nAsFloat(), AsFloat(\nvalue\n)\nConverts a string value to a float. Returns 0.0 or \nthe specified value if the string does not represent \na decimal value.\nAsInt(), AsInt(\nvalue\n)\nConverts a string value to an integer. Returns 0 or \nthe specified value if the string does not represent \nan integer.\nHref(\npath\n[, param1 [, \nparam2]]\n)\nCreates a browser-compatible \nURL from a local file path, with optional additional \npath parts.\nHtml.Raw(\nvalue\n)\nRenders\nvalue\nas HTML markup instead of rendering \nit as HTML-encoded output.\nIsBool(), IsDateTime(), IsDecimal(), \nIsFloat(), IsInt()\nReturns true if the \nvalue can be converted from a string to the \nspecified type.\nIsEmpty()\nReturns true if the \nobject or variable has no value.\nIsPost\nReturns true if the \nrequest is a POST. (Initial requests are usually a \nGET.)\nLayout\nSpecifies the path of a \nlayout page to apply to this page.\nPageData[\nkey\n], PageData[\nindex\n], \nPage\nContains data shared between the page, \nlayout pages, and partial pages in the current \nrequest. You can use the dynamic Page \nproperty to access the same data, as in the \nfollowing example:\nRenderBody()\n(Layout pages) \nRenders the content of a content page that is not in \nany named sections.\nRenderPage(\npath\n,\nvalues\n)\nRenderPage(\npath[, param1 [, param2]]\n)\nRenders a content page using the specified path and \noptional extra data. You can get the values of the \nextra parameters from PageData by \nposition (example 1) or key (example 2).\nRenderSection(\nsectionName [, required \n=\ntrue|false\n]\n)\n(Layout pages) \nRenders a content section that has a name. Set\nrequired\nto false to make a section optional.\nRequest.Cookies[\nkey\n]\nGets or sets the value of an HTTP cookie.\nRequest.Files[\nkey\n]\nGets \nthe files that were uploaded in the current request.\nRequest.Form[\nkey\n]\nGets \ndata that was posted in a form (as strings). \nRequest[\nkey\n] checks both the Request.Form and the Request.QueryString collections.\nRequest.QueryString[\nkey\n]\nGets data that was specified in the URL query \nstring. Request[\nkey\n] checks \nboth the Request.Form and the Request.QueryString collections.\nRequest.Unvalidated(\nkey\n)\nRequest.Unvalidated().QueryString|Form|Cookies|Headers[\nkey\n]\nSelectively disables request validation for a \nform element, query-string value, cookie, or header \nvalue. Request validation is enabled by default and \nprevents users from posting markup or other \npotentially dangerous content.\nResponse.AddHeader(\nname\n,\nvalue\n)\nAdds an HTTP server header to \nthe response.\nResponse.OutputCache(\nseconds\n[, sliding] [, varyByParams]\n)\nCaches \nthe page output for a specified time. Optionally set\nsliding\nto reset the timeout on each page \naccess and\nvaryByParams\nto cache different \nversions of the page for each different query string \nin the page request.\nResponse.Redirect(\npath\n)\nRedirects the browser request to a new location.\nResponse.SetStatus(\nhttpStatusCode\n)\nSets the HTTP status code sent to the browser.\nResponse.WriteBinary(\ndata\n[, \nmimetype]\n)\nWrites the contents of\ndata\nto the response with an optional MIME \ntype.\nResponse.WriteFile(\nfile\n)\nWrites the contents of a file to the response.\n@section(\nsectionName\n) {\ncontent\n}\n(Layout pages) Defines a \ncontent section that has a name.\nServer.HtmlDecode(\nhtmlText\n)\nDecodes a string that is HTML encoded.\nServer.HtmlEncode(\ntext\n)\nEncodes a string for rendering in HTML markup.\nServer.MapPath(\nvirtualPath\n)\nReturns the server physical path for the specified \nvirtual path.\nServer.UrlDecode(\nurlText\n)\nDecodes text from a URL.\nServer.UrlEncode(\ntext\n)\nEncodes text to put in a URL.\nSession[\nkey\n]\nGets or \nsets a value that exists until the user closes the \nbrowser.\nToString()\nDisplays a string \nrepresentation of the object's value.\nUrlData[\nindex\n]\nGets \nadditional data from the URL (for example,\n/MyPage/ExtraData\n).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "78d164d4-af53-43cb-8632-93773da998fb",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "efcc80a9-11bb-48f1-a5a3-eb7b50159fd3",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "18299418-6594-4cf9-b470-c6aad96d205f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is IsPost\nReturns true if the \nrequest?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a POST",
        "usually a \nGET"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of IsPost\nReturns true if the \nrequest is 'a POST'."
    },
    {
      "question": "What is Initial requests?",
      "options": [
        "usually a \nGET",
        "None of the above.",
        "a POST",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Initial requests is 'usually a \nGET'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Web Pages- Classes concepts and techniques. You'll learn how to use ASP.NET Web Pages- Classes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Web Pages- Classes and how to apply it in your projects."
}