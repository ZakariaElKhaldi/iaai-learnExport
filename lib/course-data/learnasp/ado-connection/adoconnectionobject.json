{
  "id": "b867c69a-ad79-447e-88cb-34ca0cec9618",
  "title": "ADOConnectionObject",
  "slug": "adoconnectionobject",
  "metadata": {
    "description": "Learn about ADOConnectionObject with clear explanations and practical examples.",
    "keywords": [
      "connection",
      "returns",
      "sets",
      "triggered",
      "object",
      "provider",
      "open",
      "database",
      "command",
      "description"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "ADO Connection"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ADO\nConnection\nObject",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Connection Object\nThe ADO Connection Object is used to create an open connection to a data source.\u00a0Through this\nconnection, you can access and manipulate\na database.\nIf you want to access a database multiple times, you should establish a connection using the Connection object.\nYou can also make a connection to a database by passing a connection string via a Command or Recordset object. However,\nthis type of connection is only good for one specific, single query.\nProgID\nset objConnection=Server.CreateObject(\"ADODB.connection\")\nProperties\nProperty\nDescription\nAttributes\nSets or returns the attributes of a Connection\n      object\nCommandTimeout\nSets or returns the number of seconds to wait while\n      attempting to execute a command\nConnectionString\nSets or returns the details used to create a connection to a data\n      source\nConnectionTimeout\nSets or returns the number of seconds to wait for a connection to\n      open\nCursorLocation\nSets or returns the location of the cursor service\nDefaultDatabase\nSets or returns the default database name\nIsolationLevel\nSets or returns the isolation level\nMode\nSets or returns the provider access permission\nProvider\nSets or returns the provider name\nState\nReturns a value describing if the connection is open or\n      closed\nVersion\nReturns the ADO version number\nMethods\nMethod\nDescription\nBeginTrans\nBegins a new transaction\nCancel\nCancels an execution\nClose\nCloses a connection\nCommitTrans\nSaves any changes and ends the current transaction\nExecute\nExecutes a query, statement, procedure or provider specific\n      text\nOpen\nOpens a connection\nOpenSchema\nReturns schema information from the provider about the data\n      source\nRollbackTrans\nCancels any changes in the current transaction and ends the\n      transaction\nEvents\nNote:\nYou cannot handle events using VBScript or JScript (only Visual Basic, Visual C++, and Visual J++ languages can handle\nevents).\nEvent\nDescription\nBeginTransComplete\nTriggered after the BeginTrans operation\nCommitTransComplete\nTriggered after the CommitTrans operation\nConnectComplete\nTriggered after a connection starts\nDisconnect\nTriggered after a connection ends\nExecuteComplete\nTriggered after a command has finished executing\nInfoMessage\nTriggered if a warning occurs during a ConnectionEvent\n      operation\nRollbackTransComplete\nTriggered after the RollbackTrans operation\nWillConnect\nTriggered before a connection starts\nWillExecute\nTriggered before a command is executed\nCollections\nCollection\nDescription\nErrors\nContains all the Error objects of the Connection object\nProperties\nContains all the Property objects of the Connection object\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "54d80664-6856-4a75-8349-85b9d47be97b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c674374f-5b68-4376-8f38-a57018aac478",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8155b93c-fda0-4ce7-b50f-8a9e70af2bfa",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is ADO\nConnection\nObject\n\nConnection Object\nThe ADO Connection Object?",
      "options": [
        "only good for one specific",
        "None of the above.",
        "used to create an open connection to a data source",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of ADO\nConnection\nObject\n\nConnection Object\nThe ADO Connection Object is 'used to create an open connection to a data source'."
    },
    {
      "question": "What is this type of connection?",
      "options": [
        "only good for one specific",
        "used to create an open connection to a data source",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of this type of connection is 'only good for one specific'."
    }
  ],
  "summary": "This tutorial covers ADOConnectionObject concepts and techniques. You'll learn how to use ADOConnectionObject effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ADOConnectionObject and how to apply it in your projects."
}