{
  "id": "ca9c74e0-95cb-49d4-a386-06be4d24a722",
  "title": "ASPDictionaryObject",
  "slug": "aspdictionaryobject",
  "metadata": {
    "description": "Learn about ASPDictionaryObject with clear explanations and practical examples.",
    "keywords": [
      "dictionary",
      "object",
      "item",
      "value",
      "return",
      "items",
      "pairs",
      "keys",
      "array",
      "arrays"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "ASP Dictionary"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP\nDictionary\nObject",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Dictionary object stores information in name/value pairs.\nMore Examples\nDoes a specified key exist?\nHow to create a Dictionary object, and then use the Exists method to check if a specified key exists.\nReturn an array of all items\nHow to use the Items method to return an array of all the items.\nReturn an array of all keys\nHow to use the Keys method to return an array of all the keys.\nReturn the value of an item\nHow to use the Item property to return the value of an item.\nSet a key\nHow to use the Key property to set a key in a Dictionary object.\nReturn the number of key/item pairs\nHow to use the Count property to return the number of key/item pairs.\nThe Dictionary Object\nThe Dictionary object is used to store information in name/value pairs \n(referred to as key and item). The Dictionary object might seem similar to \nArrays, however, the Dictionary object is a more desirable solution to \nmanipulate related data.\nComparing Dictionaries and Arrays:\nKeys are used to identify the items in a Dictionary object\nYou do not have to call ReDim to change the size of the Dictionary object\nWhen deleting an item from a Dictionary, the remaining items will   automatically shift up\nDictionaries cannot be multidimensional, Arrays can\nDictionaries have more built-in functions than Arrays\nDictionaries work better than arrays on accessing random elements frequently\nDictionaries work better than arrays on locating items by their content\nThe following example creates a Dictionary object, adds some key/item \npairs to it, and retrieves the item value for the key gr:\n<%\nDim d\nSet d=Server.CreateObject(\"Scripting.Dictionary\")\nd.Add \"re\",\"Red\"\nd.Add \"gr\",\"Green\"\nd.Add \"bl\",\"Blue\"\nd.Add \"pi\",\"Pink\"\nResponse.Write(\"The value of key gr is: \" & d.Item(\"gr\"))\n%>\nOutput:\nThe value of key gr is: Green\nThe Dictionary object's properties and methods are described below:\nProperties\nProperty\nDescription\nCompareMode\nSets or returns the comparison mode for comparing keys in a Dictionary \n    object\nCount\nReturns the number of key/item pairs in a Dictionary object\nItem\nSets or returns the value of an item in a Dictionary object\nKey\nSets a new key value for an existing key value in a \n    Dictionary object\nMethods\nMethod\nDescription\nAdd\nAdds a new key/item pair to a Dictionary object\nExists\nReturns a Boolean value that indicates whether a specified key exists in \n    the Dictionary object\nItems\nReturns an array of all the items in a Dictionary\n      object\nKeys\nReturns an array of all the keys in a Dictionary\n      object\nRemove\nRemoves one specified key/item pair from the Dictionary \n    object\nRemoveAll\nRemoves all the key/item pairs in the Dictionary object\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "991b9507-ffda-4559-abbe-d059fb2450b0",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "559a29ab-90d3-466f-91ce-455146af8a3c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c0404048-c006-490d-8a67-971acbbd9e8e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The Dictionary Object\nThe Dictionary object?",
      "options": [
        "None of the above.",
        "used to store information in name/value pairs \n(referred to as key and item)",
        "None of the above.",
        "a more desirable solution to \nmanipulate related data"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The Dictionary Object\nThe Dictionary object is 'used to store information in name/value pairs \n(referred to as key and item)'."
    },
    {
      "question": "What is the Dictionary object?",
      "options": [
        "a more desirable solution to \nmanipulate related data",
        "used to store information in name/value pairs \n(referred to as key and item)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the Dictionary object is 'a more desirable solution to \nmanipulate related data'."
    }
  ],
  "summary": "This tutorial covers ASPDictionaryObject concepts and techniques. You'll learn how to use ASPDictionaryObject effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASPDictionaryObject and how to apply it in your projects."
}