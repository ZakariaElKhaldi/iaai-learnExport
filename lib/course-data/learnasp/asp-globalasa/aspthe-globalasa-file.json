{
  "id": "78383fd2-8b31-49c4-9211-b430f7d8e96c",
  "title": "ASPThe Global.asa file",
  "slug": "aspthe-globalasa-file",
  "metadata": {
    "description": "Learn about ASPThe Global.asa file with clear explanations and practical examples.",
    "keywords": [
      "application",
      "global",
      "file",
      "object",
      "server",
      "session",
      "script",
      "visitors",
      "page",
      "scope"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 6,
    "category": "LearnASP",
    "subcategory": "ASP Global.asa"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP\nThe Global.asa file",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Global.asa file\nThe Global.asa file is an optional file that can contain declarations of objects, variables, and methods that\ncan be accessed by every page in an ASP application.\nAll valid browser scripts (JavaScript, VBScript, JScript, PerlScript, etc.) can be used within Global.asa.\nThe Global.asa file can contain only the following:\nApplication events\nSession events\n<object> declarations\nTypeLibrary declarations\nthe #include directive\nNote:\nThe Global.asa file must be stored in the root directory of the\nASP application, and each application can only have one Global.asa file.\nEvents in Global.asa\nIn  Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the\napplication/session ends. The code for this is placed in event handlers. The Global.asa file can contain four types of events:\nApplication_OnStart\n- Occurs when the FIRST user calls the first page in an ASP application. This event occurs after the\nWeb server is restarted or after the Global.asa file is edited. The \"Session_OnStart\" event occurs immediately after this event.\nSession_OnStart\n- This event occurs EVERY time a NEW user requests his or her first page in the ASP application.\nSession_OnEnd\n- This event occurs EVERY time a user ends a session. A user-session ends after a page has not been requested by the user for a \nspecified time (by default this is 20 minutes).\nApplication_OnEnd\n- This event occurs after the LAST user has ended the session. Typically, this event occurs when a Web server stops.\nThis procedure is used to clean up settings after the Application stops, like delete records or write information to text files.\nA Global.asa file could look something like this:\n<script language=\"vbscript\" runat=\"server\">\nsub Application_OnStart\n'\nsome code\nend sub\nsub Application_OnEnd\n'\nsome code\nend sub\nsub Session_OnStart\n'\nsome code\nend sub\nsub Session_OnEnd\n'\nsome code\nend sub\n</script>\nNote:\nBecause we cannot use the ASP script delimiters (<% and %>) to insert scripts in the Global.asa file, we put subroutines inside an HTML \n<script> element.\n<object> Declarations\nIt is possible to create objects with session or application scope in Global.asa by using the <object> tag.\nNote:\nThe <object> tag should be outside the <script> tag!\nSyntax\n<object runat=\"server\" scope=\"\nscope\n\" id=\"\nid\n\"\n{progid=\"\nprogID\n\"|classid=\"\nclassID\n\"}>\n....\n</object>\nParameter\nDescription\nscope\nSets the scope of the object (either Session or Application)\nid\nSpecifies a unique id for the object\nProgID\nAn id associated with a class id. The format for ProgID is [Vendor.]Component[.Version]\nEither ProgID or ClassID must be specified.\nClassID\nSpecifies a unique id for a COM class object.\nEither ProgID or ClassID must be specified.\nExamples\nThe first example creates an object of session scope named \"MyAd\" by using the ProgID parameter:\n<object runat=\"server\" scope=\"session\" id=\"MyAd\"\nprogid=\"MSWC.AdRotator\">\n</object>\nThe second example creates an object of application scope named \"MyConnection\" by using the ClassID parameter:\n<object runat=\"server\" scope=\"application\" id=\"MyConnection\"\nclassid=\"Clsid:8AD3067A-B3FC-11CF-A560-00A0C9081C21\">\n</object>\nThe objects declared in the Global.asa file can be used by any script in the application:\nGLOBAL.ASA:\n<object runat=\"server\" scope=\"session\" id=\"MyAd\"\nprogid=\"MSWC.AdRotator\">\n</object>\nYou could reference the object \"MyAd\" from any page in the ASP application:\nSOME .ASP FILE:\n<%=MyAd.GetAdvertisement(\"/banners/adrot.txt\")%>\nTypeLibrary Declarations\nA TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file,\nthe constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that have\ndeclared data types in type libraries, you can declare the type libraries in Global.asa.\nSyntax\n<!--METADATA TYPE=\"TypeLib\"\nfile=\"\nfilename\n\"\nuuid=\"\nid\n\"\nversion=\"\nnumber\n\"\nlcid=\"\nlocaleid\n\"\n-->\nParameter\nDescription\nfile\nSpecifies an absolute path to a type library.\nEither the file parameter or the uuid parameter is required\nuuid\nSpecifies a unique identifier for the type library.\nEither the file parameter or the uuid parameter is required\nversion\nOptional. Used for selecting version. If the requested version is not found, then the most recent version is used\nlcid\nOptional. The locale identifier to be used for the type library\nError Values\nThe server can return one of the following error messages:\nError Code\nDescription\nASP 0222\nInvalid type library specification\nASP 0223\nType library not found\nASP 0224\nType library cannot be loaded\nASP 0225\nType library cannot be wrapped\nNote:\nMETADATA tags can appear anywhere in the Global.asa file (both inside and outside <script> tags). However, it is recommended that\nMETADATA tags appear near the top of the Global.asa file.\nRestrictions\nRestrictions on what you can include in the Global.asa file:\nYou cannot display text written in the Global.asa file. This file can't display information\nYou can only use Server and Application objects in the Application_OnStart and Application_OnEnd\nsubroutines. In the\u00a0Session_OnEnd subroutine, you can use Server, Application, and Session\n    objects. In the Session_OnStart subroutine you can use any built-in object\nHow to use the Subroutines\nGlobal.asa is often used to initialize variables.\nThe example below shows how to detect the exact time a visitor first arrives on a Web site. The time is stored in a Session variable named \n\"started\", and the value of the \"started\" variable can be accessed from any ASP page in the application:\n<script language=\"vbscript\" runat=\"server\">\nsub Session_OnStart\nSession(\"started\")=now()\nend sub\n</script>\nGlobal.asa can also be used to control page access.\nThe example below shows how to redirect every new visitor to another page, in this case to a\npage called \"newpage.asp\":\n<script language=\"vbscript\" runat=\"server\">\nsub Session_OnStart\nResponse.Redirect(\"newpage.asp\")\nend sub\n</script>\nAnd you can include functions in the Global.asa file.\nIn the example below the Application_OnStart subroutine occurs when the Web server starts. Then\nthe Application_OnStart subroutine calls another subroutine named \"getcustomers\".\nThe \"getcustomers\" subroutine opens a database and retrieves a record set from\nthe \"customers\" table. The record set is assigned to an array, where it\ncan be accessed from any ASP page without querying the database:\n<script language=\"vbscript\" runat=\"server\">\nsub Application_OnStart\ngetcustomers\nend sub\nsub getcustomers\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\nset rs=conn.execute(\"select name from customers\")\nApplication(\"customers\")=rs.GetRows\nrs.Close\nconn.Close\nend sub\n</script>\nGlobal.asa Example\nIn this example we will create a Global.asa file that counts the number of current visitors.\nThe Application_OnStart sets the Application variable \"visitors\" to 0 when the server starts\nThe Session_OnStart subroutine adds one to the variable \"visitors\" every time a new visitor arrives\nThe Session_OnEnd subroutine subtracts one from \"visitors\" each time this subroutine is triggered\nThe Global.asa file:\n<script language=\"vbscript\" runat=\"server\">\nSub Application_OnStart\nApplication(\"visitors\")=0\nEnd Sub\nSub Session_OnStart\nApplication.Lock\nApplication(\"visitors\")=Application(\"visitors\")+1\nApplication.UnLock\nEnd Sub\nSub Session_OnEnd\nApplication.Lock\nApplication(\"visitors\")=Application(\"visitors\")-1\nApplication.UnLock\nEnd Sub\n</script>\nTo display the number of current visitors in an ASP file:\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<p>There are <%response.write(Application(\"visitors\"))%>\nonline now!</p>\n</body>\n</html>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7223290d-df78-44ba-8c91-156e47708d03",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "83b70114-2ae9-4014-9f18-db14a6618f8a",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3c2f9870-383f-49a3-9bf4-4ac6ae8f5a0f",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is asa file?",
      "options": [
        "an optional file that can contain declarations of objects",
        "placed in event handlers",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of asa file is 'an optional file that can contain declarations of objects'."
    },
    {
      "question": "What is The code for this?",
      "options": [
        "an optional file that can contain declarations of objects",
        "None of the above.",
        "None of the above.",
        "placed in event handlers"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The code for this is 'placed in event handlers'."
    }
  ],
  "summary": "This tutorial covers ASPThe Global.asa file concepts and techniques. You'll learn how to use ASPThe Global.asa file effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASPThe Global.asa file and how to apply it in your projects."
}