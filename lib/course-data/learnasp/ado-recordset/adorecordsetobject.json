{
  "id": "d5d705ae-cf5c-416f-b22e-897879e66a45",
  "title": "ADORecordsetObject",
  "slug": "adorecordsetobject",
  "metadata": {
    "description": "Learn about ADORecordsetObject with clear explanations and practical examples.",
    "keywords": [
      "recordset",
      "object",
      "returns",
      "record",
      "sets",
      "records",
      "current",
      "properties",
      "data",
      "changes"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 6,
    "category": "LearnASP",
    "subcategory": "ADO Recordset"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "ADO\nRecordset\nObject\n\nRecordset Object\nThe ADO Recordset object is used to hold a set of records from a database table",
      "content": ".\nA Recordset object consist of records and columns (fields).\nIn ADO, this object is the most important and the one used most often to \nmanipulate data from a database.\nProgID\nset objRecordset=Server.CreateObject(\"ADODB.recordset\")\nWhen you first open a Recordset, the current record pointer will point to the first record and the BOF and EOF properties are\nFalse. If there are no records, the BOF and EOF property are True.\nRecordset objects can support two types of updating:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Immediate updating",
      "content": "- all changes are written immediately to the\n    database once you call the Update method.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Batch updating",
      "content": "- the provider will cache multiple changes and then \n  send them to the database with the UpdateBatch method.\nIn ADO there are 4 different cursor types defined:",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Dynamic cursor",
      "content": "- Allows you to see additions, changes, and deletions by other\n    users.\nKeyset cursor -\nLike a dynamic cursor, except that\n    you cannot see additions by other users, and it prevents access to records that other users\n    have deleted. Data changes by other users will still be visible.",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Static cursor",
      "content": "- Provides a static copy of a recordset for you to use to find data or generate\n    reports. Additions, changes, or deletions by other users will not be visible. This is the only type of cursor allowed when you open a client-side Recordset object.\nForward-only cursor\n- Allows you to only scroll forward through the Recordset. Additions, changes, or deletions by other users will not be visible.\nThe cursor type can be set by the CursorType property or by the CursorType\nparameter in the Open method.\nNote:\nNot all providers support all methods or properties of the Recordset\nobject.\nProperties\nProperty\nDescription\nAbsolutePage\nSets or returns a value that specifies the page number in the Recordset object\nAbsolutePosition\nSets or returns a value that specifies the ordinal position of the current record in the Recordset object\nActiveCommand\nReturns the Command object associated with the Recordset\nActiveConnection\nSets or returns a definition for a connection if the connection is closed,\n    or the current Connection object if the connection is open\nBOF\nReturns true if the current record position is before the first record, otherwise false\nBookmark\nSets or returns a bookmark. The bookmark saves the position of the current record\nCacheSize\nSets or returns the number of records that can be cached\nCursorLocation\nSets or returns the location of the cursor service\nCursorType\nSets or returns the cursor type of a Recordset object\nDataMember\nSets or returns the name of the data member that will be\n      retrieved from the object referenced by the DataSource property\nDataSource\nSpecifies an object containing data to be represented as a Recordset object\nEditMode\nReturns the editing status of the current record\nEOF\nReturns true if the current record position is after the last record, otherwise false\nFilter\nSets or returns a filter for the data in a Recordset object\nIndex\nSets or returns the name of the current index for a\n      Recordset object\nLockType\nSets or returns a value that specifies the type of locking\n      when editing a record in a Recordset\nMarshalOptions\nSets or returns a value that specifies which records are to \n    be returned to the server\nMaxRecords\nSets or returns the maximum number of records to return to a Recordset object from a query\nPageCount\nReturns the number of pages with data in a Recordset object\nPageSize\nSets or returns the maximum number of records allowed on a\n      single page of a Recordset object\nRecordCount\nReturns the number of records in a Recordset object\nSort\nSets or returns the field names in the Recordset to sort on\nSource\nSets a string value or a Command object reference, or\n      returns a String value that indicates the data source of the Recordset\n      object\nState\nReturns a value that describes if the Recordset object is\n      open, closed, connecting, executing or retrieving data\nStatus\nReturns the status of the current record with regard to\n      batch updates or other bulk operations\nStayInSync\nSets or returns whether the reference to the child records\n      will change when the parent record position changes\nMethods\nMethod\nDescription\nAddNew\nCreates a new record\nCancel\nCancels an execution\nCancelBatch\nCancels a batch update\nCancelUpdate\nCancels changes made to a record of a Recordset\n      object\nClone\nCreates a duplicate of an existing Recordset\nClose\nCloses a Recordset\nCompareBookmarks\nCompares two bookmarks\nDelete\nDeletes a record or a group of records\nFind\nSearches for a record in a Recordset that\n      satisfies a specified criteria\nGetRows\nCopies multiple records from a Recordset object\n      into a two-dimensional array\nGetString\nReturns a Recordset as a string\nMove\nMoves the record pointer in a Recordset object\nMoveFirst\nMoves the record pointer to the first record\nMoveLast\nMoves the record pointer to the last record\nMove\nMoves the record pointer to the \nMove\nMoves the record pointer to the \n\nClears the current Recordset object and returns\n      the \nOpen\nOpens a database element that gives you access\n      to records in a table, the results of a query, or to a saved Recordset\nRequery\nUpdates the data in a Recordset by re-executing\n      the query that made the original Recordset\nResync\nRefreshes the data in the current Recordset from the original database\nSave\nSaves a Recordset object to a file or a Stream\n      object\nSeek\nSearches the index of a Recordset to find a\n      record that matches the specified values\nSupports\nReturns a boolean value that defines whether or\n      not a Recordset object supports a specific type of functionality\nUpdate\nSaves all changes made to a single record\u00a0\n      in a Recordset object\nUpdateBatch\nSaves all changes in a Recordset to the database.\n    Used when working in batch update mode\nEvents\nNote:\nYou cannot handle events using VBScript or JScript (only\nVisual Basic, Visual C++, and Visual J++ languages can handle events).\nEvent\nDescription\nEndOfRecordset\nTriggered when you try to move to a record after the last record\nFetchComplete\nTriggered after all records in an asynchronous operation have\n      been fetched\nFetchProgress\nTriggered periodically in an asynchronous operation,\n    to state how many more records that have been fetched\nFieldChangeComplete\nTriggered after the value of a Field object change\nMoveComplete\nTriggered after the current position in the Recordset has changed\nRecordChangeComplete\nTriggered after a record has changed\nRecordsetChangeComplete\nTriggered after the Recordset has changed\nWillChangeField\nTriggered before the value of a Field object change\nWillChangeRecord\nTriggered before a record change\nWillChangeRecordset\nTriggered before a Recordset change\nWillMove\nTriggered before the current position in the Recordset changes\nCollections\nCollection\nDescription\nFields\nIndicates the number of Field objects in the Recordset object\nProperties\nContains all the Property objects in the Recordset object\nThe Fields Collection's Properties\nProperty\nDescription\nCount\nReturns the number of items in the fields collection. Starts at zero.\nExample:\ncountfields=rs.Fields.Count\nItem(named_item/number)\nReturns a specified item in the fields collection.\nExample:\nitemfields=rs.Fields.Item(1)\nor\nitemfields=rs.Fields.Item(\"Name\")\nThe Properties Collection's Properties\nProperty\nDescription\nCount\nReturns the number of items in the properties collection. Starts at zero.\nExample:\ncountprop=rs.Properties.Count\nItem(named_item/number)\nReturns a specified item in the properties collection.\nExample:\nitemprop = rs.Properties.Item(1)\nor\nitemprop=rs.Properties.Item(\"Name\")\n\n\u2605\n+1",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "f9183aff-bc43-42f8-9cb1-51fe1f5fcaee",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "332e84e8-a11d-475d-be39-970dbab8a81c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "731dffad-054d-4150-a4b1-8f2b40030f41",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is ADO\nRecordset\nObject\n\nRecordset Object\nThe ADO Recordset object?",
      "options": [
        "None of the above.",
        "used to hold a set of records from a database table",
        "None of the above.",
        "the most important and the one used most often to \nmanipulate data from a database"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of ADO\nRecordset\nObject\n\nRecordset Object\nThe ADO Recordset object is 'used to hold a set of records from a database table'."
    },
    {
      "question": "What is this object?",
      "options": [
        "used to hold a set of records from a database table",
        "None of the above.",
        "the most important and the one used most often to \nmanipulate data from a database",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of this object is 'the most important and the one used most often to \nmanipulate data from a database'."
    }
  ],
  "summary": "This tutorial covers ADORecordsetObject concepts and techniques. You'll learn how to use ADORecordsetObject effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ADORecordsetObject and how to apply it in your projects."
}