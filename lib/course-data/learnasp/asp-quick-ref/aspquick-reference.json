{
  "id": "2ca75be0-ef2c-4f0b-8392-b5d92361653a",
  "title": "ASPQuick Reference",
  "slug": "aspquick-reference",
  "metadata": {
    "description": "Learn about ASPQuick Reference with clear explanations and practical examples.",
    "keywords": [
      "object",
      "file",
      "application",
      "server",
      "session",
      "html",
      "used",
      "response",
      "method",
      "user"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 7,
    "category": "LearnASP",
    "subcategory": "ASP Quick Ref"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP\nQuick Reference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ASP Quick Reference from . Print it, and fold it in your pocket.\nBasic Syntax\nASP scripts are surrounded by <% and %>.\u00a0 To write some \noutput to a browser:\n<html>\n<body>\n<%\nresponse.write(\"Hello World!\")\n%>\n</body>\n</html>\nThe default language in ASP is VBScript. To use another scripting language, \ninsert a language specification at the top of the ASP page:\n<%@ language=\"javascript\" %>\n<html>\n<body>\n<%\n....\n%>\nForms and User Input\nRequest.QueryString is used to collect values in a form with method=\"get\". \nInformation sent from a form with the GET method is visible to everyone (it will \nbe displayed in the browser's address bar) and has limits on the amount of \ninformation to send.\nRequest.Form is used to collect values in a form with method=\"post\". \nInformation sent from a form with the POST method is invisible to others and has \nno limits on the amount of information to send.\nASP Cookies\nA cookie is often used to identify a user. A cookie is a small file that the \nserver embeds on the user's computer. Each time the same computer requests for a \npage with a browser, it will send the cookie too.\nThe Response.Cookies command is used to create cookies:\n<%\nResponse.Cookies(\"firstname\")=\"Alex\"\nResponse.Cookies(\"firstname\").Expires=\"May 10,2002\"\n%>\nNote:\nThe Response.Cookies command must appear BEFORE the <html> tag!\nThe \"Request.Cookies\" command is used to retrieve a cookie value:\n<%\nfname=Request.Cookies(\"firstname\")\nresponse.write(\"Firstname=\" & fname)\n%>\nIncluding Files\nYou can insert the content of one ASP file into another ASP file before the \nserver executes it, with the #include directive. The #include directive is used \nto create functions, headers, footers, or elements that will be reused on \nmultiple pages\nSyntax:\n<!--#include virtual=\"somefile.inc\"-->\nor\n<!--#include file =\"somefile.inc\"-->\nUse the virtual keyword to indicate a path beginning with a virtual \ndirectory. If a file named \"header.inc\" resides in a virtual directory named \n/html, the following line would insert the contents of \"header.inc\":\n<!-- #include virtual =\"/html/header.inc\" -->\nUse the file keyword to indicate a relative path. A relative path begins with \nthe directory that contains the including file. If you have a file in the html \ndirectory, and the file \"header.inc\" resides in html\\headers, the following line \nwould insert \"header.inc\" in your file:\n<!-- #include file =\"headers\\header.inc\" -->\nUse the file keyword with the syntax (..\\) to include a file from a \nhigher-level directory.\nGlobal.asa\nThe Global.asa file is an optional file that can contain declarations of \nobjects, variables, and methods that can be accessed by every page in an ASP \napplication.\nNote:\nThe Global.asa file must be stored in the\nroot directory of the ASP application, and each application can only have one\nGlobal.asa file.\nThe Global.asa file can contain only the following:\nApplication events\nSession events\n<object> declarations\nTypeLibrary declarations\nthe #include directive\nApplication and Session Events\nIn Global.asa you can tell the application and session objects what to do \nwhen the application/session starts and what to do when the application/session \nends. The code for this is placed in event handlers.\nNote:\nWe do not use\n<% and %>, to\ninsert scripts in the Global.asa file, we have to put the subroutines inside the\nHTML <script> tag:\n<script language=\"vbscript\" runat=\"server\">\nsub Application_OnStart\n' some code\nend sub\nsub Application_OnEnd\n' some code\nend sub\nsub Session_OnStart\n' some code\nend sub\nsub Session_OnEnd\n' some code\nend sub\n</script>\n<object> Declarations\nIt is also possible to create objects with session or application scope in \n Global.asa by using the <object> tag.\nNote:\nThe <object> tag should be \n outside the <script> tag!\nSyntax:\n<object runat=\"server\" scope=\"scope\" id=\"id\"\n{progid=\"progID\"|classid=\"classID\"}>\n.......\n</object>\nTypeLibrary Declarations\nA TypeLibrary is a container for the contents of a DLL file corresponding to \n a COM object. By including a call to the TypeLibrary in the Global.asa file, \n the constants of the COM object can be accessed, and errors can be better \n reported by the ASP code. If your Web application relies on COM objects that \n have declared data types in type libraries, you can declare the type libraries \n in Global.asa.\nSyntax:\n<!--METADATA TYPE=\"TypeLib\"\nfile=\"filename\"\nuuid=\"typelibraryuuid\"\nversion=\"versionnumber\"\nlcid=\"localeid\"\n-->\nThe Session Object\nThe Session object is used to store information about, or change settings for \na user session. Variables stored in the Session object hold information about \none single user, and are available to all pages in one application.\nCollections\nContents - Holds every item added to the session with script commands\nStaticObjects - Holds every object added to the session with the <object> tag, and a given session\nContents.Remove(\nitem/index\n) - Deletes an item from the Contents collection\nContents.RemoveAll() - Deletes every item from the Contents collection\nProperties\nCodePage - Sets the code page that will be used to display dynamic content\nLCID - Sets the locale identifier that will be used to display dynamic content\nSessionID - Returns the session id\nTimeout - Sets the timeout for the session\nMethod\nAbandon - Kills every object in a session object\nApplication Object\nA group of ASP files that work together to perform some \n purpose is called an application. The Application object in ASP is used to tie \n these files together. All users share one Application object. The Application object\nshould hold information that will be used by many pages in the application (like\ndatabase connection information).\nCollections\nContents - Holds every item added to the application with script commands\nStaticObjects - Holds every object added to the application with the <object>\ntag\nContents.Remove - Deletes an item from a collection\nContents.RemoveAll - Deletes every item from a collection\nMethods\nLock - Prevents a user from changing the application object properties\nUnlock - Allows a user to change the application object properties\nThe Response Object\nThe Response Object is used to send output to the user from the server.\nCollection\nCookies(name) - Sets a cookie value. If the cookie does not exist, it will\n    be created, and take the value that is specified\nProperties\nBuffer - Whether to buffer the output or not. When the output is buffered,\n    the server will hold back the response until all of the server scripts have\n    been processed, or until the script calls the Flush or End method. If this\n    property is set, it should be before the <html> tag in the ASP file\nCacheControl - Sets whether proxy servers can cache the output or not.\n    When set to Public, the output can be cached by a proxy server\nCharset(\ncharset_name) -\nSets the name of the character set (like\n    \"ISO8859-1\") to the content type header\nContentType - Sets the HTTP content type (like \"text/html\",\n    \"image/gif\", \"image/jpeg\", \"text/plain\"). Default\n    is \"text/html\"\nExpires - Sets how long a page will be cached on a browser before it\n    expires\nExpiresAbsolute - Sets a date and time when a page cached on a browser\n    will expire\nIsClientConnected - Checks if the client is still connected to the server\nPics(\npics_label\n) - Adds a value to the pics label response header\nStatus - Specifies the value of the status line\nMethods\nAddHeader(\nname, value\n) - Adds an HTML header with a specified value\nAppendToLog\nstring -\nAdds a string to the end of the server log\n    entry\nBinaryWrite(\ndata_to_write\n) - Writes the given information without\n    any character-set conversion\nClear - Clears the buffered output. Use this method to handle errors. If\n    Response.Buffer is not set to true, this method will cause a run-time error\nEnd - Stops processing the script, and return the current result\nFlush - Sends buffered output immediately. If Response.Buffer is not set\n    to true, this method will cause a run-time error\nRedirect(\nurl\n) - Redirects the user to another url\nWrite(\ndata_to_write\n) - Writes a text to the user\nRequest Object\nWhen a browser asks for a page from a server, it is called a request. The\nRequest Object is used to get information from the user.\nCollection\nClientCertificate - Holds field values stored in the client certificate\nCookies(\nname\n) - Holds cookie values\nForm(\nelement_name\n) - Holds form (input) values. The form must use\n    the post method\nQueryString(\nvariable_name\n) - Holds variable values in the query\n    string\nServerVariables(\nserver_variable\n) - Holds server variable values\nProperty\nTotalBytes - Holds the total number of bytes the client is sending in the\n    body of the request\nMethod\nBinaryRead - Fetches the data that is sent to the server from the client\n    as part of a post request\nServer Object\nThe Server Object is used to access properties and methods on the server.\nProperty\nScriptTimeout - Sets how long a script can run before it is terminated\nMethod\nCreateObject(\ntype_of_object\n) - Creates an instance of an object\nExecute(\npath\n) - Executes an ASP file from inside another ASP\n    file. After executing the called ASP file, the control is\n    returned to the original ASP file\nGetLastError() - Returns an ASPError object that will describe the error\n    that occurred\nHTMLEncode(\nstring\n) - Applies HTML encoding to a string\nMapPath(\npath\n) - Maps a relative or virtual path to a physical path\nTransfer(\npath\n) - Sends all of the state information to another ASP\n    file for processing. After the transfer, procedural control is not returned\n    to the original ASP file\nURLEncode(\nstring\n) - Applies URL encoding rules to a string\nSource :\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "721a0334-fddb-48d0-8750-894b755f6c65",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "88468c17-8269-4507-950d-bf988a5eae78",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "43d627d2-cd84-4fb1-aba2-73f2a79128c1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Basic Syntax\nASP scripts?",
      "options": [
        "None of the above.",
        "VBScript",
        "surrounded by <% and %>",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Basic Syntax\nASP scripts is 'surrounded by <% and %>'."
    },
    {
      "question": "What is The default language in ASP?",
      "options": [
        "None of the above.",
        "VBScript",
        "surrounded by <% and %>",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The default language in ASP is 'VBScript'."
    }
  ],
  "summary": "This tutorial covers ASPQuick Reference concepts and techniques. You'll learn how to use ASPQuick Reference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASPQuick Reference and how to apply it in your projects."
}