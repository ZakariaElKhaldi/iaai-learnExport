{
  "id": "270c6dbc-ddfd-4277-81f6-cc52019ce5d2",
  "title": "ASP.NET Razor- C# Variables",
  "slug": "aspnet-razor-c-variables",
  "metadata": {
    "description": "Learn about ASP.NET Razor- C# Variables with clear explanations and practical examples.",
    "keywords": [
      "csharp",
      "string",
      "mystring",
      "data",
      "variable",
      "variables",
      "type",
      "values",
      "number",
      "converts",
      "store"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "Razor C# Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Razor\n- C# Variables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "ASP",
      "content": ".NET Razor\n- C# Variables\n\nVariables are named entities used to store data.\nVariables\nVariables are used to store data.\nThe name of a variable must begin with an alphabetic character and \ncannot contain whitespace or reserved characters.\nA variable can be of a \nspecific type, indicating the kind of data it stores. String variables store \nstring values (\"Welcome to \"), integer variables store number values \n(103), date variables store date values, etc.\nVariables are declared \nusing the var keyword, or by using the type (if you want to declare the type), \nbut ASP.NET can usually determine data types automatically.\nExamples\n// \n    Using the var keyword:\nvar greeting = \"Welcome to \";\nvar \n    counter = 103;\nvar today = DateTime.Today;\n// Using data types:\nstring greeting = \"Welcome to \";\nint counter = 103;\nDateTime \n    today = DateTime.Today;\nData Types\nBelow is a list of\u00a0 common data types:\nType\nDescription\nExamples\nint\nInteger (whole numbers)\n103, 12, 5168\nfloat\nFloating-point number\n3.14,\u00a03.4e38\ndecimal\nDecimal number (higher precision)\n1037.196543\nbool\nBoolean\ntrue, false\nstring\nString\n\"Hello \", \"John\"\nOperators\nAn operator tells ASP.NET what kind of command to perform in an expression.\nThe C# language supports many operators. Below is a list of\u00a0common operators:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Example",
      "content": "=\nAssigns a value to a variable.\ni=6\n+\n-\n*\n/\nAdds a value or variable.\nSubtracts a value or variable.\nMultiplies a \nvalue or variable.\nDivides a value or variable.\ni=5+5\ni=5-5\ni=5*5\ni=5/5\n+=\n-=\nIncrements a variable.\nDecrements a variable.\ni += 1\ni -= 1\n==\nEquality. Returns true if values are equal.\nif (i==10)\n!=\nInequality. Returns true if values are not equal.\nif (i!=10)\n<\n>\n<=\n>=\nLess than.\nGreater than.\nLess than or equal.\nGreater than or equal.\nif (i<10)\nif (i>10)\nif (i<=10)\nif (i>=10)\n+\nAdding strings (concatenation).\n\"w3\" + \"schools\"\n.\nDot. Separate objects and methods.\nDateTime.Hour\n()\nParenthesis. Groups values.\n(i+5)\n()\nParenthesis. Passes parameters.\nx=Add(i,5)\n[]\nBrackets. Accesses values in arrays or collections.\nname[3]\n!\nNot. Reverses true or false.\nif (!ready)\n&&\n||\nLogical AND.\nLogical OR.\nif (ready && clear)\nif (ready || clear)\nConverting Data Types\nConverting from one data type to another is sometimes useful.\nThe most \ncommon example is to convert string input to another type, such as an integer or \na date.\nAs a rule, user input comes as strings, even if the user entered a number. \nTherefore, numeric input values must be converted to numbers before they can be \nused in calculations.\nBelow is a list of\u00a0common conversion methods:\nMethod\nDescription\nExample\nAsInt()\nIsInt()\nConverts a string to an integer.\nif (myString.IsInt())\n{myInt=myString.AsInt();}\nAsFloat()\nIsFloat()\nConverts a string to a floating-point number.\nif (myString.IsFloat())\n{myFloat=myString.AsFloat();}\nAsDecimal()\nIsDecimal()\nConverts a string to a decimal number.\nif (myString.IsDecimal())\n{myDec=myString.AsDecimal();}\nAsDateTime()\nIsDateTime()\nConverts a string to an ASP.NET DateTime type.\nmyString=\"10/10/2012\";\nmyDate=myString.AsDateTime();\nAsBool()\nIsBool()\nConverts a string to a Boolean.\nmyString=\"True\";\nmyBool=myString.AsBool();\nToString()\nConverts any data type to a string.\nmyInt=1234;\nmyString=myInt.ToString();\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 4,
      "code": "// \n    Using the var keyword:\nvar greeting = \"Welcome to W3Schools\";\nvar \n    counter = 103;\nvar today = DateTime.Today;\n// Using data types:\nstring greeting = \"Welcome to W3Schools\";\nint counter = 103;\nDateTime \n    today = DateTime.Today;",
      "language": "unknown",
      "explanation": "Example of examples"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// \n    Using the var keyword:\nvar greeting = \"Welcome to W3Schools\";\nvar \n    counter = 103;\n# TODO: Complete this line\n// Using data types:\nstring greeting = \"Welcome to W3Schools\";\nint counter = 103;\nDateTime \n    today = DateTime.Today;",
      "solution": "// \n    Using the var keyword:\nvar greeting = \"Welcome to W3Schools\";\nvar \n    counter = 103;\nvar today = DateTime.Today;\n// Using data types:\nstring greeting = \"Welcome to W3Schools\";\nint counter = 103;\nDateTime \n    today = DateTime.Today;"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "103ff55d-8a08-4b8a-bcd9-f7a0868376d3",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d7acbcd4-b20d-4b6c-82eb-1566573b09f8",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "74708009-c14d-48df-825c-624980c81b05",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Variables\n\nVariables?",
      "options": [
        "None of the above.",
        "None of the above.",
        "named entities used to store data",
        "used to store data"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Variables\n\nVariables is 'named entities used to store data'."
    },
    {
      "question": "What is Variables\nVariables?",
      "options": [
        "named entities used to store data",
        "None of the above.",
        "used to store data",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Variables\nVariables is 'used to store data'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Razor- C# Variables concepts and techniques. You'll learn how to use ASP.NET Razor- C# Variables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Razor- C# Variables and how to apply it in your projects."
}