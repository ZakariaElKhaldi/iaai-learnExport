{
  "id": "24febe0b-6805-467d-b8a9-8e95800c6793",
  "title": "ASP.NET Razor- C# and VB Code Syntax",
  "slug": "aspnet-razor-c-and-vb-code-syntax",
  "metadata": {
    "description": "Learn about ASP.NET Razor- C# and VB Code Syntax with clear explanations and practical examples.",
    "keywords": [
      "csharp",
      "code",
      "razor",
      "example",
      "datetime",
      "html",
      "syntax",
      "server",
      "input",
      "mymessage",
      "greeting"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "Razor Syntax"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Razor\n- C# and VB Code Syntax",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Razor supports both C# (C sharp) and VB (Visual Basic).\nMain Razor Syntax Rules for C#\nRazor code blocks are enclosed in @{ ... }\nInline expressions (variables and functions) start with @\nCode statements end with semicolon\nVariables are declared with the var keyword\nStrings are enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension .cshtml\nC# Example\n<!-- Single statement block -->\n@{ var myMessage =    \"Hello World\"; }\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!--    Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\nvar weekDay = DateTime.Now.DayOfWeek;\nvar greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;\n}\n<p>The greeting is:\n@greetingMessage\n</p>\nRun example \u00bb\nMain Razor Syntax Rules for VB\nRazor code blocks are enclosed in @Code ... End Code\nInline expressions (variables and functions) start with @\nVariables are declared with the Dim keyword\nStrings are enclosed with quotation marks\nVB code is not case sensitive\nVB files have the extension .vbhtml\nExample\n<!-- Single statement block \u00a0-->\n@Code dim myMessage = \"Hello World\" End Code\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Here in Huston it is: \" & weekDay\nEnd Code\n<p>The greeting is:\n@greetingMessage\n</p>\nRun example \u00bb\nHow Does it Work?\nRazor is a simple programming syntax for embedding server code in web pages.\nRazor syntax is based on the ASP.NET framework, the part of the Microsoft.NET Framework that's specifically designed for creating web \napplications.\nThe Razor syntax gives you all the power of ASP.NET, but is using a simplified \nsyntax that's easier to learn if you're a beginner, and makes you more \nproductive if you're an expert.\nRazor web pages can be described as HTML pages with two kinds of content: \nHTML content and Razor code.\nWhen the server reads the page, it runs the Razor code first, before it sends \nthe HTML page to the browser. The code that is executed on the server can \nperform tasks that cannot be done in the browser, for example accessing a server \ndatabase. Server code can create dynamic HTML content on the fly, before it is \nsent to the browser. Seen from the browser, the HTML generated by server code is \nno different than static HTML content.\nASP.NET web pages with Razor syntax have the special file extension cshtml \n(Razor using C#) or vbhtml (Razor using VB).\nWorking With Objects\nServer coding often involves objects.\nThe \"DateTime\" object is a typical \nbuilt-in ASP.NET object, but objects can also be self-defined, a web page, a text box, a file, \na database record, etc.\nObjects may have methods they can perform. A \ndatabase record might have a \"Save\" method, an image object might have a \n\"Rotate\" method, an email object might have a \"Send\" method, \nand so on.\nObjects \nalso have properties that describe their characteristics. A database record \nmight have a FirstName and a LastName property (among others).\nThe ASP.NET \nDateTime object has a Now property (written as DateTime.Now), and the Now property has a \nDay property (written as DateTime.Now.Day). The example below shows how to \naccess some properties of the DateTime object:\nExample\n<table border=\"1\">\n<tr>\n<th \nwidth=\"100px\">Name</th>\n<td width=\"100px\">Value</td>\n</tr>\n<tr>\n<td>Day</td><td>\n@DateTime.Now.Day\n</td>\n</tr>\n<tr>\n<td>Hour</td><td>\n@DateTime.Now.Hour\n</td>\n</tr>\n<tr>\n<td>Minute</td><td>\n@DateTime.Now.Minute\n</td>\n</tr>\n<tr>\n<td>Second</td><td>\n@DateTime.Now.Second\n</td>\n</tr>\n</td>\n</table>\nRun example \u00bb\nIf and Else Conditions\nAn important feature of dynamic web pages is that you can determine what to \ndo based on conditions.\nThe common way to do this is with the if ... else statements:\nExample\n@{\nvar txt = \"\";\nif(DateTime.Now.Hour > 12)\n{txt = \"Good Evening\";}\nelse\n{txt = \"Good Morning\";}\n}\n<html>\n<body>\n<p>The message is\n@txt\n</p>\n</body>\n</html>\nRun example \u00bb\nReading User Input\nAnother important feature of dynamic web pages is that you can read user \ninput.\nInput is read by the Request[] function, and posting (input) is tested by the \nIsPost condition:\nExample\n@{\nvar totalMessage = \"\";\nif(IsPost)\n{\nvar num1 = Request[\"text1\"];\nvar num2 = Request[\"text2\"];\nvar total = num1.AsInt() + num2.AsInt();\ntotalMessage = \n\"Total = \" + total;\n}\n}\n<html>\n<body \nstyle=\"background-color: beige; font-family: Verdana, Arial;\">\n<form \naction=\"\" method=\"post\">\n<p><label for=\"text1\">First Number:</label><br>\n<input type=\"text\" name=\"text1\" /></p>\n<p><label for=\"text2\">Second \nNumber:</label><br>\n<input type=\"text\" name=\"text2\" /></p>\n<p><input \ntype=\"submit\" value=\" Add \" /></p>\n</form>\n<p>\n@totalMessage\n</p>\n</body>\n</html>\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "C# Example",
      "content": "",
      "order": 3,
      "code": "<!-- Single statement block -->\n@{ var myMessage =    \"Hello World\"; }\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!--    Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\nvar weekDay = DateTime.Now.DayOfWeek;\nvar greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;\n}\n<p>The greeting is:\n@greetingMessage\n</p>",
      "language": "unknown",
      "explanation": "Example of c# example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<!-- Single statement block \u00a0-->\n@Code dim myMessage = \"Hello World\" End Code\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Here in Huston it is: \" & weekDay\nEnd Code\n<p>The greeting is:\n@greetingMessage\n</p>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<table border=\"1\">\n<tr>\n<th \nwidth=\"100px\">Name</th>\n<td width=\"100px\">Value</td>\n</tr>\n<tr>\n<td>Day</td><td>\n@DateTime.Now.Day\n</td>\n</tr>\n<tr>\n<td>Hour</td><td>\n@DateTime.Now.Hour\n</td>\n</tr>\n<tr>\n<td>Minute</td><td>\n@DateTime.Now.Minute\n</td>\n</tr>\n<tr>\n<td>Second</td><td>\n@DateTime.Now.Second\n</td>\n</tr>\n</td>\n</table>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "@{\nvar txt = \"\";\nif(DateTime.Now.Hour > 12)\n{txt = \"Good Evening\";}\nelse\n{txt = \"Good Morning\";}\n}\n<html>\n<body>\n<p>The message is\n@txt\n</p>\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "@{\nvar totalMessage = \"\";\nif(IsPost)\n{\nvar num1 = Request[\"text1\"];\nvar num2 = Request[\"text2\"];\nvar total = num1.AsInt() + num2.AsInt();\ntotalMessage = \n\"Total = \" + total;\n}\n}\n<html>\n<body \nstyle=\"background-color: beige; font-family: Verdana, Arial;\">\n<form \naction=\"\" method=\"post\">\n<p><label for=\"text1\">First Number:</label><br>\n<input type=\"text\" name=\"text1\" /></p>\n<p><label for=\"text2\">Second \nNumber:</label><br>\n<input type=\"text\" name=\"text2\" /></p>\n<p><input \ntype=\"submit\" value=\" Add \" /></p>\n</form>\n<p>\n@totalMessage\n</p>\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!-- Single statement block -->\n@{ var myMessage =    \"Hello World\"; }\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!--    Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\n# TODO: Complete this line\nvar greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;\n}\n<p>The greeting is:\n@greetingMessage\n</p>",
      "solution": "<!-- Single statement block -->\n@{ var myMessage =    \"Hello World\"; }\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!--    Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\nvar weekDay = DateTime.Now.DayOfWeek;\nvar greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;\n}\n<p>The greeting is:\n@greetingMessage\n</p>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!-- Single statement block \u00a0-->\n@Code dim myMessage = \"Hello World\" End Code\n<!-- Inline expression or variable -->\n# TODO: Complete this line\n@myMessage\n</p>\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Here in Huston it is: \" & weekDay\nEnd Code\n<p>The greeting is:\n@greetingMessage\n</p>",
      "solution": "<!-- Single statement block \u00a0-->\n@Code dim myMessage = \"Hello World\" End Code\n<!-- Inline expression or variable -->\n<p>The value of myMessage is:\n@myMessage\n</p>\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Here in Huston it is: \" & weekDay\nEnd Code\n<p>The greeting is:\n@greetingMessage\n</p>"
    }
  ],
  "related_topics": [
    {
      "id": "ecf43c37-e1aa-4f8a-a1fa-2ab522392b75",
      "title": "Csharp Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "d0cfcf51-448d-4114-a402-ca74a756cc2e",
      "title": "Csharp Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is Razor code blocks?",
      "options": [
        "enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension",
        "enclosed in @{",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Razor code blocks is 'enclosed in @{'."
    },
    {
      "question": "What is Code statements end with semicolon\nVariables are declared with the var keyword\nStrings?",
      "options": [
        "enclosed in @{",
        "None of the above.",
        "enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Code statements end with semicolon\nVariables are declared with the var keyword\nStrings is 'enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Razor- C# and VB Code Syntax concepts and techniques. You'll learn how to use ASP.NET Razor- C# and VB Code Syntax effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Razor- C# and VB Code Syntax and how to apply it in your projects."
}