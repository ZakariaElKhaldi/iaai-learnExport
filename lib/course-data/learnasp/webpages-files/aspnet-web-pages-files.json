{
  "id": "76b76864-e1ac-4feb-8beb-bcc93441b69e",
  "title": "ASP.NET Web Pages- Files",
  "slug": "aspnet-web-pages-files",
  "metadata": {
    "description": "Learn about ASP.NET Web Pages- Files with clear explanations and practical examples.",
    "keywords": [
      "file",
      "text",
      "data",
      "files",
      "example",
      "excel",
      "comma",
      "persons",
      "array",
      "html"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "WebPages Files"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Web Pages\n- Files",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This chapter is about working with text files.\nWorking with Text Files\nSometimes you will want to access data stored in text files.\nText files used to store data is often called flat files.\nCommon flat file \nformats are .txt, .xml, and .csv (comma-delimited values).\nIn this chapter you will learn:\nHow to read and display data from a text file\nAdd a Text File Manually\nIn the example to follow, you will need a text file to work with.\nOn your web site, if you don't have an App_Data folder, create one.\nIn the App_Data folder, create a new file named Persons.txt.\nAdd the following content to the file:\nPersons.txt\nGeorge,Lucas\nSteven,Spielberg\nAlfred,Hitchcock\nDisplaying Data from a Text File\nThe example below shows how to display data from a text file:\nExample\n@{\nvar dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");\nArray userData = File.ReadAllLines(dataFile);\n}\n<!DOCTYPE \n    html>\n<html>\n<body>\n<h1>Reading Data from a File</h1>\n@foreach (string dataLine in userData)\n{\nforeach \n    (string dataItem in dataLine.Split(','))\n{@dataItem <text>&nbsp;</text>}\n<br />\n}\n</body>\n</html>\nRun example \u00bb\nExample explained\nServer.MapPath\nfinds the exact text file path.\nFile.ReadAllLines\nopens the text file and reads all lines \nfrom the file into an array.\nFor each\ndataItem\nin each\ndataline\nof the \narray the data is displayed.\nDisplaying Data from an Excel File\nWith Microsoft Excel, you can save a spreadsheet as a comma separated text \nfile (.csv file). When you do so, each row in the spreadsheet is saved as a text \nline, and each data column is separated by a comma.\nYou can use the example above to read an Excel .csv file (just change the \nfile name to the name of the Excel file).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Persons.txt",
      "content": "",
      "order": 3,
      "code": "George,Lucas\nSteven,Spielberg\nAlfred,Hitchcock",
      "language": "unknown",
      "explanation": "Example of persons.txt"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "@{\nvar dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");\nArray userData = File.ReadAllLines(dataFile);\n}\n<!DOCTYPE \n    html>\n<html>\n<body>\n<h1>Reading Data from a File</h1>\n@foreach (string dataLine in userData)\n{\nforeach \n    (string dataItem in dataLine.Split(','))\n{@dataItem <text>&nbsp;</text>}\n<br />\n}\n</body>\n</html>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "George,Lucas\nSteven,Spielberg\n# TODO: Complete this line",
      "solution": "George,Lucas\nSteven,Spielberg\nAlfred,Hitchcock"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@{\nvar dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");\nArray userData = File.ReadAllLines(dataFile);\n}\n<!DOCTYPE \n    html>\n<html>\n# TODO: Complete this line\n<h1>Reading Data from a File</h1>\n@foreach (string dataLine in userData)\n{\nforeach \n    (string dataItem in dataLine.Split(','))\n{@dataItem <text>&nbsp;</text>}\n<br />\n}\n</body>\n</html>",
      "solution": "@{\nvar dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");\nArray userData = File.ReadAllLines(dataFile);\n}\n<!DOCTYPE \n    html>\n<html>\n<body>\n<h1>Reading Data from a File</h1>\n@foreach (string dataLine in userData)\n{\nforeach \n    (string dataItem in dataLine.Split(','))\n{@dataItem <text>&nbsp;</text>}\n<br />\n}\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "16a17b57-8cf5-4885-bd1e-aa8fa34dc833",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c1f88a88-466f-4e44-b9ad-33ded79f554e",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "dafc2dd1-1634-4b3f-a727-52e74e088056",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Files\n\nThis chapter?",
      "options": [
        "often called flat files",
        "about working with text files",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Files\n\nThis chapter is 'about working with text files'."
    },
    {
      "question": "What is Text files used to store data?",
      "options": [
        "about working with text files",
        "None of the above.",
        "often called flat files",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Text files used to store data is 'often called flat files'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Web Pages- Files concepts and techniques. You'll learn how to use ASP.NET Web Pages- Files effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Web Pages- Files and how to apply it in your projects."
}