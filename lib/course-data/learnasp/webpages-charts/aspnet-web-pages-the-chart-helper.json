{
  "id": "8299c6bd-c48c-4467-8838-2d54e61ac6d4",
  "title": "ASP.NET Web Pages- The Chart Helper",
  "slug": "aspnet-web-pages-the-chart-helper",
  "metadata": {
    "description": "Learn about ASP.NET Web Pages- The Chart Helper with clear explanations and practical examples.",
    "keywords": [
      "c",
      "chart",
      "data",
      "database",
      "example",
      "charts",
      "helper",
      "width",
      "height",
      "method",
      "dbdata"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnASP",
    "subcategory": "WebPages Charts"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ASP.NET Web Pages\n- The Chart Helper",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "ASP",
      "content": ".NET Web Pages\n- The Chart Helper\n\nThe Chart Helper - One of many useful ASP.NET Web Helpers.\nThe Chart Helper\nIn the \nYou learned how to display data in a grid using the \"WebGrid Helper\".\nThis chapter explains how to display data in graphical form, using the \"Chart \nHelper\".\nThe \"Chart Helper\" can create chart images of different types with many \nformatting options and labels. It can create standard charts like area charts, \nbar charts, column charts, line charts, and pie charts, along with more \nspecialized charts like stock charts.\nThe data you display in a chart can be from an array, from a database, or from data in a file.\nChart From an Array\nThe example below shows the code needed to display a chart from an array of values:\nExample\n@{\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Employees\")\n.AddSeries(chartType: \"column\",\nxValue: new[] { \u00a0\"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },\nyValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" })\n.Write();\n}\nRun example \u00bb\n-\nnew Chart\ncreates a new chart object and sets its width and height\n- the",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "AddTitle\nmethod \nspecifies the chart title",
      "content": "- the",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "AddSeries\nmethod adds data to the chart",
      "content": "- the\nchartType\nparameter defines the type of chart\n- the\nxValue\nparameter defines x-axis names\n- the\nyValues\nparameter defines the y-axis values\n- the\nWrite()\nmethod displays the chart\nChart From Database Data\nYou can run a database query and then use data from the results to create a \nchart:\nExample\n@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.DataBindTable(dataSource: dbdata, xField: \"Name\")\n.Write();\n}\nRun example \u00bb\n-\nvar db = Database.Open\nopens the database (and assigns the database \nobject to the variable db)\n-\nvar dbdata = db.Query\nruns a database query and stores the result in \ndbdata\n-\nnew Chart\ncreates a chart new object and sets its width and height\n- the",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "AddTitle\nmethod \nspecifies the chart title",
      "content": "- the",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "DataBindTable\nmethod binds the data source to the chart",
      "content": "- the\nWrite()\nmethod displays the chart\nAn alternative to using the DataBindTable method is to use AddSeries (See \n\ncan specify the chart and data more explicitly:\nExample\n@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.AddSeries(chartType:\"Pie\",\nxValue: dbdata, xField: \"Name\",\nyValues: dbdata, yFields: \"Price\")\n.Write();\n}\nRun example \u00bb\nChart From XML Data\nThe third option for charting is to use an XML file as the data for the \nchart:\nExample\n@using System.Data;\n@{\nvar dataSet = new DataSet();\ndataSet.ReadXmlSchema(Server.MapPath(\"data.xsd\"));\ndataSet.ReadXml(Server.MapPath(\"data.xml\"));\nvar dataView = new DataView(dataSet.Tables[0]);\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Sales Per Employee\")\n.AddSeries(\"Default\", chartType: \"Pie\",\nxValue: dataView, xField: \"Name\",\nyValues: dataView, yFields: \"Sales\")\n.Write();}\n}\nRun example \u00bb\nChart Object Reference\nHelper\nDescription\nChart(\nwidth\n,\nheight [, \ntemplate] [, templatePath]\n)\nInitializes a chart.\nChart.AddLegend(\n[title] [, name]\n)\nAdds a legend to a chart.\nChart.AddSeries(\n[name] [, chartType] \n[, chartArea]\n[, axisLabel] [, legend] [, markerStep] [, xValue]\n[, xField] [, yValues] [, yFields] [, options])\nAdds a series of values to the chart.\n\n\u2605\n+1",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "@{\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Employees\")\n.AddSeries(chartType: \"column\",\nxValue: new[] { \u00a0\"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },\nyValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" })\n.Write();\n}",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.DataBindTable(dataSource: dbdata, xField: \"Name\")\n.Write();\n}",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.AddSeries(chartType:\"Pie\",\nxValue: dbdata, xField: \"Name\",\nyValues: dbdata, yFields: \"Price\")\n.Write();\n}",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "@using System.Data;\n@{\nvar dataSet = new DataSet();\ndataSet.ReadXmlSchema(Server.MapPath(\"data.xsd\"));\ndataSet.ReadXml(Server.MapPath(\"data.xml\"));\nvar dataView = new DataView(dataSet.Tables[0]);\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Sales Per Employee\")\n.AddSeries(\"Default\", chartType: \"Pie\",\nxValue: dataView, xField: \"Name\",\nyValues: dataView, yFields: \"Sales\")\n.Write();}\n}",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@{\n# TODO: Complete this line\n.AddTitle(\"Employees\")\n.AddSeries(chartType: \"column\",\nxValue: new[] { \u00a0\"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },\nyValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" })\n.Write();\n}",
      "solution": "@{\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Employees\")\n.AddSeries(chartType: \"column\",\nxValue: new[] { \u00a0\"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },\nyValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" })\n.Write();\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n# TODO: Complete this line\n.DataBindTable(dataSource: dbdata, xField: \"Name\")\n.Write();\n}",
      "solution": "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.DataBindTable(dataSource: dbdata, xField: \"Name\")\n.Write();\n}"
    }
  ],
  "related_topics": [
    {
      "id": "782322c8-9c46-4d66-bf6a-e0688c2e0494",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "85096542-beb4-452a-8270-ac1a27c4d868",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7542e86d-b25b-4851-b792-4fc3ee87db6c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method displays the chart\nAn alternative to using the DataBindTable method?",
      "options": [
        "to use an XML file as the data for the \nchart:\nExample\n@using System",
        "None of the above.",
        "None of the above.",
        "to use AddSeries (See \n\ncan specify the chart and data more explicitly:\nExample\n@{\nvar db = Database"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method displays the chart\nAn alternative to using the DataBindTable method is 'to use AddSeries (See \n\ncan specify the chart and data more explicitly:\nExample\n@{\nvar db = Database'."
    },
    {
      "question": "What is Chart From XML Data\nThe third option for charting?",
      "options": [
        "None of the above.",
        "to use an XML file as the data for the \nchart:\nExample\n@using System",
        "to use AddSeries (See \n\ncan specify the chart and data more explicitly:\nExample\n@{\nvar db = Database",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Chart From XML Data\nThe third option for charting is 'to use an XML file as the data for the \nchart:\nExample\n@using System'."
    }
  ],
  "summary": "This tutorial covers ASP.NET Web Pages- The Chart Helper concepts and techniques. You'll learn how to use ASP.NET Web Pages- The Chart Helper effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ASP.NET Web Pages- The Chart Helper and how to apply it in your projects."
}