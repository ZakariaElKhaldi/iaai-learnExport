{
  "id": "019bca2e-9ca0-4e87-98a4-7fac826389c6",
  "title": "Cyber SecurityWeb Applications",
  "slug": "cyber-securityweb-applications",
  "metadata": {
    "description": "Learn about Cyber SecurityWeb Applications with clear explanations and practical examples.",
    "keywords": [
      "c",
      "http",
      "client",
      "application",
      "server",
      "content",
      "parameters",
      "request",
      "used",
      "search",
      "headers"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 8,
    "category": "Cyber Security",
    "subcategory": "CS Web Applications"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Cyber Security\nWeb Applications",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Web Applications are integral to almost everything we do, whether it is to access the Internet or to remotely control your lawnmower. In this introduction class we will cover the basics of web application security.\nThe HTTP protocol\nHTTP is the carrier protocol which allows our browsers and applications to receive content such as HTML (\"Hyper Text Markup Language\"), CSS (\"Cascading Style Sheets\"), images and videos.\nURLs, Query Parameters and Scheme\nTo access a web application we use a URL (\"Uniform Resource Locator\"), for example: https://www.google.com/search?q=+cyber+security&ie=UTF-8\nThe URL to google.com contains a domain, a script being accessed and Query Parameters.\nThe script we are accessing is called /search. The / indicates it is contained in the top directory on the server where files are being served. The ? indicates the input parameters to the script and the & delimits different input parameters. In our URL the input parameters are:\nq with a value of  cyber security\nie with a value of UTF-8\nThe meaning of these inputs is up to the webservers application to determine.\nSometimes you will see just / or /? indicating that a script has been setup to serve to respond to this address. Typically this script is something like an index file which catches all requests unless a specific script is specified.\nThe Scheme is what defined the protocol to use. In our case it is the first part of the URL: https. When the scheme is not defined in the URL it allows the application to decide what to use. Schemes can include an entire array of protocols such as:\nHTTP\nHTTPS\nFTP\nSSH\nSMB\nHTTP Headers\nThe HTTP protocol uses many headers, some custom to the application and others well defined and accepted by the technology.\nExample request to http://google.com\nGET /search?q=+cyber+security&ie=UTF-8 HTTP/1.1\nHost: google.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\nReferer: https://.com/\nAccept-Encoding: gzip, deflate\nCookie: cookie1=value1;cookie2=value2\nThe request header specifies what the client wants to perform on the target webserver. It also has information regarding if it accepts compression, what kind of client is accessing and any cookies the server has told the client to present. The HTTP request headers are explained here:\nHeader\nExplanation\nGET /search... HTTP/1.1\nGET is the verb we are using to access the application. Explained in detail in the section HTTP Verbs. We also see the path and query parameters and HTTP version\nHost: google.com\nThis header indicates the target service we want to use. A server can have multiple services as explained in the section on VHOSTS.\nUser-Agent\nA client application, that is the browser in most cases, can identify itself with the version, engine and operating system\nAccept\nDefines which content the client can accept\nReferer: https://.com/\nIf the client clicked a link from a different website the Referer header is used to say from where the client came from\nAccept-Encoding: gzip, deflate\nCan the content be compressed or encoded? This defines what we can accept\nCookie\nCookies are values sent by the server in \nWith this request, the server will reply with headers and content. Example headers are seen below:\nHTTP/1.1 200 OK\nContent-Type: text/html\nSet-Cookie: <cookie value>\n<website content>\nThe response header and content is what determines what we will see in our browser. The HTTP response headers are explained as following:\nHeader\nExplanation\nHTTP/1.1 200 OK\nThe HTTP Response code. Explained in detail in the HTTP Response Codes section\nContent-Type: text/html\nSpecifies the type of content being returned, e.g. HTML, JSON or XML\nSet-Cookie:\nAny special values the client should remember and return in the \nHTTP Verbs\nWhen accessing a web application the client is instructed on how to send data to the web application. There are many verbs which can be accepted by the application.\n!Verb\nUsed for\nGET\nTypically used to retrieve values via Query Parameters\nPOST\nUsed to send data to a script via values in the body of the Request sent to the webserver. Typically it involves creating, uploading or sending large quantities of data\nPUT\nOften use to upload or write data to the webserver\nDELETE\nIndicate a resource which should be deleted\nPATCH\nCan be used to update a resource with a new value\nThese are used as the web application requires. Restful (REST) web services are especially good at using the full array of HTTP Verbs to define what should be done on the backend.\nHTTP Response Codes\nThe application running on the webserver can respond with different codes based on what occurred on the server side. Listed are common response codes the webserver will issue to the client which security professionals should know about:\nCode\nExplanation\n200\nApplication returned normally\n301\nServer asks client to permanently remember a redirect to a new location where the client should access\n302\nRedirect temporarily. Client doesn't need to save this reply\n400\nThe client made an invalid request\n403\nThe client is not allowed to access this resource. Authorization is required\n404\nThe client tried to access a resource which does not exist\n500\nThe server errored in trying to fulfill the request\nREST\nRest services, sometimes called RESTful services, employ the full force of HTTP Verbs and HTTP Response Codes to facilitate the use of the web application. RESTful services often uses parts of the URL as a query parameter to determine what happens on the web application. REST is typically used by API's (\"Application Programming Interfaces\").\nREST URLs will invoke functionality based on the different elements of the URL.\nAn example REST URL: http://example.com/users/search/\nThis URL will invoke functionality as part of the URL instead of Query Parameters. We can decipher the URL as:\nParameter\nComment\nusers\nAccessing the users part of the functionality\nsearch\nAccessing the search feature\n\nThe user to search for\nSessions & State\nThere is no built in way for a server to identify a returning visitor in HTTP. For a webserver to identify the user, a secret value must be communicated to and from the Client in each request. This is typically done via Cookies in headers, however other ways are also common such as via GET and POST parameters or other headers. Passing state via GET parameters is not recommended as such parameters are often logged on the server or in intermediaries such as a proxy.\nHere are some common Cookie examples which allows the application on the webserver to control sessions and state:\nPHPSESSID\nJSESSIONID\nASP.NET_SessionID\nThese values represent a certain state, often called a session, on the server. This state represents things like:\nWhat user you have logged in as\nPrivileges and authorizations\nIt is important that session value, sent to the Client, can not be easily guessed or otherwise identified by others. If they could, an attacker could then present themselves as other users on the web application.\nState can also be saved on the client. This involves the server sending all the states to the client and relies on the client sending back all the items. Such implementations relies on encryption to check the integrity of the state the client is claiming. Examples of implementations using this is listed below:\nJWT (\"JSON Web Tokens\")\nASP.Net ViewState\nYou are using cookies to take this class! You can inspect these cookies in your web browser by opening up the developer tools. This is done by hitting\nF12\nwithin the browser, opening up the developer tools window. Within this window you should be able to find the correct place where your cookies are stored.\nIn Google Chrome, the cookies were identified in the Application tab above.\nNote\n: Can you think of why the cookies have been masked away in the screenshot so you cannot read them?\nVirtual Hosts\nOne webserver can process many applications via Virtual Hosts, often abbreviated as Vhosts. To facilitate access to other Virtual Hosts the web server typically reads off the Host header of the client request, and based on this value sends the request to the correct application.\nURL Encoding\nFor an application to safely transfer content between the server and client, some characters must be encoded to ensure they do not impact the protocol. To preserve the integrity of the communications, URL encoding is used.\nURL Encoding replaces unsafe characters with a % and two hexadecimal digits. For example:\nPercentage is replaced with %25\nSpace is replaced with %20\nQuote is replaced with %22\nAn excellent tool to perform text analysis and run operations such as URL Decoding is CyberChef. You can try it out in your browser here:\nhttps://gchq.github.io/CyberChef/\nNote\n: Play around with Cyber Chef and see if you can reveal what the following message in URL encoded characters hold: %48 %65 %6c %6c %6f %20 %64 %65 %61 %72 %20 %77 %33 %73 %63 %68 %6f %6f %6c %73 %20 %73 %74 %75 %64 %65 %6e %74 %2e %20 %48 %6f %70 %65 %20 %79 %6f %75 %20 %61 %72 %65 %20 %6c %65 %61 %72 %6e %69 %6e %67 %20 %73 %6f %6d %65 %74 %68 %69 %6e %67 %20 %74 %6f %64 %61 %79 %21\nJavaScript\nTo support dynamic content, browsers use the scripting language JavaScript. This enables developers to program solutions which will run on the client, enabling more interactive and \"alive\" web-content.\nJavaScript is also involved in many attacks against web-applications and client applications such as browsers.\nEncryption with TLS\nThe HTTP protocol does not support encryption for data-in-transit, hence a wrapper around HTTP is added for encryption support. This is indicated with a S following HTTP, i.e. HTTPS.\nThe encryption used to be SSL (\"Secure Sockets Layer\"), but has since been deprecated. Instead TLS (\"Transport Layer Security\") is typically used to enforce encryption.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "GET /search?q=w3schools+cyber+security&ie=UTF-8 HTTP/1.1\nHost: google.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\nReferer: https://w3schools.com/\nAccept-Encoding: gzip, deflate\nCookie: cookie1=value1;cookie2=value2",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "HTTP/1.1 200 OK\nContent-Type: text/html\nSet-Cookie: <cookie value>\n<website content>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "GET /search?q=w3schools+cyber+security&ie=UTF-8 HTTP/1.1\nHost: google.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\n# TODO: Complete this line\nAccept-Encoding: gzip, deflate\nCookie: cookie1=value1;cookie2=value2",
      "solution": "GET /search?q=w3schools+cyber+security&ie=UTF-8 HTTP/1.1\nHost: google.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\nReferer: https://w3schools.com/\nAccept-Encoding: gzip, deflate\nCookie: cookie1=value1;cookie2=value2"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "HTTP/1.1 200 OK\n# TODO: Complete this line\nSet-Cookie: <cookie value>\n<website content>",
      "solution": "HTTP/1.1 200 OK\nContent-Type: text/html\nSet-Cookie: <cookie value>\n<website content>"
    }
  ],
  "related_topics": [
    {
      "id": "a88dc7e9-9f13-470a-96bd-bd2a22f484b9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "63daa808-8203-4b37-ad7d-cabab88ac0a7",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0e5d4452-901e-4b2a-b144-7e5fb3f53a37",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Cyber Security\nWeb Applications\n\nWeb Applications?",
      "options": [
        "None of the above.",
        "integral to almost everything we do",
        "the carrier protocol which allows our browsers and applications to receive content such as HTML (\"Hyper Text Markup Language\")",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Cyber Security\nWeb Applications\n\nWeb Applications is 'integral to almost everything we do'."
    },
    {
      "question": "What is The HTTP protocol\nHTTP?",
      "options": [
        "integral to almost everything we do",
        "None of the above.",
        "the carrier protocol which allows our browsers and applications to receive content such as HTML (\"Hyper Text Markup Language\")",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The HTTP protocol\nHTTP is 'the carrier protocol which allows our browsers and applications to receive content such as HTML (\"Hyper Text Markup Language\")'."
    }
  ],
  "summary": "This tutorial covers Cyber SecurityWeb Applications concepts and techniques. You'll learn how to use Cyber SecurityWeb Applications effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Cyber SecurityWeb Applications and how to apply it in your projects."
}