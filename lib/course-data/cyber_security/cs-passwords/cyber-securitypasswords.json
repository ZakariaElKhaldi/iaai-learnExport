{
  "id": "71134505-5d29-4e03-865c-338c9c8e5680",
  "title": "Cyber SecurityPasswords",
  "slug": "cyber-securitypasswords",
  "metadata": {
    "description": "Learn about Cyber SecurityPasswords with clear explanations and practical examples.",
    "keywords": [
      "c",
      "password",
      "passwords",
      "users",
      "attackers",
      "different",
      "many",
      "example",
      "system",
      "attacker",
      "credentials"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 10,
    "category": "Cyber Security",
    "subcategory": "CS Passwords"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Cyber Security\nPasswords",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Many systems are protected by a simple password. This is not ideal as passwords can in many cases easily be broken, reused, or otherwise abused by attackers. This section will explore attacks and defenses regarding passwords.\nPassword Strength\nWhat determines a strong password? Is it how complex the password is? How many characters it has? The number of special characters?\nThe famous comic creator xkcd.com brilliantly shows how passwords can be attacked in the comic below. Review it for a second and let us discuss further.\nNote\n: Entropy means the lack of predictability. The higher entropy, the harder to crack via standard means.\nComic from XKCD:\nhttps://xkcd.com/936/\nIf we consider the first password\nTr0ub4dor&3\n, this password is will fit most password policy rules, for example having capitalized letter, numbers, special characters and a length of 11 characters. This password has however some problems, it is:\nHard to remember. Did you replace the first o (the letter) character with a 0 (the number), or was it the second? Did you replace the a character with a 4, or not?\nHard to type. You have to type in different letters, numbers and special characters in a special order. It will likely not be the fastest words being typed on your keyboard.\nIt is not very strong! The password is based off a rather common word and it does not offer much strength, only about 28 bits of entropy.\nInstead of selecting passwords which have these negative factors, we can instead greatly increase the entropy of passwords in simple ways. If we consider the password\nCorrectHorseBatteryStaple\nwe see a considerate improvement of the password:\nThe password is easy to type. Typing in regular words is for many an everyday activity and you can get really fast at it.\nIt is easy to remember. By using a visual picture of the password, a horse, a battery, a staple and the word correct, we can remember it much easier.\nIt is significantly stronger against most password cracking activities! It offers about 44 bits of entropy, making it really hard to crack.\nPasswords like this one is called passphrases and is generally a much better practice than a simple word with some complexity. Consider how you could improve the password to be even stronger, and to fit password policy rules such as special characters and capital letters! You can even use spaces in your password, making passphrases even more natural to type.\nPassword Managers\nWriting down your password has for many years been considered a bad-practice, but is it really? Using the same password across multiple services online has a significant risk, what if one of those platforms get hacked? Then that password is compromised and attackers can re-use the password across all other services where it is used.\nTo fight this problem, the recommendation is to not re-use the same password across multiple services. This makes it really hard for users as they are not only required to use unique passwords, but at the same time create strong and robust passwords! A password manager help solve this problem by offering users to, in a secure as possible way, write down passwords in a file, database or other system, making passwords easy accessible and ensuring they are strong and unique across different services.\nWhen implemented correctly, a password manager will:\nMake the use of the Internet a much more secure activity\nIncrease productivity as passwords for different services can easily be found, copied and pasted into the respective services the user want to \nOffer easy ways to reset and regenerate new passwords when needed.\nWriting down passwords is considered a much lower risk for our users rather than having them reusing passwords. Yes, this is not a perfect solution as the password manager could potentially get compromised, however it is considered a much more safe approach.\nPasswordless Solutions\nWhat if passwords in themselves could be put to an end? There is always someone who can not type in a longer passphrase as their password every day. There may be several reasons for this, for example:\nNon IT savvy workers in the office\nA doctor who visits many different computers in the hospital, every day while visiting different patients in different rooms\nIt is hard to type in the password on the system which requires it\nThe development and implementation of systems which does not require users to provide a password is developing rapidly. Instead of asking users to authenticate with a password, what if we allowed them to use for example:\nSomething they are, for example their face or fingerprint\nSomething they have, for example a token or their cell-phone\nThere are challenges to this, but in terms of security, are we really making the problem worse, or better for our users? We must remember we are not looking to implement perfect security systems, they are normally outside of reach and not implementable, so instead we must make careful considerations on how we can limit the threats and at the same time make life easier for our users. Passwords are not perfect, and neither is passwordless solutions. Which one will you implement for your users?\nMulti-Factor Authentication\nAs we learn that regardless of what solution is used to verify users, there will still be significant risks associated with their accounts, other solutions can be implemented to help reduce the risk.\nMulti-Factor Authentication allows solutions to not only verify a user based on for example their password, but at the same time require the users to present a second factor to prove who they are.\nThere can be several different ways to ask for a second factor. Here are a few examples:\nUse an authentication application on a smart-phone to provide a secret code\nReceive a secret code via SMS (\"Short Message Service\") on a phone\nUse a hardware token to provide a secret code\nPresent a fingerprint or face to identify the individual\nAll of the above requires not only a password to be known, but also asks for a second item (a factor) to be provided.\nSolutions like these are sometimes considered very invasive to the users. To help solve this problem a concept of DAC (\"Discretionary Access Control\") can be applied. DAC allows the login solution to consider whether or not to challenge a user with a multi-factor code. For example a multi-factor might only be necessary when a user:\nLogs in from a new location\nUses a different browser or software to access the application\nTries to perform a sensitive action in the application, for example change password or perform a money transaction above a certain threshold\nPassword Guessing\nWhen attackers encounter applications and services, there might be the opportunity to do Password Guessing. Password Guessing is an activity which involves attackers interacting with the application over the network, trying lists of different combinations of usernames and passwords.\nPassword Guessing gives the attacker an opportunity to find accounts with a weak username and password combination.\nIf the attacker is successful in finding a valid account to \nAttacker accesses an email account of an employee. Inside there are thousands of emails ranging years back in history. Within the emails there are passwords communicated, allowing attacker to \nAttackers successfully guess the Admin accounts password for an HVAC (\"Heating, Ventilation and Air Conditioning\") system who's responsibility is to cool down the server room. The attackers are able to change the parameters of the HVAC and through careful modification causes the server-room to overheat.\nA VPN service is available on the Internet, allowing employees to reach internal resources. One of the employees has a weak password which is guessed by an attacker through days of repeated password guessing. The attacker accesses the VPN service and is now on the inside network of the organization. From here, the attacker installs ransomware within the organization.\nA web application is deployed on the Internet. It holds no obvious vulnerabilities from the outside, however attackers were able password guess into a regular users account on the system. Because the company hosting the web application trusts their users, the web security on the inside of the application was poor. From here, the attacker was able to use web exploits to compromise the server.\nMany network services have built-in administrator accounts, some even with the default password unchanged since it was installed. For each service on the network, attackers can try to \nPassword\nComment\nSummer2021!\nMany people, including helpdesks of companies, perform password resets and set the password to the season of the year and the year we are currently in.\nW3schools123!\nThe name of the company is often used as peoples passwords. The number 123 and ! at the end is selected by users to pass password policies and make it a bit more complex.\nRosalynn2006!\nRosalynn, perhaps someone's child? Users often use something of personal affection as their passwords. Names of children and perhaps the year they were born is very popular.\nQwerty123456!\nA seemingly random password? This password is someone pressing keyboard keys in order, then using numbers to do the same thing.\nA tool which allows us to easily configure lists of usernames and passwords to try against a multitude of different services is THC-Hydra (https://github.com/vanhauser-thc/thc-hydra). It supports plenty of protocols to attack such as:\nRDP (\"Remote Desktop Protocol\")\nFTP (\"File Transfer Protocol\")\nSMB (\"Server Message Block\")\nTelnet\nSSH (\"Secure Sockets Host\")\nTo use THC-Hydra to target for example FTP, the following command can be used:\nhydra -L common_usernames.txt -P common_passwords.txt ftp://localhost/\nThis command uses a list of common usernames and common passwords to try each of them against the FTP service at localhost or an IP address of your choice.\nCredential Stuffing\nA common attack for attackers to use is Credential Stuffing. This involves attackers downloading huge databases of credentials and testing applicable credentials against the network service. A leak of credentials happen when a third party service is hacked, database is stolen and then leaked on the Internet for anyone to download.\nUnfortunately many users re-use the same password on different services, allowing Credential Stuffing attacks to become very efficient against organizations.\nNote\n: Anyone, including you, can go about searching the Internet for leaked databases containing credentials and passwords. It is not very hard to hack when people do not change their passwords?!\nPassword Cracking\nWhile Password Guessing is an online attack, Password Cracking is an offline attack. It involves attackers stealing password representations from a target first.\nPasswords are typically represented as a password hash. A hash is way to store users passwords by sending them through a one-way function, making the password impossible to reverse unless password cracking is used.\nIf the attacker is capable of retrieving credentials from a system, these credentials are likely to be protected via encryption or hashing. Hashing is a one-way function designed to not be reversed into its original value.\nPassword cracking involves using computing power, that is the CPU (\"Central Processing Unit\") and GPU (\"Graphical Processing Unit\"), to try create password guesses which matches the protected credentials retrieved from the system.\nNote\n: The GPU is typically much better in password cracking because it has hundreds of micro cores which are all capable of doing small tasks on their own. This allows a password cracker to become much faster as it can scale the cracking activities over many different cores.\nServices Without Authentication\nBy exploring and discovering applications sometimes you can encounter applications which are not protected with authentication. These applications are useful for attackers to explore, for example taking advantage of a search field hunting for sensitive information.\nMany applications on a network can freely be explored, sometimes providing attackers with the exact data they are looking for.\nWhen performing network mapping and port scanning exercises, each discovered system and service should be explored.\nUsing Existing Credentials\nTypically an attacker is already using credentials of users in the environment. For example if an attacker has compromised someone's computer system they can re-use the credentials already in-use by the system.\nThis provides attackers with many more opportunities. Consider all the applications which could now be abused. For example:\nEmail\nSharePoint\nHR and Accounting\nVPN (\"Virtual Private Networking\")\nOnce an attacker has access to an application behind access control, vulnerabilities and data is often plentiful.\nCredentials from a system can also be extracted via different means, typically involving having administrator access of the system. Mimikatz (https://github.com/gentilkiwi/mimikatz) is such a tool which tries to dump the credentials from the system.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "hydra -L common_usernames.txt -P common_passwords.txt ftp://localhost/",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "hydra -L common_usernames.txt -P common_passwords.txt ftp://localhost/"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "de17be42-71ae-4303-b9a7-5bda11f3d922",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "dcd60081-a7e9-438f-b117-3ec1e7681d29",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9d63bda5-193b-4602-ae8c-20c19059aec9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Cyber Security\nPasswords\n\nMany systems?",
      "options": [
        "not ideal as passwords can in many cases easily be broken",
        "None of the above.",
        "protected by a simple password",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Cyber Security\nPasswords\n\nMany systems is 'protected by a simple password'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "not ideal as passwords can in many cases easily be broken",
        "protected by a simple password",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of This is 'not ideal as passwords can in many cases easily be broken'."
    }
  ],
  "summary": "This tutorial covers Cyber SecurityPasswords concepts and techniques. You'll learn how to use Cyber SecurityPasswords effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Cyber SecurityPasswords and how to apply it in your projects."
}