{
  "id": "655946f7-41fc-4ef7-b8ea-0c236aba2910",
  "title": "PHPcatchKeyword",
  "slug": "phpcatchkeyword",
  "metadata": {
    "description": "Learn about PHPcatchKeyword with clear explanations and practical examples.",
    "keywords": [
      "c",
      "exception",
      "catch",
      "keyword",
      "throw",
      "echo",
      "exceptions",
      "rand",
      "case",
      "caught",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "catch"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\ncatch\nKeyword",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nCatch an exception:\n<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}\n?>\n\nDefinition and Usage\nThe\ncatch\nkeyword is used to handle exceptions that are thrown by the code in a\npreceding\ntry block\n.\nRelated Pages\nThe\nthrow\nkeyword.\nThe\ntry\nkeyword.\nThe\nfinally\nkeyword.\nRead more about try..catch.finally (Exceptions) in our\nPHP Exceptions Tutorial\n.\nMore Examples\nExample\nUse catch for multiple types of exception:\n<?php\ntry {\n$rand = rand(0, 2);\nswitch($rand) {\ncase 0: throw new Exception();\ncase 1: throw new \n  OutOfBoundsException();\ncase 2: throw new \n  LogicException();\n}\n} catch(OutOfBoundsException $e) {\necho \"Caught an out of bounds exception\";\n} catch(LogicException $e) {\necho \"Caught a logic exception\";\n} catch(Exception $e) {\necho \n  \"Caught an ordinary exception\";\n}\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\ntry {\n$rand = rand(0, 2);\nswitch($rand) {\ncase 0: throw new Exception();\ncase 1: throw new \n  OutOfBoundsException();\ncase 2: throw new \n  LogicException();\n}\n} catch(OutOfBoundsException $e) {\necho \"Caught an out of bounds exception\";\n} catch(LogicException $e) {\necho \"Caught a logic exception\";\n} catch(Exception $e) {\necho \n  \"Caught an ordinary exception\";\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\nthrow new Exception(\"This is an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
      "solution": "<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\ntry {\n$rand = rand(0, 2);\nswitch($rand) {\ncase 0: throw new Exception();\ncase 1: throw new \n  OutOfBoundsException();\ncase 2: throw new \n  LogicException();\n}\n} catch(OutOfBoundsException $e) {\necho \"Caught an out of bounds exception\";\n} catch(LogicException $e) {\necho \"Caught a logic exception\";\n} catch(Exception $e) {\n# TODO: Complete this line\n  \"Caught an ordinary exception\";\n}\n?>",
      "solution": "<?php\ntry {\n$rand = rand(0, 2);\nswitch($rand) {\ncase 0: throw new Exception();\ncase 1: throw new \n  OutOfBoundsException();\ncase 2: throw new \n  LogicException();\n}\n} catch(OutOfBoundsException $e) {\necho \"Caught an out of bounds exception\";\n} catch(LogicException $e) {\necho \"Caught a logic exception\";\n} catch(Exception $e) {\necho \n  \"Caught an ordinary exception\";\n}\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "9dbe5fcd-42ed-4a3a-a740-e3f9946ac756",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2845be4b-ba14-4ae0-a8c6-6d75a0b85229",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c0deec3e-e3f2-44fb-8c70-27f75a48d300",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}",
        "None of the above.",
        "thrown by the code in a\npreceding\ntry block",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}'."
    },
    {
      "question": "What is Definition and Usage\nThe\ncatch\nkeyword is used to handle exceptions that?",
      "options": [
        "None of the above.",
        "thrown by the code in a\npreceding\ntry block",
        "None of the above.",
        "an exception\");\n} \n  catch(Exception $e) {\necho $e->getMessage();\n}"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Definition and Usage\nThe\ncatch\nkeyword is used to handle exceptions that is 'thrown by the code in a\npreceding\ntry block'."
    }
  ],
  "summary": "This tutorial covers PHPcatchKeyword concepts and techniques. You'll learn how to use PHPcatchKeyword effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPcatchKeyword and how to apply it in your projects."
}