{
  "id": "cb77a9fa-39fa-4a6e-9c0f-23fdba018d7e",
  "title": "PHPcrypt()Function",
  "slug": "phpcryptfunction",
  "metadata": {
    "description": "Learn about PHPcrypt()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "salt",
      "crypt",
      "character",
      "echo",
      "function",
      "blowfish",
      "rounds",
      "string",
      "starting",
      "algorithms"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "crypt()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\ncrypt()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Definition and Usage\nThe crypt() function returns a hashed string using DES, Blowfish, or MD5 algorithms.\nThis function behaves different on different operating systems. PHP checks what algorithms \nare available and what algorithms to use when it is installed.\nThe salt parameter is optional. However, crypt() creates a weak password \nwithout the salt. Make sure to specify a strong enough salt for better security.\nThere are some constants that are used together with the crypt() function. \nThe value of these constants are set by PHP when it is installed.\nConstants:\n[CRYPT_STD_DES] - Standard DES-based hash with two character salt from the alphabet \"./0-9A-Za-z\". Using invalid characters in the salt will cause this function to fail.\n[CRYPT_EXT_DES] - Extended DES-based hash with a nine character salt consisting of an underscore followed by 4 bytes of iteration count and 4 bytes of salt. These are encoded as printable characters, 6 bits per character, least significant character first. The values 0 to 63 are encoded as \"./0-9A-Za-z\". Using invalid characters in the salt will cause the function to fail.\n[CRYPT_MD5] - MD5 hashing with a 12 character salt starting with $1$\n[CRYPT_BLOWFISH] - Blowfish hashing with a salt starting with $2a$, $2x$, or $2y$, a two digit cost parameters \"$\", and 22 characters from the alphabet \"./0-9A-Za-z\". Using characters outside of the alphabet will cause this function to return a zero-length string. The \"$\" parameter is the base-2 logarithm of the iteration count for the underlying Blowfish-bashed hashing algorithmeter and must be in range 04-31. Values outside this range will cause the function to fail.\n[CRYPT_SHA_256] - SHA-256 hash with a 16 character salt starting with $5$. If the salt string starts with \"rounds=<N>$\", the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit.\n[CRYPT_SHA_512] - SHA-512 hash with a 16 character salt starting with $6$.\n If the salt string starts with \"rounds=<N>$\", the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit.\nOn systems where this function supports multiple algorithms, the constants \nabove are set to \"1\" if supported and \"0\" otherwise.\nNote:\nThere is no decrypt function. The crypt() function uses a one-way algorithm.\nSyntax\ncrypt(\nstr,salt\n)\nParameter Values\nParameter\nDescription\nstr\nRequired. Specifies the string to be hashed\nsalt\nOptional. A salt string to base the hashing on\nTechnical Details\nReturn Value:\nReturns the encoded string or a string that is shorter than 13 characters and is guaranteed to differ from the salt on failure\nPHP Version:\n4+\nChangelog:\nPHP 5.6.0 - Shows a E_NOTICE security warning if\nsalt\nis omitted.\nPHP 5.3.7 - Added $2x$ and $2y$ Blowfish modes.\nPHP 5.3.2 - Added SHA-256 and SHA-512. \n  Fixed Blowfish behavior on invalid rounds returns \"failure\" string (\"*0\" or \"*1\"), instead of falling back to DES.\nPHP 5.3.0 \n  - PHP now contains its own implementation for MD5 crypt, Standard DES, \n  Extended DES and the Blowfish algorithms and will use that if the system lacks \n  of support for one or more of the algorithms.\nMore Examples\nExample\nIn this example we will test the different algorithms:\n<?php\n// 2 character salt\nif\n(CRYPT_STD_DES ==\n1\n)\n{\necho\n\"Standard DES: \"\n.crypt(\n'something'\n,\n'st'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Standard DES not supported.\\n<br>\"\n;\n}\n// 4 character salt\nif\n(CRYPT_EXT_DES ==\n1\n)\n{\necho\n\"Extended DES: \"\n.crypt(\n'something'\n,\n'_S4..some'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Extended DES not supported.\\n<br>\"\n;\n}\n// 12 character salt starting with $1$\nif\n(CRYPT_MD5 ==\n1\n)\n{\necho\n\"MD5: \"\n.crypt(\n'something'\n,\n'$1$somethin$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"MD5 not supported.\\n<br>\"\n;\n}\n// Salt starting with $2a$. The two digit cost parameter: 09. 22 characters\nif\n(CRYPT_BLOWFISH ==\n1\n)\n{\necho\n\"Blowfish: \"\n.crypt(\n'something'\n,\n'$2a$09$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Blowfish DES not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $5$. The default number of rounds is 5000.\nif\n(CRYPT_SHA256 ==\n1\n)\n{\necho\n\"SHA-256: \"\n.crypt(\n'something'\n,\n'$5$rounds=5000$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n; }\nelse\n{\necho\n\"SHA-256 not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $6$. The default number of rounds is 5000.\nif\n(CRYPT_SHA512 ==\n1\n)\n{\necho\n\"SHA-512: \"\n.crypt(\n'something'\n,\n'$6$rounds=5000$anexamplestringforsalt$'\n);\n}\nelse\n{\necho\n\"SHA-512 not supported.\"\n;\n}\n?>\nThe output of the code above could be (depending on the operating system):\nStandard DES: stqAdD7zlbByI\nExtended DES: _S4..someQXidlBpTUu6\nMD5: $1$somethin$4NZKrUlY6r7K7.rdEOZ0w.\nBlowfish: $2a$09$anexamplestringforsaleLouKejcjRlExmf1671qw3Khl49R3dfu\nSHA-256: $5$rounds=5000$anexamplestringf$KIrctqsxo2wrPg5Ag/hs4jTi4PmoNKQUGWFXlVy9vu9\nSHA-512: $6$rounds=5000$anexamplestringf$Oo0skOAdUFXkQxJpwzO05wgRHG0dhuaPBaOU/\noNbGpCEKlf/7oVM5wn6AN0w2vwUgA0O24oLzGQpp1XKI6LLQ0.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n// 2 character salt\nif\n(CRYPT_STD_DES ==\n1\n)\n{\necho\n\"Standard DES: \"\n.crypt(\n'something'\n,\n'st'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Standard DES not supported.\\n<br>\"\n;\n}\n// 4 character salt\nif\n(CRYPT_EXT_DES ==\n1\n)\n{\necho\n\"Extended DES: \"\n.crypt(\n'something'\n,\n'_S4..some'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Extended DES not supported.\\n<br>\"\n;\n}\n// 12 character salt starting with $1$\nif\n(CRYPT_MD5 ==\n1\n)\n{\necho\n\"MD5: \"\n.crypt(\n'something'\n,\n'$1$somethin$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"MD5 not supported.\\n<br>\"\n;\n}\n// Salt starting with $2a$. The two digit cost parameter: 09. 22 characters\nif\n(CRYPT_BLOWFISH ==\n1\n)\n{\necho\n\"Blowfish: \"\n.crypt(\n'something'\n,\n'$2a$09$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Blowfish DES not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $5$. The default number of rounds is 5000.\nif\n(CRYPT_SHA256 ==\n1\n)\n{\necho\n\"SHA-256: \"\n.crypt(\n'something'\n,\n'$5$rounds=5000$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n; }\nelse\n{\necho\n\"SHA-256 not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $6$. The default number of rounds is 5000.\nif\n(CRYPT_SHA512 ==\n1\n)\n{\necho\n\"SHA-512: \"\n.crypt(\n'something'\n,\n'$6$rounds=5000$anexamplestringforsalt$'\n);\n}\nelse\n{\necho\n\"SHA-512 not supported.\"\n;\n}\n?>",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n// 2 character salt\nif\n(CRYPT_STD_DES ==\n1\n)\n{\necho\n\"Standard DES: \"\n.crypt(\n'something'\n,\n'st'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Standard DES not supported.\\n<br>\"\n;\n}\n# TODO: Complete this line\nif\n(CRYPT_EXT_DES ==\n1\n)\n{\necho\n\"Extended DES: \"\n.crypt(\n'something'\n,\n'_S4..some'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Extended DES not supported.\\n<br>\"\n;\n}\n// 12 character salt starting with $1$\nif\n(CRYPT_MD5 ==\n1\n)\n{\necho\n\"MD5: \"\n.crypt(\n'something'\n,\n'$1$somethin$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"MD5 not supported.\\n<br>\"\n;\n}\n// Salt starting with $2a$. The two digit cost parameter: 09. 22 characters\nif\n(CRYPT_BLOWFISH ==\n1\n)\n{\necho\n\"Blowfish: \"\n.crypt(\n'something'\n,\n'$2a$09$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Blowfish DES not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $5$. The default number of rounds is 5000.\nif\n(CRYPT_SHA256 ==\n1\n)\n{\necho\n\"SHA-256: \"\n.crypt(\n'something'\n,\n'$5$rounds=5000$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n; }\nelse\n{\necho\n\"SHA-256 not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $6$. The default number of rounds is 5000.\nif\n(CRYPT_SHA512 ==\n1\n)\n{\necho\n\"SHA-512: \"\n.crypt(\n'something'\n,\n'$6$rounds=5000$anexamplestringforsalt$'\n);\n}\nelse\n{\necho\n\"SHA-512 not supported.\"\n;\n}\n?>",
      "solution": "<?php\n// 2 character salt\nif\n(CRYPT_STD_DES ==\n1\n)\n{\necho\n\"Standard DES: \"\n.crypt(\n'something'\n,\n'st'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Standard DES not supported.\\n<br>\"\n;\n}\n// 4 character salt\nif\n(CRYPT_EXT_DES ==\n1\n)\n{\necho\n\"Extended DES: \"\n.crypt(\n'something'\n,\n'_S4..some'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Extended DES not supported.\\n<br>\"\n;\n}\n// 12 character salt starting with $1$\nif\n(CRYPT_MD5 ==\n1\n)\n{\necho\n\"MD5: \"\n.crypt(\n'something'\n,\n'$1$somethin$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"MD5 not supported.\\n<br>\"\n;\n}\n// Salt starting with $2a$. The two digit cost parameter: 09. 22 characters\nif\n(CRYPT_BLOWFISH ==\n1\n)\n{\necho\n\"Blowfish: \"\n.crypt(\n'something'\n,\n'$2a$09$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n;\n}\nelse\n{\necho\n\"Blowfish DES not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $5$. The default number of rounds is 5000.\nif\n(CRYPT_SHA256 ==\n1\n)\n{\necho\n\"SHA-256: \"\n.crypt(\n'something'\n,\n'$5$rounds=5000$anexamplestringforsalt$'\n).\n\"\\n<br>\"\n; }\nelse\n{\necho\n\"SHA-256 not supported.\\n<br>\"\n;\n}\n// 16 character salt starting with $6$. The default number of rounds is 5000.\nif\n(CRYPT_SHA512 ==\n1\n)\n{\necho\n\"SHA-512: \"\n.crypt(\n'something'\n,\n'$6$rounds=5000$anexamplestringforsalt$'\n);\n}\nelse\n{\necho\n\"SHA-512 not supported.\"\n;\n}\n?>"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "51eea9e6-d04a-4cde-ba60-b16bcc8bad24",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "edb04add-42f1-4dc5-a492-03c0dad759eb",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "89c9fa2a-1f16-487a-9f4e-11c8c61b4d4c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PHP checks what algorithms \nare available and what algorithms to use when it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "optional",
        "installed"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of PHP checks what algorithms \nare available and what algorithms to use when it is 'installed'."
    },
    {
      "question": "What is The salt parameter?",
      "options": [
        "installed",
        "optional",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The salt parameter is 'optional'."
    }
  ],
  "summary": "This tutorial covers PHPcrypt()Function concepts and techniques. You'll learn how to use PHPcrypt()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPcrypt()Function and how to apply it in your projects."
}