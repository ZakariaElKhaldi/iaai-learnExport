{
  "id": "333f6e21-b873-4864-8371-ed2200259d23",
  "title": "PHPCallback Functions",
  "slug": "phpcallback-functions",
  "metadata": {
    "description": "Learn about PHPCallback Functions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "callback",
      "functions",
      "pass",
      "item",
      "return",
      "strings",
      "lengths",
      "user",
      "defined"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Callback Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nCallback Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Callback Functions\nA callback function (often referred to as just \"callback\") is a function which is passed as an\nargument into another function.\nAny existing function can be used as a callback function. To use a function as a callback\nfunction, pass a string containing the name of the function as the argument of another\nfunction:\nExample\nPass a callback to PHP's\narray_map()\nfunction to calculate the length of\nevery string in an array:\n<?php\nfunction my_callback($item) {\nreturn strlen($item);\n}\n$strings = [\"apple\", \"orange\", \n  \"banana\", \"coconut\"];\n$lengths = \n  array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>\n\nStarting with version 7, PHP can pass anonymous functions as callback functions:\nExample\nUse an anonymous function as a callback for PHP's\narray_map()\nfunction:\n<?php\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = \n  array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>\n\nCallbacks in User Defined Functions\nUser-defined functions and methods can also take callback functions as \narguments. To use callback functions inside a user-defined function or method, \ncall it by adding parentheses to the variable and pass arguments as with normal \nfunctions:\nExample\nRun a callback from a user-defined function:\n<?php\nfunction exclaim($str) {\nreturn $str . \"! \";\n}\nfunction ask($str) {\nreturn $str . \"? \";\n}\nfunction \n  printFormatted($str, $format) {\n// Calling the $format callback \n  function\necho $format($str);\n}\n// Pass \"exclaim\" and \"ask\" as callback \n  functions to printFormatted()\nprintFormatted(\"Hello world\", \"exclaim\");\nprintFormatted(\"Hello world\", \"ask\");\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nfunction my_callback($item) {\nreturn strlen($item);\n}\n$strings = [\"apple\", \"orange\", \n  \"banana\", \"coconut\"];\n$lengths = \n  array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = \n  array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nfunction exclaim($str) {\nreturn $str . \"! \";\n}\nfunction ask($str) {\nreturn $str . \"? \";\n}\nfunction \n  printFormatted($str, $format) {\n// Calling the $format callback \n  function\necho $format($str);\n}\n// Pass \"exclaim\" and \"ask\" as callback \n  functions to printFormatted()\nprintFormatted(\"Hello world\", \"exclaim\");\nprintFormatted(\"Hello world\", \"ask\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nfunction my_callback($item) {\nreturn strlen($item);\n# TODO: Complete this line\n$strings = [\"apple\", \"orange\", \n  \"banana\", \"coconut\"];\n$lengths = \n  array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>",
      "solution": "<?php\nfunction my_callback($item) {\nreturn strlen($item);\n}\n$strings = [\"apple\", \"orange\", \n  \"banana\", \"coconut\"];\n$lengths = \n  array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\n$lengths = \n  array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>",
      "solution": "<?php\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = \n  array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "6eacbb0a-b45f-4e63-a084-2ec1cd57b289",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "0f3e7b81-8f70-4c24-9e39-9d8fcc86e890",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "263762b7-ebad-49e8-92a4-7e141d14c812",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is is a function which?",
      "options": [
        "None of the above.",
        "passed as an\nargument into another function",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of is a function which is 'passed as an\nargument into another function'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPCallback Functions concepts and techniques. You'll learn how to use PHPCallback Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPCallback Functions and how to apply it in your projects."
}