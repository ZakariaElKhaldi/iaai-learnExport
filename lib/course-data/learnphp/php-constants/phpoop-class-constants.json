{
  "id": "68872f3d-3277-4d99-8d62-cf283e696c57",
  "title": "PHPOOP - Class Constants",
  "slug": "phpoop-class-constants",
  "metadata": {
    "description": "Learn about PHPOOP - Class Constants with clear explanations and practical examples.",
    "keywords": [
      "c",
      "class",
      "constant",
      "goodbye",
      "constants",
      "name",
      "followed",
      "const",
      "declared",
      "inside",
      "keyword"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Constants"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Class Constants",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - Class Constants\nClass constants can be useful if you need to define some constant data within \na class.\nA class constant is declared inside a class with the\nconst\nkeyword.\nA constant cannot be changed once it is declared.\nClass constants are case-sensitive. However, it is recommended to name the constants in \nall uppercase letters.\nWe can access a constant from outside the class by using the class name \nfollowed by the scope resolution operator (\n::\n) followed by the constant \nname, like here:\nExample\n<?php\nclass \n    Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting .com!\";\n}\necho \n    Goodbye::LEAVING_MESSAGE;\n?>\n\nOr, we can access a constant from inside the class by using the\nself\nkeyword followed by the scope resolution operator (\n::\n) followed\u00a0by the constant name, like here:\nExample\n<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting .com!\";\npublic function byebye() {\necho self::LEAVING_MESSAGE;\n}\n}\n$goodbye = new Goodbye();\n$goodbye->byebye();\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nclass \n    Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n}\necho \n    Goodbye::LEAVING_MESSAGE;\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\npublic function byebye() {\necho self::LEAVING_MESSAGE;\n}\n}\n$goodbye = new Goodbye();\n$goodbye->byebye();\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass \n# TODO: Complete this line\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n}\necho \n    Goodbye::LEAVING_MESSAGE;\n?>",
      "solution": "<?php\nclass \n    Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n}\necho \n    Goodbye::LEAVING_MESSAGE;\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\npublic function byebye() {\necho self::LEAVING_MESSAGE;\n}\n}\n$goodbye = new Goodbye();\n$goodbye->byebye();\n# TODO: Complete this line",
      "solution": "<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\npublic function byebye() {\necho self::LEAVING_MESSAGE;\n}\n}\n$goodbye = new Goodbye();\n$goodbye->byebye();\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "4a1686c6-8831-4f18-93b9-6a1a27787375",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7559b35c-8bd7-4d78-b42c-5d1e2be04cad",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a9249259-ca71-47d6-9369-f8a7ad3cd2f4",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is A class constant?",
      "options": [
        "None of the above.",
        "None of the above.",
        "declared inside a class with the\nconst\nkeyword",
        "declared"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A class constant is 'declared inside a class with the\nconst\nkeyword'."
    },
    {
      "question": "What is A constant cannot be changed once it?",
      "options": [
        "None of the above.",
        "declared",
        "declared inside a class with the\nconst\nkeyword",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of A constant cannot be changed once it is 'declared'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Class Constants concepts and techniques. You'll learn how to use PHPOOP - Class Constants effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Class Constants and how to apply it in your projects."
}