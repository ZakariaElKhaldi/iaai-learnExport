{
  "id": "5c7a0622-1192-4316-8c7a-525912d8a826",
  "title": "PHPOOP - Access Modifiers",
  "slug": "phpoop-access-modifiers",
  "metadata": {
    "description": "Learn about PHPOOP - Access Modifiers with clear explanations and practical examples.",
    "keywords": [
      "c",
      "mango",
      "public",
      "property",
      "name",
      "color",
      "weight",
      "function",
      "protected",
      "private",
      "error"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Access Modifiers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Access Modifiers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - Access Modifiers\nProperties and methods can have access modifiers which control where they can \nbe accessed.\nThere are three access modifiers:\npublic\n- the property or \n  method can be accessed from everywhere. This is default\nprotected\n- the property or method can \n  be accessed within the \n  class and by classes derived from that class\nprivate\n- the property or method can \n  ONLY be accessed within the class\nIn the following example we have added three different access modifiers to \nthree properties (name, color, and weight). Here, if you try to set the name property it \nwill work fine (because the name property is public, and can be accessed from \neverywhere). However,\u00a0if you try \nto set the color or weight property it will result in a fatal \nerror (because the color and weight property are protected and private):\nExample\n<?php\nclass Fruit {\npublic \n    $name;\nprotected $color;\nprivate $weight;\n}\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK\n$mango->color = 'Yellow'; // ERROR\n$mango->weight = '300'; // ERROR\n?>\nIn the \ntwo functions. Here, if you try to call the set_color() or the set_weight() function it will result in a fatal \nerror (because the two functions are considered protected and private), even if \nall the properties are public:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic $weight;\nfunction set_name($n) {\u00a0 \n    // a public function (default)\n$this->name = $n;\n}\nprotected function set_color($n) { \n    // a protected function\n$this->color = $n;\n}\nprivate function set_weight($n) { \n    // a private function\n$this->weight = $n;\n}\n}\n$mango = new Fruit();\n$mango->set_name('Mango'); // OK\n$mango->set_color('Yellow'); // ERROR\n$mango->set_weight('300'); // ERROR\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\nprotected $color;\nprivate $weight;\n}\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK\n$mango->color = 'Yellow'; // ERROR\n$mango->weight = '300'; // ERROR\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic $weight;\nfunction set_name($n) {\u00a0 \n    // a public function (default)\n$this->name = $n;\n}\nprotected function set_color($n) { \n    // a protected function\n$this->color = $n;\n}\nprivate function set_weight($n) { \n    // a private function\n$this->weight = $n;\n}\n}\n$mango = new Fruit();\n$mango->set_name('Mango'); // OK\n$mango->set_color('Yellow'); // ERROR\n$mango->set_weight('300'); // ERROR\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\npublic \n    $name;\nprotected $color;\nprivate $weight;\n# TODO: Complete this line\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK\n$mango->color = 'Yellow'; // ERROR\n$mango->weight = '300'; // ERROR\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\nprotected $color;\nprivate $weight;\n}\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK\n$mango->color = 'Yellow'; // ERROR\n$mango->weight = '300'; // ERROR\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\n# TODO: Complete this line\n    $name;\npublic $color;\npublic $weight;\nfunction set_name($n) {\u00a0 \n    // a public function (default)\n$this->name = $n;\n}\nprotected function set_color($n) { \n    // a protected function\n$this->color = $n;\n}\nprivate function set_weight($n) { \n    // a private function\n$this->weight = $n;\n}\n}\n$mango = new Fruit();\n$mango->set_name('Mango'); // OK\n$mango->set_color('Yellow'); // ERROR\n$mango->set_weight('300'); // ERROR\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic $weight;\nfunction set_name($n) {\u00a0 \n    // a public function (default)\n$this->name = $n;\n}\nprotected function set_color($n) { \n    // a protected function\n$this->color = $n;\n}\nprivate function set_weight($n) { \n    // a private function\n$this->weight = $n;\n}\n}\n$mango = new Fruit();\n$mango->set_name('Mango'); // OK\n$mango->set_color('Yellow'); // ERROR\n$mango->set_weight('300'); // ERROR\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "0521220e-00cb-4238-ab62-02e909523cc2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3eca6a29-6ea9-4033-a2a0-9af49d406f3d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9712fc21-7ecb-4ae1-ac7b-c9e5eacd314f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is There?",
      "options": [
        "default\nprotected\n- the property or method can \n  be accessed within the \n  class and by classes derived from that class\nprivate\n- the property or method can \n  ONLY be accessed within the class\nIn the following example we have added three different access modifiers to \nthree properties (name",
        "None of the above.",
        "None of the above.",
        "three access modifiers:\npublic\n- the property or \n  method can be accessed from everywhere"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of There is 'three access modifiers:\npublic\n- the property or \n  method can be accessed from everywhere'."
    },
    {
      "question": "What is This?",
      "options": [
        "default\nprotected\n- the property or method can \n  be accessed within the \n  class and by classes derived from that class\nprivate\n- the property or method can \n  ONLY be accessed within the class\nIn the following example we have added three different access modifiers to \nthree properties (name",
        "None of the above.",
        "three access modifiers:\npublic\n- the property or \n  method can be accessed from everywhere",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'default\nprotected\n- the property or method can \n  be accessed within the \n  class and by classes derived from that class\nprivate\n- the property or method can \n  ONLY be accessed within the class\nIn the following example we have added three different access modifiers to \nthree properties (name'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Access Modifiers concepts and techniques. You'll learn how to use PHPOOP - Access Modifiers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Access Modifiers and how to apply it in your projects."
}