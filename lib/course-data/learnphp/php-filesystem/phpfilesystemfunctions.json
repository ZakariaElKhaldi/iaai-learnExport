{
  "id": "d71bd59a-6c91-4674-9aeb-15009ce6c208",
  "title": "PHPFilesystemFunctions",
  "slug": "phpfilesystemfunctions",
  "metadata": {
    "description": "Learn about PHPFilesystemFunctions with clear explanations and practical examples.",
    "keywords": [
      "file",
      "returns",
      "open",
      "filesystem",
      "checks",
      "link",
      "whether",
      "functions",
      "directory",
      "changes"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Filesystem"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nFilesystem\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP Filesystem Introduction\nThe filesystem functions allow you to access and manipulate the filesystem.\nInstallation\nThe filesystem functions are part of the PHP core. There is no installation \nneeded to use these functions.\nUnix / Windows Compatibility\nWhen specifying a path on Unix platforms, a forward slash (/) is used as directory separator.\nOn Windows platforms, both \nforward slash (/) and backslash (\\) can be used.\nRuntime Configuration\nThe behavior of the filesystem functions is affected by settings in php.ini.\nName\nDefault\nDescription\nChangeable\nallow_url_fopen\n\"1\"\nAllows fopen()-type functions to work with URLs\nPHP_INI_SYSTEM\nallow_url_include\n\"0\"\n(available since PHP 5.2)\nPHP_INI_SYSTEM\nuser_agent\nNULL\nDefines the user agent for PHP to send (available since PHP 4.3)\nPHP_INI_ALL\ndefault_socket_timeout\n\"60\"\nSets the default timeout, in seconds, for socket based streams (available since PHP 4.3)\nPHP_INI_ALL\nfrom\n\"\"\nDefines the email address to be used on unauthenticated FTP connections \n    and in the From header for HTTP connections when using ftp and http wrappers\nPHP_INI_ALL\nauto_detect_line_endings\n\"0\"\nWhen set to \"1\", PHP will examine the data read by fgets() and file() to see if it is using Unix, MS-Dos or Mac line-ending characters (available since PHP 4.3)\nPHP_INI_ALL\nsys_temp_dir\n\"\"\n(available since PHP 5.5)\nPHP_INI_SYSTEM\nPHP Filesystem Functions\nFunction\nDescription\nbasename()\nReturns the filename component of a path\nchgrp()\nChanges the file group\nchmod()\nChanges the file mode\nchown()\nChanges the file owner\nclearstatcache()\nClears the file status cache\ncopy()\nCopies a file\ndelete()\nSee\nunlink()\ndirname()\nReturns the directory name component of a path\ndisk_free_space()\nReturns the free space of a filesystem or disk\ndisk_total_space()\nReturns the total size of a filesystem or disk\ndiskfreespace()\nAlias of\ndisk_free_space()\nfclose()\nCloses an open file\nfeof()\nChecks if the \"end-of-file\" (EOF) has been reached for an open file\nfflush()\nFlushes buffered output to an open file\nfgetc()\nReturns a single character from an open file\nfgetcsv()\nReturns a line from an open CSV file\nfgets()\nReturns a line from an open file\nfgetss()\nDeprecated from PHP 7.3.\nReturns a line from an open file - stripped \n    from HTML and PHP tags\nfile()\nReads a file into an array\nfile_exists()\nChecks whether or not a file or directory exists\nfile_get_contents()\nReads a file into a string\nfile_put_contents()\nWrites data to a file\nfileatime()\nReturns the last access time of a file\nfilectime()\nReturns the last change time of a file\nfilegroup()\nReturns the group ID of a file\nfileinode()\nReturns the inode number of a file\nfilemtime()\nReturns the last modification time of a file\nfileowner()\nReturns the user ID (owner) of a file\nfileperms()\nReturns the file's permissions\nfilesize()\nReturns the file size\nfiletype()\nReturns the file type\nflock()\nLocks or releases a file\nfnmatch()\nMatches a filename or string against a specified pattern\nfopen()\nOpens a file or URL\nfpassthru()\nReads from the current position in a file - until EOF, and writes the result \n    to the output buffer\nfputcsv()\nFormats a line as CSV and writes it to an open file\nfputs()\nAlias of\nfwrite()\nfread()\nReads from an open file (binary-safe)\nfscanf()\nParses input from an open file according to a specified format\nfseek()\nSeeks in an open file\nfstat()\nReturns information about an open file\nftell()\nReturns the current position in an open file\nftruncate()\nTruncates an open file to a specified length\nfwrite()\nWrites to an open file (binary-safe)\nglob()\nReturns an array of filenames / directories matching a specified pattern\nis_dir()\nChecks whether a file is a directory\nis_executable()\nChecks whether a file is executable\nis_file()\nChecks whether a file is a regular file\nis_link()\nChecks whether a file is a link\nis_readable()\nChecks whether a file is readable\nis_uploaded_file()\nChecks whether a file was uploaded via HTTP POST\nis_writable()\nChecks whether a file is writable\nis_writeable()\nAlias of\nis_writable()\nlchgrp()\nChanges the group ownership of a symbolic link\nlchown()\nChanges the user ownership of a symbolic link\nlink()\nCreates a hard link\nlinkinfo()\nReturns information about a hard link\nlstat()\nReturns information about a file or symbolic link\nmkdir()\nCreates a directory\nmove_uploaded_file()\nMoves an uploaded file to a new location\nparse_ini_file()\nParses a configuration file\nparse_ini_string()\nParses a configuration string\npathinfo()\nReturns information about a file path\npclose()\nCloses a pipe opened by\npopen()\npopen()\nOpens a pipe\nreadfile()\nReads a file and writes it to the output buffer\nreadlink()\nReturns the target of a symbolic link\nrealpath()\nReturns the absolute pathname\nrealpath_cache_get()\nReturns realpath cache entries\nrealpath_cache_size()\nReturns realpath cache size\nrename()\nRenames a file or directory\nrewind()\nRewinds a file pointer\nrmdir()\nRemoves an empty directory\nset_file_buffer()\nAlias of stream_set_write_buffer(). Sets the buffer size for write \n    operations on the given file\nstat()\nReturns information about a file\nsymlink()\nCreates a symbolic link\ntempnam()\nCreates a unique temporary file\ntmpfile()\nCreates a unique temporary file\ntouch()\nSets access and modification time of a file\numask()\nChanges file permissions for files\nunlink()\nDeletes a file\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "860eb2b6-6d96-4ddd-a8c2-ba69a05e91dc",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "8b41fac8-ba3e-469d-b2aa-662a95aeab0a",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "0f2263cf-44f4-45e8-a034-57f1ec1d997b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Installation\nThe filesystem functions?",
      "options": [
        "part of the PHP core",
        "None of the above.",
        "None of the above.",
        "no installation \nneeded to use these functions"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Installation\nThe filesystem functions is 'part of the PHP core'."
    },
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "no installation \nneeded to use these functions",
        "None of the above.",
        "part of the PHP core"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of There is 'no installation \nneeded to use these functions'."
    }
  ],
  "summary": "This tutorial covers PHPFilesystemFunctions concepts and techniques. You'll learn how to use PHPFilesystemFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPFilesystemFunctions and how to apply it in your projects."
}