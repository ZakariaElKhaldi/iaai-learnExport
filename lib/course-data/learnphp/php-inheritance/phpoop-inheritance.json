{
  "id": "c65cc320-ce50-4a4c-946b-31983dfdc49d",
  "title": "PHPOOP - Inheritance",
  "slug": "phpoop-inheritance",
  "metadata": {
    "description": "Learn about PHPOOP - Inheritance with clear explanations and practical examples.",
    "keywords": [
      "c",
      "class",
      "public",
      "color",
      "strawberry",
      "name",
      "fruit",
      "intro",
      "example",
      "function",
      "methods"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Inheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - What is Inheritance?\nInheritance in OOP = When a class derives from another class.\nThe child class will inherit all the public and protected properties and \nmethods from the parent class. In addition, it can have its own properties and \nmethods.\nAn inherited class is defined by using the\nextends\nkeyword.\nLet's look at an example:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n// Strawberry is inherited from Fruit\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n?>\n\nExample Explained\nThe Strawberry class is inherited from the Fruit class.\nThis means that the Strawberry class can use the public $name and $color \nproperties as well as the public __construct() and intro() methods from the \nFruit class because of inheritance.\nThe Strawberry class also has its own method: message().\nPHP - Inheritance and the Protected Access Modifier\nIn the \nprotected\nproperties or methods can \n  be accessed within the \n  class and by classes derived from that class. What does that mean?\nLet's look at an example:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\u00a0 \n    // OK. __construct() is public\n$strawberry->message(); // OK. message() \n    is public\n$strawberry->intro(); // ERROR. intro() \n    is protected\n?>\n\nIn the example above we see that if we try to call a\nprotected\nmethod (intro()) from outside the class, we will receive an error.\npublic\nmethods will work fine!\nLet's look at another example:\nExample\n<?php\nclass Fruit {\npublic $name;\npublic \n    $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The \n    fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\nclass Strawberry extends Fruit {\npublic function message() {\necho \"Am I a fruit or a berry? \";\n// Call protected \n    method from within derived class - OK\n$this -> \n    intro();\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\"); // OK. __construct() is \n    public\n$strawberry->message(); // OK. message() is \n    public and it calls intro() (which is protected) from within the \n    derived class\n?>\n\nIn the example above we see that all works fine! It is because we call the\nprotected\nmethod (intro()) from inside the derived class.\nPHP - Overriding Inherited Methods\nInherited methods can be overridden by redefining the methods (use the same \nname) in the child class.\nLook at the example below. The __construct() and intro() methods in the child \nclass (Strawberry) will override the __construct() and intro() methods in the \nparent class (Fruit):\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic $weight;\npublic \n    function __construct($name, $color, $weight) {\n$this->name = $name;\n$this->color = $color;\n$this->weight = $weight;\n}\npublic function intro() {\necho \"The fruit is {$this->name}, the color is {$this->color}, \n    and the weight is {$this->weight} gram.\";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\", \n    50);\n$strawberry->intro();\n?>\n\nPHP - The final Keyword\nThe\nfinal\nkeyword can be used to prevent class inheritance or to prevent method overriding.\nThe following example shows how to prevent class inheritance:\nExample\n<?php\nfinal class Fruit {\n// some code\n}\n// \n    will result in error\nclass \n    Strawberry extends Fruit {\n// some code\n}\n?>\n\nThe following example shows how to prevent method overriding:\nExample\n<?php\nclass Fruit {\nfinal public function intro() {\n// some code\n}\n}\nclass \n    Strawberry extends Fruit {\n// \n    will result in error\npublic function intro() {\n// some code\n}\n}\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n// Strawberry is inherited from Fruit\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\u00a0 \n    // OK. __construct() is public\n$strawberry->message(); // OK. message() \n    is public\n$strawberry->intro(); // ERROR. intro() \n    is protected\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nclass Fruit {\npublic $name;\npublic \n    $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The \n    fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\nclass Strawberry extends Fruit {\npublic function message() {\necho \"Am I a fruit or a berry? \";\n// Call protected \n    method from within derived class - OK\n$this -> \n    intro();\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\"); // OK. __construct() is \n    public\n$strawberry->message(); // OK. message() is \n    public and it calls intro() (which is protected) from within the \n    derived class\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic $weight;\npublic \n    function __construct($name, $color, $weight) {\n$this->name = $name;\n$this->color = $color;\n$this->weight = $weight;\n}\npublic function intro() {\necho \"The fruit is {$this->name}, the color is {$this->color}, \n    and the weight is {$this->weight} gram.\";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\", \n    50);\n$strawberry->intro();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\nfinal class Fruit {\n// some code\n}\n// \n    will result in error\nclass \n    Strawberry extends Fruit {\n// some code\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<?php\nclass Fruit {\nfinal public function intro() {\n// some code\n}\n}\nclass \n    Strawberry extends Fruit {\n// \n    will result in error\npublic function intro() {\n// some code\n}\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n// Strawberry is inherited from Fruit\nclass \n# TODO: Complete this line\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n// Strawberry is inherited from Fruit\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\n# TODO: Complete this line\n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\u00a0 \n    // OK. __construct() is public\n$strawberry->message(); // OK. message() \n    is public\n$strawberry->intro(); // ERROR. intro() \n    is protected\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\npublic \n    function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\nclass \n    Strawberry extends Fruit {\npublic \n    function message() {\necho \"Am I a fruit or a \n    berry? \";\n}\n}\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\u00a0 \n    // OK. __construct() is public\n$strawberry->message(); // OK. message() \n    is public\n$strawberry->intro(); // ERROR. intro() \n    is protected\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "f3333776-b7d5-484f-8990-e3549e300681",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "89bd729e-b01e-46b5-9e0b-88d6ee395e76",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8fbf0e65-cb81-4451-8f93-f2d4105a175d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "Inheritance",
        "defined by using the\nextends\nkeyword",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'Inheritance'."
    },
    {
      "question": "What is An inherited class?",
      "options": [
        "defined by using the\nextends\nkeyword",
        "Inheritance",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of An inherited class is 'defined by using the\nextends\nkeyword'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Inheritance concepts and techniques. You'll learn how to use PHPOOP - Inheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Inheritance and how to apply it in your projects."
}