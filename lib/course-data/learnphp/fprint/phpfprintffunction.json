{
  "id": "c88589cc-cc58-4653-8b1c-a8233c0b4fed",
  "title": "PHPfprintf()Function",
  "slug": "phpfprintffunction",
  "metadata": {
    "description": "Learn about PHPfprintf()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "number",
      "printf",
      "file",
      "string",
      "format",
      "sign",
      "example",
      "test",
      "inserted",
      "decimal"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "fprint()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nfprintf()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nWrite some text to a text file named \"test.txt\":\n<?php\n$number = 9;\n$str = \"Beijing\";\n$file = fopen(\"test.txt\",\"w\");\necho fprintf($file,\"There are %u million bicycles in %s.\",$number,$str);\n?>\nThe output of the code above will be:\n40\nThe following text will be written to the file \"test.txt\":\nThere are 9 million bicycles in Beijing.\nDefinition and Usage\nThe fprintf() function writes a formatted string to a specified output stream (example: file or database).\nThe arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string.\nThis function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.\nNote:\nIf there are more % signs than arguments, you must use placeholders. A placeholder is \ninserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip:\nRelated functions:\nprintf()\n,\nsprintf()\n,\nvprintf()\n,\nvsprintf()\nand\nvfprintf()\nSyntax\nfprintf(\nstream,format,arg1,arg2,arg++\n)\nParameter Values\nParameter\nDescription\nstream\nRequired. Specifies where to write/output the string\nformat\nRequired. Specifies the string and how to format the variables in it.\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used  together with the width specifier.  Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote:\nIf multiple additional format values are used, they must be in the same order as above.\narg1\nRequired. The argument to be inserted at the first %-sign in the format string\narg2\nOptional. The argument to be inserted at the second %-sign in the format string\narg++\nOptional. The argument to be inserted at the third, fourth, etc. %-sign in the format string\nTechnical Details\nReturn Value:\nReturns the length of the written string\nPHP Version:\n5+\nMore Examples\nExample\nWrite some text to a file:\n<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"%f\",$number);\n?>\nThe following text will be written to the file \"test.txt\":\n123.000000\nExample\nUse of placeholders:\n<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"With 2 decimals: %1\\$.2f\n\\nWith no decimals: %1\\$u\",$number);\n?>\nThe following text will be written to the file \"test.txt\":\nWith 2 decimals: 123.00\nWith no decimals: 123\nExample\nUsing printf() to demonstrate all possible format values:\n<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$number = 9;\n$str = \"Beijing\";\n$file = fopen(\"test.txt\",\"w\");\necho fprintf($file,\"There are %u million bicycles in %s.\",$number,$str);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"%f\",$number);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"With 2 decimals: %1\\$.2f\n\\nWith no decimals: %1\\$u\",$number);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$number = 9;\n$str = \"Beijing\";\n# TODO: Complete this line\necho fprintf($file,\"There are %u million bicycles in %s.\",$number,$str);\n?>",
      "solution": "<?php\n$number = 9;\n$str = \"Beijing\";\n$file = fopen(\"test.txt\",\"w\");\necho fprintf($file,\"There are %u million bicycles in %s.\",$number,$str);\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"%f\",$number);\n?>",
      "solution": "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"%f\",$number);\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "d48fd25b-b1c0-44b1-8656-aec4eef75637",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "87c9f05f-9200-4608-946b-e0455f84d81d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "192d1580-7891-4b22-9728-b80e5150546f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is There?",
      "options": [
        "9 million bicycles in Beijing",
        "None of the above.",
        "None of the above.",
        "%u million bicycles in %s"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of There is '%u million bicycles in %s'."
    },
    {
      "question": "What is There?",
      "options": [
        "%u million bicycles in %s",
        "None of the above.",
        "None of the above.",
        "9 million bicycles in Beijing"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of There is '9 million bicycles in Beijing'."
    }
  ],
  "summary": "This tutorial covers PHPfprintf()Function concepts and techniques. You'll learn how to use PHPfprintf()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPfprintf()Function and how to apply it in your projects."
}