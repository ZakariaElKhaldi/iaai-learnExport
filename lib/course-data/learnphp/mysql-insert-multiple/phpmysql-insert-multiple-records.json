{
  "id": "ed73c40c-0db7-41ed-ad88-803a3c2753e9",
  "title": "PHPMySQL Insert Multiple Records",
  "slug": "phpmysql-insert-multiple-records",
  "metadata": {
    "description": "Learn about PHPMySQL Insert Multiple Records with clear explanations and practical examples.",
    "keywords": [
      "c",
      "conn",
      "example",
      "insert",
      "myguests",
      "username",
      "password",
      "firstname",
      "lastname",
      "email",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "MySQL Insert Multiple"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nMySQL Insert Multiple Records",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Insert Multiple Records Into MySQL Using MySQLi and PDO\nMultiple SQL statements must be executed with the\nmysqli_multi_query()\nfunction.\nThe following examples add three new records to the \"MyGuests\" table:\nExample (MySQLi Object-oriented)\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)\u00a0{\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif ($conn->multi_query($sql) === TRUE) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n$conn->close();\n?>\nNote that each SQL statement must be separated by a semicolon.\nExample (MySQLi Procedural)\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)\u00a0{\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif (mysqli_multi_query($conn, $sql)) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>\nThe PDO way is a little bit different:\nExample (PDO)\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// begin the transaction\n$conn->beginTransaction();\n// our SQL statements\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\");\n// commit the transaction\n$conn->commit();\necho \"New records created successfully\";\n} catch(PDOException $e) {\n// roll back the transaction if something failed\n$conn->rollback();\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example (MySQLi Object-oriented)",
      "content": "",
      "order": 3,
      "code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)\u00a0{\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif ($conn->multi_query($sql) === TRUE) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n$conn->close();\n?>",
      "language": "html",
      "explanation": "Example of example (mysqli object-oriented)"
    },
    {
      "type": "code_example",
      "title": "Example (MySQLi Procedural)",
      "content": "",
      "order": 4,
      "code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)\u00a0{\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif (mysqli_multi_query($conn, $sql)) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>",
      "language": "html",
      "explanation": "Example of example (mysqli procedural)"
    },
    {
      "type": "code_example",
      "title": "Example (PDO)",
      "content": "",
      "order": 5,
      "code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// begin the transaction\n$conn->beginTransaction();\n// our SQL statements\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\");\n// commit the transaction\n$conn->commit();\necho \"New records created successfully\";\n} catch(PDOException $e) {\n// roll back the transaction if something failed\n$conn->rollback();\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\n?>",
      "language": "html",
      "explanation": "Example of example (pdo)"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)\u00a0{\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif ($conn->multi_query($sql) === TRUE) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)\u00a0{\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif ($conn->multi_query($sql) === TRUE) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n$conn->close();\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n# TODO: Complete this line\nif (!$conn)\u00a0{\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif (mysqli_multi_query($conn, $sql)) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>",
      "solution": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)\u00a0{\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\nif (mysqli_multi_query($conn, $sql)) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\nmysqli_close($conn);\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "bafc22ce-7532-423f-8caf-56a98dc8982f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7bda910a-753e-4798-9978-218516d2ef57",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "38d191bc-a6fa-4e84-885a-9c67f7c0edc6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The PDO way?",
      "options": [
        "None of the above.",
        "a little bit different:\nExample (PDO)\n<",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The PDO way is 'a little bit different:\nExample (PDO)\n<'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPMySQL Insert Multiple Records concepts and techniques. You'll learn how to use PHPMySQL Insert Multiple Records effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPMySQL Insert Multiple Records and how to apply it in your projects."
}