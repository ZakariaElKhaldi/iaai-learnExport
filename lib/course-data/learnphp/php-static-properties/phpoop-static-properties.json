{
  "id": "81789a70-bb3e-400b-8e84-b4057f602fb3",
  "title": "PHPOOP - Static Properties",
  "slug": "phpoop-static-properties",
  "metadata": {
    "description": "Learn about PHPOOP - Static Properties with clear explanations and practical examples.",
    "keywords": [
      "c",
      "static",
      "class",
      "value",
      "property",
      "properties",
      "public",
      "example",
      "echo",
      "name",
      "keyword"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Static Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Static Properties",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - Static Properties\nStatic properties can be called directly - without creating an instance of a \nclass.\nStatic properties are declared with the\nstatic\nkeyword:\nSyntax\n<?php\nclass ClassName {\npublic static $staticProp = \"\";\n}\n?>\nTo access a static property use the class name, double colon (::), and the \nproperty name:\nSyntax\nClassName::$staticProp;\nLet's look at an example:\nExample\n<?php\nclass \n    pi {\npublic static $value = 3.14159;\n}\n// Get static property\necho pi::$value;\n?>\n\nExample Explained\nHere, we declare a static property: $value. Then, we echo the value of the static \nproperty \nby using the class name, double colon (::), and the property name (without creating a class \nfirst).\nPHP - More on Static Properties\nA class can have both static and non-static properties. A static property can be \naccessed from a method in the same class using the\nself\nkeyword and double colon (::):\nExample\n<?php\nclass \n    pi {\npublic static $value=3.14159;\npublic function \n    staticValue() {\nreturn self::$value;\n}\n}\n$pi = new pi();\necho $pi->staticValue();\n?>\n\nTo call a static property from a child class, use the\nparent\nkeyword inside the child class:\nExample\n<?php\nclass \n    pi {\npublic static $value=3.14159;\n}\nclass x extends pi {\npublic function xStatic() {\nreturn \n    parent::$value;\n}\n}\n// Get value of static property \n    directly via child class\necho x::$value;\n// or get value of static property via xStatic() \n    method\n$x = new x();\necho $x->xStatic();\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\nclass ClassName {\npublic static $staticProp = \"W3Schools\";\n}\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 4,
      "code": "ClassName::$staticProp;",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nclass \n    pi {\npublic static $value = 3.14159;\n}\n// Get static property\necho pi::$value;\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nclass \n    pi {\npublic static $value=3.14159;\npublic function \n    staticValue() {\nreturn self::$value;\n}\n}\n$pi = new pi();\necho $pi->staticValue();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\nclass \n    pi {\npublic static $value=3.14159;\n}\nclass x extends pi {\npublic function xStatic() {\nreturn \n    parent::$value;\n}\n}\n// Get value of static property \n    directly via child class\necho x::$value;\n// or get value of static property via xStatic() \n    method\n$x = new x();\necho $x->xStatic();\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\npublic static $staticProp = \"W3Schools\";\n}\n?>",
      "solution": "<?php\nclass ClassName {\npublic static $staticProp = \"W3Schools\";\n}\n?>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "ClassName::$staticProp;"
    }
  ],
  "related_topics": [
    {
      "id": "a261e1de-1a11-4580-b73d-faa52eda4394",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e852d107-b75a-44d0-a561-7d1c181bd691",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a001dcd8-bd63-401e-be7b-589bd30fbd75",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Static properties?",
      "options": [
        "declared with the\nstatic\nkeyword:\nSyntax\n<",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Static properties is 'declared with the\nstatic\nkeyword:\nSyntax\n<'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Static Properties concepts and techniques. You'll learn how to use PHPOOP - Static Properties effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Static Properties and how to apply it in your projects."
}