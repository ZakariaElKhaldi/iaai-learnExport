{
  "id": "9ec05b5b-392d-41e7-9a6f-adfe5b054102",
  "title": "PHPXML DOM Parser",
  "slug": "phpxml-dom-parser",
  "metadata": {
    "description": "Learn about PHPXML DOM Parser with clear explanations and practical examples.",
    "keywords": [
      "php",
      "parser",
      "note",
      "text",
      "jani",
      "xmldoc",
      "heading",
      "body",
      "load",
      "output",
      "element"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Php Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP XML DOM"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nXML DOM Parser",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The built-in DOM parser makes it possible to process XML documents in PHP.\nThe XML DOM Parser\nThe DOM parser is a tree-based parser.\nLook at the following XML document fraction:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<from>Jani</from>\nThe DOM sees the XML above as a tree structure:\nLevel 1: XML Document\nLevel 2: Root element: <from>\nLevel 3: Text element: \"Jani\"\nInstallation\nThe DOM parser functions are part of the PHP core. There is no installation needed to use these functions.\nThe XML File\nThe XML file below (\"note.xml\") will be used in our example:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\nLoad and Output XML\nWe want to initialize the XML parser, load the xml, and output it:\n<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\nprint $xmlDoc->saveXML();\n?>\nThe output of the code above will be:\nTove Jani Reminder Don't forget me this weekend!\nIf you select \"View source\" in the browser window, you will see the following HTML:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\nThe example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it.\nThen the saveXML() function puts the internal XML document into a string, so we can output it.\nLooping through XML\nWe want to initialize the XML parser, load the XML, and loop through all elements of the <note> element:\n<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n$x = $xmlDoc->documentElement;\nforeach ($x->childNodes AS $item) {\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n}\n?>\nThe output of the code above will be:\n#text =\nto = Tove\n#text =\nfrom = Jani\n#text =\nheading = Reminder\n#text =\nbody = Don't forget me this weekend!\n#text =\nIn the example above you see that there are empty text nodes between each element.\nWhen XML generates, it often contains white-spaces between the nodes. The XML \nDOM parser treats these as ordinary elements, and if you are not aware of them, \nthey sometimes cause problems.\nIf you want to learn more about the XML DOM, please visit our\nXML tutorial\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\nprint $xmlDoc->saveXML();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n$x = $xmlDoc->documentElement;\nforeach ($x->childNodes AS $item) {\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\nprint $xmlDoc->saveXML();\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n$x = $xmlDoc->documentElement;\n# TODO: Complete this line\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n}\n?>",
      "solution": "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n$x = $xmlDoc->documentElement;\nforeach ($x->childNodes AS $item) {\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n}\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "0615e574-de42-4f82-b6c9-e1eb8f4f4251",
      "title": "Php Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d8ed8bee-a182-4336-bb93-222a150b824b",
      "title": "Php Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "eb814a9f-7272-4cc0-ae32-3201c02a34b0",
      "title": "Php Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The XML DOM Parser\nThe DOM parser?",
      "options": [
        "None of the above.",
        "a tree-based parser",
        "part of the PHP core",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The XML DOM Parser\nThe DOM parser is 'a tree-based parser'."
    },
    {
      "question": "What is Installation\nThe DOM parser functions?",
      "options": [
        "part of the PHP core",
        "a tree-based parser",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Installation\nThe DOM parser functions is 'part of the PHP core'."
    }
  ],
  "summary": "This tutorial covers PHPXML DOM Parser concepts and techniques. You'll learn how to use PHPXML DOM Parser effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPXML DOM Parser and how to apply it in your projects."
}