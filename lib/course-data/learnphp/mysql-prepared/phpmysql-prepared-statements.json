{
  "id": "0a7c99d0-41cd-4913-be4a-7864828e70b7",
  "title": "PHPMySQL Prepared Statements",
  "slug": "phpmysql-prepared-statements",
  "metadata": {
    "description": "Learn about PHPMySQL Prepared Statements with clear explanations and practical examples.",
    "keywords": [
      "php",
      "statements",
      "prepared",
      "stmt",
      "firstname",
      "lastname",
      "email",
      "parameters",
      "example",
      "execute",
      "insert"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Php Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "MySQL Prepared"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nMySQL Prepared Statements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Prepared statements are very useful against SQL injections.\nPrepared Statements and Bound Parameters\nA prepared statement is a feature used to execute the same (or similar) SQL \nstatements repeatedly with high efficiency.\nPrepared statements basically work like this:\nPrepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?)\nThe database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it\nExecute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values\nCompared to executing SQL statements directly, prepared statements have three main advantages:\nPrepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)\nBound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query\nPrepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.\nPrepared Statements in MySQLi\nThe following example uses prepared statements and bound parameters in MySQLi:\nExample (MySQLi with Prepared Statements)\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n$stmt->close();\n$conn->close();\n?>\nCode lines to explain from the example above:\n\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\"\nIn our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob \nvalue.\nThen, have a look at the bind_param() function:\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\nThis function binds the parameters to the SQL query and tells the \ndatabase what the parameters are. The \"sss\" argument lists the \ntypes of data that the parameters are. The s character tells mysql that the parameter is a string.\nThe argument may be one of four types:\ni - integer\nd - double\ns - \nstring\nb - BLOB\nWe must have one of these for each parameter.\nBy telling mysql what type of data to expect, we minimize the risk of SQL injections.\nNote:\nIf we want to insert any data from external sources \n(like user input), it is very important that the data is sanitized and validated.\nPrepared Statements in PDO\nThe following example uses prepared statements and bound parameters in PDO:\nExample (PDO with Prepared Statements)\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// prepare sql and bind parameters\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES (:firstname, :lastname, :email)\");\n$stmt->bindParam(':firstname', $firstname);\n$stmt->bindParam(':lastname', $lastname);\n$stmt->bindParam(':email', $email);\n// insert a row\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n// insert another row\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n// insert another row\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n} catch(PDOException $e) \n  {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example (MySQLi with Prepared Statements)",
      "content": "",
      "order": 3,
      "code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n$stmt->close();\n$conn->close();\n?>",
      "language": "html",
      "explanation": "Example of example (mysqli with prepared statements)"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\"",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "$stmt->bind_param(\"sss\", $firstname, $lastname, $email);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example (PDO with Prepared Statements)",
      "content": "",
      "order": 6,
      "code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n// prepare sql and bind parameters\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES (:firstname, :lastname, :email)\");\n$stmt->bindParam(':firstname', $firstname);\n$stmt->bindParam(':lastname', $lastname);\n$stmt->bindParam(':email', $email);\n// insert a row\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n// insert another row\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n// insert another row\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n} catch(PDOException $e) \n  {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\n?>",
      "language": "html",
      "explanation": "Example of example (pdo with prepared statements)"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n# TODO: Complete this line\n$conn->close();\n?>",
      "solution": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\necho \"New records created successfully\";\n$stmt->close();\n$conn->close();\n?>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\""
    }
  ],
  "related_topics": [
    {
      "id": "be156959-c4e8-4cdf-aa99-0d7a7fe61c02",
      "title": "Php Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b4fda727-d416-423c-98ff-8973c05d006f",
      "title": "Php Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "825f0718-f005-4564-b9b9-2c15133718c4",
      "title": "Php Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PHP\nMySQL Prepared Statements\n\nPrepared statements?",
      "options": [
        "None of the above.",
        "very useful against SQL injections",
        "a feature used to execute the same (or similar) SQL \nstatements repeatedly with high efficiency",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of PHP\nMySQL Prepared Statements\n\nPrepared statements is 'very useful against SQL injections'."
    },
    {
      "question": "What is Prepared Statements and Bound Parameters\nA prepared statement?",
      "options": [
        "None of the above.",
        "a feature used to execute the same (or similar) SQL \nstatements repeatedly with high efficiency",
        "None of the above.",
        "very useful against SQL injections"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Prepared Statements and Bound Parameters\nA prepared statement is 'a feature used to execute the same (or similar) SQL \nstatements repeatedly with high efficiency'."
    }
  ],
  "summary": "This tutorial covers PHPMySQL Prepared Statements concepts and techniques. You'll learn how to use PHPMySQL Prepared Statements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPMySQL Prepared Statements and how to apply it in your projects."
}