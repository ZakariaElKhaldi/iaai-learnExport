{
  "id": "f26893e9-7fca-4811-86b9-dab841dfafe0",
  "title": "PHPForms - Validate E-mail and URL",
  "slug": "phpforms-validate-e-mail-and-url",
  "metadata": {
    "description": "Learn about PHPForms - Validate E-mail and URL with clear explanations and practical examples.",
    "keywords": [
      "name",
      "email",
      "website",
      "validate",
      "check",
      "address",
      "empty",
      "mail",
      "gender",
      "comment"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Php Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Form URL/E-mail"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nForms - Validate E-mail and URL",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This chapter shows how to validate names, e-mails, and URLs.\nPHP - Validate Name\nThe code below shows a simple way to check if the name field only contains \nletters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store \nan error message:\n$name = test_input($_POST[\"name\"]);\nif (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) {\n  $nameErr = \"Only letters and white space allowed\";\n}\nThe\npreg_match()\nfunction searches a string for pattern, returning true if \nthe pattern exists, and false otherwise.\nPHP - Validate E-mail\nThe easiest and safest way to check whether an email address is well-formed \nis to use PHP's\nfilter_var()\nfunction.\nIn the code below, if the e-mail address is not well-formed, then store an error message:\n$email = test_input($_POST[\"email\"]);\nif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n  $emailErr = \"Invalid email format\";\n}\nPHP - Validate URL\nThe code below shows a way to check if a URL address syntax is \nvalid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:\n$website = test_input($_POST[\"website\"]);\nif (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) {\n  $websiteErr = \"Invalid URL\";\n}\nPHP - Validate Name, E-mail, and URL\nNow, the script looks like this:\nExample\n// define variables and set to empty values\n$nameErr = $emailErr = $genderErr = $websiteErr = \"\";\n$name = $email = $gender = $comment = $website = \"\";\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  if (empty($_POST[\"name\"])) {\n    $nameErr = \"Name is required\";\n  } else {\n    $name = test_input($_POST[\"name\"]);\n    // check if name only contains letters and whitespace\n    if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) {\n      $nameErr = \"Only letters and white space allowed\";\n    }\n  }\n\nif (empty($_POST[\"email\"])) {\n    $emailErr = \"Email is required\";\n  } else {\n    $email = test_input($_POST[\"email\"]);\n    // check if e-mail address is well-formed\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n      $emailErr = \"Invalid email format\";\n    }\n  }\n\nif (empty($_POST[\"website\"])) {\n    $website = \"\";\n  } else {\n    $website = test_input($_POST[\"website\"]);\n    // check if URL address syntax is valid (this regular expression also allows dashes in the URL)\n    if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) {\n      $websiteErr = \"Invalid URL\";\n    }\n  }\n\nif (empty($_POST[\"comment\"])) {\n    $comment = \"\";\n  } else {\n    $comment = test_input($_POST[\"comment\"]);\n  }\n\nif (empty($_POST[\"gender\"])) {\n    $genderErr = \"Gender is required\";\n  } else {\n    $gender = test_input($_POST[\"gender\"]);\n  }\n}\nRun Example \u00bb\nThe \nfields when the user submits the form.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "abb807bf-59fb-45aa-bc0c-62d68d37802b",
      "title": "Php Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "eef9a777-5229-4674-94ff-91411935e231",
      "title": "Php Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9856a677-1955-42c3-aa05-71eb24798654",
      "title": "Php Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is If the value of the name field?",
      "options": [
        "None of the above.",
        "not valid",
        "None of the above.",
        "well-formed \nis to use PHP's\nfilter_var()\nfunction"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of If the value of the name field is 'not valid'."
    },
    {
      "question": "What is mail\nThe easiest and safest way to check whether an email address?",
      "options": [
        "None of the above.",
        "None of the above.",
        "not valid",
        "well-formed \nis to use PHP's\nfilter_var()\nfunction"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of mail\nThe easiest and safest way to check whether an email address is 'well-formed \nis to use PHP's\nfilter_var()\nfunction'."
    }
  ],
  "summary": "This tutorial covers PHPForms - Validate E-mail and URL concepts and techniques. You'll learn how to use PHPForms - Validate E-mail and URL effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPForms - Validate E-mail and URL and how to apply it in your projects."
}