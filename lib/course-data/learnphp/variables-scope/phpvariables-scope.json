{
  "id": "92eb01b6-090a-49bc-97b6-1918e479fc3a",
  "title": "PHPVariables Scope",
  "slug": "phpvariables-scope",
  "metadata": {
    "description": "Learn about PHPVariables Scope with clear explanations and practical examples.",
    "keywords": [
      "function",
      "variable",
      "global",
      "mytest",
      "scope",
      "variables",
      "local",
      "echo",
      "example",
      "outside"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "Variables Scope"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nVariables Scope",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP Variables Scope\nIn PHP, variables can be declared anywhere in the script.\nThe scope of a variable is the part of the script where the variable can be referenced/used.\nPHP has three different variable scopes:\nlocal\nglobal\nstatic\nGlobal and Local Scope\nA variable declared\noutside\na function has a GLOBAL SCOPE and can only \nbe accessed outside a function:\nExample\nVariable with global scope:\n$x = 5; // global scope\n\nfunction myTest() {\n  // using x inside this function will generate an error\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\necho \"<p>Variable x outside function is: $x</p>\";\n\nA variable declared\nwithin\na function has a LOCAL SCOPE and can only \nbe accessed within that function:\nExample\nVariable with local scope:\nfunction myTest() {\n  $x = 5; // local scope\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\n// using x outside the function will generate an error\necho \"<p>Variable x outside function is: $x</p>\";\n\nYou can have local variables with the same name in different functions, \nbecause local variables are only recognized by the function in which they are \ndeclared.\nPHP The global Keyword\nThe\nglobal\nkeyword is used to access a global variable from within a function.\nTo do this, use the\nglobal\nkeyword before the variables (inside the \nfunction):\nExample\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  global $x, $y;\n  $y = $x + $y;\n}\n\nmyTest();\necho $y; // outputs 15\n\nPHP also stores all global variables in an array called\n$GLOBALS[\nindex\n]\n. \nThe\nindex\nholds the name of the variable. This array is also accessible from \nwithin functions and can be used to update global variables directly.\nThe example above can be rewritten like this:\nExample\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];\n}\n\nmyTest();\necho $y; // outputs 15\n\nPHP The static Keyword\nNormally, when a function is completed/executed, all of its variables are deleted. \nHowever, sometimes we want a local variable NOT to be deleted. We need it for a \nfurther job.\nTo do this, use the\nstatic\nkeyword when you first declare the \nvariable:\nExample\nfunction myTest() {\n  static $x = 0;\n  echo $x;\n  $x++;\n}\n\nmyTest();\nmyTest();\nmyTest();\n\nThen, each time the function is called, that variable will still have the \ninformation it contained from the last time the function was called.\nNote:\nThe variable is still local to the function.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "4bdf7e75-de3c-4575-8e1b-21f8fd404536",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6863f3ae-8236-4dd7-9b52-51043f19f54e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a7872ff4-0df1-4802-a873-cb7d36678734",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The scope of a variable?",
      "options": [
        "None of the above.",
        "None of the above.",
        "the part of the script where the variable can be referenced/used",
        "declared"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The scope of a variable is 'the part of the script where the variable can be referenced/used'."
    },
    {
      "question": "What is because local variables are only recognized by the function in which they?",
      "options": [
        "None of the above.",
        "the part of the script where the variable can be referenced/used",
        "declared",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of because local variables are only recognized by the function in which they is 'declared'."
    }
  ],
  "summary": "This tutorial covers PHPVariables Scope concepts and techniques. You'll learn how to use PHPVariables Scope effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPVariables Scope and how to apply it in your projects."
}