{
  "id": "ca1666e1-4c81-4512-ba88-abcd6ca62715",
  "title": "PHPOOP - Constructor",
  "slug": "phpoop-constructor",
  "metadata": {
    "description": "Learn about PHPOOP - Constructor with clear explanations and practical examples.",
    "keywords": [
      "c",
      "name",
      "function",
      "apple",
      "color",
      "example",
      "fruit",
      "public",
      "echo",
      "constructor",
      "object"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Constructor"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Constructor",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - The __construct Function\nA constructor allows you to initialize an object's properties upon creation of the object.\nIf you create a\n__construct()\nfunction, PHP will automatically call this \nfunction when you create an object from a class.\nNotice that the construct function starts with two underscores (__)!\nWe see in the example below, that using a constructor saves us from  \ncalling the set_name() method which reduces the amount of code:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit(\"Apple\");\necho $apple->get_name();\n?>\n\nAnother example:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\necho $apple->get_name();\necho \n    \"<br>\";\necho $apple->get_color();\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit(\"Apple\");\necho $apple->get_name();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\necho $apple->get_name();\necho \n    \"<br>\";\necho $apple->get_color();\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit(\"Apple\");\necho $apple->get_name();\n# TODO: Complete this line",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit(\"Apple\");\necho $apple->get_name();\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\necho $apple->get_name();\necho \n# TODO: Complete this line\necho $apple->get_color();\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\necho $apple->get_name();\necho \n    \"<br>\";\necho $apple->get_color();\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "fb41c8c6-7cc6-4aa7-b8c9-5b042d5df44a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "60095929-f868-41a9-b7db-d2162c827c38",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bbdb7a58-418f-4ba4-a820-49b9f6714cfe",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Constructor concepts and techniques. You'll learn how to use PHPOOP - Constructor effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Constructor and how to apply it in your projects."
}