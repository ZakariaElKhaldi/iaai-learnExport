{
  "id": "aa1c3d8b-c4c3-4e72-973d-660c0066a9fc",
  "title": "PHPFunctions",
  "slug": "phpfunctions",
  "metadata": {
    "description": "Learn about PHPFunctions with clear explanations and practical examples.",
    "keywords": [
      "function",
      "example",
      "return",
      "echo",
      "argument",
      "type",
      "arguments",
      "functions",
      "strict",
      "familyname"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The real power of PHP comes from its functions.\nPHP has more \nthan 1000 built-in functions, and in addition you can create your own custom \nfunctions.\nPHP Built-in Functions\nPHP has over 1000 built-in functions that can be called directly, from within \na script, to perform \na specific task.\nPlease check out our PHP reference for a complete overview of the\nPHP built-in functions\n.\nPHP User Defined Functions\nBesides the built-in PHP functions, it is possible to create your own functions.\nA function is a block of statements that can be used repeatedly in a program.\nA function will not execute automatically when a page loads.\nA function will be executed by a call to the function.\nCreate a Function\nA user-defined function declaration starts with the keyword\nfunction\n,\nfollowed by the name of the function:\nExample\nfunction myMessage() {\n  echo \"Hello world!\";\n}\nNote:\nA function name must start with a letter or an underscore. Function names are NOT case-sensitive.\nTip:\nGive the function a name that reflects what the \nfunction does!\nCall a Function\nTo call the function, just write its name followed by parentheses\n()\n:\nExample\nfunction myMessage() {\n  echo \"Hello world!\";\n}\n\nmyMessage();\n\nIn our example, we create a function named\nmyMessage()\n.\nThe opening \ncurly brace\n{\nindicates the beginning of the function code, and the closing \ncurly brace\n}\nindicates the end of the function.\nThe function outputs \"Hello \nworld!\".\nPHP Function Arguments\nInformation can be passed to functions through arguments. An argument is just \nlike a variable.\nArguments are specified after the function name, inside the parentheses. You \ncan add as many arguments as you want, just separate them with a comma.\nThe following example has a function with one argument\n($fname)\n. When the\nfamilyName()\nfunction is called,\nwe also pass along a name, e.g.\n(\"Jani\")\n, and the \nname is used inside the function, which outputs several different first names, \nbut an equal last name:\nExample\nfunction familyName($fname) {\n  echo \"$fname Refsnes.<br>\";\n}\n\nfamilyName(\"Jani\");\nfamilyName(\"Hege\");\nfamilyName(\"Stale\");\nfamilyName(\"Kai Jim\");\nfamilyName(\"Borge\");\n\nThe following example has a function with two arguments\n($fname, $year)\n:\nExample\nfunction familyName($fname, $year) {\n  echo \"$fname Refsnes. Born in $year <br>\";\n}\n\nfamilyName(\"Hege\", \"1975\");\nfamilyName(\"Stale\", \"1978\");\nfamilyName(\"Kai Jim\", \"1983\");\n\nPHP Default Argument Value\nThe following example shows how to use a default parameter. If we call the \nfunction\nsetHeight()\nwithout arguments it takes the default value as argument:\nExample\nfunction setHeight($minheight = 50) {\n  echo \"The height is : $minheight <br>\";\n}\n\nsetHeight(350);\nsetHeight(); // will use the default value of 50\nsetHeight(135);\nsetHeight(80);\n\nPHP Functions - Returning values\nTo let a function return a value, use the\nreturn\nstatement:\nExample\nfunction sum($x, $y) {\n  $z = $x + $y;\n  return $z;\n}\n\necho \"5 + 10 = \" . sum(5, 10) . \"<br>\";\necho \"7 + 13 = \" . sum(7, 13) . \"<br>\";\necho \"2 + 4 = \" . sum(2, 4);\n\nPassing Arguments by Reference\nIn PHP, arguments are usually passed by value, which means that a copy of the value is\nused in the function and the variable that was passed into the function cannot be changed.\nWhen a function argument is passed by reference, changes to the argument also change\nthe variable that was passed in. To turn a function argument into a reference, the\n&\noperator is used:\nExample\nUse a pass-by-reference argument to update a variable:\nfunction add_five(&$value) {\n  $value += 5;\n}\n\n$num = 2;\nadd_five($num);\necho $num;\n\nVariable Number of Arguments\nBy using the\n...\noperator in front of the function parameter, the function \naccepts an unknown number of arguments. This is also called a variadic function.\nThe variadic function argument becomes an array.\nExample\nA function that do not know how many arguments it will get:\nfunction sumMyNumbers(...$x) {\n  $n = 0;\n  $len = count($x);\n  for($i = 0; $i < $len; $i++) {\n    $n += $x[$i];\n  }\n  return $n;\n}\n\n$a = sumMyNumbers(5, 2, 6, 2, 7, 7);\necho $a;\n\nYou can only have one argument with variable length, and it has to be the last argument.\nExample\nThe variadic argument must be the last argument:\nfunction myFamily($lastname, ...$firstname) {\n  $txt = \"\";\n  $len = count($firstname);\n  for($i = 0; $i < $len; $i++) {\n    $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\";\n  }\n  return $txt;\n}\n\n$a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\");\necho $a;\n\nIf the variadic argument is not the last argument, you will get an error.\nExample\nHaving the\n...\noperator on the first of two arguments, will raise an error:\nfunction myFamily(...$firstname, $lastname) {\n  $txt = \"\";\n  $len = count($firstname);\n  for($i = 0; $i < $len; $i++) {\n    $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\";\n  }\n  return $txt;\n}\n\n$a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\");\necho $a;\n\nPHP is a Loosely Typed Language\nIn the examples above, notice that we did not have to tell PHP which data type the variable is.\nPHP automatically associates a data type to the variable, depending on its value. \nSince the data types are not set in a strict sense, you can do things like \nadding a string to an integer without causing an error.\nIn PHP 7, type declarations were added. This gives us an option to specify \nthe expected data type when declaring a function, and by adding the\nstrict\ndeclaration, it will throw a \"Fatal \nError\" if the data type mismatches.\nIn the following example we try to send both a number and a string to the \nfunction without using\nstrict\n:\nExample\nfunction addNumbers(int $a, int $b) {\n  return $a + $b;\n}\necho addNumbers(5, \"5 days\");\n// since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10\n\nTo specify\nstrict\nwe need to set\ndeclare(strict_types=1);\n. \nThis must be on the very first line of the PHP file.\nIn the following example we try to send both a number and a string to the \nfunction, but here we have added the\nstrict\ndeclaration:\nExample\n<?php declare(strict_types=1); // strict requirement\n\nfunction addNumbers(int $a, int $b) {\n  return $a + $b;\n}\necho addNumbers(5, \"5 days\");\n// since strict is enabled and \"5 days\" is not an integer, an error will be thrown\n?>\n\nThe\nstrict\ndeclaration forces things to be used in the intended way.\nPHP Return Type Declarations\nPHP 7 also supports Type Declarations for the\nreturn\nstatement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal \nError\" on a type mismatch.\nTo declare a type for the function return, add a colon (\n:\n) and the type right before the opening curly \n(\n{\n)bracket when declaring the function.\nIn the following example we specify the return type for the function:\nExample\n<?php declare(strict_types=1); // strict requirement\nfunction addNumbers(float $a, float $b) : float {\n  return $a + $b;\n}\necho addNumbers(1.2, 5.2);\n?>\n\nYou can specify a different return type, than the argument types, but make \nsure the return is the correct type:\nExample\n<?php declare(strict_types=1); // strict requirement\nfunction addNumbers(float $a, float $b) : int {\n  return (int)($a + $b);\n}\necho addNumbers(1.2, 5.2);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "504bb4d4-7d97-4d13-a249-f78e2f3725ad",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "dfe3ae99-aafc-4844-a35c-5331779a4d05",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "0a0f06e2-7c24-49dd-a241-59aabe4eaf25",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "possible to create your own functions",
        "a block of statements that can be used repeatedly in a program",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'possible to create your own functions'."
    },
    {
      "question": "What is A function?",
      "options": [
        "None of the above.",
        "a block of statements that can be used repeatedly in a program",
        "None of the above.",
        "possible to create your own functions"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of A function is 'a block of statements that can be used repeatedly in a program'."
    }
  ],
  "summary": "This tutorial covers PHPFunctions concepts and techniques. You'll learn how to use PHPFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPFunctions and how to apply it in your projects."
}