{
  "id": "0b89c1a4-789b-4d22-8773-62f35d0a5f27",
  "title": "PHPmoney_format()Function",
  "slug": "phpmoney-formatfunction",
  "metadata": {
    "description": "Learn about PHPmoney_format()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "number",
      "string",
      "format",
      "used",
      "function",
      "formatted",
      "specifies",
      "output",
      "default",
      "negative"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "money_format()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nmoney_format()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nInternational en_US format:\n<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"en_US\");\necho money_format(\"The price is %i\", $number);\n?>\nThe output of the code above will be:\nThe price is USD 1,234.56\nDefinition and Usage\nThe money_format() function returns a string formatted as a currency string.\nThis function inserts a formatted number where there is a percent (%) sign in the main string.\nNote:\nThe money_format() function does not work on Windows platforms.\nTip:\nThis function is often used together with the\nsetlocale()\nfunction.\nTip:\nTo view all available language codes, go to our\nLanguage code reference.\nSyntax\nmoney_format(\nstring,number\n)\nParameter Values\nParameter\nDescription\nstring\nRequired. Specifies the string to be formatted and how to format the variables in it.\nPossible format values:\nPadding and Flags:\n=\nf\n- Specifies the character (f) to be used as padding (Example: %=t this uses \"t\" as padding). Default is space\n^ - Removes the use of grouping characters\n+ or ( - Specifies how to show positive and negative numbers. If \"+\" is used, the local setting for + and - will be used (usually a sign in front of negative numbers, and nothing in front of positive numbers). If \"(\" is used, negative numbers are enclosed in parenthesis. Default is \"+\"\n! - Stops the use of currency symbols in the output string\n- If \"-\" is used, all fields are left-justified. Default is right-justified\nField width:\nx\n- Specifies the minimum field width (x). Default is 0\n#\nx\n- Specifies the maximum number (x) of digits expected to the left of the decimal point. This is used to keep formatted output aligned in the same columns. If the number of digits are bigger than x, this specification is ignored\n.\nx\n- Specifies the maximum number (x) of digits expected to the right of the decimal point. If x is 0, the decimal point and the digits to its right will not be shown. Default is local settings\nConversion characters:\ni - The number is formatted to international currency format\nn - The number is formatted to national currency format\n% - Returns the % character\nNote:\nIf multiple format values are used, they must be in the same order as shown above.\nNote:\nThis function is affected by local settings.\nnumber\nRequired. The number to be inserted at the %-sign in the format string\nTechnical Details\nReturn Value:\nReturns the formatted string. Characters before and after the formatting string will be returned unchanged. Non-numeric number causes returning NULL and emitting E_WARNING\nPHP Version:\n4.3.0+\nMore Examples\nExample\nInternational format (Germany) with 2 decimals:\n<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"de_DE\");\necho money_format(\"%.2n\", $number);\n?>\nThe output of the code above will be:\n1 234,56 EUR\nExample\nNegative number, US national format with () to indicate negative numbers and \n2 digits of right precision and \"*\" as a fill character:\n<?php\n$number = -1234.5672;\necho money_format(\"%=*(#10.2n\",$number);\n?>\nThe output of the code above will be:\n(******1234.57)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"en_US\");\necho money_format(\"The price is %i\", $number);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"de_DE\");\necho money_format(\"%.2n\", $number);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$number = -1234.5672;\necho money_format(\"%=*(#10.2n\",$number);\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$number = 1234.56;\n# TODO: Complete this line\necho money_format(\"The price is %i\", $number);\n?>",
      "solution": "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"en_US\");\necho money_format(\"The price is %i\", $number);\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"de_DE\");\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"de_DE\");\necho money_format(\"%.2n\", $number);\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "48d85fff-0137-4ee0-86ed-ca6ec0000065",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c96a9b24-334d-443e-84ff-3a2c6ef85c1f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3b563665-2848-4f9c-95cf-02f9d0d87fa9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The price?",
      "options": [
        "None of the above.",
        "None of the above.",
        "%i\"",
        "USD 1"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The price is '%i\"'."
    },
    {
      "question": "What is The price?",
      "options": [
        "USD 1",
        "%i\"",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The price is 'USD 1'."
    }
  ],
  "summary": "This tutorial covers PHPmoney_format()Function concepts and techniques. You'll learn how to use PHPmoney_format()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPmoney_format()Function and how to apply it in your projects."
}