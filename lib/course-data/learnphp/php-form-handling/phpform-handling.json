{
  "id": "a30bcce3-7677-439d-af0f-5aebac7ac3a7",
  "title": "PHPForm Handling",
  "slug": "phpform-handling",
  "metadata": {
    "description": "Learn about PHPForm Handling with clear explanations and practical examples.",
    "keywords": [
      "form",
      "post",
      "html",
      "name",
      "data",
      "input",
      "body",
      "method",
      "example",
      "email"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Php Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Form Handling"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nForm Handling",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The PHP superglobals\n$_GET\nand\n$_POST\nare used to collect form-data.\nPHP - A Simple HTML Form\nThe example below displays a simple HTML form with two input fields and a submit button:\nExample\n<html>\n<body>\n\n<form action=\"welcome.php\" method=\"POST\">\nName: <input type=\"text\" name=\"name\"><br>\nE-mail: <input type=\"text\" name=\"email\"><br>\n<input type=\"submit\">\n</form>\n\n</body>\n</html>\nRun Example \u00bb\nWhen the user fills out the form above and clicks the submit button, the form data is sent \nfor processing to a PHP file named \"welcome.php\". The form data is sent with \nthe HTTP POST method.\nTo display the submitted data you could simply echo all the variables.\nThe \"welcome.php\" looks like this:\n<html>\n<body>\n\nWelcome <?php echo $_POST[\"name\"]; ?><br>\nYour email address is: <?php echo $_POST[\"email\"]; ?>\n\n</body>\n</html>\nThe output could be something like this:\nWelcome John\nYour email address is john.doe@example.com\nThe same result could also be achieved using the HTTP GET method:\nExample\nSame example, but the method is set to GET instead of POST:\n<html>\n<body>\n\n<form action=\"welcome_get.php\" method=\"GET\">\nName: <input type=\"text\" name=\"name\"><br>\nE-mail: <input type=\"text\" name=\"email\"><br>\n<input type=\"submit\">\n</form>\n\n</body>\n</html>\nRun Example \u00bb\nand \"welcome_get.php\" looks like this:\n<html>\n<body>\n\nWelcome <?php echo $_GET[\"name\"]; ?><br>\nYour email address is: <?php echo $_GET[\"email\"]; ?>\n\n</body>\n</html>\nThe code above is quite simple, and it does not include any validation.\nYou need to validate form data to protect your script from malicious code.\nThink SECURITY when processing PHP forms!\nThis page does not contain any form validation, it just shows how you can \nsend and retrieve form data.\nHowever, the \nto protect your form from hackers and spammers!\nGET vs. POST\nBoth GET and POST create an array (e.g. array( key1 => value1, \nkey2 => value2, key3 => value3, ...)). This array holds key/value pairs, where \nkeys are the names of the form controls and values are the input data from the user.\nBoth GET and POST are treated as $_GET and $_POST. These are superglobals, \nwhich means that they are always accessible, regardless of scope - and you can access them from any function,\nclass or file without having to do anything special.\n$_GET is an array of variables passed to the current script via the URL parameters.\n$_POST is an array of variables passed to the current script via the HTTP POST method.\nWhen to use GET?\nInformation sent from a form with the GET method is\nvisible to everyone\n(all \nvariable names and values are displayed in the URL). GET also has limits on the amount of \ninformation to send. The limitation is about 2000 characters. However, \nbecause the variables are displayed in the URL, it is possible to bookmark the \npage. This can be useful in some cases.\nGET may be used for sending non-sensitive data.\nNote:\nGET should NEVER be used for sending passwords or other sensitive information!\nWhen to use POST?\nInformation sent from a form with the POST method is\ninvisible to others\n(all names/values are embedded within the body of the HTTP request) and \nhas\nno limits\non the amount of information to send.\nMoreover POST supports advanced functionality such as support for multi-part \nbinary input while uploading files to server.\nHowever, because the variables are not displayed in the URL, it is not possible to bookmark the page.\nDevelopers prefer POST for sending form data.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "5b3fc913-ae34-48d1-85a0-d5021b78d269",
      "title": "Php Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c2a7d0a9-4177-4527-8244-ce46f3e271c2",
      "title": "Php Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fec859ec-991c-498a-be52-057592b83022",
      "title": "Php Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is POST?",
      "options": [
        "None of the above.",
        "used to collect form-data",
        "None of the above.",
        "sent \nfor processing to a PHP file named \"welcome"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of POST is 'used to collect form-data'."
    },
    {
      "question": "What is the form data?",
      "options": [
        "used to collect form-data",
        "sent \nfor processing to a PHP file named \"welcome",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the form data is 'sent \nfor processing to a PHP file named \"welcome'."
    }
  ],
  "summary": "This tutorial covers PHPForm Handling concepts and techniques. You'll learn how to use PHPForm Handling effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPForm Handling and how to apply it in your projects."
}