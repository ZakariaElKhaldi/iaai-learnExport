{
  "id": "cdde1df5-aa5f-4380-97b1-72b414f2703e",
  "title": "PHParray_multisort()Function",
  "slug": "phparray-multisortfunction",
  "metadata": {
    "description": "Learn about PHParray_multisort()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "values",
      "order",
      "elements",
      "example",
      "specifies",
      "compare",
      "optional",
      "sorting",
      "sort"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "array_multisort()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\narray_multisort()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nReturn a sorted array in ascending order:\n<?php\n$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");\narray_multisort($a);\nprint_r($a);\n?>\n\nDefinition and Usage\nThe array_multisort() function returns a sorted array. You can assign one or \nmore arrays. The function sorts the first array, and the other arrays follow, \nthen, if two or more values are the same, it sorts the \nNote:\nString keys will be maintained, but numeric keys will be re-indexed, starting at 0 and increase by 1.\nNote:\nYou can assign the\nsortorder\nand the\nsorttype\nparameters after each array. \nIf not specified, each array parameter uses the default values.\nSyntax\narray_multisort(\narray1, sortorder, sorttype, array2, array3, ...\n)\nParameter Values\nParameter\nDescription\narray1\nRequired. Specifies an array\nsortorder\nOptional. Specifies the sorting order. Possible values:\nSORT_ASC - Default. Sort in ascending order (A-Z)\nSORT_DESC - Sort in descending order (Z-A)\nsorttype\nOptional. Specifies the type to use, when comparing elements. Possible values:\nSORT_REGULAR - Default. Compare elements normally (Standard ASCII)\nSORT_NUMERIC - Compare elements as numeric values\nSORT_STRING - Compare elements as string values\nSORT_LOCALE_STRING - Compare elements as string, based on the   current locale (can be changed using\nsetlocale()\n)\nSORT_NATURAL - Compare elements as strings using \"natural   ordering\" like\nnatsort()\nSORT_FLAG_CASE - Can be combined (bitwise OR) with SORT_STRING   or SORT_NATURAL to sort strings case-insensitively\narray2\nOptional. Specifies an array\narray3\nOptional. Specifies an array\nTechnical Details\nReturn Value:\nReturns TRUE on success or FALSE on failure\nPHP Version:\n4+\nPHP Changelog:\nPHP 5.4: Added sorting type SORT_NATURAL and SORT_FLAG_CASE\nPHP 5.3: Added sorting type SORT_LOCALE_STRING\nMore Examples\nExample\nReturn a sorted array in ascending order:\n<?php\n$a1=array(\"Dog\",\"Cat\");\n$a2=array(\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>\n\nExample\nSee how it sorts when two values are the same:\n<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>\n\nExample\nUsing sorting parameters:\n<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,SORT_ASC,$a2,SORT_DESC);\nprint_r($a1);\nprint_r($a2);\n?>\n\nExample\nMerge two arrays and sort them as numbers, in descending order:\n<?php\n$a1=array(1,30,15,7,25);\n$a2=array(4,30,20,41,66);\n$num=array_merge($a1,$a2);\narray_multisort($num,SORT_DESC,SORT_NUMERIC);\nprint_r($num);\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");\narray_multisort($a);\nprint_r($a);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$a1=array(\"Dog\",\"Cat\");\n$a2=array(\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,SORT_ASC,$a2,SORT_DESC);\nprint_r($a1);\nprint_r($a2);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\n$a1=array(1,30,15,7,25);\n$a2=array(4,30,20,41,66);\n$num=array_merge($a1,$a2);\narray_multisort($num,SORT_DESC,SORT_NUMERIC);\nprint_r($num);\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\narray_multisort($a);\nprint_r($a);\n?>",
      "solution": "<?php\n$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");\narray_multisort($a);\nprint_r($a);\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$a1=array(\"Dog\",\"Cat\");\n# TODO: Complete this line\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>",
      "solution": "<?php\n$a1=array(\"Dog\",\"Cat\");\n$a2=array(\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "9f0d59ba-5ef6-4776-974c-47e7f88d10ac",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4ca4ea2e-f428-4d1d-8b99-a897f40c4dce",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a0befc1e-8cc6-47c1-b1b3-c4ee05106702",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is if two or more values?",
      "options": [
        "the same:\n<",
        "None of the above.",
        "None of the above.",
        "the same"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of if two or more values is 'the same'."
    },
    {
      "question": "What is Example\nSee how it sorts when two values?",
      "options": [
        "the same:\n<",
        "the same",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Example\nSee how it sorts when two values is 'the same:\n<'."
    }
  ],
  "summary": "This tutorial covers PHParray_multisort()Function concepts and techniques. You'll learn how to use PHParray_multisort()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHParray_multisort()Function and how to apply it in your projects."
}