{
  "id": "683243b7-f2e7-4da8-ba47-e44f1c5adf77",
  "title": "PHPOOP - Interfaces",
  "slug": "phpoop-interfaces",
  "metadata": {
    "description": "Learn about PHPOOP - Interfaces with clear explanations and practical examples.",
    "keywords": [
      "c",
      "interface",
      "animal",
      "public",
      "interfaces",
      "class",
      "classes",
      "function",
      "makesound",
      "animals",
      "abstract"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Interfaces"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Interfaces",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - What are Interfaces?\nInterfaces allow you to specify what methods a class should implement.\nInterfaces make it easy to use a variety of different classes in the same way. When one or more classes use the same interface, it is referred to as \"polymorphism\".\nInterfaces are declared with the\ninterface\nkeyword:\nSyntax\n<?php\ninterface InterfaceName {\npublic function someMethod1();\npublic function someMethod2($name, $color);\npublic function \n    someMethod3() : string;\n}\n?>\nPHP - Interfaces vs. Abstract Classes\nInterface are similar to abstract classes. The difference between interfaces and abstract classes are:\nInterfaces cannot have properties, while abstract classes can\nAll interface methods must be public, while abstract class methods is public \nor protected\nAll methods in an interface are abstract, so they cannot be implemented in code\nand the abstract keyword is not necessary\nClasses can implement an interface while inheriting from another class at the same\ntime\nPHP - Using Interfaces\nTo implement an interface, a class must use the\nimplements\nkeyword.\nA class that implements an interface must implement\nall\nof the interface's methods.\nExample\n<?php\ninterface Animal {\npublic function makeSound();\n}\nclass Cat implements Animal {\npublic function makeSound() {\necho \"Meow\";\n}\n}\n$animal = new Cat();\n$animal->makeSound();\n?>\n\nFrom the example above, let's say that we would like to write software which manages a group of animals. There are actions\nthat all of the animals can do, but each animal does it in its own way.\nUsing interfaces, we can write some code which can work for all of the \nanimals even if each animal behaves differently:\nExample\n<?php\n// Interface definition\ninterface Animal {\npublic \n    function makeSound();\n}\n// Class definitions\nclass Cat \n    implements Animal {\npublic function makeSound() {\necho \" Meow \";\n}\n}\nclass Dog implements Animal {\npublic function makeSound() \n    {\necho \" Bark \";\n}\n}\nclass Mouse implements Animal {\npublic function makeSound() {\necho \" Squeak \";\n}\n}\n// Create a list \n    of animals\n$cat = new Cat();\n$dog = new Dog();\n$mouse = new \n    Mouse();\n$animals = array($cat, $dog, $mouse);\n// Tell the animals \n    to make a sound\nforeach($animals as $animal) {\n$animal->makeSound();\n}\n?>\n\nExample Explained\nCat, Dog and Mouse are all classes that implement the Animal interface, which means that\nall of them are able to make a sound using the\nmakeSound()\nmethod. Because of this,\nwe can loop through all of the animals and tell them to make a sound even if we don't\nknow what type of animal each one is.\nSince the interface does not tell the classes how to implement the method, each animal\ncan make a sound in its own way.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\ninterface InterfaceName {\npublic function someMethod1();\npublic function someMethod2($name, $color);\npublic function \n    someMethod3() : string;\n}\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\ninterface Animal {\npublic function makeSound();\n}\nclass Cat implements Animal {\npublic function makeSound() {\necho \"Meow\";\n}\n}\n$animal = new Cat();\n$animal->makeSound();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n// Interface definition\ninterface Animal {\npublic \n    function makeSound();\n}\n// Class definitions\nclass Cat \n    implements Animal {\npublic function makeSound() {\necho \" Meow \";\n}\n}\nclass Dog implements Animal {\npublic function makeSound() \n    {\necho \" Bark \";\n}\n}\nclass Mouse implements Animal {\npublic function makeSound() {\necho \" Squeak \";\n}\n}\n// Create a list \n    of animals\n$cat = new Cat();\n$dog = new Dog();\n$mouse = new \n    Mouse();\n$animals = array($cat, $dog, $mouse);\n// Tell the animals \n    to make a sound\nforeach($animals as $animal) {\n$animal->makeSound();\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\ninterface InterfaceName {\npublic function someMethod1();\npublic function someMethod2($name, $color);\npublic function \n    someMethod3() : string;\n# TODO: Complete this line\n?>",
      "solution": "<?php\ninterface InterfaceName {\npublic function someMethod1();\npublic function someMethod2($name, $color);\npublic function \n    someMethod3() : string;\n}\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\ninterface Animal {\npublic function makeSound();\n}\nclass Cat implements Animal {\n# TODO: Complete this line\necho \"Meow\";\n}\n}\n$animal = new Cat();\n$animal->makeSound();\n?>",
      "solution": "<?php\ninterface Animal {\npublic function makeSound();\n}\nclass Cat implements Animal {\npublic function makeSound() {\necho \"Meow\";\n}\n}\n$animal = new Cat();\n$animal->makeSound();\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "512afd2d-8cb6-4b17-945c-8bddd40fc470",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fcb73b3d-ad5b-4de1-865b-a5e0fd93a289",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "17b2eea5-cf13-4206-b973-b2b3e69f1873",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "referred to as \"polymorphism\"",
        "None of the above.",
        "Interfaces",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is 'Interfaces'."
    },
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Interfaces",
        "referred to as \"polymorphism\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it is 'referred to as \"polymorphism\"'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Interfaces concepts and techniques. You'll learn how to use PHPOOP - Interfaces effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Interfaces and how to apply it in your projects."
}