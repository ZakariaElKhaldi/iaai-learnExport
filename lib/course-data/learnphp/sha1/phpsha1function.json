{
  "id": "e652347b-eea0-4328-bc7a-0990c9c4d245",
  "title": "PHPsha1()Function",
  "slug": "phpsha1function",
  "metadata": {
    "description": "Learn about PHPsha1()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "hash",
      "message",
      "string",
      "echo",
      "hello",
      "function",
      "example",
      "algorithm",
      "digest",
      "signature"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "sha1()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nsha1()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nCalculate the SHA-1 hash of the string \"Hello\":\n<?php\n$str = \"Hello\";\necho sha1($str);\n?>\n\nDefinition and Usage\nThe sha1() function calculates the SHA-1 hash of a string.\nThe sha1() function uses the US Secure Hash Algorithm 1.\nFrom RFC 3174 - The US Secure Hash Algorithm 1:\n\"SHA-1 produces a 160-bit output called \na message digest. The message digest can then, for example, be input to a \nsignature algorithm which generates or verifies the signature for the message. \nSigning the message digest rather than the message often improves the efficiency \nof the process because the message digest is usually much smaller in size than \nthe message. The same hash algorithm must be used by the verifier of a digital \nsignature as was used by the creator of the digital signature.\"\nTip:\nTo calculate the SHA-1 hash of a file, use the\nsha1_file()\nfunction.\nSyntax\nsha1(\nstring,raw\n)\nParameter Values\nParameter\nDescription\nstring\nRequired. The string to be calculated\nraw\nOptional. Specify hex or binary output format:\nTRUE - Raw 20 character binary format\nFALSE - Default. 40 character hex number\nTechnical Details\nReturn Value:\nReturns the calculated SHA-1 hash on success, or FALSE on failure\nPHP Version:\n4.3.0+\nMore Examples\nExample\nPrint the result of sha1():\n<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\";\necho \"FALSE - 40 character hex number: \".sha1($str).\"<br>\";\n?>\n\nExample\nPrint the result of sha1() and then test it:\n<?php\n$str = \"Hello\";\necho sha1($str);\nif (sha1($str) == \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\")\n{\necho \"<br>Hello world!\";\nexit;\n}\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$str = \"Hello\";\necho sha1($str);\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\";\necho \"FALSE - 40 character hex number: \".sha1($str).\"<br>\";\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$str = \"Hello\";\necho sha1($str);\nif (sha1($str) == \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\")\n{\necho \"<br>Hello world!\";\nexit;\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$str = \"Hello\";\necho sha1($str);\n# TODO: Complete this line",
      "solution": "<?php\n$str = \"Hello\";\necho sha1($str);\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\";\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\";\necho \"FALSE - 40 character hex number: \".sha1($str).\"<br>\";\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "29b4dc06-a3c9-4dca-b472-36ea16eae919",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9efd622b-5104-4ff0-bf62-4530dbb8942c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "08871424-e753-4d80-9e64-7490b60ebf46",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Signing the message digest rather than the message often improves the efficiency \nof the process because the message digest?",
      "options": [
        "usually much smaller in size than \nthe message",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Signing the message digest rather than the message often improves the efficiency \nof the process because the message digest is 'usually much smaller in size than \nthe message'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPsha1()Function concepts and techniques. You'll learn how to use PHPsha1()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPsha1()Function and how to apply it in your projects."
}