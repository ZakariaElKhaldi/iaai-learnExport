{
  "id": "ed4a23d1-fe41-496b-b638-c379f0ddaab1",
  "title": "PHPunpack()Function",
  "slug": "phpunpackfunction",
  "metadata": {
    "description": "Learn about PHPunpack()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "byte",
      "order",
      "machine",
      "data",
      "always",
      "long",
      "unsigned",
      "endian",
      "unpack",
      "dependent"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "unpack()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nunpack()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nUnpack data from a binary string:\n<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*\",$data));\n?>\n\nDefinition and Usage\nThe unpack() function unpacks data from a binary string.\nSyntax\nunpack(format,data)\nParameter Values\nParameter\nDescription\nformat\nRequired. Specifies the format to use when unpacking data.\nPossible values:\na - NUL-padded string\nA - SPACE-padded string\nh - Hex string, low nibble first\nH - Hex string, high nibble first\nc - signed char\nC - unsigned char\ns - signed short (always 16 bit, machine byte order)\nS - unsigned short (always 16 bit, machine byte order)\nn - unsigned short (always 16 bit, big endian byte order)\nv - unsigned short (always 16 bit, little endian byte order)\ni - signed integer (machine dependent size and byte order)\nI - unsigned integer (machine dependent size and byte order)\nl - signed long (always 32 bit, machine byte order)\nL - unsigned long (always 32 bit, machine byte order)\nN - unsigned long (always 32 bit, big endian byte order)\nV - unsigned long (always 32 bit, little endian byte order)\nq - signed long long (always 64 bit, machine byte order)\nQ - unsigned long long (always 64 bit, machine byte order)\nJ - unsigned long long (always 64 bit, big endian byte order)\nP - unsigned long long (always 64 bit, little endian byte order)\nf - float (machine dependent size and representation)\ng - float (machine dependent size, little endian byte order)\nG - float (machine dependent size, big endian byte order)\nd - double (machine dependent size and representation)\ne - double (machine dependent size, little endian byte order)\nE - double (machine dependent size, big endian byte order)\nx - NUL byte\nX - Back up one byte\nZ - NUL-padded string\n@ - NUL-fill to absolute\ndata\nRequired. Specifies the binary data to be unpacked\noffset\nOptional. Specifies where to start unpacking from. Default is 0.\nTechnical Details\nReturn Value:\nReturns an array on success, or FALSE on failure.\nPHP Version:\n4+\nChangelog:\nPHP 7.2 - float and double now supports both big and small endian.\nPHP \n  7.1 - Added the optional offset parameter.\nPHP 5.5.0 - The following changes were made for Perl compatibility:\n  The \"a\" code now retains trailing NULL bytes.\nThe \"A\" code now strips all trailing ASCII whitespace.\nThe \"Z\" code was added for NULL-padded strings, and removes trailing NULL bytes.\nMore Examples\nExample\nUnpack data:\n<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*myint\",$data));\n?>\n\nExample\nUnpack data:\n<?php\n$bin = pack(\"c2n2\",0x1234,0x5678,65,66);\nprint_r(unpack(\"c2chars/n2int\",$bin));\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*\",$data));\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*myint\",$data));\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$bin = pack(\"c2n2\",0x1234,0x5678,65,66);\nprint_r(unpack(\"c2chars/n2int\",$bin));\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$data = \"PHP\";\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*\",$data));\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\nprint_r(unpack(\"C*myint\",$data));\n?>",
      "solution": "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*myint\",$data));\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "836ef0a7-0d9b-4555-b17b-5b9574f90f99",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "908d08d1-c34f-4008-9e3f-9bed3f5b574d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2587bc7b-8412-4a0c-8a08-d5269b1df10f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Default?",
      "options": [
        "None of the above.",
        "0",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Default is '0'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPunpack()Function concepts and techniques. You'll learn how to use PHPunpack()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPunpack()Function and how to apply it in your projects."
}