{
  "id": "459fa302-c6e3-4354-8875-47958fa3d14a",
  "title": "PHPeach()Function",
  "slug": "phpeachfunction",
  "metadata": {
    "description": "Learn about PHPeach()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "element",
      "people",
      "array",
      "current",
      "value",
      "echo",
      "internal",
      "pointer",
      "moves",
      "elements"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "each()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\neach()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nReturn the current element key and value, and move the internal pointer \nforward:\n<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nprint_r (each($people));\n?>\n\nDefinition and Usage\nThe each() function returns the current element key and value, and moves the internal pointer forward.\nNote:\nThe each() function is deprecated in PHP 7.2.\nThis element key and value is returned in an array with four elements. Two \nelements (1 and Value) for the element value, and two elements (0 and Key) for the element key.\nRelated methods:\ncurrent()\n- returns the value of the current element in an array\nend()\n- moves the internal pointer to, and outputs, the last element in the array\n\n- moves the internal pointer to, and outputs, the \nprev()\n- moves the internal pointer to, and outputs, the \nreset()\n- moves the internal pointer to the first element of the array\nSyntax\neach(\narray\n)\nParameter Values\nParameter\nDescription\narray\nRequired. Specifies the array to use\nTechnical Details\nReturn Value:\nReturns the current element key and value. This element key and value is returned in an array with four elements. Two elements (1 and Value) for the element value, and two elements (0 and Key) for the element key. This function returns FALSE if there are no more array elements\nPHP Version:\n4+\nPHP Changelog:\nThis functions has been deprecated as of PHP 7.2\nMore Examples\nExample\nSame example as the one on top of the page, but with a loop to output the \nwhole array:\n<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nreset($people);\nwhile (list($key, $val) = each($people))\n{\necho \"$key => $val<br>\";\n}\n?>\n\nExample\nA demonstration of all related methods:\n<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho \necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The \necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The \necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho \nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nprint_r (each($people));\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nreset($people);\nwhile (list($key, $val) = each($people))\n{\necho \"$key => $val<br>\";\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nprint_r (each($people));\n# TODO: Complete this line",
      "solution": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nprint_r (each($people));\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\nreset($people);\nwhile (list($key, $val) = each($people))\n{\necho \"$key => $val<br>\";\n}\n?>",
      "solution": "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nreset($people);\nwhile (list($key, $val) = each($people))\n{\necho \"$key => $val<br>\";\n}\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "a63b143e-149d-4af2-aff8-3ca1c3f0c4b4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c716c8c6-69a5-4259-8b83-a946437645b6",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9a409015-b0ad-46cd-a45b-ebfc85b8a55f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is function?",
      "options": [
        "returned in an array with four elements",
        "deprecated in PHP 7",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of function is 'deprecated in PHP 7'."
    },
    {
      "question": "What is This element key and value?",
      "options": [
        "None of the above.",
        "returned in an array with four elements",
        "None of the above.",
        "deprecated in PHP 7"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of This element key and value is 'returned in an array with four elements'."
    }
  ],
  "summary": "This tutorial covers PHPeach()Function concepts and techniques. You'll learn how to use PHPeach()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPeach()Function and how to apply it in your projects."
}