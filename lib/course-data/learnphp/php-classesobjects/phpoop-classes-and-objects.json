{
  "id": "ad7c385c-4e3d-46a3-8358-3afde6c97919",
  "title": "PHPOOP - Classes and Objects",
  "slug": "phpoop-classes-and-objects",
  "metadata": {
    "description": "Learn about PHPOOP - Classes and Objects with clear explanations and practical examples.",
    "keywords": [
      "c",
      "name",
      "class",
      "apple",
      "fruit",
      "color",
      "properties",
      "methods",
      "public",
      "function",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Classes/Objects"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Classes and Objects",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A class is a template for objects, and an object is an instance \nof class.\nOOP Case\nLet's assume we have a class named Fruit. A Fruit can have properties like name, \ncolor, weight, etc. We can define variables like $name, $color, and $weight to hold the values of these properties.\nWhen the individual objects (apple, banana, etc.) are created, they inherit \nall the  \nproperties and behaviors from the class, but each object will have different values for the properties.\nDefine a Class\nA class is defined by using the\nclass\nkeyword, followed by the name of the class and a pair of curly braces ({}). All \nits properties and methods go inside the braces:\nSyntax\n<?php\nclass Fruit {\n// code goes here...\n}\n?>\nBelow we declare a class named Fruit consisting of two properties \n($name and $color) and two methods set_name() and \nget_name() for setting and getting the $name property:\n<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n?>\nNote:\nIn a class, variables are called properties and functions are called methods!\nDefine Objects\nClasses are nothing without objects! We can create multiple objects from a \nclass. Each object has all the properties and methods defined in the class, but \nthey will have different property values.\nObjects \nof a class are created using the\nnew\nkeyword.\nIn the example below, $apple and $banana are instances of the class Fruit:\nExample\n<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit();\n$banana = new Fruit();\n$apple->set_name('Apple');\n$banana->set_name('Banana');\necho $apple->get_name();\necho \"<br>\";\necho $banana->get_name();\n?>\n\nIn the example below, we add two more methods to class Fruit, for setting and \ngetting the $color property:\nExample\n<?php\nclass Fruit {\n// Properties\npublic $name;\npublic $color;\n// Methods\nfunction set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction set_color($color) {\n$this->color = $color;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit();\n$apple->set_name('Apple');\n$apple->set_color('Red');\necho \"Name: \" . $apple->get_name();\necho \"<br>\";\necho \"Color: \" . $apple->get_color();\n?>\n\nPHP - The $this Keyword\nThe $this keyword refers to the current object, and is only available inside \nmethods.\nLook at the following example:\nExample\n<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n?>\nSo, where can we change the value of the $name property? There are two \nways:\n1. Inside the class (by adding a set_name() method and use $this):\nExample\n<?php\nclass Fruit {\npublic $name;\nfunction set_name($name) {\n$this->name = $name;\n}\n}\n$apple = new Fruit();\n$apple->set_name(\"Apple\");\necho $apple->name;\n?>\n\n2. Outside the class (by directly changing the property value):\nExample\n<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n$apple->name = \"Apple\";\necho $apple->name;\n?>\n\nPHP - instanceof\nYou can use the\ninstanceof\nkeyword to check if an object belongs to a specific class:\nExample\n<?php\n$apple = new Fruit();\nvar_dump($apple instanceof \n    Fruit);\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\nclass Fruit {\n// code goes here...\n}\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n$apple = new Fruit();\n$banana = new Fruit();\n$apple->set_name('Apple');\n$banana->set_name('Banana');\necho $apple->get_name();\necho \"<br>\";\necho $banana->get_name();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nclass Fruit {\n// Properties\npublic $name;\npublic $color;\n// Methods\nfunction set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction set_color($color) {\n$this->color = $color;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n$apple = new Fruit();\n$apple->set_name('Apple');\n$apple->set_color('Red');\necho \"Name: \" . $apple->get_name();\necho \"<br>\";\necho \"Color: \" . $apple->get_color();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<?php\nclass Fruit {\npublic $name;\nfunction set_name($name) {\n$this->name = $name;\n}\n}\n$apple = new Fruit();\n$apple->set_name(\"Apple\");\necho $apple->name;\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n$apple->name = \"Apple\";\necho $apple->name;\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<?php\n$apple = new Fruit();\nvar_dump($apple instanceof \n    Fruit);\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\n# TODO: Complete this line\n}\n?>",
      "solution": "<?php\nclass Fruit {\n// code goes here...\n}\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n# TODO: Complete this line\nfunction get_name() {\nreturn $this->name;\n}\n}\n?>",
      "solution": "<?php\nclass Fruit {\n// Properties\npublic \n    $name;\npublic $color;\n// Methods\nfunction \n    set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "886c62d2-68f8-414e-b451-c4d8fb86b0b6",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "2943e81f-9edd-4c37-b85c-8d9e57d1701d",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "7621d5b2-4163-4417-a502-cdc643490cda",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Classes and Objects\n\nA class?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a template for objects",
        "Not a Classes and Objects\n\nA class."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Classes and Objects\n\nA class is 'a template for objects'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Classes and Objects concepts and techniques. You'll learn how to use PHPOOP - Classes and Objects effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Classes and Objects and how to apply it in your projects."
}