{
  "id": "f2a726fe-3a84-45fe-8599-b3f74eb760be",
  "title": "PHPFilterFunctions",
  "slug": "phpfilterfunctions",
  "metadata": {
    "description": "Learn about PHPFilterFunctions with clear explanations and practical examples.",
    "keywords": [
      "filter",
      "value",
      "characters",
      "allows",
      "validates",
      "default",
      "variables",
      "address",
      "encode",
      "removes"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Filter"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nFilter\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP Filter Introduction\nPHP filters are used to validate and filter data coming from insecure sources, \nlike user input.\nInstallation\nFrom PHP 5.2.0, the filter functions are enabled by default. There is no installation \nneeded to use these functions.\nRuntime Configurations\nThe behavior of these functions is affected by settings in php.ini:\nName\nDescription\nDefault\nChangeable\nfilter.default\nFilter all $_GET, $_POST, $_COOKIE, $_REQUEST and $_SERVER data by this filter. Accepts the name of the filter you like to use by default. See the filter list for the list of the filter names\n\"unsafe_raw\"\nPHP_INI_PERDIR\nfilter.default_flags\nDefault flags to apply when the default filter is set. This is set to FILTER_FLAG_NO_ENCODE_QUOTES by default for backwards compatibility reasons\nNULL\nPHP_INI_PERDIR\nPHP Filter Functions\nFunction\nDescription\nfilter_has_var()\nChecks whether a variable of a specified input type exist\nfilter_id()\nReturns the filter ID of a specified filter name\nfilter_input()\nGets an external variable (e.g. from form input) and optionally filters it\nfilter_input_array()\nGets external variables (e.g. from form input) and optionally filters them\nfilter_list()\nReturns a list of all supported filter names\nfilter_var()\nFilters a variable with a specified filter\nfilter_var_array()\nGets multiple variables and filter them\nPHP Predefined Filter Constants\nConstant\nDescription\nINPUT_POST\nPOST variables\nINPUT_GET\nGET variables\nINPUT_COOKIE\nCOOKIE variables\nINPUT_ENV\nENV variables\nINPUT_SERVER\nSERVER variables\nFILTER_DEFAULT\nDo nothing, optionally strip/encode special characters. Equivalent to \n  FILTER_UNSAFE_RAW\nFILTER_FLAG_NONE\nAllows no flags\nFILTER_FLAG_ALLOW_OCTAL\nOnly for inputs that starts with a zero (0) as octal numbers. This only \n  allows the succeeding digits to be 0-7\nFILTER_FLAG_ALLOW_HEX\nOnly for inputs that starts with 0x/0X as hexadecimal numbers. This only \n  allows succeeding characters to be a-fA-F0-9\nFILTER_FLAG_STRIP_LOW\nStrip characters with ASCII value lower than 32\nFILTER_FLAG_STRIP_HIGH\nStrip characters with ASCII value greater than 127\nFILTER_FLAG_ENCODE_LOW\nEncode characters with ASCII value lower than 32\nFILTER_FLAG_ENCODE_HIGH\nEncode characters with ASCII value greater than 127\nFILTER_FLAG_ENCODE_AMP\nEncode &\nFILTER_FLAG_NO_ENCODE_QUOTES\nDo not encode ' and \"\nFILTER_FLAG_EMPTY_STRING_NULL\nNot in use\nFILTER_FLAG_ALLOW_FRACTION\nAllows a period (.) as a fractional separator in numbers\nFILTER_FLAG_ALLOW_THOUSAND\nAllows a comma (,) as a thousands separator in numbers\nFILTER_FLAG_ALLOW_SCIENTIFIC\nAllows an e or E for scientific notation in numbers\nFILTER_FLAG_PATH_REQUIRED\nThe URL must contain a path part\nFILTER_FLAG_QUERY_REQUIRED\nThe URL must contain a query string\nFILTER_FLAG_IPV4\nAllows the IP address to be in IPv4 format\nFILTER_FLAG_IPV6\nAllows the IP address to be in IPv6 format\nFILTER_FLAG_NO_RES_RANGE\nFails validation for the reserved IPv4 ranges: 0.0.0.0/8, 169.254.0.0/16, \n  127.0.0.0/8 and 240.0.0.0/4, and for the reserved IPv6 ranges: ::1/128, \n  ::/128, ::ffff:0:0/96 and fe80::/10\nFILTER_FLAG_NO_PRIV_RANGE\nFails validation for the private IPv4 ranges: 10.0.0.0/8, 172.16.0.0/12 \n  and 192.168.0.0/16, and for the IPv6 addresses starting with FD or FC\nFILTER_FLAG_EMAIL_UNICODE\nAllows the local part of the email address to contain Unicode characters\nFILTER_REQUIRE_SCALAR\nThe value must be a scalar\nFILTER_REQUIRE_ARRAY\nThe value must be an array\nFILTER_FORCE_ARRAY\nTreats a scalar value as array with the scalar value as only element\nFILTER_NULL_ON_FAILURE\nReturn NULL on failure for unrecognized boolean values\nFILTER_VALIDATE_BOOLEAN\nValidates a boolean\nFILTER_VALIDATE_EMAIL\nValidates value as a valid e-mail address\nFILTER_VALIDATE_FLOAT\nValidates value as float\nFILTER_VALIDATE_INT\nValidates value as integer\nFILTER_VALIDATE_IP\nValidates value as IP address\nFILTER_VALIDATE_MAC\nValidates value as MAC address\nFILTER_VALIDATE_REGEXP\nValidates value against a regular expression\nFILTER_VALIDATE_URL\nValidates value as URL\nFILTER_SANITIZE_ADD_SLASHES\nAdded as a replacement for FILTER_SANITIZE_MAGIC_QUOTES\nFILTER_SANITIZE_EMAIL\nRemoves all illegal characters from an e-mail address\nFILTER_SANITIZE_ENCODED\nRemoves/Encodes special characters\nFILTER_SANITIZE_MAGIC_QUOTES\nApply addslashes().\nDeprecated in PHP 7.3.0 and removed in PHP 8.0.0\nFILTER_SANITIZE_NUMBER_FLOAT\nRemove all characters, except digits, +- signs, and optionally .,eE\nFILTER_SANITIZE_NUMBER_INT\nRemoves all characters except digits and + - signs\nFILTER_SANITIZE_SPECIAL_CHARS\nRemoves special characters\nFILTER_SANITIZE_STRING\nRemoves tags/special characters from a string.\nDeprecated in PHP 8.1.0\nFILTER_SANITIZE_STRIPPED\nAlias of FILTER_SANITIZE_STRING.\nDeprecated in PHP 8.1.0\nFILTER_SANITIZE_URL\nRemoves all illegal character from a URL\nFILTER_UNSAFE_RAW\nDo nothing, optionally strip/encode special characters\nFILTER_CALLBACK\nCall a user-defined function to filter data\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "fa0a4f54-5bf3-4c07-b887-4d619f5e6e83",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "2f69b565-67ab-48b2-81b2-aa88c913fd7c",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "f50864f5-bdc0-4e95-836d-93413c43fe68",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PHP\nFilter\nFunctions\n\nPHP Filter Introduction\nPHP filters?",
      "options": [
        "used to validate and filter data coming from insecure sources",
        "None of the above.",
        "None of the above.",
        "enabled by default"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of PHP\nFilter\nFunctions\n\nPHP Filter Introduction\nPHP filters is 'used to validate and filter data coming from insecure sources'."
    },
    {
      "question": "What is the filter functions?",
      "options": [
        "enabled by default",
        "used to validate and filter data coming from insecure sources",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the filter functions is 'enabled by default'."
    }
  ],
  "summary": "This tutorial covers PHPFilterFunctions concepts and techniques. You'll learn how to use PHPFilterFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPFilterFunctions and how to apply it in your projects."
}