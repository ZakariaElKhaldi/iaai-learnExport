{
  "id": "7bfd0f54-fe10-465d-86ef-8f5a14197dc4",
  "title": "PHPextract()Function",
  "slug": "phpextractfunction",
  "metadata": {
    "description": "Learn about PHPextract()Function with clear explanations and practical examples.",
    "keywords": [
      "c",
      "variable",
      "variables",
      "array",
      "prefix",
      "values",
      "extract",
      "function",
      "names",
      "parameter",
      "symbol"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "extract()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nextract()\nFunction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nAssign the values \"Cat\", \"Dog\" and \"Horse\" to the variables $a, $b and $c:\n<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\",\"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array);\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";\n?>\n\nDefinition and Usage\nThe extract() function imports variables into the local symbol table from an \narray.\nThis function uses array keys as variable names and values as variable \nvalues. For each element it will create a variable in the current symbol table.\nThis function returns the number of variables extracted on success.\nSyntax\nextract(\narray, extract_rules, prefix\n)\nParameter Values\nParameter\nDescription\narray\nRequired. Specifies the array to use\nextract_rules\nOptional. The extract() function checks for invalid variable names and collisions with existing variable names. This parameter specifies how invalid and colliding names are treated.\nPossible values:\nEXTR_OVERWRITE - Default. On collision, the existing variable is  overwritten\nEXTR_SKIP - On collision, the existing variable is not overwritten\nEXTR_PREFIX_SAME - On collision, the variable name will be given a  prefix\nEXTR_PREFIX_ALL - All variable names will be given a prefix\nEXTR_PREFIX_INVALID - Only invalid or numeric variable names will be  given a prefix\nEXTR_IF_EXISTS - Only overwrite existing variables in the current  symbol table, otherwise do nothing\nEXTR_PREFIX_IF_EXISTS - Only add prefix to variables if the same  variable exists in the current symbol table\nEXTR_REFS - Extracts variables as references. The imported variables  are still referencing the values of the array parameter\nprefix\nOptional. If EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS are used in the extract_rules parameter, a specified prefix is required.\nThis parameter specifies the prefix. The prefix is automatically separated from the array key by an underscore character.\nTechnical Details\nReturn Value:\nReturns\u00a0 the number of variables extracted on success\nPHP Version:\n4+\nPHP Changelog:\nThe\nextract_rules\nvalue EXTR_REFS was added in PHP 4.3.\nThe\nextract_rules\nvalues EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS were added in PHP 4.2.\nAs of PHP 4.0.5, this function now returns the number of variables extracted.\nThe\nextract_rules\nvalue EXTR_PREFIX_INVALID was added in PHP 4.0.5.\nAs of PHP 4.0.5, the\nextract_rules\nvalue EXTR_PREFIX_ALL now includes numeric variables as well.\nMore Examples\nExample\nUsing all parameters:\n<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array, EXTR_PREFIX_SAME, \"dup\");\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\",\"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array);\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array, EXTR_PREFIX_SAME, \"dup\");\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\",\"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array);\n# TODO: Complete this line\n?>",
      "solution": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\",\"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array);\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\n# TODO: Complete this line\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>",
      "solution": "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array, EXTR_PREFIX_SAME, \"dup\");\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "c36acc96-bcae-45e3-a37f-381758afc5f5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cdcdc6ff-ce58-4cac-89ad-4909eee84170",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0e2535db-f9b8-4e8e-bd36-da83e84ecfeb",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This parameter specifies how invalid and colliding names?",
      "options": [
        "overwritten\nEXTR_SKIP - On collision",
        "None of the above.",
        "treated",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This parameter specifies how invalid and colliding names is 'treated'."
    },
    {
      "question": "What is the existing variable?",
      "options": [
        "overwritten\nEXTR_SKIP - On collision",
        "None of the above.",
        "treated",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the existing variable is 'overwritten\nEXTR_SKIP - On collision'."
    }
  ],
  "summary": "This tutorial covers PHPextract()Function concepts and techniques. You'll learn how to use PHPextract()Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPextract()Function and how to apply it in your projects."
}