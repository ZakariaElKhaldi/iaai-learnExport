{
  "id": "455529c8-f19f-4a9f-82c0-ee0f25f71ca7",
  "title": "PHPComments",
  "slug": "phpcomments",
  "metadata": {
    "description": "Learn about PHPComments with clear explanations and practical examples.",
    "keywords": [
      "comments",
      "line",
      "code",
      "comment",
      "single",
      "welcome",
      "example",
      "executed",
      "message",
      "echo"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Comments"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "PHP\nComments\n\nComments in PHP\nA comment in PHP code is a line that is not executed as a part of the \nprogram",
      "content": ". Its only purpose is to be read by someone who is looking at the code.\nComments can be used to:\nLet others understand your code\nRemind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code\nLeave out some parts of your code\nPHP supports several ways of commenting:\nExample\nSyntax for comments in PHP code:\n// This is a single-line comment",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# This is also a single-line comment\n\n/* This is a\nmulti-line comment */\n\nSingle Line Comments\nSingle line comments start with\n//\n.\nAny text between\n//\nand the end of the line will be ignored (will not be executed).\nYou can also use\n#\nfor single line comments,\nbut in this tutorial we will use\n//\n.\nThe following examples uses a single-line comment as an explanation:\nExample\nA comment before the code:\n// Outputs a welcome message:\necho \"Welcome Home!\";\n\nExample\nA comment at the end of a line:\necho \"Welcome Home!\"; // Outputs a welcome message\n\nComments to Ignore Code\nWe can use comments to prevent code lines from being executed:\nExample\nDo not display a welcome message:\n// echo \"Welcome Home!\";\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "80f58c82-b54c-4eb8-9eb8-f4117f1dba9f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "eedc0a7a-9342-43c8-8b35-e19e427f91f0",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d11e2307-ebb0-4992-9aeb-e280f2f4392c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PHP\nComments\n\nComments in PHP\nA comment in PHP code is a line that?",
      "options": [
        "None of the above.",
        "None of the above.",
        "not executed as a part of the \nprogram",
        "looking at the code"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of PHP\nComments\n\nComments in PHP\nA comment in PHP code is a line that is 'not executed as a part of the \nprogram'."
    },
    {
      "question": "What is Its only purpose is to be read by someone who?",
      "options": [
        "not executed as a part of the \nprogram",
        "None of the above.",
        "looking at the code",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Its only purpose is to be read by someone who is 'looking at the code'."
    }
  ],
  "summary": "This tutorial covers PHPComments concepts and techniques. You'll learn how to use PHPComments effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPComments and how to apply it in your projects."
}