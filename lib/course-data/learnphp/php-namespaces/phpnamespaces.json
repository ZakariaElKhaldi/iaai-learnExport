{
  "id": "c850892e-deb0-4668-913f-a4c2d9691fdf",
  "title": "PHPNamespaces",
  "slug": "phpnamespaces",
  "metadata": {
    "description": "Learn about PHPNamespaces with clear explanations and practical examples.",
    "keywords": [
      "c",
      "namespace",
      "table",
      "html",
      "classes",
      "namespaces",
      "class",
      "example",
      "code",
      "alias",
      "used"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Namespaces"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nNamespaces",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP Namespaces\nNamespaces are qualifiers that solve two different problems:\nThey allow for better organization by grouping classes that work together to perform\na task\nThey allow the same name to be used for more than one class\nFor example, you may have a set of classes which describe an HTML table, such as Table, Row and\nCell while also having another set of classes to describe furniture, such as Table,\nChair and Bed. Namespaces can be used to organize the classes into two different\ngroups while also preventing the two classes Table and Table from being mixed up.\nDeclaring a Namespace\nNamespaces are declared at the beginning of a file using the\nnamespace\nkeyword:\nSyntax\nDeclare a namespace called Html:\n<?php\nnamespace Html;\n?>\nNote:\nA\nnamespace\ndeclaration must be the first thing in the PHP file. The following code\nwould be invalid:\n<?php\necho \"Hello World!\";\nnamespace Html;\n...\n?>\nConstants, classes and functions declared in this file will belong to the\nHtml\nnamespace:\nExample\nCreate a Table class in the Html namespace:\n<?php\nnamespace Html;\nclass Table {\npublic $title = \"\";\npublic \n    $numRows = 0;\npublic function message() {\necho \"<p>Table \n    '{$this->title}' has {$this->numRows} rows.</p>\";\n}\n}\n$table = new \n    Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n$table->message();\n?>\n</body>\n</html>\n\nFor further organization, it is possible to have nested namespaces:\nSyntax\nDeclare a namespace called Html inside a namespace called Code:\n<?php\nnamespace Code\\Html;\n?>\nUsing Namespaces\nAny code that follows a\nnamespace\ndeclaration is operating inside the namespace, so\nclasses that belong to the namespace can be instantiated without any qualifiers. To access\nclasses from outside a namespace, the class needs to have the namespace attached\nto it.\nExample\nUse classes from the Html namespace:\n<?php\n$table = new Html\\Table();\n$row = new Html\\Row();\n?>\n\nWhen many classes from the same namespace are being used at the same time, it is\neasier to use the\nnamespace\nkeyword:\nExample\nUse classes from the Html namespace without the need for the Html\\qualifier:\n<?php\nnamespace Html;\n$table = new Table();\n$row = new Row();\n?>\n\nNamespace Alias\nIt can be useful to give a namespace or class an alias to make it easier to write. This is\ndone with the\nuse\nkeyword:\nExample\nGive a namespace an alias:\n<?php\nuse Html as H;\n$table = new H\\Table();\n?>\n\nExample\nGive a class an alias:\n<?php\nuse Html\\Table as \n    T;\n$table = new T();\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\nnamespace Html;\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\necho \"Hello World!\";\nnamespace Html;\n...\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nnamespace Html;\nclass Table {\npublic $title = \"\";\npublic \n    $numRows = 0;\npublic function message() {\necho \"<p>Table \n    '{$this->title}' has {$this->numRows} rows.</p>\";\n}\n}\n$table = new \n    Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n$table->message();\n?>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 6,
      "code": "<?php\nnamespace Code\\Html;\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\n$table = new Html\\Table();\n$row = new Html\\Row();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<?php\nnamespace Html;\n$table = new Table();\n$row = new Row();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<?php\nuse Html as H;\n$table = new H\\Table();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<?php\nuse Html\\Table as \n    T;\n$table = new T();\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\n?>",
      "solution": "<?php\nnamespace Html;\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\nnamespace Html;\n...\n?>",
      "solution": "<?php\necho \"Hello World!\";\nnamespace Html;\n...\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "42affb45-f0d0-4d27-8fe3-80333f0cc5fd",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4b272d37-2612-4625-ae88-f95c36474215",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "465f8a9e-e97e-472a-bd55-f22d1129ab98",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PHP\nNamespaces\n\nPHP Namespaces\nNamespaces?",
      "options": [
        "declared at the beginning of a file using the\nnamespace\nkeyword:\nSyntax\nDeclare a namespace called Html:\n<",
        "qualifiers that solve two different problems:\nThey allow for better organization by grouping classes that work together to perform\na task\nThey allow the same name to be used for more than one class\nFor example",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of PHP\nNamespaces\n\nPHP Namespaces\nNamespaces is 'qualifiers that solve two different problems:\nThey allow for better organization by grouping classes that work together to perform\na task\nThey allow the same name to be used for more than one class\nFor example'."
    },
    {
      "question": "What is Declaring a Namespace\nNamespaces?",
      "options": [
        "qualifiers that solve two different problems:\nThey allow for better organization by grouping classes that work together to perform\na task\nThey allow the same name to be used for more than one class\nFor example",
        "None of the above.",
        "None of the above.",
        "declared at the beginning of a file using the\nnamespace\nkeyword:\nSyntax\nDeclare a namespace called Html:\n<"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Declaring a Namespace\nNamespaces is 'declared at the beginning of a file using the\nnamespace\nkeyword:\nSyntax\nDeclare a namespace called Html:\n<'."
    }
  ],
  "summary": "This tutorial covers PHPNamespaces concepts and techniques. You'll learn how to use PHPNamespaces effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPNamespaces and how to apply it in your projects."
}