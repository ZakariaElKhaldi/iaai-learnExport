{
  "id": "f0b24a90-e69b-4a93-ad88-7b13a8cb73e9",
  "title": "PHPRegular ExpressionFunctions",
  "slug": "phpregular-expressionfunctions",
  "metadata": {
    "description": "Learn about PHPRegular ExpressionFunctions with clear explanations and practical examples.",
    "keywords": [
      "expression",
      "string",
      "regular",
      "matches",
      "find",
      "search",
      "array",
      "patterns",
      "description",
      "returns"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP RegEx"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nRegular Expression\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP Regular Expression Introduction\nRegular expressions allow you to search for and replace patterns in strings.\nInstallation\nThe PHP regular expression functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThese settings in php.ini can be used to limit the amount time or resources used when\nevaluating regular expressions.\nName\nDefault\nDescription\nChangeable\npcre.backtrack_limit\n\"1000000\"\nThe maximum number of backtracks that the regular expression engine is allowed to do while evaluating an expression. (available since PHP 5.2)\nPHP_INI_ALL\npcre.recursion_limit\n\"100000\"\nThe maximum recursion depth that the regular expression engine is permitted to reach while evaluating an expression. (available since PHP 5.2)\nPHP_INI_ALL\npcre.jit\n\"1\"\nWhen set to \"1\" this enables PCRE's (Perl-Compatible Regular Expressions) just-in-time compilation. (available since PHP 7.0)\nPHP_INI_ALL\nPHP Regular Expression Functions\nFunction\nDescription\npreg_filter()\nReturns a string or an array with pattern matches replaced, but only if matches were found\npreg_grep()\nReturns an array consisting only of elements from the input array which matched the pattern\npreg_last_error()\nReturns an error code indicating the reason that the most recent regular expression call failed\npreg_match()\nFinds the first match of a pattern in a string\npreg_match_all()\nFinds all matches of a pattern in a string\npreg_replace()\nReturns a string where matches of a pattern (or an array of patterns) are replaced with a substring (or an array of substrings) in a given string\npreg_replace_callback()\nGiven an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback\npreg_replace_callback_array()\nGiven an array associating expressions with callbacks, returns a string where all matches of each expression are replaced with the substring returned by the callback\npreg_split()\nBreaks a string into an array using matches of a regular expression as separators\npreg_quote()\nEscapes characters that have a special meaning in regular expressions by putting a backslash in front of them\nRegular Expression Modifiers\nModifiers can change how a search is performed.\nModifier\nDescription\ni\nPerforms a case-insensitive search\nm\nPerforms a multiline search (patterns that search for the\nbeginning or end of a string will match the beginning or end\nof each line)\nu\nEnables correct matching of UTF-8 encoded patterns\nRegular Expression Patterns\nBrackets are used to find a range of characters:\nExpression\nDescription\n[abc]\nFind one character from the options between the brackets\n[^abc]\nFind any character NOT between the brackets\n[0-9]\nFind one character from the range 0 to 9\nMetacharacters\nMetacharacters are characters with a special meaning:\nMetacharacter\nDescription\n|\nFind a match for any one of the patterns separated by | as in: cat|dog|fish\n.\nFind just one instance of any character\n^\nFinds a match as the beginning of a string as in: ^Hello\n$\nFinds a match at the end of the string as in: World$\n\\d\nFind a digit\n\\s\nFind a whitespace character\n\\b\nFind a match at the beginning of a word like this: \\bWORD, or at the end of a word like this: WORD\\b\n\\uxxxx\nFind the Unicode character specified by the hexadecimal number xxxx\nQuantifiers\nQuantifiers define quantities:\nQuantifier\nDescription\nn+\nMatches any string that contains at least one\nn\nn*\nMatches any string that contains zero or more occurrences of\nn\nn?\nMatches any string that contains zero or one occurrences of\nn\nn{x}\nMatches any string that contains a sequence of\nX\nn\n's\nn{x,y}\nMatches any string that contains a sequence of X to Y\nn\n's\nn{x,}\nMatches any string that contains a sequence of at least X\nn\n's\nNote:\nIf your expression needs to search for one of the special characters you can use a\nbackslash ( \\ ) to escape them.\nFor example, to search for one or more question marks you can use the following\nexpression: $pattern = '/\\?+/';\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "de897dea-774b-46d9-b773-3edf7f311a4a",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "09ed752f-8328-4779-b078-a56d5c518007",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "fc9df0f7-f780-4a03-a725-aa0a0033b7b6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Installation\nThe PHP regular expression functions?",
      "options": [
        "part of the PHP core",
        "None of the above.",
        "required to use these functions",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Installation\nThe PHP regular expression functions is 'part of the PHP core'."
    },
    {
      "question": "What is No installation?",
      "options": [
        "part of the PHP core",
        "None of the above.",
        "required to use these functions",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of No installation is 'required to use these functions'."
    }
  ],
  "summary": "This tutorial covers PHPRegular ExpressionFunctions concepts and techniques. You'll learn how to use PHPRegular ExpressionFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPRegular ExpressionFunctions and how to apply it in your projects."
}