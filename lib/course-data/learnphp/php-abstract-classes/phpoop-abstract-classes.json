{
  "id": "6f3d5c8b-fe48-444d-b75c-0da2b665c3a5",
  "title": "PHPOOP - Abstract Classes",
  "slug": "phpoop-abstract-classes",
  "metadata": {
    "description": "Learn about PHPOOP - Abstract Classes with clear explanations and practical examples.",
    "keywords": [
      "c",
      "class",
      "abstract",
      "name",
      "method",
      "public",
      "child",
      "function",
      "echo",
      "classes",
      "defined"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Abstract Classes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Abstract Classes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - What are Abstract Classes and Methods?\nAbstract classes and methods are when the parent class has a named method, \nbut \nneed its child class(es) to fill out the tasks.\nAn abstract class is a class that contains at least one abstract method. An \nabstract method is a method that is declared, but not implemented in the code.\nAn abstract class or method is defined with the\nabstract\nkeyword:\nSyntax\n<?php\nabstract class \n    ParentClass {\nabstract public function someMethod1();\nabstract public function someMethod2($name, $color);\nabstract \n    public function someMethod3() : string;\n}\n?>\nWhen inheriting from an abstract class, the child class method must be \ndefined with the same name, and the same or a less restricted access modifier. \nSo, if the abstract method is defined as protected, the child class method must \nbe defined as either protected or public, but not private. Also, the type and number of \nrequired arguments must be the same. However, the child classes may have optional \narguments in addition.\nSo, when a child class is inherited from an abstract class, we have the following rules:\nThe child class method must be defined with the same name and it redeclares the parent abstract method\nThe child class method must be defined with the same or a less restricted \n  access modifier\nThe number of required arguments must be the same. However, the child class \n  may have optional \narguments in addition\nLet's look at an example:\nExample\n<?php\n// Parent class\nabstract class Car {\npublic \n    $name;\npublic \n    function __construct($name) {\n$this->name = $name;\n}\nabstract public function intro() : string;\n}\n// Child classes\nclass \n    Audi extends Car {\npublic \n    function intro() : string {\nreturn \"Choose German \n    quality! I'm an $this->name!\";\n}\n}\nclass \n    Volvo extends Car {\npublic \n    function intro() : string {\nreturn \"Proud to be \n    Swedish! I'm a $this->name!\";\n}\n}\nclass \n    Citroen extends Car {\npublic \n    function intro() : string {\nreturn \"French \n    extravagance! I'm a $this->name!\";\n}\n}\n// Create objects from the child classes\n$audi = new \n    audi(\"Audi\");\necho $audi->intro();\necho \"<br>\";\n$volvo = new \n    volvo(\"Volvo\");\necho $volvo->intro();\necho \"<br>\";\n$citroen = new citroen(\"Citroen\");\necho $citroen->intro();\n?>\n\nExample Explained\nThe Audi, Volvo, and Citroen classes are inherited from the Car class. This means that the \nAudi, Volvo, and Citroen classes can use the public $name \nproperty as well as the public __construct() method from the \nCar class because of inheritance.\nBut, intro() is an abstract method that should be defined in all the child \nclasses and they should return a string.\nPHP - More Abstract Class Examples\nLet's look at another example where the abstract method has an argument:\nExample\n<?php\nabstract class ParentClass {\n// Abstract method \n    with an argument\nabstract protected \n    function prefixName($name);\n}\nclass ChildClass extends ParentClass {\npublic function prefixName($name) {\nif ($name == \"John Doe\") {\n$prefix = \"Mr.\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \n    \"Mrs.\";\n} else {\n$prefix = \"\";\n}\nreturn \n    \"{$prefix} {$name}\";\n}\n}\n$class = new ChildClass;\necho $class->prefixName(\"John \n    Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>\n\nLet's look at another example where the abstract method has an argument, and \nthe child class has two optional arguments that are not defined in the parent's \n    abstract method:\nExample\n<?php\nabstract class ParentClass {\n// Abstract method \n    with an argument\nabstract protected \n    function prefixName($name);\n}\nclass ChildClass extends ParentClass {\n// The child class may define optional arguments that are not in the parent's \n    abstract method\npublic function prefixName($name, $separator = \".\", \n    $greet = \"Dear\") {\nif ($name == \"John Doe\") {\n$prefix = \"Mr\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \n    \"Mrs\";\n} else {\n$prefix = \"\";\n}\nreturn \n    \"{$greet} {$prefix}{$separator} {$name}\";\n}\n}\n$class = new ChildClass;\necho $class->prefixName(\"John \n    Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\nabstract class \n    ParentClass {\nabstract public function someMethod1();\nabstract public function someMethod2($name, $color);\nabstract \n    public function someMethod3() : string;\n}\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\n// Parent class\nabstract class Car {\npublic \n    $name;\npublic \n    function __construct($name) {\n$this->name = $name;\n}\nabstract public function intro() : string;\n}\n// Child classes\nclass \n    Audi extends Car {\npublic \n    function intro() : string {\nreturn \"Choose German \n    quality! I'm an $this->name!\";\n}\n}\nclass \n    Volvo extends Car {\npublic \n    function intro() : string {\nreturn \"Proud to be \n    Swedish! I'm a $this->name!\";\n}\n}\nclass \n    Citroen extends Car {\npublic \n    function intro() : string {\nreturn \"French \n    extravagance! I'm a $this->name!\";\n}\n}\n// Create objects from the child classes\n$audi = new \n    audi(\"Audi\");\necho $audi->intro();\necho \"<br>\";\n$volvo = new \n    volvo(\"Volvo\");\necho $volvo->intro();\necho \"<br>\";\n$citroen = new citroen(\"Citroen\");\necho $citroen->intro();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nabstract class ParentClass {\n// Abstract method \n    with an argument\nabstract protected \n    function prefixName($name);\n}\nclass ChildClass extends ParentClass {\npublic function prefixName($name) {\nif ($name == \"John Doe\") {\n$prefix = \"Mr.\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \n    \"Mrs.\";\n} else {\n$prefix = \"\";\n}\nreturn \n    \"{$prefix} {$name}\";\n}\n}\n$class = new ChildClass;\necho $class->prefixName(\"John \n    Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nabstract class ParentClass {\n// Abstract method \n    with an argument\nabstract protected \n    function prefixName($name);\n}\nclass ChildClass extends ParentClass {\n// The child class may define optional arguments that are not in the parent's \n    abstract method\npublic function prefixName($name, $separator = \".\", \n    $greet = \"Dear\") {\nif ($name == \"John Doe\") {\n$prefix = \"Mr\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \n    \"Mrs\";\n} else {\n$prefix = \"\";\n}\nreturn \n    \"{$greet} {$prefix}{$separator} {$name}\";\n}\n}\n$class = new ChildClass;\necho $class->prefixName(\"John \n    Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nabstract class \n    ParentClass {\nabstract public function someMethod1();\nabstract public function someMethod2($name, $color);\n# TODO: Complete this line\n    public function someMethod3() : string;\n}\n?>",
      "solution": "<?php\nabstract class \n    ParentClass {\nabstract public function someMethod1();\nabstract public function someMethod2($name, $color);\nabstract \n    public function someMethod3() : string;\n}\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n// Parent class\nabstract class Car {\npublic \n    $name;\npublic \n    function __construct($name) {\n$this->name = $name;\n}\nabstract public function intro() : string;\n}\n// Child classes\nclass \n    Audi extends Car {\npublic \n    function intro() : string {\nreturn \"Choose German \n    quality! I'm an $this->name!\";\n}\n}\nclass \n    Volvo extends Car {\npublic \n    function intro() : string {\nreturn \"Proud to be \n    Swedish! I'm a $this->name!\";\n}\n}\nclass \n    Citroen extends Car {\npublic \n    function intro() : string {\nreturn \"French \n    extravagance! I'm a $this->name!\";\n}\n}\n# TODO: Complete this line\n$audi = new \n    audi(\"Audi\");\necho $audi->intro();\necho \"<br>\";\n$volvo = new \n    volvo(\"Volvo\");\necho $volvo->intro();\necho \"<br>\";\n$citroen = new citroen(\"Citroen\");\necho $citroen->intro();\n?>",
      "solution": "<?php\n// Parent class\nabstract class Car {\npublic \n    $name;\npublic \n    function __construct($name) {\n$this->name = $name;\n}\nabstract public function intro() : string;\n}\n// Child classes\nclass \n    Audi extends Car {\npublic \n    function intro() : string {\nreturn \"Choose German \n    quality! I'm an $this->name!\";\n}\n}\nclass \n    Volvo extends Car {\npublic \n    function intro() : string {\nreturn \"Proud to be \n    Swedish! I'm a $this->name!\";\n}\n}\nclass \n    Citroen extends Car {\npublic \n    function intro() : string {\nreturn \"French \n    extravagance! I'm a $this->name!\";\n}\n}\n// Create objects from the child classes\n$audi = new \n    audi(\"Audi\");\necho $audi->intro();\necho \"<br>\";\n$volvo = new \n    volvo(\"Volvo\");\necho $volvo->intro();\necho \"<br>\";\n$citroen = new citroen(\"Citroen\");\necho $citroen->intro();\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "66e4db7e-686f-47fb-bd0f-80c2f07bc84c",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "73ef7c19-a6b1-461d-ade5-fa2218f3e0ee",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "ec8bab23-f191-4d53-841e-0923ef9eb1b2",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Abstract Classes and Methods",
        "when the parent class has a named method"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is 'Abstract Classes and Methods'."
    },
    {
      "question": "What is Abstract classes and methods?",
      "options": [
        "Abstract Classes and Methods",
        "None of the above.",
        "None of the above.",
        "when the parent class has a named method"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Abstract classes and methods is 'when the parent class has a named method'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Abstract Classes concepts and techniques. You'll learn how to use PHPOOP - Abstract Classes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Abstract Classes and how to apply it in your projects."
}