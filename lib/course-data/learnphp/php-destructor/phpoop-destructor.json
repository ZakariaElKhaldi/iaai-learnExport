{
  "id": "d3469fbc-6753-458e-9791-e2eb1a0e0186",
  "title": "PHPOOP - Destructor",
  "slug": "phpoop-destructor",
  "metadata": {
    "description": "Learn about PHPOOP - Destructor with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "name",
      "color",
      "fruit",
      "example",
      "public",
      "apple",
      "called",
      "script",
      "automatically"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Destructor"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Destructor",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - The __destruct Function\nA destructor is called when the object is destructed or the script is stopped \nor exited.\nIf you create a\n__destruct()\nfunction, PHP will automatically call this \nfunction at the end of the script.\nNotice that the destruct function starts with two underscores (__)!\nThe example below has a __construct() function that is automatically called \nwhen you create an object from a class, and a __destruct() function that is \nautomatically called at the end of the script:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name}.\";\n}\n}\n$apple = new Fruit(\"Apple\");\n?>\n\nAnother example:\nExample\n<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\n?>\n\nTip:\nAs constructors and destructors helps reducing the \namount of code, they are very useful!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name}.\";\n}\n}\n$apple = new Fruit(\"Apple\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name}.\";\n}\n}\n# TODO: Complete this line\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name}.\";\n}\n}\n$apple = new Fruit(\"Apple\");\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\n# TODO: Complete this line\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\n?>",
      "solution": "<?php\nclass Fruit {\npublic \n    $name;\npublic $color;\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name} \n    and the color is {$this->color}.\";\n}\n}\n$apple = new Fruit(\"Apple\", \"red\");\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "1fa27f16-c7f2-4860-b6cf-df99f3091853",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "93c78191-7c74-49d7-bb3e-9c1d3d2f6333",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f02dce71-ffcb-4ba8-9849-e227aac45174",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is destruct Function\nA destructor is called when the object is destructed or the script?",
      "options": [
        "automatically called \nwhen you create an object from a class",
        "None of the above.",
        "None of the above.",
        "stopped \nor exited"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of destruct Function\nA destructor is called when the object is destructed or the script is 'stopped \nor exited'."
    },
    {
      "question": "What is function that?",
      "options": [
        "automatically called \nwhen you create an object from a class",
        "None of the above.",
        "stopped \nor exited",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of function that is 'automatically called \nwhen you create an object from a class'."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Destructor concepts and techniques. You'll learn how to use PHPOOP - Destructor effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Destructor and how to apply it in your projects."
}