{
  "id": "89bbb29c-86b0-446f-ac5f-bc6ca657ed0f",
  "title": "PHPdo whileLoop",
  "slug": "phpdo-whileloop",
  "metadata": {
    "description": "Learn about PHPdo whileLoop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "condition",
      "example",
      "true",
      "echo",
      "statement",
      "stop",
      "continue",
      "code",
      "long"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Php Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "Do While Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\ndo while\nLoop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\ndo...while\nloop - Loops \nthrough a block of code once, and then repeats the loop as long as the specified \ncondition is true.\nThe PHP do...while Loop\nThe\ndo...while\nloop will always execute the block of code at least once, it \nwill then check the condition, and repeat the loop while the specified condition is true.\nExample\nPrint\n$i\nas long as\n$i\nis less than 6:\n$i = 1;\n\ndo {\n  echo $i;\n  $i++;\n} while ($i < 6);\n\nNote:\nIn a\ndo...while\nloop the condition is tested AFTER executing \nthe statements within the loop. This means that the\ndo...while\nloop will execute \nits statements at least once, even if the condition is false. See example below.\nLet us see what happens if we set the\n$i\nvariable to 8 instead of 1,\nbefore execute the same\ndo...while\nloop again:\nExample\nSet\n$i = 8\n, then print\n$i\nas long as\n$i\nis less than 6:\n$i = 8;\n\ndo {\n  echo $i;\n  $i++;\n} while ($i < 6);\n\nThe code will be executed once, even if the condition is never true.\nThe break Statement\nWith the\nbreak\nstatement we can stop the loop even if the condition is still true:\nExample\nStop the loop when\n$i\nis 3:\n$i = 1;\n\ndo {\n  if ($i == 3) break;\n  echo $i;\n  $i++;\n} while ($i < 6);\n\nThe continue Statement\nWith the\ncontinue\nstatement we can stop the current iteration, and continue with the \nExample\nStop, and jump to the \n$i\nis 3:\n$i = 0;\n\ndo {\n  $i++;\n  if ($i == 3) continue;\n  echo $i;\n} while ($i < 6);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "00686889-2416-4849-9052-46ebade01015",
      "title": "Php Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d52a7b7c-405f-465e-9104-936b1c161825",
      "title": "Php Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7e8e4699-f292-4508-a925-e0cb0cf56432",
      "title": "Php Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and then repeats the loop as long as the specified \ncondition?",
      "options": [
        "None of the above.",
        "true",
        "true",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and then repeats the loop as long as the specified \ncondition is 'true'."
    },
    {
      "question": "What is and repeat the loop while the specified condition?",
      "options": [
        "None of the above.",
        "true",
        "true",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and repeat the loop while the specified condition is 'true'."
    }
  ],
  "summary": "This tutorial covers PHPdo whileLoop concepts and techniques. You'll learn how to use PHPdo whileLoop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPdo whileLoop and how to apply it in your projects."
}