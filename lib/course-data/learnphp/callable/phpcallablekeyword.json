{
  "id": "cc742e58-c816-4299-a8d2-26648cb9d889",
  "title": "PHPcallableKeyword",
  "slug": "phpcallablekeyword",
  "metadata": {
    "description": "Learn about PHPcallableKeyword with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "printformatted",
      "callable",
      "hello",
      "world",
      "format",
      "echo",
      "return",
      "array",
      "describing"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "callable"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\ncallable\nKeyword",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nUse callable to require a callback function as an argument:\n<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\necho \"<br>\";\n}\nfunction exclaim($str) { return $str . \"!\"; }\nprintFormatted(\"exclaim\", \"Hello World\");\n?>\n\nDefinition and Usage\nThe\ncallable\nkeyword is used to force a function argument to be a reference to a\nfunction.\nA callable can be one of the following:\nAn anonymous function\nA string containing the name of a function\nAn array describing a static class method\nAn array describing an object method\nMore Examples\nExample\nUsing different types of callables:\n<?php\nfunction printFormatted(callable $format, $str) {\necho \n  $format($str);\necho \"<br>\";\n}\nclass MyClass {\npublic static function \n  ask($str) {\nreturn $str . \"?\";\n}\npublic function brackets($str) {\nreturn \"[$str]\";\n}\n}\n// An anonymous function\n$func = function($str) \n  { return substr($str, 0, 5); };\nprintFormatted($func , \"Hello World\");\n// A string containing the name of a function\nprintFormatted(\"strtoupper\", \"Hello World\");\n// An array describing a \n  static class method\nprintFormatted([\"MyClass\", \"ask\"], \"Hello World\");\n// An array describing an object method\n$obj = new MyClass();\nprintFormatted([$obj, \"brackets\"], \"Hello World\");\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\necho \"<br>\";\n}\nfunction exclaim($str) { return $str . \"!\"; }\nprintFormatted(\"exclaim\", \"Hello World\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<?php\nfunction printFormatted(callable $format, $str) {\necho \n  $format($str);\necho \"<br>\";\n}\nclass MyClass {\npublic static function \n  ask($str) {\nreturn $str . \"?\";\n}\npublic function brackets($str) {\nreturn \"[$str]\";\n}\n}\n// An anonymous function\n$func = function($str) \n  { return substr($str, 0, 5); };\nprintFormatted($func , \"Hello World\");\n// A string containing the name of a function\nprintFormatted(\"strtoupper\", \"Hello World\");\n// An array describing a \n  static class method\nprintFormatted([\"MyClass\", \"ask\"], \"Hello World\");\n// An array describing an object method\n$obj = new MyClass();\nprintFormatted([$obj, \"brackets\"], \"Hello World\");\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\n# TODO: Complete this line\n}\nfunction exclaim($str) { return $str . \"!\"; }\nprintFormatted(\"exclaim\", \"Hello World\");\n?>",
      "solution": "<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\necho \"<br>\";\n}\nfunction exclaim($str) { return $str . \"!\"; }\nprintFormatted(\"exclaim\", \"Hello World\");\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nfunction printFormatted(callable $format, $str) {\necho \n  $format($str);\necho \"<br>\";\n}\nclass MyClass {\npublic static function \n  ask($str) {\nreturn $str . \"?\";\n}\npublic function brackets($str) {\nreturn \"[$str]\";\n}\n}\n// An anonymous function\n$func = function($str) \n  { return substr($str, 0, 5); };\nprintFormatted($func , \"Hello World\");\n// A string containing the name of a function\nprintFormatted(\"strtoupper\", \"Hello World\");\n// An array describing a \n# TODO: Complete this line\nprintFormatted([\"MyClass\", \"ask\"], \"Hello World\");\n// An array describing an object method\n$obj = new MyClass();\nprintFormatted([$obj, \"brackets\"], \"Hello World\");\n?>",
      "solution": "<?php\nfunction printFormatted(callable $format, $str) {\necho \n  $format($str);\necho \"<br>\";\n}\nclass MyClass {\npublic static function \n  ask($str) {\nreturn $str . \"?\";\n}\npublic function brackets($str) {\nreturn \"[$str]\";\n}\n}\n// An anonymous function\n$func = function($str) \n  { return substr($str, 0, 5); };\nprintFormatted($func , \"Hello World\");\n// A string containing the name of a function\nprintFormatted(\"strtoupper\", \"Hello World\");\n// An array describing a \n  static class method\nprintFormatted([\"MyClass\", \"ask\"], \"Hello World\");\n// An array describing an object method\n$obj = new MyClass();\nprintFormatted([$obj, \"brackets\"], \"Hello World\");\n?>"
    }
  ],
  "related_topics": [
    {
      "id": "db0c9dc9-1289-49ad-9ad3-87fa22b59a23",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "43db391f-92ec-4c48-bace-61d360f2b287",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3f319276-6c25-446a-889f-91ff618dbce9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Definition and Usage\nThe\ncallable\nkeyword?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to force a function argument to be a reference to a\nfunction",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Definition and Usage\nThe\ncallable\nkeyword is 'used to force a function argument to be a reference to a\nfunction'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPcallableKeyword concepts and techniques. You'll learn how to use PHPcallableKeyword effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPcallableKeyword and how to apply it in your projects."
}