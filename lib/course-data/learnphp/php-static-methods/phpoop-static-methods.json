{
  "id": "bb8d8f97-ad73-4c14-8db6-b20a7b31efcb",
  "title": "PHPOOP - Static Methods",
  "slug": "phpoop-static-methods",
  "metadata": {
    "description": "Learn about PHPOOP - Static Methods with clear explanations and practical examples.",
    "keywords": [
      "c",
      "static",
      "class",
      "method",
      "public",
      "methods",
      "function",
      "welcome",
      "echo",
      "example",
      "hello"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPHP",
    "subcategory": "PHP Static Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PHP\nOOP - Static Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "PHP - Static Methods\nStatic methods can be called directly - without creating an instance of the \nclass first.\nStatic methods are declared with the\nstatic\nkeyword:\nSyntax\n<?php\nclass\nClassName\n{\npublic static function\nstaticMethod\n() {\necho \"Hello World!\";\n}\n}\n?>\nTo access a static method use the class name, double colon (::), and the \nmethod name:\nSyntax\nClassName\n::\nstaticMethod\n();\nLet's look at an example:\nExample\n<?php\nclass \n    greeting {\npublic static function \n    welcome() {\necho \"Hello World!\";\n}\n}\n// Call static method\ngreeting::welcome();\n?>\n\nExample Explained\nHere, we declare a static method: welcome(). Then, we call the static method \nby using the class name, double colon (::), and the method name (without \ncreating an instance of the class first).\nPHP - More on Static Methods\nA class can have both static and non-static methods. A static method can be \naccessed from a method in the same class using the\nself\nkeyword and double colon (::):\nExample\n<?php\nclass greeting {\npublic static function welcome() {\necho \"Hello World!\";\n}\npublic function __construct() \n    {\nself::welcome();\n}\n}\nnew \n    greeting();\n?>\n\nStatic methods can also be called from methods in other classes. To do this, \nthe static method should be\npublic\n:\nExample\n<?php\nclass \n    A {\npublic static function \n    welcome() {\necho \"Hello World!\";\n}\n}\nclass \n    B {\npublic function \n    message() {\nA::welcome();\n}\n}\n$obj = new B();\necho $obj -> \n    message();\n?>\n\nTo call a static method from a child class, use the\nparent\nkeyword inside the child class. Here, the static method can be\npublic\nor\nprotected\n.\nExample\n<?php\nclass domain {\nprotected static function \n    getWebsiteName() {\nreturn \".com\";\n}\n}\nclass domainW3 extends domain {\npublic $websiteName;\npublic function __construct() {\n$this->websiteName = \n    parent::getWebsiteName();\n}\n}\n$domainW3 = new domainW3;\necho $domainW3 -> websiteName;\n?>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "<?php\nclass\nClassName\n{\npublic static function\nstaticMethod\n() {\necho \"Hello World!\";\n}\n}\n?>",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 4,
      "code": "ClassName\n::\nstaticMethod\n();",
      "language": "html",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<?php\nclass \n    greeting {\npublic static function \n    welcome() {\necho \"Hello World!\";\n}\n}\n// Call static method\ngreeting::welcome();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<?php\nclass greeting {\npublic static function welcome() {\necho \"Hello World!\";\n}\npublic function __construct() \n    {\nself::welcome();\n}\n}\nnew \n    greeting();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<?php\nclass \n    A {\npublic static function \n    welcome() {\necho \"Hello World!\";\n}\n}\nclass \n    B {\npublic function \n    message() {\nA::welcome();\n}\n}\n$obj = new B();\necho $obj -> \n    message();\n?>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<?php\nclass domain {\nprotected static function \n    getWebsiteName() {\nreturn \"W3Schools.com\";\n}\n}\nclass domainW3 extends domain {\npublic $websiteName;\npublic function __construct() {\n$this->websiteName = \n    parent::getWebsiteName();\n}\n}\n$domainW3 = new domainW3;\necho $domainW3 -> websiteName;\n?>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<?php\nclass\nClassName\n{\npublic static function\nstaticMethod\n() {\necho \"Hello World!\";\n}\n}\n# TODO: Complete this line",
      "solution": "<?php\nclass\nClassName\n{\npublic static function\nstaticMethod\n() {\necho \"Hello World!\";\n}\n}\n?>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "ClassName\n::\nstaticMethod\n# TODO: Complete this line",
      "solution": "ClassName\n::\nstaticMethod\n();"
    }
  ],
  "related_topics": [
    {
      "id": "72a97cf1-3fb5-40ff-b4f0-a099da3340f5",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "58fcc05a-49b3-4b47-b21c-615020858b9a",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "2d5a7a18-d4ee-42aa-be7d-9493f166fdd0",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Static methods?",
      "options": [
        "None of the above.",
        "None of the above.",
        "declared with the\nstatic\nkeyword:\nSyntax\n<",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Static methods is 'declared with the\nstatic\nkeyword:\nSyntax\n<'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PHPOOP - Static Methods concepts and techniques. You'll learn how to use PHPOOP - Static Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PHPOOP - Static Methods and how to apply it in your projects."
}