{
  "title": "Accessibility Role, Name and Value",
  "url": "https://www.w3schools.com/accessibility/accessibility_role_name_value.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Accessibility Role, Name & Value",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Why",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "assistive technologies",
          "href": "https://www.w3schools.com/accessibility_keyboard_assistive_technology.php",
          "title": "Keyboard and Assistive Technologies Introduction"
        }
      ],
      "text": "User interface components need a role, a name and sometimes a value, to ensure that people using assistive technologies are able to use them. Examples of assistive technologies are screen readers, switch controls and speech recognition software.",
      "html": "<p>User interface components need a role, a name and sometimes a value, to ensure that people using <a href=\"accessibility_keyboard_assistive_technology.php\" title=\"Keyboard and Assistive Technologies Introduction\">assistive technologies</a> are able to use them. Examples of assistive technologies are screen readers, switch controls and speech recognition software.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are two cases where we can't use a good HTML element with built-in accessibility features, even though we want to:",
      "html": "<p>There are two cases where we can't use a good HTML element with built-in accessibility features, even though we want to:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In both cases, we need to build a custom control. An important accessibility principle is that a custom control needs a role, a name and sometimes a value.",
      "html": "<p>In both cases, we need to build a custom control. An important accessibility principle is that a custom control needs a role, a name and sometimes a value.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "How",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How do we make sure that custom components have a role, a name and a value?",
      "html": "<p>How do we make sure that custom components have a role, a name and a value?</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Role",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Button and Links",
          "href": "https://www.w3schools.com/accessibility_buttons_links.php",
          "title": "Buttons and Links"
        }
      ],
      "text": "In our last section, Button and Links , we learned that a dropdown menu button should be coded as a <button> . What if our framework does not allow us to do that? If it forces us to use an <a> instead? If the navigation component in the library we are using, is built with <a> s? Then we need to add a role.",
      "html": "<p>In our last section, <a href=\"accessibility_buttons_links.php\" title=\"Buttons and Links\">Button and Links</a>, we learned that a dropdown menu button should be coded as a <code>&lt;button&gt;</code>. What if our framework does not allow us to do that? If it forces us to use an <code>&lt;a&gt;</code> instead? If the navigation component in the library we are using, is built with <code>&lt;a&gt;</code>s? Then we need to add a role.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is done with the role=\"button\" attribute. Now users of assistive technologies can understand what the custom control is. A <button> has the role=\"button\" built in, so to write <button role=\"button\"> is redundant.",
      "html": "<p>This is done with the <code>role=\"button\"</code> attribute. Now users of assistive technologies can understand what the custom control is. A <code>&lt;button&gt;</code> has the <code>role=\"button\"</code> built in, so to write <code>&lt;button role=\"button\"&gt;</code> is redundant.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Name",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The custom control needs a name. In our example, the name is the content of the element, Company . As long as we have written our element like <div role=\"button\"> Company </div> , we have a good name. This is also known as the accessible name. The accessible name for our <div> is Company . Good.",
      "html": "<p>The custom control needs a name. In our example, the name is the content of the element, <em>Company</em>. As long as we have written our element like <code>&lt;div role=\"button\"&gt;Company&lt;/div&gt;</code>, we have a good name. This is also known as the accessible name. The accessible name for our <code>&lt;div&gt;</code> is <em>Company</em>. Good.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "That was too easy. In the following login form, we have several components \u2013 a logo, a heading, a label, a dropdown, an input and a button.",
      "html": "<p>That was too easy. In the following login form, we have several components \u2013 a logo, a heading, a label, a dropdown, an input and a button.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We are taking a closer look at the label, dropdown and the input. Visually there is no clear distinction between the dropdown and the input. The dropdown is coded with a <select> , which is a correct element for this case. However, it has no name:",
      "html": "<p>We are taking a closer look at the label, dropdown and the input. Visually there is no clear distinction between the dropdown and the input. The dropdown is coded with a <code>&lt;select&gt;</code>, which is a correct element for this case. However, it has no name:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "<select name=\"countryCode\">\u2026</select>",
      "html": "<p><code>&lt;select name=\"countryCode\"&gt;\u2026&lt;/select&gt;</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "name attribute",
          "href": "https://www.w3schools.com/tags/att_name.asp",
          "title": ""
        },
        {
          "text": "What is an accessible name?",
          "href": "https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/",
          "title": ""
        }
      ],
      "text": "It has a name attribute . This is not the same as an accessible name. This is confusing. The article What is an accessible name? explains this further. The name attribute is for computers. In a <form> , it is used as a reference when the data is submitted. This name countryCode will not help any users. It will not be picked up by assistive technologies.",
      "html": "<p>It has a <a href=\"https://www.w3schools.com/tags/att_name.asp\" rel=\"noopener\" target=\"_blank\">name attribute</a>. This is not the same as an accessible name. This is confusing. The article <a href=\"https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\" rel=\"noopener\" target=\"_blank\">What is an accessible name?</a> explains this further. The name attribute is for computers. In a <code>&lt;form&gt;</code>, it is used as a reference when the data is submitted. This name <code>countryCode</code> will not help any users. It will not be picked up by assistive technologies.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To give this <select> an accessible name, we must use the attribute aria-label. Normally, we would have connected a visual label to the <select> component. In this case, there is only one visual label for both the components.",
      "html": "<p>To give <em>this</em> <code>&lt;select&gt;</code> an accessible name, we must use the attribute aria-label. Normally, we would have connected a visual label to the <code>&lt;select&gt;</code> component. In this case, there is only one visual label for both the components.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is a <select> with an accessible name:",
      "html": "<p>This is a <code>&lt;select&gt;</code> with an accessible name:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<select aria-label=\"Country calling code\" name=\"countryCode\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " aria-label=\"Country calling code\" name=\"countryCode\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"Country calling code\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"countryCode\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</select>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "htmlHigh"
        ],
        "isNotranslate": false
      },
      "code": "<select aria-label=\"Country calling code\" name=\"countryCode\">\u2026</select>",
      "syntax_highlighting": [
        {
          "text": "<select aria-label=\"Country calling code\" name=\"countryCode\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " aria-label=\"Country calling code\" name=\"countryCode\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"Country calling code\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"countryCode\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</select>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code htmlHigh\"><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>select<span class=\"attributecolor\" style=\"color:green\"> aria-label<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"Country calling code\"</span> name<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"countryCode\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>\u2026<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/select<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<select aria-label=\"Country calling code\" name=\"countryCode\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " aria-label=\"Country calling code\" name=\"countryCode\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"Country calling code\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"countryCode\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</select>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "htmlHigh"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Value",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Some components have a value or a state. An accordion is open or closed. This information has to be accessible.",
      "html": "<p>Some components have a value or a state. An accordion is open or closed. This information has to be accessible.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An accordion is considered a custom component. There is no standard HTML element to use here. Each accordion header should be a <button> or role=\"button\" :",
      "html": "<p>An accordion is considered a custom component. There is no standard HTML element to use here. Each accordion header should be a <code>&lt;button&gt;</code> or <code>role=\"button\"</code>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "<div role=\"button\"> When do I get charged for a ride?</div>",
      "html": "<p><code>&lt;div role=\"button\"&gt;When do I get charged for a ride?&lt;/div&gt;</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Good. It has the role of a button. It also has a name, the content of the div. To give this button a value, we need to tell assistive technologies that it is closed. This is done with aria-expanded=\"false\" :",
      "html": "<p>Good. It has the role of a button. It also has a name, the content of the div. To give this button a value, we need to tell assistive technologies that it is closed. This is done with <code>aria-expanded=\"false\"</code>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "<div role=\"button\" aria-expanded=\"false\"> When do I get charged for a ride?</div>",
      "html": "<p><code>&lt;div role=\"button\" aria-expanded=\"false\"&gt;When do I get charged for a ride?&lt;/div&gt;</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now, our accordion header has a role, name and a value.",
      "html": "<p>Now, our accordion header has a role, name and a value.</p>"
    }
  ]
}