{
  "id": "f3c16ddc-d0dc-4c6b-8186-642a5993269a",
  "title": "AccessibilityVisual Focus",
  "slug": "accessibilityvisual-focus",
  "metadata": {
    "description": "Learn about AccessibilityVisual Focus with clear explanations and practical examples.",
    "keywords": [
      "focus",
      "visual",
      "outline",
      "color",
      "default",
      "keyboard",
      "styling",
      "palette",
      "users",
      "devices"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "Accessibility",
    "subcategory": "AG Visual Focus"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Accessibility\nVisual Focus",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Why\nVisual focus is crucial for all users that rely on keyboard and switch devices.\nWhat\nYou learned a bit about visual focus when we talked about\nlink states\n. Let us dig deeper. Visual focus is sometimes called\nkeyboard focus\nor\ntab focus\n. It is a visual indicator on a interactive component that has keyboard focus. The effect is often a border or outline.\nHow\nYou will learn not to remove the focus, and two options for styling the focus.\nDo not remove or hide the focus\nThis is the most important takeaway from this module. Whatever you do, do not remove the focus. This CSS line is ruining the accessibility for a lot of people:\noutline: 0;\nAnother common method for hiding the focus that the parent element is to small to show it, in combination with:\noverflow: hidden;\nMost browsers use the\noutline property\nto show the visual focus of an interactive element. We have two options. Leave it or customize it. Removing it is not an option.\nIn this example from Airbnb, the destination \u00c5lesund is the focused element. However, it is not possible to tell. The reason is that the parent\n<div>\nhas\noverflow: hidden;\nOption 1: Use the default\nThe easiest way to handle visual focus is to leave it for the browser to handle. This has many benefits:\nUsers that rely on the visual focus, recognize it easily.\nYou don't have to code anything.\nUsers don't get any surprises.\nRemoving the\noverflow: hidden;\nshowing the default focus styling. The browser Chrome in mobile mode is using an orange outline. You might think that keyboard focus is not important on mobile devices. That is a misconception. People use keyboards and other assistive technologies on mobile devices as well.\nOption 2: Customize the visual focus\nWe also have some challenges with the default focus.\nThe default styling may not align with the color palette of the site.\nThe default styling is similar to the color palette of the site.\nThe default styling is not visible enough in all browsers.\nThe travel site Momondo has a vivid color palette. They can pick a color from their palette to use as the visual focus.\nThis is a modified version of the Momondo website, showing the link Trips in focus with a pink and white outline. The pink color is from their palette, the same as the search button.\nAs a side note, the search button has insufficient\ncolor contrast\nwhen used with white text. The contrast ratio is only 3.33. However, used as a visual focus against a dark purple background the contrast is better with a\nratio of 5.47\n.\nCSS Outline\nTo better make custom visual focus, you need to know about the different CSS outline properties.\nHead over to  to learn about the outline\nstyle, color, width and offset. Now you are better prepared to make keyboard accessible interfaces.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "633a06b5-1871-42ab-a36e-a459f25b3f6f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fd88b712-5287-484a-8285-447a65a8506a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "be1678dd-1912-467f-85b1-9c18e2299b3c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Accessibility\nVisual Focus\n\nWhy\nVisual focus?",
      "options": [
        "sometimes called\nkeyboard focus\nor\ntab focus",
        "None of the above.",
        "None of the above.",
        "crucial for all users that rely on keyboard and switch devices"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Accessibility\nVisual Focus\n\nWhy\nVisual focus is 'crucial for all users that rely on keyboard and switch devices'."
    },
    {
      "question": "What is Visual focus?",
      "options": [
        "crucial for all users that rely on keyboard and switch devices",
        "None of the above.",
        "sometimes called\nkeyboard focus\nor\ntab focus",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Visual focus is 'sometimes called\nkeyboard focus\nor\ntab focus'."
    }
  ],
  "summary": "This tutorial covers AccessibilityVisual Focus concepts and techniques. You'll learn how to use AccessibilityVisual Focus effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AccessibilityVisual Focus and how to apply it in your projects."
}