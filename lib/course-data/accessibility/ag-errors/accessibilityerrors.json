{
  "id": "0664e6b1-3d5f-4a91-90d9-263b5ee6ad61",
  "title": "AccessibilityErrors",
  "slug": "accessibilityerrors",
  "metadata": {
    "description": "Learn about AccessibilityErrors with clear explanations and practical examples.",
    "keywords": [
      "error",
      "form",
      "first",
      "name",
      "failed",
      "messages",
      "written",
      "text",
      "user",
      "focus"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "Accessibility",
    "subcategory": "AG Errors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Accessibility\nErrors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Why\nEveryone make mistakes. When we do, we need to understand why we have failed, to be able to correct ourselves. An accessible form needs error messages that is perceivable and understandable for people who is color blind, who is blind or low vision, and people with limited cognitive abilities.\nWhat\nAn accessible error message is\nwritten\nin text\n. Color and icon can be used, but not alone.\nclose\nto the element that has failed.\ninformative,\nhelping\nthe user.\nassociated\nto the failed element in the code.\nIn addition, is is helpful to\nmove the focus\nto the form control that has failed.\nIn this registration form, the user has typed a number instead of characters.\nHow\nYou will learn five techniques for creating accessible error messages.\nWritten in text\nThe error message is written in text, in addition to a warning icon and red border. Three different indicators makes this error situation clear to the user. Only an icon and a red border would not have been sufficient for all users to understand.\nClose together\nDesign elements near each other are perceived as related, while elements spaced apart are perceived as belonging to separate groups.\nDesign elements near each other are perceived as related, while elements spaced apart are perceived as belonging to separate groups.\n\u2014Nielsen Norman Group,\nProximity Principle in Visual Design\nIn this example the errors are close to the failing fields. In combination with a big margin between the fields, it is easy to understand where the error messages belongs.\nInformative\nThe more informative, the better.\nIn our first example the error \"Your first name must have at least two letters and no unusual characters\" is informative. It is written in a human language. It can be improved, written even more precise:\n\"Your first name must have only letters, not numbers.\"\nThe more precise, the better. This means that the system needs more error messages for different situations. Be pragmatic when deciding how many different error messages and situations you will create. Ask the users if they understand what is wrong. If not, write the error more precise.\nAssociated with the form control\nBut what about the code?\n<input name=\"firstName\" id=\"firstNameInput\" type=\"text\" pattern=\"[^.]*?\">\n<p id=\"firstName-length-error\" role=\"alert\">Your first name must have at least two letters and no unusual characters</p>\nThe error has the role alert. This is good. It would make a screen reader read out the content, even though it is not in focus.\nThe error message is not assosiated with the field. This can be done using the\naria-describedby\nattribute. The value is the ID of the error message.\nAlso, we should add\naria-invalid=\"true\"\non the invalid form control to tell screen readers that the form control has failed. An improved version of the input field:\n<input name=\"firstName\" id=\"firstNameInput\" type=\"text\" pattern=\"[^.]*?\"\naria-describedby=\"firstName-length-error\" aria-invalid=\"true\"\n>\nMove focus\nThis is more important for server-side validations, compared to client-side validation. When the user submits a form, the focus moves to the first invalid field.\nIn this example, all three fields have been invalid. The focus was moved to the first field, First name. The error is removed when the user starts typing.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "bbc8cf58-1faf-40bb-a27a-32566e93d3c2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fef4ed20-e426-459e-9d55-a848fa51ef08",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d3a706fc-b5d5-4ba5-85e0-6fc82704314a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is An accessible form needs error messages that is perceivable and understandable for people who?",
      "options": [
        "written\nin text",
        "None of the above.",
        "None of the above.",
        "color blind"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of An accessible form needs error messages that is perceivable and understandable for people who is 'color blind'."
    },
    {
      "question": "What is What\nAn accessible error message?",
      "options": [
        "written\nin text",
        "color blind",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What\nAn accessible error message is 'written\nin text'."
    }
  ],
  "summary": "This tutorial covers AccessibilityErrors concepts and techniques. You'll learn how to use AccessibilityErrors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AccessibilityErrors and how to apply it in your projects."
}