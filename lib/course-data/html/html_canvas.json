{
  "title": "HTML Canvas Reference",
  "url": "https://www.w3schools.com/tags/ref_canvas.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "HTML Canvas Reference",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The <canvas> element defines a bitmapped area in an HTML page.",
      "html": "<p>The <b>&lt;canvas&gt;</b> element defines a <b>bitmapped</b> area in an HTML page.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Canvas API allows JavaScript to draw graphics on the canvas.",
      "html": "<p>The <b>Canvas API</b> allows JavaScript to <b>draw graphics</b> on the canvas.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors, rotations, transparencies, and other pixel manipulations.",
      "html": "<p>The Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can add a canvas element anywhere in an HTML page with the <canvas> tag:",
      "html": "<p>You can add a canvas element anywhere in an HTML page with the <code>\n&lt;canvas&gt;</code> tag:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas",
        "syntaxHighlighting": [
          {
            "text": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " id=\"myCanvas\" width=\"300\" height=\"150\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"myCanvas\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"300\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"150\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</canvas>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>",
      "syntax_highlighting": [
        {
          "text": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " id=\"myCanvas\" width=\"300\" height=\"150\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"myCanvas\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"300\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"150\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</canvas>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>canvas<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myCanvas\"</span> width<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"300\"</span> height<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"150\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/canvas<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas",
      "syntax_highlighting_data": [
        {
          "text": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " id=\"myCanvas\" width=\"300\" height=\"150\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"myCanvas\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"300\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"150\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</canvas>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can access a <canvas> element with the HTML DOM method getElementById() .",
      "html": "<p>You can access a <code>&lt;canvas&gt;</code> element with the <b>HTML \nDOM</b> method <code>getElementById()</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To draw in the canvas you need to create a 2D context object:",
      "html": "<p>To draw in the canvas you need to create a <b>2D context</b> object:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"myCanvas\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getContext",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"2d\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");",
      "syntax_highlighting": [
        {
          "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"myCanvas\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getContext",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"2d\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCanvas = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = myCanvas.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"myCanvas\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getContext",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"2d\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The HTML <canvas> element itself has no drawing abilities.",
      "html": "<p>The HTML <code>&lt;canvas&gt;</code> element itself has no drawing abilities.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You must use JavaScript to draw any graphics.",
      "html": "<p>You must use JavaScript to draw any graphics.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The getContext() method returns an object with tools (methods) for drawing.",
      "html": "<p>The <code>getContext()</code> method returns an object \nwith tools (methods) for drawing.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Drawing on the Canvas",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After you have created a 2D context, you can draw on the canvas.",
      "html": "<p>After you have created a 2D context, you can draw on the canvas.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The fillRect() method draws a black rectangle with a top-left corner at position 20,20. The rectangle is 150 pixel wide and 100 pixels high.",
      "html": "<p>The <b>fillRect()</b> method draws a black rectangle with a top-left corner at position 20,20.\nThe rectangle is 150 pixel wide and 100 pixels high.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_draw",
        "syntaxHighlighting": [
          {
            "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillRect(20, 20, 150, 100);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"myCanvas\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getContext",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"2d\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "fillRect",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillRect(20, 20, 150, 100);",
      "syntax_highlighting": [
        {
          "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillRect(20, 20, 150, 100);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"myCanvas\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getContext",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"2d\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "fillRect",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCanvas = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = myCanvas.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">fillRect</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_draw",
      "syntax_highlighting_data": [
        {
          "text": "\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillRect(20, 20, 150, 100);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"myCanvas\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getContext",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"2d\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "fillRect",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using Colors",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The fillStyle property sets the fill color of the drawing object:",
      "html": "<p>The <b>fillStyle</b> property sets the fill color of the drawing object:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_get",
        "syntaxHighlighting": [
          {
            "text": "\n  const myCanvas = document.getElementById(\"myCanvas\");\n  const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"myCanvas\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getContext",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"2d\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "fillStyle",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"red\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "fillRect",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
      "syntax_highlighting": [
        {
          "text": "\n const myCanvas = document.getElementById(\"myCanvas\");\n const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"myCanvas\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getContext",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"2d\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "fillStyle",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"red\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "fillRect",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCanvas = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = myCanvas.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fillRect</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_get",
      "syntax_highlighting_data": [
        {
          "text": "\n  const myCanvas = document.getElementById(\"myCanvas\");\n  const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"myCanvas\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getContext",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"2d\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "fillStyle",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"red\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "fillRect",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also create a new <canvas> element with the document.createElement() method, and add the element to an existing HTML page:",
      "html": "<p>You can also create a new <code>&lt;canvas&gt;</code> element \nwith the <code>document.createElement()</code> method,\nand add the element to an existing HTML page:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_create",
        "syntaxHighlighting": [
          {
            "text": "\n  const myCanvas = document.createElement(\"canvas\");\n  document.body.appendChild(myCanvas);\n  const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "createElement",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"canvas\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "body",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "appendChild",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getContext",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"2d\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "fillStyle",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"red\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "fillRect",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const myCanvas = document.createElement(\"canvas\");\ndocument.body.appendChild(myCanvas);\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
      "syntax_highlighting": [
        {
          "text": "\n const myCanvas = document.createElement(\"canvas\");\n  document.body.appendChild(myCanvas);\n const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "createElement",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"canvas\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "body",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "appendChild",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getContext",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"2d\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "fillStyle",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"red\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "fillRect",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCanvas = document.<span class=\"jspropertycolor\" style=\"color:black\">createElement</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"canvas\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">body</span>.<span class=\"jspropertycolor\" style=\"color:black\">appendChild</span>(myCanvas);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = myCanvas.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fillRect</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_create",
      "syntax_highlighting_data": [
        {
          "text": "\n  const myCanvas = document.createElement(\"canvas\");\n  document.body.appendChild(myCanvas);\n  const ctx = myCanvas.getContext(\"2d\");\n\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 100);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "createElement",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"canvas\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "body",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "appendChild",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getContext",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"2d\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "fillStyle",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"red\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "fillRect",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Paths",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The common way to draw on the canvas is to:",
      "html": "<p>The common way to draw on the canvas is to:\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p></p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_stroke",
        "syntaxHighlighting": [
          {
            "text": "\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"myCanvas\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getContext",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"2d\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "beginPath",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "moveTo",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "lineTo",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "lineTo",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "70",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "stroke",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();",
      "syntax_highlighting": [
        {
          "text": "\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"myCanvas\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getContext",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"2d\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "beginPath",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "moveTo",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "lineTo",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "lineTo",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "70",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "stroke",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> canvas = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = canvas.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">moveTo</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">20</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">stroke</span>();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_canvas_stroke",
      "syntax_highlighting_data": [
        {
          "text": "\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"myCanvas\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getContext",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"2d\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "beginPath",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "moveTo",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "lineTo",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "lineTo",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "70",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "stroke",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Complete Canvas API Reference",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This reference covers all Properties and Methods of the getContext(\"2d\") Object, used to draw text, lines, boxes, circles, pictures, and more on the canvas.",
      "html": "<p>This reference covers all Properties and Methods of the getContext(\"2d\") Object,\nused to draw text, lines, boxes, circles, pictures, and more on the canvas.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Drawing Methods",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are only 3 methods to draw directly on the canvas:",
      "html": "<p>There are only 3 methods to draw directly on the canvas:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_fillrect.asp\">fillRect()</a></td>\n<td>Draws a \"filled\" rectangle</td>\n</tr>\n<tr>\n<td><a href=\"canvas_strokerect.asp\">strokeRect()</a></td>\n<td>Draws a rectangle (with no fill)</td>\n</tr>\n<tr>\n<td><a href=\"canvas_clearrect.asp\">clearRect()</a></td>\n<td>Clears specified pixels within a rectangle</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Path Methods",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr></tr>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_beginpath.asp\">beginPath()</a></td>\n<td>Begins a new path or resets the current path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_closepath.asp\">closePath()</a></td>\n<td>Adds a line to the path from the current point to the start</td>\n</tr>\n<tr>\n<td><a href=\"canvas_ispointinpath.asp\">isPointInPath()</a></td>\n<td>Returns true if the specified point is in the current path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_moveto.asp\">moveTo()</a></td>\n<td>Moves the path to a point in the canvas (without drawing)</td>\n</tr>\n<tr>\n<td><a href=\"canvas_lineto.asp\">lineTo()</a></td>\n<td>Adds a line to the the path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_fill.asp\">fill()</a></td>\n<td>Fills the current path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_rect.asp\">rect()</a></td>\n<td>Adds a rectangle to the path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_stroke.asp\">stroke()</a></td>\n<td>Draws the current path</td>\n</tr>\n<tr><td>\u00a0</td><th>Circles and Curves</th></tr>\n<tr>\n<td><a href=\"canvas_beziercurveto.asp\">bezierCurveTo()</a></td>\n<td>Adds a cubic B\u00e9zier curve to the path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_arc.asp\">arc()</a></td>\n<td>Adds an arc/curve (circle, or parts of a circle) to the path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_arcto.asp\">arcTo()</a></td>\n<td>Adds an arc/curve between two tangents to the path</td>\n</tr>\n<tr>\n<td><a href=\"canvas_quadraticcurveto.asp\">quadraticCurveTo()</a></td>\n<td>Adds a quadratic B\u00e9zier curve to the path</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Text",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method/Prop</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_direction.asp\">direction</a></td>\n<td>Sets or returns the direction used to draw text</td>\n</tr>\n<tr>\n<td><a href=\"canvas_filltext.asp\">fillText()</a></td>\n<td>Draws \"filled\" text on the canvas</td>\n</tr>\n<tr>\n<td><a href=\"canvas_font.asp\">font</a></td>\n<td>Sets or returns the font properties for text content</td>\n</tr>\n<tr>\n<td><a href=\"canvas_measuretext.asp\">measureText()</a></td>\n<td>Returns an object that contains the width of the specified text</td>\n</tr>\n<tr>\n<td><a href=\"canvas_stroketext.asp\">strokeText()</a></td>\n<td>Draws text on the canvas</td>\n</tr>\n<tr>\n<td><a href=\"canvas_textalign.asp\">textAlign</a></td>\n<td>Sets or returns the alignment for text content</td>\n</tr>\n<tr>\n<td><a href=\"canvas_textbaseline.asp\">textBaseline</a></td>\n<td>Sets or returns the text baseline used when drawing text</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Colors, Styles, and Shadows",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method/Property</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_addcolorstop.asp\">addColorStop()</a></td>\n<td>Specifies the colors and stop positions in a gradient object</td>\n</tr>\n<tr>\n<td><a href=\"canvas_createlineargradient.asp\">\n    createLinearGradient()</a></td>\n<td>Creates a linear gradient (to use on canvas content)</td>\n</tr>\n<tr>\n<td><a href=\"canvas_createpattern.asp\">createPattern()</a></td>\n<td>Repeats a specified element in the specified direction</td>\n</tr>\n<tr>\n<td><a href=\"canvas_createradialgradient.asp\">createRadialGradient()</a></td>\n<td>Creates a radial/circular gradient (to use on canvas content)</td>\n</tr>\n<tr>\n<td><a href=\"canvas_fillstyle.asp\">fillStyle</a></td>\n<td>Sets or returns the color, gradient, or pattern used to fill the drawing</td>\n</tr>\n<tr>\n<td><a href=\"canvas_linecap.asp\">lineCap</a></td>\n<td>Sets or returns the style of the end caps for a line</td>\n</tr>\n<tr>\n<td><a href=\"canvas_linejoin.asp\">lineJoin</a></td>\n<td>Sets or returns the type of corner created, when two lines meet</td>\n</tr>\n<tr>\n<td><a href=\"canvas_linewidth.asp\">lineWidth</a></td>\n<td>Sets or returns the current line width</td>\n</tr>\n<tr>\n<td><a href=\"canvas_miterlimit.asp\">miterLimit</a></td>\n<td>Sets or returns the maximum miter length</td>\n</tr>\n<tr>\n<td><a href=\"canvas_shadowblur.asp\">shadowBlur</a></td>\n<td>Sets or returns the blur level for shadows</td>\n</tr>\n<tr>\n<td><a href=\"canvas_shadowcolor.asp\">shadowColor</a></td>\n<td>Sets or returns the color to use for shadows</td>\n</tr>\n<tr>\n<td><a href=\"canvas_shadowoffsetx.asp\">shadowOffsetX</a></td>\n<td>Sets or returns the horizontal distance of the shadow from the shape</td>\n</tr>\n<tr>\n<td><a href=\"canvas_shadowoffsety.asp\">shadowOffsetY</a></td>\n<td>Sets or returns the vertical distance of the shadow from the shape</td>\n</tr>\n<tr>\n<td><a href=\"canvas_strokestyle.asp\">strokeStyle</a></td>\n<td>Sets or returns the color, gradient, or pattern used for strokes</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Transformations",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_scale.asp\">scale()</a></td>\n<td>Scales the current drawing bigger or smaller</td>\n</tr>\n<tr>\n<td><a href=\"canvas_rotate.asp\">rotate()</a></td>\n<td>Rotates the current drawing</td>\n</tr>\n<tr>\n<td><a href=\"canvas_translate.asp\">translate()</a></td>\n<td>Remaps the (0,0) position on the canvas</td>\n</tr>\n<tr>\n<td><a href=\"canvas_transform.asp\">transform()</a></td>\n<td>Replaces the current transformation matrix for the drawing</td>\n</tr>\n<tr>\n<td><a href=\"canvas_settransform.asp\">setTransform()</a></td>\n<td>Resets the current transform to the identity matrix. Then runs <a href=\"canvas_transform.asp\">\n    transform()</a></td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Image Drawing",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_drawimage.asp\">drawImage()</a></td>\n<td>Draws an image, canvas, or video onto the canvas</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The ImageData Object / Pixel Manipulation",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method/Property</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_createimagedata.asp\">createImageData()</a></td>\n<td>Creates a new, blank ImageData object</td>\n</tr>\n<tr>\n<td><a href=\"canvas_getimagedata.asp\">getImageData()</a></td>\n<td>Returns an ImageData object that copies the pixel data for the specified \n    rectangle on a canvas</td>\n</tr>\n<tr>\n<td><a href=\"canvas_imagedata_data.asp\">ImageData.data</a></td>\n<td>Returns an object that contains image data of a specified ImageData \n    object</td>\n</tr>\n<tr>\n<td><a href=\"canvas_imagedata_height.asp\">ImageData.height</a></td>\n<td>Returns the height of an ImageData object</td>\n</tr>\n<tr>\n<td><a href=\"canvas_imagedata_width.asp\">ImageData.width</a></td>\n<td>Returns the width of an ImageData object</td>\n</tr>\n<tr>\n<td><a href=\"canvas_putimagedata.asp\">putImageData()</a></td>\n<td>Puts the image data (from a specified ImageData object) back onto the \n    canvas</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Compositing",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_globalalpha.asp\">globalAlpha</a></td>\n<td>Sets or returns the current alpha or transparency value of the drawing</td>\n</tr>\n<tr>\n<td><a href=\"canvas_globalcompositeoperation.asp\">globalCompositeOperation</a></td>\n<td>Sets or returns how a new image are drawn onto an existing image</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Other Methods",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"canvas_clip.asp\">clip()</a></td>\n<td>Clips a region of any shape and size from the original canvas</td>\n</tr>\n<tr>\n<td><a href=\"canvas_save.asp\">save()</a></td>\n<td>Saves the state of the current drawing context and all its attributes</td>\n</tr>\n<tr>\n<td><a href=\"canvas_restore.asp\">restore()</a></td>\n<td>Restores the previously saved state and attributes</td>\n</tr>\n<tr>\n<td>createEvent()</td>\n<td>\u00a0</td>\n</tr>\n<tr>\n<td>getContext()</td>\n<td>\u00a0</td>\n</tr>\n<tr>\n<td>toDataURL()</td>\n<td>\u00a0</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Standard Properties and Events",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "\nproperties",
          "href": "https://www.w3schools.com/dom_obj_all.asp",
          "title": ""
        },
        {
          "text": "events",
          "href": "https://www.w3schools.com/dom_obj_event.asp",
          "title": ""
        }
      ],
      "text": "The canvas object also supports the standard properties and events .",
      "html": "<p>The canvas object also supports the standard <a href=\"dom_obj_all.asp\">\nproperties</a> and <a href=\"dom_obj_event.asp\">events</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Related Pages",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Canvas Tutorial",
          "href": "https://www.w3schools.com/graphics/canvas_intro.asp",
          "title": ""
        }
      ],
      "text": "Canvas tutorial: Canvas Tutorial",
      "html": "<p>Canvas tutorial: <a href=\"/graphics/canvas_intro.asp\">Canvas Tutorial</a></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "HTML5 Canvas",
          "href": "https://www.w3schools.com/html/html5_canvas.asp",
          "title": ""
        }
      ],
      "text": "HTML tutorial: HTML5 Canvas",
      "html": "<p>HTML tutorial: <a href=\"/html/html5_canvas.asp\">HTML5 Canvas</a></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "HTML <canvas> tag",
          "href": "https://www.w3schools.com/tags/tag_canvas.asp",
          "title": ""
        }
      ],
      "text": "HTML reference: HTML <canvas> tag",
      "html": "<p>HTML reference: <a href=\"/tags/tag_canvas.asp\">HTML &lt;canvas&gt; tag</a></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Browser Support",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The <canvas> element is an HTML5 standard (2014).",
      "html": "<p>The <code>&lt;canvas&gt;</code> element is an HTML5 standard (2014).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Canvas API is supported in all modern browsers:",
      "html": "<p><code>Canvas API</code> is supported in all modern browsers:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\" style=\"font-size:14px\">\n<tbody><tr style=\"height:60px\">\n<th class=\"bsChrome\" style=\"width:16.6%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:16.6%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:16.6%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:16.6%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:16.6%;\" title=\"Opera\"></th>\n<th class=\"bsIE\" style=\"width:16.6%;\" title=\"Internet Explorer\"></th>\n</tr>\n<tr>\n<td style=\"padding-left:2px;padding-right:2px\">Chrome</td>\n<td style=\"padding-left:2px;padding-right:2px\">Edge</td>\n<td style=\"padding-left:2px;padding-right:2px\">Firefox</td>\n<td style=\"padding-left:2px;padding-right:2px\">Safari</td>\n<td style=\"padding-left:2px;padding-right:2px\">Opera</td>\n<td style=\"padding-left:2px;padding-right:2px\">IE</td>\n</tr>\n<tr>\n<td style=\"padding-left:2px;padding-right:2px\">Yes</td>\n<td style=\"padding-left:2px;padding-right:2px\">Yes</td>\n<td style=\"padding-left:2px;padding-right:2px\">Yes</td>\n<td style=\"padding-left:2px;padding-right:2px\">Yes</td>\n<td style=\"padding-left:2px;padding-right:2px\">Yes</td>\n<td style=\"padding-left:2px;padding-right:2px\">9-11</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    }
  ]
}