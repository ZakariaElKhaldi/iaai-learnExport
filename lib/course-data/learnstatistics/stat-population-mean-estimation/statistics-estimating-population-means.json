{
  "id": "6e4f12eb-4254-4375-9d0f-ae1202a991dc",
  "title": "Statistics - Estimating Population Means",
  "slug": "statistics-estimating-population-means",
  "metadata": {
    "description": "Learn about Statistics - Estimating Population Means with clear explanations and practical examples.",
    "keywords": [
      "c",
      "confidence",
      "sample",
      "interval",
      "mean",
      "alpha",
      "error",
      "standard",
      "calculate",
      "value",
      "margin"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 7,
    "category": "LearnStatistics",
    "subcategory": "Stat Population Mean Estimation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Statistics - Estimating Population Means",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A population\nmean\nis an average of a\nnumerical\npopulation variable.\nConfidence intervals are used to\nestimate\npopulation means.\nEstimating Population Mean\nA statistic from a\nsample\nis used to estimate a parameter of the population.\nThe most likely value for a parameter is the\npoint estimate\n.\nAdditionally, we can calculate a\nlower bound\nand an\nupper bound\nfor the estimated parameter.\nThe\nmargin of error\nis the difference between the lower and upper bounds from the point estimate.\nTogether, the lower and upper bounds define a\nconfidence interval\n.\nCalculating a Confidence Interval\nThe following steps are used to calculate a confidence interval:\nCheck the conditions\nFind the point estimate\nDecide the confidence level\nCalculate the margin of error\nCalculate the confidence interval\nFor example:\nPopulation\n: Nobel Prize winners\nVariable\n: Age when they received the Nobel Prize\nWe can take a sample and calculate the mean and the\nstandard deviation\nof that sample.\nThe sample data is used to make an estimation of the average age of\nall\nthe Nobel Prize winners.\nBy randomly selecting 30 Nobel Prize winners we could find that:\nThe mean age in the sample is 62.1\nThe standard deviation of age in the sample is 13.46\nFrom this data we can calculate a confidence interval with the steps below.\n1. Checking the Conditions\nThe conditions for calculating a confidence interval for a mean are:\nThe sample is\nrandomly selected\nAnd either:\nThe population data is normally distributed\nSample size is large enough\nA moderately large sample size, like 30, is typically large enough.\nIn the example, the sample size was 30 and it was randomly selected, so the conditions are fulfilled.\nNote:\nChecking if the data is normally distributed can be done with specialized statistical tests.\n2. Finding the Point Estimate\nThe point estimate is the\nsample mean\n(\\(\\bar{x}\\)).\nThe formula for calculating the sample mean is the sum of all the values \\(\\sum x_{i}\\) divided by the sample size (\\(n\\)):\n\\(\\displaystyle \\bar{x} = \\frac{\\sum x_{i}}{n}\\)\nIn our example, the mean age was 62.1 in the sample.\n3. Deciding the Confidence Level\nThe confidence level is expressed with a percentage or a decimal number.\nFor example, if the confidence level is 95% or 0.95:\nThe remaining probability (\\(\\alpha\\)) is then: 5%, or 1 - 0.95 = 0.05.\nCommonly used confidence levels are:\n90% with \\(\\alpha\\) = 0.1\n95% with \\(\\alpha\\) = 0.05\n99% with \\(\\alpha\\) = 0.01\nNote:\nA 95% confidence level means that if we take 100 different samples and make confidence intervals for each:\nThe true parameter will be inside the confidence interval 95 out of those 100 times.\nWe use the\nstudent's t-distribution\nto find the\nmargin of error\nfor the confidence interval.\nThe t-distribution is adjusted for the sample size with 'degrees of freedom' (df).\nThe degrees of freedom is the sample size (n) - 1, so in this example it is 30 - 1 = 29\nThe remaining probabilities (\\(\\alpha\\)) are divided in two so that half is in each tail area of the distribution.\nThe values on the t-value axis that separate the tails area from the middle are called\ncritical t-values\n.\nBelow are graphs of the standard normal distribution showing the tail areas (\\(\\alpha\\)) for different confidence levels at 29 degrees of freedom (df).\n4. Calculating the Margin of Error\nThe margin of error is the difference between the point estimate and the lower and upper bounds.\nThe margin of error (\\(E\\)) for a proportion is calculated with a\ncritical t-value\nand the\nstandard error\n:\n\\(\\displaystyle E = t_{\\alpha/2}(df) \\cdot \\frac{s}{\\sqrt{n}} \\)\nThe critical t-value \\(t_{\\alpha/2}(df) \\) is calculated from the standard normal distribution and the confidence level.\nThe standard error \\(\\frac{s}{\\sqrt{n}} \\) is calculated from the sample standard deviation (\\(s\\)) and the sample size (\\(n\\)).\nIn our example with a sample standard deviation (\\(s\\)) of 13.46 and sample size of 30 the standard error is:\n\\(\\displaystyle \\frac{s}{\\sqrt{n}} = \\frac{13.46}{\\sqrt{30}} \\approx \\frac{13.46}{5.477} = \\underline{2.458}\\)\nIf we choose 95% as the confidence level, the \\(\\alpha\\) is 0.05.\nSo we need to find the critical t-value \\(t_{0.05/2}(29) = t_{0.025}(29)\\)\nThe critical t-value can be found using a\nt-table\nor with a programming language function:\nExample\nWith Python use the Scipy Stats library\nt.ppf()\nfunction find the t-value for an \\(\\alpha\\)/2 = 0.025 and 29 degrees of freedom.\nimport scipy.stats as stats\nprint(stats.t.ppf(1-0.025, 29))\n\nExample\nWith R use the built-in\nqt()\nfunction to find the t-value for an \\(\\alpha\\)/2 = 0.025 and 29 degrees of freedom.\nqt(1-0.025, 29)\n\nUsing either method we can find that the critical t-value \\(t_{\\alpha/2}(df)\\) is \\(\\approx \\underline{2.05} \\)\nThe standard error \\(\\frac{s}{\\sqrt{n}}\\) was \\( \\approx \\underline{2.458}\\)\nSo the margin of error (\\(E\\)) is:\n\\(\\displaystyle E = t_{\\alpha/2}(df) \\cdot \\frac{s}{\\sqrt{n}} \\approx 2.05 \\cdot 2.458  = \\underline{5.0389}\\)\n5. Calculate the Confidence Interval\nThe lower and upper bounds of the confidence interval are found by subtracting and adding the margin of error (\\(E\\)) from the point estimate (\\(\\bar{x}\\)).\nIn our example the point estimate was 0.2 and the margin of error was 0.143, then:\nThe lower bound is:\n\\(\\bar{x} - E = 62.1 - 5.0389 \\approx \\underline{57.06} \\)\nThe upper bound is:\n\\(\\bar{x} + E = 62.1 + 5.0389 \\approx \\underline{67.14} \\)\nThe confidence interval is:\n\\([57.06, 67.14]\\)\nAnd we can summarize the confidence interval by stating:\nThe\n95%\nconfidence interval for the mean age of Nobel Prize winners is between\n57.06 and 67.14 years\nCalculating a Confidence Interval with Programming\nA confidence interval can be calculated with many programming languages.\nUsing software and programming to calculate statistics is more common for bigger sets of data, as calculating manually becomes difficult.\nNote:\nThe results from using the programming code will be more accurate  because of rounding of values when calculating by hand.\nExample\nWith Python use the scipy and math libraries to calculate the confidence interval for an estimated proportion.\nHere, the sample size is 30, sample mean is 62.1 and sample standard deviation is 13.46.\nimport scipy.stats as stats\nimport math\n# Specify sample mean (x_bar), sample standard deviation (s), sample size (n) and confidence level\nx_bar = 62.1\ns = 13.46\nn = 30\nconfidence_level = 0.95\n# Calculate alpha, degrees of freedom (df), the critical t-value, and the margin of error\nalpha = (1-confidence_level)\ndf = n - 1\nstandard_error = s/math.sqrt(n)\ncritical_t = stats.t.ppf(1-alpha/2, df)\nmargin_of_error = critical_t * standard_error\n# Calculate the lower and upper bound of the confidence interval\nlower_bound = x_bar - margin_of_error\nupper_bound = x_bar + margin_of_error\n# Print the results\nprint(\"Critical t-value: {:.3f}\".format(critical_t))\nprint(\"Margin of Error: {:.3f}\".format(margin_of_error))\nprint(\"Confidence Interval: [{:.3f},{:.3f}]\".format(lower_bound,upper_bound))\nprint(\"The {:.1%} confidence interval for the population mean is:\".format(confidence_level))\nprint(\"between {:.3f} and {:.3f}\".format(lower_bound,upper_bound))\n\nExample\nR can use built-in math and statistics functions to calculate the confidence interval for an estimated proportion.\nHere, the sample size is 30, sample mean is 62.1 and sample standard deviation is 13.46.\n# Specify sample mean (x_bar), sample standard deviation (s), sample size (n) and confidence level\nx_bar = 62.1\ns = 13.46\nn = 30\nconfidence_level = 0.95\n# Calculate alpha, degrees of freedom (df), the critical t-value, and the margin of error\nalpha = (1-confidence_level)\ndf = n - 1\nstandard_error = s/sqrt(n)\ncritical_t = qt(1-alpha/2, 29)\nmargin_of_error = critical_t * standard_error\n# Calculate the lower and upper bound of the confidence interval\nlower_bound = x_bar - margin_of_error\nupper_bound = x_bar + margin_of_error\n# Print the results\nsprintf(\"Critical t-value: %0.3f\", critical_t)\nsprintf(\"Margin of Error: %0.3f\", margin_of_error)\nsprintf(\"Confidence Interval: [%0.3f,%0.3f]\", lower_bound, upper_bound)\nsprintf(\"The %0.1f%% confidence interval for the population mean is:\", confidence_level*100)\nsprintf(\"between %0.4f and %0.4f\", lower_bound, upper_bound)\n\nNote:\nR also has a built in function for calculating a confidence interval for a population mean.\nExample\nR can use the built-in\nt.test()\nfunction to calculate the confidence interval for an estimated mean.\nHere, the sample is 30 randomly generated values with a mean of 60 and standard deviation is 12.5 using the\nrnorm()\nfunction to generate the sample.\n# Specify sample size (n) and confidence level\nn = 30\nconfidence_level = 0.95\n# Set random seed and generate sample data with mean of 60 and standard deviation of 12.5\nset.seed(3)\nsample <- rnorm(n, 60, 12.5)\n# t.test function for sample data, confidence level, and selecting the $conf.int option\nt.test(sample, conf.level = confidence_level)$conf.int\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import scipy.stats as stats\nprint(stats.t.ppf(1-0.025, 29))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "qt(1-0.025, 29)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import scipy.stats as stats\nimport math\n# Specify sample mean (x_bar), sample standard deviation (s), sample size (n) and confidence level\nx_bar = 62.1\ns = 13.46\nn = 30\nconfidence_level = 0.95\n# Calculate alpha, degrees of freedom (df), the critical t-value, and the margin of error\nalpha = (1-confidence_level)\ndf = n - 1\nstandard_error = s/math.sqrt(n)\ncritical_t = stats.t.ppf(1-alpha/2, df)\nmargin_of_error = critical_t * standard_error\n# Calculate the lower and upper bound of the confidence interval\nlower_bound = x_bar - margin_of_error\nupper_bound = x_bar + margin_of_error\n# Print the results\nprint(\"Critical t-value: {:.3f}\".format(critical_t))\nprint(\"Margin of Error: {:.3f}\".format(margin_of_error))\nprint(\"Confidence Interval: [{:.3f},{:.3f}]\".format(lower_bound,upper_bound))\nprint(\"The {:.1%} confidence interval for the population mean is:\".format(confidence_level))\nprint(\"between {:.3f} and {:.3f}\".format(lower_bound,upper_bound))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "# Specify sample mean (x_bar), sample standard deviation (s), sample size (n) and confidence level\nx_bar = 62.1\ns = 13.46\nn = 30\nconfidence_level = 0.95\n# Calculate alpha, degrees of freedom (df), the critical t-value, and the margin of error\nalpha = (1-confidence_level)\ndf = n - 1\nstandard_error = s/sqrt(n)\ncritical_t = qt(1-alpha/2, 29)\nmargin_of_error = critical_t * standard_error\n# Calculate the lower and upper bound of the confidence interval\nlower_bound = x_bar - margin_of_error\nupper_bound = x_bar + margin_of_error\n# Print the results\nsprintf(\"Critical t-value: %0.3f\", critical_t)\nsprintf(\"Margin of Error: %0.3f\", margin_of_error)\nsprintf(\"Confidence Interval: [%0.3f,%0.3f]\", lower_bound, upper_bound)\nsprintf(\"The %0.1f%% confidence interval for the population mean is:\", confidence_level*100)\nsprintf(\"between %0.4f and %0.4f\", lower_bound, upper_bound)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "# Specify sample size (n) and confidence level\nn = 30\nconfidence_level = 0.95\n# Set random seed and generate sample data with mean of 60 and standard deviation of 12.5\nset.seed(3)\nsample <- rnorm(n, 60, 12.5)\n# t.test function for sample data, confidence level, and selecting the $conf.int option\nt.test(sample, conf.level = confidence_level)$conf.int",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "import scipy.stats as stats\nprint(stats.t.ppf(1-0.025, 29))"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "qt(1-0.025, 29)"
    }
  ],
  "related_topics": [
    {
      "id": "11cde529-a0ff-44e9-aab5-5a72e232b57a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "efef18e0-f286-4d53-b217-274f2b54fb71",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "be02a35e-3869-49ca-bd46-51e8eee14dea",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Estimating Population Means\n\nA population\nmean?",
      "options": [
        "None of the above.",
        "used to\nestimate\npopulation means",
        "an average of a\nnumerical\npopulation variable",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Estimating Population Means\n\nA population\nmean is 'an average of a\nnumerical\npopulation variable'."
    },
    {
      "question": "What is Confidence intervals?",
      "options": [
        "used to\nestimate\npopulation means",
        "None of the above.",
        "None of the above.",
        "an average of a\nnumerical\npopulation variable"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Confidence intervals is 'used to\nestimate\npopulation means'."
    }
  ],
  "summary": "This tutorial covers Statistics - Estimating Population Means concepts and techniques. You'll learn how to use Statistics - Estimating Population Means effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Statistics - Estimating Population Means and how to apply it in your projects."
}