{
  "id": "b2a40bc9-3c2f-4f0c-814d-06811d5ffadc",
  "title": "BashtopCommand - Display Linux Tasks",
  "slug": "bashtopcommand-display-linux-tasks",
  "metadata": {
    "description": "Learn about BashtopCommand - Display Linux Tasks with clear explanations and practical examples.",
    "keywords": [
      "user",
      "command",
      "time",
      "bash",
      "virt",
      "process",
      "tasks",
      "example",
      "specific",
      "used"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnBash",
    "subcategory": "Bash List Processes (top)"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Bash\ntop\nCommand",
      "content": "- Display Linux Tasks\n\nUsing the\ntop\nCommand\nThe\ntop\ncommand is used to display Linux tasks.\nIt's a powerful tool for monitoring system performance in real-time.\nAll examples below use a hypothetical output for demonstration:\ntop - 08:00:01 up 10 days,  3:22,  3 users,  load average: 0.01, 0.05, 0.10\nTasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.7 us,  0.3 sy,  0.0 ni, 98.7 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  8163100 total,  123456 free,  234567 used,  345678 buff/cache\nKiB Swap:  2097148 total,  1048576 free,  1048572 used.  456789 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash\n 5678 user      20   0  234567  23456   2345 S   0.5  0.3   0:02.34 python\n 9101 user      20   0  345678  34567   3456 S   0.7  0.4   0:03.45 node\nUnderstanding the Output\nThe\ntop\ncommand output consists of several columns, each representing different aspects of the system's processes:\nPID\n: Process ID, a unique identifier for each process.\nUSER\n: The user account that owns the process.\nPR\n: Priority of the process.\nNI\n: Nice value, which affects scheduling priority.\nVIRT\n: Virtual memory size used by the process.\nRES\n: Resident memory size, the non-swapped physical memory the process uses.\nSHR\n: Shared memory size.\nS\n: Process status (e.g., S for sleeping, R for running).\n%CPU\n: CPU usage percentage.\n%MEM\n: Memory usage percentage.\nTIME+\n: Total CPU time the process has used since it started.\nCOMMAND\n: The command that started the process.\nBasic Usage\nTo display Linux tasks, use\ntop\n:\nExample: Basic Usage\ntop\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash\n 5678 user      20   0  234567  23456   2345 S   0.5  0.3   0:02.34 python\n 9101 user      20   0  345678  34567   3456 S   0.7  0.4   0:03.45 node\nOptions\nThe\ntop\ncommand has options to change how it works:\n-d\n- Set the time between updates\n-p\n- Monitor specific PIDs\n-u\n- Show tasks for a specific user\n-n\n- Set the number of iterations\n-b\n- Batch mode operation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-d\noption allows you to set the time between updates.\nExample: Set Update Interval\ntop -d 5\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-p\noption allows you to monitor specific PIDs.\nExample: Monitor Specific PIDs\ntop -p 1234\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-u\noption allows you to show tasks for a specific user.\nExample: Show Tasks for a Specific User\ntop -u user\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-n\noption allows you to set the number of iterations before\ntop\nexits.\nExample: Set Number of Iterations\ntop -n 2\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-b\noption allows\ntop\nto run in batch mode, suitable for sending output to other programs or files.\nExample: Batch Mode Operation\ntop -b -n 1\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash\nCombining Options\nOptions can be combined to provide more detailed output. For example,\ntop -b -n 1\nruns\ntop\nin batch mode for one iteration.\nExample: Combine Options\ntop -b -n 1\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 user      20   0  123456  12345   1234 S   0.3  0.2   0:01.23 bash\n\n\u2605\n+1",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "f7cf0e3d-a538-467d-89e7-8ea87a8844b1",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "07288cee-6989-466d-866e-fcd90800f6c0",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4c714a2c-ec59-4c4e-bb5e-515c785e5f7a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Display Linux Tasks\n\nUsing the\ntop\nCommand\nThe\ntop\ncommand?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to display Linux tasks",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Display Linux Tasks\n\nUsing the\ntop\nCommand\nThe\ntop\ncommand is 'used to display Linux tasks'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers BashtopCommand - Display Linux Tasks concepts and techniques. You'll learn how to use BashtopCommand - Display Linux Tasks effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of BashtopCommand - Display Linux Tasks and how to apply it in your projects."
}