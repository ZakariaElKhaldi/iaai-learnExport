{
  "id": "d80ea9ed-875c-4e55-b7a2-1211efbe8e83",
  "title": "Bash Functions",
  "slug": "bash-functions",
  "metadata": {
    "description": "Learn about Bash Functions with clear explanations and practical examples.",
    "keywords": [
      "function",
      "functions",
      "example",
      "echo",
      "name",
      "return",
      "local",
      "bash",
      "values",
      "define"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnBash",
    "subcategory": "Bash Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Bash Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Defining Functions\nTo define a function in Bash, use the following syntax. The function name is followed by parentheses, and the function body is enclosed in curly braces:\nExample: Define a Function\nmy_function() {\n  echo \"Hello, World!\"\n}\nIt's a good practice to use descriptive names for functions.\nCalling Functions\nIn Bash, execute (or call) a function by using its name.\nFunctions can be called multiple times, which helps in reusing code:\nExample: Call a Function\nmy_function\nAdvanced Function Features\nFunctions can accept arguments, return values, and use local variables. Here's an example of a function that takes an argument and uses a local variable:\nExample: Advanced Function Features\ngreet() {\n  local name=$1\n  echo \"Hello, $name!\"\n}\ngreet \"Alice\"\nYou can also return values from functions using\necho\nor the\nreturn\nstatement:\nExample: Return Values\nadd() {\n  local sum=$(($1 + $2))\n  echo $sum\n}\nresult=$(add 5 3)\necho \"The sum is $result\"\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b1ae8866-9f40-43d5-bbc3-6abec869b264",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "77b28820-ee26-49ca-b1f9-46f4ddd0b4fa",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "ea7a5dee-c131-40a0-be80-53bebec9fd0d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The function name?",
      "options": [
        "$result\"\n\n\u2605\n+1",
        "None of the above.",
        "None of the above.",
        "followed by parentheses"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The function name is 'followed by parentheses'."
    },
    {
      "question": "What is The sum?",
      "options": [
        "None of the above.",
        "followed by parentheses",
        "None of the above.",
        "$result\"\n\n\u2605\n+1"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The sum is '$result\"\n\n\u2605\n+1'."
    }
  ],
  "summary": "This tutorial covers Bash Functions concepts and techniques. You'll learn how to use Bash Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Bash Functions and how to apply it in your projects."
}