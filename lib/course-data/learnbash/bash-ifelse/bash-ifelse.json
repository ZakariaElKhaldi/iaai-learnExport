{
  "id": "619bf61e-a6e0-41f5-b135-c038bfea5a97",
  "title": "Bash If...Else",
  "slug": "bash-ifelse",
  "metadata": {
    "description": "Learn about Bash If...Else with clear explanations and practical examples.",
    "keywords": [
      "statement",
      "else",
      "statements",
      "echo",
      "number",
      "block",
      "elif",
      "condition",
      "example",
      "nested"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnBash",
    "subcategory": "Bash If...Else"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Bash If...Else",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Using If...Else Statements in Bash\nThis section explains how to use conditional statements in Bash scripting.\nIf Statements\nIf statements allow you to execute code based on a condition. If the condition is true, the code block will run.\nThe condition is enclosed in square brackets\n[ ]\nand the statement ends with\nfi\n, which is\nif\nspelled backward, marking the end of the if block.\nExample: If Statement\n# Basic if statement\nnum=15\nif [ $num -gt 10 ]; then\n  echo \"Number is greater than 10\"\nfi\nIf...Else Statements\nIf...else statements provide a way to execute one block of code if a condition is true and another block if it is false.\nThe\nelse\nkeyword introduces the alternative block, and the statement ends with\nfi\n.\nExample: If...Else Statement\n# If...else statement\nnum=8\nif [ $num -gt 10 ]; then\n  echo \"Number is greater than 10\"\nelse\n  echo \"Number is 10 or less\"\nfi\nElif Statements\nElif statements allow you to check multiple conditions in sequence. If the first condition is false, the \nThe\nelif\nkeyword stands for \"else if,\" and the statement still ends with\nfi\n.\nExample: Elif Statement\n# If...elif...else statement\nnum=10\nif [ $num -gt 10 ]; then\n  echo \"Number is greater than 10\"\nelif [ $num -eq 10 ]; then\n  echo \"Number is exactly 10\"\nelse\n  echo \"Number is less than 10\"\nfi\nNested If Statements\nNested if statements allow you to place an if statement inside another if statement, enabling more complex logic.\nEach if block must be closed with its own\nfi\n.\nExample: Nested If Statement\n# Nested if statement\nnum=5\nif [ $num -gt 0 ]; then\n  if [ $num -lt 10 ]; then\n    echo \"Number is between 1 and 9\"\n  fi\nfi\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "c5418398-4959-49b4-803c-19865b5c6542",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3ebfe16c-a611-4619-aafb-dafbcae6296d",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2f845c85-83f8-4057-b54d-1c73d500601b",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is If the condition?",
      "options": [
        "None of the above.",
        "true",
        "None of the above.",
        "enclosed in square brackets\n[ ]\nand the statement ends with\nfi"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of If the condition is 'true'."
    },
    {
      "question": "What is The condition?",
      "options": [
        "enclosed in square brackets\n[ ]\nand the statement ends with\nfi",
        "None of the above.",
        "true",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The condition is 'enclosed in square brackets\n[ ]\nand the statement ends with\nfi'."
    }
  ],
  "summary": "This tutorial covers Bash If...Else concepts and techniques. You'll learn how to use Bash If...Else effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Bash If...Else and how to apply it in your projects."
}