{
  "id": "b91a6180-0df0-4475-bfbd-60925a3ca92d",
  "title": "Bash Loops",
  "slug": "bash-loops",
  "metadata": {
    "description": "Learn about Bash Loops with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "loops",
      "example",
      "count",
      "done",
      "break",
      "continue",
      "echo",
      "condition",
      "nested"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnBash",
    "subcategory": "Bash Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Bash Loops",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Using Loops in Bash\nThis section covers the use of loops in Bash scripting, including for, while, and until loops.\nFor Loops\nFor loops allow you to iterate over a list of items or a range of numbers. They are useful for repeating tasks a specific number of times.\nThe\nfor\nkeyword is followed by a variable name, a range of values, and a\ndo\nkeyword, which marks the start of the loop block.\nExample: For Loop\n# For loop example\nfor i in {1..5}; do\n  echo \"Iteration $i\"\ndone\nWhile Loops\nWhile loops execute a block of code as long as a specified condition is true.\nThey are useful for tasks that need to repeat until a certain condition changes.\nThe condition is enclosed in square brackets\n[ ]\n, and the loop ends with\ndone\n.\nExample: While Loop\n# While loop example\ncount=1\nwhile [ $count -le 5 ]; do\n  echo \"Count is $count\"\n  ((count++))\ndone\nUntil Loops\nUntil loops are similar to while loops, but they execute until a specified condition becomes true.\nThe condition is enclosed in square brackets\n[ ]\n, and the loop ends with\ndone\n.\nExample: Until Loop\n# Until loop example\ncount=1\nuntil [ $count -gt 5 ]; do\n  echo \"Count is $count\"\n  ((count++))\ndone\nBreak and Continue\nBreak and continue statements are used to control loop execution.\nbreak\nexits the loop, while\ncontinue\nskips to the \nThese statements are typically used inside conditional blocks to alter the flow of the loop.\nExample: Break and Continue\n# Break and continue example\nfor i in {1..5}; do\n  if [ $i -eq 3 ]; then\n    continue\n  fi\n  echo \"Number $i\"\n  if [ $i -eq 4 ]; then\n    break\n  fi\ndone\nNested Loops\nNested loops allow you to place one loop inside another, enabling more complex iteration patterns.\nEach loop must be closed with its own\ndone\n.\nExample: Nested Loops\n# Nested loops example\nfor i in {1..3}; do\n  for j in {1..2}; do\n    echo \"Outer loop $i, Inner loop $j\"\n  done\ndone\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d3168b61-5be2-46f4-a1a4-f824541028ed",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8ba47916-5594-4556-9814-f4bdf9187d7c",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "26080199-52b4-4fb4-9590-bba19491cbc0",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is They?",
      "options": [
        "useful for repeating tasks a specific number of times",
        "None of the above.",
        "None of the above.",
        "followed by a variable name"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of They is 'useful for repeating tasks a specific number of times'."
    },
    {
      "question": "What is The\nfor\nkeyword?",
      "options": [
        "followed by a variable name",
        "None of the above.",
        "None of the above.",
        "useful for repeating tasks a specific number of times"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The\nfor\nkeyword is 'followed by a variable name'."
    }
  ],
  "summary": "This tutorial covers Bash Loops concepts and techniques. You'll learn how to use Bash Loops effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Bash Loops and how to apply it in your projects."
}