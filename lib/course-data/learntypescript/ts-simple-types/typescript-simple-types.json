{
  "id": "ab263a09-54ad-4f76-bf03-dc1805807f57",
  "title": "TypeScript Simple Types",
  "slug": "typescript-simple-types",
  "metadata": {
    "description": "Learn about TypeScript Simple Types with clear explanations and practical examples.",
    "keywords": [
      "c",
      "type",
      "typescript",
      "string",
      "firstname",
      "implicit",
      "json",
      "assignment",
      "types",
      "values",
      "value"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Simple Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Simple Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "TypeScript Simple Types\n\nTypeScript supports some simple types",
      "content": "(primitives) you may know.\nThere are three main primitives in JavaScript and TypeScript.\nboolean\n- true or false values\nnumber\n- whole numbers and floating point values\nstring\n- text values like \"TypeScript Rocks\"\nThere are also 2 less common primitives used in later versions of Javascript and TypeScript.\nbigint\n- whole numbers and floating point values, but allows larger negative and positive numbers than the\nnumber\ntype.\nsymbol\nare used to create a globally unique identifier.\nType Assignment\nWhen creating a variable, there are two main ways TypeScript assigns a type:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Explicit",
      "content": "- writing out the type:\nlet firstName: string = \"Dylan\";\n\nExplicit\ntype assignment are easier to read and more intentional.",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Implicit",
      "content": "- TypeScript will \"guess\" the type, based on the assigned value:\nlet firstName = \"Dylan\";\n\nNote:\nHaving TypeScript \"guess\" the type of a value is called\ninfer\n.\nImplicit assignment forces TypeScript to\ninfer\nthe value.\nImplicit\ntype assignment are shorter, faster to type, and often used when developing and testing.\nError In Type Assignment\nTypeScript will throw an error if data types do not match.\nExample\nlet firstName: string = \"Dylan\"; // type string\nfirstName = 33; // attempts to re-assign the value to a different type\n\nImplicit\ntype assignment would have made\nfirstName\nless noticeable as a\nstring\n, but both will throw an error:\nExample\nlet firstName = \"Dylan\"; // inferred to type string\nfirstName = 33; // attempts to re-assign the value to a different type\n\nJavaScript\nwill\nnot\nthrow an error for mismatched types.\nUnable to Infer\nTypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to\nany\nwhich disables type checking.\nExample\n// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\nconst json = JSON.parse(\"55\");\n// Most expect json to be an object, but it can be a string or a number like this example\nconsole.log(typeof json);\n\nThis behavior can be disabled by enabling\nnoImplicitAny\nas an option in a TypeScript's project\ntsconfig.json\n. That is a JSON config file for customizing how some of TypeScript behaves.\nNote:\nyou may see primitive types capitalized like\nBoolean\n.\nboolean !== Boolean\nFor this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nThere are two main ways TypeScript assigns a type:\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let firstName: string = \"Dylan\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let firstName = \"Dylan\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let firstName: string = \"Dylan\"; // type string\nfirstName = 33; // attempts to re-assign the value to a different type",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let firstName = \"Dylan\"; // inferred to type string\nfirstName = 33; // attempts to re-assign the value to a different type",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\nconst json = JSON.parse(\"55\");\n// Most expect json to be an object, but it can be a string or a number like this example\nconsole.log(typeof json);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let firstName: string = \"Dylan\";"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let firstName = \"Dylan\";"
    }
  ],
  "related_topics": [
    {
      "id": "4c92cb9c-a7c8-47e7-951a-0f250a32b1b8",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "224d0c6b-26e4-44aa-93b1-cbacd08e918b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "256182d8-de96-415b-8354-aaa94090b68e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is There?",
      "options": [
        "also 2 less common primitives used in later versions of Javascript and TypeScript",
        "three main primitives in JavaScript and TypeScript",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of There is 'three main primitives in JavaScript and TypeScript'."
    },
    {
      "question": "What is There?",
      "options": [
        "also 2 less common primitives used in later versions of Javascript and TypeScript",
        "None of the above.",
        "None of the above.",
        "three main primitives in JavaScript and TypeScript"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of There is 'also 2 less common primitives used in later versions of Javascript and TypeScript'."
    }
  ],
  "summary": "This tutorial covers TypeScript Simple Types concepts and techniques. You'll learn how to use TypeScript Simple Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Simple Types and how to apply it in your projects."
}