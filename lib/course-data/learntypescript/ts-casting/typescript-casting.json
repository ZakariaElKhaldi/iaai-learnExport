{
  "id": "1e0b8dd2-3806-4d4d-b822-96cabad217f5",
  "title": "TypeScript Casting",
  "slug": "typescript-casting",
  "metadata": {
    "description": "Learn about TypeScript Casting with clear explanations and practical examples.",
    "keywords": [
      "c",
      "casting",
      "type",
      "unknown",
      "string",
      "length",
      "variable",
      "console",
      "typescript",
      "example",
      "number"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Casting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Casting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "There are times when working with types where it's necessary to override the type of a variable, such as when incorrect types are provided by a library.\nCasting is the process of overriding a type.\nCasting with\nas\nA straightforward way to cast a variable is using the\nas\nkeyword,\n        which will directly change the type of the given variable.\nExample\nlet x: unknown = 'hello';\nconsole.log((x as string).length);\n\nCasting doesn't actually change the type of the data within the variable,\n            for example the following code will not work as expected since the variable\nx\nis still holds a number.\nlet x: unknown = 4;\nconsole.log((x as string).length); // prints undefined since numbers don't have a length\nTypeScript will still attempt to typecheck casts to prevent casts that don't seem correct,\n            for example the following will throw a type error since TypeScript knows casting a string to a number doesn't makes sense\n            without converting the data:\nconsole.log((4 as string).length); // Error: Conversion of type 'number' to type 'string' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\nThe Force casting section below covers how to override this.\nCasting with\n<>\nUsing <> works the same as casting with\nas\n.\nExample\nlet x: unknown = 'hello';\nconsole.log((<string>x).length);\n\nThis type of casting will not work with TSX, such as when working on React files.\nForce casting\nTo override type errors that TypeScript may throw when casting, first cast to\nunknown\n, then to the target type.\nExample\nlet x = 'hello';\nconsole.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nCast the \"unknown\" variable myVar as a string, using the as keyword:\nlet myVar: unknown = \"Hello world!\";\nconsole.log(\n.length);\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let x: unknown = 'hello';\nconsole.log((x as string).length);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x: unknown = 'hello';\nconsole.log((<string>x).length);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 'hello';\nconsole.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x: unknown = 'hello';\nconsole.log((x as string).length);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x: unknown = 'hello';\nconsole.log((<string>x).length);"
    }
  ],
  "related_topics": [
    {
      "id": "7453c85f-d90a-4ec5-a6f1-3d46011c8cd7",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ecbf3ffd-e569-4d26-b6ae-84146d990f38",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "98aa0d76-8707-4377-8024-7b3fc5304251",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is TypeScript Casting\n\nThere?",
      "options": [
        "the process of overriding a type",
        "None of the above.",
        "None of the above.",
        "times when working with types where it's necessary to override the type of a variable"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of TypeScript Casting\n\nThere is 'times when working with types where it's necessary to override the type of a variable'."
    },
    {
      "question": "What is Casting?",
      "options": [
        "None of the above.",
        "the process of overriding a type",
        "None of the above.",
        "times when working with types where it's necessary to override the type of a variable"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Casting is 'the process of overriding a type'."
    }
  ],
  "summary": "This tutorial covers TypeScript Casting concepts and techniques. You'll learn how to use TypeScript Casting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Casting and how to apply it in your projects."
}