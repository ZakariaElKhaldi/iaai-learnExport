{
  "id": "174e2743-e7eb-473b-afd2-2eeca768469c",
  "title": "TypeScript 5.x Updates",
  "slug": "typescript-5x-updates",
  "metadata": {
    "description": "Learn about TypeScript 5.x Updates with clear explanations and practical examples.",
    "keywords": [
      "c",
      "type",
      "types",
      "string",
      "typescript",
      "updates",
      "template",
      "index",
      "literal",
      "allows",
      "using"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS 5 Updates"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript 5.x Updates",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript is actively maintained and updated by Microsoft. In version 5.x a lot of utility and quality of life updates were made.\nThis chapter covers the most popular updates to allow stricter and more flexible type safety.\nAs a reminder these features will only be available in 5.x+\nTemplate Literal Types\nTemplate Literal Types\nnow allows us to create more precise types using template literals. We can define custom types that depend on the actual values of strings at compile time.\nExample\ntype Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n// Usage:\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";\n\nIndex Signature Labels\nIndex Signature Labels\nallows us to label index signatures using computed property names. It helps in providing more descriptive type information when working with dynamic objects.\nExample\ntype DynamicObject = { [key: string as `dynamic_${string}`]: string };\n// Usage:\nlet obj: DynamicObject = { dynamic_key: \"value\" };\n\n5.x also now supports native JavaScript private fields. The TypeScript 'private' still works as discussed in\nClasses\nsection.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "type Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n// Usage:\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n// Usage:\nlet obj: DynamicObject = { dynamic_key: \"value\" };",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n# TODO: Complete this line\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";",
      "solution": "type Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n// Usage:\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n# TODO: Complete this line\nlet obj: DynamicObject = { dynamic_key: \"value\" };",
      "solution": "type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n// Usage:\nlet obj: DynamicObject = { dynamic_key: \"value\" };"
    }
  ],
  "related_topics": [
    {
      "id": "30b95016-7148-443b-93f2-986cdf4dac46",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9325c793-10f6-451c-8323-71b4378d5fa1",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bf1cca5f-866a-437b-a03b-95124547b05c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is x Updates\n\nTypeScript?",
      "options": [
        "actively maintained and updated by Microsoft",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of x Updates\n\nTypeScript is 'actively maintained and updated by Microsoft'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript 5.x Updates concepts and techniques. You'll learn how to use TypeScript 5.x Updates effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript 5.x Updates and how to apply it in your projects."
}