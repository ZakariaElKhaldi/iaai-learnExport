{
  "id": "0614e9fc-0279-46d3-b8c2-58ab76f8274f",
  "title": "TypeScript Functions",
  "slug": "typescript-functions",
  "metadata": {
    "description": "Learn about TypeScript Functions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "number",
      "type",
      "function",
      "parameters",
      "return",
      "value",
      "example",
      "typescript",
      "default",
      "functions"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript has a specific syntax for typing function parameters and return values.\nRead more about functions\nhere\n.\nReturn Type\nThe type of the value returned by the function can be explicitly defined.\nExample\n// the `: number` here specifies that this function returns a number\nfunction getTime(): number {\nreturn new Date().getTime();\n}\n\nIf no return type is defined, TypeScript will attempt to infer it through the types of the variables or expressions returned.\nVoid Return Type\nThe type\nvoid\ncan be used to indicate a function doesn't return any value.\nExample\nfunction printHello(): void {\nconsole.log('Hello!');\n}\n\nParameters\nFunction parameters are typed with a similar syntax as variable declarations.\nExample\nfunction multiply(a: number, b: number) {\nreturn a * b;\n}\n\nIf no parameter type is defined, TypeScript will default to using\nany\n, unless additional type information is available as shown in the Default Parameters and Type Alias sections below.\nOptional Parameters\nBy default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.\nExample\n// the `?` operator here marks parameter `c` as optional\nfunction add(a: number, b: number, c?: number) {\nreturn a + b + (c || 0);\n}\n\nDefault Parameters\nFor parameters with default values, the default value goes after the type annotation:\nExample\nfunction pow(value: number, exponent: number = 10) {\nreturn value ** exponent;\n}\n\nTypeScript can also infer the type from the default value.\nNamed Parameters\nTyping named parameters follows the same pattern as typing normal parameters.\nExample\nfunction divide({ dividend, divisor }: { dividend: number, divisor: number }) {\nreturn dividend / divisor;\n}\n\nRest Parameters\nRest parameters can be typed like normal parameters, but the type must be an array as rest parameters are always arrays.\nExample\nfunction add(a: number, b: number, ...rest: number[]) {\nreturn a + b + rest.reduce((p, c) => p + c, 0);\n}\n\nType Alias\nFunction types can be specified separately from functions with type aliases.\nThese types are written similarly to arrow functions, read more about arrow functions\nhere\n.\nExample\ntype Negate = (value: number) => number;\n// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`\nconst negateFunction: Negate = (value) => value * -1;\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nCreate a function that returns the string \"Learning is Fun!\", with the return type explicitly defined:\nmyFunc():\n{\n\"Learning is Fun!\";\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// the `: number` here specifies that this function returns a number\nfunction getTime(): number {\nreturn new Date().getTime();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function printHello(): void {\nconsole.log('Hello!');\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function multiply(a: number, b: number) {\nreturn a * b;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// the `?` operator here marks parameter `c` as optional\nfunction add(a: number, b: number, c?: number) {\nreturn a + b + (c || 0);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function pow(value: number, exponent: number = 10) {\nreturn value ** exponent;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "function divide({ dividend, divisor }: { dividend: number, divisor: number }) {\nreturn dividend / divisor;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "function add(a: number, b: number, ...rest: number[]) {\nreturn a + b + rest.reduce((p, c) => p + c, 0);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "type Negate = (value: number) => number;\n// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`\nconst negateFunction: Negate = (value) => value * -1;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// the `: number` here specifies that this function returns a number\nfunction getTime(): number {\n# TODO: Complete this line\n}",
      "solution": "// the `: number` here specifies that this function returns a number\nfunction getTime(): number {\nreturn new Date().getTime();\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function printHello(): void {\n# TODO: Complete this line\n}",
      "solution": "function printHello(): void {\nconsole.log('Hello!');\n}"
    }
  ],
  "related_topics": [
    {
      "id": "b74ffcc8-80d9-415b-8d07-0f719f19753c",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "e23c9373-a6f4-45f3-be1b-0825852de790",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "68e8701c-1105-4b4c-a38b-54f374174075",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is If no return type?",
      "options": [
        "typed with a similar syntax as variable declarations",
        "None of the above.",
        "defined",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of If no return type is 'defined'."
    },
    {
      "question": "What is Parameters\nFunction parameters?",
      "options": [
        "typed with a similar syntax as variable declarations",
        "None of the above.",
        "None of the above.",
        "defined"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Parameters\nFunction parameters is 'typed with a similar syntax as variable declarations'."
    }
  ],
  "summary": "This tutorial covers TypeScript Functions concepts and techniques. You'll learn how to use TypeScript Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Functions and how to apply it in your projects."
}