{
  "id": "6d0451ff-8722-4840-ab37-ae7029c122b1",
  "title": "TypeScript Null & Undefined",
  "slug": "typescript-null-undefined",
  "metadata": {
    "description": "Learn about TypeScript Null & Undefined with clear explanations and practical examples.",
    "keywords": [
      "c",
      "undefined",
      "null",
      "typescript",
      "value",
      "used",
      "example",
      "house",
      "sqft",
      "number",
      "yard"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Null"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Null & Undefined",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript has a powerful system to deal with\nnull\nor\nundefined\nvalues.\nBy default\nnull\nand\nundefined\nhandling is disabled,             and can be enabled by setting\nstrictNullChecks\nto true.\nThe rest of this page applies for when\nstrictNullChecks\nis enabled.\nTypes\nnull\nand\nundefined\nare primitive types and can be used like other types, such as\nstring\n.\nExample\nlet value: string | undefined | null = null;\nvalue = 'hello';\nvalue = undefined;\n\nWhen\nstrictNullChecks\nis enabled, TypeScript requires values to be set\n            unless\nundefined\nis explicitly added to the type.\nOptional Chaining\nOptional Chaining is a JavaScript feature that works well with TypeScript's null handling.\n        It allows accessing properties on an object, that may or may not exist, with a compact syntax.\n        It can be used with the\n?.\noperator when accessing properties.\nExample\ninterface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\nfunction printYardSize(house: House) {\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\nlet home: House = {\nsqft: 500\n};\nprintYardSize(home); // Prints 'No yard'\n\nNullish Coalescence\nNullish Coalescence is another JavaScript feature that also works well with TypeScript's null handling.\n        It allows writing expressions that have a fallback specifically when dealing with\nnull\nor\nundefined\n.\n        This is useful when other falsy values can occur in the expression but are still valid.\n        It can be used with the\n??\noperator in an expression, similar to using the\n&&\noperator.\nExample\nfunction printMileage(mileage: number | null | undefined) {\nconsole.log(`Mileage: ${mileage ?? 'Not Available'}`);\n}\nprintMileage(null); // Prints 'Mileage: Not Available'\nprintMileage(0); // Prints 'Mileage: 0'\n\nNull Assertion\nTypeScript's inference system isn't perfect, there are times when it makes sense to ignore a value's\n        possibility of being\nnull\nor\nundefined\n.\n        An easy way to do this is to use casting, but TypeScript also provides the\n!\noperator as a convenient shortcut.\nExample\nfunction getValue(): string | undefined {\nreturn 'hello';\n}\nlet value = getValue();\nconsole.log('value length: ' + value!.length);\n\nJust like casting, this can be unsafe and should be used with care.\nArray bounds handling\nEven with\nstrictNullChecks\nenabled, by default TypeScript will assume array access will never return undefined (unless undefined is part of the array type).\nThe config\nnoUncheckedIndexedAccess\ncan be used to change this behavior.\nExample\nlet array: number[] = [1, 2, 3];\nlet value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let value: string | undefined | null = null;\nvalue = 'hello';\nvalue = undefined;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "interface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\nfunction printYardSize(house: House) {\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\nlet home: House = {\nsqft: 500\n};\nprintYardSize(home); // Prints 'No yard'",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function printMileage(mileage: number | null | undefined) {\nconsole.log(`Mileage: ${mileage ?? 'Not Available'}`);\n}\nprintMileage(null); // Prints 'Mileage: Not Available'\nprintMileage(0); // Prints 'Mileage: 0'",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function getValue(): string | undefined {\nreturn 'hello';\n}\nlet value = getValue();\nconsole.log('value length: ' + value!.length);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let array: number[] = [1, 2, 3];\nlet value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let value: string | undefined | null = null;\n# TODO: Complete this line\nvalue = undefined;",
      "solution": "let value: string | undefined | null = null;\nvalue = 'hello';\nvalue = undefined;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "interface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\n# TODO: Complete this line\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\nlet home: House = {\nsqft: 500\n};\nprintYardSize(home); // Prints 'No yard'",
      "solution": "interface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\nfunction printYardSize(house: House) {\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\nlet home: House = {\nsqft: 500\n};\nprintYardSize(home); // Prints 'No yard'"
    }
  ],
  "related_topics": [
    {
      "id": "ef556dcc-2716-44f9-b270-f5bdd77226ee",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7ce605d5-7695-466c-80b9-9d7f925e83af",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5447e24d-eea8-43ad-9318-6227f6552a16",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is By default\nnull\nand\nundefined\nhandling?",
      "options": [
        "disabled",
        "enabled",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of By default\nnull\nand\nundefined\nhandling is 'disabled'."
    },
    {
      "question": "What is The rest of this page applies for when\nstrictNullChecks?",
      "options": [
        "disabled",
        "None of the above.",
        "enabled",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The rest of this page applies for when\nstrictNullChecks is 'enabled'."
    }
  ],
  "summary": "This tutorial covers TypeScript Null & Undefined concepts and techniques. You'll learn how to use TypeScript Null & Undefined effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Null & Undefined and how to apply it in your projects."
}