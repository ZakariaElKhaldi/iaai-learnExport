{
  "id": "bb59be00-a033-4610-80af-42073323e253",
  "title": "TypeScript Keyof",
  "slug": "typescript-keyof",
  "metadata": {
    "description": "Learn about TypeScript Keyof with clear explanations and practical examples.",
    "keywords": [
      "c",
      "keyof",
      "person",
      "type",
      "property",
      "name",
      "string",
      "stringmap",
      "used",
      "keys",
      "index"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Keyof"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Keyof",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "keyof\nis a keyword in TypeScript which is used to extract the key type from an object type.\nkeyof\nwith explicit keys\nWhen used on an object type with explicit keys,\nkeyof\ncreates a union type with those keys.\nExample\ninterface Person {\nname: string;\nage: number;\n}\n// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\"\n\nkeyof\nwith index signatures\nkeyof\ncan also be used with index signatures to extract the index type.\ntype StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\nreturn { [property]: value };\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "interface Person {\nname: string;\nage: number;\n}\n// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "type StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\nreturn { [property]: value };\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "interface Person {\nname: string;\nage: number;\n}\n# TODO: Complete this line\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\"",
      "solution": "interface Person {\nname: string;\nage: number;\n}\n// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\""
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\n# TODO: Complete this line\n}",
      "solution": "type StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\nreturn { [property]: value };\n}"
    }
  ],
  "related_topics": [
    {
      "id": "f46d3116-5bf6-4ae0-b0e1-1e7799a3d185",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c0547d77-eb94-451c-aa90-b4a51cb43990",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c6687157-79cb-4e04-a39d-9c020a2356fe",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is TypeScript Keyof\n\nkeyof\nis a keyword in TypeScript which?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "used to extract the key type from an object type"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of TypeScript Keyof\n\nkeyof\nis a keyword in TypeScript which is 'used to extract the key type from an object type'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript Keyof concepts and techniques. You'll learn how to use TypeScript Keyof effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Keyof and how to apply it in your projects."
}