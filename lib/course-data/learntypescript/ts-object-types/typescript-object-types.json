{
  "id": "cf193d89-0a8f-4055-a77e-b2a0d08b50d1",
  "title": "TypeScript Object Types",
  "slug": "typescript-object-types",
  "metadata": {
    "description": "Learn about TypeScript Object Types with clear explanations and practical examples.",
    "keywords": [
      "c",
      "type",
      "string",
      "number",
      "types",
      "const",
      "error",
      "mileage",
      "typescript",
      "example",
      "toyota"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Object Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Object Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript has a specific syntax for typing objects.\nRead more about objects in our\nJavaScript Objects chapter\n.\nExample\nconst car: { type: string, model: string, year: number } = {\ntype: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2009\n};\n\nObject types like this can also be written separately, and even be reused, look at\ninterfaces\nfor more details.\nType Inference\nTypeScript can infer the types of properties based on their values.\nExample\nconst car = {\ntype: \"Toyota\",\n};\ncar.type = \"Ford\"; // no error\ncar.type = 2; // Error: Type 'number' is not assignable to type 'string'.\n\nOptional Properties\nOptional properties are properties that don't have to be defined in the object definition.\nExample without an optional property\nconst car: { type: string, mileage: number } = { // Error: Property 'mileage' is missing in type '{ type: string;\n      }' but required in type '{ type: string; mileage: number; }'.\ntype: \"Toyota\",\n};\ncar.mileage = 2000;\nExample with an optional property\nconst car: { type: string, mileage?: number } = { // no error\ntype: \"Toyota\"\n};\ncar.mileage = 2000;\n\nIndex Signatures\nIndex signatures can be used for objects without a defined list of properties.\nExample\nconst nameAgeMap: { [index: string]: number } = {};\nnameAgeMap.Jack = 25; // no error\nnameAgeMap.Mark = \"Fifty\"; // Error: Type 'string' is not assignable to type 'number'.\n\nIndex signatures like this one can also be expressed with utility types like\nRecord<string, number>\n.\nLearn more about utility types like this in our\nTypeScript Utility Types\nchapter.\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nAdd the correct types for the object below:\nconst car: { type:\n, model:\n, year:\n} = {\n  type: \"Toyota\",\n  model: \"Corolla\",\n  year: 2009\n};\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const car: { type: string, model: string, year: number } = {\ntype: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2009\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const car = {\ntype: \"Toyota\",\n};\ncar.type = \"Ford\"; // no error\ncar.type = 2; // Error: Type 'number' is not assignable to type 'string'.",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example without an optional property",
      "content": "",
      "order": 5,
      "code": "const car: { type: string, mileage: number } = { // Error: Property 'mileage' is missing in type '{ type: string;\n      }' but required in type '{ type: string; mileage: number; }'.\ntype: \"Toyota\",\n};\ncar.mileage = 2000;",
      "language": "javascript",
      "explanation": "Example of example without an optional property"
    },
    {
      "type": "code_example",
      "title": "Example with an optional property",
      "content": "",
      "order": 6,
      "code": "const car: { type: string, mileage?: number } = { // no error\ntype: \"Toyota\"\n};\ncar.mileage = 2000;",
      "language": "javascript",
      "explanation": "Example of example with an optional property"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const nameAgeMap: { [index: string]: number } = {};\nnameAgeMap.Jack = 25; // no error\nnameAgeMap.Mark = \"Fifty\"; // Error: Type 'string' is not assignable to type 'number'.",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const car: { type: string, model: string, year: number } = {\ntype: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2009\n# TODO: Complete this line",
      "solution": "const car: { type: string, model: string, year: number } = {\ntype: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2009\n};"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const car = {\n# TODO: Complete this line\n};\ncar.type = \"Ford\"; // no error\ncar.type = 2; // Error: Type 'number' is not assignable to type 'string'.",
      "solution": "const car = {\ntype: \"Toyota\",\n};\ncar.type = \"Ford\"; // no error\ncar.type = 2; // Error: Type 'number' is not assignable to type 'string'."
    }
  ],
  "related_topics": [
    {
      "id": "8dfd2125-46aa-45be-94f3-766b8fd97e15",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "00da215e-9abf-47d6-a80e-0f9856995fb3",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "65582d74-e695-41f1-88a9-e8233d64187a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Optional Properties\nOptional properties?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Not a Optional Properties\nOptional properties.",
        "properties that don't have to be defined in the object definition"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Optional Properties\nOptional properties is 'properties that don't have to be defined in the object definition'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript Object Types concepts and techniques. You'll learn how to use TypeScript Object Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Object Types and how to apply it in your projects."
}