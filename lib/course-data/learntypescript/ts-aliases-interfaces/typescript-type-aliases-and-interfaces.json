{
  "id": "58dc9642-03c9-4c8c-890c-d539f1b1fb65",
  "title": "TypeScript Type Aliases and Interfaces",
  "slug": "typescript-type-aliases-and-interfaces",
  "metadata": {
    "description": "Learn about TypeScript Type Aliases and Interfaces with clear explanations and practical examples.",
    "keywords": [
      "c",
      "type",
      "cartype",
      "aliases",
      "interfaces",
      "const",
      "types",
      "string",
      "caryear",
      "number",
      "carmodel"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Aliases & Interfaces"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Type Aliases and Interfaces",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript allows types to be defined separately from the variables that use them.\nAliases and Interfaces allows types to be easily shared between different variables/objects.\nType Aliases\nType Aliases allow defining types with a custom name (an Alias).\nType Aliases can be used for primitives like\nstring\nor more complex types such as\nobjects\nand\narrays\n:\nExample\ntype CarYear = number\ntype CarType = string\ntype CarModel = string\ntype Car = {\nyear: CarYear,\ntype: CarType,\nmodel: CarModel\n}\nconst carYear: CarYear = 2001\nconst carType: CarType = \"Toyota\"\nconst carModel: CarModel = \"Corolla\"\nconst car: Car = {\nyear: carYear,\ntype: carType,\nmodel: carModel\n};\n\nInterfaces\nInterfaces are similar to type aliases, except they\nonly\napply to\nobject\ntypes.\nExample\ninterface Rectangle {\nheight: number,\nwidth: number\n}\nconst rectangle: Rectangle = {\nheight: 20,\nwidth: 10\n};\n\nExtending Interfaces\nInterfaces can extend each other's definition.\nExtending\nan interface means you are creating a new interface with the same properties as the original, plus something new.\nExample\ninterface Rectangle {\nheight: number,\nwidth: number\n}\ninterface ColoredRectangle extends Rectangle {\ncolor: string\n}\nconst coloredRectangle: ColoredRectangle = {\nheight: 20,\nwidth: 10,\ncolor: \"red\"\n};\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nCreate a Type Alias for a string, called carType:\ncarType =\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "type CarYear = number\ntype CarType = string\ntype CarModel = string\ntype Car = {\nyear: CarYear,\ntype: CarType,\nmodel: CarModel\n}\nconst carYear: CarYear = 2001\nconst carType: CarType = \"Toyota\"\nconst carModel: CarModel = \"Corolla\"\nconst car: Car = {\nyear: carYear,\ntype: carType,\nmodel: carModel\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "interface Rectangle {\nheight: number,\nwidth: number\n}\nconst rectangle: Rectangle = {\nheight: 20,\nwidth: 10\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "interface Rectangle {\nheight: number,\nwidth: number\n}\ninterface ColoredRectangle extends Rectangle {\ncolor: string\n}\nconst coloredRectangle: ColoredRectangle = {\nheight: 20,\nwidth: 10,\ncolor: \"red\"\n};",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type CarYear = number\ntype CarType = string\ntype CarModel = string\ntype Car = {\nyear: CarYear,\ntype: CarType,\nmodel: CarModel\n}\nconst carYear: CarYear = 2001\nconst carType: CarType = \"Toyota\"\nconst carModel: CarModel = \"Corolla\"\n# TODO: Complete this line\nyear: carYear,\ntype: carType,\nmodel: carModel\n};",
      "solution": "type CarYear = number\ntype CarType = string\ntype CarModel = string\ntype Car = {\nyear: CarYear,\ntype: CarType,\nmodel: CarModel\n}\nconst carYear: CarYear = 2001\nconst carType: CarType = \"Toyota\"\nconst carModel: CarModel = \"Corolla\"\nconst car: Car = {\nyear: carYear,\ntype: carType,\nmodel: carModel\n};"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "interface Rectangle {\n# TODO: Complete this line\nwidth: number\n}\nconst rectangle: Rectangle = {\nheight: 20,\nwidth: 10\n};",
      "solution": "interface Rectangle {\nheight: number,\nwidth: number\n}\nconst rectangle: Rectangle = {\nheight: 20,\nwidth: 10\n};"
    }
  ],
  "related_topics": [
    {
      "id": "4841f992-681c-4d60-897e-8b19f02820b4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "23a26221-370d-48b6-9dd8-98910ae707e1",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0b3939f3-f65e-405a-8e76-8fab49c4f149",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Interfaces\nInterfaces?",
      "options": [
        "None of the above.",
        "None of the above.",
        "similar to type aliases",
        "creating a new interface with the same properties as the original"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Interfaces\nInterfaces is 'similar to type aliases'."
    },
    {
      "question": "What is Extending\nan interface means you?",
      "options": [
        "None of the above.",
        "None of the above.",
        "similar to type aliases",
        "creating a new interface with the same properties as the original"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Extending\nan interface means you is 'creating a new interface with the same properties as the original'."
    }
  ],
  "summary": "This tutorial covers TypeScript Type Aliases and Interfaces concepts and techniques. You'll learn how to use TypeScript Type Aliases and Interfaces effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Type Aliases and Interfaces and how to apply it in your projects."
}