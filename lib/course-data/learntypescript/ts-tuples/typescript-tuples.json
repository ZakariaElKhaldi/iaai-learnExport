{
  "id": "89d6d699-7eaf-4335-9139-89b2f4a7cd0a",
  "title": "TypeScript Tuples",
  "slug": "typescript-tuples",
  "metadata": {
    "description": "Learn about TypeScript Tuples with clear explanations and practical examples.",
    "keywords": [
      "c",
      "tuple",
      "tuples",
      "number",
      "ourtuple",
      "example",
      "string",
      "value",
      "boolean",
      "readonly",
      "define"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Tuples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Tuples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Typed Arrays\nA\ntuple\nis a typed\narray\nwith a pre-defined length and types for each index.\nTuples are great because they allow each element in the array to be a known type of value.\nTo define a tuple, specify the type of each element in the array:\nExample\n// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];\n\nAs you can see we have a number, boolean and a string. But what happens if we try to set them in the wrong order:\nExample\n// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialized incorrectly which throws an error\nourTuple = [false, 'Coding God was mistaken', 5];\n\nEven though we have a\nboolean\n,\nstring\n,\n            and\nnumber\nthe order matters in our tuple and will throw an error.\nReadonly Tuple\nA good practice is to make your\ntuple\nreadonly\n.\nTuples only have strongly defined types for the initial values:\nExample\n// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];\n// We have no type safety in our tuple for indexes 3+\nourTuple.push('Something new and wrong');\nconsole.log(ourTuple);\n\nYou see the new valueTuples only have strongly defined types for the initial values:\nExample\n// define our readonly tuple\nconst ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n// throws error as it is readonly.\nourReadonlyTuple.push('Coding God took a day off');\n\nTo learn more about access modifiers like\nreadonly\ngo to our section on them here:\nTypeScript Classes\n.\nIf you have ever used React before you have worked with tuples more than likely.\nuseState\nreturns a tuple of the value and a setter function.\nconst [firstName, setFirstName] = useState('Dylan')\nis a common example.\nBecause of the structure we know our first value in our list will be a certain value type in this case a\nstring\nand the second value a\nfunction\n.\nNamed Tuples\nNamed tuples\nallow us to provide context for our values at each index.\nExample\nconst graph: [x: number, y: number] = [55.2, 41.3];\nNamed tuples\nprovide more context for what our index values represent.\nDestructuring Tuples\nSince tuples are arrays we can also destructure them.\nExample\nconst graph: [number, number] = [55.2, 41.3];\nconst [x, y] = graph;\nTo review destructuring check it out\nhere\n.\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nThe order of value types does not matter for Tuples:\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialized incorrectly which throws an error\nourTuple = [false, 'Coding God was mistaken', 5];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];\n// We have no type safety in our tuple for indexes 3+\nourTuple.push('Something new and wrong');\nconsole.log(ourTuple);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// define our readonly tuple\nconst ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n// throws error as it is readonly.\nourReadonlyTuple.push('Coding God took a day off');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const graph: [x: number, y: number] = [55.2, 41.3];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const graph: [number, number] = [55.2, 41.3];\nconst [x, y] = graph;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\n# TODO: Complete this line",
      "solution": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialized incorrectly which throws an error\n# TODO: Complete this line",
      "solution": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialized incorrectly which throws an error\nourTuple = [false, 'Coding God was mistaken', 5];"
    }
  ],
  "related_topics": [
    {
      "id": "b292f659-aa06-453c-ad8e-5cad6db5580b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e28fe899-ca3b-450e-9fef-0867a820a592",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c8ccd16f-1b07-46d5-89e4-1715f71bf68d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is TypeScript Tuples\n\nTyped Arrays\nA\ntuple?",
      "options": [
        "great because they allow each element in the array to be a known type of value",
        "None of the above.",
        "None of the above.",
        "a typed\narray\nwith a pre-defined length and types for each index"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of TypeScript Tuples\n\nTyped Arrays\nA\ntuple is 'a typed\narray\nwith a pre-defined length and types for each index'."
    },
    {
      "question": "What is Tuples?",
      "options": [
        "None of the above.",
        "a typed\narray\nwith a pre-defined length and types for each index",
        "great because they allow each element in the array to be a known type of value",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Tuples is 'great because they allow each element in the array to be a known type of value'."
    }
  ],
  "summary": "This tutorial covers TypeScript Tuples concepts and techniques. You'll learn how to use TypeScript Tuples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Tuples and how to apply it in your projects."
}