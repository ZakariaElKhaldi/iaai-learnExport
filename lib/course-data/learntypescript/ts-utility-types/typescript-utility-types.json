{
  "id": "4b7d944e-290e-47c6-9384-c998021eb2f3",
  "title": "TypeScript Utility Types",
  "slug": "typescript-utility-types",
  "metadata": {
    "description": "Learn about TypeScript Utility Types with clear explanations and practical examples.",
    "keywords": [
      "c",
      "number",
      "type",
      "string",
      "person",
      "name",
      "example",
      "interface",
      "const",
      "types",
      "object"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Utility Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Utility Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript comes with a large number of types that can help with some common type manipulation, usually referred to as utility types.\nThis chapter covers the most popular utility types.\nPartial\nPartial\nchanges all the properties in an object to be optional.\nExample\ninterface Point {\nx: number;\ny: number;\n}\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional\npointPart.x = 10;\n\nRequired\nRequired\nchanges all the properties in an object to be required.\nExample\ninterface Car {\nmake: string;\nmodel: string;\nmileage?: number;\n}\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};\n\nRecord\nRecord\nis a shortcut to defining an object type with a specific key type and value type.\nExample\nconst nameAgeMap: Record<string, number> = {\n'Alice': 21,\n'Bob': 25\n};\n\nRecord<string, number>\nis equivalent to\n{ [key: string]: number }\nOmit\nOmit\nremoves keys from an object type.\nExample\ninterface Person {\nname: string;\nage: number;\nlocation?: string;\n}\nconst bob: Omit<Person, 'age' | 'location'> = {\nname: 'Bob'\n// `Omit` has removed age and location from the type and they can't be defined here\n};\n\nPick\nPick\nremoves all but the specified keys from an object type.\nExample\ninterface Person {\nname: string;\nage: number;\nlocation?: string;\n}\nconst bob: Pick<Person, 'name'> = {\nname: 'Bob'\n// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n};\n\nExclude\nExclude\nremoves types from a union.\nExample\ntype Primitive = string | number | boolean\nconst value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.\n\nReturnType\nReturnType\nextracts the return type of a function type.\nExample\ntype PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\nx: 10,\ny: 20\n};\n\nParameters\nParameters\nextracts the parameter types of a function type as an array.\nExample\ntype PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\nx: 10,\ny: 20\n};\n\nReadonly\nReadonly\nis used to create a new type where all properties are readonly, meaning they cannot be modified once assigned a value.\nKeep in mind TypeScript will prevent this at compile time, but in theory since it is compiled down to JavaScript you can still override a readonly property.\nExample\ninterface Person {\nname: string;\nage: number;\n}\nconst person: Readonly<Person> = {\nname: \"Dylan\",\nage: 35,\n};\nperson.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nDeclare an object kindPerson from the Person interface, where all the properties are optional:\ninterface Person {\n    age: number;\n    firstName: string;\n    lastName: string;\n}\n\nlet\n:\n= {};\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "interface Point {\nx: number;\ny: number;\n}\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional\npointPart.x = 10;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "interface Car {\nmake: string;\nmodel: string;\nmileage?: number;\n}\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const nameAgeMap: Record<string, number> = {\n'Alice': 21,\n'Bob': 25\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\nconst bob: Omit<Person, 'age' | 'location'> = {\nname: 'Bob'\n// `Omit` has removed age and location from the type and they can't be defined here\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\nconst bob: Pick<Person, 'name'> = {\nname: 'Bob'\n// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "type Primitive = string | number | boolean\nconst value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "type PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\nx: 10,\ny: 20\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "type PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\nx: 10,\ny: 20\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "interface Person {\nname: string;\nage: number;\n}\nconst person: Readonly<Person> = {\nname: \"Dylan\",\nage: 35,\n};\nperson.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "interface Point {\nx: number;\ny: number;\n# TODO: Complete this line\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional\npointPart.x = 10;",
      "solution": "interface Point {\nx: number;\ny: number;\n}\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional\npointPart.x = 10;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "interface Car {\nmake: string;\n# TODO: Complete this line\nmileage?: number;\n}\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};",
      "solution": "interface Car {\nmake: string;\nmodel: string;\nmileage?: number;\n}\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};"
    }
  ],
  "related_topics": [
    {
      "id": "b106cb6e-402e-49fb-bfd0-f49c4dd4d43b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "63868819-15e6-440d-a9ff-9c519c5f1bae",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e8fc2d23-b8cc-48d4-95c7-fd1595138c04",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Record\nRecord?",
      "options": [
        "a shortcut to defining an object type with a specific key type and value type",
        "Not a Record\nRecord.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Record\nRecord is 'a shortcut to defining an object type with a specific key type and value type'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript Utility Types concepts and techniques. You'll learn how to use TypeScript Utility Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Utility Types and how to apply it in your projects."
}