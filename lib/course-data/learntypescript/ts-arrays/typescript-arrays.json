{
  "id": "43b4ef2a-3186-4290-8f14-812315d9b63b",
  "title": "TypeScript Arrays",
  "slug": "typescript-arrays",
  "metadata": {
    "description": "Learn about TypeScript Arrays with clear explanations and practical examples.",
    "keywords": [
      "c",
      "type",
      "names",
      "string",
      "push",
      "error",
      "readonly",
      "typescript",
      "arrays",
      "const",
      "number"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "TypeScript has a specific syntax for typing arrays.\nRead more about arrays in our\nJavaScript Array chapter\n.\nExample\nconst names: string[] = [];\nnames.push(\"Dylan\"); // no error\n// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.\n\nReadonly\nThe\nreadonly\nkeyword can prevent arrays from being changed.\nExample\nconst names: readonly string[] = [\"Dylan\"];\nnames.push(\"Jack\"); // Error: Property 'push' does not exist on type 'readonly string[]'.\n// try removing the readonly modifier and see if it works?\n\nType Inference\nTypeScript can infer the type of an array if it has values.\nExample\nconst numbers = [1, 2, 3]; // inferred to type number[]\nnumbers.push(4); // no error\n// comment line below out to see the successful assignment\nnumbers.push(\"2\"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.\nlet head: number = numbers[0]; // no error\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nPrevent the array from being changed:\nconst names:\nstring[] = [\"Dylan\"];\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const names: string[] = [];\nnames.push(\"Dylan\"); // no error\n// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const names: readonly string[] = [\"Dylan\"];\nnames.push(\"Jack\"); // Error: Property 'push' does not exist on type 'readonly string[]'.\n// try removing the readonly modifier and see if it works?",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const numbers = [1, 2, 3]; // inferred to type number[]\nnumbers.push(4); // no error\n// comment line below out to see the successful assignment\nnumbers.push(\"2\"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.\nlet head: number = numbers[0]; // no error",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const names: string[] = [];\nnames.push(\"Dylan\"); // no error\n# TODO: Complete this line",
      "solution": "const names: string[] = [];\nnames.push(\"Dylan\"); // no error\n// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'."
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const names: readonly string[] = [\"Dylan\"];\n# TODO: Complete this line\n// try removing the readonly modifier and see if it works?",
      "solution": "const names: readonly string[] = [\"Dylan\"];\nnames.push(\"Jack\"); // Error: Property 'push' does not exist on type 'readonly string[]'.\n// try removing the readonly modifier and see if it works?"
    }
  ],
  "related_topics": [
    {
      "id": "60b6c84b-c1f0-4e44-ba19-b4b0d433a85d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b66fde5a-00f0-4017-a8e1-faf5a7a96828",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8338fd25-7063-4905-a402-0e4ec54125df",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript Arrays concepts and techniques. You'll learn how to use TypeScript Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Arrays and how to apply it in your projects."
}