{
  "id": "a381689f-569f-4c92-a247-4c8897353d28",
  "title": "TypeScript Enums",
  "slug": "typescript-enums",
  "metadata": {
    "description": "Learn about TypeScript Enums with clear explanations and practical examples.",
    "keywords": [
      "c",
      "enum",
      "north",
      "enums",
      "cardinaldirections",
      "numeric",
      "west",
      "logs",
      "console",
      "value",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Enums"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Enums",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "An\nenum\nis a special \"class\" that represents a group of constants (unchangeable variables).\nEnums come in two flavors\nstring\nand\nnumeric\n. Lets start with numeric.\nNumeric Enums - Default\nBy default, enums will initialize the first value to\n0\nand add 1 to each additional value:\nExample\nenum CardinalDirections {\nNorth,\nEast,\nSouth,\nWest\n}\nlet currentDirection = CardinalDirections.North;\n// logs 0\nconsole.log(currentDirection);\n// throws error as 'North' is not a valid enum\ncurrentDirection = 'North'; // Error: \"North\" is not assignable to type 'CardinalDirections'.\n\nNumeric Enums - Initialized\nYou can set the value of the first numeric enum and have it auto increment from that:\nExample\nenum CardinalDirections {\nNorth = 1,\nEast,\nSouth,\nWest\n}\n// logs 1\nconsole.log(CardinalDirections.North);\n// logs 4\nconsole.log(CardinalDirections.West);\n\nNumeric Enums - Fully Initialized\nYou can assign unique number values for each enum value. Then the values will not incremented automatically:\nExample\nenum StatusCodes {\nNotFound = 404,\nSuccess = 200,\nAccepted = 202,\nBadRequest = 400\n}\n// logs 404\nconsole.log(StatusCodes.NotFound);\n// logs 200\nconsole.log(StatusCodes.Success);\n\nString Enums\nEnums can also contain\nstrings\n. This is more common than numeric enums, because of their readability and intent.\nExample\nenum CardinalDirections {\nNorth = 'North',\nEast = \"East\",\nSouth = \"South\",\nWest = \"West\"\n};\n// logs \"North\"\nconsole.log(CardinalDirections.North);\n// logs \"West\"\nconsole.log(CardinalDirections.West);\n\nTechnically, you can mix and match string and numeric enum values, but it is recommended not to do so.\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nCreate an enum called myEnum, with 2 constants (myFirstConst, mySecondConst) with default values:\nenum\n{\n,\n};\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "enum CardinalDirections {\nNorth,\nEast,\nSouth,\nWest\n}\nlet currentDirection = CardinalDirections.North;\n// logs 0\nconsole.log(currentDirection);\n// throws error as 'North' is not a valid enum\ncurrentDirection = 'North'; // Error: \"North\" is not assignable to type 'CardinalDirections'.",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "enum CardinalDirections {\nNorth = 1,\nEast,\nSouth,\nWest\n}\n// logs 1\nconsole.log(CardinalDirections.North);\n// logs 4\nconsole.log(CardinalDirections.West);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "enum StatusCodes {\nNotFound = 404,\nSuccess = 200,\nAccepted = 202,\nBadRequest = 400\n}\n// logs 404\nconsole.log(StatusCodes.NotFound);\n// logs 200\nconsole.log(StatusCodes.Success);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "enum CardinalDirections {\nNorth = 'North',\nEast = \"East\",\nSouth = \"South\",\nWest = \"West\"\n};\n// logs \"North\"\nconsole.log(CardinalDirections.North);\n// logs \"West\"\nconsole.log(CardinalDirections.West);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "enum CardinalDirections {\nNorth,\nEast,\nSouth,\nWest\n}\nlet currentDirection = CardinalDirections.North;\n# TODO: Complete this line\nconsole.log(currentDirection);\n// throws error as 'North' is not a valid enum\ncurrentDirection = 'North'; // Error: \"North\" is not assignable to type 'CardinalDirections'.",
      "solution": "enum CardinalDirections {\nNorth,\nEast,\nSouth,\nWest\n}\nlet currentDirection = CardinalDirections.North;\n// logs 0\nconsole.log(currentDirection);\n// throws error as 'North' is not a valid enum\ncurrentDirection = 'North'; // Error: \"North\" is not assignable to type 'CardinalDirections'."
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "enum CardinalDirections {\nNorth = 1,\nEast,\nSouth,\n# TODO: Complete this line\n}\n// logs 1\nconsole.log(CardinalDirections.North);\n// logs 4\nconsole.log(CardinalDirections.West);",
      "solution": "enum CardinalDirections {\nNorth = 1,\nEast,\nSouth,\nWest\n}\n// logs 1\nconsole.log(CardinalDirections.North);\n// logs 4\nconsole.log(CardinalDirections.West);"
    }
  ],
  "related_topics": [
    {
      "id": "5324456d-dc01-4a29-a1eb-4c435b0ad08c",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cd481eff-09c1-4c38-bd27-4993082b9c1c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4ff3151b-fee8-45ad-9124-ddc3000924f6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is TypeScript Enums\n\nAn\nenum?",
      "options": [
        "Not a TypeScript Enums\n\nAn\nenum.",
        "a special \"class\" that represents a group of constants (unchangeable variables)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of TypeScript Enums\n\nAn\nenum is 'a special \"class\" that represents a group of constants (unchangeable variables)'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers TypeScript Enums concepts and techniques. You'll learn how to use TypeScript Enums effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Enums and how to apply it in your projects."
}