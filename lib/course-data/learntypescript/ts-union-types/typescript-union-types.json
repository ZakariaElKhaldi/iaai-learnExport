{
  "id": "837e29d7-2c32-4289-bbfb-e6d4f89a613e",
  "title": "TypeScript Union Types",
  "slug": "typescript-union-types",
  "metadata": {
    "description": "Learn about TypeScript Union Types with clear explanations and practical examples.",
    "keywords": [
      "c",
      "number",
      "string",
      "code",
      "union",
      "type",
      "function",
      "printstatuscode",
      "touppercase",
      "types",
      "property"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnTypeScript",
    "subcategory": "TS Union Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "TypeScript Union Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Union types\nare used when a value can be more than a single type.\nSuch as when a property would be\nstring\nor\nnumber\n.\nUnion | (OR)\nUsing the\n|\nwe are saying our parameter is a\nstring\nor\nnumber\n:\nExample\nfunction printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code}.`)\n}\nprintStatusCode(404);\nprintStatusCode('404');\n\nUnion Type Errors\nNote:\nyou need to know what your type is when union types are being used to avoid type errors:\nExample\nfunction printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'\n}\nIn our example we are having an issue invoking\ntoUpperCase()\nas its a\nstring\nmethod and\nnumber\ndoesn't have access\n            to it.\n\nTypeScript Exercises\nTest Yourself With Exercises\nExercise:\nSpecify that the parameter \"myVar\" for the function can be either string or number:\nfunction myFunc(myVar:\n) {\n  console.log(myVar)\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code}.`)\n}\nprintStatusCode(404);\nprintStatusCode('404');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code}.`)\n# TODO: Complete this line\nprintStatusCode(404);\nprintStatusCode('404');",
      "solution": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code}.`)\n}\nprintStatusCode(404);\nprintStatusCode('404');"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'\n# TODO: Complete this line",
      "solution": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.\nProperty 'toUpperCase' does not exist on type 'number'\n}"
    }
  ],
  "related_topics": [
    {
      "id": "c2968023-b41b-4982-9910-381c6c08f123",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "21f402c0-6290-40f2-a53b-9fe8e23d2556",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d303382e-5c29-41fc-98f2-b2bf96b1723b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is TypeScript Union Types\n\nUnion types?",
      "options": [
        "a\nstring\nor\nnumber\n:\nExample\nfunction printStatusCode(code: string | number) {\nconsole",
        "used when a value can be more than a single type",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of TypeScript Union Types\n\nUnion types is 'used when a value can be more than a single type'."
    },
    {
      "question": "What is we are saying our parameter?",
      "options": [
        "a\nstring\nor\nnumber\n:\nExample\nfunction printStatusCode(code: string | number) {\nconsole",
        "None of the above.",
        "None of the above.",
        "used when a value can be more than a single type"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of we are saying our parameter is 'a\nstring\nor\nnumber\n:\nExample\nfunction printStatusCode(code: string | number) {\nconsole'."
    }
  ],
  "summary": "This tutorial covers TypeScript Union Types concepts and techniques. You'll learn how to use TypeScript Union Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of TypeScript Union Types and how to apply it in your projects."
}