{
  "title": "Sass Selector Functions",
  "url": "https://www.w3schools.com/sass/sass_functions_selector.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Sass Selector Functions",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Sass Selector Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The selector functions are used to check and manipulate selectors.",
      "html": "<p>The selector functions are used to check and manipulate selectors.\u00a0</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following table lists all selector functions in Sass:",
      "html": "<p>The following table lists all selector functions in Sass:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "javascript",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Function</th>\n<th>Description &amp; Example</th>\n</tr>\n<tr>\n<td>is-superselector(<em>super</em>, <em>sub</em>)</td>\n<td>Checks whether the <em>super</em> selector matches all the elements that\n    <em>sub</em> matches.<br/><br/>\n<strong>Example:</strong><br/>is-superselector(\"div\", \"div.myInput\")<br/>Result: true<br/>is-superselector(\"div.myInput\", \n    \"div\")<br/>Result: false<br/>is-superselector(\"div\", \n    \"div\")<br/>Result: true</td>\n</tr>\n<tr>\n<td>selector-append(<em>selectors</em>)</td>\n<td>Appends the second (and third/fourth etc.) selector to the first \n    selector.<br/><br/>\n<strong>Example:</strong><br/>selector-append(\"div\", \".myInput\")<br/>Result: div.myInput<br/>selector-append(\".warning\", \n    \"__a\")<br/>Result: .warning__a</td>\n</tr>\n<tr>\n<td>selector-extend(<em>selector</em>, <em>extendee</em>, <em>extender</em>)</td>\n<td>\u00a0</td>\n</tr>\n<tr>\n<td>selector-nest(<em>selectors</em>)</td>\n<td>Returns a new selector containing a nested list of CSS selectors based \n    on the list provided.<br/><br/>\n<strong>Example:</strong><br/>selector-nest(\"ul\", \"li\")<br/>Result: ul li<br/>selector-nest(\".warning\", \n    \"alert\", \"div\")<br/>Result: .warning div, alert div</td>\n</tr>\n<tr>\n<td>selector-parse(<em>selector</em>)</td>\n<td>Returns a list of strings contained in <em>selector</em> using the same \n    format as the parent selector.<br/><br/>\n<strong>Example:<br/></strong>selector-parse(\"h1 .myInput .warning\")<br/>Result: ('h1' '.myInput' \n    '.warning')</td>\n</tr>\n<tr>\n<td>selector-replace(<em>selector</em>, <em>original</em>, <em>replacement</em>)</td>\n<td>Returns a new selector with the selectors specified in <em>replacement</em> \n    in place of selectors specified in <em>original</em>.<br/><br/>\n<strong>Example:</strong><br/>selector-replace(\"p.warning\", \"p\", \"div\")<br/>Result: div.warning</td>\n</tr>\n<tr>\n<td>selector-unify(<em>selector1</em>, <em>selector2</em>)</td>\n<td>Returns a new selector that matches only elements matched by both <em>\n    selector1</em> and <em>selector2</em>.<br/><br/>\n<strong>Example:</strong><br/>selector-unify(\"myInput\", \".disabled\")<br/>Result: myInput.disabled<br/>\n    selector-unify(\"p\", \"h1\")<br/>Result: null</td>\n</tr>\n<tr>\n<td>simple-selectors(<em>selectors</em>)</td>\n<td>Returns a list of the individual selectors in <em>selectors</em>.<br/>\n<br/>\n<strong>Example:</strong><br/>simple-selectors(\"div.myInput\")<br/>Result: div, .myInput<br/>\n    simple-selectors(\"div.myInput:before\")<br/>Result: div, .myInput, \n    :before</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    }
  ]
}