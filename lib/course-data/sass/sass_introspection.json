{
  "title": "Sass Introspection Functions",
  "url": "https://www.w3schools.com/sass/sass_functions_introspection.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Sass Introspection Functions",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Sass Introspection Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The introspection functions are rarely used when building a stylesheet. However, they are valuable if something does not work properly - to figure out what's going on: like debugging functions.",
      "html": "<p>The introspection functions are rarely used when building a stylesheet. \nHowever, they are valuable if something does not work properly - to figure out \nwhat's going on: like debugging functions. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following table lists all introspection functions in Sass:",
      "html": "<p>The following table lists all introspection functions in Sass:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "javascript",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Function</th>\n<th>Description &amp; Example</th>\n</tr>\n<tr>\n<td>call(<em>function</em>, <em>arguments</em>...)</td>\n<td>Calls a function with arguments, and returns the result.</td>\n</tr>\n<tr>\n<td>content-exists()</td>\n<td>Checks whether the current mixin was passed a @content block.</td>\n</tr>\n<tr>\n<td>feature-exists(<em>feature</em>)</td>\n<td>Checks whether <em>feature</em> is supported by the current Sass \n    implementation.<br/><br/>\n<strong>Example:</strong><br/>feature-exists(\"at-error\");<br/>Result: true</td>\n</tr>\n<tr>\n<td>function-exists(<em>functionname</em>)</td>\n<td>Checks whether the specified function exists.<br/><br/>\n<strong>Example:</strong><br/>function-exists(\"nonsense\")<br/>Result: false</td>\n</tr>\n<tr>\n<td>get-function(<em>functionname</em>, css: false)</td>\n<td>Returns the specified function. If css is true, it returns a plain CSS \n    function instead.</td>\n</tr>\n<tr>\n<td>global-variable-exists(<em>variablename</em>)</td>\n<td>Checks whether the specified global variable exists.<br/><br/>\n<strong>Example:</strong><br/>variable-exists(a)<br/>Result: true</td>\n</tr>\n<tr>\n<td>inspect(<em>value</em>)</td>\n<td>Returns a string representation of <em>value</em>.</td>\n</tr>\n<tr>\n<td>mixin-exists(<em>mixinname</em>)</td>\n<td>Checks whether the specified mixin exists.<br/><br/>\n<strong>Example:</strong><br/>mixin-exists(\"important-text\")<br/>Result: true</td>\n</tr>\n<tr>\n<td>type-of(<em>value</em>)</td>\n<td>Returns the type of <em>value</em>. Can be number, string, color, list, \n    map, bool, null, function, arglist.<br/><br/>\n<strong>Example:</strong><br/>type-of(15px)<br/>Result: number<br/>type-of(#ff0000)<br/>Result: color</td>\n</tr>\n<tr>\n<td>unit(<em>number</em>)</td>\n<td>Returns the unit associated with a number.<br/><br/>\n<strong>Example:</strong><br/>unit(15px)<br/>Result: px</td>\n</tr>\n<tr>\n<td>unitless(<em>number</em>)</td>\n<td>Checks whether the specified number has a unit associated with it.<br/>\n<br/>\n<strong>Example:</strong><br/>unitless(15px)<br/>Result: false<br/>unitless(15)<br/>Result: true</td>\n</tr>\n<tr>\n<td>variable-exists(<em>variablename</em>)</td>\n<td>Checks whether the specified variable exists in the current scope.<br/>\n<br/>\n<strong>Example:</strong><br/>variable-exists(b)<br/>Result: true</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    }
  ]
}