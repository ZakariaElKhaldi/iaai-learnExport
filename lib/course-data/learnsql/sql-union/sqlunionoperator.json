{
  "id": "002a0cca-329b-44af-ad0b-504ec56c5051",
  "title": "SQLUNIONOperator",
  "slug": "sqlunionoperator",
  "metadata": {
    "description": "Learn about SQLUNIONOperator with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "union",
      "select",
      "city",
      "customers",
      "country",
      "suppliers",
      "statement",
      "values",
      "example",
      "table"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSQL",
    "subcategory": "SQL Union"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL\nUNION\nOperator",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The SQL UNION Operator\nThe\nUNION\noperator is used to combine the result-set of two or more\nSELECT\nstatements.\nEvery\nSELECT\nstatement within\nUNION\nmust have the same number \nof columns\nThe columns must also have similar data types\nThe columns in \n  every\nSELECT\nstatement must also be in the same order\nUNION Syntax\nSELECT\ncolumn_name(s)\nFROM\ntable1\nUNION\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;\nUNION ALL Syntax\nThe\nUNION\noperator selects only distinct values by default. To allow \nduplicate values, use\nUNION ALL\n:\nSELECT\ncolumn_name(s)\nFROM\ntable1\nUNION ALL\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;\nNote:\nThe column names in the result-set are usually equal to \nthe column names in the first\nSELECT\nstatement.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nCustomerID\nCustomerName\nContactName\nAddress\nCity\nPostalCode\nCountry\n1\nAlfreds Futterkiste\nMaria Anders\nObere Str. 57\nBerlin\n12209\nGermany\n2\nAna Trujillo Emparedados y helados\nAna Trujillo\nAvda. de la Constituci\u00f3n 2222\nM\u00e9xico D.F.\n05021\nMexico\n3\nAntonio Moreno Taquer\u00eda\nAntonio Moreno\nMataderos 2312\nM\u00e9xico D.F.\n05023\nMexico\nAnd a selection from the \"Suppliers\" table:\nSupplierID\nSupplierName\nContactName\nAddress\nCity\nPostalCode\nCountry\n1\nExotic Liquid\nCharlotte Cooper\n49 Gilbert St.\nLondon\nEC1 4SD\nUK\n2\nNew Orleans Cajun Delights\nShelley Burke\nP.O. Box 78934\nNew Orleans\n70117\nUSA\n3\nGrandma Kelly's Homestead\nRegina Murphy\n707 Oxford Rd.\nAnn Arbor\n48104\nUSA\nSQL UNION Example\nThe following SQL statement returns the cities \n(only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExample\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;\n\nNote:\nIf some customers or suppliers have the same city, each city will only be \nlisted once, because\nUNION\nselects only distinct values. Use\nUNION ALL\nto also select \nduplicate values!\nSQL UNION ALL Example\nThe following SQL statement returns the cities \n(duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExample\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;\n\nSQL UNION With WHERE\nThe following SQL statement returns the German cities \n(only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExample\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n\nSQL UNION ALL With WHERE\nThe following SQL statement returns the German cities (duplicate values also) from \nboth the \"Customers\" and the \"Suppliers\" table:\nExample\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n\nAnother UNION Example\nThe following SQL statement lists all customers and suppliers:\nExample\nSELECT 'Customer' AS Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;\n\nNotice the \"AS Type\" above - it is an alias.\nSQL \nAliases\nare used to give a table or a column a temporary name.\nAn alias only exists for the duration of the query. So, here we have created a \ntemporary column named \"Type\", that list whether the contact person is a \n\"Customer\" or a \"Supplier\".\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT\ncolumn_name(s)\nFROM\ntable1\nUNION\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT\ncolumn_name(s)\nFROM\ntable1\nUNION ALL\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "SELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "SELECT 'Customer' AS Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;",
      "language": "sql",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT\ncolumn_name(s)\nFROM\ntable1\n# TODO: Complete this line\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;",
      "solution": "SELECT\ncolumn_name(s)\nFROM\ntable1\nUNION\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT\ncolumn_name(s)\nFROM\ntable1\nUNION ALL\nSELECT\ncolumn_name(s)\nFROM\ntable2\n# TODO: Complete this line",
      "solution": "SELECT\ncolumn_name(s)\nFROM\ntable1\nUNION ALL\nSELECT\ncolumn_name(s)\nFROM\ntable2\n;"
    }
  ],
  "related_topics": [
    {
      "id": "268be41b-0a08-4b20-b8de-a33735666aca",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d48fb190-5e9c-4e67-a959-2ac6a2f7c546",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "db305ddc-b3b8-4b42-aec0-8efbf6e7c8f0",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SQL\nUNION\nOperator\n\nThe SQL UNION Operator\nThe\nUNION\noperator?",
      "options": [
        "None of the above.",
        "used to combine the result-set of two or more\nSELECT\nstatements",
        "usually equal to \nthe column names in the first\nSELECT\nstatement",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of SQL\nUNION\nOperator\n\nThe SQL UNION Operator\nThe\nUNION\noperator is 'used to combine the result-set of two or more\nSELECT\nstatements'."
    },
    {
      "question": "What is set?",
      "options": [
        "usually equal to \nthe column names in the first\nSELECT\nstatement",
        "None of the above.",
        "None of the above.",
        "used to combine the result-set of two or more\nSELECT\nstatements"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of set is 'usually equal to \nthe column names in the first\nSELECT\nstatement'."
    }
  ],
  "summary": "This tutorial covers SQLUNIONOperator concepts and techniques. You'll learn how to use SQLUNIONOperator effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SQLUNIONOperator and how to apply it in your projects."
}