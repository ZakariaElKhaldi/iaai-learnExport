{
  "id": "262325ff-8a17-454c-a5cf-f096eff1c51e",
  "title": "SQLNOT NULLConstraint",
  "slug": "sqlnot-nullconstraint",
  "metadata": {
    "description": "Learn about SQLNOT NULLConstraint with clear explanations and practical examples.",
    "keywords": [
      "c",
      "null",
      "table",
      "persons",
      "column",
      "alter",
      "constraint",
      "values",
      "create",
      "enforces",
      "accept"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSQL",
    "subcategory": "SQL Not Null"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL\nNOT NULL\nConstraint",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "SQL NOT NULL Constraint\nBy default, a column can hold NULL values.\nThe\nNOT NULL\nconstraint enforces a column to NOT accept NULL values.\nThis enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.\nSQL NOT NULL on CREATE TABLE\nThe following SQL ensures that the \"ID\", \"LastName\", and \n\"FirstName\" columns \nwill NOT accept NULL values when the \"Persons\" table is created:\nExample\nCREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) \n  NOT NULL,\nAge int\n);\nSQL NOT NULL on ALTER TABLE\nTo create a\nNOT NULL\nconstraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL:\nSQL Server / MS Access:\nALTER TABLE Persons\nALTER COLUMN Age int NOT NULL;\nMy SQL / Oracle (prior version 10G):\nALTER TABLE Persons\nMODIFY COLUMN Age int NOT NULL;\nOracle 10G and later:\nALTER TABLE Persons\nMODIFY Age int NOT NULL;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) \n  NOT NULL,\nAge int\n);",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "ALTER TABLE Persons\nALTER COLUMN Age int NOT NULL;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "ALTER TABLE Persons\nMODIFY COLUMN Age int NOT NULL;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "ALTER TABLE Persons\nMODIFY Age int NOT NULL;",
      "language": "sql",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "CREATE TABLE Persons (\n# TODO: Complete this line\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) \n  NOT NULL,\nAge int\n);",
      "solution": "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) \n  NOT NULL,\nAge int\n);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your sql code here",
      "solution": "ALTER TABLE Persons\nALTER COLUMN Age int NOT NULL;"
    }
  ],
  "related_topics": [
    {
      "id": "33d63637-7753-4e46-afa5-a224cb859bf2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "161a7c5a-5d81-4b15-b2f7-e9f26d0942bd",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e1bbe3b9-9012-4b50-b3bd-1c7a34de3058",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "that you cannot insert a new record",
        "created:\nExample\nCREATE TABLE Persons (\nID int NOT NULL",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'that you cannot insert a new record'."
    },
    {
      "question": "What is table?",
      "options": [
        "None of the above.",
        "that you cannot insert a new record",
        "None of the above.",
        "created:\nExample\nCREATE TABLE Persons (\nID int NOT NULL"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of table is 'created:\nExample\nCREATE TABLE Persons (\nID int NOT NULL'."
    }
  ],
  "summary": "This tutorial covers SQLNOT NULLConstraint concepts and techniques. You'll learn how to use SQLNOT NULLConstraint effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SQLNOT NULLConstraint and how to apply it in your projects."
}