{
  "id": "e12739e7-6d7c-4f6d-99b1-202f2c04eabd",
  "title": "SQLData Types for MySQL, SQL Server, and MS Access",
  "slug": "sqldata-types-for-mysql-sql-server-and-ms-access",
  "metadata": {
    "description": "Learn about SQLData Types for MySQL, SQL Server, and MS Access with clear explanations and practical examples.",
    "keywords": [
      "data",
      "bytes",
      "size",
      "length",
      "number",
      "value",
      "maximum",
      "type",
      "parameter",
      "types"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 10,
    "category": "LearnSQL",
    "subcategory": "SQL Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL\nData Types for MySQL, SQL Server, and MS Access",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The data type of a column defines what value the column can hold: \ninteger, character, money, date and time, binary, \nand so on.\nSQL Data Types\nEach column in a database table is required to have a name and a data type.\nAn SQL developer must decide what type of data that will be stored inside each \ncolumn when creating a table. The data type is a \nguideline for SQL to understand what type of data is expected inside of each \ncolumn, and it also identifies how SQL will interact with the stored data.\nNote:\nData types might have different names in different database.\nAnd even if the name is the same, the size and other details may be different!\nAlways check the \ndocumentation!\nMySQL Data Types (Version 8.0)\nIn MySQL there are three main data types: string, numeric, and date and time.\nString Data Types\nData type\nDescription\nCHAR(size)\nA FIXED length string (can contain letters, numbers, and special characters). The\nsize\nparameter specifies the column length in characters - can be \n      from 0 to   255. Default is 1\nVARCHAR(size)\nA VARIABLE length string (can contain letters, numbers, and special \n      characters). The\nsize\nparameter specifies the maximum string \n      length in characters - can be from 0 to 65535\nBINARY(size)\nEqual to CHAR(), but stores binary byte strings. The\nsize\nparameter specifies the column length in bytes. Default is 1\nVARBINARY(size)\nEqual to VARCHAR(), but stores binary byte strings. The\nsize\nparameter specifies the maximum column length in bytes.\nTINYBLOB\nFor BLOBs (Binary Large Objects). Max length: 255 bytes\nTINYTEXT\nHolds a string with a maximum length of 255 characters\nTEXT(size)\nHolds a string with a maximum length of 65,535 bytes\nBLOB(size)\nFor BLOBs (Binary Large Objects). Holds up to 65,535 bytes of data\nMEDIUMTEXT\nHolds a string with a maximum length of 16,777,215 characters\nMEDIUMBLOB\nFor BLOBs (Binary Large Objects). Holds up to 16,777,215 bytes of data\nLONGTEXT\nHolds a string with a maximum length of 4,294,967,295 characters\nLONGBLOB\nFor BLOBs (Binary Large Objects). Holds up to 4,294,967,295 bytes of data\nENUM(val1, val2, val3, ...)\nA string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a   blank value will be inserted. \n      The values are sorted in the order you enter them\nSET(val1, val2, val3, ...)\nA string object that can have 0 or more values, chosen from a list of \n      possible values. You can list up to 64 values in a SET list\nNumeric Data Types\nData type\nDescription\nBIT(\nsize\n)\nA bit-value type. The number of bits per value is specified in\nsize\n. \n      The\nsize\nparameter can hold a value from 1 to 64. The default \n      value for\nsize\nis 1.\nTINYINT(\nsize\n)\nA very small integer. Signed range is from -128 to 127. Unsigned range \n      is from 0 to 255. The\nsize\nparameter specifies the maximum \n      display width (which is 255)\nBOOL\nZero is considered as false, nonzero values are considered as true.\nBOOLEAN\nEqual to BOOL\nSMALLINT(\nsize\n)\nA small integer. Signed range is from -32768 to 32767. Unsigned range \n      is from 0 to 65535. The\nsize\nparameter specifies the maximum \n      display width (which is 255)\nMEDIUMINT(\nsize\n)\nA medium integer. Signed range is from -8388608 to 8388607. Unsigned \n      range is from 0 to 16777215. The\nsize\nparameter specifies the \n      maximum display width (which is 255)\nINT(\nsize\n)\nA medium integer. Signed range is from -2147483648 to 2147483647. \n      Unsigned range is from 0 to 4294967295. The\nsize\nparameter \n      specifies the maximum display width (which is 255)\nINTEGER(\nsize\n)\nEqual to INT(size)\nBIGINT(\nsize\n)\nA large integer. Signed range is from -9223372036854775808 to \n      9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The\nsize\nparameter specifies the maximum display width (which is 255)\nFLOAT(\nsize\n,\nd\n)\nA floating point number. The total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter. This syntax is deprecated in MySQL 8.0.17, \n      and it will be removed in future MySQL versions\nFLOAT(\np\n)\nA floating point number. MySQL uses the\np\nvalue to determine \n      whether to use FLOAT or DOUBLE for the resulting data type. If\np\nis from 0 to 24, the data type becomes FLOAT(). If\np\nis from 25 to \n      53, the data type becomes DOUBLE()\nDOUBLE(\nsize\n,\nd\n)\nA normal-size floating point number. The total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter\nDOUBLE PRECISION(\nsize\n,\nd\n)\nDECIMAL(\nsize\n,\nd\n)\nAn exact fixed-point number. The   total number of digits is specified in\nsize\n. The   number of digits after the decimal point is specified \n      in the\nd\nparameter. The maximum number for\nsize\nis 65. \n      The maximum number for\nd\nis 30. The default value for\nsize\nis 10. The default value for\nd\nis 0.\nDEC(\nsize\n,\nd\n)\nEqual to DECIMAL(size,d)\nNote:\nAll the numeric data types may have an extra option: UNSIGNED \nor ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for \nthe column. If you add the ZEROFILL option, MySQL automatically also adds the \nUNSIGNED attribute to the column.\nDate and Time Data Types\nData type\nDescription\nDATE\nA date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'\nDATETIME(\nfsp\n)\nA date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. \n      Adding DEFAULT and ON UPDATE in the column definition to get automatic \n      initialization and updating to the current date and time\nTIMESTAMP(\nfsp\n)\nA timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD   \n      hh:mm:ss. The supported range is from '1970-01-01 00:00:01'   UTC to '2038-01-09 03:14:07' UTC. \n      Automatic initialization and updating to the current date and time can be \n      specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP \n      in the column definition\nTIME(\nfsp\n)\nA time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'\nYEAR\nA year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.\nMySQL 8.0 does not support year in two-digit format.\nMS SQL Server Data Types\nString Data Types\nData type\nDescription\nMax char length\nStorage\nchar(n)\nFixed-length non-Unicode character data (n must be between 1 and 8000)\n8,000\nn bytes (uses one byte for each character)\nvarchar(n)\nVariable-length non-Unicode character data (n must be between 1 and 8000)\n8,000\nn bytes + 2 bytes\nvarchar(max)\nVariable-length non-Unicode character data\nup to 2 GB\nnchar(n)\nFixed-length Unicode character data (n must be between 1 and 4000)\n4,000\n2 * n bytes (uses two bytes for each character)\nnvarchar(n)\nVariable-length Unicode character data (n must be between 1 and 4000)\n4,000\n2 * n bytes + 2 bytes (uses two bytes for each character)\nnvarchar(max)\nVariable-length Unicode character data\nup to 2 GB\nbinary(n)\nFixed-length binary data (n must be between 1 and 8000)\n8,000\nn bytes\nvarbinary(n)\nVariable-length binary data (n must be between 1 and 8000)\n8,000\nactual length of data entered + 2 bytes\nvarbinary(max)\nVariable-length binary data\n2GB\nNumeric Data Types\nData type\nDescription\nStorage\nbit\nInteger that can be 0, 1, or NULL\ntinyint\nAllows whole numbers from 0 to 255\n1 byte\nsmallint\nAllows whole numbers between -32,768 and 32,767\n2 bytes\nint\nAllows whole numbers between -2,147,483,648 and 2,147,483,647\n4 bytes\nbigint\nAllows whole numbers between -9,223,372,036,854,775,808 and   9,223,372,036,854,775,807\n8 bytes\ndecimal(p,s)\nFixed precision and scale numbers.\nAllows numbers from -10^38 +1 to 10^38 \u20131.\nThe p parameter indicates the maximum total number of digits that can  be stored (both to the left and to the right of the decimal point). p  must be a value from 1 to 38. Default is 18.\nThe s parameter indicates the maximum number of digits stored to the  right of the decimal point. s must be a value from 0 to p. Default value  is 0\n5-17 bytes\nnumeric(p,s)\nFixed precision and scale numbers.\nAllows numbers from -10^38 +1 to 10^38 \u20131.\nThe p parameter indicates the maximum total number of digits that can  be stored (both to the left and to the right of the decimal point). p  must be a value from 1 to 38. Default is 18.\nThe s parameter indicates the maximum number of digits stored to the  right of the decimal point. s must be a value from 0 to p. Default value  is 0\n5-17 bytes\nsmallmoney\nMonetary data from -214,748.3648 to 214,748.3647\n4 bytes\nmoney\nMonetary data from -922,337,203,685,477.5808 to   922,337,203,685,477.5807\n8 bytes\nfloat(n)\nFloating precision number data from -1.79E + 308 to 1.79E + 308.\nThe   n parameter indicates whether the field should hold 4 or 8 bytes.   float(24) holds a 4-byte field and float(53) holds an 8-byte field.   Default value of n is 53.\n4 or 8 bytes\nreal\nFloating precision number data from -3.40E + 38 to 3.40E + 38\n4 bytes\nDate and Time Data Types\nData type\nDescription\nStorage\ndatetime\nFrom January 1, 1753 to December 31, 9999 with an accuracy of 3.33   milliseconds\n8 bytes\ndatetime2\nFrom January 1, 0001 to December 31, 9999 with an accuracy of 100   nanoseconds\n6-8 bytes\nsmalldatetime\nFrom January 1, 1900 to June 6, 2079 with an accuracy of 1 minute\n4 bytes\ndate\nStore a date only. From January 1, 0001 to December 31, 9999\n3 bytes\ntime\nStore a time only to an accuracy of 100 nanoseconds\n3-5 bytes\ndatetimeoffset\nThe same as datetime2 with the addition of a time zone offset\n8-10 bytes\ntimestamp\nStores a unique number that gets updated every time a row gets created   or modified. The timestamp value is based upon an internal clock and does   not correspond to real time. Each table may have only one timestamp   variable\nOther Data Types\nData type\nDescription\nsql_variant\nStores up to 8,000 bytes of data of various data types, except text,   ntext, and timestamp\nuniqueidentifier\nStores a globally unique identifier (GUID)\nxml\nStores XML formatted data. Maximum 2GB\ncursor\nStores a reference to a cursor used for database operations\ntable\nStores a result-set for later processing\nMS Access Data Types\nData type\nDescription\nStorage\nText\nUse for text or combinations of text and numbers. 255 characters maximum\nMemo\nMemo is used for larger amounts of text. Stores up to 65,536 characters.\nNote:\nYou cannot sort a memo field. However, they are   searchable\nByte\nAllows whole numbers from 0 to 255\n1 byte\nInteger\nAllows whole numbers between -32,768 and 32,767\n2 bytes\nLong\nAllows whole numbers between -2,147,483,648 and 2,147,483,647\n4 bytes\nSingle\nSingle precision floating-point. Will handle most decimals\n4 bytes\nDouble\nDouble precision floating-point. Will handle most decimals\n8 bytes\nCurrency\nUse for currency. Holds up to 15 digits of whole dollars, plus 4 decimal places.\nTip:\nYou can choose which country's currency to use\n8 bytes\nAutoNumber\nAutoNumber fields automatically give each record its own number, usually starting at 1\n4 bytes\nDate/Time\nUse for dates and times\n8 bytes\nYes/No\nA logical field can be displayed as Yes/No, True/False, or On/Off. In code, use the constants True and False (equivalent to -1 and 0).\nNote:\nNull values are not allowed in Yes/No fields\n1 bit\nOle Object\nCan store pictures, audio, video, or other BLOBs (Binary Large Objects)\nup to 1GB\nHyperlink\nContain links to other files, including web pages\nLookup Wizard\nLet you type a list of options, which can then be chosen from a drop-down list\n4 bytes\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b9537d23-b300-4504-b10e-5bab318d33f2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "190f2b2d-25c3-4f28-8f03-925e14f723f5",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f8b365c5-d648-4e85-b21c-6678ee5e4e57",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SQL Data Types\nEach column in a database table?",
      "options": [
        "required to have a name and a data type",
        "None of the above.",
        "None of the above.",
        "expected inside of each \ncolumn"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of SQL Data Types\nEach column in a database table is 'required to have a name and a data type'."
    },
    {
      "question": "What is The data type is a \nguideline for SQL to understand what type of data?",
      "options": [
        "None of the above.",
        "None of the above.",
        "expected inside of each \ncolumn",
        "required to have a name and a data type"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The data type is a \nguideline for SQL to understand what type of data is 'expected inside of each \ncolumn'."
    }
  ],
  "summary": "SQL\nData Types for MySQL, SQL Server, and MS Access"
}