{
  "id": "8a082e66-3615-4f9f-a234-80ac52748a4b",
  "title": "SQLStored Procedures for SQL Server",
  "slug": "sqlstored-procedures-for-sql-server",
  "metadata": {
    "description": "Learn about SQLStored Procedures for SQL Server with clear explanations and practical examples.",
    "keywords": [
      "c",
      "procedure",
      "stored",
      "city",
      "customers",
      "example",
      "selectallcustomers",
      "postalcode",
      "execute",
      "create",
      "exec"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSQL",
    "subcategory": "SQL Stored Procedures"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL\nStored Procedures for SQL Server",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is a Stored Procedure?\nA stored procedure is a prepared SQL code that you can save, so the \ncode can be reused over and over again.\nSo if you have an SQL query that you write over and over again, save \nit as a stored procedure, and then just call it to execute it.\nYou can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) \nthat is passed.\nStored Procedure Syntax\nCREATE PROCEDURE\nprocedure_name\nAS\nsql_statement\nGO;\nExecute a Stored Procedure\nEXEC\nprocedure_name\n;\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nCustomerID\nCustomerName\nContactName\nAddress\nCity\nPostalCode\nCountry\n1\nAlfreds Futterkiste\nMaria Anders\nObere Str. 57\nBerlin\n12209\nGermany\n2\nAna Trujillo Emparedados y helados\nAna Trujillo\nAvda. de la Constituci\u00f3n 2222\nM\u00e9xico D.F.\n05021\nMexico\n3\nAntonio Moreno Taquer\u00eda\nAntonio Moreno\nMataderos 2312\nM\u00e9xico D.F.\n05023\nMexico\n4\nAround the Horn\nThomas Hardy\n120 Hanover Sq.\nLondon\nWA1 1DP\nUK\n5\nBerglunds snabbk\u00f6p\nChristina Berglund\nBerguvsv\u00e4gen 8\nLule\u00e5\nS-958 22\nSweden\nStored Procedure Example\nThe following SQL statement creates a stored procedure named \"SelectAllCustomers\" \nthat selects all records from the \"Customers\" table:\nExample\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;\nExecute the stored procedure above as follows:\nExample\nEXEC SelectAllCustomers;\nStored Procedure With One Parameter\nThe following SQL statement creates a stored procedure  \nthat selects Customers from a particular City from the \"Customers\" table:\nExample\nCREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30)\nAS\nSELECT * FROM Customers WHERE \n  City = @City\nGO;\nExecute the stored procedure above as follows:\nExample\nEXEC SelectAllCustomers @City = 'London';\nStored Procedure With Multiple Parameters\nSetting up multiple parameters is very easy. Just list each parameter and the \ndata type separated by a comma as shown below.\nThe following SQL statement creates a stored procedure  \nthat selects Customers from a particular City with a particular PostalCode from the \"Customers\" table:\nExample\nCREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30), @PostalCode nvarchar(10)\nAS\nSELECT * FROM Customers WHERE \n  City = @City AND PostalCode = @PostalCode\nGO;\nExecute the stored procedure above as follows:\nExample\nEXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "CREATE PROCEDURE\nprocedure_name\nAS\nsql_statement\nGO;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "EXEC\nprocedure_name\n;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "CREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "EXEC SelectAllCustomers;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "CREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30)\nAS\nSELECT * FROM Customers WHERE \n  City = @City\nGO;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "EXEC SelectAllCustomers @City = 'London';",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "CREATE PROCEDURE SelectAllCustomers \n  @City nvarchar(30), @PostalCode nvarchar(10)\nAS\nSELECT * FROM Customers WHERE \n  City = @City AND PostalCode = @PostalCode\nGO;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';",
      "language": "sql",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "CREATE PROCEDURE\nprocedure_name\nAS\n# TODO: Complete this line\nGO;",
      "solution": "CREATE PROCEDURE\nprocedure_name\nAS\nsql_statement\nGO;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "EXEC\nprocedure_name\n# TODO: Complete this line",
      "solution": "EXEC\nprocedure_name\n;"
    }
  ],
  "related_topics": [
    {
      "id": "21318835-d450-4687-8148-846b4c437254",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "372c6eca-8e61-432e-ad64-9326ec5f756a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ffb18914-8654-4061-b1c5-25c78706d986",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SQL\nStored Procedures for SQL Server\n\nWhat?",
      "options": [
        "a prepared SQL code that you can save",
        "a Stored Procedure",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of SQL\nStored Procedures for SQL Server\n\nWhat is 'a Stored Procedure'."
    },
    {
      "question": "What is A stored procedure?",
      "options": [
        "a prepared SQL code that you can save",
        "a Stored Procedure",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of A stored procedure is 'a prepared SQL code that you can save'."
    }
  ],
  "summary": "This tutorial covers SQLStored Procedures for SQL Server concepts and techniques. You'll learn how to use SQLStored Procedures for SQL Server effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SQLStored Procedures for SQL Server and how to apply it in your projects."
}