{
  "id": "ee99015c-497f-45eb-b1da-f69edc90f62c",
  "title": "SQLJOIN Keyword",
  "slug": "sqljoin-keyword",
  "metadata": {
    "description": "Learn about SQLJOIN Keyword with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "orders",
      "customers",
      "join",
      "table",
      "rows",
      "left",
      "right",
      "customerid",
      "returns",
      "inner"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSQL",
    "subcategory": "JOIN"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL\nJOIN Keyword",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Reference\n\n\u276f\nINNER JOIN\nThe\nINNER JOIN\ncommand returns rows that have matching values in both tables.\nThe following SQL selects all orders with customer information:\nExample\nSELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;\n\nNote:\nThe INNER JOIN keyword selects all rows from both \ntables as long as there is a match between the columns. If there are records in the \n\"Orders\" table that do not have matches in \"Customers\", these orders will not \nbe shown!\nThe following SQL statement selects all orders with customer and shipper \ninformation:\nExample\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM \n  ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);\n\nLEFT JOIN\nThe\nLEFT JOIN\ncommand returns all rows from \nthe left table, and the matching rows from the right table. The result is NULL \nfrom the right side, if there is no match.\nThe following SQL will select all customers, and any orders they \nmight have:\nExample\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;\n\nNote:\nThe\nLEFT JOIN\nkeyword returns all records from the \nleft table (Customers), even if there are no matches in the right table \n(Orders).\nRIGHT JOIN\nThe\nRIGHT JOIN\ncommand returns all rows from \nthe right table, and the matching records from the left table. The result is \nNULL from the left side, when there is no match.\nThe following SQL will return all employees, and any orders they \nmight have placed:\nExample\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;\n\nNote:\nThe\nRIGHT JOIN\nkeyword returns all records from the \nright table (Employees), even if there are no matches in the left table \n(Orders).\nFULL OUTER JOIN\nThe\nFULL OUTER JOIN\ncommand returns all rows \nwhen there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;\nNote:\nThe\nFULL OUTER JOIN\nkeyword returns all the rows from \nthe left table (Customers), and all the rows from the right table (Orders). If \nthere are rows in \"Customers\" that do not have matches in \"Orders\", or if there \nare rows in \"Orders\" that do not have matches in \"Customers\", those rows will be \nlisted as well.\n\nReference\n\n\u276f\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM \n  ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders\n ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "SELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;",
      "language": "sql",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders\nON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;",
      "language": "sql",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN \n# TODO: Complete this line",
      "solution": "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN \n  Customers ON Orders.CustomerID = Customers.CustomerID;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM \n  ((Orders\n# TODO: Complete this line\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
      "solution": "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM \n  ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);"
    }
  ],
  "related_topics": [
    {
      "id": "0e2a9df6-4256-4f43-a4cf-ba1c06dd818a",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "005c16a4-223a-4b48-a1a0-e021b0a763dd",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d0624f96-db35-4103-8c0a-2d9c0b562606",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The INNER JOIN keyword selects all rows from both \ntables as long as there?",
      "options": [
        "records in the \n\"Orders\" table that do not have matches in \"Customers\"",
        "None of the above.",
        "a match between the columns",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The INNER JOIN keyword selects all rows from both \ntables as long as there is 'a match between the columns'."
    },
    {
      "question": "What is If there?",
      "options": [
        "records in the \n\"Orders\" table that do not have matches in \"Customers\"",
        "None of the above.",
        "a match between the columns",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of If there is 'records in the \n\"Orders\" table that do not have matches in \"Customers\"'."
    }
  ],
  "summary": "This tutorial covers SQLJOIN Keyword concepts and techniques. You'll learn how to use SQLJOIN Keyword effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SQLJOIN Keyword and how to apply it in your projects."
}