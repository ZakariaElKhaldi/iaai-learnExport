{
  "id": "aea7d0ea-dfd3-4644-aa32-e6011d517824",
  "title": "SQL Keywords Reference",
  "slug": "sql-keywords-reference",
  "metadata": {
    "description": "Learn about SQL Keywords Reference with clear explanations and practical examples.",
    "keywords": [
      "table",
      "deletes",
      "values",
      "column",
      "constraint",
      "database",
      "rows",
      "creates",
      "result",
      "index"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSQL",
    "subcategory": "SQL Keywords"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SQL Keywords Reference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This SQL keywords reference contains the reserved words in SQL.\nSQL Keywords\nKeyword\nDescription\nADD\nAdds a column in an existing table\nADD CONSTRAINT\nAdds a constraint after a table is already created\nALL\nReturns true if all of the subquery values meet the \ncondition\nALTER\nAdds, deletes, or modifies columns in a table, or changes the data \ntype of a column in a table\nALTER COLUMN\nChanges the data type of a column in a table\nALTER TABLE\nAdds, deletes, or modifies columns in a table\nAND\nOnly includes rows where both conditions is true\nANY\nReturns true if any of the subquery values meet the \ncondition\nAS\nRenames a column or table with an alias\nASC\nSorts the result set in ascending order\nBACKUP DATABASE\nCreates a back up of an existing database\nBETWEEN\nSelects values within a given range\nCASE\nCreates different outputs based on conditions\nCHECK\nA constraint that limits the value that can be placed in a \ncolumn\nCOLUMN\nChanges the data type of a column or deletes a column in a table\nCONSTRAINT\nAdds or deletes a constraint\nCREATE\nCreates a database, index, view, table, or procedure\nCREATE DATABASE\nCreates a new SQL database\nCREATE INDEX\nCreates an index on a table (allows duplicate values)\nCREATE OR REPLACE VIEW\nUpdates a view\nCREATE TABLE\nCreates a new table in the database\nCREATE PROCEDURE\nCreates a stored procedure\nCREATE UNIQUE INDEX\nCreates a unique index on a table (no duplicate values)\nCREATE VIEW\nCreates a view based on the result set of a SELECT statement\nDATABASE\nCreates or deletes an SQL database\nDEFAULT\nA constraint that provides a default value for a column\nDELETE\nDeletes rows from a table\nDESC\nSorts the result set in descending order\nDISTINCT\nSelects only distinct (different) values\nDROP\nDeletes a column, constraint, database, index, table, or view\nDROP COLUMN\nDeletes a column in a table\nDROP CONSTRAINT\nDeletes a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint\nDROP DATABASE\nDeletes an existing SQL database\nDROP DEFAULT\nDeletes a DEFAULT constraint\nDROP INDEX\nDeletes an index in a table\nDROP TABLE\nDeletes an existing table in the database\nDROP VIEW\nDeletes a view\nEXEC\nExecutes a stored procedure\nEXISTS\nTests for the existence of any record in a subquery\nFOREIGN KEY\nA constraint that is a key used to link two tables together\nFROM\nSpecifies which table to select or delete data from\nFULL OUTER JOIN\nReturns all rows when there is a match in either left table or right table\nGROUP BY\nGroups the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, \nAVG)\nHAVING\nUsed instead of WHERE with aggregate functions\nIN\nAllows you to specify multiple values in a WHERE clause\nINDEX\nCreates or deletes an index in a table\nINNER JOIN\nReturns rows that have matching values in both tables\nINSERT INTO\nInserts new rows in a table\nINSERT INTO SELECT\nCopies data from one table into another table\nIS NULL\nTests for empty values\nIS NOT NULL\nTests for non-empty values\nJOIN\nJoins tables\nLEFT JOIN\nReturns all rows from the left table, and the matching rows from the right \ntable\nLIKE\nSearches for a specified pattern in a column\nLIMIT\nSpecifies the number of records to return in the result set\nNOT\nOnly includes rows where a condition is not true\nNOT NULL\nA constraint that enforces a column to not accept NULL values\nOR\nIncludes rows where either condition is true\nORDER BY\nSorts the result set in ascending or descending order\nOUTER JOIN\nReturns all rows when there is a match in either left table or right table\nPRIMARY KEY\nA constraint that uniquely identifies each record in a database table\nPROCEDURE\nA stored procedure\nRIGHT JOIN\nReturns all rows from the right table, and the matching rows from the \nleft table\nROWNUM\nSpecifies the number of records to return in the result set\nSELECT\nSelects data from a database\nSELECT DISTINCT\nSelects only distinct (different) values\nSELECT INTO\nCopies data from one table into a new table\nSELECT TOP\nSpecifies the number of records to return in the result set\nSET\nSpecifies which columns and values that should be updated in a table\nTABLE\nCreates a table, or adds, deletes, or modifies columns in a table, or \ndeletes a table or data inside a table\nTOP\nSpecifies the number of records to return in the result set\nTRUNCATE TABLE\nDeletes the data inside a table, but not the table itself\nUNION\nCombines the result set of two or more SELECT statements (only \ndistinct values)\nUNION ALL\nCombines the result set of two or more SELECT statements (allows \nduplicate values)\nUNIQUE\nA constraint that ensures that all values in a column are unique\nUPDATE\nUpdates existing rows in a table\nVALUES\nSpecifies the values of an INSERT INTO statement\nVIEW\nCreates, updates, or deletes a view\nWHERE\nFilters a result set to include only records that fulfill a specified \ncondition\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "11443ceb-eab9-44b2-b76b-4619c43d8336",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d2b553bf-25a0-4002-9d96-758ed71a81a1",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2d20992b-7037-4be1-b3b7-74563748dc75",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SQL Keywords\nKeyword\nDescription\nADD\nAdds a column in an existing table\nADD CONSTRAINT\nAdds a constraint after a table?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "already created\nALL\nReturns true if all of the subquery values meet the \ncondition\nALTER\nAdds"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of SQL Keywords\nKeyword\nDescription\nADD\nAdds a column in an existing table\nADD CONSTRAINT\nAdds a constraint after a table is 'already created\nALL\nReturns true if all of the subquery values meet the \ncondition\nALTER\nAdds'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers SQL Keywords Reference concepts and techniques. You'll learn how to use SQL Keywords Reference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SQL Keywords Reference and how to apply it in your projects."
}