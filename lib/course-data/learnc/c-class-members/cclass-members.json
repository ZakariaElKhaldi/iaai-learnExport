{
  "id": "027107e3-f2df-4d80-a1e5-ed9f0eca3cf5",
  "title": "C#Class Members",
  "slug": "cclass-members",
  "metadata": {
    "description": "Learn about C#Class Members with clear explanations and practical examples.",
    "keywords": [
      "class",
      "color",
      "string",
      "console",
      "writeline",
      "myobj",
      "public",
      "model",
      "ford",
      "opel"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Class Members"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Section 1",
      "content": "C#\nClass Members\n\nClass Members\nFields and methods inside classes are often referred to as \"Class Members\":\nExample\nCreate a\nCar\nclass with three class members:\ntwo fields\nand\none method\n.\n// The class\nclass MyClass\n{\n  // Class members\n\u00a0 string color = \"red\";        // field\n\u00a0 int maxSpeed = 200;          // field\n  public void fullThrottle()   // method\n  {\n    Console.WriteLine(\"The car is going as fast as it can!\");\n  }\n}\nFields\nIn the \nand that you can access them by creating an object of the class, and by using the dot syntax (\n.\n).\nThe following example will create an object of the\nCar\nclass, with the \nname\nmyObj\n. Then we print the value of the \nfields\ncolor\nand\nmaxSpeed\n:\nExample\nclass Car \n{\n\u00a0 string color = \"red\";\n  int maxSpeed = 200;\n\n\u00a0 static void Main(string[] args)\n  {",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Car\nmyObj",
      "content": "= new Car();\n\u00a0\u00a0\u00a0 Console.WriteLine(myObj.color);\n    Console.WriteLine(myObj.maxSpeed);\n\u00a0 }\n}\n\nYou can also leave the fields blank, and modify them when creating the object:\nExample\nclass Car \n{\n\u00a0 string color;\n  int maxSpeed;\n\n\u00a0 static void Main(string[] args)\n  {",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Car\nmyObj",
      "content": "= new Car();\n    myObj.color = \"red\";\n    myObj.maxSpeed = 200;\n\u00a0\u00a0\u00a0 Console.WriteLine(myObj.color);\n    Console.WriteLine(myObj.maxSpeed);\n\u00a0 }\n}\n\nThis is especially useful when creating multiple objects of one class:\nExample\nclass Car \n{\n  string model;\n\u00a0 string color;\n  int year;\n\n\u00a0 static void Main(string[] args)\n  {\n\u00a0\u00a0\u00a0 Car Ford = new Car();\n    Ford.model = \"Mustang\";\n    Ford.color = \"red\";\n    Ford.year = 1969;\n\n\u00a0\u00a0\u00a0 Car Opel = new Car();\n    Opel.model = \"Astra\";\n    Opel.color = \"white\";\n    Opel.year = 2005;\n\n\u00a0\u00a0\u00a0 Console.WriteLine(Ford.model);\n    Console.WriteLine(Opel.model);\n\u00a0 }\n}\n\nObject Methods\nYou learned from the\nC# Methods\nchapter that methods are used to perform certain actions.\nMethods normally belong to a class, and they define how an object of a class behaves.\nJust like with fields, you can access methods with the dot syntax. However, note that \nthe method must be\npublic\n. And remember that we use the name of the method followed by two \nparentheses\n()\nand a semicolon\n;\nto call (execute) the method:\nExample\nclass Car \n{\n\u00a0 string color;                 // field\n  int maxSpeed;                 // field\n  public void fullThrottle()    // method\n  {\n    Console.WriteLine(\"The car is going as fast as it can!\"); \n  }\n\n\u00a0 static void Main(string[] args)\n  {",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Car\nmyObj",
      "content": "= new Car();\n    myObj.fullThrottle();  // Call the method\n\u00a0 }\n}\n\nWhy did we declare the method as\npublic\n, and not\nstatic\n, like in the examples from the\nC# Methods Chapter\n?\nThe reason is simple: a\nstatic\nmethod can be accessed without creating an object of the class, while\npublic\nmethods can only be accessed by objects.\nUse Multiple Classes\nRemember from the last chapter, that we can use multiple classes for better organization \n(one for fields and methods, and another one for execution). This is \nrecommended:\nprog2.cs\nclass Car \n{\n  public string model;\n\u00a0 public string color;\n  public int year;\n  public void fullThrottle()\n  {\n    Console.WriteLine(\"The car is going as fast as it can!\"); \n  }\n}\nprog.cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n\u00a0\u00a0\u00a0 Car Ford = new Car();\n    Ford.model = \"Mustang\";\n    Ford.color = \"red\";\n    Ford.year = 1969;\n\n\u00a0\u00a0\u00a0 Car Opel = new Car();\n    Opel.model = \"Astra\";\n    Opel.color = \"white\";\n    Opel.year = 2005;\n\n\u00a0\u00a0\u00a0 Console.WriteLine(Ford.model);\n    Console.WriteLine(Opel.model);\n\u00a0 }\n}\n\nThe\npublic\nkeyword is called an\naccess modifier\n, \nwhich specifies that the fields of\nCar\nare accessible for other classes as well, such as\nProgram\n.\nYou will learn more about\nAccess Modifiers\nin a later chapter.\nTip:\nAs you continue to read, you will also learn more about other class members, such as\nconstructors\nand\nproperties\n.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "3dceaa26-5da3-4509-9b99-e7906cdcd9ba",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6e7013e2-b455-4d30-ae31-d5b178a28282",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "06556ea0-3ec8-4e49-b033-52729f30725d",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Class Members\n\nClass Members\nFields and methods inside classes?",
      "options": [
        "None of the above.",
        "None of the above.",
        "going as fast as it can",
        "often referred to as \"Class Members\":\nExample\nCreate a\nCar\nclass with three class members:\ntwo fields\nand\none method"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Class Members\n\nClass Members\nFields and methods inside classes is 'often referred to as \"Class Members\":\nExample\nCreate a\nCar\nclass with three class members:\ntwo fields\nand\none method'."
    },
    {
      "question": "What is The car?",
      "options": [
        "None of the above.",
        "going as fast as it can",
        "None of the above.",
        "often referred to as \"Class Members\":\nExample\nCreate a\nCar\nclass with three class members:\ntwo fields\nand\none method"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The car is 'going as fast as it can'."
    }
  ],
  "summary": "This tutorial covers C#Class Members concepts and techniques. You'll learn how to use C#Class Members effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Class Members and how to apply it in your projects."
}