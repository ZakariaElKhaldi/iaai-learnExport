{
  "id": "a60d0d17-7019-4536-a122-425272575e6f",
  "title": "C++Encapsulation",
  "slug": "cencapsulation",
  "metadata": {
    "description": "Learn about C++Encapsulation with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "private",
      "salary",
      "attribute",
      "encapsulation",
      "class",
      "public",
      "value",
      "setsalary",
      "getsalary",
      "method"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Encapsulation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nEncapsulation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Encapsulation\nThe meaning of\nEncapsulation\n, is to make sure that \n\"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes as\nprivate\n(cannot \nbe accessed from outside the class). If you want others to read or modify the \nvalue of a private member, you can provide public\nget\nand\nset\nmethods.\nAccess Private Members\nTo access a private attribute, use public \"get\" and \"set\" methods:\nExample\n#include <iostream>\nusing namespace std;\nclass Employee {\nprivate:\n// Private attribute\nint salary;\npublic:\n// Setter\nvoid setSalary(int s) {\nsalary = s;\n}\n// Getter\nint getSalary() {\nreturn salary;\n}\n};\nint \n    main() {\nEmployee myObj;\nmyObj.setSalary(50000);\ncout << myObj.getSalary();\nreturn 0;\n}\n\nExample explained\nThe\nsalary\nattribute is\nprivate\n, \nwhich have restricted access.\nThe public\nsetSalary()\nmethod takes a parameter (\ns\n) and assigns it to the\nsalary\nattribute (salary = s).\nThe public\ngetSalary()\nmethod returns the value of \nthe private\nsalary\nattribute.\nInside\nmain()\n, we create an object of the\nEmployee\nclass. Now we can use the\nsetSalary()\nmethod to set the value of the \nprivate attribute to\n50000\n. Then we call the\ngetSalary()\nmethod on the object to return the value.\nWhy Encapsulation?\nIt is considered good practice to declare your class attributes as private (as \noften as you can). Encapsulation ensures better control of your data, \nbecause you (or others) can change one part of the code without affecting other parts\nIncreased security of data\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "#include <iostream>\nusing namespace std;\nclass Employee {\nprivate:\n// Private attribute\nint salary;\npublic:\n// Setter\nvoid setSalary(int s) {\nsalary = s;\n}\n// Getter\nint getSalary() {\nreturn salary;\n}\n};\nint \n    main() {\nEmployee myObj;\nmyObj.setSalary(50000);\ncout << myObj.getSalary();\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "#include <iostream>\nusing namespace std;\nclass Employee {\nprivate:\n// Private attribute\nint salary;\npublic:\n// Setter\nvoid setSalary(int s) {\nsalary = s;\n}\n// Getter\nint getSalary() {\nreturn salary;\n}\n};\nint \n    main() {\n# TODO: Complete this line\nmyObj.setSalary(50000);\ncout << myObj.getSalary();\nreturn 0;\n}",
      "solution": "#include <iostream>\nusing namespace std;\nclass Employee {\nprivate:\n// Private attribute\nint salary;\npublic:\n// Setter\nvoid setSalary(int s) {\nsalary = s;\n}\n// Getter\nint getSalary() {\nreturn salary;\n}\n};\nint \n    main() {\nEmployee myObj;\nmyObj.setSalary(50000);\ncout << myObj.getSalary();\nreturn 0;\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9f2939bb-a56f-45de-a3db-d3b18311814e",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1e3b39aa-d6d2-42ca-8db8-f3d3591fff4a",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d7bcfb47-4c45-44d2-bf40-ef2e8a02ce1c",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is data?",
      "options": [
        "private",
        "hidden from users",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of data is 'hidden from users'."
    },
    {
      "question": "What is Example explained\nThe\nsalary\nattribute?",
      "options": [
        "None of the above.",
        "private",
        "None of the above.",
        "hidden from users"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Example explained\nThe\nsalary\nattribute is 'private'."
    }
  ],
  "summary": "This tutorial covers C++Encapsulation concepts and techniques. You'll learn how to use C++Encapsulation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Encapsulation and how to apply it in your projects."
}