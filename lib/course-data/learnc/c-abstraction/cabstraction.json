{
  "id": "076962ec-4a52-43b9-b94b-d6364d5f940f",
  "title": "C#Abstraction",
  "slug": "cabstraction",
  "metadata": {
    "description": "Learn about C#Abstraction with clear explanations and practical examples.",
    "keywords": [
      "class",
      "abstract",
      "animal",
      "method",
      "void",
      "public",
      "animalsound",
      "abstraction",
      "classes",
      "methods"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Abstraction"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nAbstraction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Abstract Classes and Methods\nData\nabstraction\nis the process of hiding certain details and showing only essential information to the user.\nAbstraction can be achieved with either\nabstract classes\nor\ninterfaces\n(which you will learn more about in the \nThe\nabstract\nkeyword is used for classes and methods:\nAbstract class:\nis a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).\nAbstract method:\ncan only be used in an abstract class, and it does not have a body. The body is provided by the \nderived class (inherited from).\nAn abstract class can have both abstract and regular methods:\nabstract class Animal \n{\n\u00a0 public abstract void animalSound();\n\u00a0 public void sleep() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"Zzz\");\n\u00a0 }\n}\nFrom the example above, it is not possible to create an object of the Animal class:\nAnimal myObj = new Animal(); // Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')\nTo access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the\nPolymorphism\nchapter to an abstract class.\nRemember from the\nInheritance chapter\nthat we use the\n:\nsymbol to inherit from a class, \nand that we use the\noverride\nkeyword to override the base class method.\nExample\n// Abstract class\nabstract class Animal\n{\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep()\n  {\n    Console.WriteLine(\"Zzz\");\n  }\n}\n\n// Derived class (inherit from Animal)\nclass Pig : Animal\n{\n  public override void animalSound()\n  {\n    // The body of animalSound() is provided here\n    Console.WriteLine(\"The pig says: wee wee\");\n  }\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();  // Call the abstract method\n    myPig.sleep();  // Call the regular method\n  }\n}\n\nWhy And When To Use Abstract Classes and Methods?\nTo achieve security - hide certain details and only show the important \ndetails of an object.\nNote:\nAbstraction can also be achieved with\nInterfaces\n, which you will learn more about in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "fd124035-5d0c-4f96-ab5a-0687d0ee9409",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8ddd24bb-1314-422b-8986-d738dd77baa9",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a8a5c678-40e6-44be-93e8-cbbda48e9325",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Abstraction\n\nAbstract Classes and Methods\nData\nabstraction?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used for classes and methods:\nAbstract class:\nis a restricted class that cannot be used to create objects (to access it",
        "the process of hiding certain details and showing only essential information to the user"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Abstraction\n\nAbstract Classes and Methods\nData\nabstraction is 'the process of hiding certain details and showing only essential information to the user'."
    },
    {
      "question": "What is which you will learn more about in the \nThe\nabstract\nkeyword?",
      "options": [
        "the process of hiding certain details and showing only essential information to the user",
        "used for classes and methods:\nAbstract class:\nis a restricted class that cannot be used to create objects (to access it",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of which you will learn more about in the \nThe\nabstract\nkeyword is 'used for classes and methods:\nAbstract class:\nis a restricted class that cannot be used to create objects (to access it'."
    }
  ],
  "summary": "This tutorial covers C#Abstraction concepts and techniques. You'll learn how to use C#Abstraction effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Abstraction and how to apply it in your projects."
}