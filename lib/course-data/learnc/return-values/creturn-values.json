{
  "id": "fb261b09-d4a2-424f-bb60-50604d9c9cb9",
  "title": "C#Return Values",
  "slug": "creturn-values",
  "metadata": {
    "description": "Learn about C#Return Values with clear explanations and practical examples.",
    "keywords": [
      "return",
      "static",
      "mymethod",
      "void",
      "method",
      "example",
      "main",
      "string",
      "args",
      "console"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Return Values"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nReturn Values",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Return Values\nIn the\n\n, we used the\nvoid\nkeyword in all examples, which indicates that the method should not return a value.\nIf you \nwant the method to return a value, you can use a primitive data type (such as\nint\nor\ndouble\n) instead of\nvoid\n, and use the\nreturn\nkeyword inside the method:\nExample\nstatic int MyMethod(int x) \n{\n\u00a0 return 5 + x;\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 Console.WriteLine(MyMethod(3));\n}\n\n// Outputs 8 (5 + 3)\n\nThis example returns the sum of a method's\ntwo parameters\n:\nExample\nstatic int MyMethod(int x, int y) \n{\n\u00a0 return x + y;\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 Console.WriteLine(MyMethod(5, 3));\n}\n\n// Outputs 8 (5 + 3)\n\nYou can also store the result in a variable (recommended, as it is easier to read and maintain):\nExample\nstatic int MyMethod(int x, int y) \n{\n\u00a0 return x + y;\n}\n\nstatic void Main(string[] args)\n{\n  int z = MyMethod(5, 3);\n  Console.WriteLine(z);\n}\n\n// Outputs 8 (5 + 3)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "00aa6087-33c5-4c9e-a1e3-b14001430aa6",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8bf73fae-bf2f-4bae-a3db-425be37afe6d",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a82a7132-15ce-494e-b745-461808c3482d",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is as it?",
      "options": [
        "None of the above.",
        "easier to read and maintain):\nExample\nstatic int MyMethod(int x",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of as it is 'easier to read and maintain):\nExample\nstatic int MyMethod(int x'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Return Values concepts and techniques. You'll learn how to use C#Return Values effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Return Values and how to apply it in your projects."
}