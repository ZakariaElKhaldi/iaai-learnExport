{
  "id": "34ff4c98-6cc1-47ca-a62b-89376f863e0c",
  "title": "C++Functions",
  "slug": "cfunctions",
  "metadata": {
    "description": "Learn about C++Functions with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "function",
      "myfunction",
      "executed",
      "main",
      "code",
      "void",
      "return",
      "example",
      "declaration",
      "definition"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nFunctions are used to perform certain actions, and they are \nimportant for reusing code: Define the code once, and use it many times.\nCreate a Function\nC++ provides some pre-defined \nfunctions, such as\nmain()\n, which is used to \nexecute code. But you can also \ncreate your own functions to perform certain actions.\nTo create (often referred to as\ndeclare\n) a function, specify the name of the function, followed by parentheses\n()\n:\nSyntax\nvoid\nmyFunction\n() {\n// code to be executed\n}\nExample Explained\nmyFunction()\nis the name of the function\nvoid\nmeans that the function does not have a \nreturn value. You will learn more about return values later in the \ninside the function (the body), add code that defines what the function should do\nCall a Function\nDeclared functions are not executed immediately. They are \"saved for later \nuse\", and will be executed later, when they are called.\nTo call a function, write the function's name followed by two parentheses\n()\nand a semicolon\n;\nIn the following example,\nmyFunction()\nis used to print a text (the action), when it is called:\nExample\nInside\nmain\n, \ncall\nmyFunction()\n:\n// Create a function\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\nint main() {\nmyFunction();\n// call the function\nreturn 0;\n}\n// Outputs \n  \"I just got executed!\"\n\nA function can be called multiple times:\nExample\nvoid myFunction() {\ncout << \"I just got executed!\\n\";\n}\nint main() {\nmyFunction();\nmyFunction();\nmyFunction();\nreturn 0;\n}\n// \n  I just got executed!\n// I just got executed!\n// I just got executed!\n\nFunction Declaration and Definition\nA C++ function consist of two parts:\nDeclaration:\nthe return type, the name of the function, and parameters (if any)\nDefinition:\nthe body of the function (code to be executed)\nvoid\nmyFunction()\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}\nNote:\nIf a user-defined function, such as\nmyFunction()\nis declared after the\nmain()\nfunction,\nan error will occur\n:\nExample\nint main() {\nmyFunction();\nreturn 0;\n}\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\n// Error\n\nHowever, it is possible to separate the declaration and the definition of the function - for code optimization.\nYou will often see C++ programs that have function declaration above\nmain()\n, \nand function definition below\nmain()\n. This will make the code \nbetter organized and easier to read:\nExample\n//\nFunction declaration\nvoid myFunction();\n// The main method\nint main() {\nmyFunction();\u00a0 //\ncall\nthe function\nreturn 0;\n}\n//\nFunction definition\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "void\nmyFunction\n() {\n// code to be executed\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a function\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\nint main() {\nmyFunction();\n// call the function\nreturn 0;\n}\n// Outputs \n  \"I just got executed!\"",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "void myFunction() {\ncout << \"I just got executed!\\n\";\n}\nint main() {\nmyFunction();\nmyFunction();\nmyFunction();\nreturn 0;\n}\n// \n  I just got executed!\n// I just got executed!\n// I just got executed!",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "void\nmyFunction()\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "int main() {\nmyFunction();\nreturn 0;\n}\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\n// Error",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "//\nFunction declaration\nvoid myFunction();\n// The main method\nint main() {\nmyFunction();\u00a0 //\ncall\nthe function\nreturn 0;\n}\n//\nFunction definition\nvoid myFunction() {\ncout << \"I just got executed!\";\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "void\nmyFunction\n# TODO: Complete this line\n// code to be executed\n}",
      "solution": "void\nmyFunction\n() {\n// code to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a function\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\nint main() {\n# TODO: Complete this line\n// call the function\nreturn 0;\n}\n// Outputs \n  \"I just got executed!\"",
      "solution": "// Create a function\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\nint main() {\nmyFunction();\n// call the function\nreturn 0;\n}\n// Outputs \n  \"I just got executed!\""
    }
  ],
  "related_topics": [
    {
      "id": "98419a7b-00e0-4f72-9762-14f13e3fab35",
      "title": "Advanced Cpp Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "c3c3419f-06bd-4c3d-a0e3-6906bf9dce79",
      "title": "Cpp Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "a7b7955b-4300-4498-99ed-e2a9e15239b8",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Functions\n\nA function is a block of code which only runs when it?",
      "options": [
        "used to perform certain actions",
        "None of the above.",
        "None of the above.",
        "called"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Functions\n\nA function is a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Functions?",
      "options": [
        "None of the above.",
        "called",
        "used to perform certain actions",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Functions is 'used to perform certain actions'."
    }
  ],
  "summary": "This tutorial covers C++Functions concepts and techniques. You'll learn how to use C++Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Functions and how to apply it in your projects."
}