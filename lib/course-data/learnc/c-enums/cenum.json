{
  "id": "793516b9-7a15-4650-a884-9c4cfe8f5f4f",
  "title": "C#Enum",
  "slug": "cenum",
  "metadata": {
    "description": "Learn about C#Enum with clear explanations and practical examples.",
    "keywords": [
      "enum",
      "level",
      "medium",
      "console",
      "writeline",
      "myvar",
      "class",
      "example",
      "high",
      "enums"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Enums"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nEnum",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Enums\nAn\nenum\nis a special \"class\" that represents a group of\nconstants\n(unchangeable/read-only variables).\nTo create an\nenum\n, use the\nenum\nkeyword (instead of class or interface), and separate \nthe enum items with a comma:\nExample\nenum Level \n{\n\u00a0 Low,\n\u00a0 Medium,\n\u00a0 High\n}\nYou can access\nenum\nitems with the\ndot\nsyntax:\nLevel myVar = Level.Medium;\nConsole.WriteLine(myVar);\n\nEnum is short for \"enumerations\", which means \"specifically listed\".\nEnum inside a Class\nYou can also have an\nenum\ninside a class:\nExample\nclass Program\n{\n  enum Level\n  {\n    Low,\n    Medium,\n    High\n  }\n  static void Main(string[] args)\n  {\n    Level myVar = Level.Medium;\n    Console.WriteLine(myVar);\n  }\n}\nThe output will be:\nMedium\n\nEnum Values\nBy default, the first item of an enum has the value 0. The second has the value 1, and so on.\nTo get the integer value from an item, you must\nexplicitly convert\nthe item to an\nint\n:\nExample\nenum Months\n{\n  January,    // 0\n  February,   // 1\n  March,      // 2\n  April,      // 3\n  May,        // 4\n  June,       // 5\n  July        // 6\n}\n\nstatic void Main(string[] args)\n{\n  int myNum = (int) Months.April;\n  Console.WriteLine(myNum);\n}\nThe output will be:\n3\n\nYou can also assign your own enum values, and the \nExample\nenum Months\n{\n  January,    // 0\n  February,   // 1\n  March=6,    // 6\n  April,      // 7\n  May,        // 8\n  June,       // 9\n  July        // 10\n}\n\nstatic void Main(string[] args)\n{\n  int myNum = (int) Months.April;\n  Console.WriteLine(myNum);\n}\nThe output will be:\n7\n\nEnum in a Switch Statement\nEnums are often used in\nswitch\nstatements to check for corresponding values:\nExample\nenum Level \n{\n\u00a0 Low,\n\u00a0 Medium,\n\u00a0 High\n}\n\nstatic void Main(string[] args) \n{\n  Level myVar = Level.Medium;\n\u00a0 switch(myVar) \n  {\n\u00a0\u00a0\u00a0 case Level.Low:\n\u00a0\u00a0\u00a0\u00a0  Console.WriteLine(\"Low level\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case Level.Medium:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Medium level\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case Level.High:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"High level\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0}\n}\nThe output will be:\nMedium level\n\nWhy And When To Use Enums?\nUse enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "82e0f6fa-ae06-4299-b5e3-40a8aec3c309",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1a9100be-3399-4126-982c-c5b6fa0b439d",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ec891402-55a1-4356-9413-f8f9d4ef753a",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Enums\nAn\nenum?",
      "options": [
        "a special \"class\" that represents a group of\nconstants\n(unchangeable/read-only variables)",
        "None of the above.",
        "None of the above.",
        "short for \"enumerations\""
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Enums\nAn\nenum is 'a special \"class\" that represents a group of\nconstants\n(unchangeable/read-only variables)'."
    },
    {
      "question": "What is Enum?",
      "options": [
        "None of the above.",
        "a special \"class\" that represents a group of\nconstants\n(unchangeable/read-only variables)",
        "None of the above.",
        "short for \"enumerations\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Enum is 'short for \"enumerations\"'."
    }
  ],
  "summary": "This tutorial covers C#Enum concepts and techniques. You'll learn how to use C#Enum effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Enum and how to apply it in your projects."
}