{
  "id": "7db3ae08-ee59-496e-8ce9-8b4d83da6409",
  "title": "C++Function Overloading",
  "slug": "cfunction-overloading",
  "metadata": {
    "description": "Learn about C++Function Overloading with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "double",
      "return",
      "example",
      "plusfunc",
      "function",
      "functions",
      "cout",
      "overloading",
      "different",
      "myfunction"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Function Overloading"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nFunction Overloading",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Function Overloading\nWith\nfunction overloading\n, multiple functions can have the same name with different\nparameters:\nExample\nint myFunction(int x)\nfloat myFunction(float x)\ndouble \n  myFunction(double x, double y)\nConsider the following example, which have two functions that add numbers of different type:\nExample\nint plusFuncInt(int x, int y) {\nreturn x + y;\n}\ndouble plusFuncDouble(double x, double y) {\nreturn x + y;\n}\nint main() {\nint myNum1 = plusFuncInt(8, \n  5);\ndouble myNum2 = plusFuncDouble(4.3, 6.26);\ncout << \n  \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}\n\nInstead of defining two functions that should do the same thing, it is better to overload one.\nIn the example below, we overload the\nplusFunc\nfunction to work for both\nint\nand\ndouble\n:\nExample\nint plusFunc(int x, int \n  y) {\nreturn x + y;\n}\ndouble plusFunc(double x, double y) {\nreturn x + y;\n}\nint main() {\nint myNum1 = plusFunc(8, \n  5);\ndouble myNum2 = plusFunc(4.3, 6.26);\ncout << \"Int: \" << \n  myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}\n\nNote:\nMultiple functions can have the same name \n  as long as the number and/or type of parameters are different.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "int myFunction(int x)\nfloat myFunction(float x)\ndouble \n  myFunction(double x, double y)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "int plusFuncInt(int x, int y) {\nreturn x + y;\n}\ndouble plusFuncDouble(double x, double y) {\nreturn x + y;\n}\nint main() {\nint myNum1 = plusFuncInt(8, \n  5);\ndouble myNum2 = plusFuncDouble(4.3, 6.26);\ncout << \n  \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "int plusFunc(int x, int \n  y) {\nreturn x + y;\n}\ndouble plusFunc(double x, double y) {\nreturn x + y;\n}\nint main() {\nint myNum1 = plusFunc(8, \n  5);\ndouble myNum2 = plusFunc(4.3, 6.26);\ncout << \"Int: \" << \n  myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int myFunction(int x)\nfloat myFunction(float x)\ndouble \n# TODO: Complete this line",
      "solution": "int myFunction(int x)\nfloat myFunction(float x)\ndouble \n  myFunction(double x, double y)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int plusFuncInt(int x, int y) {\nreturn x + y;\n}\ndouble plusFuncDouble(double x, double y) {\nreturn x + y;\n# TODO: Complete this line\nint main() {\nint myNum1 = plusFuncInt(8, \n  5);\ndouble myNum2 = plusFuncDouble(4.3, 6.26);\ncout << \n  \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}",
      "solution": "int plusFuncInt(int x, int y) {\nreturn x + y;\n}\ndouble plusFuncDouble(double x, double y) {\nreturn x + y;\n}\nint main() {\nint myNum1 = plusFuncInt(8, \n  5);\ndouble myNum2 = plusFuncDouble(4.3, 6.26);\ncout << \n  \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "3d99f35a-20c9-4dfb-a2cd-ef93612b96e6",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bb7cd9de-db68-4669-be21-603073ecc62f",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a6756b27-3972-4705-a337-ed57526e8a88",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "better to overload one",
        "different",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'better to overload one'."
    },
    {
      "question": "What is or type of parameters?",
      "options": [
        "different",
        "better to overload one",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of or type of parameters is 'different'."
    }
  ],
  "summary": "This tutorial covers C++Function Overloading concepts and techniques. You'll learn how to use C++Function Overloading effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Function Overloading and how to apply it in your projects."
}