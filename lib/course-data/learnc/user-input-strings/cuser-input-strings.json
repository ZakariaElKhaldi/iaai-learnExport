{
  "id": "a2b26f00-09d3-453b-9963-19aa3902b42d",
  "title": "C++User Input Strings",
  "slug": "cuser-input-strings",
  "metadata": {
    "description": "Learn about C++User Input Strings with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "name",
      "john",
      "type",
      "cout",
      "fullname",
      "string",
      "example",
      "user",
      "full",
      "input"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "User Input Strings"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nUser Input Strings",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "User Input Strings\nIt is possible to use the extraction operator\n>>\non\ncin\nto \nstore a string entered by a user:\nExample\nstring firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n  firstName;\n// Type your first name: John\n// Your name is: John\nHowever,\ncin\nconsiders a space (whitespace, tabs, etc) as a terminating \ncharacter, which means that it can only store a single word (even if you type \nmany words):\nExample\nstring fullName;\ncout << \"Type your full name: \";\ncin >> \n  fullName;\ncout << \"Your name is: \" << \n  fullName;\n// Type your full name: John Doe\n// Your name is: John\nFrom the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".\nThat's why, when working with strings, we often use the\ngetline()\nfunction to read a line of text. It takes\ncin\nas the first parameter, and the string \nvariable as second:\nExample\nstring fullName;\ncout << \"Type your full name: \";\ngetline (cin, fullName);\ncout << \"Your name is: \" << \n  fullName;\n// Type your full name: John Doe\n// Your name is: John Doe\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "string firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n  firstName;\n// Type your first name: John\n// Your name is: John",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "string fullName;\ncout << \"Type your full name: \";\ncin >> \n  fullName;\ncout << \"Your name is: \" << \n  fullName;\n// Type your full name: John Doe\n// Your name is: John",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "string fullName;\ncout << \"Type your full name: \";\ngetline (cin, fullName);\ncout << \"Your name is: \" << \n  fullName;\n// Type your full name: John Doe\n// Your name is: John Doe",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "string firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n# TODO: Complete this line\n// Type your first name: John\n// Your name is: John",
      "solution": "string firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n  firstName;\n// Type your first name: John\n// Your name is: John"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "string fullName;\ncout << \"Type your full name: \";\ncin >> \n  fullName;\ncout << \"Your name is: \" << \n  fullName;\n# TODO: Complete this line\n// Your name is: John",
      "solution": "string fullName;\ncout << \"Type your full name: \";\ncin >> \n  fullName;\ncout << \"Your name is: \" << \n  fullName;\n// Type your full name: John Doe\n// Your name is: John"
    }
  ],
  "related_topics": [
    {
      "id": "51bb2694-965c-434a-bd5c-21a901fa6001",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c6995b9c-a74b-46b9-b440-c531d55d9111",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "108c0664-cbc2-4a41-9981-13cdf5c0d6c7",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is User Input Strings\n\nUser Input Strings\nIt?",
      "options": [
        "None of the above.",
        "Not a User Input Strings\n\nUser Input Strings\nIt.",
        "possible to use the extraction operator\n>>\non\ncin\nto \nstore a string entered by a user:\nExample\nstring firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n  firstName;\n// Type your first name: John\n// Your name is: John\nHowever",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of User Input Strings\n\nUser Input Strings\nIt is 'possible to use the extraction operator\n>>\non\ncin\nto \nstore a string entered by a user:\nExample\nstring firstName;\ncout << \"Type your first name: \";\ncin >> \n  firstName; \n  // get user input from the keyboard\ncout << \"Your name is: \" << \n  firstName;\n// Type your first name: John\n// Your name is: John\nHowever'."
    },
    {
      "question": "Which best describes the main purpose of this cpp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C++User Input Strings concepts and techniques. You'll learn how to use C++User Input Strings effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++User Input Strings and how to apply it in your projects."
}