{
  "id": "d58864c7-2df3-4003-a8fc-716779eeacc1",
  "title": "CPreprocessor and Macros",
  "slug": "cpreprocessor-and-macros",
  "metadata": {
    "description": "Learn about CPreprocessor and Macros with clear explanations and practical examples.",
    "keywords": [
      "c",
      "macros",
      "include",
      "example",
      "define",
      "preprocessor",
      "like",
      "files",
      "libraries",
      "code",
      "main"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Macros"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nPreprocessor and Macros",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Preprocessor and Macros\nIn C, the\npreprocessor\nruns before the actual compilation begins. It handles things like including files and defining\nmacros\n.\nPreprocessor commands begin with a\n#\nsymbol and are called\ndirectives\n.\n#include - Include Header Files\nYou have already seen the\n#include\ndirective many times - It tells the compiler to include a file.\nIt is used to add libraries or custom header files:\nExample\n#include <stdio.h>\n#include \"myfile.h\"\nUse angle brackets\n< >\nfor standard libraries and double quotes\n\" \"\nfor your own files.\nTip:\nThe most commonly used libraries can be found in our\nC \nReference Documentation\n.\n#define - Create a Macro\nA macro is a name that represents a value (like PI), or a piece of code, \ndefined using the\n#define\ndirective.\nIn the example below,\nPI\nis replaced with\n3.14\nbefore the program is compiled.\nThis means that every time\nPI\nappears in the \ncode, it will be replaced with\n3.14\n:\nExample\n#define PI 3.14\nint main() {\nprintf(\"Value of PI: %.2f\\n\", PI);\nreturn 0;\n}\n\nMacros can also take parameters, like a function:\nExample\n#define SQUARE(x) ((x) * (x))\nint main() {\nprintf(\"Square of 4: %d\\n\", SQUARE(4));\nreturn 0;\n}\n\nMacros with parameters work like shortcuts, but be careful with parentheses to avoid mistakes.\n#ifdef and #ifndef - Conditional Compilation\nYou can use\n#ifdef\nand\n#ifndef\nto compile parts of the code only if certain macros are (or are not) defined:\nExample\n#define DEBUG\nint main() {\n#ifdef DEBUG\nprintf(\"Debug mode is ON\\n\");\n#endif\nreturn 0;\n}\n\nThis is useful for debugging or building different versions of the same program.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "#include <stdio.h>\n#include \"myfile.h\"",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "#define PI 3.14\nint main() {\nprintf(\"Value of PI: %.2f\\n\", PI);\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "#define SQUARE(x) ((x) * (x))\nint main() {\nprintf(\"Square of 4: %d\\n\", SQUARE(4));\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "#define DEBUG\nint main() {\n#ifdef DEBUG\nprintf(\"Debug mode is ON\\n\");\n#endif\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "#include <stdio.h>\n#include \"myfile.h\""
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "#define PI 3.14\nint main() {\n# TODO: Complete this line\nreturn 0;\n}",
      "solution": "#define PI 3.14\nint main() {\nprintf(\"Value of PI: %.2f\\n\", PI);\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "bd6e04eb-79cf-4ebd-8781-282bb601ecfb",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a26f20cb-373d-4b7a-8a84-b593e3323164",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2def681e-1ff5-437f-b28b-96d04c69837f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is symbol and?",
      "options": [
        "None of the above.",
        "called\ndirectives",
        "used to add libraries or custom header files:\nExample\n#include <stdio",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of symbol and is 'called\ndirectives'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "used to add libraries or custom header files:\nExample\n#include <stdio",
        "None of the above.",
        "called\ndirectives"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of It is 'used to add libraries or custom header files:\nExample\n#include <stdio'."
    }
  ],
  "summary": "This tutorial covers CPreprocessor and Macros concepts and techniques. You'll learn how to use CPreprocessor and Macros effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CPreprocessor and Macros and how to apply it in your projects."
}