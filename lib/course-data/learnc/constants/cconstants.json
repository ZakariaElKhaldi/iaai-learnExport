{
  "id": "4057e602-b5f8-4911-b104-9377c89d7510",
  "title": "C#Constants",
  "slug": "cconstants",
  "metadata": {
    "description": "Learn about C#Constants with clear explanations and practical examples.",
    "keywords": [
      "const",
      "variable",
      "constant",
      "value",
      "constants",
      "want",
      "others",
      "keyword",
      "declare",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Constants"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nConstants",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Constants\nIf you don't want others (or yourself) to overwrite existing values, you can add the\nconst\nkeyword \nin front of the variable type.\nThis will declare the variable as \"constant\", which means unchangeable and read-only:\nExample\nconst\nint myNum = 15;\nmyNum = 20; // error\n\nThe\nconst\nkeyword is useful when you want a variable to always store the same value, so that others (or yourself) won't mess up your code. An example that is often referred to as a constant, is PI (3.14159...).\nNote:\nYou cannot declare a constant variable without assigning the value. If you do, an error will occur:\nA const field requires a value to be provided\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "142d47c9-d772-4617-8f4e-d1c5b83ffefa",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5fadcd57-aee8-430d-a533-2fb89e37b6fa",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "edf0b8b5-a0ff-4472-99a4-736b6d63f82b",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "unchangeable and read-only:\nExample\nconst\nint myNum = 15;\nmyNum = 20; // error\n\nThe\nconst\nkeyword is useful when you want a variable to always store the same value",
        "often referred to as a constant",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'unchangeable and read-only:\nExample\nconst\nint myNum = 15;\nmyNum = 20; // error\n\nThe\nconst\nkeyword is useful when you want a variable to always store the same value'."
    },
    {
      "question": "What is An example that?",
      "options": [
        "None of the above.",
        "unchangeable and read-only:\nExample\nconst\nint myNum = 15;\nmyNum = 20; // error\n\nThe\nconst\nkeyword is useful when you want a variable to always store the same value",
        "None of the above.",
        "often referred to as a constant"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of An example that is 'often referred to as a constant'."
    }
  ],
  "summary": "This tutorial covers C#Constants concepts and techniques. You'll learn how to use C#Constants effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Constants and how to apply it in your projects."
}