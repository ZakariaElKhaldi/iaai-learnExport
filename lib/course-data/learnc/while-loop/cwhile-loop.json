{
  "id": "92fa6209-4fc0-4eb5-aaed-52b9389f67c5",
  "title": "C++While Loop",
  "slug": "cwhile-loop",
  "metadata": {
    "description": "Learn about C++While Loop with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "loop",
      "code",
      "loops",
      "condition",
      "block",
      "long",
      "specified",
      "example",
      "variable",
      "execute"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "While Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nWhile Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable.\nC++ While Loop\nThe\nwhile\nloop loops through a block of code as long as a specified condition is\ntrue\n:\nSyntax\nwhile (\ncondition\n) {\n// code block to be executed\n}\nIn the example below, the code in the loop will run, over and over again, as long as \na variable (\ni\n) is less than 5:\nExample\nint i = 0;\nwhile (i < 5) {\ncout << i << \"\\n\";\ni++;\n}\n\nNote:\nDo not forget to increase the variable used in the condition, otherwise \nthe loop will never end!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "while (\ncondition\n) {\n// code block to be executed\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "int i = 0;\nwhile (i < 5) {\ncout << i << \"\\n\";\ni++;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "while (\ncondition\n) {\n// code block to be executed\n# TODO: Complete this line",
      "solution": "while (\ncondition\n) {\n// code block to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int i = 0;\nwhile (i < 5) {\n# TODO: Complete this line\ni++;\n}",
      "solution": "int i = 0;\nwhile (i < 5) {\ncout << i << \"\\n\";\ni++;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "88e29290-3b74-4c67-a127-0839476482a4",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cdc86556-4f88-41fa-8d70-f7dd80ecc210",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f0ed2a3b-5793-486b-885f-8f92a44e2df5",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Loops\nLoops can execute a block of code as long as a specified condition?",
      "options": [
        "reached",
        "None of the above.",
        "None of the above.",
        "handy because they save time"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Loops\nLoops can execute a block of code as long as a specified condition is 'reached'."
    },
    {
      "question": "What is Loops?",
      "options": [
        "None of the above.",
        "None of the above.",
        "handy because they save time",
        "reached"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Loops is 'handy because they save time'."
    }
  ],
  "summary": "This tutorial covers C++While Loop concepts and techniques. You'll learn how to use C++While Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++While Loop and how to apply it in your projects."
}