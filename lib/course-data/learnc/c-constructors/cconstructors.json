{
  "id": "01192559-5b2d-4492-96c9-516424bc9fe0",
  "title": "C#Constructors",
  "slug": "cconstructors",
  "metadata": {
    "description": "Learn about C#Constructors with clear explanations and practical examples.",
    "keywords": [
      "model",
      "constructor",
      "ford",
      "class",
      "string",
      "mustang",
      "create",
      "public",
      "constructors",
      "console"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Constructors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nConstructors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Constructors\nA constructor is a\nspecial method\nthat is used to initialize \nobjects. The advantage of a constructor, is that it is called when an object of a class is created. It can \nbe used to set initial values for fields:\nExample\nCreate a constructor:\n// Create a Car class\nclass Car\n{\n  public string model;  // Create a field\n\n// Create a\nclass constructor\nfor the Car class\n  public Car()\n  {\n    model = \"Mustang\"; // Set the initial value for model\n  }\n\nstatic void Main(string[] args)\n  {\n    Car Ford = new Car();  // Create an object of the Car Class (this will\ncall the constructor\n)\n    Console.WriteLine(Ford.model);  // Print the value of model\n  }\n}\n\n// Outputs \"Mustang\"\n\nNote that the constructor name must\nmatch the class name\n, and it cannot have a\nreturn type\n(like\nvoid\nor\nint\n).\nAlso note that the constructor is called when the object is created.\nAll classes have constructors by default: if you do not create a class \n  constructor yourself, C# creates one for you. However, then you are not able \n  to set initial values for fields.\nConstructors save time!\nTake a look at the last example on this page to really understand why.\nConstructor Parameters\nConstructors can also take parameters, which is used to initialize \nfields.\nThe following example adds a\nstring modelName\nparameter \nto the constructor. \nInside the constructor we set\nmodel\nto\nmodelName\n(\nmodel=modelName\n). When we call \nthe constructor, we pass a parameter to the constructor (\n\"Mustang\"\n), which will set the value of\nmodel\nto\n\"Mustang\"\n:\nExample\nclass Car\n{\n  public string model;\n\n// Create a class constructor with a parameter\n  public Car(string modelName)\n  {\n    model = modelName;\n  }\n\nstatic void Main(string[] args)\n  {\n    Car Ford = new Car(\"Mustang\");\n    Console.WriteLine(Ford.model);\n  }\n}\n\n// Outputs \"Mustang\"\n\nYou can have as many parameters as you want:\nExample\nclass Car\n{\n  public string model;\n  public string color;\n  public int year;\n\n// Create a class constructor with multiple parameters\n  public Car(string modelName, string modelColor, int modelYear)\n  {\n    model = modelName;\n    color = modelColor;\n    year = modelYear;\n  }\n\nstatic void Main(string[] args)\n  {\n    Car Ford = new Car(\"Mustang\", \"Red\", 1969);\n    Console.WriteLine(Ford.color + \" \" + Ford.year + \" \" + Ford.model);\n  }\n}\n\n// Outputs Red 1969 Mustang\n\nTip:\nJust like other methods, constructors can be\noverloaded\nby using different numbers of parameters.\nConstructors Save Time\nWhen you consider the example from the \nare very useful, as they help reducing the amount of code:\nWithout constructor:\nprog.cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n\u00a0\u00a0\u00a0 Car Ford = new Car();\n    Ford.model = \"Mustang\";\n    Ford.color = \"red\";\n    Ford.year = 1969;\n\nCar Opel = new Car();\n    Opel.model = \"Astra\";\n    Opel.color = \"white\";\n    Opel.year = 2005;\n\nConsole.WriteLine(Ford.model);\n    Console.WriteLine(Opel.model);\n\u00a0 }\n}\n\nWith constructor:\nprog.cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n\u00a0\u00a0\u00a0 Car Ford = new Car(\"Mustang\", \"Red\", 1969);\n    Car Opel = new Car(\"Astra\", \"White\", 2005);\n\nConsole.WriteLine(Ford.model);\n    Console.WriteLine(Opel.model);\n\u00a0 }\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1e4f7ed7-cfd2-4b22-94c9-b0410525784e",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bb31ec6b-6e09-4b67-89ee-0d4be548e5b5",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2c66d0eb-11ce-4c27-8495-eb6f344f1396",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Constructors\n\nConstructors\nA constructor is a\nspecial method\nthat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "created",
        "used to initialize \nobjects"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Constructors\n\nConstructors\nA constructor is a\nspecial method\nthat is 'used to initialize \nobjects'."
    },
    {
      "question": "What is is that it is called when an object of a class?",
      "options": [
        "None of the above.",
        "created",
        "None of the above.",
        "used to initialize \nobjects"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of is that it is called when an object of a class is 'created'."
    }
  ],
  "summary": "This tutorial covers C#Constructors concepts and techniques. You'll learn how to use C#Constructors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Constructors and how to apply it in your projects."
}