{
  "id": "31911905-425c-490d-9dcb-f58874a03075",
  "title": "C#Data Types",
  "slug": "cdata-types",
  "metadata": {
    "description": "Learn about C#Data Types with clear explanations and practical examples.",
    "keywords": [
      "data",
      "type",
      "numbers",
      "double",
      "types",
      "console",
      "writeline",
      "example",
      "mynum",
      "point"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nData Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Data Types\nAs explained in the variables chapter, a variable in C# must be a specified data type:\nExample\nint myNum = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Integer (whole number)\ndouble myDoubleNum = 5.99D;\u00a0 // Floating point number\nchar myLetter = 'D';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Character\nbool myBool = true;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    // Boolean\nstring myText = \"Hello\";\u00a0\u00a0\u00a0\u00a0 // String\n\nA data type specifies the size and type of variable values.\nIt is important to use the correct data type for the corresponding variable; to avoid errors, to save time and memory, but it will also make your code more maintainable and readable. The most common \ndata types are:\nData Type\nSize\nDescription\nint\n4 bytes\nStores whole numbers from -2,147,483,648 to 2,147,483,647\nlong\n8 bytes\nStores whole numbers from -9,223,372,036,854,775,808 to \n9,223,372,036,854,775,807\nfloat\n4 bytes\nStores fractional numbers. Sufficient for \nstoring 6 to 7 decimal digits\ndouble\n8 bytes\nStores fractional numbers. Sufficient for \nstoring 15 decimal digits\nbool\n1 byte\nStores true or false values\nchar\n2 bytes\nStores a single character/letter, surrounded by single quotes\nstring\n2 bytes per character\nStores a sequence of characters, surrounded by double quotes\nNumbers\nNumber types are divided into two groups:\nInteger types\nstores whole numbers, positive or negative (such as 123 or -456), without decimals. \nValid types are\nint\nand\nlong\n. Which type you should use, depends on the numeric value.\nFloating point types\nrepresents numbers with a fractional \npart, containing one or more decimals. Valid types are\nfloat\nand\ndouble\n.\nEven though there are many numeric types in C#, the most used for numbers \nare\nint\n(for whole numbers) and\ndouble\n(for floating point numbers). However, we will describe them all as you continue to \nread.\nInteger Types\nInt\nThe\nint\ndata type can store whole numbers from -2147483648 to 2147483647.\nIn general, and in our tutorial, the\nint\ndata type is \nthe preferred data type when we create variables with a numeric value.\nExample\nint myNum = 100000;\nConsole.WriteLine(myNum);\n\nLong\nThe\nlong\ndata type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when\nint\nis not large enough to store the value. Note that you should end the value with an \"L\":\nExample\nlong myNum = 15000000000L;\nConsole.WriteLine(myNum);\n\nFloating Point Types\nYou should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.\nThe\nfloat\nand\ndouble\ndata types can store fractional numbers. Note that you should end the value with an \"F\" for floats and \"D\" for doubles:\nFloat Example\nfloat myNum = 5.75F;\nConsole.WriteLine(myNum);\n\nDouble Example\ndouble myNum = 19.99D;\nConsole.WriteLine(myNum);\n\nUse\nfloat\nor\ndouble\n?\nThe\nprecision\nof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision of\nfloat\nis only six or seven \ndecimal digits, while\ndouble\nvariables have a precision \nof about 15 digits. Therefore it is safer to use\ndouble\nfor most calculations.\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample\nfloat f1 = 35e3F;\ndouble d1 = 12E4D;\nConsole.WriteLine(f1);\nConsole.WriteLine(d1);\n\nBooleans\nA boolean data type is declared with the\nbool\nkeyword and can only take the values\ntrue\nor\nfalse\n:\nExample\nbool isCSharpFun = true;\nbool isFishTasty = false;\nConsole.WriteLine(isCSharpFun);\u00a0\u00a0\u00a0// Outputs True\nConsole.WriteLine(isFishTasty);\u00a0\u00a0 // Outputs False\n\nBoolean values are mostly used for conditional testing, which you will learn more about in a later chapter.\nCharacters\nThe\nchar\ndata type is used to store a\nsingle\ncharacter. The character must be \nsurrounded by single quotes, like 'A' or 'c':\nExample\nchar myGrade = 'B';\nConsole.WriteLine(myGrade);\n\nStrings\nThe\nstring\ndata type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nExample\nstring greeting = \"Hello World\";\nConsole.WriteLine(greeting);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "498c5ae9-41f3-4d29-ae61-45c51daa4c9b",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1adc0df4-18a8-40de-8dee-02bdc525c0fe",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "860cc058-6d36-4f45-b059-df9cc2ca6d6f",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It?",
      "options": [
        "Not a It.",
        "None of the above.",
        "important to use the correct data type for the corresponding variable; to avoid errors",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of It is 'important to use the correct data type for the corresponding variable; to avoid errors'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Data Types concepts and techniques. You'll learn how to use C#Data Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Data Types and how to apply it in your projects."
}