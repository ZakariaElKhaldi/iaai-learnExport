{
  "id": "a87522ad-e6b0-423f-ade7-4b85ff1fe1a8",
  "title": "CUnions",
  "slug": "cunions",
  "metadata": {
    "description": "Learn about CUnions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "union",
      "mynum",
      "char",
      "bytes",
      "member",
      "myletter",
      "unions",
      "myunion",
      "members",
      "memory"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Unions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nUnions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C Unions\nA\nunion\nis similar to a\nstruct\nin that it can store members of different data types.\nHowever, there are some differences:\nIn a\nstruct\n, each member has its own memory.\nIn a\nunion\n, all members\nshare the same memory\n, which means you can only use one of the values at a time.\nMost of the time, you will use\nstructs\ninstead of unions, as it can store and access multiple values at the same time, which is more common in everyday programs.\nHowever, unions are useful when you only need to store one of several possible types at a time, and you want to save memory.\nDeclare a Union\nTo create a union, use the\nunion\nkeyword, and then create a variable from it (just like with structs):\nExample\nunion \n    myUnion {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Union declaration\nint myNum;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member \n    (int)\nchar myLetter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member (char)\nchar myString[30];\u00a0\u00a0 // Member (char array)\n};\nint main() {\nunion myUnion u1;\u00a0 \n    // Create a union variable with the name \"u1\":\nreturn 0;\n}\nAccess Union Members\nAnd just like with structs, to access members of a Union, use the dot\n.\nsyntax.\nImportant:\nSince all members share the same memory, changing one will affect the others. Only the\nlast assigned member\nholds a valid value:\nExample\nunion myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[30];\n};\nint main() {\nunion myUnion u1;\nu1.myNum = 1000;\n// Since this is the last value written to the union, myNum no \n    longer holds 1000 - its value is now invalid\nu1.myLetter = 'A';\nprintf(\"myNum: %d\\n\", u1.myNum); // This value is no longer \n    reliable\nprintf(\"myLetter: %c\\n\", u1.myLetter); // Prints 'A'\nreturn 0;\n}\n\nSize of a Union\nThe size of a union will always be the same as the size of its largest member:\nExample\nunion myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[36];\n};\nint main() {\nunion myUnion u1;\nprintf(\"Size of \n    union: %lu bytes\\n\", sizeof(u1));\nreturn 0;\n}\n\nSince the largest member is 36 bytes, the entire union will also be 36 bytes.\nIf it was a\nstruct\ninstead, the size would be 44 bytes:\nmyNum\n(4 bytes) +\nmyLetter\n(4 bytes) +\nmyString\n(36 bytes) =\n44 bytes total\nWhen to Use Unions\nUse unions when:\nYou need to store different types in the same location\nYou only use one type at a time\nSaving memory is important\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "union \n    myUnion {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Union declaration\nint myNum;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member \n    (int)\nchar myLetter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member (char)\nchar myString[30];\u00a0\u00a0 // Member (char array)\n};\nint main() {\nunion myUnion u1;\u00a0 \n    // Create a union variable with the name \"u1\":\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "union myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[30];\n};\nint main() {\nunion myUnion u1;\nu1.myNum = 1000;\n// Since this is the last value written to the union, myNum no \n    longer holds 1000 - its value is now invalid\nu1.myLetter = 'A';\nprintf(\"myNum: %d\\n\", u1.myNum); // This value is no longer \n    reliable\nprintf(\"myLetter: %c\\n\", u1.myLetter); // Prints 'A'\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "union myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[36];\n};\nint main() {\nunion myUnion u1;\nprintf(\"Size of \n    union: %lu bytes\\n\", sizeof(u1));\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "union \n# TODO: Complete this line\nint myNum;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member \n    (int)\nchar myLetter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member (char)\nchar myString[30];\u00a0\u00a0 // Member (char array)\n};\nint main() {\nunion myUnion u1;\u00a0 \n    // Create a union variable with the name \"u1\":\nreturn 0;\n}",
      "solution": "union \n    myUnion {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Union declaration\nint myNum;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member \n    (int)\nchar myLetter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Member (char)\nchar myString[30];\u00a0\u00a0 // Member (char array)\n};\nint main() {\nunion myUnion u1;\u00a0 \n    // Create a union variable with the name \"u1\":\nreturn 0;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "union myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[30];\n};\nint main() {\nunion myUnion u1;\nu1.myNum = 1000;\n// Since this is the last value written to the union, myNum no \n    longer holds 1000 - its value is now invalid\n# TODO: Complete this line\nprintf(\"myNum: %d\\n\", u1.myNum); // This value is no longer \n    reliable\nprintf(\"myLetter: %c\\n\", u1.myLetter); // Prints 'A'\nreturn 0;\n}",
      "solution": "union myUnion {\nint myNum;\nchar myLetter;\nchar \n    myString[30];\n};\nint main() {\nunion myUnion u1;\nu1.myNum = 1000;\n// Since this is the last value written to the union, myNum no \n    longer holds 1000 - its value is now invalid\nu1.myLetter = 'A';\nprintf(\"myNum: %d\\n\", u1.myNum); // This value is no longer \n    reliable\nprintf(\"myLetter: %c\\n\", u1.myLetter); // Prints 'A'\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "7c32b65e-0a6e-4438-9771-af5382d07b2b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e8de8c9c-de71-4c6f-a96c-7bc615f90c27",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c6bf380c-b3db-4350-8234-42106a6fe0dc",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is C\nUnions\n\nC Unions\nA\nunion?",
      "options": [
        "similar to a\nstruct\nin that it can store members of different data types",
        "None of the above.",
        "None of the above.",
        "some differences:\nIn a\nstruct"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of C\nUnions\n\nC Unions\nA\nunion is 'similar to a\nstruct\nin that it can store members of different data types'."
    },
    {
      "question": "What is there?",
      "options": [
        "similar to a\nstruct\nin that it can store members of different data types",
        "some differences:\nIn a\nstruct",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of there is 'some differences:\nIn a\nstruct'."
    }
  ],
  "summary": "This tutorial covers CUnions concepts and techniques. You'll learn how to use CUnions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CUnions and how to apply it in your projects."
}