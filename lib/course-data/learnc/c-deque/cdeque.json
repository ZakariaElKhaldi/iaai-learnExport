{
  "id": "0916f280-7bc4-473a-a403-95bd51ec354d",
  "title": "C++Deque",
  "slug": "cdeque",
  "metadata": {
    "description": "Learn about C++Deque with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "deque",
      "cars",
      "element",
      "string",
      "example",
      "volvo",
      "cout",
      "ford",
      "mazda",
      "elements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Deque"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nDeque",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ Deque\nIn the \nqueue\nare added at the \nend and removed from the front.\nA deque (stands for\nd\nouble-\ne\nnded\nqueue\n) however, is more flexible, as elements can be added and removed \nfrom both ends (at the front and the back). You can also access elements by \nindex numbers.\nTo use a deque, you have to include the\n<deque>\nheader file:\n// Include the deque library\n#include <deque>\nCreate a Deque\nTo create a deque, use the\ndeque\nkeyword, \nand specify the\ntype\nof values it should store within angle brackets\n<>\nand then the name of the deque, like:\ndeque<\ntype\n>\ndequeName\n.\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars;\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces\n{}\n:\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Print deque elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}\n\nNote:\nThe type of the deque (\nstring\nin our example) cannot be changed after its been declared.\nAccess a Deque\nYou can access a deque element by referring to the index number inside square brackets\n[]\n.\nDeques are 0-indexed, meaning that\n[0]\nis the first element,\n[1]\nis the second element, and so on:\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars[0];\u00a0 // Outputs Volvo\n// Get the \n  second element\ncout << cars[1];\u00a0 // Outputs BMW\n\nYou can also access the first or the last element of a deque \nwith the\n.front()\nand\n.back()\nfunctions:\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars.front();\n// Get the last element\ncout << cars.back();\n\nTo access an element at a specified index, you can use the\n.at()\nfunction \nand specify the index number:\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the second element\ncout << cars.at(1);\n// Get the third element\ncout << cars.at(2);\n\nNote:\nThe\n.at()\nfunction is often preferred over square brackets\n[]\nbecause it throws an \nerror message if the element is out of range:\nExample\n// Create a deque called cars that will store strings\ndeque<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// \n  Try to access an element that does \n  not exist (will throw an exception)\ncout << cars.at(6);\n\nChange a Deque Element\nTo change the value of a specific element, you can refer to the index number:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the value of the first element\ncars[0] = \"Opel\";\ncout << cars[0];\u00a0 // Now outputs Opel instead of Volvo\n\nHowever, it is safer to use the\n.at()\nfunction:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the value of the first element\ncars.at(0) = \"Opel\";\ncout << cars.at(0);\u00a0 // Now outputs Opel instead of Volvo\n\nAdd Deque Elements\nTo add elements to a deque, you can use\n.push_front()\nto insert an element at the beginning of the deque and\n.push_back()\nto add an element at the end:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Add an \n  element at the beginning\ncars.push_front(\"Tesla\");\n// Add an element \n  at the end\ncars.push_back(\"VW\");\n\nRemove Deque Elements\nTo remove elements from a deque, use\n.pop_front()\nto remove an element from the beginning of the deque and\n.pop_back()\nto remove an element at the end:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Remove the \n  first element\ncars.pop_front();\n// Remove the last element\ncars.pop_back();\n\nDeque Size\nTo find out how many elements a deque has, use the\n.size()\nfunction:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();\u00a0 \n  // Outputs 4\n\nCheck if a Deque is Empty\nUse the\n.empty()\nfunction to find out if a \ndeque is empty or not.\nThe\n.empty()\nfunction returns\n1\n(\ntrue\n) if the deque is empty and\n0\n(\nfalse\n) \notherwise:\nExample\ndeque<string> cars;\ncout << cars.empty();\u00a0 \n  // Outputs 1 (The deque is empty)\n\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();\u00a0 \n  // Outputs 0 (not empty)\n\nLoop Through a Deque\nYou can loop through the deque elements by using a\nfor\nloop combined with the\n.size()\nfunction:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = \n  0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}\n\nYou can also use a\nfor-each loop\n(introduced in C++ version 11 (2011), which is cleaner and more readable:\nExample\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (string car : cars) {\ncout << car << \"\\n\";\n}\n\nTip:\nIt is also possible to loop through deques with an\niterator\n, which you will learn more about in a later chapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Include the deque library\n#include <deque>",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Print deque elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars[0];\u00a0 // Outputs Volvo\n// Get the \n  second element\ncout << cars[1];\u00a0 // Outputs BMW",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars.front();\n// Get the last element\ncout << cars.back();",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the second element\ncout << cars.at(1);\n// Get the third element\ncout << cars.at(2);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Create a deque called cars that will store strings\ndeque<string> cars \n  = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// \n  Try to access an element that does \n  not exist (will throw an exception)\ncout << cars.at(6);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the value of the first element\ncars[0] = \"Opel\";\ncout << cars[0];\u00a0 // Now outputs Opel instead of Volvo",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the value of the first element\ncars.at(0) = \"Opel\";\ncout << cars.at(0);\u00a0 // Now outputs Opel instead of Volvo",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Add an \n  element at the beginning\ncars.push_front(\"Tesla\");\n// Add an element \n  at the end\ncars.push_back(\"VW\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Remove the \n  first element\ncars.pop_front();\n// Remove the last element\ncars.pop_back();",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();\u00a0 \n  // Outputs 4",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "deque<string> cars;\ncout << cars.empty();\u00a0 \n  // Outputs 1 (The deque is empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();\u00a0 \n  // Outputs 0 (not empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = \n  0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "// Include the deque library\n#include <deque>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "// Create a deque called cars that will store strings\ndeque<string> cars;"
    }
  ],
  "related_topics": [
    {
      "id": "1e161fcf-381e-44db-acc0-b77c69eacc71",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c503cbfa-0ad5-4dac-a593-8478c38e02bb",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "16e8c296-1263-4c73-ae69-12d76a7f5204",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Deque\nIn the \nqueue?",
      "options": [
        "Not a Deque\nIn the \nqueue.",
        "added at the \nend and removed from the front",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Deque\nIn the \nqueue is 'added at the \nend and removed from the front'."
    },
    {
      "question": "Which best describes the main purpose of this cpp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C++Deque concepts and techniques. You'll learn how to use C++Deque effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Deque and how to apply it in your projects."
}