{
  "id": "f9363b7f-17d8-4232-91cf-0670c481f960",
  "title": "C#Exceptions - Try..Catch",
  "slug": "cexceptions-trycatch",
  "metadata": {
    "description": "Learn about C#Exceptions - Try..Catch with clear explanations and practical examples.",
    "keywords": [
      "catch",
      "error",
      "exception",
      "mynumbers",
      "console",
      "writeline",
      "code",
      "message",
      "example",
      "throw"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Exceptions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nExceptions - Try..Catch",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Exceptions\nWhen executing C# code, different errors can occur: coding errors made by the programmer, errors due to wrong input, \nor other unforeseeable things.\nWhen an error occurs, C# will normally stop and generate an error message. The technical term for this is: C# will throw an\nexception\n(throw an error).\nC# try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it is being executed.\nThe\ncatch\nstatement allows you to define a block of code to \nbe executed, if an error occurs in the try block.\nThe\ntry\nand\ncatch\nkeywords \ncome in pairs:\nSyntax\ntry \n{\n\u00a0\u00a0//\nBlock of code to try\n}\ncatch (Exception e)\n{\n\u00a0\u00a0//\nBlock of code to handle errors\n}\nConsider the following example, where we create an array of three integers:\nThis will generate an error, because\nmyNumbers[10]\ndoes not exist.\nint[] myNumbers = {1, 2, 3};\nConsole.WriteLine(myNumbers[10]); // error!\nThe error message will be something like this:\nSystem.IndexOutOfRangeException: 'Index was outside the bounds of the \n  array.'\nIf an error occurs, we can use\ntry...catch\nto catch the error and execute some code to handle it.\nIn the following example, we use the variable inside the catch block (\ne\n) together with the built-in\nMessage\nproperty, which outputs a message that describes the exception:\nExample\ntry\n{\n  int[] myNumbers = {1, 2, 3};\n  Console.WriteLine(myNumbers[10]);\n}\ncatch (Exception e)\n{\n  Console.WriteLine(e.Message);\n}\nThe output will be:\nIndex was outside the bounds of the array.\n\nYou can also output your own error message:\nExample\ntry\n{\n  int[] myNumbers = {1, 2, 3};\n  Console.WriteLine(myNumbers[10]);\n}\ncatch (Exception e)\n{\n  Console.WriteLine(\"Something went wrong.\");\n}\nThe output will be:\nSomething went wrong.\n\nFinally\nThe\nfinally\nstatement lets you execute code, after\ntry...catch\n, regardless of the result:\nExample\ntry\n{\n  int[] myNumbers = {1, 2, 3};\n  Console.WriteLine(myNumbers[10]);\n}\ncatch (Exception e)\n{\n  Console.WriteLine(\"Something went wrong.\");\n}\nfinally\n{\n  Console.WriteLine(\"The 'try catch' is finished.\");\n}\nThe output will be:\nSomething went wrong.\nThe 'try catch' is finished.\n\nThe throw keyword\nThe\nthrow\nstatement allows you to create a custom error.\nThe\nthrow\nstatement is used together with an\nexception class\n. There are many exception classes available in C#:\nArithmeticException\n,\nFileNotFoundException\n,\nIndexOutOfRangeException\n,\nTimeOutException\n, etc:\nExample\nstatic void checkAge(int age)\n{\n  if (age < 18)\n  {\n    throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\");\n  }\n  else\n  {\n    Console.WriteLine(\"Access granted - You are old enough!\");\n  }\n}\n\nstatic void Main(string[] args)\n{\n  checkAge(15);\n}\nThe error message displayed in the program will be:\nSystem.ArithmeticException: 'Access denied - You must be at least 18 years old.'\nIf\nage\nwas 20, you would\nnot\nget an exception:\nExample\ncheckAge(20);\nThe output will be:\nAccess granted - You are old enough!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "03674ef0-d35f-493f-85ed-adb2983761af",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "09877bb7-3eab-43b4-876c-ccb504e97955",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f705d35d-2f0e-4bdc-b0f0-232b86d69178",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it?",
      "options": [
        "being executed",
        "Not a try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it is 'being executed'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Exceptions - Try..Catch concepts and techniques. You'll learn how to use C#Exceptions - Try..Catch effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Exceptions - Try..Catch and how to apply it in your projects."
}