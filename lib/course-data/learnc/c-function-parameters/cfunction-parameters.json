{
  "id": "40b737c9-5f7e-4c75-ae6d-af643cc0e7f6",
  "title": "C++Function Parameters",
  "slug": "cfunction-parameters",
  "metadata": {
    "description": "Learn about C++Function Parameters with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "function",
      "parameters",
      "parameter",
      "fname",
      "myfunction",
      "refsnes",
      "inside",
      "name",
      "example",
      "called"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Function Parameters"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nFunction Parameters",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Parameters and Arguments\nInformation can be passed to functions as a parameter. Parameters act as \nvariables inside the function.\nParameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma:\nSyntax\nvoid\nfunctionName\n(\nparameter1\n,\nparameter2\n,\nparameter3\n) {\n// code to be executed\n}\nThe following example has a \nfunction that takes a\nstring\ncalled\nfname\nas parameter.\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:\nExample\nvoid myFunction(\nstring fname\n) {\ncout << fname << \" Refsnes\\n\";\n}\nint main() {\nmyFunction(\n\"Liam\"\n);\nmyFunction(\n\"Jenny\"\n);\nmyFunction(\n\"Anja\"\n);\nreturn 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// \n  Anja Refsnes\n\nWhen a\nparameter\nis passed to the function, it is called an\nargument\n. So, from the example above:\nfname\nis a\nparameter\n, while\nLiam\n,\nJenny\nand\nAnja\nare\narguments\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "void\nfunctionName\n(\nparameter1\n,\nparameter2\n,\nparameter3\n) {\n// code to be executed\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "void myFunction(\nstring fname\n) {\ncout << fname << \" Refsnes\\n\";\n}\nint main() {\nmyFunction(\n\"Liam\"\n);\nmyFunction(\n\"Jenny\"\n);\nmyFunction(\n\"Anja\"\n);\nreturn 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// \n  Anja Refsnes",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "void\nfunctionName\n(\nparameter1\n# TODO: Complete this line\nparameter2\n,\nparameter3\n) {\n// code to be executed\n}",
      "solution": "void\nfunctionName\n(\nparameter1\n,\nparameter2\n,\nparameter3\n) {\n// code to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "void myFunction(\nstring fname\n) {\ncout << fname << \" Refsnes\\n\";\n}\nint main() {\nmyFunction(\n\"Liam\"\n# TODO: Complete this line\nmyFunction(\n\"Jenny\"\n);\nmyFunction(\n\"Anja\"\n);\nreturn 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// \n  Anja Refsnes",
      "solution": "void myFunction(\nstring fname\n) {\ncout << fname << \" Refsnes\\n\";\n}\nint main() {\nmyFunction(\n\"Liam\"\n);\nmyFunction(\n\"Jenny\"\n);\nmyFunction(\n\"Anja\"\n);\nreturn 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// \n  Anja Refsnes"
    }
  ],
  "related_topics": [
    {
      "id": "339960f3-fab3-4455-b51d-226f7c55921e",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "82935995-c527-48ac-a15b-0e85934985c1",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "48e447f0-fc44-4013-ac20-e2a0dc8e5fb0",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Parameters?",
      "options": [
        "None of the above.",
        "None of the above.",
        "called",
        "specified after the function name"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Parameters is 'specified after the function name'."
    },
    {
      "question": "What is When the function?",
      "options": [
        "None of the above.",
        "specified after the function name",
        "called",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of When the function is 'called'."
    }
  ],
  "summary": "This tutorial covers C++Function Parameters concepts and techniques. You'll learn how to use C++Function Parameters effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Function Parameters and how to apply it in your projects."
}