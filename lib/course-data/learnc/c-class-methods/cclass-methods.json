{
  "id": "9f73390c-1e7c-4366-a8ad-560f8cc9f917",
  "title": "C++Class Methods",
  "slug": "cclass-methods",
  "metadata": {
    "description": "Learn about C++Class Methods with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "class",
      "myclass",
      "function",
      "mymethod",
      "method",
      "myobj",
      "inside",
      "outside",
      "methods",
      "define"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Class Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nClass Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Class Methods\nMethods are\nfunctions\nthat belongs to the class.\nThere are two ways to define functions that belongs to a class:\nInside class definition\nOutside class definition\nIn the following example, we define a function inside the class, and we name \nit \"\nmyMethod\n\".\nNote:\nYou access methods just like you access attributes; by creating an object of \nthe class and using the dot syntax (\n.\n):\nInside Example\nclass MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod() {\u00a0 // Method/function \n  defined inside the \n  class\ncout << \"Hello World!\";\n}\n};\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}\n\nTo define a function outside the class definition, you have to declare it \ninside the class and then define it outside of the class. This is done by specifiying the \nname of the class, followed the scope resolution\n::\noperator, \nfollowed by the name of the function:\nOutside Example\nclass MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod();\u00a0\u00a0 // Method/function \n  declaration\n};\n// Method/function definition outside the class\nvoid\nMyClass::myMethod()\n{\ncout << \"Hello World!\";\n}\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}\n\nParameters\nYou can also add parameters:\nExample\n#include <iostream>\nusing namespace std;\nclass Car {\npublic:\nint speed(int maxSpeed);\n};\nint Car::speed(int maxSpeed) {\nreturn maxSpeed;\n}\nint main() {\nCar myObj; // Create an object of Car\ncout << myObj.speed(200); // \n  Call the method with an argument\nreturn 0;\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Inside Example",
      "content": "",
      "order": 3,
      "code": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod() {\u00a0 // Method/function \n  defined inside the \n  class\ncout << \"Hello World!\";\n}\n};\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of inside example"
    },
    {
      "type": "code_example",
      "title": "Outside Example",
      "content": "",
      "order": 4,
      "code": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod();\u00a0\u00a0 // Method/function \n  declaration\n};\n// Method/function definition outside the class\nvoid\nMyClass::myMethod()\n{\ncout << \"Hello World!\";\n}\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of outside example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "#include <iostream>\nusing namespace std;\nclass Car {\npublic:\nint speed(int maxSpeed);\n};\nint Car::speed(int maxSpeed) {\nreturn maxSpeed;\n}\nint main() {\nCar myObj; // Create an object of Car\ncout << myObj.speed(200); // \n  Call the method with an argument\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod() {\u00a0 // Method/function \n  defined inside the \n  class\n# TODO: Complete this line\n}\n};\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}",
      "solution": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod() {\u00a0 // Method/function \n  defined inside the \n  class\ncout << \"Hello World!\";\n}\n};\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod();\u00a0\u00a0 // Method/function \n  declaration\n};\n// Method/function definition outside the class\nvoid\nMyClass::myMethod()\n{\ncout << \"Hello World!\";\n}\nint main() {\nMyClass \n# TODO: Complete this line\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}",
      "solution": "class MyClass {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The class\npublic:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Access specifier\nvoid myMethod();\u00a0\u00a0 // Method/function \n  declaration\n};\n// Method/function definition outside the class\nvoid\nMyClass::myMethod()\n{\ncout << \"Hello World!\";\n}\nint main() {\nMyClass \n  myObj;\u00a0\u00a0\u00a0\u00a0 // Create an object of MyClass\nmyObj.myMethod();\u00a0 // Call the method\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "e9cffb42-5c17-46d5-9c4e-2209ee7db0ec",
      "title": "Advanced Cpp Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "7cc4181e-b630-4467-928e-06b37614906b",
      "title": "Cpp Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "13dbdb46-7dec-47a0-b532-440200b4b67f",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Class Methods\n\nClass Methods\nMethods?",
      "options": [
        "None of the above.",
        "None of the above.",
        "two ways to define functions that belongs to a class:\nInside class definition\nOutside class definition\nIn the following example",
        "functions\nthat belongs to the class"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Class Methods\n\nClass Methods\nMethods is 'functions\nthat belongs to the class'."
    },
    {
      "question": "What is There?",
      "options": [
        "functions\nthat belongs to the class",
        "None of the above.",
        "None of the above.",
        "two ways to define functions that belongs to a class:\nInside class definition\nOutside class definition\nIn the following example"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of There is 'two ways to define functions that belongs to a class:\nInside class definition\nOutside class definition\nIn the following example'."
    }
  ],
  "summary": "This tutorial covers C++Class Methods concepts and techniques. You'll learn how to use C++Class Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Class Methods and how to apply it in your projects."
}