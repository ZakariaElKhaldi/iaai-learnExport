{
  "id": "478dbdb8-02c2-4109-9f11-fd52e89dad13",
  "title": "C++Maps",
  "slug": "cmaps",
  "metadata": {
    "description": "Learn about C++Maps with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "people",
      "john",
      "adele",
      "elements",
      "example",
      "string",
      "cout",
      "value",
      "keys",
      "function"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Maps"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nMaps",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ Map\nA map stores elements in \"\nkey/value\n\" pairs.\nElements in a map are:\nAccessible by keys (not index), and each key is unique.\nAutomatically sorted in ascending order by their keys.\nTo use a map, you have to include the\n<map>\nheader file:\n// Include the map library\n#include <map>\nCreate a Map\nTo create a map, use the\nmap\nkeyword, \nand specify the\ntype\nof both the key and the value it should store within angle brackets\n<>\n. \nAt last, specify the name of the map, like:\nmap<\nkeytype, \nvaluetype\n>\nmapName\n:\nExample\n// Create a \n  map called people that will store strings as keys and integers as values\nmap<string, int> people\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces\n{}\n:\nExample\n// Create a \n  map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\nAccess a Map\nYou cannot access map elements by referring to index numbers, like you would with\narrays\nand\nvectors\n.\nInstead, you can access a map element by referring to its key inside square \nbrackets\n[]\n:\nExample\n// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Get the value associated with the key \"John\"\ncout << \"John is: \" << \n  people[\"John\"] << \"\\n\";\n// Get the value associated with the key \n  \"Adele\"\ncout << \"Adele is: \" << people[\"Adele\"] << \"\\n\";\n\nYou can also access elements with the\n.at()\nfunction:\nExample\n// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// \n  Get the value associated with the key \"Adele\"\ncout << \"Adele is: \" <<\npeople.at(\"Adele\") << \"\\n\";\n// Get the value associated with the key \n  \"Bo\"\ncout << \"Bo is: \" << people.at(\"Bo\") << \"\\n\";\n\nNote:\nThe\n.at()\nfunction is often preferred over square brackets\n[]\nbecause it throws an \nerror message if the element does not exist:\nExample\n// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// \n  Try to access an element that does \n  not exist (will throw an exception)\ncout << people.at(\"Jenny\");\n\nChange Values\nYou can also change the value associated with a key:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Change John's value to 50 instead of 32\npeople[\"John\"] = 50;\ncout << \"John is: \" << people[\"John\"];\u00a0 // Now outputs John is: 50\n\nHowever, it is safer to use the\n.at()\nfunction:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Change John's value to 50 instead of 32\npeople.at(\"John\") = 50;\ncout << \"John is: \" << people.at(\"John\");\u00a0 // Now outputs John is: 50\n\nAdd Elements\nTo add elements to a map, it is ok to use square brackets\n[]\n:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Add new elements\npeople[\"Jenny\"] = 22;\npeople[\"Liam\"] = 24;\npeople[\"Kasper\"] = 20;\npeople[\"Anja\"] = 30;\n\nBut you can also use the\n.insert()\nfunction:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Add new elements\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Liam\", 24});\npeople.insert({\"Kasper\", 20});\npeople.insert({\"Anja\", 30});\n\nElements with Equal Keys\nA map cannot have elements with equal keys.\nFor example, if we try to add \"Jenny\" two times to the map, it will only keep the first one:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Trying to add two elements with equal keys\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Jenny\", 30});\n\nTo sum up;\nvalues can be equal, but keys must be unique.\nRemove Elements\nTo remove specific elements from a map, you can use the\n.erase()\nfunction:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Remove an element by key\npeople.erase(\"John\");\n\nTo remove all elements from a map, you can use the\n.clear()\nfunction:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Remove all elements\npeople.clear();\nFind the Size of a Map\nTo find out how many elements a map has, use the\n.size()\nfunction:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.size();\u00a0 // Outputs 3\n\nCheck if a Map is Empty\nUse the\n.empty()\nfunction to find out if a \nmap is empty or not.\nThe\n.empty()\nfunction returns\n1\n(\ntrue\n) if the map is empty and\n0\n(\nfalse\n) \notherwise:\nExample\nmap<string, int> people;\ncout << people.empty(); \n  // Outputs 1 (The map is empty)\n\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.empty();\u00a0 \n  // Outputs 0 (not empty)\n\nNote:\nYou can also check if a specific element exists, by using the\n.count(\nkey\n)\nfunction.\nIt returns\n1\n(\ntrue\n) if the element exists and\n0\n(\nfalse\n) \notherwise:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.count(\"John\");\u00a0 \n  // Outputs 1 (John exists)\n\nLoop Through a Map\nYou can loop through a map with the\nfor-each\nloop. \nHowever, there are a couple of things to be aware of:\nYou should use the\nauto\nkeyword (introduced in C++ version 11) inside the\nfor\nloop. \nThis allows the compiler \nto automatically determine the correct data type for each key-value pair.\nSince map elements consist of both keys and values, you have to include\n.first\nto access the keys, and\n.second\nto access values in the loop.\nElements in the map are sorted automatically in ascending order by their \n  keys:\nExample\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\nfor (\nauto\nperson : people) {\ncout <<\nperson.first\n<< \" is: \" <<\nperson.second\n<< \"\\n\";\n}\nThe output will be:\nAdele is: 45\nBo is: 29\nJohn is: 32\n\nIf you want to reverse the order, you can use the\ngreater<\ntype\n>\nfunctor inside the angle brackets, like this:\nExample\nmap<string, int,\ngreater<string>\n> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\nfor (auto person : people) {\ncout << person.first << \" is: \" << \n  person.second << \"\\n\";\n}\nThe output will be:\nJohn is: 32\nBo is: 29\nAdele is: 45\n\nTip:\nIt is also possible to loop through maps with an\niterator\n, which you will learn more about in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Include the map library\n#include <map>",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a \n  map called people that will store strings as keys and integers as values\nmap<string, int> people",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a \n  map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Get the value associated with the key \"John\"\ncout << \"John is: \" << \n  people[\"John\"] << \"\\n\";\n// Get the value associated with the key \n  \"Adele\"\ncout << \"Adele is: \" << people[\"Adele\"] << \"\\n\";",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// \n  Get the value associated with the key \"Adele\"\ncout << \"Adele is: \" <<\npeople.at(\"Adele\") << \"\\n\";\n// Get the value associated with the key \n  \"Bo\"\ncout << \"Bo is: \" << people.at(\"Bo\") << \"\\n\";",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// \n  Try to access an element that does \n  not exist (will throw an exception)\ncout << people.at(\"Jenny\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Change John's value to 50 instead of 32\npeople[\"John\"] = 50;\ncout << \"John is: \" << people[\"John\"];\u00a0 // Now outputs John is: 50",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Change John's value to 50 instead of 32\npeople.at(\"John\") = 50;\ncout << \"John is: \" << people.at(\"John\");\u00a0 // Now outputs John is: 50",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Add new elements\npeople[\"Jenny\"] = 22;\npeople[\"Liam\"] = 24;\npeople[\"Kasper\"] = 20;\npeople[\"Anja\"] = 30;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Add new elements\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Liam\", 24});\npeople.insert({\"Kasper\", 20});\npeople.insert({\"Anja\", 30});",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Trying to add two elements with equal keys\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Jenny\", 30});",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Remove an element by key\npeople.erase(\"John\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n// Remove all elements\npeople.clear();",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.size();\u00a0 // Outputs 3",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "map<string, int> people;\ncout << people.empty(); \n  // Outputs 1 (The map is empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.empty();\u00a0 \n  // Outputs 0 (not empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout \n  << people.count(\"John\");\u00a0 \n  // Outputs 1 (John exists)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\nfor (\nauto\nperson : people) {\ncout <<\nperson.first\n<< \" is: \" <<\nperson.second\n<< \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "map<string, int,\ngreater<string>\n> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\nfor (auto person : people) {\ncout << person.first << \" is: \" << \n  person.second << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "// Include the map library\n#include <map>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a \n# TODO: Complete this line\nmap<string, int> people",
      "solution": "// Create a \n  map called people that will store strings as keys and integers as values\nmap<string, int> people"
    }
  ],
  "related_topics": [
    {
      "id": "c271b027-d38c-42f9-abbd-6f34e5f0618c",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "75dbc9c2-e68c-40a2-be2c-54454f6ebfc7",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b496606f-e500-467a-ab63-15f42618067c",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and each key?",
      "options": [
        "unique",
        "None of the above.",
        "Not a and each key.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of and each key is 'unique'."
    },
    {
      "question": "Which best describes the main purpose of this cpp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C++Maps concepts and techniques. You'll learn how to use C++Maps effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Maps and how to apply it in your projects."
}