{
  "id": "60b6049c-6676-42fd-b4da-3673da302203",
  "title": "CDecimal Precision",
  "slug": "cdecimal-precision",
  "metadata": {
    "description": "Learn about CDecimal Precision with clear explanations and practical examples.",
    "keywords": [
      "c",
      "myfloatnum",
      "decimal",
      "printf",
      "show",
      "digits",
      "point",
      "precision",
      "number",
      "many",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Decimal Precision"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nDecimal Precision",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Set Decimal Precision\nYou have probably already noticed that if you print a floating point number, \nthe output will show many digits after the decimal point:\nExample\nfloat myFloatNum = 3.5;\ndouble myDoubleNum = 19.99;\nprintf(\"%f\\n\", myFloatNum); \n  // Outputs 3.500000\nprintf(\"%lf\", myDoubleNum); // Outputs \n  19.990000\n\nIf you want to remove the extra zeros (set decimal precision), you can use a \ndot (\n.\n) followed by a number that specifies how many digits that should be shown \nafter the decimal point:\nExample\nfloat myFloatNum = 3.5;\nprintf(\"%f\\n\", myFloatNum);\u00a0\u00a0 // Default will show 6 digits after the decimal point\nprintf(\"%.1f\\n\", \n  myFloatNum); // Only show 1 digit\nprintf(\"%.2f\\n\", myFloatNum); // Only \n  show 2 digits\nprintf(\"%.4f\", myFloatNum);\u00a0\u00a0 // Only show 4 digits\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "float myFloatNum = 3.5;\ndouble myDoubleNum = 19.99;\nprintf(\"%f\\n\", myFloatNum); \n  // Outputs 3.500000\nprintf(\"%lf\", myDoubleNum); // Outputs \n  19.990000",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "float myFloatNum = 3.5;\nprintf(\"%f\\n\", myFloatNum);\u00a0\u00a0 // Default will show 6 digits after the decimal point\nprintf(\"%.1f\\n\", \n  myFloatNum); // Only show 1 digit\nprintf(\"%.2f\\n\", myFloatNum); // Only \n  show 2 digits\nprintf(\"%.4f\", myFloatNum);\u00a0\u00a0 // Only show 4 digits",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "float myFloatNum = 3.5;\ndouble myDoubleNum = 19.99;\nprintf(\"%f\\n\", myFloatNum); \n  // Outputs 3.500000\n# TODO: Complete this line\n  19.990000",
      "solution": "float myFloatNum = 3.5;\ndouble myDoubleNum = 19.99;\nprintf(\"%f\\n\", myFloatNum); \n  // Outputs 3.500000\nprintf(\"%lf\", myDoubleNum); // Outputs \n  19.990000"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "float myFloatNum = 3.5;\n# TODO: Complete this line\nprintf(\"%.1f\\n\", \n  myFloatNum); // Only show 1 digit\nprintf(\"%.2f\\n\", myFloatNum); // Only \n  show 2 digits\nprintf(\"%.4f\", myFloatNum);\u00a0\u00a0 // Only show 4 digits",
      "solution": "float myFloatNum = 3.5;\nprintf(\"%f\\n\", myFloatNum);\u00a0\u00a0 // Default will show 6 digits after the decimal point\nprintf(\"%.1f\\n\", \n  myFloatNum); // Only show 1 digit\nprintf(\"%.2f\\n\", myFloatNum); // Only \n  show 2 digits\nprintf(\"%.4f\", myFloatNum);\u00a0\u00a0 // Only show 4 digits"
    }
  ],
  "related_topics": [
    {
      "id": "f1492b58-ba9c-4e8b-b8ba-fc88273fd699",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9412662-6a04-47a5-a5b8-d72e410d303f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3b0d8a54-c2f3-4e54-9486-ffb53cd9c2b6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers CDecimal Precision concepts and techniques. You'll learn how to use CDecimal Precision effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CDecimal Precision and how to apply it in your projects."
}