{
  "id": "b4375cb6-a110-4b88-a27d-c78d4bf4367b",
  "title": "C#Strings",
  "slug": "cstrings",
  "metadata": {
    "description": "Learn about C#Strings with clear explanations and practical examples.",
    "keywords": [
      "string",
      "example",
      "length",
      "strings",
      "hello",
      "variable",
      "methods",
      "console",
      "writeline",
      "world"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Strings"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nStrings",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Strings\nStrings are used for storing text.\nA\nstring\nvariable contains a collection of characters surrounded by double quotes:\nExample\nCreate a variable of type\nstring\nand assign it a value:\nstring greeting = \"Hello\";\n\nA string variable can contain many words, if you want:\nExample\nstring greeting2 = \"Nice to meet you!\";\n\nString Length\nA string in C# is actually an object, which contain properties and methods that can perform certain operations on strings. For example, the length of a string can be found with the\nLength\nproperty:\nExample\nstring txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nConsole.WriteLine(\"The length of the txt string is: \" + txt.Length);\n\nOther Methods\nThere are many string methods available, for example\nToUpper()\nand\nToLower()\n, which returns a copy of the string converted to uppercase or lowercase:\nExample\nstring txt = \"Hello World\";\nConsole.WriteLine(txt.ToUpper());\u00a0\u00a0 // Outputs \"HELLO WORLD\"\nConsole.WriteLine(txt.ToLower());\u00a0\u00a0 // Outputs \"hello world\"\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "bb9d5239-2e1a-4386-84cb-2747a02a920e",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fb0ab0c3-a0a5-40b9-a592-d773f0ae86e7",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a39b080b-3b65-41ac-83e8-87963dedda4c",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Strings\nStrings?",
      "options": [
        "None of the above.",
        "Not a Strings\nStrings.",
        "None of the above.",
        "used for storing text"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Strings\nStrings is 'used for storing text'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Strings concepts and techniques. You'll learn how to use C#Strings effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Strings and how to apply it in your projects."
}