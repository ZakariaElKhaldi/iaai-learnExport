{
  "id": "71b64f85-c5f2-424f-bf59-37dbccf5df96",
  "title": "C#Methods",
  "slug": "cmethods",
  "metadata": {
    "description": "Learn about C#Methods with clear explanations and practical examples.",
    "keywords": [
      "method",
      "mymethod",
      "methods",
      "executed",
      "static",
      "void",
      "code",
      "example",
      "main",
      "program"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMethods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A\nmethod\nis a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a method.\nMethods are used to perform certain actions, and they are also known as\nfunctions\n.\nWhy use methods? To reuse code: define the code once, and use \nit many times.\nCreate a Method\nA method is defined \nwith the name of the method, followed by parentheses\n()\n. C# \nprovides some pre-defined methods, which you already are familiar with, such as\nMain()\n, but you can also create your own methods to perform certain actions:\nExample\nCreate a method inside the Program class:\nclass Program\n{\n  static void MyMethod() \n  {\n\u00a0   // code to be executed\n  }\n}\nExample Explained\nMyMethod()\nis the name of the method\nstatic\nmeans that the method belongs to the Program class and not an object of the Program class. You will learn more about objects and how to access methods through objects later in this tutorial.\nvoid\nmeans that this method does not have a \nreturn value. You will learn more about return values later in this chapter\nNote:\nIn C#, it is good practice to start with an uppercase letter when naming methods, as it makes the code easier to read.\nCall a Method\nTo call (execute) a method, write the method's name followed by two \nparentheses\n()\nand a semicolon\n;\nIn the following example,\nMyMethod()\nis used to print a text (the action), when it is called:\nExample\nInside\nMain()\n, call the\nmyMethod()\nmethod:\nstatic void MyMethod() \n{\n\u00a0 Console.WriteLine(\"I just got executed!\");\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 MyMethod();\n}\n\n// Outputs \"I just got executed!\"\n\nA method can be called multiple times:\nExample\nstatic void MyMethod() \n{\n\u00a0 Console.WriteLine(\"I just got executed!\");\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 MyMethod();\n\u00a0 MyMethod();\n\u00a0 MyMethod();\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2b498f23-7a7c-4efa-a4ad-daad79ff616b",
      "title": "Advanced Csharp Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "987f8bec-2d6c-4ae9-844a-3e3adad70b88",
      "title": "Csharp Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "bed29f0f-d020-42a2-9b7b-942ac32473df",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Methods\n\nA\nmethod\nis a block of code which only runs when it?",
      "options": [
        "used to perform certain actions",
        "None of the above.",
        "called",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Methods\n\nA\nmethod\nis a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Methods?",
      "options": [
        "None of the above.",
        "called",
        "None of the above.",
        "used to perform certain actions"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Methods is 'used to perform certain actions'."
    }
  ],
  "summary": "This tutorial covers C#Methods concepts and techniques. You'll learn how to use C#Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Methods and how to apply it in your projects."
}