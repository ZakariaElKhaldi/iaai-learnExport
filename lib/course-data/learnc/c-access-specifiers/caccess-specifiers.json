{
  "id": "a14035ee-5523-44b7-a8e0-ed84cd46a6a0",
  "title": "C++Access Specifiers",
  "slug": "caccess-specifiers",
  "metadata": {
    "description": "Learn about C++Access Specifiers with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "class",
      "private",
      "access",
      "public",
      "members",
      "example",
      "specifier",
      "accessed",
      "outside",
      "specifiers"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Access Specifiers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nAccess Specifiers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Access Specifiers\nBy now, you are quite familiar with the\npublic\nkeyword that appears in all of our class examples:\nExample\nclass MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};\n\nThe\npublic\nkeyword is an\naccess specifier.\nAccess specifiers define how the members (attributes and methods) of a class can \nbe accessed. In the example above, the members are\npublic\n- which means that they \ncan be accessed and modified from outside the code.\nHowever, what if we want \nmembers to be private and hidden from the outside world?\nIn C++, there are three access specifiers:\npublic\n- members are accessible from outside the class\nprivate\n- members cannot be accessed (or \nviewed) from outside the class\nprotected\n- members cannot be accessed from \noutside the class, however, they can be accessed in inherited classes. You will learn more about\nInheritance\nlater.\nIn the following example, we demonstrate the differences between\npublic\nand\nprivate\nmembers:\nExample\nclass \n    MyClass {\npublic:\n// Public access \n    specifier\nint x;\u00a0\u00a0 // Public attribute\nprivate:\n// Private access specifier\nint y;\u00a0\u00a0 // Private attribute\n};\nint main() {\nMyClass \n    myObj;\nmyObj.x = 25;\u00a0 // Allowed (public)\nmyObj.y = 50;\u00a0 // \n    Not allowed (private)\nreturn 0;\n}\nIf you try to access a private member, an error occurs:\nerror: y is private\n\nNote:\nIt is possible to access private members of a class \nusing a public method inside the same class. See the \nEncapsulation\n) \non how to do this.\nTip:\nIt is considered good practice to declare your class attributes as private (as \noften as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the \n  main ingredient of the\nEncapsulation\nconcept, which you will learn more about in the \nNote:\nBy default, all members of a class are\nprivate\nif you don't specify an access specifier:\nExample\nclass \n    MyClass {\nint x;\u00a0\u00a0 // Private attribute\nint y;\u00a0\u00a0 // Private attribute\n};\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "class MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "class \n    MyClass {\npublic:\n// Public access \n    specifier\nint x;\u00a0\u00a0 // Public attribute\nprivate:\n// Private access specifier\nint y;\u00a0\u00a0 // Private attribute\n};\nint main() {\nMyClass \n    myObj;\nmyObj.x = 25;\u00a0 // Allowed (public)\nmyObj.y = 50;\u00a0 // \n    Not allowed (private)\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "class \n    MyClass {\nint x;\u00a0\u00a0 // Private attribute\nint y;\u00a0\u00a0 // Private attribute\n};",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n# TODO: Complete this line",
      "solution": "class MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class \n    MyClass {\npublic:\n// Public access \n    specifier\nint x;\u00a0\u00a0 // Public attribute\n# TODO: Complete this line\n// Private access specifier\nint y;\u00a0\u00a0 // Private attribute\n};\nint main() {\nMyClass \n    myObj;\nmyObj.x = 25;\u00a0 // Allowed (public)\nmyObj.y = 50;\u00a0 // \n    Not allowed (private)\nreturn 0;\n}",
      "solution": "class \n    MyClass {\npublic:\n// Public access \n    specifier\nint x;\u00a0\u00a0 // Public attribute\nprivate:\n// Private access specifier\nint y;\u00a0\u00a0 // Private attribute\n};\nint main() {\nMyClass \n    myObj;\nmyObj.x = 25;\u00a0 // Allowed (public)\nmyObj.y = 50;\u00a0 // \n    Not allowed (private)\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "c21b2ca8-35b5-4526-8152-f0c46a9d779f",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6d7cc1dd-3bc8-41a2-ae8c-ae1c8e4a52d6",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3346dbb6-cf1b-4009-bf12-69ae5098fd72",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is you?",
      "options": [
        "public\n- which means that they \ncan be accessed and modified from outside the code",
        "None of the above.",
        "None of the above.",
        "quite familiar with the\npublic\nkeyword that appears in all of our class examples:\nExample\nclass MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};\n\nThe\npublic\nkeyword is an\naccess specifier"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of you is 'quite familiar with the\npublic\nkeyword that appears in all of our class examples:\nExample\nclass MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};\n\nThe\npublic\nkeyword is an\naccess specifier'."
    },
    {
      "question": "What is the members?",
      "options": [
        "None of the above.",
        "public\n- which means that they \ncan be accessed and modified from outside the code",
        "None of the above.",
        "quite familiar with the\npublic\nkeyword that appears in all of our class examples:\nExample\nclass MyClass {\u00a0 // The class\npublic:\n// Access specifier\n// class members goes here\n};\n\nThe\npublic\nkeyword is an\naccess specifier"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the members is 'public\n- which means that they \ncan be accessed and modified from outside the code'."
    }
  ],
  "summary": "This tutorial covers C++Access Specifiers concepts and techniques. You'll learn how to use C++Access Specifiers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Access Specifiers and how to apply it in your projects."
}