{
  "id": "2979ce2b-2eda-458b-9e68-7f81921519db",
  "title": "C#Polymorphism",
  "slug": "cpolymorphism",
  "metadata": {
    "description": "Learn about C#Polymorphism with clear explanations and practical examples.",
    "keywords": [
      "class",
      "animal",
      "animalsound",
      "void",
      "derived",
      "public",
      "console",
      "writeline",
      "sound",
      "says"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Polymorphism"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nPolymorphism",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Polymorphism and Overriding Methods\nPolymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\nLike we specified in the \nInheritance\nlets us \ninherit fields and methods from another class.\nPolymorphism\nuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.\nFor example, think of a base class called\nAnimal\nthat has a method called\nanimalSound()\n. Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):\nExample\nclass Animal  // Base class (parent) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Pig : Animal  // Derived class (child) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The pig says: wee wee\");\n\u00a0 }\n}\n\nclass Dog : Animal  // Derived class (child) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The dog says: bow wow\");\n\u00a0 }\n}\nRemember from the\nInheritance chapter\nthat we use the\n:\nsymbol to inherit from a class.\nNow we can create\nPig\nand\nDog\nobjects and call the\nanimalSound()\nmethod on both of them:\nExample\nclass Animal  // Base class (parent) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Pig : Animal  // Derived class (child) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The pig says: wee wee\");\n\u00a0 }\n}\n\nclass Dog : Animal  // Derived class (child) \n{\n\u00a0 public void animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The dog says: bow wow\");\n\u00a0 }\n}\n\nclass Program \n{\n\u00a0 static void Main(string[] args) \n  {\n\u00a0\u00a0\u00a0 Animal myAnimal = new Animal();\u00a0 // Create a Animal object\n\u00a0\u00a0\u00a0 Animal myPig = new Pig();\u00a0 // Create a Pig object\n\u00a0\u00a0\u00a0 Animal myDog = new Dog();\u00a0 // Create a Dog object\n\nmyAnimal.animalSound();\n\u00a0\u00a0\u00a0 myPig.animalSound();\n\u00a0\u00a0\u00a0 myDog.animalSound();\n\u00a0 }\n}\nThe output will be:\nThe animal makes a sound\nThe animal makes a sound\nThe animal makes a sound\n\nNot The Output I Was Looking For\nThe output from the example above was probably not what you expected. That is because the base class method overrides the derived class method, when they share the same name.\nHowever, C# provides an option to override the base class method, by adding the\nvirtual\nkeyword to the method inside the base class, and by using the\noverride\nkeyword for each derived class methods:\nExample\nclass Animal  // Base class (parent) \n{\n\u00a0 public\nvirtual\nvoid animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Pig : Animal  // Derived class (child) \n{\n\u00a0 public\noverride\nvoid animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The pig says: wee wee\");\n\u00a0 }\n}\n\nclass Dog : Animal  // Derived class (child) \n{\n\u00a0 public\noverride\nvoid animalSound() \n  {\n\u00a0\u00a0\u00a0 Console.WriteLine(\"The dog says: bow wow\");\n\u00a0 }\n}\n\nclass Program \n{\n\u00a0 static void Main(string[] args) \n  {\n\u00a0\u00a0\u00a0 Animal myAnimal = new Animal();\u00a0 // Create a Animal object\n\u00a0\u00a0\u00a0 Animal myPig = new Pig();\u00a0 // Create a Pig object\n\u00a0\u00a0\u00a0 Animal myDog = new Dog();\u00a0 // Create a Dog object\n\nmyAnimal.animalSound();\n\u00a0\u00a0\u00a0 myPig.animalSound();\n\u00a0\u00a0\u00a0 myDog.animalSound();\n\u00a0 }\n}\nThe output will be:\nThe animal makes a sound\nThe pig says: wee wee\nThe dog says: bow wow\n\nWhy And When To Use \"Inheritance\" and \"Polymorphism\"?\n- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b2558a5d-1481-4c66-a1ff-0836f010187b",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cd2bdf83-6046-4da1-86a8-30f820c4e8d5",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d10cb42e-21ca-4523-88cc-5b0c6f17b55d",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Polymorphism\n\nPolymorphism and Overriding Methods\nPolymorphism?",
      "options": [
        "None of the above.",
        "None of the above.",
        "because the base class method overrides the derived class method",
        "\"many forms\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Polymorphism\n\nPolymorphism and Overriding Methods\nPolymorphism is '\"many forms\"'."
    },
    {
      "question": "What is That?",
      "options": [
        "\"many forms\"",
        "None of the above.",
        "because the base class method overrides the derived class method",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of That is 'because the base class method overrides the derived class method'."
    }
  ],
  "summary": "This tutorial covers C#Polymorphism concepts and techniques. You'll learn how to use C#Polymorphism effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Polymorphism and how to apply it in your projects."
}