{
  "id": "2bbb272d-69e6-434d-a3a6-1ec72ee3b15a",
  "title": "C#Inheritance",
  "slug": "cinheritance",
  "metadata": {
    "description": "Learn about C#Inheritance with clear explanations and practical examples.",
    "keywords": [
      "class",
      "vehicle",
      "mycar",
      "sealed",
      "inheritance",
      "methods",
      "derived",
      "base",
      "inherit",
      "fields"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nInheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Inheritance (Derived and Base Class)\nIn C#, it is possible to inherit fields and methods from one class to another. We group the \"inheritance concept\" into two categories:\nDerived Class\n(child) - the class that inherits from another class\nBase Class\n(parent) - the class being inherited from\nTo inherit from a class, use the\n:\nsymbol.\nIn the example below, the\nCar\nclass \n(child) inherits the fields and methods from the\nVehicle\nclass \n(parent):\nExample\nclass Vehicle  // base class (parent) \n{\n\u00a0 public string brand = \"Ford\";  // Vehicle field\n\u00a0 public void honk()             // Vehicle method \n  {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0 Console.WriteLine(\"Tuut, tuut!\");\n\u00a0 }\n}\n\nclass Car : Vehicle  // derived class (child)\n{\n\u00a0 public string modelName = \"Mustang\";  // Car field\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    // Create a myCar object\n    Car myCar = new Car();\n\n// Call the honk() method (From the Vehicle class) on the myCar object\n    myCar.honk();\n\n// Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class\n    Console.WriteLine(myCar.brand + \" \" + myCar.modelName);\n  }\n}\nRun example \u00bb\nWhy And When To Use \"Inheritance\"?\n- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.\nTip:\nAlso take a look at the \nPolymorphism\n, which uses inherited methods to perform different tasks.\nThe sealed Keyword\nIf you don't want other classes to inherit from a class, use the\nsealed\nkeyword:\nIf you try to access a\nsealed\nclass, C# will generate an error:\nsealed class Vehicle \n{\n  ...\n}\n\nclass Car : Vehicle \n{\n  ...\n}\nThe error message will be something like this:\n'Car': cannot derive from sealed type 'Vehicle'\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "da9b6c07-25df-4c66-9301-da5220bee9cb",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "264cdbd0-142a-4dae-8225-1c5b11fb6aed",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "dd977e31-2399-409f-a1a2-a5454a0ac08b",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "possible to inherit fields and methods from one class to another",
        "useful for code reusability: reuse fields and methods of an existing class when you create a new class",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'possible to inherit fields and methods from one class to another'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "None of the above.",
        "possible to inherit fields and methods from one class to another",
        "useful for code reusability: reuse fields and methods of an existing class when you create a new class"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'useful for code reusability: reuse fields and methods of an existing class when you create a new class'."
    }
  ],
  "summary": "This tutorial covers C#Inheritance concepts and techniques. You'll learn how to use C#Inheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Inheritance and how to apply it in your projects."
}