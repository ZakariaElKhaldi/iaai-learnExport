{
  "id": "e01d7b08-f6f4-48fa-9fe2-16a2bc5935d6",
  "title": "CData Types",
  "slug": "cdata-types",
  "metadata": {
    "description": "Learn about CData Types with clear explanations and practical examples.",
    "keywords": [
      "c",
      "data",
      "type",
      "format",
      "printf",
      "stores",
      "types",
      "variables",
      "specifier",
      "number",
      "float"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nData Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data Types\nAs explained in the\nVariables chapter\n, a variable in C must be a specified\ndata type\n, \nand you must use a\nformat specifier\ninside the\nprintf()\nfunction to display it:\nExample\n// Create variables\nint myNum = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Integer (whole number)\nfloat \n  myFloatNum = 5.99;\u00a0\u00a0 // Floating point number\nchar myLetter = 'D';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Character\n// Print variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\n\nBasic Data Types\nThe data type specifies the size and type of information the variable will store.\nIn this tutorial, we will focus on the most basic ones:\nData Type\nSize\nDescription\nExample\nint\n2 or 4 bytes\nStores whole numbers, without decimals\n1\nfloat\n4 bytes\nStores fractional numbers, containing one or more decimals. Sufficient for \nstoring 6-7 decimal digits\n1.99\ndouble\n8 bytes\nStores fractional numbers, containing one or more decimals. Sufficient for \nstoring 15 decimal digits\n1.99\nchar\n1 byte\nStores a single character/letter/number, or ASCII values\n'A'\nBasic Format Specifiers\nThere are different format specifiers for each data type. Here are some of \nthem:\nFormat Specifier\nData Type\nTry it\n%d\nor\n%i\nint\nTry it \u00bb\n%f\nor\n%F\nfloat\nTry it \u00bb\n%lf\ndouble\nTry it \u00bb\n%c\nchar\nTry it \u00bb\n%s\nUsed for\nstrings\n(text)\n, which you will learn more about in a later chapter\nTry it \u00bb\nNote:\nIt is important that you use the correct format specifier for the specified data type. \nIf not, the program may produce errors or even crash.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create variables\nint myNum = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Integer (whole number)\nfloat \n  myFloatNum = 5.99;\u00a0\u00a0 // Floating point number\nchar myLetter = 'D';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Character\n// Print variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create variables\nint myNum = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Integer (whole number)\nfloat \n  myFloatNum = 5.99;\u00a0\u00a0 // Floating point number\nchar myLetter = 'D';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Character\n// Print variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\n# TODO: Complete this line",
      "solution": "// Create variables\nint myNum = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Integer (whole number)\nfloat \n  myFloatNum = 5.99;\u00a0\u00a0 // Floating point number\nchar myLetter = 'D';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Character\n// Print variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "5ad87ec5-e633-4d52-ad5c-eaea2875f225",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4855b53c-fbcf-4ce3-aaba-737a7ff6f15f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "41d25a3a-5dbe-45da-8f17-7258267592f3",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Basic Format Specifiers\nThere?",
      "options": [
        "None of the above.",
        "None of the above.",
        "some of \nthem:\nFormat Specifier\nData Type\nTry it\n%d\nor\n%i\nint\nTry it \u00bb\n%f\nor\n%F\nfloat\nTry it \u00bb\n%lf\ndouble\nTry it \u00bb\n%c\nchar\nTry it \u00bb\n%s\nUsed for\nstrings\n(text)",
        "different format specifiers for each data type"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Basic Format Specifiers\nThere is 'different format specifiers for each data type'."
    },
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "None of the above.",
        "different format specifiers for each data type",
        "some of \nthem:\nFormat Specifier\nData Type\nTry it\n%d\nor\n%i\nint\nTry it \u00bb\n%f\nor\n%F\nfloat\nTry it \u00bb\n%lf\ndouble\nTry it \u00bb\n%c\nchar\nTry it \u00bb\n%s\nUsed for\nstrings\n(text)"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Here is 'some of \nthem:\nFormat Specifier\nData Type\nTry it\n%d\nor\n%i\nint\nTry it \u00bb\n%f\nor\n%F\nfloat\nTry it \u00bb\n%lf\ndouble\nTry it \u00bb\n%c\nchar\nTry it \u00bb\n%s\nUsed for\nstrings\n(text)'."
    }
  ],
  "summary": "This tutorial covers CData Types concepts and techniques. You'll learn how to use CData Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CData Types and how to apply it in your projects."
}