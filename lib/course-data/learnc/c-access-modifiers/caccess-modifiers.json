{
  "id": "c94cb369-c895-4c0f-a3b4-844d55c45f8a",
  "title": "C#Access Modifiers",
  "slug": "caccess-modifiers",
  "metadata": {
    "description": "Learn about C#Access Modifiers with clear explanations and practical examples.",
    "keywords": [
      "class",
      "private",
      "access",
      "string",
      "model",
      "public",
      "modifier",
      "myobj",
      "modifiers",
      "accessible"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Access Modifiers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nAccess Modifiers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Access Modifiers\nBy now, you are quite familiar with the\npublic\nkeyword that appears \nin many of our examples:\npublic\nstring color;\nThe\npublic\nkeyword is an\naccess modifier\n, \nwhich is used to set the access level/visibility for classes, fields, methods and properties.\nC# has the following access modifiers:\nModifier\nDescription\npublic\nThe code is accessible for all classes\nprivate\nThe code is only accessible within the same class\nprotected\nThe code is accessible within the same class, or in a class that is \ninherited from that class. You will learn more about\ninheritance\nin a later chapter\ninternal\nThe code is only accessible within its own assembly, but not from another assembly. \nYou will learn more about this in a later chapter\nThere's also two combinations:\nprotected internal\nand\nprivate protected\n.\nFor now, lets focus on\npublic\nand\nprivate\nmodifiers.\nPrivate Modifier\nIf you declare a field with a\nprivate\naccess modifier, it can only be \naccessed within the same class:\nExample\nclass Car\n{\nprivate string model = \"Mustang\";\n\nstatic void Main(string[] args)\n{\nCar myObj = new Car();\n    Console.WriteLine(myObj.model);\n}\n}\nThe output will be:\nMustang\n\nIf you try to access it outside the class, an error will occur:\nExample\nclass Car\n{\n  private string model = \"Mustang\";\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Car myObj = new Car();\n    Console.WriteLine(myObj.model);\n  }\n}\nThe output will be:\n'Car.model' is inaccessible due to its protection level\nThe field 'Car.model' is assigned but its value is never used\n\nPublic Modifier\nIf you declare a field with a\npublic\naccess modifier, it is accessible for \nall classes:\nExample\nclass Car\n{\n  public string model = \"Mustang\";\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Car myObj = new Car();\n    Console.WriteLine(myObj.model);\n  }\n}\nThe output will be:\nMustang\n\nWhy Access Modifiers?\nTo control the visibility of class members (the security level of \neach individual class and class member).\nTo achieve \"\nEncapsulation\n\" - which is the process of making sure that \"sensitive\" data is hidden from users. \nThis is done by declaring fields as\nprivate\n. You will learn more about this in the \nNote:\nBy default, all members of a class are\nprivate\nif you don't specify an access modifier:\nExample\nclass Car\n{\n  string model;  // private\n  string year;   // private\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2646a2b5-cdf3-46a5-a525-763450784503",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6dfb512c-92b9-4ee5-92f4-35111cc71271",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4fab74ef-2ab3-49f1-8d41-956187b64fe2",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is you?",
      "options": [
        "quite familiar with the\npublic\nkeyword that appears \nin many of our examples:\npublic\nstring color;\nThe\npublic\nkeyword is an\naccess modifier",
        "None of the above.",
        "accessible within the same class",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of you is 'quite familiar with the\npublic\nkeyword that appears \nin many of our examples:\npublic\nstring color;\nThe\npublic\nkeyword is an\naccess modifier'."
    },
    {
      "question": "What is Modifier\nDescription\npublic\nThe code is accessible for all classes\nprivate\nThe code is only accessible within the same class\nprotected\nThe code?",
      "options": [
        "None of the above.",
        "accessible within the same class",
        "None of the above.",
        "quite familiar with the\npublic\nkeyword that appears \nin many of our examples:\npublic\nstring color;\nThe\npublic\nkeyword is an\naccess modifier"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Modifier\nDescription\npublic\nThe code is accessible for all classes\nprivate\nThe code is only accessible within the same class\nprotected\nThe code is 'accessible within the same class'."
    }
  ],
  "summary": "This tutorial covers C#Access Modifiers concepts and techniques. You'll learn how to use C#Access Modifiers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Access Modifiers and how to apply it in your projects."
}