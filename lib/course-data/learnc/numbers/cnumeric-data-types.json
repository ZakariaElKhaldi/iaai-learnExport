{
  "id": "b87a1d56-4abc-473f-86e6-71b9ffb56038",
  "title": "C++Numeric Data Types",
  "slug": "cnumeric-data-types",
  "metadata": {
    "description": "Learn about C++Numeric Data Types with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "double",
      "float",
      "mynum",
      "cout",
      "number",
      "point",
      "floating",
      "precision",
      "digits",
      "numeric"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nNumeric Data Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Numeric Types\nUse\nint\nwhen you need to store a whole number without decimals, like 35 or 1000, and\nfloat\nor\ndouble\nwhen you need a \nfloating point number (with decimals), like 9.99 or 3.14515.\nint\nint myNum = 1000;\ncout << myNum;\n\nfloat\nfloat myNum = 5.75;\ncout << myNum;\n\ndouble\ndouble myNum = 19.99;\ncout << myNum;\n\nfloat\nvs.\ndouble\nThe\nprecision\nof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision of\nfloat\nis only six or seven \ndecimal digits, while\ndouble\nvariables have a precision \nof about 15 digits. Therefore it is safer to use\ndouble\nfor most calculations.\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample\nfloat f1 = 35e3;\ndouble d1 = 12E4;\ncout << f1;\ncout << d1;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "int",
      "content": "",
      "order": 3,
      "code": "int myNum = 1000;\ncout << myNum;",
      "language": "java",
      "explanation": "Example of int"
    },
    {
      "type": "code_example",
      "title": "float",
      "content": "",
      "order": 4,
      "code": "float myNum = 5.75;\ncout << myNum;",
      "language": "java",
      "explanation": "Example of float"
    },
    {
      "type": "code_example",
      "title": "double",
      "content": "",
      "order": 5,
      "code": "double myNum = 19.99;\ncout << myNum;",
      "language": "java",
      "explanation": "Example of double"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "float f1 = 35e3;\ndouble d1 = 12E4;\ncout << f1;\ncout << d1;",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "int myNum = 1000;\ncout << myNum;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "float myNum = 5.75;\ncout << myNum;"
    }
  ],
  "related_topics": [
    {
      "id": "81e91ceb-e864-4964-b2b0-a8e61d0ad8f5",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "27fc8bf3-c216-4316-89f1-cedcb19d6042",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c6826f15-249c-46a5-b277-2eb083c6b649",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The precision of\nfloat?",
      "options": [
        "only six or seven \ndecimal digits",
        "None of the above.",
        "None of the above.",
        "safer to use\ndouble\nfor most calculations"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The precision of\nfloat is 'only six or seven \ndecimal digits'."
    },
    {
      "question": "What is Therefore it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "only six or seven \ndecimal digits",
        "safer to use\ndouble\nfor most calculations"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Therefore it is 'safer to use\ndouble\nfor most calculations'."
    }
  ],
  "summary": "This tutorial covers C++Numeric Data Types concepts and techniques. You'll learn how to use C++Numeric Data Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Numeric Data Types and how to apply it in your projects."
}