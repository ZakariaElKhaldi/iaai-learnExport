{
  "id": "e21b4a7b-40db-44fc-8912-1bc14de52c82",
  "title": "C#Examples",
  "slug": "cexamples",
  "metadata": {
    "description": "Learn about C#Examples with clear explanations and practical examples.",
    "keywords": [
      "create",
      "explained",
      "type",
      "string",
      "operator",
      "method",
      "value",
      "loop",
      "variable",
      "math"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Examples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nExamples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Syntax\nCreate a simple \"Hello World\" program\nSyntax Explained\nC# Comments\nSingle-line comment before a line of code\nSingle-line comment at the end of a line of code\nMulti-line comment\nComments Explained\nC# Variables\nCreate a string variable\nCreate an integer variable\nCreate a variable without assigning the value, and assign the value later\nOverwrite an existing variable value\nCombine text and a variable on display\nAdd a variable to another variable\nDeclare many variables of the same type with a comma-separated list\nVariables Explained\nC# Data Types\nA demonstration of different data types in C#\nCreate an int type\nCreate a long type\nCreate a float type\nCreate a double type\nCreate a bool type\nCreate a char type\nCreate a string type\nData Types Explained\nC# Type Casting\nImplicit casting\nExplicit casting\nType conversion methods\nType Casting Explained\nC# User Input\nGet user input text\nGet user input with numbers\nUser Input Explained\nC# Operators\nAddition operator\nSubtraction operator\nMultiplication operator\nDivision operator\nModulus operator\nIncrement operator\nDecrement operator\nAssignment operator\nAddition assignment operator\nOperators Explained\nC# Math\nMath.Max(x,y) - return the highest value of x and y\nMath.Min(x,y) - return the lowest value of x and y\nMath.Sqrt(x) - return the square root of x\nMath.Abs(x) - return the absolute (positive) value of x\nMath.Round() - round a number to the nearest whole number\nMath Explained\nC# Strings\nCreate a string\nFind the length of a string\nUsing methods to convert strings to uppercase and lowercase\nString concatenation\nString concatenation with the Concat() method\nString interpolation\nAccess characters in a string by referring to its index number\nFind the index position of a specific character in a string, by using the IndexOf() method\nUse the Substring() method together with the IndexOf() method\nUse quotes in a string\nStrings Explained\nC# Booleans\nCreate a bool (boolean) type\nFind out if an expression is true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nC# If...Else (Conditions)\nThe if statement\nThe else statement\nThe else if statement\nIf...Else Explained\nC# Switch\nThe switch statement\nThe switch statement with a default keyword\nSwitch Explained\nC# Loops\nWhile loop\nDo while loop\nFor loop\nforeach loop\nBreak a loop\nContinue a loop\nLoops Explained\nC# Arrays\nCreate and access an array\nChange an array element\nFind the length of an array\nAccess and change an array element\nLoop through an array\nLoop through an array with foreach\nSort an array\nUsing System.Linq\nArrays Explained\nC# Methods\nCreate and call a method\nCall a method multiple times\nMethod with parameters\nDefault parameter value\nMultiple parameters\nReturn value\nReturn the sum of a method's two parameters\nNamed arguments\nOverload a method\nMethods Explained\nC# Classes and Objects\nCreate a class and an object of a class\nCreate multiple objects of a class\nUse multiple classes for better organization\nAccess fields and methods\nCreate a class constructor\nConstructor with parameters\nPrivate modifier\nPublic modifier\nProperties (get and set)\nAutomatic (short-hand) properties\nInheritance\nPolymorphism\nAbstraction\nInterface\nMultiple interfaces\nEnums\nWorking with files\nClasses and Objects Explained\nC# Exceptions (Try...Catch)\nThe try...catch statement\nThe finally statement\nExceptions Explained\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b08aa5ed-e146-458d-8166-f06e82cca461",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "04058c20-654b-4976-a42c-95c5aadb8e4f",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "af58ac0e-3467-4af4-a81a-a87e21d4b51a",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is type\nFind out if an expression?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nC# If"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of type\nFind out if an expression is 'true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nC# If'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Examples concepts and techniques. You'll learn how to use C#Examples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Examples and how to apply it in your projects."
}