{
  "id": "b28e7ebd-3056-4c95-97ab-fdf806d8ef69",
  "title": "C++Multilevel Inheritance",
  "slug": "cmultilevel-inheritance",
  "metadata": {
    "description": "Learn about C++Multilevel Inheritance with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "class",
      "derived",
      "mygrandchild",
      "mychild",
      "myclass",
      "public",
      "multilevel",
      "inheritance",
      "example",
      "parent"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Multilevel Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nMultilevel Inheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Multilevel Inheritance\nA class can also be derived from one class, which is already derived from \nanother class.\nIn the following example,\nMyGrandChild\nis derived from class\nMyChild\n(which is derived \nfrom\nMyClass\n).\nExample\n// Base class (parent)\nclass MyClass {\npublic:\nvoid \n    myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n// \n    Derived \n    class (child)\nclass MyChild: public MyClass {\n};\n// Derived class \n    (grandchild)\nclass MyGrandChild: public MyChild {\n};\nint main() {\nMyGrandChild myObj;\nmyObj.myFunction();\nreturn 0;\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Base class (parent)\nclass MyClass {\npublic:\nvoid \n    myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n// \n    Derived \n    class (child)\nclass MyChild: public MyClass {\n};\n// Derived class \n    (grandchild)\nclass MyGrandChild: public MyChild {\n};\nint main() {\nMyGrandChild myObj;\nmyObj.myFunction();\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Base class (parent)\nclass MyClass {\npublic:\nvoid \n    myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n// \n    Derived \n    class (child)\nclass MyChild: public MyClass {\n};\n// Derived class \n    (grandchild)\nclass MyGrandChild: public MyChild {\n};\nint main() {\nMyGrandChild myObj;\nmyObj.myFunction();\nreturn 0;\n# TODO: Complete this line",
      "solution": "// Base class (parent)\nclass MyClass {\npublic:\nvoid \n    myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n// \n    Derived \n    class (child)\nclass MyChild: public MyClass {\n};\n// Derived class \n    (grandchild)\nclass MyGrandChild: public MyChild {\n};\nint main() {\nMyGrandChild myObj;\nmyObj.myFunction();\nreturn 0;\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "89e4da9a-27e9-4fa6-b301-0629e10ca095",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "237e8c7f-57a4-443a-9cbf-839c32fe6d12",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "19d1ab1a-844d-4455-b547-54a7ad7dd916",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "already derived from \nanother class",
        "derived from class\nMyChild\n(which is derived \nfrom\nMyClass\n)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'already derived from \nanother class'."
    },
    {
      "question": "What is MyGrandChild?",
      "options": [
        "derived from class\nMyChild\n(which is derived \nfrom\nMyClass\n)",
        "already derived from \nanother class",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of MyGrandChild is 'derived from class\nMyChild\n(which is derived \nfrom\nMyClass\n)'."
    }
  ],
  "summary": "This tutorial covers C++Multilevel Inheritance concepts and techniques. You'll learn how to use C++Multilevel Inheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Multilevel Inheritance and how to apply it in your projects."
}