{
  "id": "8697f932-121c-4056-b135-9675ee89b386",
  "title": "CMemory Management Example",
  "slug": "cmemory-management-example",
  "metadata": {
    "description": "Learn about CMemory Management Example with clear explanations and practical examples.",
    "keywords": [
      "c",
      "mylist",
      "list",
      "memory",
      "data",
      "items",
      "numitems",
      "size",
      "item",
      "function",
      "example"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Memory Example"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nMemory Management Example",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Real-Life Memory Management Example\nTo demonstrate a practical example of\ndynamic memory\n, we created a program that can make a list of any length.\nRegular arrays in C have a fixed length and cannot be changed, but with \ndynamic memory we can create a list as long as we like:\nExample\nstruct list {\nint *data; // Points to the memory where the list items are \n  stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList, int item);\nint main() {\nstruct list myList;\nint amount;\n// Create a list and start with \n  enough space for 10 items\nmyList.numItems = 0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));\n// Find out if \n  memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit \n  the program with an error code\n}\n// Add any number of \n  items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}\n// \n  Display the contents of the list\nfor (int j = 0; j < myList.numItems; j++) {\nprintf(\"%d \", myList.data[j]);\n}\n// Free the memory when it is no \n  longer needed\nfree(myList.data);\nmyList.data = NULL;\nreturn 0;\n}\n// This function adds an item to a list\nvoid addToList(struct list \n  *myList, int item) {\n// If the list is full then resize the memory to \n  fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += \n  10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}\n// Add the item to the end of the list\nmyList->data[myList->numItems] = item;\nmyList->numItems++;\n}\n\nPointers to structures:\nThis example has a pointer to the structure\nmyList\n. Because we are using a\npointer\nto the structure instead of the structure itself, we use the arrow syntax (\n->\n) to access the structure's members.\nExample explained\nThis example has three parts:\nA structure\nmyList\nthat contains a list's data\nThe\nmain()\nfunction with the program in it.\nA function\naddToList()\nwhich adds an item to the list\nThe\nmyList\nstructure\nThe\nmyList\nstructure contains all of the information about the list, including its contents. It has three members:\ndata\n- A pointer to the dynamic memory which contains the contents of the list\nnumItems\n- Indicates the number of items that list has\nsize\n- Indicates how many items can fit in the allocated memory\nWe use a structure so that we can easily pass all of this information into a function.\nThe\nmain()\nfunction\nThe\nmain()\nfunction starts by initializing the list with space for 10 items:\n// Create a list and start with enough space for 10 items\nmyList.numItems = \n  0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));\nmyList.numItems\nis set to 0 because the list starts off empty.\nmyList.size\nkeeps track of how much memory is reserved. We set it to 10 because we will reserve enough memory for 10 items.\nWe then allocate the memory and store a pointer to it in\nmyList.data\n.\nThen we include error checking to find out if memory allocation was successful:\n// Find out if memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit the program with an error code\n}\nIf everything is fine, a loop adds 44 items to the list using the\naddToList()\nfunction:\n// Add any number of items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}\nIn the code above,\n&myList\nis a pointer to the list and\ni + 1\nis a number that we want to add to the list. We chose\ni + 1\nso that the list would start at 1 instead of 0. You can choose any number to add to the list.\nAfter all of the items have been added to the list, the \n// Display the contents of the list\nfor (int j = 0; j < myList.numItems; \n  j++) {\nprintf(\"%d \", myList.data[j]);\n}\nWhen we finish printing the list we free the memory to prevent memory leaks.\n// Free the memory when it is no longer needed\nfree(myList.data);\nmyList.data = NULL;\nThe\naddToList()\nfunction\nOur\naddToList()\nfunction adds an item to the list. It takes two parameters:\nvoid addToList(struct list *myList, int item)\nA pointer to the list.\nThe value to be added to the list.\nThe function first checks if the list is full by comparing the number of \nitems in the list to the size of the list. If the list is full then it \nreallocates the memory to fit 10 more items:\n// If the list is full then resize the memory to fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += 10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}\nFinally, the function adds the item to the end of list. The index at\nmyList->numItems\nis always at the end of the list because it increases by 1 each time a new item is added.\n// Add the item to the end of the list\nmyList->data[myList->numItems] = \n  item;\nmyList->numItems++;\nWhy do we reserve 10 items at a time?\nOptimizing is a balancing act between memory and performance. Even though we may be allocating some memory that we are not using, reallocating memory too frequently can be inefficient. There is a balance between allocating too much memory and allocating memory too frequently.\nWe chose the number 10 for this example, but it depends on how much data you expect and how often it changes. For example, if we know beforehand that we are going to have exactly 44 items then we can allocate memory for exactly 44 items and only allocate it once.\nComplete stdlib Reference\nFor a complete reference of memory management functions and other functions found in the standard library, go to our\nC \n<stdlib.h> Library Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "struct list {\nint *data; // Points to the memory where the list items are \n  stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList, int item);\nint main() {\nstruct list myList;\nint amount;\n// Create a list and start with \n  enough space for 10 items\nmyList.numItems = 0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));\n// Find out if \n  memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit \n  the program with an error code\n}\n// Add any number of \n  items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}\n// \n  Display the contents of the list\nfor (int j = 0; j < myList.numItems; j++) {\nprintf(\"%d \", myList.data[j]);\n}\n// Free the memory when it is no \n  longer needed\nfree(myList.data);\nmyList.data = NULL;\nreturn 0;\n}\n// This function adds an item to a list\nvoid addToList(struct list \n  *myList, int item) {\n// If the list is full then resize the memory to \n  fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += \n  10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}\n// Add the item to the end of the list\nmyList->data[myList->numItems] = item;\nmyList->numItems++;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a list and start with enough space for 10 items\nmyList.numItems = \n  0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Find out if memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit the program with an error code\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Add any number of items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Display the contents of the list\nfor (int j = 0; j < myList.numItems; \n  j++) {\nprintf(\"%d \", myList.data[j]);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Free the memory when it is no longer needed\nfree(myList.data);\nmyList.data = NULL;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "void addToList(struct list *myList, int item)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// If the list is full then resize the memory to fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += 10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// Add the item to the end of the list\nmyList->data[myList->numItems] = \n  item;\nmyList->numItems++;",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "struct list {\nint *data; // Points to the memory where the list items are \n  stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList, int item);\nint main() {\nstruct list myList;\nint amount;\n// Create a list and start with \n  enough space for 10 items\nmyList.numItems = 0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));\n// Find out if \n  memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit \n  the program with an error code\n}\n// Add any number of \n  items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}\n// \n  Display the contents of the list\nfor (int j = 0; j < myList.numItems; j++) {\nprintf(\"%d \", myList.data[j]);\n}\n// Free the memory when it is no \n  longer needed\nfree(myList.data);\nmyList.data = NULL;\nreturn 0;\n}\n// This function adds an item to a list\nvoid addToList(struct list \n# TODO: Complete this line\n// If the list is full then resize the memory to \n  fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += \n  10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}\n// Add the item to the end of the list\nmyList->data[myList->numItems] = item;\nmyList->numItems++;\n}",
      "solution": "struct list {\nint *data; // Points to the memory where the list items are \n  stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList, int item);\nint main() {\nstruct list myList;\nint amount;\n// Create a list and start with \n  enough space for 10 items\nmyList.numItems = 0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));\n// Find out if \n  memory allocation was successful\nif (myList.data == NULL) {\nprintf(\"Memory allocation failed\");\nreturn 1; // Exit \n  the program with an error code\n}\n// Add any number of \n  items to the list specified by the amount variable\namount = 44;\nfor (int i = 0; i < amount; i++) {\naddToList(&myList, i + 1);\n}\n// \n  Display the contents of the list\nfor (int j = 0; j < myList.numItems; j++) {\nprintf(\"%d \", myList.data[j]);\n}\n// Free the memory when it is no \n  longer needed\nfree(myList.data);\nmyList.data = NULL;\nreturn 0;\n}\n// This function adds an item to a list\nvoid addToList(struct list \n  *myList, int item) {\n// If the list is full then resize the memory to \n  fit 10 more items\nif (myList->numItems == myList->size) {\nmyList->size += \n  10;\nmyList->data = realloc( myList->data, myList->size * sizeof(int) );\n}\n// Add the item to the end of the list\nmyList->data[myList->numItems] = item;\nmyList->numItems++;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a list and start with enough space for 10 items\nmyList.numItems = \n  0;\nmyList.size = 10;\n# TODO: Complete this line",
      "solution": "// Create a list and start with enough space for 10 items\nmyList.numItems = \n  0;\nmyList.size = 10;\nmyList.data = malloc(myList.size * sizeof(int));"
    }
  ],
  "related_topics": [
    {
      "id": "6b1acedb-c759-44cf-a9b9-f5ca6f9ef863",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ad5f5c14-39e9-414f-8532-8b0e4a379e67",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a72f3aef-9ddd-443a-8504-02477e8b6e92",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Points to the memory where the list items?",
      "options": [
        "no \n  longer needed\nfree(myList",
        "None of the above.",
        "stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Points to the memory where the list items is 'stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList'."
    },
    {
      "question": "What is Free the memory when it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "stored\nint numItems; // Indicates how many items are currently in the list\nint size; // Indicates how many items fit in the allocated memory\n};\nvoid addToList(struct list *myList",
        "no \n  longer needed\nfree(myList"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Free the memory when it is 'no \n  longer needed\nfree(myList'."
    }
  ],
  "summary": "This tutorial covers CMemory Management Example concepts and techniques. You'll learn how to use CMemory Management Example effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CMemory Management Example and how to apply it in your projects."
}