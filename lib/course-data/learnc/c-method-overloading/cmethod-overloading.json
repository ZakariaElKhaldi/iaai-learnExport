{
  "id": "cd088923-bfab-4fd9-a70b-b8eee1293c67",
  "title": "C#Method Overloading",
  "slug": "cmethod-overloading",
  "metadata": {
    "description": "Learn about C#Method Overloading with clear explanations and practical examples.",
    "keywords": [
      "double",
      "static",
      "example",
      "plusmethod",
      "method",
      "methods",
      "return",
      "console",
      "writeline",
      "overloading"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Method Overloading"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMethod Overloading",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Method Overloading\nWith\nmethod overloading\n, multiple methods can have the same name with different\nparameters:\nExample\nint MyMethod(int x)\nfloat MyMethod(float x)\ndouble MyMethod(double x, double y)\nConsider the following example, which have two methods that add numbers of different type:\nExample\nstatic int PlusMethodInt(int x, int y)\n{\n  return x + y;\n}\n\nstatic double PlusMethodDouble(double x, double y)\n{\n  return x + y;\n}\n\nstatic void Main(string[] args)\n{\n  int myNum1 = PlusMethodInt(8, 5);\n  double myNum2 = PlusMethodDouble(4.3, 6.26);\n  Console.WriteLine(\"Int: \" + myNum1);\n  Console.WriteLine(\"Double: \" + myNum2);\n}\n\nInstead of defining two methods that should do the same thing, it is better to overload one.\nIn the example below, we overload the\nPlusMethod\nmethod to work for both\nint\nand\ndouble\n:\nExample\nstatic int PlusMethod(int x, int y)\n{\n  return x + y;\n}\n\nstatic double PlusMethod(double x, double y)\n{\n  return x + y;\n}\n\nstatic void Main(string[] args)\n{\n  int myNum1 = PlusMethod(8, 5);\n  double myNum2 = PlusMethod(4.3, 6.26);\n  Console.WriteLine(\"Int: \" + myNum1);\n  Console.WriteLine(\"Double: \" + myNum2);\n}\n\nNote:\nMultiple methods can have the same name \n  as long as the number and/or type of parameters are different.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2ec24290-19c0-4a0c-9de0-017fc417f165",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0c476485-b33d-4071-a7ed-7e480d258f6c",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9f572f73-dfbd-45d6-b5c7-51940bd654ae",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "better to overload one",
        "different",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it is 'better to overload one'."
    },
    {
      "question": "What is or type of parameters?",
      "options": [
        "better to overload one",
        "None of the above.",
        "different",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of or type of parameters is 'different'."
    }
  ],
  "summary": "This tutorial covers C#Method Overloading concepts and techniques. You'll learn how to use C#Method Overloading effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Method Overloading and how to apply it in your projects."
}