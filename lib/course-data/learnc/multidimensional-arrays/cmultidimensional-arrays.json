{
  "id": "4ca3ac32-6515-4272-a57b-dab9351c9c96",
  "title": "C#Multidimensional Arrays",
  "slug": "cmultidimensional-arrays",
  "metadata": {
    "description": "Learn about C#Multidimensional Arrays with clear explanations and practical examples.",
    "keywords": [
      "array",
      "numbers",
      "arrays",
      "element",
      "example",
      "dimensional",
      "loop",
      "multidimensional",
      "elements",
      "first"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Multidimensional arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMultidimensional Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Multidimensional Arrays\nIn the \narrays\n, \nwhich is also known as\nsingle dimension arrays\n. These are great, and something you will use a lot while programming in C#. However, if you want to store data as a tabular form, like a table with rows and columns, \nyou need to get familiar with\nmultidimensional arrays\n.\nA multidimensional array is basically an array of arrays.\nArrays can have any number of dimensions. The most common are two-dimensional arrays (2D).\nTwo-Dimensional Arrays\nTo create a 2D array, add each array within its own set of curly braces, and insert a comma (\n,\n) inside the square brackets:\nExample\nint[,] numbers = { {1, 4, 2}, {3, 6, 8} };\nGood to know:\nThe single comma\n[,]\nspecifies that the array is two-dimensional. A three-dimensional array would have two commas:\nint[,,]\n.\nnumbers\nis now an array with two arrays as its elements. \nThe first array element contains three elements: 1, 4 and 2, while the second \narray element contains 3, 6 and 8. To visualize it, think of the array as a table with rows and columns:\nAccess Elements of a 2D Array\nTo access an element of a two-dimensional array, you must specify two indexes: one for the array, and one for the element inside that array. Or better yet, with the table visualization in mind; one for the row and one for the column (see example below).\nThis statement accesses the value of the element in the\nfirst row (0)\nand\nthird column (2)\nof the\nnumbers\narray:\nExample\nint[,] numbers = { {1, 4, 2}, {3, 6, 8} };\nConsole.WriteLine(numbers[0, 2]);  // Outputs 2\n\nRemember that:\nArray indexes start with 0: [0] is the first element. [1] is the second element, etc.\nChange Elements of a 2D Array\nYou can also change the value of an element.\nThe following example will change the value of the element in the\nfirst row (0)\nand\nfirst column (0)\n:\nExample\nint[,] numbers = { {1, 4, 2}, {3, 6, 8} };\nnumbers[0, 0] = 5;  // Change value to 5\nConsole.WriteLine(numbers[0, 0]); // Outputs 5 instead of 1\n\nLoop Through a 2D Array\nYou can easily loop through the elements of a two-dimensional array with a\nforeach\nloop:\nExample\nint[,] numbers = { {1, 4, 2}, {3, 6, 8} };\n\nforeach (int i in numbers)\n{\n  Console.WriteLine(i);\n}\n\nYou can also use a\nfor loop\n. For multidimensional arrays, \nyou need one loop for each of the array's dimensions.\nAlso note that we have to use\nGetLength()\ninstead of\nLength\nto specify how many times the loop should run:\nExample\nint[,] numbers = { {1, 4, 2}, {3, 6, 8} };\n\nfor (int i = 0; i < numbers.GetLength(0); i++) \n{ \n  for (int j = 0; j < numbers.GetLength(1); j++) \n  { \n    Console.WriteLine(numbers[i, j]); \n  } \n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "485c15e4-b20b-4aa5-9427-16ccc1b3dbfd",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "79bb69f5-a7cb-4eb6-a206-c380ea16dc66",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "19995051-fba6-43a5-95de-54823bd6484b",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "great",
        "also known as\nsingle dimension arrays",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of which is 'also known as\nsingle dimension arrays'."
    },
    {
      "question": "What is These?",
      "options": [
        "None of the above.",
        "None of the above.",
        "also known as\nsingle dimension arrays",
        "great"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of These is 'great'."
    }
  ],
  "summary": "This tutorial covers C#Multidimensional Arrays concepts and techniques. You'll learn how to use C#Multidimensional Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Multidimensional Arrays and how to apply it in your projects."
}