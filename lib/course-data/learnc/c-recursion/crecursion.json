{
  "id": "7783ac58-ab5f-47cd-b66c-717449536ce7",
  "title": "C++Recursion",
  "slug": "crecursion",
  "metadata": {
    "description": "Learn about C++Recursion with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "recursion",
      "function",
      "numbers",
      "example",
      "result",
      "adding",
      "return",
      "returns",
      "technique",
      "call"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Recursion"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nRecursion",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Recursion\nRecursion is the technique of making a function call itself. This technique provides a way\nto break complicated problems down into simple problems which are easier to solve.\nRecursion may be a bit difficult to understand. The\nbest way to figure out how it works is to experiment with it.\nRecursion Example\nAdding two numbers together is easy to do, but adding a range of numbers is more\ncomplicated. In the following example, recursion is used to add a range of numbers\ntogether by breaking it down into the simple task of adding two numbers:\nExample\nint sum(int k) {\nif (k > 0) {\nreturn k + sum(k - 1);\n} else {\nreturn 0;\n}\n}\nint main() {\nint result = sum(10);\ncout << \n  result;\nreturn 0;\n}\n\nExample Explained\nWhen the\nsum()\nfunction is called, it adds parameter\nk\nto the sum of all numbers smaller\nthan\nk\nand returns the result. When k becomes 0, the function just returns 0. When\nrunning, the program follows these steps:\n10 + sum(9)\n10 + ( 9 + sum(8) )\n10 + ( 9 + ( 8 + sum(7) ) )\n...\n10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0)\n10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0\nSince the function does not call itself when\nk\nis 0, the program stops there and returns the\nresult.\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "int sum(int k) {\nif (k > 0) {\nreturn k + sum(k - 1);\n} else {\nreturn 0;\n}\n}\nint main() {\nint result = sum(10);\ncout << \n  result;\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int sum(int k) {\nif (k > 0) {\nreturn k + sum(k - 1);\n} else {\nreturn 0;\n}\n}\nint main() {\nint result = sum(10);\ncout << \n  result;\nreturn 0;\n# TODO: Complete this line",
      "solution": "int sum(int k) {\nif (k > 0) {\nreturn k + sum(k - 1);\n} else {\nreturn 0;\n}\n}\nint main() {\nint result = sum(10);\ncout << \n  result;\nreturn 0;\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "826ddcaa-9983-4df1-8d4a-bb53686740b6",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4f8b2e62-c913-4b84-9397-035af05be01d",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ccd7244c-79ff-4859-845f-61558b1084c3",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Recursion\n\nRecursion\nRecursion?",
      "options": [
        "the technique of making a function call itself",
        "None of the above.",
        "None of the above.",
        "easier to solve"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Recursion\n\nRecursion\nRecursion is 'the technique of making a function call itself'."
    },
    {
      "question": "What is This technique provides a way\nto break complicated problems down into simple problems which?",
      "options": [
        "the technique of making a function call itself",
        "None of the above.",
        "easier to solve",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This technique provides a way\nto break complicated problems down into simple problems which is 'easier to solve'."
    }
  ],
  "summary": "This tutorial covers C++Recursion concepts and techniques. You'll learn how to use C++Recursion effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Recursion and how to apply it in your projects."
}