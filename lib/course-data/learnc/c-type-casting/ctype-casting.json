{
  "id": "94b23538-e242-4965-8001-2ca3b2ad138c",
  "title": "C#Type Casting",
  "slug": "ctype-casting",
  "metadata": {
    "description": "Learn about C#Type Casting with clear explanations and practical examples.",
    "keywords": [
      "type",
      "convert",
      "casting",
      "double",
      "myint",
      "console",
      "writeline",
      "mydouble",
      "size",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Type Casting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nType Casting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Type Casting\nType casting is when you assign a value of one data type to another type.\nIn C#, there are two types of casting:\nImplicit Casting\n(automatically) - converting a smaller type \nto a larger type size\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nExplicit Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\nImplicit Casting\nImplicit casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\nint myInt = 9;\ndouble myDouble = myInt;       // Automatic casting: int to double\n\nConsole.WriteLine(myInt);\u00a0\u00a0\u00a0\u00a0\u00a0 // Outputs 9\nConsole.WriteLine(myDouble);\u00a0\u00a0 // Outputs 9\n\nExplicit Casting\nExplicit casting must be done manually by placing the type in parentheses \nin front of the value:\nExample\ndouble myDouble = 9.78;\nint myInt = (int) myDouble;\u00a0\u00a0\u00a0\u00a0// Manual casting: double to int\n\nConsole.WriteLine(myDouble);\u00a0\u00a0\u00a0// Outputs 9.78\nConsole.WriteLine(myInt);\u00a0\u00a0    // Outputs 9\n\nType Conversion Methods\nIt is also possible to convert data types explicitly by using built-in methods, such as\nConvert.ToBoolean\n,\nConvert.ToDouble\n,\nConvert.ToString\n,\nConvert.ToInt32\n(\nint\n) and\nConvert.ToInt64\n(\nlong\n):\nExample\nint myInt = 10;\ndouble myDouble = 5.25;\nbool myBool = true;\n\nConsole.WriteLine(Convert.ToString(myInt));    // convert int to string\nConsole.WriteLine(Convert.ToDouble(myInt));    // convert int to double\nConsole.WriteLine(Convert.ToInt32(myDouble));  // convert double to int\nConsole.WriteLine(Convert.ToString(myBool));   // convert bool to string\n\nWhy Conversion?\nMany times, there's no need for type conversion. But sometimes you have to. Take a look at the \nuser input\n, to see an example of this.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "afeea679-1412-499e-b488-3a3438378cac",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f63a5265-7655-4c79-a55f-8fa1eaf770a8",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e77e512d-cc04-4545-83ba-4101723d170a",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Type Casting\nType casting?",
      "options": [
        "None of the above.",
        "when you assign a value of one data type to another type",
        "None of the above.",
        "two types of casting:\nImplicit Casting\n(automatically) - converting a smaller type \nto a larger type size\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nExplicit Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\nImplicit Casting\nImplicit casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\nint myInt = 9;\ndouble myDouble = myInt;       // Automatic casting: int to double\n\nConsole"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Type Casting\nType casting is 'when you assign a value of one data type to another type'."
    },
    {
      "question": "What is there?",
      "options": [
        "None of the above.",
        "two types of casting:\nImplicit Casting\n(automatically) - converting a smaller type \nto a larger type size\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nExplicit Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\nImplicit Casting\nImplicit casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\nint myInt = 9;\ndouble myDouble = myInt;       // Automatic casting: int to double\n\nConsole",
        "None of the above.",
        "when you assign a value of one data type to another type"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of there is 'two types of casting:\nImplicit Casting\n(automatically) - converting a smaller type \nto a larger type size\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nExplicit Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\nImplicit Casting\nImplicit casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\nint myInt = 9;\ndouble myDouble = myInt;       // Automatic casting: int to double\n\nConsole'."
    }
  ],
  "summary": "This tutorial covers C#Type Casting concepts and techniques. You'll learn how to use C#Type Casting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Type Casting and how to apply it in your projects."
}