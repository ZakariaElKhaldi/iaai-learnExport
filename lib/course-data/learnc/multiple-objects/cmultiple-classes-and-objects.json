{
  "id": "b6f74d2c-5e9e-4eec-b587-c1f60786c926",
  "title": "C#Multiple Classes and Objects",
  "slug": "cmultiple-classes-and-objects",
  "metadata": {
    "description": "Learn about C#Multiple Classes and Objects with clear explanations and practical examples.",
    "keywords": [
      "class",
      "color",
      "classes",
      "objects",
      "multiple",
      "string",
      "create",
      "main",
      "console",
      "writeline"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Multiple Objects"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMultiple Classes and Objects",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Multiple Objects\nYou can create multiple objects of one class:\nExample\nCreate two objects of\nCar\n:\nclass Car\n{\n  string color = \"red\";\n  static void Main(string[] args)\n  {\n    Car myObj1 = new Car();\n    Car myObj2 = new Car();\n    Console.WriteLine(myObj1.color);\n    Console.WriteLine(myObj2.color);\n  }\n}\n\nUsing Multiple Classes\nYou can also create an object of a class and access it in another class. This \nis often used for better organization of classes (one class has all the \nfields and methods, while the other class holds the\nMain()\nmethod (code to \nbe executed)).\nprog2.cs\nprog.cs\nprog2.cs\nclass Car \n{\n\u00a0 public string color = \"red\";\n}\nprog.cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Car myObj = new Car();\n    Console.WriteLine(myObj.color);\n  }\n}\n\nDid you notice the\npublic\nkeyword? It is called an\naccess modifier\n, \nwhich specifies that the\ncolor\nvariable/field of\nCar\nis accessible for other classes as well, such as\nProgram\n.\nYou will learn much more about\naccess modifiers\nand\nclasses/objects\nin the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "5adb314a-1c28-4cfa-8f87-abb315b7199a",
      "title": "Advanced Csharp Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "7964b10d-5117-44a3-a201-790e28765fac",
      "title": "Csharp Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "a6059f7a-af3d-4df5-b114-66d1c5e4dd5b",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "often used for better organization of classes (one class has all the \nfields and methods",
        "None of the above.",
        "called an\naccess modifier",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'often used for better organization of classes (one class has all the \nfields and methods'."
    },
    {
      "question": "What is It?",
      "options": [
        "often used for better organization of classes (one class has all the \nfields and methods",
        "called an\naccess modifier",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of It is 'called an\naccess modifier'."
    }
  ],
  "summary": "This tutorial covers C#Multiple Classes and Objects concepts and techniques. You'll learn how to use C#Multiple Classes and Objects effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Multiple Classes and Objects and how to apply it in your projects."
}