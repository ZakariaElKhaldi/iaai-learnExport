{
  "id": "4ea1b268-da7a-42f2-8ac1-49cfe4fefee0",
  "title": "C#For Loop",
  "slug": "cfor-loop",
  "metadata": {
    "description": "Learn about C#For Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "statement",
      "example",
      "block",
      "code",
      "executed",
      "time",
      "console",
      "writeline",
      "times"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# For Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nFor Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# For Loop\nWhen you know exactly how many times you want to loop through a block of \ncode, use the\nfor\nloop instead of a\nwhile\nloop:\nSyntax\nfor (\nstatement 1\n;\nstatement 2\n;\nstatement 3\n) \n{\n// code block to be executed\n}\nStatement 1\nis executed (one time) before the execution of the code block.\nStatement 2\ndefines the condition for executing the code block.\nStatement 3\nis executed (every time) after the code block has been executed.\nThe example below will print the numbers 0 to 4:\nExample\nfor (int i = 0; i < 5; i++) \n{\n\u00a0\u00a0Console.WriteLine(i);\n}\n\nExample explained\nStatement 1 sets a variable before the loop starts (\nint i = 0\n).\nStatement 2 defines the condition for the loop to run (\ni\nmust be less than\n5\n). If the condition is\ntrue\n, the loop will start over again, if it is\nfalse\n, \nthe loop will end.\nStatement 3 increases a value (\ni++\n) each time the code block in the loop has \nbeen executed.\nAnother Example\nThis example will only print even values between 0 and 10:\nExample\nfor (int i = 0; i <= 10; i = i + 2) \n{\n\u00a0\u00a0Console.WriteLine(i);\n}\n\nNested Loops\nIt is also possible to place a loop inside another loop. This is called a\nnested loop\n.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExample\n// Outer loop\nfor (int i = 1; i <= 2; ++i) \n{\n  Console.WriteLine(\"Outer: \" + i);  // Executes 2 times\n\n// Inner loop\n  for (int j = 1; j <= 3; j++) \n  {\n    Console.WriteLine(\" Inner: \" + j); // Executes 6 times (2 * 3)\n  }\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d146f4b2-a663-4d00-9e9c-dfd3052c9db9",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c3458257-d1d9-46a5-95a9-1f1543641d51",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "69b153c1-f369-4b6c-b9ae-5744ffbe81ca",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#For Loop concepts and techniques. You'll learn how to use C#For Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#For Loop and how to apply it in your projects."
}