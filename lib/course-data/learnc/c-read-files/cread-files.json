{
  "id": "72af730c-7062-4c75-b2d8-694923052814",
  "title": "CRead Files",
  "slug": "cread-files",
  "metadata": {
    "description": "Learn about CRead Files with clear explanations and practical examples.",
    "keywords": [
      "c",
      "file",
      "fptr",
      "read",
      "example",
      "mystring",
      "content",
      "open",
      "fopen",
      "filename",
      "print"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Read Files"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nRead Files",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Read a File\nIn the \nw\nand\na\nmodes inside the\nfopen()\nfunction.\nTo\nread\nfrom a file, you can use the\nr\nmode:\nExample\nFILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\nThis will make the\nfilename.txt\nopened for reading.\nIt requires a little bit of work to read a file in C. Hang in there! We will guide you step-by-step.\n\nthe file.\nFor example, let's create a string that can store \nup to 100 \ncharacters:\nExample\nFILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar myString[100];\nIn order to read the content of\nfilename.txt\n, \nwe can use the\nfgets()\nfunction.\nThe\nfgets()\nfunction takes three parameters:\nExample\nfgets(myString, 100, \n    fptr);\nThe first parameter specifies \nwhere to store the file content, which will be in the\nmyString\narray we just \ncreated.\nThe second parameter specifies the maximum size of data to read, which \nshould match the size of\nmyString\n(\n100\n).\nThe third parameter requires a file pointer that is used to read the file \n  (\nfptr\nin our example).\nNow, we can print the string, which will output the content of the file:\nExample\nFILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar myString[100];\n// Read \n    the content and store it inside myString\nfgets(myString, 100, fptr);\n// Print the file content\nprintf(\"%s\", myString);\n// Close the \n    file\nfclose(fptr);\nHello World!\nRun example \u00bb\nNote:\nThe\nfgets\nfunction only reads the first line of the \nfile. If you remember, there were two lines of text in\nfilename.txt\n.\nTo read every line of the file, you can use a\nwhile\nloop:\nExample\nFILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar \n    myString[100];\n// Read the content and print it\nwhile(fgets(myString, 100, fptr)) {\nprintf(\"%s\", myString);\n}\n// Close the file\nfclose(fptr);\nHello World!\nHi everybody!\nRun example \u00bb\nGood Practice\nIf you try to open a file for reading that does not exist, the\nfopen()\nfunction will return\nNULL\n.\nTip:\nAs a good practice, we can use an\nif\nstatement to test for\nNULL\n, \nand print some text instead (when the file does not exist):\nExample\nFILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"loremipsum.txt\", \"r\");\n// Print some text \n    if the file does not exist\nif(fptr == NULL) {\nprintf(\"Not able to open the \n    file.\");\n}\n// Close the file\nfclose(fptr);\nIf the file does not exist, the following text is printed:\nNot able to open the file.\nRun example \u00bb\nWith this in mind, we can create a more sustainable code if we use our \"read \na file\" example above again:\nExample\nIf the file exist, read the content and print it. If the file does not exist, print a message:\nFILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar \n    myString[100];\n// If the file exist\nif(fptr != NULL) {\n// Read the content and print it\nwhile(fgets(myString, 100, fptr)) \n    {\nprintf(\"%s\", myString);\n}\n// \n    If the file does not exist\n} else {\nprintf(\"Not able to open the file.\");\n}\n// Close the file\nfclose(fptr);\nHello World!\nHi everybody!\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar myString[100];",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "fgets(myString, 100, \n    fptr);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar myString[100];\n// Read \n    the content and store it inside myString\nfgets(myString, 100, fptr);\n// Print the file content\nprintf(\"%s\", myString);\n// Close the \n    file\nfclose(fptr);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar \n    myString[100];\n// Read the content and print it\nwhile(fgets(myString, 100, fptr)) {\nprintf(\"%s\", myString);\n}\n// Close the file\nfclose(fptr);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"loremipsum.txt\", \"r\");\n// Print some text \n    if the file does not exist\nif(fptr == NULL) {\nprintf(\"Not able to open the \n    file.\");\n}\n// Close the file\nfclose(fptr);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "FILE *fptr;\n// Open a file in read mode\nfptr = \n    fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar \n    myString[100];\n// If the file exist\nif(fptr != NULL) {\n// Read the content and print it\nwhile(fgets(myString, 100, fptr)) \n    {\nprintf(\"%s\", myString);\n}\n// \n    If the file does not exist\n} else {\nprintf(\"Not able to open the file.\");\n}\n// Close the file\nfclose(fptr);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "FILE *fptr;\n# TODO: Complete this line\nfptr = fopen(\"filename.txt\", \"r\");",
      "solution": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\n# TODO: Complete this line",
      "solution": "FILE *fptr;\n// Open a file in read mode\nfptr = fopen(\"filename.txt\", \"r\");\n// Store the content of the file\nchar myString[100];"
    }
  ],
  "related_topics": [
    {
      "id": "6ff89129-e1fe-479b-a6bb-2f5543bbb179",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f823fe3a-27c8-42a2-b443-20084a2d8119",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4b5bf54e-d746-4880-a3dc-c1e387203361",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The third parameter requires a file pointer that?",
      "options": [
        "printed:\nNot able to open the file",
        "None of the above.",
        "used to read the file \n  (\nfptr\nin our example)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The third parameter requires a file pointer that is 'used to read the file \n  (\nfptr\nin our example)'."
    },
    {
      "question": "What is the following text?",
      "options": [
        "printed:\nNot able to open the file",
        "used to read the file \n  (\nfptr\nin our example)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the following text is 'printed:\nNot able to open the file'."
    }
  ],
  "summary": "This tutorial covers CRead Files concepts and techniques. You'll learn how to use CRead Files effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CRead Files and how to apply it in your projects."
}