{
  "id": "d6822b7a-870d-4812-b4ed-8322750fdf9c",
  "title": "C++Inheritance",
  "slug": "cinheritance",
  "metadata": {
    "description": "Learn about C++Inheritance with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "class",
      "inheritance",
      "mycar",
      "attributes",
      "methods",
      "vehicle",
      "public",
      "inherit",
      "another",
      "derived"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nInheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Inheritance\nIn C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:\nderived class\n(child) - the class that inherits from another class\nbase class\n(parent) - the class being inherited from\nTo inherit from a class, use the\n:\nsymbol.\nIn the example below, the\nCar\nclass \n(child) inherits the attributes and methods from the\nVehicle\nclass \n(parent):\nExample\n// Base class\nclass Vehicle {\npublic:\nstring brand = \"Ford\";\nvoid honk() {\ncout << \"Tuut, tuut! \\n\" ;\n}\n};\n// Derived \n    class\nclass Car: public Vehicle\n{\npublic:\nstring model = \"Mustang\";\n};\nint main() {\nCar myCar;\nmyCar.honk();\ncout << myCar.brand + \" \" + myCar.model;\nreturn 0;\n}\n\nWhy And When To Use \"Inheritance\"?\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Base class\nclass Vehicle {\npublic:\nstring brand = \"Ford\";\nvoid honk() {\ncout << \"Tuut, tuut! \\n\" ;\n}\n};\n// Derived \n    class\nclass Car: public Vehicle\n{\npublic:\nstring model = \"Mustang\";\n};\nint main() {\nCar myCar;\nmyCar.honk();\ncout << myCar.brand + \" \" + myCar.model;\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Base class\nclass Vehicle {\npublic:\nstring brand = \"Ford\";\nvoid honk() {\ncout << \"Tuut, tuut! \\n\" ;\n}\n# TODO: Complete this line\n// Derived \n    class\nclass Car: public Vehicle\n{\npublic:\nstring model = \"Mustang\";\n};\nint main() {\nCar myCar;\nmyCar.honk();\ncout << myCar.brand + \" \" + myCar.model;\nreturn 0;\n}",
      "solution": "// Base class\nclass Vehicle {\npublic:\nstring brand = \"Ford\";\nvoid honk() {\ncout << \"Tuut, tuut! \\n\" ;\n}\n};\n// Derived \n    class\nclass Car: public Vehicle\n{\npublic:\nstring model = \"Mustang\";\n};\nint main() {\nCar myCar;\nmyCar.honk();\ncout << myCar.brand + \" \" + myCar.model;\nreturn 0;\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b784f3c5-1cd3-4f39-a3ce-22047a286bc4",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ab4fa3c0-ee43-48a1-8c22-1b809523ffd1",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "52d95f74-2a97-49db-a29c-029148742bcc",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "possible to inherit attributes and methods from one class to another",
        "None of the above.",
        "None of the above.",
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'possible to inherit attributes and methods from one class to another'."
    },
    {
      "question": "What is It?",
      "options": [
        "possible to inherit attributes and methods from one class to another",
        "None of the above.",
        "None of the above.",
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'useful for code reusability: reuse attributes and methods of an existing class when you create a new class'."
    }
  ],
  "summary": "This tutorial covers C++Inheritance concepts and techniques. You'll learn how to use C++Inheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Inheritance and how to apply it in your projects."
}