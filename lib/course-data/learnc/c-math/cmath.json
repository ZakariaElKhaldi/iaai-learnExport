{
  "id": "cbedd0e8-0273-475d-9b7e-d78ad6e9ddfa",
  "title": "C#Math",
  "slug": "cmath",
  "metadata": {
    "description": "Learn about C#Math with clear explanations and practical examples.",
    "keywords": [
      "math",
      "example",
      "method",
      "value",
      "sqrt",
      "round",
      "used",
      "find",
      "returns",
      "number"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Math"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMath",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The C# Math class has many methods that allows you to perform mathematical tasks on numbers.\nMath.Max(\nx,y\n)\nThe\nMath.Max(\nx\n,\ny\n)\nmethod can be used to find the highest value of\nx\nand\ny\n:\nExample\nMath.Max(5, 10);\n\nMath.Min(\nx,y\n)\nThe\nMath.Min(\nx\n,\ny\n)\nmethod can be used to find the lowest value of of\nx\nand\ny\n:\nExample\nMath.Min(5, 10);\n\nMath.Sqrt(\nx\n)\nThe\nMath.Sqrt(\nx\n)\nmethod returns the square root of\nx\n:\nExample\nMath.Sqrt(64);\n\nMath.Abs(\nx\n)\nThe\nMath.Abs(\nx\n)\nmethod returns the absolute (positive) value of\nx\n:\nExample\nMath.Abs(-4.7);\n\nMath.Round()\nMath.Round()\nrounds a number to the nearest whole number:\nExample\nMath.Round(9.99);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "aef6a2c7-8510-46f8-a1db-bbe87d7074df",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "40e723cb-1592-4983-b455-d80d6f1eb4a7",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c220dc03-6c0a-4aa3-a11e-f799f09c6e30",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Math concepts and techniques. You'll learn how to use C#Math effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Math and how to apply it in your projects."
}