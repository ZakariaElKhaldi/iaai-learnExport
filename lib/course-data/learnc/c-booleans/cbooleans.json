{
  "id": "89c04cf6-7363-4044-9ebe-cc2874b14b4d",
  "title": "C#Booleans",
  "slug": "cbooleans",
  "metadata": {
    "description": "Learn about C#Booleans with clear explanations and practical examples.",
    "keywords": [
      "example",
      "true",
      "console",
      "writeline",
      "boolean",
      "false",
      "values",
      "expression",
      "returns",
      "equal"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Booleans"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nBooleans",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Booleans\nVery often, in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, C# has a\nbool\ndata type, which can take the values\ntrue\nor\nfalse\n.\nBoolean Values\nA boolean type is declared with the\nbool\nkeyword and can only take the values\ntrue\nor\nfalse\n:\nExample\nbool isCSharpFun = true;\nbool isFishTasty = false;\nConsole.WriteLine(isCSharpFun);\u00a0\u00a0\u00a0// Outputs True\nConsole.WriteLine(isFishTasty);\u00a0\u00a0 // Outputs False\n\nHowever, it is more common to return boolean values from boolean expressions, for conditional testing\n(see below).\nBoolean Expression\nA Boolean expression returns a boolean value:\nTrue\nor\nFalse\n, by comparing values/variables.\nThis is useful to build logic, and find answers.\nFor example, you can use a\ncomparison operator\n, such as the\ngreater than\n(\n>\n) operator to find out if an expression (or a variable) is true:\nExample\nint x = 10;\nint y = 9;\nConsole.WriteLine(x > y); // returns True, because 10 is higher than 9\n\nOr even easier:\nExample\nConsole.WriteLine(10 > 9); // returns True, because 10 is higher than 9\n\nIn the examples below, we use the\nequal to\n(\n==\n) operator to evaluate an expression:\nExample\nint x = 10;\nConsole.WriteLine(x == 10); // returns True, because the value of x is equal to 10\n\nExample\nConsole.WriteLine(10 == 15); // returns False, because 10 is not equal to 15\n\nReal Life Example\nLet's think of a \"real \nlife example\" where we need to find out if a person is old enough to vote.\nIn the example below, we use the\n>=\ncomparison operator to find out if the age (\n25\n) is\ngreater than\nOR\nequal to\nthe voting age limit, which is set \nto\n18\n:\nExample\nint myAge = 25;\nint votingAge = 18;\nConsole.WriteLine(myAge >= votingAge);\n\nCool, right? An even better approach (since we are on a roll now), would be to wrap the code above in an\nif...else\nstatement, so we can perform \ndifferent actions depending on the result:\nExample\nOutput \"Old enough to vote!\" if\nmyAge\nis\ngreater than or equal to\n18\n. Otherwise output \"Not old enough to vote.\":\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) \n{\n  Console.WriteLine(\"Old enough to vote!\");\n} \nelse \n{\n  Console.WriteLine(\"Not old enough to vote.\");\n}\n\nThe boolean value of an expression is the basis for all C# comparisons and conditions.\nYou will learn more about\nconditions (\nif...else\n)\nin the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "0b2a4fad-03ae-4802-a236-f05694302d6f",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "56245987-cddb-4365-9e2c-b82bdefe371a",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "82fb83d7-4344-4da8-8d4b-ce24399fced5",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Boolean Values\nA boolean type?",
      "options": [
        "declared with the\nbool\nkeyword and can only take the values\ntrue\nor\nfalse\n:\nExample\nbool isCSharpFun = true;\nbool isFishTasty = false;\nConsole",
        "None of the above.",
        "more common to return boolean values from boolean expressions",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Boolean Values\nA boolean type is 'declared with the\nbool\nkeyword and can only take the values\ntrue\nor\nfalse\n:\nExample\nbool isCSharpFun = true;\nbool isFishTasty = false;\nConsole'."
    },
    {
      "question": "What is it?",
      "options": [
        "more common to return boolean values from boolean expressions",
        "None of the above.",
        "None of the above.",
        "declared with the\nbool\nkeyword and can only take the values\ntrue\nor\nfalse\n:\nExample\nbool isCSharpFun = true;\nbool isFishTasty = false;\nConsole"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'more common to return boolean values from boolean expressions'."
    }
  ],
  "summary": "This tutorial covers C#Booleans concepts and techniques. You'll learn how to use C#Booleans effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Booleans and how to apply it in your projects."
}