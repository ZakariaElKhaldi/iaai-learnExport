{
  "id": "06af55ff-d675-4a28-b313-7444d56ee376",
  "title": "CType Conversion",
  "slug": "ctype-conversion",
  "metadata": {
    "description": "Learn about CType Conversion with clear explanations and practical examples.",
    "keywords": [
      "c",
      "float",
      "example",
      "conversion",
      "type",
      "value",
      "printf",
      "score",
      "result",
      "percentage",
      "integers"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Type Conversion"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nType Conversion",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Type Conversion\nSometimes, you have to convert the value of one data type to another \ntype. This is known as\ntype conversion\n.\nFor example, if you try to divide two integers,\n5\nby\n2\n, you \nwould \nexpect the result to be\n2.5\n. But since we are \nworking with integers (and not floating-point values), the following example will just output\n2\n:\nExample\nint x = 5;\nint y = 2;\nint sum = 5 / 2;\nprintf(\"%d\", \n    sum);\u00a0// Outputs 2\n\nTo get the right result, you need to know how\ntype conversion\nworks.\nThere are two types of conversion in C:\nImplicit Conversion\n(automatically)\nExplicit Conversion\n(manually)\nImplicit Conversion\nImplicit conversion is done automatically by the compiler when you assign a \nvalue of one type to another.\nFor example, if you assign an\nint\nvalue to a\nfloat\ntype:\nExample\n// Automatic conversion: int to float\nfloat myFloat = 9;\nprintf(\"%f\", \n  myFloat);\u00a0// 9.000000\n\nAs you can see, the compiler automatically converts the int value\n9\nto a \nfloat value of\n9.000000\n.\nThis can be risky, as you might lose control over specific values in \ncertain situations.\nEspecially if it was the other way around - the following example \nautomatically converts the float value\n9.99\nto an int value of\n9\n:\nExample\n// Automatic conversion: float to int\nint myInt = 9.99;\nprintf(\"%d\", \n  myInt); // 9\n\nWhat happened to\n.99\n? We might want that \ndata in our program! \nSo be careful. It is important that you know how the compiler work in these situations, to \navoid unexpected results.\nAs another example, if you divide two integers:\n5\nby\n2\n, \nyou know that the sum is\n2.5\n. And as you know from the beginning \nof this page, if you store the sum as an integer, the result will \nonly display the number\n2\n. Therefore, it would be better to store the sum \nas a\nfloat\nor a\ndouble\n, right?\nExample\nfloat sum = 5 / 2;\nprintf(\"%f\", sum);\u00a0// 2.000000\n\nWhy is the result\n2.00000\nand not\n2.5\n? Well, it is because \n5 and 2 are still integers in the division. \nIn this case, you need to manually convert the integer values to \nfloating-point values. (see below).\nExplicit Conversion\nExplicit conversion is done manually by placing the type in parentheses\n()\nin front of the value.\nConsidering our problem from the example above, we can now get the right \nresult:\nExample\n// Manual conversion: int to float\nfloat sum = (float) 5 / 2;\nprintf(\"%f\", \n  sum); // 2.500000\n\nYou can also place the type in front of a variable:\nExample\nint num1 = 5;\nint num2 = 2;\nfloat sum = (float) num1 / num2;\nprintf(\"%f\", \n  sum); // 2.500000\n\nAnd since you learned about \"decimal precision\" in the \nyou could make the output even cleaner by removing the extra zeros (if you \nlike):\nExample\nint num1 = 5;\nint num2 = 2;\nfloat sum = (float) num1 / num2;\nprintf(\"%.1f\", \n  sum); // 2.5\n\nReal-Life Example\nHere's a real-life example of data types and type conversion where we create a program to calculate the percentage of a user's score in relation to the maximum score in a game:\nExample\n// Set the maximum possible score in the game to 500\nint maxScore = 500;\n// The actual score of the user\nint userScore = 423;\n/* \n  Calculate the percantage of the user's score in relation to the maximum \n  available score.\nConvert userScore to float to make sure that the division \n  is accurate */\nfloat percentage = (float) userScore / maxScore * 100.0;\n// Print the percentage\nprintf(\"User's percentage is %.2f\", percentage);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "int x = 5;\nint y = 2;\nint sum = 5 / 2;\nprintf(\"%d\", \n    sum);\u00a0// Outputs 2",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Automatic conversion: int to float\nfloat myFloat = 9;\nprintf(\"%f\", \n  myFloat);\u00a0// 9.000000",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Automatic conversion: float to int\nint myInt = 9.99;\nprintf(\"%d\", \n  myInt); // 9",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "float sum = 5 / 2;\nprintf(\"%f\", sum);\u00a0// 2.000000",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Manual conversion: int to float\nfloat sum = (float) 5 / 2;\nprintf(\"%f\", \n  sum); // 2.500000",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "int num1 = 5;\nint num2 = 2;\nfloat sum = (float) num1 / num2;\nprintf(\"%f\", \n  sum); // 2.500000",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "int num1 = 5;\nint num2 = 2;\nfloat sum = (float) num1 / num2;\nprintf(\"%.1f\", \n  sum); // 2.5",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// Set the maximum possible score in the game to 500\nint maxScore = 500;\n// The actual score of the user\nint userScore = 423;\n/* \n  Calculate the percantage of the user's score in relation to the maximum \n  available score.\nConvert userScore to float to make sure that the division \n  is accurate */\nfloat percentage = (float) userScore / maxScore * 100.0;\n// Print the percentage\nprintf(\"User's percentage is %.2f\", percentage);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int x = 5;\n# TODO: Complete this line\nint sum = 5 / 2;\nprintf(\"%d\", \n    sum);\u00a0// Outputs 2",
      "solution": "int x = 5;\nint y = 2;\nint sum = 5 / 2;\nprintf(\"%d\", \n    sum);\u00a0// Outputs 2"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Automatic conversion: int to float\nfloat myFloat = 9;\n# TODO: Complete this line\n  myFloat);\u00a0// 9.000000",
      "solution": "// Automatic conversion: int to float\nfloat myFloat = 9;\nprintf(\"%f\", \n  myFloat);\u00a0// 9.000000"
    }
  ],
  "related_topics": [
    {
      "id": "bd57831a-d8e2-43c6-bba3-5af83a506db4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9d116813-d058-4c1c-82f3-3e0663a7eb32",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7cd65edb-f0bd-455e-b8e1-718a7dfa3c85",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "known as\ntype conversion",
        "None of the above.",
        "working with integers (and not floating-point values)"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of This is 'known as\ntype conversion'."
    },
    {
      "question": "What is But since we?",
      "options": [
        "known as\ntype conversion",
        "working with integers (and not floating-point values)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of But since we is 'working with integers (and not floating-point values)'."
    }
  ],
  "summary": "This tutorial covers CType Conversion concepts and techniques. You'll learn how to use CType Conversion effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CType Conversion and how to apply it in your projects."
}