{
  "id": "befddaa2-18e3-4d7a-9c34-1b8ba737f24e",
  "title": "C++New Lines",
  "slug": "cnew-lines",
  "metadata": {
    "description": "Learn about C++New Lines with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "cout",
      "character",
      "example",
      "include",
      "iostream",
      "using",
      "namespace",
      "main",
      "hello",
      "world"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "New Lines"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nNew Lines",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "New Lines\nTo insert a new line in your output, you can use the\n\\n\ncharacter:\nExample\n#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\n\\n\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}\n\nYou can also use another\n<<\noperator and place the\n\\n\ncharacter after the text, like this:\nExample\n#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\"\n<< \"\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}\n\nTip:\nTwo\n\\n\ncharacters after each other will create a blank line:\nExample\n#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\" << \"\n\\n\\n\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}\n\nAnother way to insert a new line, is with the\nendl\nmanipulator:\nExample\n#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\" <<\nendl\n;\ncout << \"I am learning C++\";\nreturn 0;\n}\n\nBoth\n\\n\nand\nendl\nare used to break lines. \nHowever,\n\\n\nis most used.\nBut what is\n\\n\nexactly?\nThe newline character (\n\\n\n) is called an\nescape sequence\n, and \nit forces the cursor to change its position to the beginning of the \nExamples of other valid escape sequences are:\nEscape Sequence\nDescription\nTry it\n\\t\nCreates a horizontal tab\nTry it\n\\\\\nInserts a backslash character (\\)\nTry it\n\\\"\nInserts a double quote character\nTry it\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\n\\n\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\"\n<< \"\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\" << \"\n\\n\\n\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\" <<\nendl\n;\ncout << \"I am learning C++\";\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\n\\n\n\";\n# TODO: Complete this line\nreturn 0;\n}",
      "solution": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\n\\n\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "#include <iostream>\nusing namespace std;\n# TODO: Complete this line\ncout << \"Hello World!\"\n<< \"\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
      "solution": "#include <iostream>\nusing namespace std;\nint main() {\ncout << \"Hello World!\"\n<< \"\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "c8e46076-0138-4a69-acca-7fc2d5b94d38",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4bac74b3-2061-48a7-a87b-10102315fa01",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ca1480e5-0659-4063-94b6-09c32f465b61",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is n\nand\nendl?",
      "options": [
        "None of the above.",
        "used to break lines",
        "Not a n\nand\nendl.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of n\nand\nendl is 'used to break lines'."
    },
    {
      "question": "Which best describes the main purpose of this cpp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C++New Lines concepts and techniques. You'll learn how to use C++New Lines effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++New Lines and how to apply it in your projects."
}