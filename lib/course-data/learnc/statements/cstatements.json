{
  "id": "f0668ac4-65aa-43bf-b39e-6da86763466f",
  "title": "C++Statements",
  "slug": "cstatements",
  "metadata": {
    "description": "Learn about C++Statements with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "statements",
      "hello",
      "world",
      "cout",
      "executed",
      "statement",
      "example",
      "program",
      "print",
      "screen"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Statements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nStatements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ Statements\nA\ncomputer program\nis a list of \"instructions\" to be \"executed\" by a computer.\nIn a programming language, these programming instructions are called\nstatements\n.\nThe following statement \"instructs\" the compiler to print the text \"Hello World\" \nto the screen:\nExample\ncout << \"Hello World!\";\n\nIt is important that you end the statement with a semicolon\n;\nIf you forget the semicolon (\n;\n), an error will occur \nand the program will not run:\nExample\ncout << \"Hello World!\"\nerror: expected ';' before 'return'\n\nMany Statements\nMost C++ programs contain many statements.\nThe statements are executed, one by one, in the same order as they are \nwritten:\nExample\ncout << \"Hello World!\";\ncout << \"Have \n  a good day!\";\nreturn 0;\n\nExample explained\nFrom the example above, we have three statements:\ncout << \"Hello World!\";\ncout << \"Have a good day!\";\nreturn 0;\nThe first statement is executed first (print \"Hello World!\" to the screen).\nThen the second statement is executed (print \"Have a good day!\" to the screen).\nAnd at last, the third statement is executed (end the C++ program successfully).\nYou will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.\nComing up:\nThe \n  the output and how to insert new lines to make it more readable.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "cout << \"Hello World!\";",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "cout << \"Hello World!\"",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "cout << \"Hello World!\";\ncout << \"Have \n  a good day!\";\nreturn 0;",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "cout << \"Hello World!\";"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "cout << \"Hello World!\""
    }
  ],
  "related_topics": [
    {
      "id": "36363cab-4a3b-45d7-b8db-4b4ade173d3a",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2471e7e9-eebc-49ae-8846-84ccb69c49ff",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3f68af2b-cb20-4781-820c-ffda77affa8e",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Statements\nA\ncomputer program?",
      "options": [
        "a list of \"instructions\" to be \"executed\" by a computer",
        "called\nstatements",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Statements\nA\ncomputer program is 'a list of \"instructions\" to be \"executed\" by a computer'."
    },
    {
      "question": "What is these programming instructions?",
      "options": [
        "None of the above.",
        "a list of \"instructions\" to be \"executed\" by a computer",
        "called\nstatements",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of these programming instructions is 'called\nstatements'."
    }
  ],
  "summary": "This tutorial covers C++Statements concepts and techniques. You'll learn how to use C++Statements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Statements and how to apply it in your projects."
}