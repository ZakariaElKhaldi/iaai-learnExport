{
  "id": "6eb7e247-5e27-4f0f-a5b9-77360d7962f4",
  "title": "CFunction Declaration and Definition",
  "slug": "cfunction-declaration-and-definition",
  "metadata": {
    "description": "Learn about CFunction Declaration and Definition with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "myfunction",
      "main",
      "return",
      "declaration",
      "definition",
      "void",
      "call",
      "myotherfunction",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Function Declaration"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nFunction Declaration and Definition",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Function Declaration and Definition\nYou have already learned from the \nExample\n// Create a function\nvoid myFunction() {\nprintf(\"I just got \n  executed!\");\n}\nint main() {\nmyFunction(); // call the function\nreturn 0;\n}\n\nA function consist of two parts:\nDeclaration:\nthe function's name, return type, and parameters (if any)\nDefinition:\nthe body of the function (code to be executed)\nvoid\nmyFunction()\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}\nFor code optimization, it is recommended to separate the declaration and the definition of the function.\nYou will often see C programs that have function declaration above\nmain()\n, \nand function definition below\nmain()\n.\nThis will make the code \nbetter organized and easier to read:\nExample\n//\nFunction declaration\nvoid myFunction();\n// The main method\nint main() {\nmyFunction();\u00a0 //\ncall\nthe function\nreturn 0;\n}\n//\nFunction definition\nvoid myFunction() {\nprintf(\"I just got executed!\");\n}\n\nWhat About Parameters\nIf we use the example from the\nfunction parameters chapter\nregarding parameters and return values:\nExample\nint myFunction(int x, int y) {\nreturn x + y;\n}\nint main() \n  {\nint result = myFunction(5, 3);\nprintf(\"Result is = \n  %d\", result);\nreturn 0;\n}\n// Outputs 8 (5 + 3)\n\nIt is considered good practice to write it like this instead:\nExample\n// Function declaration\nint myFunction(int x, int y);\n// The main method\nint main() {\nint result = \n  myFunction(5, 3);\n// call\nthe function\nprintf(\"Result is = %d\", result);\nreturn 0;\n}\n// \n  Function definition\nint myFunction(int x, int y) {\nreturn x + y;\n}\n\nFunctions Calling Other Functions\nAs long as you declare functions first, it is also possible to use functions to call other functions:\nExample\nUse one function to call another function:\n// Declare two functions, myFunction and myOtherFunction\nvoid \n  myFunction();\nvoid myOtherFunction();\nint main() {\nmyFunction(); // call myFunction (from main)\nreturn 0;\n}\n// Define \n  myFunction\nvoid \n  myFunction() {\nprintf(\"Some text in myFunction\\n\");\nmyOtherFunction(); // call myOtherFunction (from myFunction)\n}\n// Define myOtherFunction\nvoid \n  myOtherFunction() {\nprintf(\"Hey! Some text in myOtherFunction\\n\");\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create a function\nvoid myFunction() {\nprintf(\"I just got \n  executed!\");\n}\nint main() {\nmyFunction(); // call the function\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "void\nmyFunction()\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "//\nFunction declaration\nvoid myFunction();\n// The main method\nint main() {\nmyFunction();\u00a0 //\ncall\nthe function\nreturn 0;\n}\n//\nFunction definition\nvoid myFunction() {\nprintf(\"I just got executed!\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "int myFunction(int x, int y) {\nreturn x + y;\n}\nint main() \n  {\nint result = myFunction(5, 3);\nprintf(\"Result is = \n  %d\", result);\nreturn 0;\n}\n// Outputs 8 (5 + 3)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Function declaration\nint myFunction(int x, int y);\n// The main method\nint main() {\nint result = \n  myFunction(5, 3);\n// call\nthe function\nprintf(\"Result is = %d\", result);\nreturn 0;\n}\n// \n  Function definition\nint myFunction(int x, int y) {\nreturn x + y;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Declare two functions, myFunction and myOtherFunction\nvoid \n  myFunction();\nvoid myOtherFunction();\nint main() {\nmyFunction(); // call myFunction (from main)\nreturn 0;\n}\n// Define \n  myFunction\nvoid \n  myFunction() {\nprintf(\"Some text in myFunction\\n\");\nmyOtherFunction(); // call myOtherFunction (from myFunction)\n}\n// Define myOtherFunction\nvoid \n  myOtherFunction() {\nprintf(\"Hey! Some text in myOtherFunction\\n\");\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a function\n# TODO: Complete this line\nprintf(\"I just got \n  executed!\");\n}\nint main() {\nmyFunction(); // call the function\nreturn 0;\n}",
      "solution": "// Create a function\nvoid myFunction() {\nprintf(\"I just got \n  executed!\");\n}\nint main() {\nmyFunction(); // call the function\nreturn 0;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "void\n# TODO: Complete this line\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}",
      "solution": "void\nmyFunction()\n{ //\ndeclaration\n// \n    the body of the function (\ndefinition\n)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "5220ea79-9588-4704-aae4-0663b3209bea",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2540b470-d6e3-422c-b8a4-b2ae96fb76bc",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "31933a89-b39f-4d31-bd47-00753d1923cc",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "= \n  %d\"",
        "recommended to separate the declaration and the definition of the function",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of it is 'recommended to separate the declaration and the definition of the function'."
    },
    {
      "question": "What is Result?",
      "options": [
        "recommended to separate the declaration and the definition of the function",
        "None of the above.",
        "= \n  %d\"",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Result is '= \n  %d\"'."
    }
  ],
  "summary": "This tutorial covers CFunction Declaration and Definition concepts and techniques. You'll learn how to use CFunction Declaration and Definition effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CFunction Declaration and Definition and how to apply it in your projects."
}