{
  "id": "34f5341e-1866-4b91-8d20-f3f850f0f02e",
  "title": "CConstants",
  "slug": "cconstants",
  "metadata": {
    "description": "Learn about CConstants with clear explanations and practical examples.",
    "keywords": [
      "c",
      "const",
      "variable",
      "declare",
      "constant",
      "example",
      "mynum",
      "minutesperhour",
      "constants",
      "change",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Constants"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nConstants",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Constants\nIf you don't want others (or yourself) to change existing variable values, you can use the\nconst\nkeyword.\nThis will declare the variable as \"constant\", which means\nunchangeable\nand\nread-only\n:\nExample\nconst\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'\n\nYou should always declare the variable as constant when you have values that are unlikely to change:\nExample\nconst\nint minutesPerHour = 60;\n\nNotes On Constants\nWhen you declare a constant variable, it must be assigned with a value:\nExample\nLike this:\nconst int minutesPerHour = 60;\nThis however,\nwill not work\n:\nconst int minutesPerHour;\nminutesPerHour = 60; // error\n\nGood Practice\nAnother thing about constant variables, is that it is considered good practice to declare them with uppercase.\nIt is not required, but useful for code readability and common for C programmers:\nExample\nconst\nint BIRTHYEAR = 1980;\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const\nint minutesPerHour = 60;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const int minutesPerHour = 60;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const\nint BIRTHYEAR = 1980;",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const\nint myNum = 15;\u00a0 // myNum will always be 15\n# TODO: Complete this line\n  assignment of read-only variable 'myNum'",
      "solution": "const\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "const\nint minutesPerHour = 60;"
    }
  ],
  "related_topics": [
    {
      "id": "8097012c-69a5-444c-add1-1a3d5e74e23a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bd556ee6-0c86-4dbb-93e9-fc8084a10a2f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "32d41269-8355-4f9d-9477-30bd14985bfe",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "unchangeable\nand\nread-only\n:\nExample\nconst\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'\n\nYou should always declare the variable as constant when you have values that are unlikely to change:\nExample\nconst\nint minutesPerHour = 60;\n\nNotes On Constants\nWhen you declare a constant variable",
        "not required",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of which is 'unchangeable\nand\nread-only\n:\nExample\nconst\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'\n\nYou should always declare the variable as constant when you have values that are unlikely to change:\nExample\nconst\nint minutesPerHour = 60;\n\nNotes On Constants\nWhen you declare a constant variable'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "None of the above.",
        "unchangeable\nand\nread-only\n:\nExample\nconst\nint myNum = 15;\u00a0 // myNum will always be 15\nmyNum = 10;\u00a0 // error: \n  assignment of read-only variable 'myNum'\n\nYou should always declare the variable as constant when you have values that are unlikely to change:\nExample\nconst\nint minutesPerHour = 60;\n\nNotes On Constants\nWhen you declare a constant variable",
        "not required"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'not required'."
    }
  ],
  "summary": "This tutorial covers CConstants concepts and techniques. You'll learn how to use CConstants effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CConstants and how to apply it in your projects."
}