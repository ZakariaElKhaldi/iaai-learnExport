{
  "id": "9b1531bb-5b07-4f06-919c-08cc3e13e58e",
  "title": "C#User Input",
  "slug": "cuser-input",
  "metadata": {
    "description": "Learn about C#User Input with clear explanations and practical examples.",
    "keywords": [
      "console",
      "input",
      "username",
      "writeline",
      "user",
      "example",
      "string",
      "readline",
      "type",
      "enter"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# User Input"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nUser Input",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Get User Input\nYou have already learned that\nConsole.WriteLine()\nis used to output (print) values. Now we will use\nConsole.ReadLine()\nto get user input.\nIn the following example, the user can input his or hers username, which is stored in the \nvariable\nuserName\n. Then we print the value of\nuserName\n:\nExample\n// Type your username and press enter\nConsole.WriteLine(\"Enter username:\");\n\n// Create a string variable and get user input from the keyboard and store it in the variable\nstring userName = Console.ReadLine();\n\n// Print the value of the variable (userName), which will display the input value\nConsole.WriteLine(\"Username is: \" + userName);\nRun example \u00bb\nUser Input and Numbers\nThe\nConsole.ReadLine()\nmethod returns a\nstring\n. Therefore, you cannot get information from another data type, such as\nint\n. The following program will cause an error:\nExample\nConsole.WriteLine(\"Enter your age:\");\nint age = Console.ReadLine();\nConsole.WriteLine(\"Your age is: \" + age);\nThe error message will be something like this:\nCannot implicitly convert type 'string' to 'int'\nLike the error message says, you cannot implicitly convert type 'string' to \n'int'.\nLuckily, for you, you just learned from the\n\n, that you can convert \nany type explicitly, by using one of the\nConvert.To\nmethods:\nExample\nConsole.WriteLine(\"Enter your age:\");\nint age = Convert.ToInt32(Console.ReadLine());\nConsole.WriteLine(\"Your age is: \" + age);\nRun example \u00bb\nNote:\nIf you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like System.FormatException: 'Input string was not in a correct format.').\nYou will learn more about\nExceptions\nand how to handle errors in a later chapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9fd7464c-6ccf-4c28-9ada-d735bf7063a3",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "95854bc2-2857-44d9-9aad-fe5305fd9ca7",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8c52af77-7398-4d0d-84ad-9eae80fa1651",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "stored in the \nvariable\nuserName",
        "None of the above.",
        "Not a which.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'stored in the \nvariable\nuserName'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#User Input concepts and techniques. You'll learn how to use C#User Input effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#User Input and how to apply it in your projects."
}