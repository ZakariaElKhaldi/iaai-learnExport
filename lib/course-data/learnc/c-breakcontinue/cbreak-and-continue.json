{
  "id": "373907b1-53c3-4efe-818c-c9975edf19e8",
  "title": "C#Break and Continue",
  "slug": "cbreak-and-continue",
  "metadata": {
    "description": "Learn about C#Break and Continue with clear explanations and practical examples.",
    "keywords": [
      "break",
      "continue",
      "example",
      "statement",
      "loop",
      "console",
      "writeline",
      "used",
      "jump",
      "also"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Break/Continue"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nBreak and Continue",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C# Break\nYou have already seen the\nbreak\nstatement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a\nswitch\nstatement.\nThe\nbreak\nstatement can also be used to jump out of a\nloop\n.\nThis example jumps out of the loop when\ni\nis equal to\n4\n:\nExample\nfor (int i = 0; i < 10; i++) \n{\n\u00a0 if (i == 4) \n  {\n\u00a0\u00a0\u00a0 break;\n  }\n\u00a0 Console.WriteLine(i);\n}\n\nC# Continue\nThe\ncontinue\nstatement breaks one iteration (in the loop), if a specified condition occurs, and continues with the \nThis example skips the value of\n4\n:\nExample\nfor (int i = 0; i < 10; i++) \n{\n\u00a0 if (i == 4) \n  {\n\u00a0\u00a0\u00a0 continue;\n  }\n\u00a0 Console.WriteLine(i);\n}\n\nBreak and Continue in While Loop\nYou can also use\nbreak\nand\ncontinue\nin while loops:\nBreak Example\nint i = 0;\nwhile (i < 10) \n{\n\u00a0\u00a0Console.WriteLine(i);\n\u00a0\u00a0i++;\n\u00a0\u00a0if (i == 4) \n  {\n\u00a0\u00a0\u00a0\u00a0break;\n  }\n}\n\nContinue Example\nint i = 0;\nwhile (i < 10) \n{\n\u00a0\u00a0if (i == 4) \n  {\n\u00a0\u00a0\u00a0 i++;\n\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0}\n\u00a0\u00a0Console.WriteLine(i);\n\u00a0\u00a0i++;\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "c2a4742a-65e0-4c4f-b4cf-7b91ac9e67cd",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f4281679-6515-48e7-9ad0-9ddf3eedad5a",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7b762e42-1312-41ed-9203-68b6731a1b07",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This example jumps out of the loop when\ni?",
      "options": [
        "None of the above.",
        "None of the above.",
        "equal to\n4\n:\nExample\nfor (int i = 0; i < 10; i++) \n{\n\u00a0 if (i == 4) \n  {\n\u00a0\u00a0\u00a0 break;\n  }\n\u00a0 Console",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This example jumps out of the loop when\ni is 'equal to\n4\n:\nExample\nfor (int i = 0; i < 10; i++) \n{\n\u00a0 if (i == 4) \n  {\n\u00a0\u00a0\u00a0 break;\n  }\n\u00a0 Console'."
    },
    {
      "question": "Which best describes the main purpose of this csharp feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers C#Break and Continue concepts and techniques. You'll learn how to use C#Break and Continue effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Break and Continue and how to apply it in your projects."
}