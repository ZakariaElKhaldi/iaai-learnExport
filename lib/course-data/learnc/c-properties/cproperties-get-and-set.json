{
  "id": "3f83c2df-b571-4159-b23a-6796b27e3b1a",
  "title": "C#Properties (Get and Set)",
  "slug": "cproperties-get-and-set",
  "metadata": {
    "description": "Learn about C#Properties (Get and Set) with clear explanations and practical examples.",
    "keywords": [
      "name",
      "property",
      "properties",
      "class",
      "method",
      "person",
      "private",
      "value",
      "field",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C# Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nProperties (Get and Set)",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Properties and Encapsulation\nBefore we start to explain properties, you should have a basic understanding of \"\nEncapsulation\n\".\nThe meaning of\nEncapsulation\n, is to make sure that \"sensitive\" data is hidden \nfrom users. To achieve this, you must:\ndeclare fields/variables as\nprivate\nprovide\npublic\nget\nand\nset\nmethods, through\nproperties\n, to access and update the value of a\nprivate\nfield\nProperties\nYou learned from the \nprivate\nvariables can only be \naccessed within the same class (an outside class has no access to it). However, \nsometimes we need to access them - and it can be done with properties.\nA property is like a combination of a variable and a method, and it has two methods: a\nget\nand a\nset\nmethod:\nExample\nclass Person\n{\n  private string name; // field\n\npublic string Name   // property\n  {\n    get { return name; }   // get method\n    set { name = value; }  // set method\n  }\n}\nExample explained\nThe\nName\nproperty is associated with the\nname\nfield. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.\nThe\nget\nmethod returns the value of the variable\nname\n.\nThe\nset\nmethod assigns a\nvalue\nto the\nname\nvariable. The\nvalue\nkeyword represents the value we assign to the property.\nIf you don't fully understand it, take a look at the example below.\nNow we can use the\nName\nproperty to access and update the\nprivate\nfield of the\nPerson\nclass:\nExample\nclass Person\n{\n  private string name; // field\n  public string Name   // property\n  {\n    get { return name; }\n    set { name = value; }\n  }\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Person myObj = new Person();\n    myObj.Name = \"Liam\";\n    Console.WriteLine(myObj.Name);\n  }\n}\nThe output will be:\nLiam\n\nAutomatic Properties (Short Hand)\nC# also provides a way to use short-hand / automatic properties, where you do \nnot have to define the field for the property, and you only have to write\nget;\nand\nset;\ninside the property.\nThe following example will produce the same result as the example above. The only difference is that there is less code:\nExample\nUsing automatic properties:\nclass Person\n{\n  public string Name  // property\n  { get; set; }\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Person myObj = new Person();\n    myObj.Name = \"Liam\";\n    Console.WriteLine(myObj.Name);\n  }\n}\nThe output will be:\nLiam\n\nWhy Encapsulation?\nBetter control of class members (reduce the possibility of yourself (or others) to mess up the code)\nFields can be made\nread-only\n(if you only use the\nget\nmethod), or\nwrite-only\n(if you only use the\nset\nmethod)\nFlexible: the programmer can change one part of the code without affecting other parts\nIncreased security of data\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "96f0c703-5b8e-4bb9-b299-ee696ae36e0d",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fa70d196-074e-44b9-9848-195537b52062",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "785e839f-6c90-4f39-b093-cc78ef9d49f6",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is data?",
      "options": [
        "None of the above.",
        "None of the above.",
        "hidden \nfrom users",
        "like a combination of a variable and a method"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of data is 'hidden \nfrom users'."
    },
    {
      "question": "What is A property?",
      "options": [
        "None of the above.",
        "hidden \nfrom users",
        "like a combination of a variable and a method",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A property is 'like a combination of a variable and a method'."
    }
  ],
  "summary": "This tutorial covers C#Properties (Get and Set) concepts and techniques. You'll learn how to use C#Properties (Get and Set) effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Properties (Get and Set) and how to apply it in your projects."
}