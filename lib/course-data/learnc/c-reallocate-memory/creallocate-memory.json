{
  "id": "a1cd1c24-7a24-4207-b056-28c1d33edbc9",
  "title": "CReallocate Memory",
  "slug": "creallocate-memory",
  "metadata": {
    "description": "Learn about CReallocate Memory with clear explanations and practical examples.",
    "keywords": [
      "c",
      "memory",
      "size",
      "realloc",
      "allocated",
      "address",
      "pointer",
      "resize",
      "free",
      "null",
      "function"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C Reallocate Memory"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C\nReallocate Memory",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Reallocate Memory\nIf the amount of memory you reserved is not enough, you can\nreallocate\nit to make it larger.\nReallocating reserves a different (usually larger) amount of memory while keeping the data that was stored in it.\nYou can change the size of allocated memory with the\nrealloc()\nfunction.\nThe\nrealloc()\nfunction takes two parameters:\nint *ptr2 = realloc(\nptr1\n,\nsize\n);\nThe first parameter is a pointer to the memory that is being resized.\nThe second parameter specifies the new size of allocated memory, measured in bytes.\nThe\nrealloc()\nfunction tries to resize the memory at\nptr1\nand return the same memory address. If it cannot resize the memory at the current address then it will allocate memory at a different address and return the new address instead.\nNote:\nWhen\nrealloc()\nreturns a different memory address, the memory at the original address is no longer reserved and it is not safe to use. When the reallocation is done it is good to assign the new pointer to the \nExample\nIncrease the size of allocated memory:\nint *ptr1, *ptr2, size;\n// Allocate memory for four integers\nsize = \n  4 * sizeof(*ptr1);\nptr1 = malloc(size);\nprintf(\"%d bytes allocated \n  at address %p \\n\", size, ptr1);\n// Resize the memory to hold six \n  integers\nsize = 6 * sizeof(*ptr1);\nptr2 = realloc(ptr1, size);\nprintf(\"%d bytes reallocated at address %p \\n\", size, ptr2);\n\nNULL Pointer & Error Checking\nThe\nrealloc()\nfunction returns a\nNULL\npointer if it is not able to allocate more memory. This is very unlikely, but it \nis worth keeping in mind when you need your code to be failproof.\nThe following example checks whether\nrealloc()\nis able to resize the memory or not, by checking for a\nNULL\npointer:\nExample\nCheck for a NULL pointer:\nint *ptr1, *ptr2;\n// Allocate memory\nptr1 = malloc(4);\n// \n  Attempt to resize the memory\nptr2 = realloc(ptr1, 8);\n// Check \n  whether realloc is able to resize the memory or not\nif (\nptr2 == \n  NULL\n) {\n// If reallocation fails\nprintf(\"Failed. Unable to resize memory\");\n} else {\n// If reallocation is sucessful\nprintf(\"Success. 8 bytes reallocated at address %p \\n\", ptr2);\nptr1 = ptr2;\u00a0 \n  // Update ptr1 to point to the newly allocated memory\n}\n\nNote:\nYou should always include error checking (if\npointer\n== NULL) when \nallocating memory.\nNote:\nYou should also always\nfree\n, or release, \nallocated memory when you are done using it. This is important to make sure that \nyour program behaves as expected, but it will also make it more maintainable and \nefficient.\nTo free memory, simply use the\nfree()\nfunction:\nExample\nFree allocated memory:\n// Free allocated memory\nfree(ptr1);\n\nYou will learn more about how to free allocated memory and why this is important in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "int *ptr2 = realloc(\nptr1\n,\nsize\n);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "int *ptr1, *ptr2, size;\n// Allocate memory for four integers\nsize = \n  4 * sizeof(*ptr1);\nptr1 = malloc(size);\nprintf(\"%d bytes allocated \n  at address %p \\n\", size, ptr1);\n// Resize the memory to hold six \n  integers\nsize = 6 * sizeof(*ptr1);\nptr2 = realloc(ptr1, size);\nprintf(\"%d bytes reallocated at address %p \\n\", size, ptr2);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "int *ptr1, *ptr2;\n// Allocate memory\nptr1 = malloc(4);\n// \n  Attempt to resize the memory\nptr2 = realloc(ptr1, 8);\n// Check \n  whether realloc is able to resize the memory or not\nif (\nptr2 == \n  NULL\n) {\n// If reallocation fails\nprintf(\"Failed. Unable to resize memory\");\n} else {\n// If reallocation is sucessful\nprintf(\"Success. 8 bytes reallocated at address %p \\n\", ptr2);\nptr1 = ptr2;\u00a0 \n  // Update ptr1 to point to the newly allocated memory\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Free allocated memory\nfree(ptr1);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int *ptr2 = realloc(\nptr1\n,\nsize\n# TODO: Complete this line",
      "solution": "int *ptr2 = realloc(\nptr1\n,\nsize\n);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "int *ptr1, *ptr2, size;\n// Allocate memory for four integers\nsize = \n  4 * sizeof(*ptr1);\nptr1 = malloc(size);\nprintf(\"%d bytes allocated \n# TODO: Complete this line\n// Resize the memory to hold six \n  integers\nsize = 6 * sizeof(*ptr1);\nptr2 = realloc(ptr1, size);\nprintf(\"%d bytes reallocated at address %p \\n\", size, ptr2);",
      "solution": "int *ptr1, *ptr2, size;\n// Allocate memory for four integers\nsize = \n  4 * sizeof(*ptr1);\nptr1 = malloc(size);\nprintf(\"%d bytes allocated \n  at address %p \\n\", size, ptr1);\n// Resize the memory to hold six \n  integers\nsize = 6 * sizeof(*ptr1);\nptr2 = realloc(ptr1, size);\nprintf(\"%d bytes reallocated at address %p \\n\", size, ptr2);"
    }
  ],
  "related_topics": [
    {
      "id": "2c23072c-7ab1-4ee7-a4a4-221dff2c19d1",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "af16d2a0-65c4-4c85-af1b-b81cec1a4047",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9dec57da-faa2-4c0d-a4ef-ba884741836d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is C\nReallocate Memory\n\nReallocate Memory\nIf the amount of memory you reserved?",
      "options": [
        "being resized",
        "None of the above.",
        "not enough",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of C\nReallocate Memory\n\nReallocate Memory\nIf the amount of memory you reserved is 'not enough'."
    },
    {
      "question": "What is The first parameter is a pointer to the memory that?",
      "options": [
        "being resized",
        "not enough",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The first parameter is a pointer to the memory that is 'being resized'."
    }
  ],
  "summary": "This tutorial covers CReallocate Memory concepts and techniques. You'll learn how to use CReallocate Memory effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of CReallocate Memory and how to apply it in your projects."
}