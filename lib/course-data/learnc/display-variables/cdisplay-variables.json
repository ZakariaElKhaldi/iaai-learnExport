{
  "id": "d5c0717f-58de-4a52-a9ce-8116254683fe",
  "title": "C#Display Variables",
  "slug": "cdisplay-variables",
  "metadata": {
    "description": "Learn about C#Display Variables with clear explanations and practical examples.",
    "keywords": [
      "writeline",
      "display",
      "variable",
      "console",
      "example",
      "string",
      "value",
      "variables",
      "character",
      "method"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Display Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nDisplay Variables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Display Variables\nThe\nWriteLine()\nmethod is often used to \ndisplay variable values to the console window.\nTo combine both text and a variable, use the\n+\ncharacter:\nExample\nstring name = \"John\";\nConsole.WriteLine(\"Hello \" + name);\n\nYou can also use the\n+\ncharacter to add a variable to another variable:\nExample\nstring firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName + lastName;\nConsole.WriteLine(fullName);\n\nFor numeric values, the\n+\ncharacter works as a mathematical operator (notice that we use\nint\n(integer) variables here):\nExample\nint x = 5;\nint y = 6;\nConsole.WriteLine(x + y); // Print the value of x + y\n\nFrom the example above, you can expect:\nx stores the value 5\ny stores the value 6\nThen we use the\nWriteLine()\nmethod to display the value of x + y, \n which is\n11\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1580c5bf-aa88-4c91-bfe8-74534f6dc69f",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5b602f97-3960-4629-87da-3b4a40da6ecd",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8db153b2-83af-4870-8405-85b5767f1482",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "11\n\n\u2605\n+1",
        "None of the above.",
        "None of the above.",
        "often used to \ndisplay variable values to the console window"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'often used to \ndisplay variable values to the console window'."
    },
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "often used to \ndisplay variable values to the console window",
        "11\n\n\u2605\n+1",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of which is '11\n\n\u2605\n+1'."
    }
  ],
  "summary": "This tutorial covers C#Display Variables concepts and techniques. You'll learn how to use C#Display Variables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Display Variables and how to apply it in your projects."
}