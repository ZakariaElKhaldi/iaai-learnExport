{
  "id": "294330ac-a345-4bb5-85f4-55a175c135cf",
  "title": "C++List",
  "slug": "clist",
  "metadata": {
    "description": "Learn about C++List with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "list",
      "cars",
      "element",
      "string",
      "elements",
      "example",
      "volvo",
      "mazda",
      "cout",
      "ford"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ List"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nList",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ List\nA list is similar to a\nvector\nin that it can store multiple elements of the same type and dynamically grow in size.\nHowever, two major differences between lists and vectors are:\nYou can add and remove elements from both the beginning and at the end of a list, while vectors are generally \noptimized for adding and removing at the end.\nUnlike vectors, a list does not support random access, meaning you cannot \ndirectly jump to a specific index, or \naccess elements by index numbers.\nTo use a list, you have to include the\n<list>\nheader file:\n// Include the list library\n#include <list>\nCreate a List\nTo create a list, use the\nlist\nkeyword, and \nspecify the\ntype\nof values it should store within angle brackets\n<>\nand then the name of the list, like:\nlist<\ntype\n>\nlistName\n.\nExample\n// Create a list called cars that will store strings\nlist<string> cars;\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces\n{}\n:\nExample\n// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Print list elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}\n\nNote:\nThe type of the list (\nstring\nin our example) cannot be changed after its been declared.\nAccess a List\nYou cannot access list elements by referring to index numbers, like with \narrays and vectors.\nHowever, you can access the first or the last element with the\n.front()\nand\n.back()\nfunctions, respectively:\nExample\n// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars.front();\u00a0 // Outputs Volvo\n// Get the \n  last element\ncout << cars.back();\u00a0 // Outputs Mazda\n\nChange a List Element\nYou can also change the value of the first or the last element with the\n.front()\nand\n.back()\nfunctions\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the \n  value of the first element\ncars.front() = \"Opel\";\n// Change the \n  value of the last element\ncars.back() = \"Toyota\";\ncout << cars.front(); // Now \n  outputs Opel instead of Volvo\ncout << cars.back();\u00a0 // Now \n  outputs Toyota instead of Mazda\n\nAdd List Elements\nTo add elements to a list, you can use\n.push_front()\nto insert an element at the beginning of the list and\n.push_back()\nto add an element at the end:\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Add an \n  element at the beginning\ncars.push_front(\"Tesla\");\n// Add an element \n  at the end\ncars.push_back(\"VW\");\n\nRemove List Elements\nTo remove elements from a list, use\n.pop_front()\nto remove an element from the beginning of the list and\n.pop_back()\nto remove an element at the end:\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Remove the \n  first element\ncars.pop_front();\n// Remove the last element\ncars.pop_back();\n\nList Size\nTo find out how many elements a list has, use the\n.size()\nfunction:\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();\u00a0 \n  // Outputs 4\n\nCheck if a List is Empty\nUse the\n.empty()\nfunction to find out if a list is empty or not.\nThe\n.empty()\nfunction returns\n1\n(\ntrue\n) if the list is empty and\n0\n(\nfalse\n) \notherwise:\nExample\nlist<string> cars;\ncout << cars.empty();\u00a0 \n  // Outputs 1 (The list is empty)\n\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();\u00a0 \n  // Outputs 0 (not empty)\n\nLoop Through a List\nYou cannot loop through the list elements with a traditional\nfor\nloop combined with the\n.size()\nfunction, since it is not possible to access \nelements in a list by index:\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = \n  0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}\nThe simplest way to loop through a list is with the\nfor-each\nloop:\nExample\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (string car : cars) {\ncout << car << \"\\n\";\n}\n\nTip:\nIt is also possible to loop through lists with an\niterator\n, which you will learn more about in a later chapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Include the list library\n#include <list>",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a list called cars that will store strings\nlist<string> cars;",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Print list elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \n  \"Ford\", \"Mazda\"};\n// Get the first element\ncout << cars.front();\u00a0 // Outputs Volvo\n// Get the \n  last element\ncout << cars.back();\u00a0 // Outputs Mazda",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Change the \n  value of the first element\ncars.front() = \"Opel\";\n// Change the \n  value of the last element\ncars.back() = \"Toyota\";\ncout << cars.front(); // Now \n  outputs Opel instead of Volvo\ncout << cars.back();\u00a0 // Now \n  outputs Toyota instead of Mazda",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Add an \n  element at the beginning\ncars.push_front(\"Tesla\");\n// Add an element \n  at the end\ncars.push_back(\"VW\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n// Remove the \n  first element\ncars.pop_front();\n// Remove the last element\ncars.pop_back();",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();\u00a0 \n  // Outputs 4",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "list<string> cars;\ncout << cars.empty();\u00a0 \n  // Outputs 1 (The list is empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();\u00a0 \n  // Outputs 0 (not empty)",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = \n  0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "// Include the list library\n#include <list>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "// Create a list called cars that will store strings\nlist<string> cars;"
    }
  ],
  "related_topics": [
    {
      "id": "92642e02-1c08-4e39-93ed-1556b0736644",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f1f9bfe4-0be6-440f-96bc-a8f35b65a105",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b3d1e0de-4381-4653-88a1-c87fe837d6a9",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is List\nA list?",
      "options": [
        "None of the above.",
        "generally \noptimized for adding and removing at the end",
        "similar to a\nvector\nin that it can store multiple elements of the same type and dynamically grow in size",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of List\nA list is 'similar to a\nvector\nin that it can store multiple elements of the same type and dynamically grow in size'."
    },
    {
      "question": "What is while vectors?",
      "options": [
        "similar to a\nvector\nin that it can store multiple elements of the same type and dynamically grow in size",
        "generally \noptimized for adding and removing at the end",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of while vectors is 'generally \noptimized for adding and removing at the end'."
    }
  ],
  "summary": "This tutorial covers C++List concepts and techniques. You'll learn how to use C++List effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++List and how to apply it in your projects."
}