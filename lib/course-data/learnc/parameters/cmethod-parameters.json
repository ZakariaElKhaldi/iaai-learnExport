{
  "id": "5ce7920b-1935-4446-ba9e-6783db5a557f",
  "title": "C#Method Parameters",
  "slug": "cmethod-parameters",
  "metadata": {
    "description": "Learn about C#Method Parameters with clear explanations and practical examples.",
    "keywords": [
      "method",
      "parameters",
      "mymethod",
      "fname",
      "string",
      "liam",
      "jenny",
      "anja",
      "arguments",
      "parameter"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Parameters"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C#\nMethod Parameters",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Parameters and Arguments\nInformation can be passed to methods as parameter. Parameters act as variables inside the method.\nThey are specified after the method name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma.\nThe following example has a \nmethod that takes a\nstring\ncalled\nfname\nas parameter.\nWhen the method is called, we pass along a first name,\nwhich is used inside the method to print the full name:\nExample\nstatic void MyMethod(string fname) \n{\n\u00a0 Console.WriteLine(fname + \" Refsnes\");\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 MyMethod(\"Liam\");\n\u00a0 MyMethod(\"Jenny\");\n\u00a0 MyMethod(\"Anja\");\n}\n\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes\n\nWhen a\nparameter\nis passed to the method, it is called an\nargument\n. So, from the example above:\nfname\nis a\nparameter\n, while\nLiam\n,\nJenny\nand\nAnja\nare\narguments\n.\nMultiple Parameters\nYou can have as many parameters as you like, just separate them with commas:\nExample\nstatic void MyMethod(string fname, int age) \n{\n\u00a0 Console.WriteLine(fname + \" is \" + age);\n}\n\nstatic void Main(string[] args)\n{\n\u00a0 MyMethod(\"Liam\", 5);\n\u00a0 MyMethod(\"Jenny\", 8);\n\u00a0 MyMethod(\"Anja\", 31);\n}\n\n// Liam is 5\n// Jenny is 8\n// Anja is 31\n\nNote that when you are working with multiple parameters, the method call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a0af6ddb-bdce-46d7-95d3-9fa3da8d2110",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d851d294-23af-499a-b35a-c61a6b434488",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "67577209-319c-4b09-8bd4-5ddc8ba12da0",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is They?",
      "options": [
        "None of the above.",
        "None of the above.",
        "specified after the method name",
        "called"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of They is 'specified after the method name'."
    },
    {
      "question": "What is When the method?",
      "options": [
        "None of the above.",
        "specified after the method name",
        "called",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of When the method is 'called'."
    }
  ],
  "summary": "This tutorial covers C#Method Parameters concepts and techniques. You'll learn how to use C#Method Parameters effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Method Parameters and how to apply it in your projects."
}