{
  "id": "def37482-a35f-416d-9ff6-083361357ceb",
  "title": "C++Templates",
  "slug": "ctemplates",
  "metadata": {
    "description": "Learn about C++Templates with clear explanations and practical examples.",
    "keywords": [
      "cpp",
      "templates",
      "template",
      "class",
      "typename",
      "example",
      "pair",
      "value",
      "data",
      "return",
      "cout"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Cpp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "C++ Templates"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "C++\nTemplates",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "C++ Templates\nTemplates let you write a function or class that works with different data types.\nThey help avoid repeating code and make programs more flexible.\nC++ Function Templates\nYou can create a function template by using the\ntemplate\nkeyword:\nSyntax\ntemplate <\ntypename T\n>\nreturn_type\nfunction_name\n(\nT parameter\n) {\n  // code\n}\nT\nis a placeholder for a data type (like\nint\n,\nfloat\n, etc.).\nYou can use any name instead of\nT\n, but\nT\nis common.\nExample\ntemplate <typename T>\nT add(T a, T b) {\nreturn a + b;\n}\nint main() {\ncout << add<int>(5, 3) << \"\\n\";\ncout << add<double>(2.5, 1.5) << \"\\n\";\nreturn 0;\n}\n\nIn the example above,\nadd<int>(5, 3)\ntells the compiler to use\nint\nfor\nT\n, while\nadd<double>(2.5, 1.5)\ntells it to use\ndouble\n.\nC++ Class Templates\nYou can also use templates to make classes that work with any data type:\nSyntax\ntemplate <\ntypename T\n>\nclass\nClassName\n{\n  // members and methods using T\n};\nThe example below defines a template class\nBox\nthat can store and display a value of any data type, and then creates one box for an\nint\nand one for a\nstring\n:\nExample\ntemplate <typename T>\nclass Box {\npublic:\nT value;\nBox(T v) {\nvalue = v;\n}\nvoid show() {\ncout << \"Value: \" << value << \"\\n\";\n}\n};\nint main() {\nBox<int> intBox(50);\nBox<string> strBox(\"Hello\");\nintBox.show();\nstrBox.show();\nreturn 0;\n}\n\nAnd this example defines a template class\nPair\nthat stores two values of different types and displays them, then creates one pair for a person's name and age, and another for an ID and score:\nExample\ntemplate <typename T1, typename T2>\nclass Pair {\npublic:\nT1 first;\nT2 second;\nPair(T1 \n    a, T2 b) {\nfirst = a;\nsecond = b;\n}\nvoid display() \n    {\ncout << \"First: \" << first << \", Second: \n    \" << second << \"\\n\";\n}\n};\nint main() {\nPair<string, int> \n    person(\"John\", 30);\nPair<int, double> score(51, 9.5);\nperson.display();\nscore.display();\nreturn 0;\n}\n\nWhy Use Templates?\nTemplates let you:\nAvoid repeating the same logic for different types\nWrite cleaner, reusable code\nSupport generic programming\nNote:\nTemplates must be defined in the same file where they are used (usually in the\n.h\nfile).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "template <typename T>\nT add(T a, T b) {\nreturn a + b;\n}\nint main() {\ncout << add<int>(5, 3) << \"\\n\";\ncout << add<double>(2.5, 1.5) << \"\\n\";\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "template <typename T>\nclass Box {\npublic:\nT value;\nBox(T v) {\nvalue = v;\n}\nvoid show() {\ncout << \"Value: \" << value << \"\\n\";\n}\n};\nint main() {\nBox<int> intBox(50);\nBox<string> strBox(\"Hello\");\nintBox.show();\nstrBox.show();\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "template <typename T1, typename T2>\nclass Pair {\npublic:\nT1 first;\nT2 second;\nPair(T1 \n    a, T2 b) {\nfirst = a;\nsecond = b;\n}\nvoid display() \n    {\ncout << \"First: \" << first << \", Second: \n    \" << second << \"\\n\";\n}\n};\nint main() {\nPair<string, int> \n    person(\"John\", 30);\nPair<int, double> score(51, 9.5);\nperson.display();\nscore.display();\nreturn 0;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "template <typename T>\n# TODO: Complete this line\nreturn a + b;\n}\nint main() {\ncout << add<int>(5, 3) << \"\\n\";\ncout << add<double>(2.5, 1.5) << \"\\n\";\nreturn 0;\n}",
      "solution": "template <typename T>\nT add(T a, T b) {\nreturn a + b;\n}\nint main() {\ncout << add<int>(5, 3) << \"\\n\";\ncout << add<double>(2.5, 1.5) << \"\\n\";\nreturn 0;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "template <typename T>\nclass Box {\npublic:\nT value;\nBox(T v) {\nvalue = v;\n}\nvoid show() {\ncout << \"Value: \" << value << \"\\n\";\n}\n};\nint main() {\nBox<int> intBox(50);\nBox<string> strBox(\"Hello\");\nintBox.show();\nstrBox.show();\nreturn 0;\n# TODO: Complete this line",
      "solution": "template <typename T>\nclass Box {\npublic:\nT value;\nBox(T v) {\nvalue = v;\n}\nvoid show() {\ncout << \"Value: \" << value << \"\\n\";\n}\n};\nint main() {\nBox<int> intBox(50);\nBox<string> strBox(\"Hello\");\nintBox.show();\nstrBox.show();\nreturn 0;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "1d6ee5a5-79a5-4a66-a5e3-67c279a4ea30",
      "title": "Cpp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "02db9b52-74f5-4b09-8a67-fdfd72706963",
      "title": "Cpp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f1fdfc29-0b09-4a88-afbb-d087a729348b",
      "title": "Cpp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is T?",
      "options": [
        "common",
        "a placeholder for a data type (like\nint",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of T is 'a placeholder for a data type (like\nint'."
    },
    {
      "question": "What is but\nT?",
      "options": [
        "a placeholder for a data type (like\nint",
        "None of the above.",
        "None of the above.",
        "common"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of but\nT is 'common'."
    }
  ],
  "summary": "This tutorial covers C++Templates concepts and techniques. You'll learn how to use C++Templates effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C++Templates and how to apply it in your projects."
}