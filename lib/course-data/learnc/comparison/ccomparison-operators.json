{
  "id": "0976e73a-0ae2-4729-832a-b713a858a7bc",
  "title": "C#Comparison Operators",
  "slug": "ccomparison-operators",
  "metadata": {
    "description": "Learn about C#Comparison Operators with clear explanations and practical examples.",
    "keywords": [
      "comparison",
      "greater",
      "operators",
      "equal",
      "values",
      "example",
      "find",
      "true",
      "operator",
      "less"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Csharp Basics"
    ],
    "estimated_time": 5,
    "category": "LearnC#",
    "subcategory": "Comparison"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Section 1",
      "content": "C#\nComparison Operators\n\nComparison Operators\nComparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.\nThe return value of a comparison is either\nTrue\nor\nFalse\n. These values are known as\nBoolean values\n, and you will learn more about them in the\nBooleans\nand\nIf..Else\nchapter.\nIn the following example, we use the\ngreater than operator\n(\n>\n) to find out if 5 is greater than 3:\nExample\nint x = 5;\nint y = 3;\nConsole.WriteLine(x > y); // returns True because 5 is greater than 3\n\nA list of all comparison operators:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Try it",
      "content": "==\nEqual to\nx == y\nTry it \u00bb\n!=\nNot equal\nx != y\nTry it \u00bb\n>\nGreater than\nx > y\nTry it \u00bb\n<\nLess than\nx < y\nTry it \u00bb\n>=\nGreater than or equal to\nx >= y\nTry it \u00bb\n<=\nLess than or equal to\nx <= y\nTry it \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6a0234ea-bfbb-45c5-9fde-f17160e6d321",
      "title": "Csharp Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e6815997-67cf-40e6-a207-d5be5d585173",
      "title": "Csharp Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "24fc6e85-9d83-4784-931f-25a68beef821",
      "title": "Csharp Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Comparison Operators\n\nComparison Operators\nComparison operators?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to compare two values (or variables)",
        "important in programming"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Comparison Operators\n\nComparison Operators\nComparison operators is 'used to compare two values (or variables)'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "used to compare two values (or variables)",
        "None of the above.",
        "important in programming"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'important in programming'."
    }
  ],
  "summary": "This tutorial covers C#Comparison Operators concepts and techniques. You'll learn how to use C#Comparison Operators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of C#Comparison Operators and how to apply it in your projects."
}