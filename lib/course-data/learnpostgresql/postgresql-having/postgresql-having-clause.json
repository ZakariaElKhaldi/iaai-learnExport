{
  "id": "e3834e9a-a81b-4ce2-b860-f29c49544ce8",
  "title": "PostgreSQL HAVING Clause",
  "slug": "postgresql-having-clause",
  "metadata": {
    "description": "Learn about PostgreSQL HAVING Clause with clear explanations and practical examples.",
    "keywords": [
      "c",
      "products",
      "example",
      "customers",
      "price",
      "group",
      "orders",
      "left",
      "join",
      "clause",
      "select"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL HAVING"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL HAVING Clause",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "HAVING\nThe\nHAVING\nclause was added to SQL because the\nWHERE\nclause cannot be used with aggregate functions.\nAggregate functions are often used with\nGROUP BY\nclauses,\nand by adding\nHAVING\nwe can write condition like we do with\nWHERE\nclauses.\nExample\nList only countries that are represented more than 5 times:\nSELECT COUNT(customer_id), country\nFROM customers\nGROUP BY country\nHAVING COUNT(customer_id) > 5;\nRun Example \u00bb\nMore HAVING Examples\nThe following SQL statement lists only orders with a total price of 400$ or more:\nExample\nSELECT order_details.order_id, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nGROUP BY order_id\nHAVING SUM(products.price) > 400.00;\nRun Example \u00bb\nLists customers that have ordered for 1000$ or more:\nExample\nSELECT customers.customer_name, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nLEFT JOIN orders ON order_details.order_id = orders.order_id\nLEFT JOIN customers ON orders.customer_id = customers.customer_id\nGROUP BY customer_name\nHAVING SUM(products.price) > 1000.00;\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT COUNT(customer_id), country\nFROM customers\nGROUP BY country\nHAVING COUNT(customer_id) > 5;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT order_details.order_id, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nGROUP BY order_id\nHAVING SUM(products.price) > 400.00;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT customers.customer_name, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nLEFT JOIN orders ON order_details.order_id = orders.order_id\nLEFT JOIN customers ON orders.customer_id = customers.customer_id\nGROUP BY customer_name\nHAVING SUM(products.price) > 1000.00;",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT COUNT(customer_id), country\nFROM customers\n# TODO: Complete this line\nHAVING COUNT(customer_id) > 5;",
      "solution": "SELECT COUNT(customer_id), country\nFROM customers\nGROUP BY country\nHAVING COUNT(customer_id) > 5;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT order_details.order_id, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nGROUP BY order_id\n# TODO: Complete this line",
      "solution": "SELECT order_details.order_id, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nGROUP BY order_id\nHAVING SUM(products.price) > 400.00;"
    }
  ],
  "related_topics": [
    {
      "id": "f05aa87c-abf4-4207-b3ba-9684cdd22284",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1b4e6940-179a-458f-8b61-7c61ee4a7f73",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f812b4d7-c61f-40d9-8e44-b97e4b681a94",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Aggregate functions?",
      "options": [
        "None of the above.",
        "often used with\nGROUP BY\nclauses",
        "represented more than 5 times:\nSELECT COUNT(customer_id)",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Aggregate functions is 'often used with\nGROUP BY\nclauses'."
    },
    {
      "question": "What is Example\nList only countries that?",
      "options": [
        "None of the above.",
        "represented more than 5 times:\nSELECT COUNT(customer_id)",
        "often used with\nGROUP BY\nclauses",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Example\nList only countries that is 'represented more than 5 times:\nSELECT COUNT(customer_id)'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL HAVING Clause concepts and techniques. You'll learn how to use PostgreSQL HAVING Clause effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL HAVING Clause and how to apply it in your projects."
}