{
  "id": "a3b9d350-6b2c-4379-8e63-a1699748efd5",
  "title": "PostgreSQL Operators",
  "slug": "postgresql-operators",
  "metadata": {
    "description": "Learn about PostgreSQL Operators with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "example",
      "return",
      "records",
      "cars",
      "operator",
      "select",
      "brand",
      "equal",
      "year",
      "value"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL Operators"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL Operators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "PostgreSQL Operators\n\nOperators in the WHERE clause\nWe can operate with different operators in the\nWHERE\nclause",
      "content": ":\n=\nEqual to\n<\nLess than\n>\nGreater than\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to\n!=\nNot equal to\nLIKE\nCheck if a value matches a pattern (case sensitive)\nILIKE\nCheck if a value matches a pattern (case \n  insensitive)\nAND\nLogical AND\nOR\nLogical OR\nIN\nCheck if a value is between a range of values\nBETWEEN\nCheck if a value is between a range of values\nIS NULL\nCheck if a value is NULL\nNOT\nMakes a negative result e.g.\nNOT LIKE\n,\nNOT IN\n,",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "=\noperator is used when you want to return all records where a\ncolumn is equal to a specified value:\nExample\nReturn all records where the brand is 'Volvo':\nSELECT * FROM cars\nWHERE brand = 'Volvo';\nRun Example \u00bb\nLess Than\nThe\n<\noperator is used when you want to return all records where a\ncolumn is less than a specified value.\nExample\nReturn all records where the year is less than 1975:\nSELECT * FROM cars\nWHERE year < 1975;\nRun Example \u00bb\nGreater Than\nThe\n>\noperator is used when you want to return all records where a\ncolumns is greater than a specified value.\nExample\nReturn all records where the year is greater than 1975:\nSELECT * FROM cars\nWHERE year > 1975;\nRun Example \u00bb\nLess Than or Equal To\nThe\n<=\noperator is used when you want to return all records where a\ncolumn is less than, or equal to, a specified value.\nExample\nReturn all records where the year is less than or equal to 1975:\nSELECT * FROM cars\nWHERE year <= 1975;\nRun Example \u00bb\nGreater Than or Equal to\nThe\n>=\noperator is used when you want to return all records where a\ncolumns is greater than, or equal to, a specified value.\nExample\nReturn all records where the year is greater than or equal 1975:\nSELECT * FROM cars\nWHERE year >= 1975;\nRun Example \u00bb\nNot Equal To\nThe\n<>\noperator is used when you want to return all records where a\ncolumn is NOT equal to a specified value:\nExample\nReturn all records where the brand is NOT 'Volvo':\nSELECT * FROM cars\nWHERE brand <> 'Volvo';\nRun Example \u00bb\nYou will get the same result with the\n!=\noperator:\nExample\nReturn all records where the brand is NOT 'Volvo':\nSELECT * FROM cars\nWHERE brand != 'Volvo';\nRun Example \u00bb\nLIKE\nThe\nLIKE\noperator is used when you want to return all records where a\ncolumn is equal to a specified pattern.\nThe pattern can be an absolute value like 'Volvo', or with a wildcard that has a special meaning.\nThere are two wildcards often used in conjunction with the LIKE operator:\nThe percent sign\n%\n, represents zero, one, or multiple characters.\nThe underscore sign\n_\n, represents one single character.\nExample\nReturn all records where the model STARTS with a capital 'M':\nSELECT * FROM cars\nWHERE model LIKE 'M%';\nRun Example \u00bb\nThe\nLIKE\noperator is case sensitive.\nILIKE\nSame as the\nLIKE\noperator, but\nILIKE\nis case insensitive.\nExample\nReturn all records where the model start with a 'm':\nSELECT * FROM cars\nWHERE model ILIKE 'm%';\nRun Example \u00bb\nAND\nThe logical\nAND\noperator is used when you want to\ncheck more that one condition:\nExample\nReturn all records where the brand is 'Volvo' and the year is 1968:\nSELECT * FROM cars\nWHERE brand = 'Volvo' AND year = 1968;\nRun Example \u00bb\nOR\nThe logical\nOR\noperator is used when you can accept that only one of many\nconditions is true:\nExample\nReturn all records where the brand is 'Volvo' OR the year is 1975:\nSELECT * FROM cars\nWHERE brand = 'Volvo' OR year = 1975;\nRun Example \u00bb\nIN\nThe\nIN\noperator is used when a column's value matches any of the values in a list:\nExample\nReturn all records where the brand is present in this list: ('Volvo', 'Mercedes', 'Ford'):\nSELECT * FROM cars\nWHERE brand IN ('Volvo', 'Mercedes', 'Ford');\nRun Example \u00bb\nBETWEEN\nThe\nBETWEEN\noperator is used to check if a column's value\nis between a specified range of values:\nExample\nReturn all records where the year is between 1970 and 1980:\nSELECT * FROM cars\nWHERE year BETWEEN 1970 AND 1980;\nRun Example \u00bb\nThe\nBETWEEN\noperator includes the\nfrom\nand\nto\nvalues, meaning that in the above example,\nthe result would include cars made in 1970 and 1980 as well.\nIS NULL\nThe\nIS NULL\noperator is used to check if a column's value\nis NULL:\nExample\nReturn all records where the model is NULL:\nSELECT * FROM cars\nWHERE model IS NULL;\nRun Example \u00bb\nNOT\nThe\nNOT\noperator can be used together with\nLIKE\n,\nILIKE\n,\nIN\n,\nBETWEEN\n, and\nNULL\noperators to reverse the truth of the operator.\nExample: NOT LIKE\nReturn all records where the brand does NOT start with a capital 'B' (case sensitive):\nSELECT * FROM cars\nWHERE brand \n          NOT LIKE 'B%';\nRun Example \u00bb\nExample: NOT ILIKE\nReturn all records where the brand does NOT start with a 'b' (case \n  insensitive):\nSELECT * FROM cars\nWHERE brand \n          NOT ILIKE 'b%';\nRun Example \u00bb\nExample: NOT IN\nReturn all records where the brand is NOT present in this list: ('Volvo', 'Mercedes', 'Ford'):\nSELECT * FROM cars\nWHERE brand NOT IN ('Volvo', 'Mercedes', 'Ford');\nRun Example \u00bb\nExample: NOT BETWEEN\nReturn all records where the year is NOT between 1970 and 1980:\nSELECT * FROM cars\nWHERE year NOT BETWEEN 1970 AND 1980;\nRun Example \u00bb\nThe\nNOT BETWEEN\noperator excludes the\nfrom\nand\nto\nvalues, meaning that in the above example,\nthe result would not include cars made in 1970 and 1980.\nExample: IS NOT NULL\nReturn all records where the model is NOT null:\nSELECT * FROM cars\nWHERE model IS NOT NULL;\nRun Example \u00bb\nThe\ncars\ntable has no columns with NULL values,\nso the example above will return all 4 rows.\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT * FROM cars\nWHERE brand = 'Volvo';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT * FROM cars\nWHERE year < 1975;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "SELECT * FROM cars\nWHERE year > 1975;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "SELECT * FROM cars\nWHERE year <= 1975;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "SELECT * FROM cars\nWHERE year >= 1975;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "SELECT * FROM cars\nWHERE brand <> 'Volvo';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "SELECT * FROM cars\nWHERE brand != 'Volvo';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "SELECT * FROM cars\nWHERE model LIKE 'M%';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "SELECT * FROM cars\nWHERE model ILIKE 'm%';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "SELECT * FROM cars\nWHERE brand = 'Volvo' AND year = 1968;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "SELECT * FROM cars\nWHERE brand = 'Volvo' OR year = 1975;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "SELECT * FROM cars\nWHERE brand IN ('Volvo', 'Mercedes', 'Ford');",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "SELECT * FROM cars\nWHERE year BETWEEN 1970 AND 1980;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "SELECT * FROM cars\nWHERE model IS NULL;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example: NOT LIKE",
      "content": "",
      "order": 18,
      "code": "SELECT * FROM cars\nWHERE brand \n          NOT LIKE 'B%';",
      "language": "unknown",
      "explanation": "Example of example: not like"
    },
    {
      "type": "code_example",
      "title": "Example: NOT ILIKE",
      "content": "",
      "order": 19,
      "code": "SELECT * FROM cars\nWHERE brand \n          NOT ILIKE 'b%';",
      "language": "unknown",
      "explanation": "Example of example: not ilike"
    },
    {
      "type": "code_example",
      "title": "Example: NOT IN",
      "content": "",
      "order": 20,
      "code": "SELECT * FROM cars\nWHERE brand NOT IN ('Volvo', 'Mercedes', 'Ford');",
      "language": "unknown",
      "explanation": "Example of example: not in"
    },
    {
      "type": "code_example",
      "title": "Example: NOT BETWEEN",
      "content": "",
      "order": 21,
      "code": "SELECT * FROM cars\nWHERE year NOT BETWEEN 1970 AND 1980;",
      "language": "unknown",
      "explanation": "Example of example: not between"
    },
    {
      "type": "code_example",
      "title": "Example: IS NOT NULL",
      "content": "",
      "order": 22,
      "code": "SELECT * FROM cars\nWHERE model IS NOT NULL;",
      "language": "unknown",
      "explanation": "Example of example: is not null"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "SELECT * FROM cars\nWHERE brand = 'Volvo';"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "SELECT * FROM cars\nWHERE year < 1975;"
    }
  ],
  "related_topics": [
    {
      "id": "343a9a68-ea25-4716-9995-36dca087d47b",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "af56c12f-cb88-4de9-aca2-4fcf4b312b1c",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "71f5eb80-1374-4619-9f89-ba79cbcd639c",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is AND\nLogical AND\nOR\nLogical OR\nIN\nCheck if a value is between a range of values\nBETWEEN\nCheck if a value is between a range of values\nIS NULL\nCheck if a value?",
      "options": [
        "equal to a specified value:\nExample\nReturn all records where the brand is 'Volvo':\nSELECT * FROM cars\nWHERE brand = 'Volvo';\nRun Example \u00bb\nLess Than\nThe\n<\noperator is used when you want to return all records where a\ncolumn is less than a specified value",
        "None of the above.",
        "NULL\nNOT\nMakes a negative result e",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of AND\nLogical AND\nOR\nLogical OR\nIN\nCheck if a value is between a range of values\nBETWEEN\nCheck if a value is between a range of values\nIS NULL\nCheck if a value is 'NULL\nNOT\nMakes a negative result e'."
    },
    {
      "question": "What is operator is used when you want to return all records where a\ncolumn?",
      "options": [
        "NULL\nNOT\nMakes a negative result e",
        "None of the above.",
        "equal to a specified value:\nExample\nReturn all records where the brand is 'Volvo':\nSELECT * FROM cars\nWHERE brand = 'Volvo';\nRun Example \u00bb\nLess Than\nThe\n<\noperator is used when you want to return all records where a\ncolumn is less than a specified value",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of operator is used when you want to return all records where a\ncolumn is 'equal to a specified value:\nExample\nReturn all records where the brand is 'Volvo':\nSELECT * FROM cars\nWHERE brand = 'Volvo';\nRun Example \u00bb\nLess Than\nThe\n<\noperator is used when you want to return all records where a\ncolumn is less than a specified value'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL Operators concepts and techniques. You'll learn how to use PostgreSQL Operators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL Operators and how to apply it in your projects."
}