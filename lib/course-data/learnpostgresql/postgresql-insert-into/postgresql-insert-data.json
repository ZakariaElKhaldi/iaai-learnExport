{
  "id": "b99158d5-e353-414b-96c7-1a254d8d2e39",
  "title": "PostgreSQL Insert Data",
  "slug": "postgresql-insert-data",
  "metadata": {
    "description": "Learn about PostgreSQL Insert Data with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "insert",
      "statement",
      "table",
      "cars",
      "values",
      "data",
      "display",
      "result",
      "following",
      "brand"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL INSERT INTO"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL Insert Data",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Insert Into\nTo insert data into a table in PostgreSQL, we use the\nINSERT INTO\nstatement.\nThe following SQL statement will insert one row of data into the\ncars\ntable you created in\nthe \n.\nINSERT INTO cars (brand, model, year)\nVALUES ('Ford', 'Mustang', 1964);\nThe SQL Shell application will return the following:\nINSERT 0 1\nWhich means that\n1\nrow was inserted.\nDon't think about the\n0\n, for now, just accept that it represents \nsomething else and will always be\n0\n.\nSQL Statement Explained\nAs you can see in the SQL statement above, string values must be written with \napostrophes.\nNumeric values can be written without apostrophes, but you can include them if you want.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nSELECT * FROM cars;\nWhich will return this result:\nbrand |\u00a0 model\u00a0 | year\n-------+---------+------\nFord\u00a0 | Mustang | 1964\n(1 row)\nInsert Multiple Rows\nTo insert multiple rows of data, we use the same\nINSERT INTO\nstatement,\nbut with multiple values:\nINSERT INTO cars (brand, model, year)\nVALUES\n('Volvo', 'p1800', 1968),\n('BMW', 'M1', 1978),\n('Toyota', 'Celica', 1975);\nThe SQL Shell application will return the following:\nINSERT 0 3\nWhich means\n3\nrows were successfully inserted.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nSELECT * FROM cars;\nRun Example \u00bb\nClick the \"Run Example\" button to see the result of the select statement.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "INSERT INTO cars (brand, model, year)\nVALUES ('Ford', 'Mustang', 1964);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "INSERT 0 1",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT * FROM cars;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "brand |\u00a0 model\u00a0 | year\n-------+---------+------\nFord\u00a0 | Mustang | 1964\n(1 row)",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "INSERT INTO cars (brand, model, year)\nVALUES\n('Volvo', 'p1800', 1968),\n('BMW', 'M1', 1978),\n('Toyota', 'Celica', 1975);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "INSERT 0 3",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "SELECT * FROM cars;",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "INSERT INTO cars (brand, model, year)\nVALUES ('Ford', 'Mustang', 1964);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "INSERT 0 1"
    }
  ],
  "related_topics": [
    {
      "id": "95ec6543-6515-4d6f-839c-4d6de1d13143",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a17ea675-9348-4174-952e-3d9dd8bbe575",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fd1df67e-d870-4ee5-905e-409c459cc24d",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Which?",
      "options": [
        "that\n1\nrow was inserted",
        "None of the above.",
        "3\nrows were successfully inserted",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Which is 'that\n1\nrow was inserted'."
    },
    {
      "question": "What is Which?",
      "options": [
        "None of the above.",
        "that\n1\nrow was inserted",
        "None of the above.",
        "3\nrows were successfully inserted"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Which is '3\nrows were successfully inserted'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL Insert Data concepts and techniques. You'll learn how to use PostgreSQL Insert Data effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL Insert Data and how to apply it in your projects."
}