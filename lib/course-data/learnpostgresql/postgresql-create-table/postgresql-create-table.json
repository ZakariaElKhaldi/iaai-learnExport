{
  "id": "6d234cb3-b2ba-443c-b955-0ff0948c40e1",
  "title": "PostgreSQL Create Table",
  "slug": "postgresql-create-table",
  "metadata": {
    "description": "Learn about PostgreSQL Create Table with clear explanations and practical examples.",
    "keywords": [
      "c",
      "table",
      "create",
      "statement",
      "database",
      "shell",
      "cars",
      "brand",
      "model",
      "year",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL CREATE TABLE"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL Create Table",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Connect to the Database\nTo create a new database table using the SQL Shell, make sure you are connected to the database.\nIf not, follow the steps in the\nGet Started\nchapter of this tutorial.\nOnce you are connected, you are ready to write SQL statements!\nCreate Table\nThe following SQL statement will create a table named\ncars\nin your PostgreSQL database:\nCREATE TABLE cars (\nbrand \n          VARCHAR(255),\nmodel \n          VARCHAR(255),\nyear INT\n);\nWhen you execute the above statement, an empty table named cars will be created, and the SQL Shell\napplication will return the following:\nCREATE TABLE\nIn the SQL Shell application on your computer the operation above might look like this:\nSQL Statement Explained\nThe above SQL statement created an empty table with three fields:\nbrand\n,\nmodel\n, and\nyear\n.\nWhen creating fields in a table we have to specify the data type of each field.\nFor\nbrand\nand\nmodel\nwe are expecting string values, and string values are specified with the\nVARCHAR\nkeyword.\nWe also have to specify the number of characters allowed in a string field,\nand since we do not know exactly, we just set it to 255.\nFor\nyear\nwe are expecting integer values (numbers without decimals),\nand integer values are specified with the\nINT\nkeyword.\nDisplay Table\nYou can \"display\" the empty table you just created with another SQL statement:\nSELECT * FROM cars;\nWhich will give you this result:\nbrand | model | year\n-------+-------+------\n(0 rows)\nIn the SQL Shell application on your computer the operation above might look like this:\nIn the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "CREATE TABLE cars (\nbrand \n          VARCHAR(255),\nmodel \n          VARCHAR(255),\nyear INT\n);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "CREATE TABLE",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT * FROM cars;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "brand | model | year\n-------+-------+------\n(0 rows)",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "CREATE TABLE cars (\nbrand \n          VARCHAR(255),\n# TODO: Complete this line\n          VARCHAR(255),\nyear INT\n);",
      "solution": "CREATE TABLE cars (\nbrand \n          VARCHAR(255),\nmodel \n          VARCHAR(255),\nyear INT\n);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "CREATE TABLE"
    }
  ],
  "related_topics": [
    {
      "id": "fac3db97-0b9e-4ba0-a822-7503de8e2d72",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4ff22341-a085-42fd-8486-ee90d4cc578f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6507a8c6-f69d-4c52-82ab-c03e79ab0917",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is make sure you?",
      "options": [
        "None of the above.",
        "None of the above.",
        "connected to the database",
        "connected"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of make sure you is 'connected to the database'."
    },
    {
      "question": "What is Once you?",
      "options": [
        "None of the above.",
        "connected to the database",
        "connected",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Once you is 'connected'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL Create Table concepts and techniques. You'll learn how to use PostgreSQL Create Table effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL Create Table and how to apply it in your projects."
}