{
  "id": "db3a2fc4-ff9f-4bda-bbe9-297e0e92082a",
  "title": "PostgreSQL EXISTS Operator",
  "slug": "postgresql-exists-operator",
  "metadata": {
    "description": "Learn about PostgreSQL EXISTS Operator with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "customers",
      "exists",
      "orders",
      "operator",
      "example",
      "select",
      "table",
      "query",
      "returns",
      "return"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL EXISTS"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL EXISTS Operator",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "EXISTS\nThe\nEXISTS\noperator is used to test for the existence of any record in a \nsub query.\nThe\nEXISTS\noperator returns TRUE if the sub \nquery returns one or more records.\nExample\nReturn all customers that is represented in the\norders\ntable:\nSELECT customers.customer_name\nFROM customers\nWHERE EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);\nRun Example \u00bb\nThe result in example above showed that 89 customers had at least one order in the\norders\ntable.\nNOT EXISTS\nTo check which customers that do not have any orders, we can use the\nNOT\noperator together with the\nEXISTS\noperator :\nExample\nReturn all customers that is NOT represented in the\norders\ntable:\nSELECT customers.customer_name\nFROM customers\nWHERE NOT EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT customers.customer_name\nFROM customers\nWHERE EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT customers.customer_name\nFROM customers\nWHERE NOT EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT customers.customer_name\n# TODO: Complete this line\nWHERE EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);",
      "solution": "SELECT customers.customer_name\nFROM customers\nWHERE EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT customers.customer_name\nFROM customers\nWHERE NOT EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n# TODO: Complete this line",
      "solution": "SELECT customers.customer_name\nFROM customers\nWHERE NOT EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);"
    }
  ],
  "related_topics": [
    {
      "id": "fce1a639-8a57-4a84-98d8-05fd4315c087",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d0cfa2f5-70d4-4be6-816e-a581878c2893",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f4329b47-8f58-43b7-9ebe-05e41cc3ac05",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PostgreSQL EXISTS Operator\n\nEXISTS\nThe\nEXISTS\noperator?",
      "options": [
        "None of the above.",
        "represented in the\norders\ntable:\nSELECT customers",
        "None of the above.",
        "used to test for the existence of any record in a \nsub query"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of PostgreSQL EXISTS Operator\n\nEXISTS\nThe\nEXISTS\noperator is 'used to test for the existence of any record in a \nsub query'."
    },
    {
      "question": "What is Example\nReturn all customers that?",
      "options": [
        "used to test for the existence of any record in a \nsub query",
        "None of the above.",
        "None of the above.",
        "represented in the\norders\ntable:\nSELECT customers"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Example\nReturn all customers that is 'represented in the\norders\ntable:\nSELECT customers'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL EXISTS Operator concepts and techniques. You'll learn how to use PostgreSQL EXISTS Operator effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL EXISTS Operator and how to apply it in your projects."
}