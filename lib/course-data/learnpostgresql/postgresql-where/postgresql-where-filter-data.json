{
  "id": "b951625a-0c5e-4c0b-83bb-d500301188d6",
  "title": "PostgreSQL WHERE - Filter Data",
  "slug": "postgresql-where-filter-data",
  "metadata": {
    "description": "Learn about PostgreSQL WHERE - Filter Data with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "example",
      "numeric",
      "quotes",
      "records",
      "fields",
      "filter",
      "select",
      "customers",
      "around",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL WHERE"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL WHERE - Filter Data",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Filter Records\nThe\nWHERE\nclause is used to filter records.\nIt is used to extract only those records that fulfill a specified condition.\nIf we want to return only the records where\ncity\nis\nLondon\n,\nwe can specify that in the\nWHERE\nclause:\nExample\nSELECT * FROM customers\nWHERE \n          city = 'London';\nRun Example \u00bb\nText Fields vs. Numeric Fields\nPostgreSQL requires quotes around text values.\nHowever, numeric fields should not be enclosed in quotes:\nExample\nSELECT * FROM customers\nWHERE \n          customer_id = 19;\nRun Example \u00bb\nQuotes around numeric fields will not fail, but it is good practice to always write numeric values without quotes.\nGreater than\nUse the\n>\noperator to return all records where\ncustomer_id\nis greater than 80:\nExample\nSELECT * FROM customers\nWHERE \n          customer_id > 80;\nRun Example \u00bb\nQuotes around numeric fields will not fail, but it is good practice to always write numeric values without quotes.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT * FROM customers\nWHERE \n          city = 'London';",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT * FROM customers\nWHERE \n          customer_id = 19;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT * FROM customers\nWHERE \n          customer_id > 80;",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT * FROM customers\n# TODO: Complete this line\n          city = 'London';",
      "solution": "SELECT * FROM customers\nWHERE \n          city = 'London';"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT * FROM customers\n# TODO: Complete this line\n          customer_id = 19;",
      "solution": "SELECT * FROM customers\nWHERE \n          customer_id = 19;"
    }
  ],
  "related_topics": [
    {
      "id": "2c875b29-a67d-41b2-b0dc-7c2f1b2c829b",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6e4a7499-923c-4ab3-b936-cb32b186735f",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "187b627f-5b64-410c-a5d6-c8caa5e4875a",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Filter Data\n\nFilter Records\nThe\nWHERE\nclause?",
      "options": [
        "None of the above.",
        "used to extract only those records that fulfill a specified condition",
        "used to filter records",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Filter Data\n\nFilter Records\nThe\nWHERE\nclause is 'used to filter records'."
    },
    {
      "question": "What is It?",
      "options": [
        "used to extract only those records that fulfill a specified condition",
        "None of the above.",
        "None of the above.",
        "used to filter records"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of It is 'used to extract only those records that fulfill a specified condition'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL WHERE - Filter Data concepts and techniques. You'll learn how to use PostgreSQL WHERE - Filter Data effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL WHERE - Filter Data and how to apply it in your projects."
}