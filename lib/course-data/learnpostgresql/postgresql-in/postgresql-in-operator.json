{
  "id": "27587423-bde1-4317-a0b6-001d2d098b9e",
  "title": "PostgreSQL IN Operator",
  "slug": "postgresql-in-operator",
  "metadata": {
    "description": "Learn about PostgreSQL IN Operator with clear explanations and practical examples.",
    "keywords": [
      "sql",
      "select",
      "example",
      "customers",
      "return",
      "orders",
      "operator",
      "germany",
      "france",
      "records",
      "list"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Sql Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL IN"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL IN Operator",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "IN\nThe\nIN\noperator allows you to specify a list of possible values in the WHERE clause.\nThe\nIN\noperator is a shorthand for multiple\nOR\nconditions.\nExample\nReturn all customers from 'Germany', France' or 'UK':\nSELECT * FROM customers\nWHERE country IN ('Germany', 'France', 'UK');\nRun Example \u00bb\nNOT IN\nBy using the\nNOT\nkeyword in front of the\nIN\noperator, you return all records that are NOT any of the values in the list.\nExample\nReturn all customers that are NOT from 'Germany', France' or 'UK':\nSELECT * FROM customers\nWHERE country NOT IN ('Germany', 'France', 'UK');\nRun Example \u00bb\nIN (SELECT)\nYou can also us a\nSELECT\nstatement inside the parenthesis to return all records\nthat are in the result of the\nSELECT\nstatement.\nExample\nReturn all customers that have an order in the\norders\ntable:\nSELECT * FROM customers\nWHERE customer_id IN (SELECT customer_id FROM orders);\nRun Example \u00bb\nNOT IN (SELECT)\nThe result in the example above returned 89 records, that means that there are 2 customers that \nhaven't placed any orders.\nLet us check if that is correct, by using the\nNOT IN\noperator.\nExample\nReturn all customers that have NOT placed any orders in the\norders\ntable:\nSELECT * FROM customers\nWHERE customer_id NOT IN (SELECT customer_id FROM orders);\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT * FROM customers\nWHERE country IN ('Germany', 'France', 'UK');",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT * FROM customers\nWHERE country NOT IN ('Germany', 'France', 'UK');",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "SELECT * FROM customers\nWHERE customer_id IN (SELECT customer_id FROM orders);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "SELECT * FROM customers\nWHERE customer_id NOT IN (SELECT customer_id FROM orders);",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "SELECT * FROM customers\nWHERE country IN ('Germany', 'France', 'UK');"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "SELECT * FROM customers\nWHERE country NOT IN ('Germany', 'France', 'UK');"
    }
  ],
  "related_topics": [
    {
      "id": "e645a467-4edf-454d-a322-19dcaac8a940",
      "title": "Sql Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d4449dbd-4c37-40f4-a6ed-88ee70147fe6",
      "title": "Sql Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cea151d4-7b31-438a-80df-a88934979352",
      "title": "Sql Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The\nIN\noperator?",
      "options": [
        "None of the above.",
        "NOT any of the values in the list",
        "None of the above.",
        "a shorthand for multiple\nOR\nconditions"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The\nIN\noperator is 'a shorthand for multiple\nOR\nconditions'."
    },
    {
      "question": "What is you return all records that?",
      "options": [
        "NOT any of the values in the list",
        "None of the above.",
        "None of the above.",
        "a shorthand for multiple\nOR\nconditions"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of you return all records that is 'NOT any of the values in the list'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL IN Operator concepts and techniques. You'll learn how to use PostgreSQL IN Operator effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL IN Operator and how to apply it in your projects."
}