{
  "id": "6af0f0bf-7a61-449a-a673-05fd85443f1e",
  "title": "PostgreSQL CASE Expression",
  "slug": "postgresql-case-expression",
  "metadata": {
    "description": "Learn about PostgreSQL CASE Expression with clear explanations and practical examples.",
    "keywords": [
      "c",
      "price",
      "case",
      "product",
      "else",
      "example",
      "column",
      "conditions",
      "returns",
      "condition",
      "true"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPostgreSQL",
    "subcategory": "PostgreSQL CASE"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "PostgreSQL CASE Expression",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "CASE\nThe\nCASE\nexpression goes through conditions and returns a value when the first condition is met\n(like an if-then-else statement).\nOnce a condition is true, it will stop reading and return the result.\nIf no conditions are true, it returns the value in the\nELSE\nclause.\nIf there is no\nELSE\npart and no conditions are true, it returns NULL.\nExample\nReturn specific values if the price meets a specific condition:\nSELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND\nFROM \n        products;\nRun Example \u00bb\nWith an Alias\nWhen a column name is not specified for the \"case\" field,\nthe parser uses\ncase\nas the column name.\nTo specify a column name, add an alias after the\nEND\nkeyword.\nExample\nSame example, but with an alias for the case column::\nSELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND AS \"price category\"\nFROM \n        products;\nRun Example \u00bb\nYou can read more about aliases in our\nPostgreSQL AS chapter\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND\nFROM \n        products;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND AS \"price category\"\nFROM \n        products;",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND\nFROM \n# TODO: Complete this line",
      "solution": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND\nFROM \n        products;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\n# TODO: Complete this line\n'Normal product'\nEND AS \"price category\"\nFROM \n        products;",
      "solution": "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High \n        price product'\nELSE\n'Normal product'\nEND AS \"price category\"\nFROM \n        products;"
    }
  ],
  "related_topics": [
    {
      "id": "1fa95c1a-d28b-49fa-a56d-845a9abb4242",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "06527591-a167-499e-abf7-3909871bfb37",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6d9590d0-bf31-4caa-8f9e-e304a3b657ce",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is PostgreSQL CASE Expression\n\nCASE\nThe\nCASE\nexpression goes through conditions and returns a value when the first condition?",
      "options": [
        "None of the above.",
        "met\n(like an if-then-else statement)",
        "None of the above.",
        "true"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of PostgreSQL CASE Expression\n\nCASE\nThe\nCASE\nexpression goes through conditions and returns a value when the first condition is 'met\n(like an if-then-else statement)'."
    },
    {
      "question": "What is Once a condition?",
      "options": [
        "met\n(like an if-then-else statement)",
        "None of the above.",
        "None of the above.",
        "true"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Once a condition is 'true'."
    }
  ],
  "summary": "This tutorial covers PostgreSQL CASE Expression concepts and techniques. You'll learn how to use PostgreSQL CASE Expression effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PostgreSQL CASE Expression and how to apply it in your projects."
}