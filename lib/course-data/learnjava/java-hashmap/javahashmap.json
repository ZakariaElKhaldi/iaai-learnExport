{
  "id": "a13b848e-08d4-4f68-bcb7-2074f2bea1c9",
  "title": "JavaHashMap",
  "slug": "javahashmap",
  "metadata": {
    "description": "Learn about JavaHashMap with clear explanations and practical examples.",
    "keywords": [
      "hashmap",
      "string",
      "capitalcities",
      "values",
      "example",
      "keys",
      "people",
      "java",
      "items",
      "object"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java HashMap"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nHashMap",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java HashMap\nIn the\nArrayList\nchapter, you learned that Arrays store items as an ordered collection, and you have to access them with an index number (\nint\ntype).\nA\nHashMap\nhowever, store items in \"\nkey\n/\nvalue\n\" pairs, and you can access them by an index of another type (e.g. a\nString\n).\nOne object is used as a key (index) to another \nobject (value). It can store different types:\nString\nkeys and\nInteger\nvalues, or the \nsame type, like:\nString\nkeys and\nString\nvalues:\nExample\nCreate a\nHashMap\nobject called\ncapitalCities\nthat will store\nString\nkeys\nand\nString\nvalues\n:\nimport java.util.HashMap; // import the HashMap class\n\nHashMap<String, String> capitalCities = new HashMap<String, String>();\nAdd Items\nThe\nHashMap\nclass has many useful methods. For example, to \nadd items to it, use the\nput()\nmethod:\nExample\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 // Create a HashMap object called capitalCities\n\u00a0\u00a0\u00a0 HashMap<String, String> capitalCities = new HashMap<String, String>();\n\n// Add keys and values (Country, City)\n\u00a0\u00a0\u00a0 capitalCities.put(\"England\", \"London\");\n\u00a0\u00a0\u00a0 capitalCities.put(\"Germany\", \"Berlin\");\n\u00a0\u00a0\u00a0 capitalCities.put(\"Norway\", \"Oslo\");\n\u00a0\u00a0\u00a0 capitalCities.put(\"USA\", \"Washington DC\");\n\u00a0\u00a0\u00a0 System.out.println(capitalCities);\n\u00a0 }\n}\n\nAccess an Item\nTo access a value in the\nHashMap\n, use the\nget()\nmethod and refer to \nits key:\nExample\ncapitalCities.get(\"England\");\n\nRemove an Item\nTo remove an item, use the\nremove()\nmethod \nand refer to the key:\nExample\ncapitalCities.remove(\"England\");\n\nTo remove all items, use the\nclear()\nmethod:\nExample\ncapitalCities.clear();\n\nHashMap Size\nTo find out how many items there are, use the\nsize()\nmethod:\nExample\ncapitalCities.size();\n\nLoop Through a HashMap\nLoop through the items of a\nHashMap\nwith a\nfor-each\nloop.\nNote:\nUse the\nkeySet()\nmethod if you only want the keys, and use the\nvalues()\nmethod if you only want the values:\nExample\n// Print keys\nfor (String i : capitalCities.keySet()) {\n\u00a0 System.out.println(i);\n}\n\nExample\n// Print values\nfor (String i : capitalCities.values()) {\n\u00a0 System.out.println(i);\n}\n\nExample\n// Print keys and values\nfor (String i : capitalCities.keySet()) {\n\u00a0 System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\n}\n\nOther Types\nKeys and values in a HashMap are actually objects. In the examples above, we used objects of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent\nwrapper class\n:\nInteger\n. For other primitive types, \nuse:\nBoolean\nfor boolean,\nCharacter\nfor char,\nDouble\nfor double, \netc:\nExample\nCreate a\nHashMap\nobject called\npeople\nthat will store\nString\nkeys\nand\nInteger\nvalues\n:\n// Import the HashMap class\nimport java.util.HashMap;\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\n// Create a HashMap object called people\n\u00a0\u00a0\u00a0 HashMap<String, Integer> people = new HashMap<String, Integer>();\n\n// Add keys and values (Name, Age)\n\u00a0\u00a0\u00a0 people.put(\"John\", 32);\n\u00a0\u00a0\u00a0 people.put(\"Steve\", 30);\n\u00a0\u00a0\u00a0 people.put(\"Angie\", 33);\n\nfor (String i : people.keySet()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"key: \" + i + \" value: \" + people.get(i));\n\u00a0\u00a0\u00a0 }\n\u00a0 }\n}\n\nComplete HashMap Reference\nFor a complete reference of HashMap methods, go to our\nJava HashMap Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "90149645-172f-4431-a473-204443c39619",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4d4194eb-f1cc-4250-a398-c9a011b3bd9a",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c539266e-7b2d-42d1-9edf-e3a2011116fb",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is One object?",
      "options": [
        "None of the above.",
        "Not a One object.",
        "used as a key (index) to another \nobject (value)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of One object is 'used as a key (index) to another \nobject (value)'."
    },
    {
      "question": "Which best describes the main purpose of this java feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaHashMap concepts and techniques. You'll learn how to use JavaHashMap effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaHashMap and how to apply it in your projects."
}