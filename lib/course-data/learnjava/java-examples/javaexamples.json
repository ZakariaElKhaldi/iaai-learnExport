{
  "id": "4202608e-8158-4889-8d6d-cb0d4d6b31e9",
  "title": "JavaExamples",
  "slug": "javaexamples",
  "metadata": {
    "description": "Learn about JavaExamples with clear explanations and practical examples.",
    "keywords": [
      "java",
      "create",
      "explained",
      "class",
      "loop",
      "type",
      "string",
      "operator",
      "arraylist",
      "statement"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Examples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nExamples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Syntax\nCreate a simple \"Hello World\" program\nSyntax Explained\nJava Comments\nSingle-line comment before a line of code\nSingle-line comment at the end of a line of code\nMulti-line comment\nComments Explained\nJava Variables\nCreate a string variable\nCreate an integer variable\nCreate a variable without assigning the value, and assign the value later\nOverwrite an existing variable value\nCreate a final variable (unchangeable and read-only)\nCombine text and a variable on display\nAdd a variable to another variable\nDeclare many variables of the same type with a comma-separated list\nVariables Explained\nJava Data Types\nA demonstration of different data types in Java\nCreate a byte type\nCreate a short type\nCreate an int type\nCreate a long type\nCreate a float type\nCreate a double type\nCreate a boolean type\nCreate a char type\nCreate a String type\nData Types Explained\nJava Type Casting\nWidening Casting\nNarrowing Casting\nType Casting Explained\nJava Operators\nAddition operator\nSubtraction operator\nMultiplication operator\nDivision operator\nModulus operator\nIncrement operator\nDecrement operator\nAssignment operator\nComparison operator\nLogical operator\nOperators Explained\nJava Strings\nCreate a string\nQuotes inside a string\nFind the length of a string\nUsing methods to convert strings to uppercase and lowercase\nFinding a string in a string\nString concatenation\nIf you add a number and a string, the result will be a string concatenation\nStrings Explained\nJava Math\nMath.max(x,y) - return the highest value of x and y\nMath.min(x,y) - return the lowest value of x and y\nMath.sqrt(x) - return the square root of x\nMath.abs(x) - return the absolute (positive) value of x\nMath.random() - return a random number between 0 and 1\nMath Explained\nJava Booleans\nCreate a boolean type\nFind out if an expression is true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nJava If...Else (Conditions)\nThe if statement\nThe else statement\nThe else if statement\nIf...Else Explained\nJava Switch\nThe switch statement\nThe switch statement with a default keyword\nSwitch Explained\nJava Loops\nWhile loop\nDo while loop\nFor loop\nFor-each loop\nBreak a loop\nContinue a loop\nLoops Explained\nJava Arrays\nCreate and access an array\nChange an array element\nFind the length of an array\nAccess an array\nLoop through an array\nLoop through an array with for-each\nMultidimensional array\nLoop through a multidimensional array\nArrays Explained\nJava Methods\nCreate and call a method\nCall a method multiple times\nMethod with parameters\nMethod with multiple parameters\nReturn value\nA method with if...else\nMethod overloading\nRecursion\nRecursive function with a halting condition\nMethods Explained\nJava Classes and Objects\nCreate a class and an object of a class\nCreate multiple objects of a class\nAccessing class attributes (variables)\nModify attributes\nOverride existing attribute values\nMultiple attributes\nCreate a class method\nMethod with parameters\nAccess class methods with an object\nCreate a class constructor\nConstructor with parameters\nClasses and Objects Explained\nJava Modifiers\nPublic class\nDefault class\nPublic attributes\nPrivate attributes\nDefault attributes\nProtected attributes\nFinal class\nAbstract class with abstract methods\nModifiers Explained\nJava Encapsulation\nJava encapsulation (getters and setters)\nEncapsulation Explained\nJava Packages\nImport a class from the Java API\nImport a package from the Java API\nCreate a package\nPackages Explained\nJava Inheritance\nJava inheritance (extends)\nJava polymorphism\nInheritance Explained\nJava Inner Classes\nInner class\nPrivate inner class (error when trying to access it from an outside class)\nStatic inner class\nAccess outer class from inner class\nInner Classes Explained\nJava Abstraction & Interfaces\nJava abstract classes and methods\nJava interface (implements)\nMultiple interfaces\nInterfaces Explained\nJava Enums\nCreate an enum with a group of constants\nAn enum inside a class\nAn enum in a switch statement\nLoop through an enum\nEnums Explained\nJava User Input\nRead user input\nRead user input of various types\nUser Input Explained\nJava Dates\nDisplay current date\nDisplay current time\nDisplay current date and time\nFormatting date and time\nDates Explained\nJava ArrayList\nCreate an ArrayList\nAccess an item in an ArrayList\nRemove an item from an ArrayList\nRemove all items from an ArrayList\nGet the size of an ArrayList\nLoop through an ArrayList\nLoop through an ArrayList with for-each\nCreate an ArrayList that should store numbers (integers)\nArrayList Explained\nJava HashMap\nCreate a HashMap\nAccess an item in a HashMap\nRemove an item from a HashMap\nRemove all items from a HashMap\nGet the size of a HashMap\nLoop through a HashMap\nCreate a HashMap that should store String keys and Integer values\nHashMap Explained\nJava HashSet\nCreate a HashSet and add items to it\nCheck if an item exists in a HashSet\nRemove an item from a HashSet\nRemove all items from a HashSet\nGet the size of a HashSet\nLoop through a HashSet\nCreate a HashSet that should store Integer values\nHashSet Explained\nJava Iterator\nGetting an iterator\nLooping throug a collection\nRemoving items from a collection\nIterator Explained\nJava Wrapper Classes\nCreate an ArrayList that should store numbers (integers)\nCreate wrapper objects\nUsing wrapper methods\nConvert wrapper objects to strings\nWrapper Classes Explained\nJava Exceptions (Try...Catch)\nThe try...catch statement\nThe finally statement\nThe throw statement\nExceptions Explained\nJava Regular Expressions\nSearch for the word \"\" in a sentence\nRegular Expressions Explained\nJava Threads\nRunning a thread by extending the thread class\nRunning a thread by implementing the Runnable interface\nConcurrency problems\nAvoid concurrency problems\nThreads Explained\nJava Files\nCreate a file\nWrite to a file\nRead a file\nGet file information\nDelete a file\nFiles Explained\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "af5ec97d-3ea1-4975-a5a8-53076ba01156",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bb07ece2-5518-4c46-8024-c1af6e4df868",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3eeb96b6-30bb-49c0-844f-c6922512d950",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Math Explained\nJava Booleans\nCreate a boolean type\nFind out if an expression?",
      "options": [
        "None of the above.",
        "None of the above.",
        "true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nJava If",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Math Explained\nJava Booleans\nCreate a boolean type\nFind out if an expression is 'true or false\nUse the \"equal to\" operator to evaluate a boolean expression\nBooleans Explained\nJava If'."
    },
    {
      "question": "Which best describes the main purpose of this java feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaExamples concepts and techniques. You'll learn how to use JavaExamples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaExamples and how to apply it in your projects."
}