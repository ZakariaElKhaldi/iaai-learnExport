{
  "id": "ae727561-ec03-48ac-b9d2-e459faad0ac1",
  "title": "JavaWhile Loop",
  "slug": "javawhile-loop",
  "metadata": {
    "description": "Learn about JavaWhile Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "code",
      "loops",
      "condition",
      "block",
      "long",
      "java",
      "specified",
      "example",
      "variable"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java While Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nWhile Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code \nmore readable.\nJava While Loop\nThe\nwhile\nloop loops through a block of code as long as a specified condition is\ntrue\n:\nSyntax\nwhile (\ncondition\n) {\n// code block to be executed\n}\nIn the example below, the code in the loop will run, over and over again, as long as \na variable (i) is less than 5:\nExample\nint i = 0;\nwhile (i < 5) {\n  System.out.println(i);\n  i++;\n}\n\nNote:\nDo not forget to increase the variable used in the condition, otherwise \nthe loop will never end!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "4ba1e9b9-e93d-4c25-b407-2696c48d77bd",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bb6a3c86-797b-4ee5-a9ac-7fa335899840",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6b6911bc-6a8f-4650-a420-296d8e7208f5",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nWhile Loop\n\nLoops\nLoops can execute a block of code as long as a specified condition?",
      "options": [
        "None of the above.",
        "handy because they save time",
        "reached",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Java\nWhile Loop\n\nLoops\nLoops can execute a block of code as long as a specified condition is 'reached'."
    },
    {
      "question": "What is Loops?",
      "options": [
        "None of the above.",
        "None of the above.",
        "reached",
        "handy because they save time"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Loops is 'handy because they save time'."
    }
  ],
  "summary": "This tutorial covers JavaWhile Loop concepts and techniques. You'll learn how to use JavaWhile Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaWhile Loop and how to apply it in your projects."
}