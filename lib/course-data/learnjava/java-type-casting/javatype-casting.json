{
  "id": "aff5f0d9-548b-4776-b473-60f0360037e8",
  "title": "JavaType Casting",
  "slug": "javatype-casting",
  "metadata": {
    "description": "Learn about JavaType Casting with clear explanations and practical examples.",
    "keywords": [
      "type",
      "casting",
      "double",
      "score",
      "float",
      "example",
      "myint",
      "mydouble",
      "system",
      "println"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Type Casting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nType Casting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Type Casting\nType casting is when you assign a value of one primitive data type to another type.\nIn Java, there are two types of casting:\nWidening Casting\n(automatically) - converting a smaller type \nto a larger type size\nbyte\n->\nshort\n->\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nNarrowing Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\n->\nshort\n->\nbyte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 int myInt = 9;\n\u00a0\u00a0\u00a0 double myDouble = myInt; // Automatic casting: int to double\n\nSystem.out.println(myInt);\u00a0\u00a0\u00a0\u00a0\u00a0 // Outputs 9\n\u00a0\u00a0\u00a0 System.out.println(myDouble);\u00a0\u00a0 // Outputs 9.0\n\u00a0 }\n}\n\nNarrowing Casting\nNarrowing casting must be done manually by placing the type in parentheses\n()\nin front of the value:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 double myDouble = 9.78d;\n\u00a0\u00a0\u00a0 int myInt = (int) myDouble; // Manual casting: double to int\n\nSystem.out.println(myDouble);\u00a0\u00a0 // Outputs 9.78\n\u00a0\u00a0\u00a0 System.out.println(myInt);\u00a0\u00a0\u00a0\u00a0\u00a0 // Outputs 9\n\u00a0 }\n}\n\nReal-Life Example\nHere's a real-life example of type casting where we create a program to \ncalculate the percentage of a user's score in relation to the maximum score in a \ngame.\nWe use type casting to make sure that the result is a\nfloating-point\nvalue, rather than an integer:\nExample\n// Set the maximum possible score in the game to 500\nint maxScore = 500;\n\n// The actual score of the user\nint userScore = 423;\n\n/* Calculate the percentage of the user's score in relation to the maximum available score.\nConvert userScore to float to make sure that the division is accurate */\nfloat percentage = (float) userScore / maxScore * 100.0f;\n\nSystem.out.println(\"User's percentage is \" + percentage);\n\nVideo: Java Type Casting\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "f8cda5fb-dfd4-44a2-9160-5fbbd21e817c",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f3fce43c-dcb8-4472-8155-fa2d9f837363",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1105e513-7349-4af9-ade7-0543e334fd25",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nType Casting\n\nJava Type Casting\nType casting?",
      "options": [
        "two types of casting:\nWidening Casting\n(automatically) - converting a smaller type \nto a larger type size\nbyte\n->\nshort\n->\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nNarrowing Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\n->\nshort\n->\nbyte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 int myInt = 9;\n\u00a0\u00a0\u00a0 double myDouble = myInt; // Automatic casting: int to double\n\n\u00a0\u00a0\u00a0 System",
        "None of the above.",
        "None of the above.",
        "when you assign a value of one primitive data type to another type"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Java\nType Casting\n\nJava Type Casting\nType casting is 'when you assign a value of one primitive data type to another type'."
    },
    {
      "question": "What is there?",
      "options": [
        "None of the above.",
        "two types of casting:\nWidening Casting\n(automatically) - converting a smaller type \nto a larger type size\nbyte\n->\nshort\n->\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nNarrowing Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\n->\nshort\n->\nbyte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 int myInt = 9;\n\u00a0\u00a0\u00a0 double myDouble = myInt; // Automatic casting: int to double\n\n\u00a0\u00a0\u00a0 System",
        "None of the above.",
        "when you assign a value of one primitive data type to another type"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of there is 'two types of casting:\nWidening Casting\n(automatically) - converting a smaller type \nto a larger type size\nbyte\n->\nshort\n->\nchar\n->\nint\n->\nlong\n->\nfloat\n->\ndouble\nNarrowing Casting\n(manually) - converting a larger type \nto a smaller size type\ndouble\n->\nfloat\n->\nlong\n->\nint\n->\nchar\n->\nshort\n->\nbyte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type to a \nlarger size type:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 int myInt = 9;\n\u00a0\u00a0\u00a0 double myDouble = myInt; // Automatic casting: int to double\n\n\u00a0\u00a0\u00a0 System'."
    }
  ],
  "summary": "This tutorial covers JavaType Casting concepts and techniques. You'll learn how to use JavaType Casting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaType Casting and how to apply it in your projects."
}