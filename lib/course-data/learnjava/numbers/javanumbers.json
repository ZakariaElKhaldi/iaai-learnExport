{
  "id": "1530ab30-23ad-4939-b70a-549e79b0b738",
  "title": "JavaNumbers",
  "slug": "javanumbers",
  "metadata": {
    "description": "Learn about JavaNumbers with clear explanations and practical examples.",
    "keywords": [
      "numbers",
      "mynum",
      "types",
      "double",
      "type",
      "value",
      "system",
      "println",
      "point",
      "float"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nNumbers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Numbers\nPrimitive number types are divided into two groups:\nInteger types\nstores whole numbers, positive or negative (such as 123 or -456), without decimals. \nValid types are\nbyte\n,\nshort\n,\nint\nand\nlong\n. Which type you should use, depends on the numeric value.\nFloating point types\nrepresents numbers with a fractional part, \ncontaining one or more decimals. There are two types:\nfloat\nand\ndouble\n.\nEven though there are many numeric types in Java, the most used for numbers \nare\nint\n(for whole numbers) and\ndouble\n(for floating point numbers). However, we will describe them all as you continue to \nread.\nInteger Types\nByte\nThe\nbyte\ndata type can store whole numbers \nfrom -128 to 127. This can be used instead of\nint\nor other integer types to \nsave memory when you are certain that the value will be within -128 and 127:\nExample\nbyte myNum = 100;\nSystem.out.println(myNum);\n\nShort\nThe\nshort\ndata type can store whole numbers from -32768 to 32767:\nExample\nshort myNum = 5000;\nSystem.out.println(myNum);\n\nInt\nThe\nint\ndata type can store whole numbers from -2147483648 to 2147483647.\nIn general, and in our tutorial, the\nint\ndata type is \nthe preferred data type when we create variables with a numeric value.\nExample\nint myNum = 100000;\nSystem.out.println(myNum);\n\nLong\nThe\nlong\ndata type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":\nExample\nlong myNum = 15000000000L;\nSystem.out.println(myNum);\n\nFloating Point Types\nYou should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.\nThe\nfloat\nand\ndouble\ndata types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles:\nFloat Example\nfloat myNum = 5.75f;\nSystem.out.println(myNum);\n\nDouble Example\ndouble myNum = 19.99d;\nSystem.out.println(myNum);\n\nUse\nfloat\nor\ndouble\n?\nThe\nprecision\nof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision of\nfloat\nis only six or seven \ndecimal digits, while\ndouble\nvariables have a \nprecision of about 16 digits. Therefore it is safer to use\ndouble\nfor most calculations.\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample\nfloat f1 = 35e3f;\ndouble d1 = 12E4d;\nSystem.out.println(f1);\nSystem.out.println(d1);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "85eb83d0-e4ca-49d3-b902-5fa926a4eb44",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "882bbd76-cbc0-47cf-ab3e-40e163b7bdbd",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "07592ffd-e22f-4210-94ed-7360524d89ff",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nNumbers\n\nNumbers\nPrimitive number types?",
      "options": [
        "byte",
        "None of the above.",
        "divided into two groups:\nInteger types\nstores whole numbers",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Java\nNumbers\n\nNumbers\nPrimitive number types is 'divided into two groups:\nInteger types\nstores whole numbers'."
    },
    {
      "question": "What is Valid types?",
      "options": [
        "divided into two groups:\nInteger types\nstores whole numbers",
        "None of the above.",
        "byte",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Valid types is 'byte'."
    }
  ],
  "summary": "This tutorial covers JavaNumbers concepts and techniques. You'll learn how to use JavaNumbers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaNumbers and how to apply it in your projects."
}