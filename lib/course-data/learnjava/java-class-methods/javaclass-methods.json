{
  "id": "8c779f40-4bd6-43b1-bbf6-3e0da0ca872e",
  "title": "JavaClass Methods",
  "slug": "javaclass-methods",
  "metadata": {
    "description": "Learn about JavaClass Methods with clear explanations and practical examples.",
    "keywords": [
      "main",
      "method",
      "public",
      "class",
      "speed",
      "java",
      "methods",
      "object",
      "static",
      "mycar"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Class Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nClass Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Class Methods\nYou learned from the\nJava Methods\nchapter that methods are declared within a \nclass, and that they are used to perform certain actions:\nExample\nCreate a \nmethod named\nmyMethod()\nin Main:\npublic class Main {\n\u00a0 static void myMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Hello World!\");\n\u00a0 }\n}\nmyMethod()\nprints a text (the action), when it is\ncalled\n. To \ncall a method, write the method's name followed by two parentheses\n()\nand a semicolon\n;\nExample\nInside\nmain\n, call\nmyMethod()\n:\npublic class Main {\n\u00a0 static void myMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Hello World!\");\n\u00a0 }\n\npublic static void main(String[] args) {\n\u00a0\u00a0\u00a0 myMethod();\n\u00a0 }\n}\n\n// Outputs \"Hello World!\"\n\nStatic vs. Public\nYou will often see Java programs that have either\nstatic\nor\npublic\nattributes and methods.\nIn the example above, we created a\nstatic\nmethod, which means that it can be accessed without creating an object of the class, \nunlike\npublic\n, which can only be accessed by \nobjects:\nExample\nAn example to demonstrate the differences between\nstatic\nand\npublic\nmethods\n:\npublic class Main {\n\u00a0 // Static method\n\u00a0 static void myStaticMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Static methods can be called without creating objects\");\n\u00a0 }\n\n// Public method\n\u00a0 public void myPublicMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Public methods must be called by creating objects\");\n\u00a0 }\n\n// Main method\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 myStaticMethod(); // Call the static method\n\u00a0\u00a0\u00a0 // myPublicMethod(); This would compile an error\n\nMain myObj = new Main(); // Create an object of Main\n\u00a0\u00a0\u00a0 myObj.myPublicMethod(); // Call the public method on the object\n\u00a0 }\n}\n\nNote:\nYou will learn more about these keywords (called modifiers) in the\nJava Modifiers\nchapter.\nAccess Methods With an Object\nExample\nCreate a Car object named\nmyCar\n. Call the\nfullThrottle()\nand\nspeed()\nmethods on the\nmyCar\nobject, and run the program:\n// Create a Main class\npublic class Main {\n\n// Create a fullThrottle() method\n\u00a0 public void fullThrottle() {\n\u00a0\u00a0\u00a0 System.out.println(\"The car is going as fast as it can!\");\n\u00a0 }\n\n// Create a speed() method and add a parameter\n\u00a0 public void speed(int maxSpeed) {\n\u00a0\u00a0\u00a0 System.out.println(\"Max speed is: \" + maxSpeed);\n\u00a0 }\n\n// Inside main, call the methods on the myCar object\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Main myCar = new Main();\u00a0\u00a0 // Create a myCar object\n\u00a0\u00a0\u00a0 myCar.fullThrottle();\u00a0\u00a0\u00a0\u00a0 \u00a0// Call the fullThrottle() method\n\u00a0\u00a0\u00a0 myCar.speed(200);\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 // Call the speed() method\n\u00a0 }\n}\n\n// The car is going as fast as it can!\n// Max speed is: 200\n\nExample explained\n1) We created a custom\nMain\nclass with the\nclass\nkeyword.\n2) We created the\nfullThrottle()\nand\nspeed()\nmethods in the\nMain\nclass.\n3) The\nfullThrottle()\nmethod and the\nspeed()\nmethod will print out some text, when they are called.\n4) The\nspeed()\nmethod accepts an\nint\nparameter called\nmaxSpeed\n- we \nwill use this in\n8)\n.\n5) In order to use the\nMain\nclass and its \nmethods, we need to create an\nobject\nof the\nMain\nClass.\n6) Then, go to the\nmain()\nmethod, which you know by now is a built-in \nJava method that runs your program (any code inside main is executed).\n7) By using the\nnew\nkeyword we created an object with the name\nmyCar\n.\n8) Then, we call the\nfullThrottle()\nand\nspeed()\nmethods on the\nmyCar\nobject, and run the program using the name of the object (\nmyCar\n), followed by a dot (\n.\n), followed by the name of the method (\nfullThrottle();\nand\nspeed(200);\n). \nNotice that we add an\nint\nparameter of\n200\ninside the\nspeed()\nmethod.\nRemember that..\nThe dot (\n.\n) is used to access the object's attributes and methods.\nTo call a method in Java, write the method name followed by a set of parentheses\n()\n, followed by a semicolon (\n;\n).\nA class must have a matching filename (\nMain\nand\nMain.java\n).\nUsing Multiple Classes\nLike we specified in the\nClasses chapter\n, it is \na good practice to create an object of a class and access it in another class.\nRemember that the name of the java file should match the class name. In this \nexample, we have created two files in the same directory:\nMain.java\nSecond.java\nMain.java\npublic class Main {\n\u00a0 public void fullThrottle() {\n\u00a0\u00a0\u00a0 System.out.println(\"The car is going as fast as it can!\");\n\u00a0 }\n\npublic void speed(int maxSpeed) {\n\u00a0\u00a0\u00a0 System.out.println(\"Max speed is: \" + maxSpeed);\n\u00a0 }\n}\nSecond.java\nclass Second {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Main myCar = new Main();\u00a0 \u00a0\u00a0\u00a0// Create a myCar object\n\u00a0\u00a0\u00a0 myCar.fullThrottle();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Call the fullThrottle() method\n\u00a0\u00a0\u00a0 myCar.speed(200);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Call the speed() method\n\u00a0 }\n}\nWhen both files have been compiled:\nC:\\Users\\\nYour Name\n>javac Main.java\nC:\\Users\\\nYour Name\n>javac Second.java\nRun the Second.java file:\nC:\\Users\\\nYour Name\n>java Second\nAnd the output will be:\nThe car is going as fast as it can!\nMax speed is: 200\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "C:\\Users\\\nYour Name\n>javac Main.java\nC:\\Users\\\nYour Name\n>javac Second.java",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "C:\\Users\\\nYour Name\n>java Second",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\nYour Name\n>javac Main.java\n# TODO: Complete this line\nYour Name\n>javac Second.java",
      "solution": "C:\\Users\\\nYour Name\n>javac Main.java\nC:\\Users\\\nYour Name\n>javac Second.java"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\nYour Name\n# TODO: Complete this line",
      "solution": "C:\\Users\\\nYour Name\n>java Second"
    }
  ],
  "related_topics": [
    {
      "id": "79c85d82-47a9-44f6-92c8-ce3cde8e1266",
      "title": "Advanced Java Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "6bfcbdad-19e8-4ef9-8bdd-82292bb91e01",
      "title": "Java Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "d0bd7fa8-ec55-4d64-98d5-3dce650d40e2",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nClass Methods\n\nJava Class Methods\nYou learned from the\nJava Methods\nchapter that methods?",
      "options": [
        "declared within a \nclass",
        "called",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Java\nClass Methods\n\nJava Class Methods\nYou learned from the\nJava Methods\nchapter that methods is 'declared within a \nclass'."
    },
    {
      "question": "What is when it?",
      "options": [
        "called",
        "declared within a \nclass",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of when it is 'called'."
    }
  ],
  "summary": "This tutorial covers JavaClass Methods concepts and techniques. You'll learn how to use JavaClass Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaClass Methods and how to apply it in your projects."
}