{
  "id": "06eb1ec4-46d6-4299-98b4-c2f86280acf3",
  "title": "JavaPolymorphism",
  "slug": "javapolymorphism",
  "metadata": {
    "description": "Learn about JavaPolymorphism with clear explanations and practical examples.",
    "keywords": [
      "animal",
      "class",
      "animalsound",
      "public",
      "void",
      "system",
      "println",
      "polymorphism",
      "extends",
      "create"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Polymorphism"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nPolymorphism",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Polymorphism\nPolymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\nLike we specified in the \nInheritance\nlets us \ninherit attributes and methods from another class.\nPolymorphism\nuses those methods to perform different tasks. This allows us to perform a single \naction in different ways.\nFor example, think of a superclass called\nAnimal\nthat has a method called\nanimalSound()\n. Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):\nExample\nclass Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Pig extends Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The pig says: wee wee\");\n\u00a0 }\n}\n\nclass Dog extends Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The dog says: bow wow\");\n\u00a0 }\n}\nRemember from the\nInheritance chapter\nthat we use the\nextends\nkeyword to inherit from a class.\nNow we can create\nPig\nand\nDog\nobjects and call the\nanimalSound()\nmethod on both of them:\nExample\nclass Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Pig extends Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The pig says: wee wee\");\n\u00a0 }\n}\n\nclass Dog extends Animal {\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The dog says: bow wow\");\n\u00a0 }\n}\n\nclass Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Animal myAnimal = new Animal();\u00a0 // Create a Animal object\n\u00a0\u00a0\u00a0 Animal myPig = new Pig();\u00a0 // Create a Pig object\n\u00a0\u00a0\u00a0 Animal myDog = new Dog();\u00a0 // Create a Dog object\n\u00a0\u00a0\u00a0 myAnimal.animalSound();\n\u00a0\u00a0\u00a0 myPig.animalSound();\n\u00a0\u00a0\u00a0 myDog.animalSound();\n\u00a0 }\n}\n\nWhy And When To Use \"Inheritance\" and \"Polymorphism\"?\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "10084322-825b-4205-a28c-8f40bd1c6565",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c38ec9dc-a211-40b6-a194-e04b226f109e",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "07995d76-964d-46e8-8a4d-7f729854d6bd",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nPolymorphism\n\nJava Polymorphism\nPolymorphism?",
      "options": [
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class",
        "\"many forms\"",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Java\nPolymorphism\n\nJava Polymorphism\nPolymorphism is '\"many forms\"'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "None of the above.",
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class",
        "\"many forms\""
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of It is 'useful for code reusability: reuse attributes and methods of an existing class when you create a new class'."
    }
  ],
  "summary": "This tutorial covers JavaPolymorphism concepts and techniques. You'll learn how to use JavaPolymorphism effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaPolymorphism and how to apply it in your projects."
}