{
  "id": "ab9ee1f7-ac7c-4885-a131-7c65e0dff917",
  "title": "JavaModifiers",
  "slug": "javamodifiers",
  "metadata": {
    "description": "Learn about JavaModifiers with clear explanations and practical examples.",
    "keywords": [
      "public",
      "class",
      "main",
      "abstract",
      "methods",
      "static",
      "method",
      "myobj",
      "access",
      "final"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Modifiers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Java\nModifiers\n\nModifiers\nBy now",
      "content": ", you are quite familiar with the\npublic\nkeyword that appears in almost \nall of our examples:\npublic\nclass Main\nThe\npublic\nkeyword is an\naccess modifier\n, \nmeaning that it is used to set the access level for classes, attributes, methods and \nconstructors.\nWe divide modifiers into two groups:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Access Modifiers",
      "content": "- controls the access level\nNon-Access Modifiers\n- do not control access level, but provides other functionality\nAccess Modifiers\nFor\nclasses\n, you can use either\npublic\nor\ndefault\n:\nModifier\nDescription\nTry it\npublic\nThe class is accessible by any other class\nTry it \u00bb\ndefault\nThe class is only accessible by \nclasses in the same package. This is used when you don't specify a modifier. You will learn more about packages in the\nPackages chapter\nTry it \u00bb\nFor\nattributes, methods and constructors\n, you can use the one of the \nfollowing:\nModifier\nDescription\nTry it\npublic\nThe code is accessible for all classes\nTry it \u00bb\nprivate\nThe code is only accessible within the declared class\nTry it \u00bb\ndefault\nThe code is only accessible in the same package. This is used when you don't specify a modifier. You will learn more about packages in the\nPackages chapter\nTry it \u00bb\nprotected\nThe code is accessible in the same package and\nsubclasses\n. You will learn more about subclasses and \nsuperclasses in the\nInheritance chapter\nTry it \u00bb\nNon-Access Modifiers\nFor\nclasses\n, you can use either\nfinal\nor\nabstract\n:\nModifier\nDescription\nTry it\nfinal\nThe class cannot be inherited by other classes (You will learn more about inheritance in the\nInheritance chapter\n)\nTry it \u00bb\nabstract\nThe class cannot be used to create objects (To access an abstract class, it must be inherited from another class. You will learn more about inheritance and abstraction in the\nInheritance\nand\nAbstraction\nchapters)\nTry it \u00bb\nFor\nattributes and methods\n, you can use the one of the \nfollowing:\nModifier\nDescription\nfinal\nAttributes and methods cannot be overridden/modified\nstatic\nAttributes and methods belongs to the class, rather than an object\nabstract\nCan only be used in an abstract class, and can only be used on methods. The method does not have a body, for example\nabstract void run();\n. The body is provided by the \nsubclass (inherited from). You will learn more about inheritance and abstraction in the\nInheritance\nand\nAbstraction\nchapters\ntransient\nAttributes and methods are skipped when serializing the object containing them\nsynchronized\nMethods can only be accessed by one thread at a time\nvolatile\nThe value of an attribute is not cached thread-locally, and is always read from the \"main memory\"\nFinal\nIf you don't want the ability to override existing attribute values, declare \nattributes as\nfinal\n:\nExample\npublic class Main {\nfinal\nint x = 10;\nfinal\ndouble PI = 3.14;\n\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Main myObj = new Main();\n\u00a0\u00a0\u00a0 myObj.x = 50; // will generate an error: cannot assign a value to a\nfinal\nvariable\n\u00a0\u00a0\u00a0 myObj.PI = 25; // will generate an error: cannot assign a value to a\nfinal\nvariable\n\u00a0\u00a0\u00a0 System.out.println(myObj.x);\n\u00a0 }\n}\n\nStatic\nA\nstatic\nmethod means that it can be \naccessed without creating an object of the class, unlike\npublic\n:\nExample\nAn example to demonstrate the differences between\nstatic\nand\npublic\nmethods:\npublic class Main {\n\u00a0 // Static method\n\u00a0 static void myStaticMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Static methods can be called without creating objects\");\n\u00a0 }\n\n\u00a0 // Public method\n\u00a0 public void myPublicMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"Public methods must be called by creating objects\");\n\u00a0 }\n\n\u00a0 // Main method\n\u00a0 public static void main(String[ ] args) {\n\u00a0\u00a0\u00a0 myStaticMethod(); // Call the static method\n\u00a0\u00a0\u00a0 // myPublicMethod(); This would output an error\n\n\u00a0\u00a0\u00a0 Main myObj = new Main(); // Create an object of Main\n\u00a0\u00a0\u00a0 myObj.myPublicMethod(); // Call the public method\n\u00a0 }\n}\n\nAbstract\nAn\nabstract\nmethod belongs to an\nabstract\nclass, and it does not have a body. \nThe body is provided by the subclass:\nExample\n// Code from filename: Main.java\n// abstract class\nabstract class Main {\n\u00a0 public String fname = \"John\";\n\u00a0 public int age = 24;\n\u00a0 public\nabstract\nvoid study(); // abstract method\n}\n\n// Subclass (inherit from Main)\nclass Student extends Main {\n\u00a0 public int graduationYear = 2018;\n\u00a0 public void study() { // the body of the abstract method is provided here\n\u00a0\u00a0\u00a0 System.out.println(\"Studying all day long\");\n\u00a0 }\n}\n// End code from filename: Main.java\n\n// Code from filename: Second.java\nclass Second {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 // create an object of the Student class (which inherits attributes and methods from Main)\n\u00a0\u00a0\u00a0 Student myObj = new Student();\n\n\u00a0\u00a0\u00a0 System.out.println(\"Name: \" + myObj.fname);\n\u00a0\u00a0\u00a0 System.out.println(\"Age: \" + myObj.age);\n\u00a0\u00a0\u00a0 System.out.println(\"Graduation Year: \" + myObj.graduationYear);\n\u00a0\u00a0\u00a0 myObj.study(); // call abstract method\n}\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7e795e14-f99b-4c1f-8e77-7279959b9ab4",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a6093718-c1f1-4af0-ac4c-898c6141ccbf",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d7ab8a63-dcaf-4b70-a59c-3ad31d864cf3",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is you?",
      "options": [
        "None of the above.",
        "quite familiar with the\npublic\nkeyword that appears in almost \nall of our examples:\npublic\nclass Main\nThe\npublic\nkeyword is an\naccess modifier",
        "None of the above.",
        "accessible by any other class\nTry it \u00bb\ndefault\nThe class is only accessible by \nclasses in the same package"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of you is 'quite familiar with the\npublic\nkeyword that appears in almost \nall of our examples:\npublic\nclass Main\nThe\npublic\nkeyword is an\naccess modifier'."
    },
    {
      "question": "What is Modifier\nDescription\nTry it\npublic\nThe class?",
      "options": [
        "accessible by any other class\nTry it \u00bb\ndefault\nThe class is only accessible by \nclasses in the same package",
        "None of the above.",
        "None of the above.",
        "quite familiar with the\npublic\nkeyword that appears in almost \nall of our examples:\npublic\nclass Main\nThe\npublic\nkeyword is an\naccess modifier"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Modifier\nDescription\nTry it\npublic\nThe class is 'accessible by any other class\nTry it \u00bb\ndefault\nThe class is only accessible by \nclasses in the same package'."
    }
  ],
  "summary": "This tutorial covers JavaModifiers concepts and techniques. You'll learn how to use JavaModifiers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaModifiers and how to apply it in your projects."
}