{
  "id": "d2775594-eb1f-4e6c-ac46-17c8af2f3022",
  "title": "JavaWrapper Classes",
  "slug": "javawrapper-classes",
  "metadata": {
    "description": "Learn about JavaWrapper Classes with clear explanations and practical examples.",
    "keywords": [
      "wrapper",
      "example",
      "class",
      "integer",
      "string",
      "system",
      "println",
      "objects",
      "public",
      "main"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Wrapper Classes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nWrapper Classes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Wrapper Classes\nWrapper classes provide a way to use primitive data types (\nint\n,\nboolean\n, \netc..) as objects.\nThe table below shows the primitive type and the equivalent wrapper class:\nPrimitive Data Type\nWrapper Class\nbyte\nByte\nshort\nShort\nint\nInteger\nlong\nLong\nfloat\nFloat\ndouble\nDouble\nboolean\nBoolean\nchar\nCharacter\nSometimes you must use wrapper classes, for example when working with Collection objects, such \nas\nArrayList\n, where primitive types cannot be \nused (the list can only store objects):\nExample\nArrayList<int> myNumbers = new ArrayList<int>(); // Invalid\nArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid\n\nCreating Wrapper Objects\nTo create a wrapper object, use the wrapper class instead of the primitive \ntype. To get the value, you can just print the object:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Integer myInt = 5;\n\u00a0\u00a0\u00a0 Double myDouble = 5.99;\n\u00a0\u00a0\u00a0 Character myChar = 'A';\n\u00a0\u00a0\u00a0 System.out.println(myInt);\n\u00a0\u00a0\u00a0 System.out.println(myDouble);\n\u00a0\u00a0\u00a0 System.out.println(myChar);\n\u00a0 }\n}\n\nSince you're now working with objects, you can use certain methods to get \ninformation about the specific object.\nFor example, the following methods are used to get the value associated with \nthe corresponding wrapper object:\nintValue()\n,\nbyteValue()\n,\nshortValue()\n,\nlongValue()\n,\nfloatValue()\n,\ndoubleValue()\n,\ncharValue()\n,\nbooleanValue()\n.\nThis example will output the same result as the example above:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Integer myInt = 5;\n\u00a0\u00a0\u00a0 Double myDouble = 5.99;\n\u00a0\u00a0\u00a0 Character myChar = 'A';\n\u00a0\u00a0\u00a0 System.out.println(myInt.intValue());\n\u00a0\u00a0\u00a0 System.out.println(myDouble.doubleValue());\n\u00a0\u00a0\u00a0 System.out.println(myChar.charValue());\n\u00a0 }\n}\n\nAnother useful method is the\ntoString()\nmethod, which is used to convert wrapper objects to strings.\nIn the following example, we convert an\nInteger\nto a\nString\n, and use the\nlength()\nmethod of the\nString\nclass to output the length of the \"string\":\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Integer myInt = 100;\n\u00a0\u00a0\u00a0 String myString = myInt.toString();\n\u00a0\u00a0\u00a0 System.out.println(myString.length());\n\u00a0 }\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "94b23a9c-dbb4-4961-9bb4-530faf3cd30b",
      "title": "Advanced Java Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "acb2e847-f988-43d9-a083-f0be4e876998",
      "title": "Java Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "5cf56895-0289-412d-9b5c-b0d278d636ef",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the following methods?",
      "options": [
        "used to get the value associated with \nthe corresponding wrapper object:\nintValue()",
        "None of the above.",
        "the\ntoString()\nmethod",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the following methods is 'used to get the value associated with \nthe corresponding wrapper object:\nintValue()'."
    },
    {
      "question": "What is Another useful method?",
      "options": [
        "used to get the value associated with \nthe corresponding wrapper object:\nintValue()",
        "None of the above.",
        "the\ntoString()\nmethod",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Another useful method is 'the\ntoString()\nmethod'."
    }
  ],
  "summary": "This tutorial covers JavaWrapper Classes concepts and techniques. You'll learn how to use JavaWrapper Classes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaWrapper Classes and how to apply it in your projects."
}