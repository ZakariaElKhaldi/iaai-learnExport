{
  "id": "9f207b57-f784-430d-9037-a3e86f8f2b50",
  "title": "JavaMethod Overloading",
  "slug": "javamethod-overloading",
  "metadata": {
    "description": "Learn about JavaMethod Overloading with clear explanations and practical examples.",
    "keywords": [
      "double",
      "static",
      "example",
      "plusmethod",
      "method",
      "methods",
      "return",
      "system",
      "println",
      "overloading"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Method Overloading"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nMethod Overloading",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Method Overloading\nWith\nmethod overloading\n, multiple methods can have the same name with different\nparameters:\nExample\nint myMethod(int x)\nfloat myMethod(float x)\ndouble myMethod(double x, double y)\nConsider the following example, which has two methods that add numbers of different type:\nExample\nstatic int plusMethodInt(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethodDouble(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethodInt(8, 5);\n  double myNum2 = plusMethodDouble(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\n\nInstead of defining two methods that should do the same thing, it is better to overload one.\nIn the example below, we overload the\nplusMethod\nmethod to work for both\nint\nand\ndouble\n:\nExample\nstatic int plusMethod(int x, int y) {\n  return x + y;\n}\n\nstatic double plusMethod(double x, double y) {\n  return x + y;\n}\n\npublic static void main(String[] args) {\n  int myNum1 = plusMethod(8, 5);\n  double myNum2 = plusMethod(4.3, 6.26);\n  System.out.println(\"int: \" + myNum1);\n  System.out.println(\"double: \" + myNum2);\n}\n\nNote:\nMultiple methods can have the same name \n  as long as the number and/or type of parameters are different.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "cf699d36-4d5c-41ce-9892-54bc7b540412",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b0cf4a6d-d735-4058-8df7-16183cd9874a",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1006720a-0a40-4dea-8b4f-58ecdc9c2851",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "different",
        "better to overload one"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it is 'better to overload one'."
    },
    {
      "question": "What is or type of parameters?",
      "options": [
        "better to overload one",
        "None of the above.",
        "None of the above.",
        "different"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of or type of parameters is 'different'."
    }
  ],
  "summary": "This tutorial covers JavaMethod Overloading concepts and techniques. You'll learn how to use JavaMethod Overloading effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaMethod Overloading and how to apply it in your projects."
}