{
  "id": "eec10441-a5a6-4df6-8440-3c8bdb86ec04",
  "title": "JavaEncapsulation",
  "slug": "javaencapsulation",
  "metadata": {
    "description": "Learn about JavaEncapsulation with clear explanations and practical examples.",
    "keywords": [
      "name",
      "public",
      "variable",
      "class",
      "private",
      "access",
      "myobj",
      "person",
      "method",
      "john"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Encapsulation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nEncapsulation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Encapsulation\nThe meaning of\nEncapsulation\n, is to make sure that \"sensitive\" data is hidden \nfrom users. To achieve this, you must:\ndeclare class variables/attributes as\nprivate\nprovide public\nget\nand\nset\nmethods to access and update the value of a\nprivate\nvariable\nGet and Set\nYou learned from the \nprivate\nvariables can only be \naccessed within the same class (an outside class has no access to it). However, \nit is possible to access them if we provide public\nget\nand\nset\nmethods.\nThe\nget\nmethod returns the variable value, and the\nset\nmethod sets the value.\nSyntax for both is that they start with either\nget\nor\nset\n, followed by the \nname of the variable, with the first letter in upper case:\nExample\npublic class Person {\n\u00a0 private String name; // private = restricted access\n\n// Getter\n\u00a0 public String getName() {\n\u00a0\u00a0\u00a0 return name;\n\u00a0 }\n\n// Setter\n\u00a0 public void setName(String newName) {\n\u00a0\u00a0\u00a0 this.name = newName;\n\u00a0 }\n}\nExample explained\nThe\nget\nmethod returns the value of the variable\nname\n.\nThe\nset\nmethod takes a parameter (\nnewName\n) and assigns it to the\nname\nvariable. The\nthis\nkeyword is used to refer to the current \nobject.\nHowever, as the\nname\nvariable is declared as\nprivate\n, we\ncannot\naccess it from outside this class:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Person myObj = new Person();\n\u00a0\u00a0\u00a0 myObj.name = \"John\";\u00a0 // error\n\u00a0\u00a0\u00a0 System.out.println(myObj.name); // error\u00a0\n\u00a0 }\n}\nRun Example \u00bb\nIf the variable was declared as\npublic\n, we would expect the following output:\nJohn\nHowever, as we try to access a\nprivate\nvariable, we get an error:\nMyClass.java:4: error: name has private access in Person\nmyObj.name = \"John\";\n^\nMyClass.java:5: error: name has private access in Person\nSystem.out.println(myObj.name);\n^\n2 errors\nInstead, we use the\ngetName()\nand\nsetName()\nmethods to access and update the variable:\nExample\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Person myObj = new Person();\n\u00a0\u00a0\u00a0 myObj.setName(\"John\"); // Set the value of the name variable to \"John\"\n\u00a0\u00a0\u00a0 System.out.println(myObj.getName());\n\u00a0 }\n}\n\n// Outputs \"John\"\n\nWhy Encapsulation?\nBetter control of class attributes and methods\nClass attributes can be made\nread-only\n(if you only use the\nget\nmethod), or\nwrite-only\n(if you only use the\nset\nmethod)\nFlexible: the programmer can change one part of the code without affecting other parts\nIncreased security of data\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2058772b-5f9a-4e2c-bb6c-7690353422c0",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ddcd1896-40bc-4e0b-9e0c-1efd05f41710",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "20a68834-a9b5-4075-a5db-0dee78899243",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is data?",
      "options": [
        "possible to access them if we provide public\nget\nand\nset\nmethods",
        "None of the above.",
        "None of the above.",
        "hidden \nfrom users"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of data is 'hidden \nfrom users'."
    },
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "hidden \nfrom users",
        "None of the above.",
        "possible to access them if we provide public\nget\nand\nset\nmethods"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it is 'possible to access them if we provide public\nget\nand\nset\nmethods'."
    }
  ],
  "summary": "This tutorial covers JavaEncapsulation concepts and techniques. You'll learn how to use JavaEncapsulation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaEncapsulation and how to apply it in your projects."
}