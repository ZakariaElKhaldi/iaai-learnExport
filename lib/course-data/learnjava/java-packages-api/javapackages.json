{
  "id": "6474c6e0-7a5a-44ca-be03-6a0a1b66ea5d",
  "title": "JavaPackages",
  "slug": "javapackages",
  "metadata": {
    "description": "Learn about JavaPackages with clear explanations and practical examples.",
    "keywords": [
      "package",
      "java",
      "class",
      "import",
      "example",
      "packages",
      "scanner",
      "name",
      "mypackageclass",
      "util"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Packages / API"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nPackages",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Java\nPackages\n\nJava Packages",
      "content": "& API\nA package in Java is used to group related classes. Think of it as\na folder in a file directory\n. We use packages to avoid name conflicts, and \nto write a better maintainable code. Packages are divided into two categories:\nBuilt-in Packages (packages from the Java API)\nUser-defined Packages (create your own packages)\nBuilt-in Packages\nThe Java API is a library of prewritten classes, that are free to use, included in the\nJava Development Environment.\nThe library contains components for managing input, database programming, and much much \nmore. The complete list can be found at Oracles website:\nhttps://docs.oracle.com/javase/8/docs/api/\n.\nThe library is divided into\npackages\nand\nclasses\n. \nMeaning you can either import a single class (along with its methods and \nattributes), or a whole package that contain \nall the classes that belong to the specified package.\nTo use a class or a package from the library, you need to use the\nimport\nkeyword:\nSyntax\nimport\npackage\n.\nname\n.\nClass\n;   // Import a single class\nimport\npackage\n.\nname\n.*;   // Import the whole package\nImport a Class\nIf you find a class you want to use, for example, the\nScanner\nclass,\nwhich is used to get \nuser input\n, write the following code:\nExample\nimport java.util.Scanner;\nIn the example above,\njava.util\nis a package, while\nScanner\nis a class of \nthe\njava.util\npackage.\nTo use the\nScanner\nclass, create an object of the class and use any of the available methods found in the\nScanner\nclass documentation. \nIn our example, we will use the\n\nmethod, which is used to read a \ncomplete line:\nExample\nUsing the\nScanner\nclass to get user input:\nimport java.util.Scanner;\n\nclass MyClass {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 Scanner myObj = new Scanner(System.in);\n\u00a0\u00a0\u00a0 System.out.println(\"Enter username\");\n\n\u00a0\u00a0\u00a0 String userName = myObj.\n\u00a0\u00a0\u00a0 System.out.println(\"Username is: \" + userName);\n\u00a0 }\n}\nRun Example \u00bb\nImport a Package\nThere are many packages to choose from. In the \nScanner\nclass from the\njava.util\npackage. This package also contains date and time \nfacilities, random-number generator and other utility classes.\nTo import a whole package, end the sentence with an asterisk sign (\n*\n). \nThe following example \nwill import ALL the classes in the\njava.util\npackage:\nExample\nimport java.util.*;\nRun Example \u00bb\nUser-defined Packages\nTo create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:\nExample\n\u2514\u2500\u2500 root\n  \u2514\u2500\u2500 mypack\n    \u2514\u2500\u2500 MyPackageClass.java\nTo create a package, use the\npackage\nkeyword:\nMyPackageClass.java\npackage mypack;\nclass MyPackageClass {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 System.out.println(\"This is my package!\");\n\u00a0 }\n}\nRun Example \u00bb\nSave the file as\nMyPackageClass.java\n, and compile it:\nC:\\Users\\\nYour Name\n>javac MyPackageClass.java\nThen compile the package:\nC:\\Users\\\nYour Name\n>javac -d . MyPackageClass.java\nThis forces the compiler to create the \"mypack\" package.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "-d\nkeyword specifies the destination for where to save the class file. You \n  can use any directory name, like c:/user (windows), or, if you want to keep \n  the package within the same directory, you can use the dot sign \"\n.\n\", like in \n  the example above.\nNote:\nThe package name should be written in lower case to avoid conflict with class names.\nWhen we compiled the package in the example above, a new folder was created, called \"mypack\".\nTo run the\nMyPackageClass.java\nfile, write the following:\nC:\\Users\\\nYour Name\n>java mypack.MyPackageClass\nThe output will be:\nThis is my package!\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "C:\\Users\\\nYour Name\n>javac MyPackageClass.java",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "C:\\Users\\\nYour Name\n>javac -d . MyPackageClass.java",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "C:\\Users\\\nYour Name\n>java mypack.MyPackageClass",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\nYour Name\n# TODO: Complete this line",
      "solution": "C:\\Users\\\nYour Name\n>javac MyPackageClass.java"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\nYour Name\n# TODO: Complete this line",
      "solution": "C:\\Users\\\nYour Name\n>javac -d . MyPackageClass.java"
    }
  ],
  "related_topics": [
    {
      "id": "07200270-7daa-43dc-87b9-cac577936777",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c794d77e-198b-4bd1-8b81-e7658aaf9ad9",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "507f2b01-69f5-46cf-802f-f90167a80cd0",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is API\nA package in Java?",
      "options": [
        "divided into two categories:\nBuilt-in Packages (packages from the Java API)\nUser-defined Packages (create your own packages)\nBuilt-in Packages\nThe Java API is a library of prewritten classes",
        "used to group related classes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of API\nA package in Java is 'used to group related classes'."
    },
    {
      "question": "What is Packages?",
      "options": [
        "None of the above.",
        "divided into two categories:\nBuilt-in Packages (packages from the Java API)\nUser-defined Packages (create your own packages)\nBuilt-in Packages\nThe Java API is a library of prewritten classes",
        "used to group related classes",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Packages is 'divided into two categories:\nBuilt-in Packages (packages from the Java API)\nUser-defined Packages (create your own packages)\nBuilt-in Packages\nThe Java API is a library of prewritten classes'."
    }
  ],
  "summary": "This tutorial covers JavaPackages concepts and techniques. You'll learn how to use JavaPackages effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaPackages and how to apply it in your projects."
}