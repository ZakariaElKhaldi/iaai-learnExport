{
  "id": "6b3ad30a-614f-4393-9e7e-2131765a8a44",
  "title": "JavaInner Classes",
  "slug": "javainner-classes",
  "metadata": {
    "description": "Learn about JavaInner Classes with clear explanations and practical examples.",
    "keywords": [
      "class",
      "outerclass",
      "innerclass",
      "inner",
      "public",
      "main",
      "static",
      "myouter",
      "myinner",
      "access"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Inner Classes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nInner Classes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Inner Classes\nIn Java, it is also possible to nest classes (a class within a class). The purpose \nof nested classes is to group classes that belong together, which makes your code more readable and maintainable.\nTo access the inner class, create an object of the outer class, and then create an object of the inner class:\nExample\nclass OuterClass {\n\u00a0 int x = 10;\n\nclass InnerClass {\n\u00a0\u00a0\u00a0 int y = 5;\n\u00a0 }\n}\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 OuterClass myOuter = new OuterClass();\n\u00a0\u00a0\u00a0 OuterClass.InnerClass myInner = myOuter.new InnerClass();\n\u00a0\u00a0\u00a0 System.out.println(myInner.y + myOuter.x);\n\u00a0 }\n}\n\n// Outputs 15 (5 + 10)\n\nPrivate Inner Class\nUnlike a \"regular\" class, an inner class can be\nprivate\nor\nprotected\n. \nIf you don't want outside objects to access the inner class, declare \nthe class as\nprivate\n:\nExample\nclass OuterClass {\n\u00a0 int x = 10;\nprivate\nclass InnerClass {\n\u00a0\u00a0\u00a0 int y = 5;\n\u00a0 }\n}\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 OuterClass myOuter = new OuterClass();\n\u00a0\u00a0\u00a0 OuterClass.InnerClass myInner = myOuter.new InnerClass();\n\u00a0\u00a0\u00a0 System.out.println(myInner.y + myOuter.x);\n\u00a0 }\n}\nIf you try to access a private inner class from an outside class, an error occurs:\nMain.java:13: error: OuterClass.InnerClass has private access in OuterClass\nOuterClass.InnerClass myInner = myOuter.new InnerClass();\n^\n\nStatic Inner Class\nAn inner class can also be\nstatic\n, which means that you can access it without \ncreating an object of the outer class:\nExample\nclass OuterClass {\n\u00a0 int x = 10;\n\nstatic class InnerClass {\n\u00a0\u00a0\u00a0 int y = 5;\n\u00a0 }\n}\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 OuterClass.InnerClass myInner = new OuterClass.InnerClass();\n\u00a0\u00a0\u00a0 System.out.println(myInner.y);\n\u00a0 }\n}\n\n// Outputs 5\n\nNote:\njust like\nstatic\nattributes and methods, a\nstatic\ninner class does not have access to members of the outer class.\nAccess Outer Class From Inner Class\nOne advantage of inner classes, is that they can access attributes and methods of the outer class:\nExample\nclass OuterClass {\n\u00a0 int x = 10;\n\nclass InnerClass {\n\u00a0\u00a0\u00a0 public int myInnerMethod() {\n\u00a0\u00a0\u00a0\u00a0\u00a0 return x;\n\u00a0\u00a0\u00a0 }\n\u00a0 }\n}\n\npublic class Main {\n\u00a0 public static void main(String[] args) {\n\u00a0\u00a0\u00a0 OuterClass myOuter = new OuterClass();\n\u00a0\u00a0\u00a0 OuterClass.InnerClass myInner = myOuter.new InnerClass();\n\u00a0\u00a0\u00a0 System.out.println(myInner.myInnerMethod());\n\u00a0 }\n}\n\n// Outputs 10\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "602c51ab-b5e8-4509-b111-b327013ac353",
      "title": "Advanced Java Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "13e53fe4-a00a-4a77-9adc-6e58c8fabd43",
      "title": "Java Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "0bd3b9a2-f083-4820-ada3-f672397f252b",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "also possible to nest classes (a class within a class)",
        "to group classes that belong together",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it is 'also possible to nest classes (a class within a class)'."
    },
    {
      "question": "What is The purpose \nof nested classes?",
      "options": [
        "None of the above.",
        "also possible to nest classes (a class within a class)",
        "to group classes that belong together",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The purpose \nof nested classes is 'to group classes that belong together'."
    }
  ],
  "summary": "This tutorial covers JavaInner Classes concepts and techniques. You'll learn how to use JavaInner Classes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaInner Classes and how to apply it in your projects."
}