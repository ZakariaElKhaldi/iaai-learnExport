{
  "id": "c2c45bef-dcf1-4381-b096-7255e91a4253",
  "title": "Java Stringformat()Method",
  "slug": "java-stringformatmethod",
  "metadata": {
    "description": "Learn about Java Stringformat()Method with clear explanations and practical examples.",
    "keywords": [
      "string",
      "format",
      "result",
      "number",
      "representation",
      "digits",
      "example",
      "system",
      "println",
      "date"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 7,
    "category": "LearnJava",
    "subcategory": "format()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Java String\nformat",
      "content": "()\nMethod\n\nExample\nReturn a formatted string:\nString myStr = \"Hello %s! One kilobyte is %,d bytes.\";\nString result = String.format(myStr, \"World\", 1024);\nSystem.out.println(result);\n\nNote:\nYou will find more \"\nDefinition and Usage\nThe\nformat()\nmethod returns a formatted string using a locale, format and additional arguments.\nIf a locale is not passed to this method then the locale given by\nLocale.getDefault()\nis used.\nData from the additional arguments is formatted and written into placeholders in the format string, which are marked by a % symbol. The way in which arguments are formatted depends on the sequence of characters that follows the % symbol.\nPlaceholders\nThe placeholders have the form\n%[arg$][flags][width][.precision]conversion\n. The components in [square brackets] are optional.\nAn explanation of each of the components:\narg$\n- Optional. A number followed by a $ sign which indicates which of the additional arguments to use, argument numbers start at 1. This can be replaced with a\n<\nwhich specifies that the argument from the \nflags\n- Optional. A sequence of any of the following characters:\n-\n- Makes the output left-justified by adding any padding spaces to the right instead of to the left.\n#\n- Shows an alternate representation of the formatted data depending on the conversion.\n+\n- Causes positive numbers to always be prefixed with \"+\".\n- (A space character) This prefixes a space to positive numbers, primarily so that the digits can be lined up with the digits of negative numbers.\n0\n- Pads numbers with zeroes on the left.\n,\n- Groups digits (for example by thousands) and puts separators between the groups. This is affected by the locale.\n(\n- Encloses negative numbers in parentheses.\nwidth\n- Optional. A whole number specifying the minimum number of characters that the output should occupy. If necessary spaces are added to the right to reach this number, or to the left if the\n-\nflag is used.\n.precision\nOptional. A\n.\nfollowed by a whole number indicating how many decimal digits to show in the formatted data.\nconversion\n- Required. A character which indicates how an argument's data should be represented. If the character is uppercase the data will be formatted in uppercase where possible. The list of possible characters is shown in the table below.\nList of conversions\nCharacter\nConversion\nDescription\n%\nPercent\nDisplays a literal \"%\" character in the output.\nn\nLine break\nDisplays a line break in the output.\nb\nor\nB\nBoolean\nDisplays the boolean value of an argument as \"true\" or \"false\". If \"B\" is used then it displays \"TRUE\" or \"FALSE\" instead.\nh\nor\nH\nUnsigned hexadecimal integer\nRepresents an argument's binary data as an unsigned hexadecimal integer. If \"H\" is used then digits A to F are shown in uppercase.\nNote:\nFor any data other than positive integers this does not represent its real value.\ns\nor\nS\nString\nDisplays the default string representation of the argument. If \"S\" is used then the string will be converted to uppercase where possible.\nc\nor\nC\nUnicode character\nDisplays a unicode character representation of the argument. For whole numbers, this is the unicode character that corresponds to the number. If \"C\" is used then the character will be converted to uppercase where possible.\nd\nDecimal integer\nRepresents a whole number as a decimal integer.\no\nOctal integer\nRepresents a whole number as an octal integer. The \"#\" flag will prefix the number with \"0\".\nx\nor\nX\nHexadecimal integer\nRepresents a whole number as a hexadecimal integer. The \"#\" flag will prefix the number with \"0x\". If \"X\" is used then digits A to F and the letter X are shown in uppercase.\ne\nor\nE\nScientific notation\nRepresents a floating point number in scientific notation. If \"E\" is used then the letter \"E\" of the representation will be uppercase. The \"#\" flag will force a decimal point even if there are no decimal digits.\nf\nFloating point number\nRepresents a floating point number. The \"#\" flag will force a decimal point even if there are no decimal digits.\ng\nor\nG\nGeneral number\nDisplays the shortest representation between\nf\nand\ne\nor\nE\nfor a floating point number.\na\nor\nA\nHexadecimal floating point number\nDisplay a floating point number's internal representation with hexadecimal digits.\nt\nor\nT\nTime or date\nDisplays a formatted date or time. The t or T must be followed by one more character indicating how the date or time should be formatted. If \"T\" is used then text parts of a date or time such as \"JANUARY\" will be uppercase.\nThe following characters can be used for date and time formatting:\nH - 24-hour format of an hour (00 to 23)\nI - 12-hour format of an hour (01 to 12)\nk - 24-hour format of an hour (0 to 23)\nl (lowercase 'L') - 12-hour format of an hour (1 to 12)\nM - Minutes with leading zeros (00 to 59)\nS - Seconds with leading zeros (00 to 59) (The value 60 may occur for leap seconds)\nL - Milliseconds with leading zeroes (000 to 999)\nN - Nanoseconds with leading zeroes (000000000 to 999999999)\np - \"am\", \"pm\", \"AM\" or \"PM\" to indicate morning or afternoon\nz - Difference to Greenwich time (Example: -0800)\nZ - Timezone abbreviations (Examples: EST, MDT)\ns - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nQ - The milliseconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nB - A full textual representation of a month (January through December)\nb or h - A short textual representation of a month (three letters)\nA - A full textual representation of a day (Example: Monday)\na - A short textual representation of a day (Example: Mon)\nC - The first two digits of the year (For 1970, \"19\" would be shown)\nY - A four digit representation of a year\ny - A two digit representation of a year\nj - The day of the year with leading zeroes (001 to 366)\nm - A numeric representation of a month (01 to 12)\nd - The day of the month (01 to 31)\ne - The day of the month without leading zeros (1 to 31)\nR - The time in 24-hour format (Example: 21:30)\nT - The time in 24-hour format with seconds (Example: 21:30:02)\nr - The time in 12-hour format with seconds (Example: 09:30:02 PM) (\"AM\" and \"PM\" are always uppercase)\nD - Date representation as month/day/year (Example: 12/17/23)\nF - Date representation as year-month-day (Example: 2023-12-17)\nc - Full date and time (Example: Thu Mar 28 10:51:00 EDT 2024)\nSyntax\nOne of the following:\npublic static String format(Locale\nlocale\n, String\nformat\n, Object...\nargs\n)\npublic static String format(String\nformat\n, Object...\nargs\n)\nParameter Values\nParameter\nDescription\nlocale\nOptional. A locale used to determine some of the formatting, such as which characters are used for decimal points and grouping separators.\nformat\nRequired. A string to be returned which can have placeholders for the additional arguments indicating how to format them.\nargs\nOptional. Any number of additional arguments to the method, their values can be formatted and displayed in the returned string.\nTechnical Details\nReturns:\nA\nString\nvalue formatted using the specified locale, format and arguments.\nThrows:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "IllegalFormatException",
      "content": "- if the format string contains an invalid placeholder or a placeholder isn't compatible with the data type of the argument.\nJava version:\n1.5\nMore Examples\nExample\nA placeholder which uses all of the components:\nString result = String.format(\"%2$,3.2f %1$s\", \"meters\", 1260.5052);\nSystem.out.println(result);\nThis is how each part of the placeholder\n%2$,3.2f\nworks:\n2$\nindicates that the value of the second argument is used\n,\nindicates that digits should be grouped (usually by thousands)\n3\nindicates that the representation of the data should be at least 3 characters long\n.2\nindicates that there should be two digits after the decimal point\nf\nindicates that the data is being represented as a floating point number\n\nExample\nUse arguments in a different order:\nString result = String.format(\"%3$c %2$c %1$c\", 'a', 'b', 'c');\nSystem.out.println(result);\n\nExample\nFormat a floating point number:\ndouble myNumber = 123456.78;\nString result;\n\n// Default\nresult = String.format(\"%f\", myNumber);\nSystem.out.println(result);\n\n// Two decimal digits\nresult = String.format(\"%.2f\", myNumber);\nSystem.out.println(result);\n\n// No decimal digits\nresult = String.format(\"%.0f\", myNumber);\nSystem.out.println(result);\n\n// No decimal digits but keep the decimal point\nresult = String.format(\"%#.0f\", myNumber);\nSystem.out.println(result);\n\n// Group digits\nresult = String.format(\"%,.2f\", myNumber);\nSystem.out.println(result);\n\n// Scientific notation with two digits of precision\nresult = String.format(\"%.2e\", myNumber);\nSystem.out.println(result);\n\nExample\nFormat a date from a Unix timestamp:\nlong date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970)\nString result\n\n// Time\nresult = String.format(\"%tl:%<tM %<tp\", date);\nSystem.out.println(result);\n\n// Month and day\nresult = String.format(\"%tB %<te\", date);\nSystem.out.println(result);\n\n// Full date representation\nresult = String.format(\"%tc\", date);\nSystem.out.println(result);\n\nExample\nRepresent characters from their unicode code points:\nString result;\n\n// Represent characters from their unicode code points\nresult = String.format(\"%c%c%c%c%c\", 72, 101, 108, 108, 111);\nSystem.out.println(result);\n\n// Force unicode characters to uppercase\nresult = String.format(\"%C%C%C%C%C\", 72, 101, 108, 108, 111);\nSystem.out.println(result);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "80865d41-e142-45ce-ae63-8d4a43c54343",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8e7134d5-21ce-42c2-a0c3-3ea4439c587e",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5939ff57-a7a7-469e-823f-1114733500f9",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is One kilobyte?",
      "options": [
        "%",
        "None of the above.",
        "not passed to this method then the locale given by\nLocale",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of One kilobyte is '%'."
    },
    {
      "question": "What is If a locale?",
      "options": [
        "%",
        "not passed to this method then the locale given by\nLocale",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of If a locale is 'not passed to this method then the locale given by\nLocale'."
    }
  ],
  "summary": "This tutorial covers Java Stringformat()Method concepts and techniques. You'll learn how to use Java Stringformat()Method effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Java Stringformat()Method and how to apply it in your projects."
}