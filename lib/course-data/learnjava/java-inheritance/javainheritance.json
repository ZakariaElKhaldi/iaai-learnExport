{
  "id": "db6ac43d-4500-4739-8949-1826bf326d3d",
  "title": "JavaInheritance",
  "slug": "javainheritance",
  "metadata": {
    "description": "Learn about JavaInheritance with clear explanations and practical examples.",
    "keywords": [
      "class",
      "vehicle",
      "mycar",
      "java",
      "final",
      "inheritance",
      "inherit",
      "methods",
      "extends",
      "brand"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nInheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Java Inheritance (Subclass and Superclass)\nIn Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:\nsubclass\n(child) - the class that inherits from another class\nsuperclass\n(parent) - the class being inherited from\nTo inherit from a class, use the\nextends\nkeyword.\nIn the example below, the\nCar\nclass \n(subclass) inherits the attributes and methods from the\nVehicle\nclass \n(superclass):\nExample\nclass Vehicle {\n\u00a0 protected String brand = \"Ford\";\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 // Vehicle attribute\n\u00a0 public void honk() {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Vehicle method\n\u00a0\u00a0\u00a0 System.out.println(\"Tuut, tuut!\");\n\u00a0 }\n}\n\nclass Car extends Vehicle {\n\u00a0 private String modelName = \"Mustang\";\u00a0\u00a0\u00a0 // Car attribute\n\u00a0 public static void main(String[] args) {\n\n// Create a myCar object\n\u00a0\u00a0\u00a0 Car myCar = new Car();\n\n// Call the honk() method (from the Vehicle class) on the myCar object\n\u00a0\u00a0\u00a0 myCar.honk();\n\n// Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class\n\u00a0\u00a0\u00a0 System.out.println(myCar.brand + \" \" + myCar.modelName);\n\u00a0 }\n}\n\nDid you notice the\nprotected\nmodifier in Vehicle?\nWe set the\nbrand\nattribute in\nVehicle\nto a\nprotected\naccess \nmodifier\n. If it was set to\nprivate\n, the Car class would not be able to access \nit.\nWhy And When To Use \"Inheritance\"?\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.\nTip:\nAlso take a look at the \nPolymorphism\n, which uses inherited methods to perform different tasks.\nThe final Keyword\nIf you don't want other classes to inherit from a class, use the\nfinal\nkeyword:\nIf you try to access a\nfinal\nclass, Java will generate an error:\nfinal class Vehicle {\n  ...\n}\n\nclass Car extends Vehicle {\n  ...\n}\nThe output will be something like this:\nMain.java:9: error: cannot inherit from final Vehicle\nclass Main extends \n  Vehicle {\n^\n1 error)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d40cfafe-05ab-46c8-8735-8cc2e44e5d94",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a02d2bfb-eb61-4be2-b023-3bc911183f7e",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "caef1fce-f1cf-45c5-8c23-0a9211b91e24",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class",
        "possible to inherit attributes and methods from one class to another",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it is 'possible to inherit attributes and methods from one class to another'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "useful for code reusability: reuse attributes and methods of an existing class when you create a new class",
        "None of the above.",
        "possible to inherit attributes and methods from one class to another"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of It is 'useful for code reusability: reuse attributes and methods of an existing class when you create a new class'."
    }
  ],
  "summary": "This tutorial covers JavaInheritance concepts and techniques. You'll learn how to use JavaInheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaInheritance and how to apply it in your projects."
}