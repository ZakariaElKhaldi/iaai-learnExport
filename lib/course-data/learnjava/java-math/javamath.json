{
  "id": "c0fc4e1d-7366-4893-b7ab-7e62131951de",
  "title": "JavaMath",
  "slug": "javamath",
  "metadata": {
    "description": "Learn about JavaMath with clear explanations and practical examples.",
    "keywords": [
      "math",
      "example",
      "random",
      "method",
      "java",
      "methods",
      "value",
      "sqrt",
      "returns",
      "number"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Math"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nMath",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Java Math class has many methods that allows you to perform mathematical tasks on numbers.\nMath.max(\nx,y\n)\nThe\nMath.max(\nx\n,\ny\n)\nmethod can be used to find the highest value of\nx\nand\ny\n:\nExample\nMath.max(5, 10);\n\nMath.min(\nx,y\n)\nThe\nMath.min(\nx\n,\ny\n)\nmethod can be used to find the lowest value of\nx\nand\ny\n:\nExample\nMath.min(5, 10);\n\nMath.sqrt(\nx\n)\nThe\nMath.sqrt(\nx\n)\nmethod returns the square root of\nx\n:\nExample\nMath.sqrt(64);\n\nMath.abs(\nx\n)\nThe\nMath.abs(\nx\n)\nmethod returns the absolute (positive) value of\nx\n:\nExample\nMath.abs(-4.7);\n\nRandom Numbers\nMath.random()\nreturns a random number between 0.0 (inclusive), and 1.0 (exclusive):\nExample\nMath.random();\n\nTo get more control over the random number, for example, if you only want a random \nnumber between 0 and 100, you can use the following formula:\nExample\nint randomNum = (int)(Math.random() * 101);  // 0 to 100\n\nComplete Math Reference\nFor a complete reference of Math methods, go to our\nJava Math Methods Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b018beab-5ed1-4342-924d-d4d735180f6c",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c81ea3b9-d563-49c9-9fc6-ded675a1ddb8",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "dbca3699-5b13-4a26-a4bb-68928f4e7e89",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this java feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this java feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaMath concepts and techniques. You'll learn how to use JavaMath effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaMath and how to apply it in your projects."
}