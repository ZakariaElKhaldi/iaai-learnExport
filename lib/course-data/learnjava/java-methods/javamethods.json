{
  "id": "f3d28eb3-4a50-4e4f-979f-bbe1a49ad119",
  "title": "JavaMethods",
  "slug": "javamethods",
  "metadata": {
    "description": "Learn about JavaMethods with clear explanations and practical examples.",
    "keywords": [
      "method",
      "mymethod",
      "main",
      "executed",
      "methods",
      "class",
      "static",
      "void",
      "example",
      "public"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "Java Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nMethods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A\nmethod\nis a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a method.\nMethods are used to perform certain actions, and they are also known as\nfunctions\n.\nWhy use methods? To reuse code: define the code once, and use \nit many times.\nCreate a Method\nA method must be declared within a class. It is defined \nwith the name of the method, followed by parentheses\n()\n. Java provides some pre-defined methods, such as\nSystem.out.println()\n, but you can also create your own methods to perform certain actions:\nExample\nCreate a method inside Main:\npublic class Main {\n\u00a0 static void myMethod() {\n\u00a0\u00a0\u00a0 // code to be executed\n\u00a0 }\n}\nExample Explained\nmyMethod()\nis the name of the method\nstatic\nmeans that the method belongs to the \nMain class and not an object of the Main class. You will learn more about objects and how to access methods through objects later in this tutorial.\nvoid\nmeans that this method does not have a \nreturn value. You will learn more about return values later in this chapter\nCall a Method\nTo call a method in Java, write the method's name followed by two \nparentheses\n()\nand a semicolon\n;\nIn the following example,\nmyMethod()\nis used to print a text (the action), when it is called:\nExample\nInside\nmain\n, call the\nmyMethod()\nmethod:\npublic class Main {\n\u00a0 static void myMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"I just got executed!\");\n\u00a0 }\n\npublic static void main(String[] args) {\n\u00a0\u00a0\u00a0 myMethod();\n\u00a0 }\n}\n\n// Outputs \"I just got executed!\"\n\nA method can also be called multiple times:\nExample\npublic class Main {\n\u00a0 static void myMethod() {\n\u00a0\u00a0\u00a0 System.out.println(\"I just got executed!\");\n\u00a0 }\n\npublic static void main(String[] args) {\n\u00a0\u00a0\u00a0 myMethod();\n\u00a0\u00a0\u00a0 myMethod();\n\u00a0\u00a0\u00a0 myMethod();\n\u00a0 }\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!\n\nIn the \nMethod Parameters\n, you will learn how to pass data (parameters) into a method.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "dde5d417-f3b2-41e4-be99-78144d6debca",
      "title": "Advanced Java Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "eef17d3a-0667-45f3-be14-c38adec7436a",
      "title": "Java Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "e01232c6-c345-485d-82e0-7dff5b307758",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Java\nMethods\n\nA\nmethod\nis a block of code which only runs when it?",
      "options": [
        "None of the above.",
        "used to perform certain actions",
        "None of the above.",
        "called"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Java\nMethods\n\nA\nmethod\nis a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Methods?",
      "options": [
        "None of the above.",
        "used to perform certain actions",
        "called",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Methods is 'used to perform certain actions'."
    }
  ],
  "summary": "This tutorial covers JavaMethods concepts and techniques. You'll learn how to use JavaMethods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaMethods and how to apply it in your projects."
}