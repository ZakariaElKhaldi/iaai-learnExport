{
  "id": "86ee7783-6b25-47de-b25d-f1ee7f38e801",
  "title": "JavasuperKeyword",
  "slug": "javasuperkeyword",
  "metadata": {
    "description": "Learn about JavasuperKeyword with clear explanations and practical examples.",
    "keywords": [
      "super",
      "superclass",
      "keyword",
      "call",
      "animal",
      "public",
      "animalsound",
      "java",
      "class",
      "void"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Java Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJava",
    "subcategory": "super"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Java\nsuper\nKeyword",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Example\nUsing\nsuper\nto call the superclass of\nDog\n(subclass):\nclass Animal { // Superclass (parent)\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 System.out.println(\"The animal makes a sound\");\n\u00a0 }\n}\n\nclass Dog extends Animal { // Subclass (child)\n\u00a0 public void animalSound() {\n\u00a0\u00a0\u00a0 super.animalSound(); // Call the superclass method\n\u00a0\u00a0\u00a0 System.out.println(\"The dog says: bow wow\");\n\u00a0 }\n}\n\npublic class Main {\n\u00a0 public static void main(String args[]) {\n\u00a0\u00a0\u00a0 Animal myDog = new Dog(); // Create a Dog object\n\u00a0\u00a0\u00a0 myDog.animalSound(); // Call the method on the Dog object\n\u00a0 }\n}\n\nDefinition and Usage\nThe\nsuper\nkeyword refers to superclass \n(parent) objects.\nIt is used to call superclass methods, and to access the superclass \nconstructor.\nThe most common use of the\nsuper\nkeyword is to eliminate \nthe confusion between superclasses and subclasses that have methods with the \nsame name.\nTo understand the\nsuper\nkeyword, you should have a basic understanding of\nInheritance\nand\nPolymorphism\n.\nRelated Pages\nRead more about inheritance (subclasses and superclasses) in our\nJava Inheritance Tutorial\n.\nRead more about polymorphism in our\nJava Polymorphism Tutorial\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your java function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1e05f2ba-6839-4014-95e2-9fde4299f792",
      "title": "Java Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "28eb2d10-c9ad-4c30-ba63-3ba9b7cf69dd",
      "title": "Java Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c68d0dd2-792a-42a5-b801-ebee3db89a7b",
      "title": "Java Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "to eliminate \nthe confusion between superclasses and subclasses that have methods with the \nsame name",
        "used to call superclass methods",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of It is 'used to call superclass methods'."
    },
    {
      "question": "What is The most common use of the\nsuper\nkeyword?",
      "options": [
        "to eliminate \nthe confusion between superclasses and subclasses that have methods with the \nsame name",
        "used to call superclass methods",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The most common use of the\nsuper\nkeyword is 'to eliminate \nthe confusion between superclasses and subclasses that have methods with the \nsame name'."
    }
  ],
  "summary": "This tutorial covers JavasuperKeyword concepts and techniques. You'll learn how to use JavasuperKeyword effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavasuperKeyword and how to apply it in your projects."
}