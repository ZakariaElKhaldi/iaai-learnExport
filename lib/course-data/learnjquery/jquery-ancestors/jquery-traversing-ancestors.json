{
  "id": "3a0c07eb-2e44-4f2c-b19b-5d3900d45892",
  "title": "jQuery Traversing -Ancestors",
  "slug": "jquery-traversing-ancestors",
  "metadata": {
    "description": "Learn about jQuery Traversing -Ancestors with clear explanations and practical examples.",
    "keywords": [
      "c",
      "jquery",
      "span",
      "element",
      "parent",
      "method",
      "example",
      "returns",
      "elements",
      "traversing",
      "ancestors"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnjQuery",
    "subcategory": "jQuery Ancestors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "jQuery Traversing -\nAncestors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "With jQuery you can traverse up the DOM tree to \nfind ancestors of an element.\nAn ancestor is a parent, grandparent, great-grandparent, and so \non.\nTraversing Up the DOM Tree\nThree useful jQuery methods for traversing up the DOM tree are:\nparent()\nparents()\nparentsUntil()\njQuery parent() Method\nThe\nparent()\nmethod returns the direct parent element of the selected element.\nThis method only traverse a single level up the DOM tree.\nThe following example returns the direct parent element of each\n<span>\nelements:\nExample\n$(document).ready(function(){\n$(\"span\").parent();\n});\n\njQuery parents() Method\nThe\nparents()\nmethod returns all ancestor elements of the selected element, \nall the way up to the document's root element (\n<html>\n).\nThe following example returns all ancestors of all\n<span>\nelements:\nExample\n$(document).ready(function(){\n$(\"span\").parents();\n});\n\nYou can also use an optional parameter to filter the search for ancestors.\nThe following example returns all ancestors of all\n<span>\nelements that are\n<ul>\nelements:\nExample\n$(document).ready(function(){\n$(\"span\").parents(\"ul\");\n});\n\njQuery parentsUntil() Method\nThe\nparentsUntil()\nmethod returns all ancestor elements between two given \narguments.\nThe following example returns all\u00a0ancestor elements \nbetween a\n<span>\nand a\n<div>\nelement:\nExample\n$(document).ready(function(){\n$(\"span\").parentsUntil(\"div\");\n});\n\njQuery Exercises\nTest Yourself With Exercises\nExercise:\nUse a jQuery method to get the direct parent of a <span> element.\n$(\"span\").\n();\nSubmit Answer \u00bb\nStart the Exercise\njQuery Traversing Reference\nFor a complete overview of all jQuery Traversing methods, please go to our\njQuery Traversing Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "$(document).ready(function(){\n$(\"span\").parent();\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "$(document).ready(function(){\n$(\"span\").parents();\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "$(document).ready(function(){\n$(\"span\").parents(\"ul\");\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "$(document).ready(function(){\n$(\"span\").parentsUntil(\"div\");\n});",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "$(document).ready(function(){\n$(\"span\").parent();\n# TODO: Complete this line",
      "solution": "$(document).ready(function(){\n$(\"span\").parent();\n});"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "$(document).ready(function(){\n$(\"span\").parents();\n# TODO: Complete this line",
      "solution": "$(document).ready(function(){\n$(\"span\").parents();\n});"
    }
  ],
  "related_topics": [
    {
      "id": "ed75c73f-98a0-48c6-8b9f-9becac868051",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "628ca580-8267-47a1-9f0b-274806aceddb",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b946b826-7053-4dd7-b097-528f22251519",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is An ancestor?",
      "options": [
        "Not a An ancestor.",
        "None of the above.",
        "None of the above.",
        "a parent"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of An ancestor is 'a parent'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers jQuery Traversing -Ancestors concepts and techniques. You'll learn how to use jQuery Traversing -Ancestors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of jQuery Traversing -Ancestors and how to apply it in your projects."
}