{
  "id": "cd4f6434-3e0f-471c-b37f-09386262dc96",
  "title": "JavaScriptScope",
  "slug": "javascriptscope",
  "metadata": {
    "description": "Learn about JavaScriptScope with clear explanations and practical examples.",
    "keywords": [
      "variables",
      "function",
      "scope",
      "global",
      "carname",
      "javascript",
      "declared",
      "code",
      "block",
      "functions"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Scope"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nScope",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Scope determines the accessibility (visibility) of variables.\nJavaScript variables have 3 types of scope:\nBlock scope\nFunction scope\nGlobal scope\nBlock Scope\nBefore ES6 (2015), JavaScript variables had only\nGlobal Scope\nand\nFunction Scope\n.\nES6 introduced two important new JavaScript keywords:\nlet\nand\nconst\n.\nThese two keywords provide\nBlock Scope\nin JavaScript.\nVariables declared inside a { } block cannot be accessed \nfrom outside the block:\nExample\n{\nlet x = 2;\n}\n// x can NOT be used here\nVariables declared with the\nvar\nkeyword can NOT have block scope.\nVariables declared inside a { } block can be accessed from \noutside the block.\nExample\n{\nvar x = 2;\n}\n// x CAN be used here\nLocal Scope\nVariables declared within a JavaScript function, are\nLOCAL\nto the function:\nExample\n// code here can NOT use carName\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n// code here can NOT use carName\n\nLocal\nvariables have\nFunction Scope\n:\nThey can only be accessed from within the function.\nSince local variables are only recognized inside their functions, variables with the same name can be used in different functions.\nLocal variables are created when a function starts, and deleted when the function is completed.\nFunction Scope\nJavaScript has function scope: Each function creates a new scope.\nVariables defined inside a function are not accessible (visible) from outside the \nfunction.\nVariables declared with\nvar\n,\nlet\nand\nconst\nare \nquite similar when declared inside a function.\nThey all have\nFunction Scope\n:\nfunction myFunction() {\nvar carName = \"Volvo\";\u00a0\u00a0 \n  // Function Scope\n}\nfunction myFunction() {\nlet carName = \"Volvo\";\u00a0\u00a0 // \n  Function Scope\n}\nfunction myFunction() {\nconst carName = \"Volvo\";\u00a0\u00a0 // \n  Function Scope\n}\nGlobal JavaScript Variables\nA variable declared outside a function, becomes\nGLOBAL\n.\nExample\nlet carName = \"Volvo\";\n// code here can use carName\nfunction myFunction() {\n// code here can also use carName\n}\n\nA global variable has\nGlobal Scope\n:\nAll scripts and functions on a web page can access it.\nGlobal Scope\nVariables declared\nGlobally\n(outside any function) have\nGlobal Scope\n.\nGlobal\nvariables can be accessed from anywhere in a JavaScript program.\nVariables declared with\nvar\n,\nlet\nand\nconst\nare \nquite similar when declared outside a block.\nThey all have\nGlobal Scope\n:\nvar x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Global scope\nlet x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Global scope\nconst x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Global scope\nJavaScript Variables\nIn JavaScript, objects and functions are also variables.\nScope determines the accessibility of variables, objects, and functions from \ndifferent parts of the code.\nAutomatically Global\nIf you assign a value to a variable that has not been declared, it will automatically become a\nGLOBAL\nvariable.\nThis code example will declare a global variable\ncarName\n, even if \nthe value is assigned inside a function.\nExample\nmyFunction();\n// code here can use carName\nfunction myFunction() {\ncarName = \"Volvo\";\n}\n\nStrict Mode\nAll modern browsers support running JavaScript in \"Strict Mode\".\nYou will learn more about how to use strict mode in a later chapter of this tutorial.\nIn \"Strict Mode\", undeclared variables are not automatically global.\nGlobal Variables in HTML\nWith JavaScript, the global scope is the JavaScript environment.\nIn HTML, the global scope is the window object.\nGlobal variables defined with the\nvar\nkeyword belong to the window object:\nExample\nvar carName = \"Volvo\";\n// code here \n can use window.carName\n\nGlobal variables defined with the\nlet\nkeyword do not belong to the window object:\nExample\nlet carName = \"Volvo\";\n// code here can not use window.carName\n\nWarning\nDo NOT create global variables unless you intend to.\nYour global variables (or functions) can overwrite window variables (or \nfunctions).\nAny function, including the window object, can overwrite your global \nvariables and functions.\nThe Lifetime of JavaScript Variables\nThe lifetime of a JavaScript variable starts when it is declared.\nFunction (local) variables are deleted when the function is completed.\nIn a web browser, global variables are deleted when you close the browser \nwindow (or tab).\nFunction Arguments\nFunction arguments (parameters) work as local variables inside functions.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "{\nlet x = 2;\n}\n// x can NOT be used here",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "{\nvar x = 2;\n}\n// x CAN be used here",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// code here can NOT use carName\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n// code here can NOT use carName",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function myFunction() {\nvar carName = \"Volvo\";\u00a0\u00a0 \n  // Function Scope\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function myFunction() {\nlet carName = \"Volvo\";\u00a0\u00a0 // \n  Function Scope\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "function myFunction() {\nconst carName = \"Volvo\";\u00a0\u00a0 // \n  Function Scope\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let carName = \"Volvo\";\n// code here can use carName\nfunction myFunction() {\n// code here can also use carName\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "var x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Global scope",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Global scope",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "const x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Global scope",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "myFunction();\n// code here can use carName\nfunction myFunction() {\ncarName = \"Volvo\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "var carName = \"Volvo\";\n// code here \n can use window.carName",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let carName = \"Volvo\";\n// code here can not use window.carName",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "{\n# TODO: Complete this line\n}\n// x can NOT be used here",
      "solution": "{\nlet x = 2;\n}\n// x can NOT be used here"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "{\nvar x = 2;\n}\n# TODO: Complete this line",
      "solution": "{\nvar x = 2;\n}\n// x CAN be used here"
    }
  ],
  "related_topics": [
    {
      "id": "03d296ba-6406-418e-8151-8a1c16d98801",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "41f40b6e-6a66-44b2-b394-41192e846371",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "66bcf388-fd67-4483-9dd9-31bbe0d11c28",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Since local variables?",
      "options": [
        "Not a Since local variables.",
        "None of the above.",
        "None of the above.",
        "only recognized inside their functions"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Since local variables is 'only recognized inside their functions'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptScope concepts and techniques. You'll learn how to use JavaScriptScope effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptScope and how to apply it in your projects."
}