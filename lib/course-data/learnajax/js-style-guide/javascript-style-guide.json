{
  "id": "251b18de-a8b4-437c-9ddf-6648184e5d4b",
  "title": "JavaScript Style Guide",
  "slug": "javascript-style-guide",
  "metadata": {
    "description": "Learn about JavaScript Style Guide with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "names",
      "rules",
      "conventions",
      "html",
      "always",
      "coding",
      "code",
      "spaces",
      "const"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Style Guide"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Style Guide",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Always use the same coding conventions for all your JavaScript \nprojects.\nJavaScript Coding Conventions\nCoding conventions are\nstyle guidelines for programming\n. \nThey typically cover:\nNaming and declaration rules for variables and functions.\nRules for the use of white space, indentation, and comments.\nProgramming practices and principles.\nCoding conventions\nsecure quality\n:\nImprove code readability\nMake code maintenance easier\nCoding conventions can be documented rules for teams to follow, or just be your individual coding practice.\nThis page describes the general JavaScript code conventions used by .\nYou should also read the \nVariable Names\nAt  we use\ncamelCase\nfor identifier names (variables and functions).\nAll names start with a\nletter\n.\nAt the bottom of this page, you will find a wider discussion about naming \nrules.\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ntax = 0.20;\nfullPrice = price + (price * tax);\nSpaces Around Operators\nAlways put spaces around operators ( = + - * / ), and after commas:\nExamples:\nlet x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nCode Indentation\nAlways use 2 spaces for indentation of code blocks:\nFunctions:\nfunction toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}\nDo not use tabs (tabulators) for indentation. Different editors interpret tabs differently.\nStatement Rules\nGeneral rules for simple statements:\nAlways end a simple statement with a semicolon.\nExamples:\nconst cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \n \"blue\"\n};\nGeneral rules for complex (compound) statements:\nPut the opening bracket at the end of the first line.\nUse one space before the opening bracket.\nPut the closing bracket on a new line, without leading spaces.\nDo not end a complex statement with a semicolon.\nFunctions:\nfunction toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}\nLoops:\nfor (let i = 0; i < 5; i++) {\nx += i;\n}\nConditionals:\nif (time < 20) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}\nObject Rules\nGeneral rules for object definitions:\nPlace the opening bracket on the same line as the object name.\nUse colon plus one space between each property and its value.\nUse quotes around string values, not around numeric values.\nDo not add a comma after the last property-value pair.\nPlace the closing bracket on a new line, without \n leading spaces.\nAlways end\u00a0an object definition with a semicolon.\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \n \"blue\"\n};\nShort objects can be written compressed, on one line, using spaces only \nbetween properties, like this:\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nLine Length < 80\nFor readability, avoid lines longer than 80 \ncharacters.\nIf a JavaScript statement does not fit on one line, the best place to break \nit, is after an operator or a comma.\nExample\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly.\";\n\nNaming Conventions\nAlways use the same naming convention for all your code. For example:\nVariable and function names written as\ncamelCase\nGlobal variables written in\nUPPERCASE\n(We don't, but it's \nquite common)\nConstants (like PI) written in\nUPPERCASE\nShould you use\nhyp-hens\n,\ncamelCase\n, or\nunder_scores\nin variable names?\nThis is a question programmers often discuss. The answer depends on who you \nask:\nHyphens in HTML and CSS:\nHTML5 attributes can start with data- (data-quantity, data-price).\nCSS uses hyphens in property-names (font-size).\nHyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.\nUnderscores:\nMany programmers prefer to use underscores (date_of_birth), especially in SQL \ndatabases.\nUnderscores are often used in PHP documentation.\nPascalCase:\nPascalCase is often preferred by C programmers.\ncamelCase:\ncamelCase is used by JavaScript itself, by jQuery, and other JavaScript \nlibraries.\nDo not start names with a $ sign. It will put you in conflict with many JavaScript library names.\nLoading JavaScript in HTML\nUse simple syntax for loading external scripts (the type attribute is not \nnecessary):\n<script src=\"myscript.js\"></script>\nAccessing HTML Elements\nA consequence of using \"untidy\" HTML styles, might result in JavaScript errors.\nThese two JavaScript statements will produce different results:\nconst obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")\nIf possible, use the same naming convention (as JavaScript) in HTML.\nVisit the HTML Style Guide\n.\nFile Extensions\nHTML files should have a\n.html\nextension (\n.htm\nis allowed).\nCSS files should have a\n.css\nextension.\nJavaScript files should have a\n.js\nextension.\nUse Lower Case File Names\nMost web servers (Apache, Unix) are case sensitive about file names:\nlondon.jpg cannot be accessed as London.jpg.\nOther web servers (Microsoft, IIS) are not case sensitive:\nlondon.jpg can be accessed as London.jpg or london.jpg.\nIf you use a mix of upper and lower case, you have to be extremely \nconsistent.\nIf you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.\nTo avoid these problems, always use lower case file names (if possible).\nPerformance\nCoding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.\nIndentation and extra spaces are not significant in small scripts.\nFor code in development, readability should be preferred. Larger production \nscripts should be minimized.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "firstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ntax = 0.20;\nfullPrice = price + (price * tax);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples:",
      "content": "",
      "order": 4,
      "code": "let x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"];",
      "language": "javascript",
      "explanation": "Example of examples:"
    },
    {
      "type": "code_example",
      "title": "Functions:",
      "content": "",
      "order": 5,
      "code": "function toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}",
      "language": "javascript",
      "explanation": "Example of functions:"
    },
    {
      "type": "code_example",
      "title": "Examples:",
      "content": "",
      "order": 6,
      "code": "const cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \n \"blue\"\n};",
      "language": "javascript",
      "explanation": "Example of examples:"
    },
    {
      "type": "code_example",
      "title": "Functions:",
      "content": "",
      "order": 7,
      "code": "function toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}",
      "language": "javascript",
      "explanation": "Example of functions:"
    },
    {
      "type": "code_example",
      "title": "Loops:",
      "content": "",
      "order": 8,
      "code": "for (let i = 0; i < 5; i++) {\nx += i;\n}",
      "language": "javascript",
      "explanation": "Example of loops:"
    },
    {
      "type": "code_example",
      "title": "Conditionals:",
      "content": "",
      "order": 9,
      "code": "if (time < 20) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}",
      "language": "javascript",
      "explanation": "Example of conditionals:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \n \"blue\"\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly.\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "<script src=\"myscript.js\"></script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "const obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "firstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\n# TODO: Complete this line\nfullPrice = price + (price * tax);",
      "solution": "firstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ntax = 0.20;\nfullPrice = price + (price * tax);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = y + z;\n# TODO: Complete this line\n \"Fiat\"];",
      "solution": "let x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"];"
    }
  ],
  "related_topics": [
    {
      "id": "e99c17d6-0d70-4186-8cb0-bf786445051e",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0a6b2c94-aac8-40cc-bd37-e7d8e8ab318f",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ec8cb95f-73bf-402e-93e3-65fc51171762",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Coding Conventions\nCoding conventions?",
      "options": [
        "style guidelines for programming",
        "None of the above.",
        "Not a JavaScript Coding Conventions\nCoding conventions.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Coding Conventions\nCoding conventions is 'style guidelines for programming'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript Style Guide concepts and techniques. You'll learn how to use JavaScript Style Guide effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Style Guide and how to apply it in your projects."
}