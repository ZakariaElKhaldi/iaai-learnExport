{
  "id": "6da70feb-0b40-4eb6-87c7-bbf3773af180",
  "title": "JavaScript Function call()",
  "slug": "javascript-function-call",
  "metadata": {
    "description": "Learn about JavaScript Function call() with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "firstname",
      "method",
      "object",
      "call",
      "person",
      "lastname",
      "fullname",
      "function",
      "const",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Function Call"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Function call()",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Method Reuse\nWith the\ncall()\nmethod, you can write a method that can be used on different \nobjects.\nAll Functions are Methods\nIn JavaScript all functions are object methods.\nIf a function is not a method of a JavaScript object, it is a function of the \nglobal object (see \nThe example below creates an object with 3 \nproperties, firstName, lastName, fullName.\nExample\nconst person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n// This will return \"John Doe\":\nperson.fullName();\n\nIn the example above,\nthis\nrefers to the\nperson object\n.\nthis.firstName\nmeans the\nfirstName\nproperty of\nthis\n.\nSame as:\nthis.firstName\nmeans the\nfirstName\nproperty of\nperson\n.\nWhat is\nthis\n?\nIn JavaScript, the\nthis\nkeyword refers to an\nobject\n.\nThe\nthis\nkeyword refers to\ndifferent objects\ndepending on how it is used:\nIn an object method,\nthis\nrefers to the\nobject\n.\nAlone,\nthis\nrefers to the\nglobal object\n.\nIn a function,\nthis\nrefers to the\nglobal object\n.\nIn a function, in strict mode,\nthis\nis\nundefined\n.\nIn an event,\nthis\nrefers to the\nelement\nthat received the event.\nMethods like\ncall()\n,\napply()\n,\nand\nbind()\ncan refer\nthis\nto\nany object\n.\nNote\nthis\nis not a variable. It is a keyword.\nYou cannot change the value of\nthis\n.\nSee Also:\nThe JavaScript\nthis\nTutorial\nThe JavaScript call() Method\nThe\ncall()\nmethod is a predefined \nJavaScript method.\nIt can be used to invoke (call) a method \nwith an object as an argument (parameter).\nNote\nWith\ncall()\n, an object can use a method belonging to another object.\nThis example calls the\nfullName\nmethod of person, using it on\nperson1\n:\nExample\nconst person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"John Doe\":\nperson.fullName.call(\nperson1\n);\n\nThis example calls the\nfullName\nmethod of person, using it on\nperson2\n:\nExample\nconst person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\"\nperson.fullName.call(\nperson2\n);\n\nThe call() Method with Arguments\nThe\ncall()\nmethod can accept arguments:\nExample\nconst person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.call(person1, \"Oslo\", \"Norway\");\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n// This will return \"John Doe\":\nperson.fullName();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"John Doe\":\nperson.fullName.call(\nperson1\n);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\"\nperson.fullName.call(\nperson2\n);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.call(person1, \"Oslo\", \"Norway\");",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\n# TODO: Complete this line\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n// This will return \"John Doe\":\nperson.fullName();",
      "solution": "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n// This will return \"John Doe\":\nperson.fullName();"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\n# TODO: Complete this line\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"John Doe\":\nperson.fullName.call(\nperson1\n);",
      "solution": "const person = {\nfullName\n: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"John Doe\":\nperson.fullName.call(\nperson1\n);"
    }
  ],
  "related_topics": [
    {
      "id": "888d4649-40cb-486e-afe8-b328736882b6",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a234c3b1-03c2-4a4e-b786-5b2d9ffd3b69",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f1655ef9-657e-4f60-9b30-610c1e24e218",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is All Functions are Methods\nIn JavaScript all functions?",
      "options": [
        "object methods",
        "not a method of a JavaScript object",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of All Functions are Methods\nIn JavaScript all functions is 'object methods'."
    },
    {
      "question": "What is If a function?",
      "options": [
        "not a method of a JavaScript object",
        "object methods",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of If a function is 'not a method of a JavaScript object'."
    }
  ],
  "summary": "This tutorial covers JavaScript Function call() concepts and techniques. You'll learn how to use JavaScript Function call() effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Function call() and how to apply it in your projects."
}