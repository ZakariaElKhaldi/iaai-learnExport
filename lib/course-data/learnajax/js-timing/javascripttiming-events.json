{
  "id": "d532a89a-6a41-4e55-baed-a92940ed63bb",
  "title": "JavaScriptTiming Events",
  "slug": "javascripttiming-events",
  "metadata": {
    "description": "Learn about JavaScriptTiming Events with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "function",
      "window",
      "method",
      "settimeout",
      "setinterval",
      "button",
      "milliseconds",
      "time",
      "execution",
      "myvar"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Timing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nTiming Events",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nJavaScript can be executed in time-intervals.\nThis is called timing events.\nTiming Events\nThe\nwindow\nobject allows execution of code at specified time intervals.\nThese time intervals are called timing events.\nThe two key methods to use with JavaScript are:\nsetTimeout(\nfunction, milliseconds\n)\nExecutes a function, after waiting a specified number of milliseconds.\nsetInterval(\nfunction, milliseconds\n)\nSame as setTimeout(), but repeats the execution \n    of the function continuously.\nThe\nsetTimeout()\nand\nsetInterval()\nare both methods of the HTML DOM Window object.\nThe setTimeout() Method\nwindow.setTimeout(\nfunction\n,\nmilliseconds\n);\nThe\nwindow.setTimeout()\nmethod can be written without the window prefix.\nThe first parameter is a function to be executed.\nThe second parameter indicates the number of milliseconds before execution.\nExample\nClick a button. Wait 3 seconds, and the page will alert \"Hello\":\n<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n<script>\nfunction myFunction() {\nalert('Hello');\n}\n</script>\n\nHow to Stop the Execution?\nThe\nclearTimeout()\nmethod stops the execution of the function \nspecified in setTimeout().\nwindow.clearTimeout(\ntimeoutVariable\n)\nThe\nwindow.clearTimeout()\nmethod can be written without the window prefix.\nThe\nclearTimeout()\nmethod uses the variable \nreturned from\nsetTimeout()\n:\nmyVar = setTimeout(\nfunction\n,\nmilliseconds\n);\nclearTimeout(myVar);\nIf the function has not already been executed, you can stop the execution by calling the\nclearTimeout()\nmethod:\nExample\nSame example as above, but with an added \"Stop\" button:\n<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button>\n<button onclick=\"clearTimeout(myVar)\">Stop it</button>\n\nThe setInterval() Method\nThe\nsetInterval()\nmethod repeats a given function at every given \ntime-interval.\nwindow.setInterval(\nfunction\n,\nmilliseconds\n);\nThe\nwindow.setInterval()\nmethod can be written without the window prefix.\nThe first parameter is the function to be executed.\nThe second parameter indicates the length of the time-interval between each \nexecution.\nThis example executes a function called \"myTimer\" once every second (like a digital \nwatch).\nExample\nDisplay the current time:\nsetInterval(myTimer, 1000);\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n\nThere are 1000 milliseconds in one second.\nHow to Stop the Execution?\nThe\nclearInterval()\nmethod stops the executions of the function \nspecified in the setInterval() method.\nwindow.clearInterval(\ntimerVariable\n)\nThe\nwindow.clearInterval()\nmethod can be written without the window prefix.\nThe\nclearInterval()\nmethod uses the variable returned from\nsetInterval()\n:\nlet myVar = setInterval(\nfunction\n,\nmilliseconds\n);\nclearInterval(myVar);\nExample\nSame example as above, but we have added a \"Stop time\" button:\n<p id=\"demo\"></p>\n<button onclick=\"clearInterval(myVar)\">Stop time</button>\n<script>\nlet myVar = setInterval(myTimer, 1000);\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n</script>\n\nMore Examples\nAnother simple timing\nA clock created with a timing event\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n<script>\nfunction myFunction() {\nalert('Hello');\n}\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button>\n<button onclick=\"clearTimeout(myVar)\">Stop it</button>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "setInterval(myTimer, 1000);\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<p id=\"demo\"></p>\n<button onclick=\"clearInterval(myVar)\">Stop time</button>\n<script>\nlet myVar = setInterval(myTimer, 1000);\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n</script>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n<script>\n# TODO: Complete this line\nalert('Hello');\n}\n</script>",
      "solution": "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n<script>\nfunction myFunction() {\nalert('Hello');\n}\n</script>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button>\n<button onclick=\"clearTimeout(myVar)\">Stop it</button>"
    }
  ],
  "related_topics": [
    {
      "id": "4dd6c6ff-be8d-42b5-91e5-142165459dfa",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8f9bbac9-d515-4e57-8bd7-68ddd5a218ee",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3272cde9-75d3-4a42-99d6-4b3079666feb",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "called timing events",
        "None of the above.",
        "called timing events",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'called timing events'."
    },
    {
      "question": "What is These time intervals?",
      "options": [
        "called timing events",
        "None of the above.",
        "called timing events",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of These time intervals is 'called timing events'."
    }
  ],
  "summary": "This tutorial covers JavaScriptTiming Events concepts and techniques. You'll learn how to use JavaScriptTiming Events effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptTiming Events and how to apply it in your projects."
}