{
  "id": "110b9a2f-b70a-4dde-b45d-3e207ac15957",
  "title": "JavaScript Classes",
  "slug": "javascript-classes",
  "metadata": {
    "description": "Learn about JavaScript Classes with clear explanations and practical examples.",
    "keywords": [
      "class",
      "year",
      "constructor",
      "name",
      "date",
      "javascript",
      "method",
      "example",
      "const",
      "strict"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Class Intro"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Classes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.\nJavaScript Classes are templates for JavaScript Objects.\nJavaScript Class Syntax\nUse the keyword\nclass\nto create a class.\nAlways add a method named\nconstructor()\n:\nSyntax\nclass ClassName {\nconstructor() { ... }\n}\nExample\nclass Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}\nThe example above creates a class named \"Car\".\nThe class has two initial properties: \"name\" and \"year\".\nA JavaScript class is\nnot\nan object.\nIt is a\ntemplate\nfor JavaScript objects.\nUsing a Class\nWhen you have a class, you can use the class to create objects:\nExample\nconst myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);\n\nThe example above uses the\nCar class\nto create two\nCar objects\n.\nThe constructor method is called automatically when a new object is created.\nThe Constructor Method\nThe constructor method is a special method:\nIt has to have the exact name \"constructor\"\nIt is executed automatically when a new object is created\nIt is used to initialize object properties\nIf you do not define a constructor method, JavaScript \nwill add an empty constructor method.\nClass Methods\nClass methods are created with the same syntax as object methods.\nUse the keyword\nclass\nto create a class.\nAlways add a\nconstructor()\nmethod.\nThen add any number of methods.\nSyntax\nclass ClassName {\nconstructor() { ... }\nmethod_1() { ... }\nmethod_2() { ... }\nmethod_3() { ... }\n}\nCreate a Class method named \"age\", that returns the Car age:\nExample\nclass Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\nconst date = new Date();\nreturn date.getFullYear() - this.year;\n}\n}\nconst myCar = new Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML =\n\"My car is \" + myCar.age() + \" years old.\";\n\nYou can send parameters to Class methods:\nExample\nclass Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage(x) {\nreturn x - this.year;\n}\n}\nconst date = new Date();\nlet year = date.getFullYear();\nconst myCar = new \n  Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML=\n\"My car is \n  \" + myCar.age(year) + \" years old.\";\n\nBrowser Support\nThe following table defines the first browser version with full support for \nClasses in JavaScript:\nChrome 49\nEdge 12\nFirefox 45\nSafari 9\nOpera 36\nMar, 2016\nJul, 2015\nMar, 2016\nOct, 2015\nMar, 2016\n\"use strict\"\nThe syntax in classes must be written in \"strict mode\".\nYou will get an \nerror if you do not follow the \"strict mode\" rules.\nExample\nIn \"strict mode\" you will get an error if you use a variable without \ndeclaring it:\nclass Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\n// date = new Date();  \u00a0// This will not work\nconst date = new Date();  // This will work\nreturn date.getFullYear() - this.year;\n}\n}\n\nLearn more about \"strict mode\" in:\nJS Strict Mode\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "class ClassName {\nconstructor() { ... }\n}",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 6,
      "code": "class ClassName {\nconstructor() { ... }\nmethod_1() { ... }\nmethod_2() { ... }\nmethod_3() { ... }\n}",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\nconst date = new Date();\nreturn date.getFullYear() - this.year;\n}\n}\nconst myCar = new Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML =\n\"My car is \" + myCar.age() + \" years old.\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage(x) {\nreturn x - this.year;\n}\n}\nconst date = new Date();\nlet year = date.getFullYear();\nconst myCar = new \n  Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML=\n\"My car is \n  \" + myCar.age(year) + \" years old.\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\n// date = new Date();  \u00a0// This will not work\nconst date = new Date();  // This will work\nreturn date.getFullYear() - this.year;\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class ClassName {\nconstructor() { ... }\n# TODO: Complete this line",
      "solution": "class ClassName {\nconstructor() { ... }\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n# TODO: Complete this line",
      "solution": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "5b73ae9a-1ba0-4d96-8e3d-6779627fd551",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "63e5769a-d122-433f-8dcd-f25d134c3b2f",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "e7bf38aa-1b9c-4854-a92d-6c891b6352ba",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Classes?",
      "options": [
        "None of the above.",
        "not\nan object",
        "templates for JavaScript Objects",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript Classes is 'templates for JavaScript Objects'."
    },
    {
      "question": "What is A JavaScript class?",
      "options": [
        "None of the above.",
        "None of the above.",
        "not\nan object",
        "templates for JavaScript Objects"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A JavaScript class is 'not\nan object'."
    }
  ],
  "summary": "This tutorial covers JavaScript Classes concepts and techniques. You'll learn how to use JavaScript Classes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Classes and how to apply it in your projects."
}