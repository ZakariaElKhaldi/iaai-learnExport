{
  "id": "dd8b5b5b-c309-44d8-8744-f136d6f74ef0",
  "title": "JavaScriptFunction Parameters",
  "slug": "javascriptfunction-parameters",
  "metadata": {
    "description": "Learn about JavaScriptFunction Parameters with clear explanations and practical examples.",
    "keywords": [
      "function",
      "arguments",
      "javascript",
      "parameters",
      "values",
      "object",
      "parameter",
      "passed",
      "value",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Function Parameters"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nFunction Parameters",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A JavaScript\nfunction\ndoes not perform any checking on \nparameter values (arguments).\nFunction Parameters and Arguments\nEarlier in this tutorial, you learned that functions can have\nparameters\n:\nfunction\nfunctionName\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}\nFunction\nparameters\nare the\nnames\nlisted in \nthe function definition.\nFunction\narguments\nare the real\nvalues\npassed to (and received by) the function.\nParameter Rules\nJavaScript function definitions do not specify data types for \nparameters.\nJavaScript functions do not perform type checking on the passed \narguments.\nJavaScript functions do not check the number of arguments received.\nDefault Parameters\nIf a function is called with\nmissing arguments\n(less than declared), the missing values are set to\nundefined\n.\nSometimes this is acceptable, but sometimes it is better to assign a default \nvalue to the parameter:\nExample\nfunction myFunction(x, y) {\nif (y === undefined) {\ny = 2;\n}\n}\n\nDefault Parameter Values\nES6\nallows function parameters to have default values.\nExample\nIf y is not passed or undefined, then y = 10.\nfunction myFunction(x, y = 10) {\nreturn x + y;\n}\nmyFunction(5);\n\nFunction Rest Parameter\nThe rest parameter (...) allows a function to treat an indefinite number of arguments as an array:\nExample\nfunction sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);\n\nThe Arguments Object\nJavaScript functions have a built-in object called the arguments \nobject.\nThe argument object contains an array of the arguments used when the function \nwas called (invoked).\nThis way you can simply use a function to find (for instance) the highest \nvalue in a list of numbers:\nExample\nx = findMax(1, 123, 500, 115, 44, 88);\nfunction findMax() {\nlet max = -Infinity;\nfor (let i = 0; i < arguments.length; i++) {\nif (arguments[i] > max) {\nmax = arguments[i];\n}\n}\nreturn max;\n}\n\nOr create a function to sum all input values:\nExample\nx = sumAll(1, 123, 500, 115, 44, 88);\nfunction sumAll() {\nlet sum = 0;\nfor (let i = 0; i < arguments.length; i++) {\nsum += arguments[i];\n}\nreturn sum;\n}\n\nIf a function is called with\ntoo many arguments\n(more than declared),\nthese arguments can be reached using\nthe arguments object\n.\nArguments are Passed by Value\nThe parameters, in a function call, are the function's arguments.\nJavaScript arguments are passed by\nvalue\n: The function only \ngets to know the values, not the argument's locations.\nIf a function changes an argument's value, it does not change the parameter's \noriginal value.\nChanges to arguments are not visible (reflected) outside the function.\nObjects are Passed by Reference\nIn JavaScript, object references are values.\nBecause of this, objects will behave like they are passed by\nreference:\nIf a function changes an object property, it changes the original value.\nChanges to object properties are visible (reflected) outside the function.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function\nfunctionName\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function myFunction(x, y) {\nif (y === undefined) {\ny = 2;\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function myFunction(x, y = 10) {\nreturn x + y;\n}\nmyFunction(5);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "x = findMax(1, 123, 500, 115, 44, 88);\nfunction findMax() {\nlet max = -Infinity;\nfor (let i = 0; i < arguments.length; i++) {\nif (arguments[i] > max) {\nmax = arguments[i];\n}\n}\nreturn max;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "x = sumAll(1, 123, 500, 115, 44, 88);\nfunction sumAll() {\nlet sum = 0;\nfor (let i = 0; i < arguments.length; i++) {\nsum += arguments[i];\n}\nreturn sum;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function\nfunctionName\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n# TODO: Complete this line",
      "solution": "function\nfunctionName\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFunction(x, y) {\nif (y === undefined) {\ny = 2;\n# TODO: Complete this line\n}",
      "solution": "function myFunction(x, y) {\nif (y === undefined) {\ny = 2;\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "9c1f2326-ccf7-4d27-9cdb-99a51c661570",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ee14e208-f4a2-462b-baa8-41bc2d84490d",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2fda623f-8af8-4180-9c33-3bc83f64c0b4",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Function\nparameters?",
      "options": [
        "None of the above.",
        "the\nnames\nlisted in \nthe function definition",
        "None of the above.",
        "the real\nvalues\npassed to (and received by) the function"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Function\nparameters is 'the\nnames\nlisted in \nthe function definition'."
    },
    {
      "question": "What is Function\narguments?",
      "options": [
        "None of the above.",
        "the real\nvalues\npassed to (and received by) the function",
        "None of the above.",
        "the\nnames\nlisted in \nthe function definition"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Function\narguments is 'the real\nvalues\npassed to (and received by) the function'."
    }
  ],
  "summary": "This tutorial covers JavaScriptFunction Parameters concepts and techniques. You'll learn how to use JavaScriptFunction Parameters effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptFunction Parameters and how to apply it in your projects."
}