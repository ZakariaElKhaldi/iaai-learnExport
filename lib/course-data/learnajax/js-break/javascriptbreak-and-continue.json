{
  "id": "0da805f1-b5f1-4d64-9b55-f439237a9d37",
  "title": "JavaScriptBreak and Continue",
  "slug": "javascriptbreak-and-continue",
  "metadata": {
    "description": "Learn about JavaScriptBreak and Continue with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "break",
      "statement",
      "loop",
      "continue",
      "used",
      "text",
      "label",
      "jump",
      "example",
      "statements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Break"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nBreak and Continue",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nbreak\nstatement \"jumps out\" of a loop.\nThe\ncontinue\nstatement \"jumps over\" one iteration in \nthe loop.\nThe Break Statement\nYou have already seen the\nbreak\nstatement used in an earlier \nchapter of this tutorial. It was used to \"jump out\" of a\nswitch()\nstatement.\nThe\nbreak\nstatement can also be used to jump out of a loop:\nExample\nfor (let i = 0; i < 10; i++) {\nif (i === 3) { break; }\ntext += \"The number is \" + i + \"<br>\";\n}\n\nIn the example above, the\nbreak\nstatement ends the loop (\"breaks\" the loop)\nwhen the loop counter (i) is 3.\nThe Continue Statement\nThe\ncontinue\nstatement breaks one iteration (in the loop), if a specified \ncondition occurs, and continues with the \nThis example skips the value of 3:\nExample\nfor (let i = 0; i < 10; i++) {\nif (i === 3) { continue; }\ntext += \"The number is \" + i + \"<br>\";\n}\n\nJavaScript Labels\nTo label JavaScript statements you precede the statements with a label name \nand a colon:\nlabel:\nstatements\nThe\nbreak\nand the\ncontinue\nstatements are the only JavaScript statements that \ncan \"jump out of\" a code block.\nSyntax:\nbreak\nlabelname\n;\ncontinue\nlabelname\n;\nThe\ncontinue\nstatement (with or without a label reference) can only be used to\nskip one \nloop iteration\n.\nThe\nbreak\nstatement, without a label reference, can only be used to\njump out of a loop \nor a switch\n.\nWith a label reference, the break statement can be used to\njump out \nof any code block\n:\nExample\nconst cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlist: {\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\nbreak list;\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\n}\n\nA code block is a block of code between { and }.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "for (let i = 0; i < 10; i++) {\nif (i === 3) { break; }\ntext += \"The number is \" + i + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "for (let i = 0; i < 10; i++) {\nif (i === 3) { continue; }\ntext += \"The number is \" + i + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "label:\nstatements",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "break\nlabelname\n;\ncontinue\nlabelname\n;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlist: {\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\nbreak list;\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for (let i = 0; i < 10; i++) {\n# TODO: Complete this line\ntext += \"The number is \" + i + \"<br>\";\n}",
      "solution": "for (let i = 0; i < 10; i++) {\nif (i === 3) { break; }\ntext += \"The number is \" + i + \"<br>\";\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for (let i = 0; i < 10; i++) {\n# TODO: Complete this line\ntext += \"The number is \" + i + \"<br>\";\n}",
      "solution": "for (let i = 0; i < 10; i++) {\nif (i === 3) { continue; }\ntext += \"The number is \" + i + \"<br>\";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "5dfc2aba-465e-4c91-bcee-11530f06e2a3",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "cf6553f3-5757-4f07-8080-e25e9ea5385a",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3eeec921-5f43-43a7-85d5-4b6b6cfa0a01",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The number?",
      "options": [
        "\" + i + \"<br>\";\n}\n\nJavaScript Labels\nTo label JavaScript statements you precede the statements with a label name \nand a colon:\nlabel:\nstatements\nThe\nbreak\nand the\ncontinue\nstatements are the only JavaScript statements that \ncan \"jump out of\" a code block",
        "\" + i + \"<br>\";\n}\n\nIn the example above",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The number is '\" + i + \"<br>\";\n}\n\nIn the example above'."
    },
    {
      "question": "What is The number?",
      "options": [
        "None of the above.",
        "\" + i + \"<br>\";\n}\n\nIn the example above",
        "\" + i + \"<br>\";\n}\n\nJavaScript Labels\nTo label JavaScript statements you precede the statements with a label name \nand a colon:\nlabel:\nstatements\nThe\nbreak\nand the\ncontinue\nstatements are the only JavaScript statements that \ncan \"jump out of\" a code block",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The number is '\" + i + \"<br>\";\n}\n\nJavaScript Labels\nTo label JavaScript statements you precede the statements with a label name \nand a colon:\nlabel:\nstatements\nThe\nbreak\nand the\ncontinue\nstatements are the only JavaScript statements that \ncan \"jump out of\" a code block'."
    }
  ],
  "summary": "This tutorial covers JavaScriptBreak and Continue concepts and techniques. You'll learn how to use JavaScriptBreak and Continue effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptBreak and Continue and how to apply it in your projects."
}