{
  "id": "10082bed-0f4f-4260-ad13-390a2e7d5e80",
  "title": "JavaScript ES5",
  "slug": "javascript-es5",
  "metadata": {
    "description": "Learn about JavaScript ES5 with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "object",
      "example",
      "array",
      "person",
      "value",
      "property",
      "json",
      "language",
      "string",
      "function"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 8,
    "category": "LearnAJAX",
    "subcategory": "JS 2009 (ES5)"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript ES5",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ECMAScript 2009, also known as ES5, was the first major revision to JavaScript.\nThis chapter describes the most important features of ES5.\nES5 Features\n\"use strict\"\nString[\nnumber\n] access\nMultiline strings\nString.trim()\nArray.isArray()\nArray forEach()\nArray map()\nArray filter()\nArray reduce()\nArray reduceRight()\nArray every()\nArray some()\nArray indexOf()\nArray lastIndexOf()\nJSON.parse()\nJSON.stringify()\nDate.now()\nDate toISOString()\nDate toJSON()\nProperty getters and setters\nReserved words as property names\nObject.create()\nObject.keys()\nObject management\nObject protection\nObject defineProperty()\nFunction bind()\nTrailing commas\nBrowser Support\nES5 (JavaScript 2009) fully supported in all modern browsers since July 2013:\nChrome\n23\nIE/Edge\n10\nFirefox\n21\nSafari\n6\nOpera\n15\nSep 2012\nSep 2012\nApr 2013\nJul 2012\nJul 2013\nThe \"use strict\" Directive\n\"use strict\"\ndefines that the JavaScript code should be executed in \"strict mode\".\nWith strict mode you can, for example, not use undeclared variables.\nYou can use strict mode in all your programs. It helps you to write cleaner code,\nlike preventing you from using undeclared variables.\n\"use strict\"\nis just a string expression. Old browsers will not throw an error if they don't understand it.\nRead more in\nJS Strict Mode\n.\nProperty Access on Strings\nThe\ncharAt()\nmethod returns the character at a specified \nindex (position) in a string:\nExample\nvar str = \"HELLO WORLD\";\nstr.charAt(0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H\n\nES5 allows property access on strings:\nExample\nvar str = \"HELLO WORLD\";\nstr[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H\n\nProperty access on string might be a little unpredictable.\nRead more in\nJS String Methods\n.\nStrings Over Multiple Lines\nES5 allows string literals over multiple lines if escaped with a backslash:\nExample\n\"Hello \\\nDolly!\";\n\nThe \\ method might not have universal support.\nOlder browsers might treat \nthe spaces around the backslash differently.\nSome older browsers do \nnot allow spaces behind the \\ character.\nA safer way to break up a string literal, is to use string \naddition:\nExample\n\"Hello \" +\n\"Dolly!\";\n\nReserved Words as Property Names\nES5 allows reserved words as property names:\nObject Example\nvar obj = {name: \"John\", new: \"yes\"}\n\nString trim()\nThe\ntrim()\nmethod removes whitespace from both sides of a string.\nExample\nvar str = \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \";\nalert(str.trim());\n\nRead more in\nJS String Methods\n.\nArray.isArray()\nThe\nisArray()\nmethod checks whether an object is an array.\nExample\nfunction myFunction() {\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar x = document.getElementById(\"demo\");\nx.innerHTML = Array.isArray(fruits);\n}\n\nRead more in\nJS Arrays\n.\nArray forEach()\nThe\nforEach()\nmethod calls a function once for each array element.\nExample\nvar txt = \"\";\nvar numbers = [45, 4, 9, 16, 25];\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt = txt + value + \"<br>\";\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray map()\nThis example multiplies each array value by 2:\nExample\nvar numbers1 = [45, 4, 9, 16, 25];\nvar numbers2 = numbers1.map(myFunction);\nfunction myFunction(value) {\nreturn value * 2;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray filter()\nThis example creates a new array from elements with a value larger than 18:\nExample\nvar numbers = [45, 4, 9, 16, 25];\nvar over18 = \n  numbers.filter(myFunction);\nfunction myFunction(value) {\nreturn value > 18;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray reduce()\nThis example finds the sum of all numbers in an array:\nExample\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray reduceRight()\nThis example also finds the sum of all numbers in an array:\nExample\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduceRight(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray every()\nThis example checks if all values are over 18:\nExample\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray some()\nThis example checks if some values are over 18:\nExample\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = \n  numbers.some(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}\n\nLearn more in\nJS Array Iteration Methods\n.\nArray indexOf()\nSearch an array for an element value and returns its position.\nExample\nvar fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nvar a = fruits.indexOf(\"Apple\");\n\nLearn more in\nJS Array Iteration Methods\n.\nArray lastIndexOf()\nlastIndexOf()\nis the same as\nindexOf()\n, but searches from the end of the array.\nExample\nvar fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nvar a = fruits.lastIndexOf(\"Apple\");\n\nLearn more in\nJS Array Iteration Methods\n.\nJSON.parse()\nA common use of JSON is to receive data from a web server.\nImagine you received this text string from a web server:\n'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\nThe JavaScript function\nJSON.parse()\nis used to convert the text into a JavaScript object:\nvar obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}');\n\nRead more in our\nJSON Tutorial\n.\nJSON.stringify()\nA common use of JSON is to send data to a web server.\nWhen sending data to a web server, the data has to be \na string.\nImagine we have this object in JavaScript:\nvar obj = {name:\"John\", age:30, city:\"New York\"};\nUse the JavaScript function\nJSON.stringify()\nto convert it into a string.\nvar myJSON = JSON.stringify(obj);\nThe result will be a string following the JSON notation.\nmyJSON is now a string, and ready to be sent to a server:\nExample\nvar obj = {name:\"John\", age:30, city:\"New York\"};\nvar myJSON = JSON.stringify(obj);\ndocument.getElementById(\"demo\").innerHTML = myJSON;\n\nRead more in our\nJSON Tutorial\n.\nDate.now()\nDate.now()\nreturns the number of milliseconds since zero date (January 1. \n1970 00:00:00 UTC).\nExample\nvar timInMSs = Date.now();\n\nDate.now()\nreturns the same as getTime() performed on a\nDate\nobject.\nLearn more in\nJS Dates\n.\nDate toISOString()\nThe\ntoISOString()\nmethod converts a Date object to a string, using the ISO standard format:\nExample\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toISOString();\n\nDate toJSON()\ntoJSON()\nconverts a Date object into a string, formatted as a JSON date.\nJSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:\nExample\nd = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toJSON();\n\nProperty Getters and Setters\nES5 lets you define object methods with a syntax that looks like getting or setting\na property.\nThis example creates a\ngetter\nfor a property called fullName:\nExample\n// Create an object:\nvar person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nget \n  fullName() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n// Display data from the \n  object using a getter:\ndocument.getElementById(\"demo\").innerHTML = \n  person.fullName;\n\nThis example creates a\nsetter\nand a\ngetter\nfor the language property:\nExample\nvar person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nget lang() {\nreturn this.language;\n},\nset lang(value) {\nthis.language = value;\n}\n};\n// Set an object \n  property using a setter:\nperson.lang = \"en\";\n// Display data from the \n  object using a getter:\ndocument.getElementById(\"demo\").innerHTML = \n  person.lang;\n\nThis example uses a setter to secure upper case updates of language:\nExample\nvar person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nset lang(value) {\nthis.language = value.toUpperCase();\n}\n};\n// Set an object \n  property using a setter:\nperson.lang = \"en\";\n// Display data from the \n  object:\ndocument.getElementById(\"demo\").innerHTML = \n  person.language;\n\nLearn more about Gettes and Setters in\nJS Object Accessors\nObject.defineProperty()\nObject.defineProperty()\nis a new Object method in ES5.\nIt lets you define an object property and/or change a property's value and/or \nmetadata.\nExample\n// Create an Object:\nconst person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : true,\nconfigurable : true\n});\n// \n  Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\n// Display Properties\ndocument.getElementById(\"demo\").innerHTML = \n  txt;\n\nExample\n// Create an Object:\nconst person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : false,\nconfigurable : true\n});\n// \n  Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = \n  txt;\n\nThis example creates a setter and a getter to secure upper case updates of language:\nExample\n// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"NO\"\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nget : function() { return \n  language },\nset : function(value) { language = value.toUpperCase()}\n});\n// Change Language\nperson.language = \"en\";\n// Display Language\ndocument.getElementById(\"demo\").innerHTML = person.language;\n\nObject.create()\nThe\nObject.create()\nmethod creates an object from an existing object.\nExample\n// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\"\n};\n// Create new Object\nconst man = Object.create(person);\nman.firstName = \"Peter\";\n\nObject.keys()\nThe\nObject.keys()\nmethod returns an array with the keys of an object.\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Get the Keys\nconst keys = Object.keys(person);\n\nObject Management\nES5 added new Object management methods to JavaScript:\nManaging Objects\n// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)\nLearn more in\nObject Management\n.\nObject Protection\nES5 added Object protection methods to JavaScript:\nProtecting Objects\n// Prevents adding properties to an object\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents changes of object properties (not values)\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)\nLearn more in\nObject Protection\n.\nFunction Bind()\nWith the\nbind()\nmethod, an object can borrow a method from another object.\nThis example creates 2 objects (person and member).\nThe member object borrows the fullname method from the person object:\nExample\nconst person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst member = {\nfirstName:\"Hege\",\nlastName: \"Nilsen\",\n}\nlet fullName = person.fullName.bind(member);\n\nLearn more in\nFunction bind()\n.\nTrailing Commas\nES5 allows trailing commas in object and array definitions:\nObject Example\nperson = {\nfirstName: \"John\",\nlastName: \"\nDoe\",\nage: 46,\n}\nArray Example\npoints = [\n1,\n5,\n10,\n25,\n40,\n100,\n];\nWARNING !!!\nJSON does not allow trailing commas.\nJSON Objects:\n//\n  Allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \n  \"age\":46}'\nJSON.parse(person)\n// Not allowed:\nvar person = '{\"firstName\":\"John\", \n  \"lastName\":\"Doe\", \"age\":46,}'\nJSON.parse(person)\nJSON Arrays:\n//\n    Allowed:\npoints = [40, 100, 1, 5, 25, 10]\n// Not allowed:\npoints = \n    [40, 100, 1, 5, 25, 10,]\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var str = \"HELLO WORLD\";\nstr.charAt(0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "var str = \"HELLO WORLD\";\nstr[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "\"Hello \\\nDolly!\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "\"Hello \" +\n\"Dolly!\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Object Example",
      "content": "",
      "order": 7,
      "code": "var obj = {name: \"John\", new: \"yes\"}",
      "language": "javascript",
      "explanation": "Example of object example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "var str = \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \";\nalert(str.trim());",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "function myFunction() {\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar x = document.getElementById(\"demo\");\nx.innerHTML = Array.isArray(fruits);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "var txt = \"\";\nvar numbers = [45, 4, 9, 16, 25];\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt = txt + value + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "var numbers1 = [45, 4, 9, 16, 25];\nvar numbers2 = numbers1.map(myFunction);\nfunction myFunction(value) {\nreturn value * 2;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var numbers = [45, 4, 9, 16, 25];\nvar over18 = \n  numbers.filter(myFunction);\nfunction myFunction(value) {\nreturn value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "var numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "var numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduceRight(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "var numbers = [45, 4, 9, 16, 25];\nvar allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "var numbers = [45, 4, 9, 16, 25];\nvar allOver18 = \n  numbers.some(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "var fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nvar a = fruits.indexOf(\"Apple\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "var fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nvar a = fruits.lastIndexOf(\"Apple\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "var obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "var obj = {name:\"John\", age:30, city:\"New York\"};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "var myJSON = JSON.stringify(obj);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "var obj = {name:\"John\", age:30, city:\"New York\"};\nvar myJSON = JSON.stringify(obj);\ndocument.getElementById(\"demo\").innerHTML = myJSON;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "var timInMSs = Date.now();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "const d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toISOString();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toJSON();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "// Create an object:\nvar person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nget \n  fullName() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n// Display data from the \n  object using a getter:\ndocument.getElementById(\"demo\").innerHTML = \n  person.fullName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "var person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nget lang() {\nreturn this.language;\n},\nset lang(value) {\nthis.language = value;\n}\n};\n// Set an object \n  property using a setter:\nperson.lang = \"en\";\n// Display data from the \n  object using a getter:\ndocument.getElementById(\"demo\").innerHTML = \n  person.lang;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "var person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nset lang(value) {\nthis.language = value.toUpperCase();\n}\n};\n// Set an object \n  property using a setter:\nperson.lang = \"en\";\n// Display data from the \n  object:\ndocument.getElementById(\"demo\").innerHTML = \n  person.language;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "// Create an Object:\nconst person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : true,\nconfigurable : true\n});\n// \n  Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\n// Display Properties\ndocument.getElementById(\"demo\").innerHTML = \n  txt;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 31,
      "code": "// Create an Object:\nconst person = {\nfirstName: \n  \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : false,\nconfigurable : true\n});\n// \n  Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = \n  txt;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"NO\"\n};\n// Change a Property:\nObject.defineProperty\n(person, \"language\", {\nget : function() { return \n  language },\nset : function(value) { language = value.toUpperCase()}\n});\n// Change Language\nperson.language = \"en\";\n// Display Language\ndocument.getElementById(\"demo\").innerHTML = person.language;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\"\n};\n// Create new Object\nconst man = Object.create(person);\nman.firstName = \"Peter\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 34,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Get the Keys\nconst keys = Object.keys(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Managing Objects",
      "content": "",
      "order": 35,
      "code": "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)",
      "language": "javascript",
      "explanation": "Example of managing objects"
    },
    {
      "type": "code_example",
      "title": "Protecting Objects",
      "content": "",
      "order": 36,
      "code": "// Prevents adding properties to an object\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents changes of object properties (not values)\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)",
      "language": "javascript",
      "explanation": "Example of protecting objects"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 37,
      "code": "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst member = {\nfirstName:\"Hege\",\nlastName: \"Nilsen\",\n}\nlet fullName = person.fullName.bind(member);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Object Example",
      "content": "",
      "order": 38,
      "code": "person = {\nfirstName: \"John\",\nlastName: \"\nDoe\",\nage: 46,\n}",
      "language": "javascript",
      "explanation": "Example of object example"
    },
    {
      "type": "code_example",
      "title": "Array Example",
      "content": "",
      "order": 39,
      "code": "points = [\n1,\n5,\n10,\n25,\n40,\n100,\n];",
      "language": "javascript",
      "explanation": "Example of array example"
    },
    {
      "type": "code_example",
      "title": "JSON Objects:",
      "content": "",
      "order": 40,
      "code": "//\n  Allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \n  \"age\":46}'\nJSON.parse(person)\n// Not allowed:\nvar person = '{\"firstName\":\"John\", \n  \"lastName\":\"Doe\", \"age\":46,}'\nJSON.parse(person)",
      "language": "javascript",
      "explanation": "Example of json objects:"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var str = \"HELLO WORLD\";\nstr.charAt(0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var str = \"HELLO WORLD\";\nstr[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns H"
    }
  ],
  "related_topics": [
    {
      "id": "988b0bcb-4574-43a7-a2e9-71fadfc83ede",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ecd01c63-3d29-406c-9d26-1b7dffc0ec13",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "93aae6c7-97cd-4c46-a8d7-08f6c6884c6d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript ES5 concepts and techniques. You'll learn how to use JavaScript ES5 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript ES5 and how to apply it in your projects."
}