{
  "id": "9eaa223c-b78d-45f7-8ce8-7b7b80729794",
  "title": "JavaScriptFunctions",
  "slug": "javascriptfunctions",
  "metadata": {
    "description": "Learn about JavaScriptFunctions with clear explanations and practical examples.",
    "keywords": [
      "function",
      "return",
      "code",
      "tocelsius",
      "javascript",
      "functions",
      "variables",
      "value",
      "example",
      "fahrenheit"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A JavaScript function is a block of code designed to perform a \nparticular task.\nA JavaScript function is executed when \n\"something\" invokes it (calls it).\nExample\n//  Function to compute the product of p1 and p2\nfunction myFunction(p1, p2) {\nreturn p1 * p2;\n}\n\nJavaScript Function Syntax\nA JavaScript function is defined with the\nfunction\nkeyword, \nfollowed by a\nname\n, followed by parentheses\n()\n.\nFunction names can contain letters, digits, underscores, and dollar signs \n(same rules as variables).\nThe parentheses may include parameter names separated by commas:\n(\nparameter1, parameter2, ...\n)\nThe code to be executed, by the function, is placed inside curly brackets:\n{}\nfunction\nname\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}\nFunction\nparameters\nare listed inside the parentheses () in \nthe function definition.\nFunction\narguments\nare the\nvalues\nreceived by the function when it is invoked.\nInside the function, the arguments (the parameters) behave as local variables.\nFunction Invocation\nThe code inside the function will execute when \"something\"\ninvokes\n(calls) the \nfunction:\nWhen an event occurs (when a user clicks a button)\nWhen it is invoked (called) from JavaScript code\nAutomatically (self invoked)\nYou will learn a lot more about function invocation later in this \ntutorial.\nFunction Return\nWhen JavaScript reaches a\nreturn\nstatement, \nthe function will stop executing.\nIf the function was invoked from a statement, JavaScript will \n\"return\" to execute the code after the invoking statement.\nFunctions often compute a\nreturn value\n. The return value is \n\"returned\" back to \nthe \"caller\":\nExample\nCalculate the product of two numbers, and return the result:\n// Function is called, the return value will end up in x\nlet x = myFunction(4, 3);\nfunction myFunction(a, b) {\n// Function returns the product of a and b\nreturn a * b;\n}\n\nWhy Functions?\nWith functions you can reuse code\nYou can write code that can be used many times.\nYou can use the same code with different arguments, to produce different results.\nThe () Operator\nThe () operator invokes (calls) the function:\nExample\nConvert Fahrenheit to Celsius:\nfunction toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius(77);\n\nAccessing a function with incorrect parameters can return an incorrect answer:\nExample\nfunction toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius();\n\nAccessing a function without () returns the function and not the function result:\nExample\nfunction toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius;\n\nNote\nAs you see from the examples above,\ntoCelsius\nrefers to the function object, and\ntoCelsius()\nrefers to the function result.\nFunctions Used as Variable Values\nFunctions can be used the same way as you use variables, in all types of formulas, assignments, and \ncalculations.\nExample\nInstead of using a variable to store the return value of a function:\nlet x = toCelsius(77);\nlet text = \"The temperature is \" + x + \" Celsius\";\nYou can use the function directly, as a variable value:\nlet text = \"The temperature is \" + toCelsius(77) + \" Celsius\";\n\nYou will learn a lot more about functions later in this tutorial.\nLocal Variables\nVariables declared within a JavaScript function, become\nLOCAL\nto \nthe function.\nLocal variables can only be accessed \nfrom within the function.\nExample\n// code here can NOT use carName\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n// code here can NOT use carName\n\nSince local variables are only recognized inside their functions, variables with the same name can be used in different functions.\nLocal variables are created when a function starts, and deleted when the function is completed.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "//  Function to compute the product of p1 and p2\nfunction myFunction(p1, p2) {\nreturn p1 * p2;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function\nname\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Function is called, the return value will end up in x\nlet x = myFunction(4, 3);\nfunction myFunction(a, b) {\n// Function returns the product of a and b\nreturn a * b;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius(77);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\nlet value = toCelsius;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = toCelsius(77);\nlet text = \"The temperature is \" + x + \" Celsius\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// code here can NOT use carName\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n// code here can NOT use carName",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "//  Function to compute the product of p1 and p2\nfunction myFunction(p1, p2) {\n# TODO: Complete this line\n}",
      "solution": "//  Function to compute the product of p1 and p2\nfunction myFunction(p1, p2) {\nreturn p1 * p2;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function\n# TODO: Complete this line\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}",
      "solution": "function\nname\n(\nparameter1, parameter2, parameter3\n) {\n//\ncode to be executed\n}"
    }
  ],
  "related_topics": [
    {
      "id": "0106e188-db88-4621-88ee-efb8b38a85fa",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "a0599bf0-359c-432b-a6d9-c650ebc3f79e",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "a9d080f0-daaa-4987-9c46-29e9564625b6",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nFunctions\n\nA JavaScript function?",
      "options": [
        "a block of code designed to perform a \nparticular task",
        "None of the above.",
        "executed when \n\"something\" invokes it (calls it)",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript\nFunctions\n\nA JavaScript function is 'a block of code designed to perform a \nparticular task'."
    },
    {
      "question": "What is A JavaScript function?",
      "options": [
        "a block of code designed to perform a \nparticular task",
        "None of the above.",
        "executed when \n\"something\" invokes it (calls it)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A JavaScript function is 'executed when \n\"something\" invokes it (calls it)'."
    }
  ],
  "summary": "This tutorial covers JavaScriptFunctions concepts and techniques. You'll learn how to use JavaScriptFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptFunctions and how to apply it in your projects."
}