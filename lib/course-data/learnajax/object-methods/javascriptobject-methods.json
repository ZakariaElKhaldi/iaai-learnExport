{
  "id": "b8cff693-a216-4035-b78c-547040a9f05a",
  "title": "JavaScriptObject Methods",
  "slug": "javascriptobject-methods",
  "metadata": {
    "description": "Learn about JavaScriptObject Methods with clear explanations and practical examples.",
    "keywords": [
      "object",
      "const",
      "groupby",
      "javascript",
      "entries",
      "keys",
      "values",
      "example",
      "person",
      "fruits"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Object Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObject Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "General Methods\n// Copies properties from a source object to a target object\nObject.assign(target, source)\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)\nJavaScript Object.assign()\nThe\nObject.assign()\nmethod copies properties from\none or more source objects to a target object.\nExample\n// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n// Assign Source to Target\nObject.assign(person1, person2);\n\nJavaScript Object.entries()\nECMAScript 2017 added the\nObject.entries()\nmethod to objects.\nObject.entries()\nreturns an array of the key/value pairs in an object:\nExample\nconst person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.entries(person);\n\nObject.entries()\nmakes it simple to use objects in loops:\nExample\nconst fruits = {Bananas:300, Oranges:200, Apples:500};\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}\n\nObject.entries()\nalso makes it simple to convert objects to maps:\nExample\nconst fruits = {Bananas:300, Oranges:200, Apples:500};\nconst myMap = new Map(Object.entries(fruits));\n\nObject.entries()\nis supported in all modern browsers since March 2017:\nJavaScript Object.fromEntries()\nThe\nfromEntries()\nmethod creates an object from\na list of key/value pairs.\nExample\nconst fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\nconst myObj = Object.fromEntries(fruits);\n\nJavaScript Object.values()\nObject.values()\nis similar to\nObject.entries()\n,\nbut returns a single dimension array of the object values:\nExample\nconst person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.values(person);\n\nObject.values()\nis supported in all modern browsers since March 2017:\nJavaScript Object.groupBy()\nES2024 added the\nObject.groupBy()\nmethod to JavaScript.\nThe\nObject.groupBy()\nmethod groups elements of an object\naccording to string values returned from a callback function.\nThe\nObject.groupBy()\nmethod does not change the original object.\nExample\n// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);\n\nBrowser Support\nObject.groupby()\nis an ES2024 feature.\nIt is supported in new browsers since March 2024:\nChrome 117\nEdge 117\nFirefox 119\nSafari 17.4\nOpera 103\nSep 2023\nSep 2023\nOct 2023\nOkt 2024\nMay 2023\nWarning\nES2024 features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nJavaScript Object.keys()\nThe\nObject.keys()\nmethod returns an array with the keys of an object.\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Get the Keys\nconst keys = Object.keys(person);\n\nJavaScript for...in Loop\nThe JavaScript\nfor...in\nstatement loops through the properties of an object.\nSyntax\nfor (let\nvariable\nin\nobject\n) {\n// code to be executed\n}\nThe block of code inside of the\nfor...in\nloop will be executed once for each property.\nLooping through the properties of an object:\nExample\nconst person = {\nfname:\" John\",\nlname:\" Doe\",\nage: 25\n};\nfor (let x in person) {\ntxt += person[x];\n}\n\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Copies properties from a source object to a target object\nObject.assign(target, source)\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n// Assign Source to Target\nObject.assign(person1, person2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.entries(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const fruits = {Bananas:300, Oranges:200, Apples:500};\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const fruits = {Bananas:300, Oranges:200, Apples:500};\nconst myMap = new Map(Object.entries(fruits));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\nconst myObj = Object.fromEntries(fruits);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.values(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Get the Keys\nconst keys = Object.keys(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "const person = {\nfname:\" John\",\nlname:\" Doe\",\nage: 25\n};\nfor (let x in person) {\ntxt += person[x];\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Copies properties from a source object to a target object\n# TODO: Complete this line\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)",
      "solution": "// Copies properties from a source object to a target object\nObject.assign(target, source)\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\n# TODO: Complete this line\n};\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n// Assign Source to Target\nObject.assign(person1, person2);",
      "solution": "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n// Assign Source to Target\nObject.assign(person1, person2);"
    }
  ],
  "related_topics": [
    {
      "id": "34c0cd38-ae66-46ed-bcdf-d318c6bcfbc8",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "9eb02585-3623-46a4-b27d-57d567653f41",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "a9f92336-6e4b-449d-bf9e-bfa66e1037fe",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptObject Methods concepts and techniques. You'll learn how to use JavaScriptObject Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObject Methods and how to apply it in your projects."
}