{
  "id": "8718009e-3507-4e49-b6f7-0bec9a6f62c6",
  "title": "ECMAScript 2021",
  "slug": "ecmascript-2021",
  "metadata": {
    "description": "Learn about ECMAScript 2021 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "promise",
      "replaceall",
      "text",
      "numeric",
      "example",
      "const",
      "separator",
      "javascript",
      "string",
      "resolve"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS 2021"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2021",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nNew Features in ES2021\nPromise.any()\nString replaceAll()\nNumeric Separators (_)\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nJavaScript Promise.any()\nExample\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});\n\nPromise.any()\nis supported in all modern browsers since September 2020:\nChrome 85\nEdge 85\nFirefox 79\nSafari 14\nOpera 71\nAug 2019\nAug 2020\nJul 2020\nSep 2020\nSep 2020\nJavaScript String ReplaceAll()\nES2021 introduced the string method\nreplaceAll()\n:\nExample\ntext = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");\n\nThe\nreplaceAll()\nmethod allows you to specify a\nregular expression instead of a string to be replaced.\nIf the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.\nExample\ntext = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");\n\nNote\nES2020\nintroduced the string method matchAll().\nJavaScript Numeric Separator (_)\nES2021 intoduced the numeric separator (_) to make numbers more readable:\nExample\nconst num = 1_000_000_000;\n\nThe numeric separator is only for visual use.\nExample\nconst num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2);\n\nThe numeric separator can be placed anywhere in a number:\nExample\nconst num1 = 1_2_3_4_5;\n\nNote\nThe numeric separator is not allowed at the beginning or at the end of a number.\nIn JavaScript only variables can start with _.\nThe numeric separator is supported in all modern browsers since January 2020:\nChrome 75\nEdge 79\nFirefox 74\nSafari 13.1\nOpera 67\nJun 2019\nJan 2020\nOct 2019\nSep 2019\nJun 2019\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "text = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const num = 1_000_000_000;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const num1 = 1_2_3_4_5;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n# TODO: Complete this line\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});",
      "solution": "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");"
    }
  ],
  "related_topics": [
    {
      "id": "5531f8b1-b665-474b-92d4-73ddf039c0ec",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "04005d30-345a-49cd-96c3-5f4d173937b9",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1fc3af91-72aa-42f4-bfab-735bdbda2ed5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "named by year: ES2016",
        "None of the above.",
        "None of the above.",
        "relatively new"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "What is Warning\nThese features?",
      "options": [
        "None of the above.",
        "relatively new",
        "None of the above.",
        "named by year: ES2016"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Warning\nThese features is 'relatively new'."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2021 concepts and techniques. You'll learn how to use ECMAScript 2021 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2021 and how to apply it in your projects."
}