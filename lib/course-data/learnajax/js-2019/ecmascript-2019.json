{
  "id": "bbf3d6ff-c057-45ac-b82e-c123af779d1c",
  "title": "ECMAScript 2019",
  "slug": "ecmascript-2019",
  "metadata": {
    "description": "Learn about ECMAScript 2019 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "javascript",
      "array",
      "method",
      "string",
      "json",
      "example",
      "price",
      "revised",
      "function",
      "code"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS 2019"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2019",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nNew Features in ES2019\nString.trimStart()\nString.trimEnd()\nObject.fromEntries\nOptional catch binding\nArray.flat()\nArray.flatMap()\nRevised Array.Sort()\nRevised JSON.stringify()\nSeparator symbols allowed in string litterals\nRevised Function.toString()\nJavaScript String trimStart()\nES2019 added the String method\ntrimStart()\nto JavaScript.\nThe\ntrimStart()\nmethod works like\ntrim()\n, but removes whitespace only from the start of a string.\nExample\nlet text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimStart();\n\nJavaScript String\ntrimStart()\nis supported in all modern browsers since January 2020:\nChrome 66\nEdge 79\nFirefox 61\nSafari 12\nOpera 50\nApr 2018\nJan 2020\nJun 2018\nSep 2018\nMay 2018\nJavaScript String trimEnd()\nES2019 added the String method\ntrimEnd()\nto JavaScript.\nThe\ntrimEnd()\nmethod works like\ntrim()\n, but removes whitespace only from the end of a string.\nExample\nlet text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimEnd();\n\nJavaScript String\ntrimEnd()\nis supported in all modern browsers since January 2020:\nChrome 66\nEdge 79\nFirefox 61\nSafari 12\nOpera 50\nApr 2018\nJan 2020\nJun 2018\nSep 2018\nMay 2018\nJavaScript Object fromEntries()\nES2019 added the Object method\nfromEntries()\nto JavaScript.\nThe\nfromEntries()\nmethod creates an object from iterable key / value pairs.\nExample\nconst fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\nconst myObj = Object.fromEntries(fruits);\n\nJavaScript Object\nfromEntries()\nis supported in all modern browsers since January 2020:\nChrome 73\nEdge 79\nFirefox 63\nSafari 12.1\nOpera 60\nMar 2019\nJan 2020\nOct 2018\nMar 2019\nApr 2019\nOptional catch Binding\nFrom ES2019 you can omit the catch parameter if you don't need it:.\nExample\nBefore 2019:\ntry {\n// code\n} catch (err) {\n// code\n}\nAfter 2019:\ntry {\n// code\n} catch {\n// code\n}\nOptional catch binding is supported in all modern browsers since January 2020:\nChrome 66\nEdge 79\nFirefox 58\nSafari 11.1\nOpera 53\nApr 2018\nJan 2020\nJan 2018\nMar 2018\nMay 2018\nJavaScript Array flat()\nES2019 added the Array\nflat()\nmethod to JavaScript.\nThe\nflat()\nmethod creates a new array by flattening a nested array.\nExample\nconst myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();\n\nJavaScript Array\nflat()\nis supported in all modern browsers since January 2020:\nChrome 69\nEdge 79\nFirefox 62\nSafari 12\nOpera 56\nSep 2018\nJan 2020\nSep 2018\nSep 2018\nSep 2018\nJavaScript Array flatMap()\nES2019 added the Array\nflatMap()\nmethod to JavaScript.\nThe\nflatMap()\nmethod first maps all elements of an array\nand then creates a new array by flattening the array.\nExample\nconst myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);\n\nStable Array sort()\nES2019\nrevised\nthe Array\nsort()\nmethod.\nBefore 2019, the specification allowed unstable sorting algorithms such as QuickSort.\nAfter ES2019, browsers must use a stable sorting algorithm:\nWhen sorting elements on a value, the elements must keep their relative position to other elements with the same value.\nExample\nconst myArr = [\n{name:\"X00\",price:100 },\n{name:\"X01\",price:100 },\n{name:\"X02\",price:100 },\n{name:\"X03\",price:100 },\n{name:\"X04\",price:110 },\n{name:\"X05\",price:110 },\n{name:\"X06\",price:110 },\n{name:\"X07\",price:110 }\n];\n\nIn the example above, when sorting on price, the result should not have names in a different relative position, such as this:\nX01 100\nX03 100\nX00 100\nX03 100\nX05 110\nX04 110\nX06 110\nX07 110\nRevised JSON.stringify()\nES2019\nrevised\nthe JSON\nstringify()\nmethod.\nBefore 2019, JSON could not stringify character encoded with \\.\nExample\nlet text = JSON.stringify(\"\\u26D4\");\n\nBefore ES2019, using\nJSON.stringify()\nJSON on UTF-8 code points (U+D800 to U+DFFF)\nreturned broken Unicode characters like \ufffd\ufffd\ufffd.\nAfter this revision, strings with UTF-8 code points convert safely with\nJSON.stringify()\n,\nand back to the original using\nJSON.parse()\n.\nSeparator Symbols\nLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.\nBefore 2019, these were treated as line terminators and resulted in error exceptions:\nExample\n// This is valid in ES2019:\nlet text = \"\\u2028\";\n\nNote\nNow, JavaScript and JSON have equal rules.\nBefore ES2019:\ntext = JSON.parse('\"\\u2028\"') would parse to ''.\ntext = '\"\\u2028\"' would give\nsyntax error\n.\nRevised Function toString()\nES2019\nrevised\nthe Function\ntoString()\nmethod.\nThe\ntoString()\nmethod returns a string representing the source code of a function.\nFrom 2019, toString() must return the source code of the function including comments,\nspaces, and syntax details.\nBefore 2019, different browsers returned different variants of the function (like without comments and spaces).\nFrom 2019 the function should be returned exactly as it is written.\nExample\nfunction myFunction(p1, p2) {\nreturn p1 * p2;\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimStart();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimEnd();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\nconst myObj = Object.fromEntries(fruits);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "try {\n// code\n} catch (err) {\n// code\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const myArr = [\n{name:\"X00\",price:100 },\n{name:\"X01\",price:100 },\n{name:\"X02\",price:100 },\n{name:\"X03\",price:100 },\n{name:\"X04\",price:110 },\n{name:\"X05\",price:110 },\n{name:\"X06\",price:110 },\n{name:\"X07\",price:110 }\n];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "X01 100\nX03 100\nX00 100\nX03 100\nX05 110\nX04 110\nX06 110\nX07 110",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let text = JSON.stringify(\"\\u26D4\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "// This is valid in ES2019:\nlet text = \"\\u2028\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "function myFunction(p1, p2) {\nreturn p1 * p2;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimStart();"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimEnd();"
    }
  ],
  "related_topics": [
    {
      "id": "b56f4be9-db63-4aba-aea7-4d5686392796",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7a66d558-2550-466c-8d7b-8b7b5e28ca36",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "38561ea7-c3c6-4d3b-af11-17371e07878e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "None of the above.",
        "named by year: ES2016",
        "Not a versions.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2019 concepts and techniques. You'll learn how to use ECMAScript 2019 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2019 and how to apply it in your projects."
}