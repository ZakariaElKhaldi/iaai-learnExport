{
  "id": "b0f913cb-b8d0-4e3d-b8df-ed9c7610c4a0",
  "title": "ECMAScript 2018",
  "slug": "ecmascript-2018",
  "metadata": {
    "description": "Learn about ECMAScript 2018 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "javascript",
      "object",
      "ecmascript",
      "features",
      "promise",
      "threads",
      "asynchronous",
      "finally",
      "memory",
      "rest"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS 2018"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2018",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nNew Features in ECMAScript 2018\nThis chapter introduces the new features in ECMAScript 2018:\nAsynchronous Iteration\nPromise Finally\nObject Rest Properties\nNew RegExp Features\nJavaScript Shared Memory\nJavaScript Asynchronous Iteration\nECMAScript 2018 added asynchronous iterators and iterables.\nWith asynchronous iterables, we can use the\nawait\nkeyword in\nfor/of\nloops.\nExample\nfor await () {}\nJavaScript asynchronous iteration is supported in all modern browsers since January 2020:\nChrome 63\nEdge 79\nFirefox 57\nSafari 11\nOpera 50\nDec 2017\nJan 2020\nNov 2017\nSep 2017\nJan 2018\nJavaScript Promise.finally\nECMAScript 2018 finalizes the full implementation of the Promise object with\nPromise.finally\n:\nExample\nlet myPromise = new Promise();\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();\nPromise.finally\nis supported in all modern browsers since November 2018:\nChrome 63\nEdge 18\nFirefox 58\nSafari 11.1\nOpera 50\nDec 2017\nNov 2018\nJan 2018\nMar 2018\nJan 2018\nJavaScript Object Rest Properties\nECMAScript 2018 added rest properties.\nThis allows us to destruct an object and collect the leftovers onto a new object:\nExample\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nz; // { a: 3, b: 4 }\nObject rest properties is supported in all modern browsers since January 2020:\nChrome 60\nEdge 79\nFirefox 55\nSafari 11.1\nOpera 47\nJul 2017\nJan 2020\nAug 2017\nMar 2018\nAug 2017\nNew JavaScript RegExp Features\nECMAScript 2018 added 4 new RegExp features:\nUnicode Property Escapes (\\p{...})\nLookbehind Assertions (?<= ) and (?<! )\nNamed Capture Groups\ns (dotAll) Flag\nThe new RegExp features is supported in all modern browsers since June 2020:\nChrome 64\nEdge 79\nFirefox 78\nSafari 12\nOpera 51\nJan 2018\nJan 2020\nJun 2020\nSep 2018\nFeb 2018\nJavaScript Threads\nIn JavaScript you use the Web Workers API to create threads.\nWorker threads are used to execute code in the background so that the main program can continue execution.\nWorker threads run simultaneously with the main program. Simultaneous execution of different parts\nof a program can be time-saving.\nJavaScript Shared Memory\nShared memory is a feature that allows threads (different parts of a program) to\naccess and update the same data in the same memory.\nInstead of passing data between threads, you can pass a SharedArrayBuffer object\nthat points to the memory where data is saved.\nSharedArrayBuffer\nA SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "for await () {}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let myPromise = new Promise();\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\ny; // 2\nz; // { a: 3, b: 4 }",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "for await () {}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let myPromise = new Promise();\n# TODO: Complete this line\nmyPromise.catch();\nmyPromise.finally();",
      "solution": "let myPromise = new Promise();\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();"
    }
  ],
  "related_topics": [
    {
      "id": "d7d28fe4-6e1d-42d9-9ebd-e23f7edcfa22",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6eaa6273-d570-4722-946f-f9ba2ee585af",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e198d313-ec14-4ce7-8259-70fd47251363",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "None of the above.",
        "named by year: ES2016",
        "None of the above.",
        "supported in all modern browsers since January 2020:\nChrome 63\nEdge 79\nFirefox 57\nSafari 11\nOpera 50\nDec 2017\nJan 2020\nNov 2017\nSep 2017\nJan 2018\nJavaScript Promise"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "What is JavaScript asynchronous iteration?",
      "options": [
        "None of the above.",
        "None of the above.",
        "supported in all modern browsers since January 2020:\nChrome 63\nEdge 79\nFirefox 57\nSafari 11\nOpera 50\nDec 2017\nJan 2020\nNov 2017\nSep 2017\nJan 2018\nJavaScript Promise",
        "named by year: ES2016"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript asynchronous iteration is 'supported in all modern browsers since January 2020:\nChrome 63\nEdge 79\nFirefox 57\nSafari 11\nOpera 50\nDec 2017\nJan 2020\nNov 2017\nSep 2017\nJan 2018\nJavaScript Promise'."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2018 concepts and techniques. You'll learn how to use ECMAScript 2018 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2018 and how to apply it in your projects."
}