{
  "id": "48652f43-fe27-49fa-8ba0-0716a36867e1",
  "title": "JavaScript Object Protection",
  "slug": "javascript-object-protection",
  "metadata": {
    "description": "Learn about JavaScript Object Protection with clear explanations and practical examples.",
    "keywords": [
      "object",
      "person",
      "fruits",
      "const",
      "seal",
      "create",
      "true",
      "freeze",
      "method",
      "javascript"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Object Protection"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Object Protection",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Object Protection Methods\n// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)\nUsing const\nThe most common way to protect an object from being changed\nis by using the\nconst\nkeyword.\nWith\nconst\nyou can not re-assign the object,\nbut you can still change the value of a property, delete a property or create a new property.\nJavaScript Object.preventExtensions()\nThe\nObject.preventExtensions()\nmethod prevents adding properties to an object.\nExample\n// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n// This will throw an error\nperson.nationality = \"English\";\n\nSince arrays are objects, arrays can be prevented from extensions too:\nExample\n// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.preventExtensions(fruits);\n// This will throw an error:\nfruits.push(\"Kiwi\");\n\nJavaScript Object.isExtensible()\nYou can use\nObject.isExtensible()\nto check if an object is extensible.\nThe\nObject.isExtensible()\nreturns true if an object is extensible.\nExamples\n// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n// This will return false\nlet answer = Object.isExtensible(person);\n\n// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n// Prevent Extensions\nObject.preventExtensions(fruits);\n// This will return false\nlet answer = Object.isExtensible(fruits);\n\nJavaScript Object.seal()\nThe\nObject.seal()\nmethod prevents additions or deletions of new properties.\nThe\nObject.seal()\nmethod makes existing properties non-configurable.\nThe\nObject.isSealed()\nmethod can be used to check if an object is sealed.\nNote\nThe\nObject.seal()\nmethod will fail silently in non-strict mode and throw a TypeError in strict mode.\nExample\n\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Seal Object\nObject.seal(person)\n// This will throw an error\ndelete person.age;\n\nSince arrays are objects, arrays can be sealed too:\nExample\n// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.seal(fruits);\n// This will throw an error:\nfruits.push(\"Kiwi\");\n\nJavaScript Object.isSealed()\nThe\nObject.isSealed()\nmethod can be used to check if an object is sealed.\nThe\nObject.isSealed()\nreturns true if an object is sealed.\nExamples\n// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Seal Object\nObject.seal(person);\n// This will return true\nlet answer = Object.isSealed(person);\n\n// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n// Seal Array\nObject.seal(fruits);\n// This will return true\nlet answer = Object.isSealed(fruits);\n\nJavaScript Object.freeze()\nThe\nObject.freeze()\nmethod prevents any changes to an object.\nFrozen objects are read-only.\nNo modification, addition or deletion of properties are allowed.\nNote\nThe\nObject.freeze()\nmethod will fail silently in non-strict mode and throw a TypeError in strict mode.\nExample\n\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Freeze Object\nObject.freeze(person)\n// This will throw an error\nperson.age = 51;\n\nSince arrays are objects, arrays can be frozen too:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.freeze(fruits);\n// This will trow an error:\nfruits.push(\"Kiwi\");\n\nJavaScript Object.isFrozen()\nThe\nObject.isFrozen()\nmethod can be used to check if an object is frozen.\nThe\nObject.isFrozen()\nreturns true if an object is frozen.\nExamples\n// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Freeze Object\nObject.freeze(person);\n// This will return true\nlet answer = Object.isFrozen(person);\n\n// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.freeze(fruits);\n// This will return true:\nlet answer = Object.isFrozen(fruits);\n\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n// This will throw an error\nperson.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.preventExtensions(fruits);\n// This will throw an error:\nfruits.push(\"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 6,
      "code": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n// This will return false\nlet answer = Object.isExtensible(person);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Seal Object\nObject.seal(person)\n// This will throw an error\ndelete person.age;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.seal(fruits);\n// This will throw an error:\nfruits.push(\"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 9,
      "code": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Seal Object\nObject.seal(person);\n// This will return true\nlet answer = Object.isSealed(person);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Freeze Object\nObject.freeze(person)\n// This will throw an error\nperson.age = 51;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.freeze(fruits);\n// This will trow an error:\nfruits.push(\"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 12,
      "code": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Freeze Object\nObject.freeze(person);\n// This will return true\nlet answer = Object.isFrozen(person);",
      "language": "javascript",
      "explanation": "Example of examples"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\n# TODO: Complete this line\n// Returns true if object is frozen\nObject.isFrozen(object)",
      "solution": "// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n# TODO: Complete this line\nperson.nationality = \"English\";",
      "solution": "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Prevent Extensions\nObject.preventExtensions(person);\n// This will throw an error\nperson.nationality = \"English\";"
    }
  ],
  "related_topics": [
    {
      "id": "2d72534a-c4cc-43a7-aebc-406e73879e70",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bfa333d8-81e4-4f56-847f-56434206aee8",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "76f21a86-0d2c-45d7-ac9a-2ce4b1e5ea4a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Returns true if object?",
      "options": [
        "sealed\nObject",
        "None of the above.",
        "frozen\nObject",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Returns true if object is 'sealed\nObject'."
    },
    {
      "question": "What is Returns true if object?",
      "options": [
        "frozen\nObject",
        "None of the above.",
        "None of the above.",
        "sealed\nObject"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Returns true if object is 'frozen\nObject'."
    }
  ],
  "summary": "This tutorial covers JavaScript Object Protection concepts and techniques. You'll learn how to use JavaScript Object Protection effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Object Protection and how to apply it in your projects."
}