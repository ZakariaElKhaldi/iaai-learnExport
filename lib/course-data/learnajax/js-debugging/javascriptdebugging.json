{
  "id": "3a1932a0-ec99-451a-98ce-ef980107ac8b",
  "title": "JavaScriptDebugging",
  "slug": "javascriptdebugging",
  "metadata": {
    "description": "Learn about JavaScriptDebugging with clear explanations and practical examples.",
    "keywords": [
      "debugger",
      "console",
      "debugging",
      "code",
      "select",
      "menu",
      "javascript",
      "errors",
      "browser",
      "tools"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Debugging"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nDebugging",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Errors can (will) happen, every time you write some new computer code.\nCode Debugging\nProgramming code might contain syntax errors, or logical errors.\nMany of these errors are difficult to diagnose.\nOften, when programming code contains errors, nothing will happen. There are \nno error messages, and you will get no indications where to search for errors.\nSearching for (and fixing) errors in programming code is called code debugging.\nJavaScript Debuggers\nDebugging is not easy. But fortunately, all modern browsers have a built-in \nJavaScript debugger.\nBuilt-in debuggers can be turned on and off, forcing errors to be reported to \nthe user.\nWith a debugger, you can also set breakpoints (places where code execution \ncan be stopped), and examine variables while the code is executing.\nNormally (otherwise follow the steps at the bottom of this page), you activate debugging in your browser with \nthe F12 key, and select \"Console\" in the debugger menu.\nThe console.log() Method\nIf your browser supports debugging, you can use\nconsole.log()\nto \ndisplay JavaScript values in the debugger window:\nExample\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1>\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n</body>\n</html>\n\nTip:\nRead more about the\nconsole.log()\nmethod in our\nJavaScript Console Reference\n.\nSetting Breakpoints\nIn the debugger window, you can set breakpoints in the JavaScript code.\nAt each breakpoint, JavaScript will stop executing, and let you examine \nJavaScript values.\nAfter examining values, you can resume the execution of code (typically with \na play button).\nThe debugger Keyword\nThe\ndebugger\nkeyword stops the execution of JavaScript, \nand calls (if available) the debugging function.\nThis has the same function as setting a breakpoint in the debugger.\nIf no debugging is available, the debugger statement has no effect.\nWith the debugger turned on, this code will stop executing before it \nexecutes the third line.\nExample\nlet x = 15 * 5;\ndebugger;\ndocument.getElementById(\"demo\").innerHTML = x;\n\nMajor Browsers' Debugging Tools\nNormally, you activate debugging in your browser with F12, and select \"Console\" in the debugger menu.\nOtherwise follow these steps:\nChrome\nOpen the browser.\nFrom the menu, select \"More tools\".\nFrom tools, choose \"Developer tools\".\nFinally, select Console.\nFirefox\nOpen the browser.\nFrom the menu, select \"Web Developer\".\nFinally, select \"Web Console\".\nEdge\nOpen the browser.\nFrom the menu, select \"Developer Tools\".\nFinally, select \"Console\".\nOpera\nOpen the browser.\nFrom the menu, select \"Developer\".\nFrom \"Developer\", select \"Developer tools\".\nFinally, select \"Console\".\nSafari\nGo to Safari, Preferences, Advanced in the main menu.\nCheck \"Enable Show Develop menu in menu bar\".\nWhen the new option \"Develop\" appears in the menu:\nChoose \"Show Error \n Console\".\nDid You Know?\nDebugging is the process of testing, finding, and reducing bugs (errors) in computer programs.\nThe first known computer bug was a real bug (an insect) stuck in the electronics.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1>\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 15 * 5;\ndebugger;\ndocument.getElementById(\"demo\").innerHTML = x;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n# TODO: Complete this line\n<h1>My First Web Page</h1>\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1>\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = 15 * 5;\n# TODO: Complete this line\ndocument.getElementById(\"demo\").innerHTML = x;",
      "solution": "let x = 15 * 5;\ndebugger;\ndocument.getElementById(\"demo\").innerHTML = x;"
    }
  ],
  "related_topics": [
    {
      "id": "9bc9c107-93d0-4922-8ff3-98a1b0c0600f",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "358ce2dd-2c52-4ae2-9ae4-68c1320528b9",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e136a518-4173-4b99-80e0-1ed4af2843d3",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Many of these errors?",
      "options": [
        "no error messages",
        "None of the above.",
        "None of the above.",
        "difficult to diagnose"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Many of these errors is 'difficult to diagnose'."
    },
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "None of the above.",
        "no error messages",
        "difficult to diagnose"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of There is 'no error messages'."
    }
  ],
  "summary": "This tutorial covers JavaScriptDebugging concepts and techniques. You'll learn how to use JavaScriptDebugging effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptDebugging and how to apply it in your projects."
}