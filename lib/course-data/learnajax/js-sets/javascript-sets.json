{
  "id": "70f84739-821f-43c5-beee-3ba7ffccd3bf",
  "title": "JavaScript Sets",
  "slug": "javascript-sets",
  "metadata": {
    "description": "Learn about JavaScript Sets with clear explanations and practical examples.",
    "keywords": [
      "letters",
      "create",
      "const",
      "values",
      "example",
      "javascript",
      "elements",
      "returns",
      "reference",
      "variables"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Sets"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Sets",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A JavaScript Set is a collection of unique values.\nEach value can only occur once in a Set.\nThe values can be of any type, primitive values or objects.\nHow to Create a Set\nYou can create a JavaScript Set by:\nPassing an array to\nnew Set()\nCreate an empty set and use\nadd()\nto add values\nThe new Set() Method\nPass an array to the\nnew Set()\nconstructor:\nExample\n// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\nCreate a Set and add values:\nExample\n// Create a Set\nconst letters = new Set();\n// Add Values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\n\nCreate a Set and add variables:\nExample\n// Create a Set\nconst letters = new Set();\n// Create Variables\nconst a = \"a\";\nconst b = \"b\";\nconst c = \"c\";\n// Add Variables to the Set\nletters.add(a);\nletters.add(b);\nletters.add(c);\n\nThe add() Method\nExample\nletters.add(\"d\");\nletters.add(\"e\");\n\nIf you add equal elements, only the first will be saved:\nExample\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\n\nListing the Elements\nYou can list all Set elements (values) with a\nfor..of\nloop:\nExample\n// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n// List all Elements\nlet text = \"\";\nfor (const x of letters) {\ntext += x;\n}\n\nSets are Objects\ntypeof\nreturns object:\ntypeof letters;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns object\n\ninstanceof Set\nreturns true:\nletters instanceof Set;\u00a0\u00a0// Returns true\n\nComplete Set Reference\nFor a complete reference, go to our:\nComplete JavaScript Set Reference\n.\nThe reference contains descriptions and examples of all Set Properties and Methods.\nBrowser Support\nSet\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nSet\nis not supported in Internet Explorer.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a Set\nconst letters = new Set();\n// Add Values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a Set\nconst letters = new Set();\n// Create Variables\nconst a = \"a\";\nconst b = \"b\";\nconst c = \"c\";\n// Add Variables to the Set\nletters.add(a);\nletters.add(b);\nletters.add(c);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "letters.add(\"d\");\nletters.add(\"e\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "letters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n// List all Elements\nlet text = \"\";\nfor (const x of letters) {\ntext += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "typeof letters;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns object",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Set\nconst letters = new Set();\n# TODO: Complete this line\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");",
      "solution": "// Create a Set\nconst letters = new Set();\n// Add Values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");"
    }
  ],
  "related_topics": [
    {
      "id": "dd656f0d-a30f-40ba-be68-6d64d80de041",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4b1fd743-a69c-4001-a427-5cdbfe43f8e0",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b01c29f0-9835-43cd-9cf6-bc7d4d6eeb04",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Sets\n\nA JavaScript Set?",
      "options": [
        "None of the above.",
        "a collection of unique values",
        "None of the above.",
        "Objects\ntypeof\nreturns object:\ntypeof letters;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns object\n\ninstanceof Set\nreturns true:\nletters instanceof Set;\u00a0\u00a0// Returns true\n\nComplete Set Reference\nFor a complete reference"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of JavaScript Sets\n\nA JavaScript Set is 'a collection of unique values'."
    },
    {
      "question": "What is Sets?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Objects\ntypeof\nreturns object:\ntypeof letters;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns object\n\ninstanceof Set\nreturns true:\nletters instanceof Set;\u00a0\u00a0// Returns true\n\nComplete Set Reference\nFor a complete reference",
        "a collection of unique values"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Sets is 'Objects\ntypeof\nreturns object:\ntypeof letters;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns object\n\ninstanceof Set\nreturns true:\nletters instanceof Set;\u00a0\u00a0// Returns true\n\nComplete Set Reference\nFor a complete reference'."
    }
  ],
  "summary": "This tutorial covers JavaScript Sets concepts and techniques. You'll learn how to use JavaScript Sets effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Sets and how to apply it in your projects."
}