{
  "id": "ee1b9fe7-8106-43c4-82b7-4d01f4b42ba6",
  "title": "JavaScript Object Definition",
  "slug": "javascript-object-definition",
  "metadata": {
    "description": "Learn about JavaScript Object Definition with clear explanations and practical examples.",
    "keywords": [
      "object",
      "person",
      "property",
      "javascript",
      "methods",
      "properties",
      "using",
      "create",
      "const",
      "eyecolor"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "Object Definitions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Object Definition",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Methods for Defining JavaScript Objects\nUsing an Object Literal\nUsing the\nnew\nKeyword\nUsing an Object Constructor\nUsing\nObject.assign()\nUsing\nObject.create()\nUsing\nObject.fromEntries()\nJavaScript Object Literal\nAn object literal is a list of property\nnames:values\ninside curly braces\n{}\n.\n{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nNote:\nAn\nobject literal\nis also called an\nobject initializer\n.\nCreating a JavaScript Object\nExamples\nCreate an empty JavaScript object using\n{}\n, and add 4 properties:\n// Create an Object\nconst person = {};\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";\n\nCreate an empty JavaScript object using\nnew Object()\n, and add 4 properties:\n// Create an Object\nconst person = new Object();\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";\n\nNote:\nThe examples above do exactly the same.\nBut, there is no need to use\nnew Object()\n.\nFor readability, simplicity and execution speed, use the\nobject literal\nmethod.\nObject Constructor Functions\nSometimes we need to create many objects of the same\ntype\n.\nTo create an\nobject type\nwe use an\nobject constructor function\n.\nIt is considered good practice to name constructor functions with an upper-case first letter.\nObject Type Person\nfunction Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}\nTry \nit yourself \u00bb\nNote:\nIn the constructor function,\nthis\nhas no value.\nThe value of\nthis\nwill become the new object when \na new object is created.\nSee Also:\nThe JavaScript\nthis\nTutorial\nNow we can use\nnew Person()\nto create many new Person objects:\nExample\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");\nTry \nit yourself \u00bb\nProperty Default Values\nA\nvalue\ngiven to a property will be a\ndefault value\nfor all objects\ncreated by the constructor:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}\n\nJavaScript Object Methods\nJavaScript Object Methods can be grouped into:\nGeneral Methods\nProperty Management Methods\nObject Protection Methods\nGeneral Methods\n// Copies properties from a source object to a target object\nObject.assign(target, source)\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)\nJavaScript General Object Methods\nProperty Management Methods\n// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)\nJavaScript Property Management Methods\nObject Protection Methods\n// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)\nUsing const\nThe most common way to protect an object from being changed\nis by using the\nconst\nkeyword.\nWith\nconst\nyou can not re-assign the object,\nbut you can still change the value of a property, delete a property or create a new property.\nJavaScript Object Protection Methods\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "// Create an Object\nconst person = {};\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Object Type Person",
      "content": "",
      "order": 4,
      "code": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}",
      "language": "javascript",
      "explanation": "Example of object type person"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Copies properties from a source object to a target object\nObject.assign(target, source)\n// Creates an object from an existing object\nObject.create(object)\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n// Creates an object from a list of keys/values\nObject.fromEntries()\n// Returns an array of the keys of an object\nObject.keys(object)\n// Returns an array of the property values of an object\nObject.values(object)\n// Groups object elements according to a function\nObject.groupBy(object, callback)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Prevents adding object properties\nObject.preventExtensions(object)\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n// Prevents adding and deleting object properties\nObject.seal(object)\n// Returns true if object is sealed\nObject.isSealed(object)\n// Prevents any changes to an object\nObject.freeze(object)\n// Returns true if object is frozen\nObject.isFrozen(object)",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create an Object\nconst person = {};\n// Add Properties\nperson.firstName = \"John\";\n# TODO: Complete this line\nperson.age = 50;\nperson.eyeColor = \"blue\";",
      "solution": "// Create an Object\nconst person = {};\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\n# TODO: Complete this line\n}",
      "solution": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "01a6b644-7e70-474b-a187-116cf5e2dc58",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a8e53e2b-fb97-43b0-8af7-3a524e5245ff",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f5bacfd1-610e-4dd0-8377-640985d6918d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Object Literal\nAn object literal?",
      "options": [
        "a list of property\nnames:values\ninside curly braces\n{}",
        "None of the above.",
        "None of the above.",
        "also called an\nobject initializer"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Object Literal\nAn object literal is 'a list of property\nnames:values\ninside curly braces\n{}'."
    },
    {
      "question": "What is An\nobject literal?",
      "options": [
        "None of the above.",
        "also called an\nobject initializer",
        "None of the above.",
        "a list of property\nnames:values\ninside curly braces\n{}"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of An\nobject literal is 'also called an\nobject initializer'."
    }
  ],
  "summary": "This tutorial covers JavaScript Object Definition concepts and techniques. You'll learn how to use JavaScript Object Definition effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Object Definition and how to apply it in your projects."
}