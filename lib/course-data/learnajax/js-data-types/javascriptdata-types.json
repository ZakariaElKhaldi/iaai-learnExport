{
  "id": "6dd86554-2237-484b-b3eb-1ec4cdf68199",
  "title": "JavaScriptData Types",
  "slug": "javascriptdata-types",
  "metadata": {
    "description": "Learn about JavaScriptData Types with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "example",
      "string",
      "undefined",
      "typeof",
      "numbers",
      "volvo",
      "number",
      "type",
      "quotes"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nData Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript has 8 Datatypes\nString\nNumber\nBigint\nBoolean\nUndefined\nNull\nSymbol\nObject\nThe Object Datatype\nThe object data type can contain both\nbuilt-in objects\n, and\nuser defined objects\n:\nBuilt-in object types can be:\nobjects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.\nExamples\n// Numbers:\nlet length = 16;\nlet weight = 7.5;\n// Strings:\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n// Booleans\nlet x = true;\nlet y = false;\n// Object:\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Array object:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Date object:\nconst date = new Date(\"2022-03-25\");\nNote\nA JavaScript variable can hold any type of data.\nThe Concept of Data Types\nIn programming, data types is an important concept.\nTo be able to operate on variables, it is important to know something about \nthe type.\nWithout data types, a computer cannot safely solve this:\nlet x = 16 + \"Volvo\";\nDoes it make any sense to add \"Volvo\" to sixteen? Will it produce an \nerror or will it produce a result?\nJavaScript will treat the example above as:\nlet x = \"16\" + \"Volvo\";\nNote\nWhen adding a number and a string, JavaScript will treat the number as a \nstring.\nExample\nlet x = 16 + \"Volvo\";\n\nExample\nlet x = \"Volvo\" + 16;\n\nJavaScript evaluates expressions from left to right. Different sequences can \nproduce different results:\nJavaScript:\nlet x = 16 + 4 + \"Volvo\";\nResult:\n20Volvo\n\nJavaScript:\nlet x = \"Volvo\" + 16 + 4;\nResult:\nVolvo164\n\nIn the first example, JavaScript treats 16 and 4 as numbers, until it reaches \"Volvo\".\nIn the second example, since the first operand is a string, all operands are \ntreated as strings.\nJavaScript Types are Dynamic\nJavaScript has dynamic types. This means that the same variable can be used \nto hold \ndifferent data types:\nExample\nlet x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Now x is undefined\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Now x is a Number\nx = \"John\";\u00a0 // Now x is a String\nTry \nit Yourself \u00bb\nJavaScript Strings\nA string (or a text string) is a series of characters like \"John Doe\".\nStrings are written with quotes. You can use single or double quotes:\nExample\n// Using double quotes:\nlet carName1 = \"Volvo XC60\";\n// Using single quotes:\nlet carName2 = 'Volvo XC60';\nTry \nit Yourself \u00bb\nYou can use quotes inside a string, as long as they don't match the quotes \nsurrounding the string:\nExample\n// Single quote inside double quotes:\nlet answer1 = \"It's alright\";\n// Single quotes inside double quotes:\nlet answer2 = \"He is called 'Johnny'\";\n// Double quotes inside single quotes:\nlet answer3 = 'He is called \"Johnny\"';\nTry \nit Yourself \u00bb\nYou will learn more about\nstrings\nlater in this tutorial.\nJavaScript Numbers\nAll JavaScript numbers are stored as decimal numbers (floating point).\nNumbers can be written with, or without decimals:\nExample\n// With decimals:\nlet x1 = 34.00;\n// Without decimals:\nlet x2 = 34;\nTry \nit Yourself \u00bb\nExponential Notation\nExtra large or extra small numbers can be written with scientific \n(exponential) notation:\nExample\nlet y = 123e5;\u00a0\u00a0\u00a0\u00a0// 12300000\nlet z = 123e-5;\u00a0\u00a0\u00a0// 0.00123\nTry \nit Yourself \u00bb\nNote\nMost programming languages have many number types:\nWhole numbers (integers):\nbyte (8-bit), short (16-bit), int (32-bit), long (64-bit)\nReal numbers (floating-point):\nfloat (32-bit), double (64-bit).\nJavascript numbers are always one type:\ndouble (64-bit floating point).\nYou will learn more about\nnumbers\nlater in this tutorial.\nJavaScript BigInt\nAll JavaScript numbers are stored in a 64-bit floating-point format.\nJavaScript BigInt is a new datatype (\nES2020\n) that can be used to store integer values that are too big to be represented\nby a normal JavaScript Number.\nExample\nlet x = BigInt(\"123456789012345678901234567890\");\nTry \nit Yourself \u00bb\nYou will learn more about\nBigInt\nlater in this tutorial.\nJavaScript Booleans\nBooleans can only have two values:\ntrue\nor\nfalse\n.\nExample\nlet x = 5;\nlet y = 5;\nlet z = 6;\n(x == y)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Returns true\n(x == z)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n  false\n\nBooleans are often used in conditional testing.\nYou will learn more about\nbooleans\nlater in this tutorial.\nJavaScript Arrays\nJavaScript arrays are written with square brackets.\nArray items are separated by commas.\nThe following code declares (creates) an array called\ncars\n, containing three \nitems (car names):\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\nArray indexes are zero-based, which means the first item is [0], second is \n[1], and so on.\nYou will learn more about\narrays\nlater in this tutorial.\nJavaScript Objects\nJavaScript objects are written with curly braces\n{}\n.\nObject \nproperties are written as name:value pairs, separated by commas.\nExample\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\n\nThe object (person) in the example above has 4 properties: firstName, \nlastName, age, and eyeColor.\nYou will learn more about\nobjects\nlater in this tutorial.\nThe typeof Operator\nYou can use the JavaScript\ntypeof\noperator to find the type \nof a JavaScript variable.\nThe\ntypeof\noperator returns the type of a variable or an expression:\nExample\ntypeof \"\"\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"\ntypeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"\ntypeof \"John Doe\"\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"\n\nExample\ntypeof 0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"number\"\ntypeof 314\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof (3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof (3 + 4)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\n\nYou will learn more about\ntypeof\nlater in this tutorial.\nUndefined\nIn JavaScript, a variable without a value, has the value\nundefined\n. \nThe type is also\nundefined\n.\nExample\nlet car;\u00a0\u00a0\u00a0 // Value is undefined, \n    type is undefined\n\nAny variable can be emptied, by setting the value to\nundefined\n. \nThe type will also be\nundefined\n.\nExample\ncar = undefined;\u00a0\u00a0\u00a0 // Value is undefined, \n    type is undefined\n\nEmpty Values\nAn empty value has nothing to do with\nundefined\n.\nAn empty string has both a legal value and a type.\nExample\nlet car = \"\";\u00a0\u00a0\u00a0 // \n    The value is \n    \"\", the typeof is \"string\"\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "// Numbers:\nlet length = 16;\nlet weight = 7.5;\n// Strings:\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n// Booleans\nlet x = true;\nlet y = false;\n// Object:\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Array object:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Date object:\nconst date = new Date(\"2022-03-25\");",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 16 + \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = \"16\" + \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 16 + \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = \"Volvo\" + 16;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "JavaScript:",
      "content": "",
      "order": 8,
      "code": "let x = 16 + 4 + \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of javascript:"
    },
    {
      "type": "code_example",
      "title": "JavaScript:",
      "content": "",
      "order": 9,
      "code": "let x = \"Volvo\" + 16 + 4;",
      "language": "javascript",
      "explanation": "Example of javascript:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Now x is undefined\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Now x is a Number\nx = \"John\";\u00a0 // Now x is a String",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// Using double quotes:\nlet carName1 = \"Volvo XC60\";\n// Using single quotes:\nlet carName2 = 'Volvo XC60';",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "// Single quote inside double quotes:\nlet answer1 = \"It's alright\";\n// Single quotes inside double quotes:\nlet answer2 = \"He is called 'Johnny'\";\n// Double quotes inside single quotes:\nlet answer3 = 'He is called \"Johnny\"';",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "// With decimals:\nlet x1 = 34.00;\n// Without decimals:\nlet x2 = 34;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let y = 123e5;\u00a0\u00a0\u00a0\u00a0// 12300000\nlet z = 123e-5;\u00a0\u00a0\u00a0// 0.00123",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let x = BigInt(\"123456789012345678901234567890\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let x = 5;\nlet y = 5;\nlet z = 6;\n(x == y)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Returns true\n(x == z)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n  false",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "typeof \"\"\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"\ntypeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"\ntypeof \"John Doe\"\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"string\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "typeof 0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns \n \"number\"\ntypeof 314\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof (3)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"\ntypeof (3 + 4)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Returns \n \"number\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "let car;\u00a0\u00a0\u00a0 // Value is undefined, \n    type is undefined",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "car = undefined;\u00a0\u00a0\u00a0 // Value is undefined, \n    type is undefined",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let car = \"\";\u00a0\u00a0\u00a0 // \n    The value is \n    \"\", the typeof is \"string\"",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Numbers:\n# TODO: Complete this line\nlet weight = 7.5;\n// Strings:\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n// Booleans\nlet x = true;\nlet y = false;\n// Object:\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Array object:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Date object:\nconst date = new Date(\"2022-03-25\");",
      "solution": "// Numbers:\nlet length = 16;\nlet weight = 7.5;\n// Strings:\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n// Booleans\nlet x = true;\nlet y = false;\n// Object:\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Array object:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Date object:\nconst date = new Date(\"2022-03-25\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 16 + \"Volvo\";"
    }
  ],
  "related_topics": [
    {
      "id": "d4c87ee6-65f3-4abe-b64c-ee678deadf76",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a567b9c8-9f5e-4a75-a9e3-ade43088d10a",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b49afaf2-6d18-485e-9c47-8e0ab244e767",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is data types?",
      "options": [
        "None of the above.",
        "an important concept",
        "None of the above.",
        "important to know something about \nthe type"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of data types is 'an important concept'."
    },
    {
      "question": "What is it?",
      "options": [
        "important to know something about \nthe type",
        "None of the above.",
        "None of the above.",
        "an important concept"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'important to know something about \nthe type'."
    }
  ],
  "summary": "This tutorial covers JavaScriptData Types concepts and techniques. You'll learn how to use JavaScriptData Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptData Types and how to apply it in your projects."
}