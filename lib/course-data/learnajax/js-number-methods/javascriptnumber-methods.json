{
  "id": "3c08ae48-1e69-4796-a592-0499fc92469d",
  "title": "JavaScriptNumber Methods",
  "slug": "javascriptnumber-methods",
  "metadata": {
    "description": "Learn about JavaScriptNumber Methods with clear explanations and practical examples.",
    "keywords": [
      "number",
      "method",
      "returns",
      "parseint",
      "parsefloat",
      "methods",
      "example",
      "javascript",
      "string",
      "returned"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Number Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nNumber Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Number Methods\nThese\nnumber methods\ncan be used on all JavaScript numbers:\nMethod\nDescription\ntoString()\nReturns a number as a string\ntoExponential()\nReturns a number written in exponential notation\ntoFixed()\nReturns a number written with a number of decimals\ntoPrecision()\nReturns a number written with a specified length\nvalueOf()\nReturns a number as a number\nThe toString() Method\nThe\ntoString()\nmethod returns a number as a string.\nAll number methods can be used on any type of numbers (literals, variables, or expressions):\nExample\nlet x = 123;\nx.toString();\n(123).toString();\n(100 + 23).toString();\n\nThe toExponential() Method\ntoExponential()\nreturns a string, with a number rounded and written using exponential notation.\nA parameter defines the number of characters behind the decimal point:\nExample\nlet x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\nx.toExponential(6);\nTry \nit Yourself \u00bb\nThe parameter is optional. If you don't specify it, JavaScript will not round the number.\nThe toFixed() Method\ntoFixed()\nreturns a string, with the number \nwritten with a specified number of \ndecimals:\nExample\nlet x = 9.656;\nx.toFixed(0);\nx.toFixed(2);\nx.toFixed(4);\nx.toFixed(6);\nTry \nit Yourself \u00bb\ntoFixed(2)\nis perfect for working with money.\nThe toPrecision() Method\ntoPrecision()\nreturns a string, with a number written with a \nspecified length:\nExample\nlet x = 9.656;\nx.toPrecision();\nx.toPrecision(2);\nx.toPrecision(4);\nx.toPrecision(6);\n\nThe valueOf() Method\nvalueOf()\nreturns a number as a number.\nExample\nlet x = 123;\nx.valueOf();\n(123).valueOf();\n(100 + 23).valueOf();\n\nIn JavaScript, a number can be a primitive value (typeof = number) or an \nobject (typeof = object).\nThe\nvalueOf()\nmethod is used internally in JavaScript to convert Number \nobjects to primitive values.\nThere is no reason to use it in your code.\nAll JavaScript data types have a\nvalueOf()\nand a\ntoString()\nmethod.\nConverting Variables to Numbers\nThere are 3 JavaScript methods that can be used \nto convert a variable to a number:\nMethod\nDescription\nNumber()\nReturns a number converted from its argument.\nparseFloat()\nParses its argument and returns a floating point number\nparseInt()\nParses its argument and returns a whole number\nThe methods above are not\nnumber\nmethods. They are\nglobal\nJavaScript methods.\nThe Number() Method\nThe\nNumber()\nmethod can be used to convert JavaScript variables to numbers:\nExample\nNumber(true);\nNumber(false);\nNumber(\"10\");\nNumber(\"\u00a0 10\");\nNumber(\"10\u00a0 \");\nNumber(\" 10\u00a0 \");\nNumber(\"10.33\");\nNumber(\"10,33\");\nNumber(\"10 33\");\nNumber(\"John\");\n\nIf the number cannot be converted,\nNaN\n(Not a Number) is returned.\nThe Number() Method Used on Dates\nNumber()\ncan also convert a date to a number.\nExample\nNumber(new Date(\"1970-01-01\"))\n\nNote\nThe\nDate()\nmethod returns the number of milliseconds since 1.1.1970.\nThe number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:\nExample\nNumber(new Date(\"1970-01-02\"))\n\nExample\nNumber(new Date(\"2017-09-30\"))\n\nThe parseInt() Method\nparseInt()\nparses a string and returns a whole number. Spaces are \nallowed. Only the first number is returned:\nExample\nparseInt(\"-10\");\nparseInt(\"-10.33\");\nparseInt(\"10\");\nparseInt(\"10.33\");\nparseInt(\"10 20 30\");\nparseInt(\"10 years\");\nparseInt(\"years 10\");\nTry \nit Yourself \u00bb\nIf the number cannot be converted,\nNaN\n(Not a Number) is returned.\nThe parseFloat() Method\nparseFloat()\nparses a string and returns a number. Spaces are \nallowed. Only the first number is returned:\nExample\nparseFloat(\"10\");\nparseFloat(\"10.33\");\nparseFloat(\"10 20 30\");\nparseFloat(\"10 years\");\nparseFloat(\"years 10\");\nTry \nit Yourself \u00bb\nIf the number cannot be converted,\nNaN\n(Not a Number) is returned.\nNumber Object Methods\nThese\nobject methods\nbelong to the\nNumber\nobject:\nMethod\nDescription\nNumber.isInteger()\nReturns true if the argument is an integer\nNumber.isSafeInteger()\nReturns true if the argument is a safe integer\nNumber.parseFloat()\nConverts a string to a number\nNumber.parseInt()\nConverts a string to a whole number\nNumber Methods Cannot be Used on Variables\nThe number methods above belong to the JavaScript\nNumber Object\n.\nThese methods can only be accessed like\nNumber.isInteger()\n.\nUsing X.isInteger() where X is a variable, will result in an error:\nTypeError X.isInteger is not a function\n.\nThe Number.isInteger() Method\nThe\nNumber.isInteger()\nmethod returns\ntrue\nif the argument is an integer.\nExample\nNumber.isInteger(10);\nNumber.isInteger(10.5);\n\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe\nNumber.isSafeInteger()\nmethod returns\ntrue\nif the argument is a safe integer.\nExample\nNumber.isSafeInteger(10);\nNumber.isSafeInteger(12345678901234567890);\n\nSafe integers are all integers from -(2\n53\n- 1) to +(2\n53\n- 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nThe Number.parseFloat() Method\nNumber.parseFloat()\nparses a string and returns a number.\nSpaces are allowed. Only the first number is returned:\nExample\nNumber.parseFloat(\"10\");\nNumber.parseFloat(\"10.33\");\nNumber.parseFloat(\"10 20 30\");\nNumber.parseFloat(\"10 years\");\nNumber.parseFloat(\"years 10\");\nTry \nit Yourself \u00bb\nIf the number cannot be converted,\nNaN\n(Not a Number) is returned.\nNote\nThe\nNumber\nmethods\nNumber.parseInt()\nand\nNumber.parseFloat()\nare the same as the\nGlobal\nmethods\nparseInt()\nand\nparseFloat()\n.\nThe purpose is modularization of globals (to make it easier to use the same JavaScript code outside the browser).\nThe Number.parseInt() Method\nNumber.parseInt()\nparses a string and returns a whole number.\nSpaces are allowed. Only the first number is returned:\nExample\nNumber.parseInt(\"-10\");\nNumber.parseInt(\"-10.33\");\nNumber.parseInt(\"10\");\nNumber.parseInt(\"10.33\");\nNumber.parseInt(\"10 20 30\");\nNumber.parseInt(\"10 years\");\nNumber.parseInt(\"years 10\");\nTry \nit Yourself \u00bb\nIf the number cannot be converted,\nNaN\n(Not a Number) is returned.\nComplete JavaScript Number Reference\nFor a complete Number reference, visit our:\nComplete JavaScript Number Reference\n.\nThe reference contains descriptions and examples of all Number  properties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let x = 123;\nx.toString();\n(123).toString();\n(100 + 23).toString();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\nx.toExponential(6);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 9.656;\nx.toFixed(0);\nx.toFixed(2);\nx.toFixed(4);\nx.toFixed(6);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 9.656;\nx.toPrecision();\nx.toPrecision(2);\nx.toPrecision(4);\nx.toPrecision(6);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = 123;\nx.valueOf();\n(123).valueOf();\n(100 + 23).valueOf();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "Number(true);\nNumber(false);\nNumber(\"10\");\nNumber(\"\u00a0 10\");\nNumber(\"10\u00a0 \");\nNumber(\" 10\u00a0 \");\nNumber(\"10.33\");\nNumber(\"10,33\");\nNumber(\"10 33\");\nNumber(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "Number(new Date(\"1970-01-01\"))",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "Number(new Date(\"1970-01-02\"))",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "Number(new Date(\"2017-09-30\"))",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "parseInt(\"-10\");\nparseInt(\"-10.33\");\nparseInt(\"10\");\nparseInt(\"10.33\");\nparseInt(\"10 20 30\");\nparseInt(\"10 years\");\nparseInt(\"years 10\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "parseFloat(\"10\");\nparseFloat(\"10.33\");\nparseFloat(\"10 20 30\");\nparseFloat(\"10 years\");\nparseFloat(\"years 10\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "Number.isInteger(10);\nNumber.isInteger(10.5);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "Number.isSafeInteger(10);\nNumber.isSafeInteger(12345678901234567890);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "Number.parseFloat(\"10\");\nNumber.parseFloat(\"10.33\");\nNumber.parseFloat(\"10 20 30\");\nNumber.parseFloat(\"10 years\");\nNumber.parseFloat(\"years 10\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "Number.parseInt(\"-10\");\nNumber.parseInt(\"-10.33\");\nNumber.parseInt(\"10\");\nNumber.parseInt(\"10.33\");\nNumber.parseInt(\"10 20 30\");\nNumber.parseInt(\"10 years\");\nNumber.parseInt(\"years 10\");",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = 123;\nx.toString();\n(123).toString();\n# TODO: Complete this line",
      "solution": "let x = 123;\nx.toString();\n(123).toString();\n(100 + 23).toString();"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\n# TODO: Complete this line",
      "solution": "let x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\nx.toExponential(6);"
    }
  ],
  "related_topics": [
    {
      "id": "895b5e85-89fa-434e-bb4a-20e77dd74e16",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "aa416a83-4d9b-465f-80c1-ffa47b09a419",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "9e65144d-4da5-4a0e-8115-82791b430570",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The parameter?",
      "options": [
        "Not a The parameter.",
        "optional",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The parameter is 'optional'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptNumber Methods concepts and techniques. You'll learn how to use JavaScriptNumber Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptNumber Methods and how to apply it in your projects."
}