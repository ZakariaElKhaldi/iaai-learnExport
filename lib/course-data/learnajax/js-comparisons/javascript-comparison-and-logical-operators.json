{
  "id": "f26a36a6-b19a-46cc-a4c0-c0625ca767b8",
  "title": "JavaScript Comparison and Logical Operators",
  "slug": "javascript-comparison-and-logical-operators",
  "metadata": {
    "description": "Learn about JavaScript Comparison and Logical Operators with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "true",
      "false",
      "operator",
      "operators",
      "comparison",
      "equal",
      "value",
      "logical",
      "used",
      "comparing"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAJAX",
    "subcategory": "JS Comparisons"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Comparison and Logical Operators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript Comparison and Logical Operators\n\nComparison and Logical operators are used to test for\ntrue\nor\nfalse",
      "content": ".\nComparison Operators\nComparison operators are used in logical statements to determine equality or difference between variables or values.\nGiven that\nx = 5\n, the table below explains the comparison operators:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Try it",
      "content": "==\nequal to\nx == 8\nfalse\nTry it \u00bb\nx == 5\ntrue\nTry it \u00bb\nx == \"5\"\ntrue\nTry it \u00bb\n===\nequal value and equal type\nx === 5\ntrue\nTry it \u00bb\nx === \"5\"\nfalse\nTry it \u00bb\n!=\nnot equal\nx != 8\ntrue\nTry it \u00bb\n!==\nnot equal value or not equal type\nx !== 5\nfalse\nTry it \u00bb\nx !== \"5\"\ntrue\nTry it \u00bb\nx !== 8\ntrue\nTry it \u00bb\n>\ngreater than\nx > 8\nfalse\nTry it \u00bb\n<\nless than\nx < 8\ntrue\nTry it \u00bb\n>=\ngreater than or equal to\nx >= 8\nfalse\nTry it \u00bb\n<=\nless than or equal to\nx <= 8\ntrue\nTry it \u00bb\nHow Can it be Used\nComparison operators can be used in conditional statements to compare values \nand take action depending on the result:\nif (age < 18) text = \"Too young to buy alcohol\";\nYou will learn more about the use of conditional statements in the \nLogical Operators\nLogical operators are used to determine the logic between variables or values.\nGiven that\nx = 6\nand\ny = 3\n, the table below explains the logical operators:\nOperator\nDescription\nExample\nTry it\n&&\nand\n(x < 10 && y > 1) is true\nTry it \u00bb\n||\nor\n(x == 5 || y == 5) is false\nTry it \u00bb\n!\nnot\n!(x == y) is true\nTry it \u00bb\nConditional (Ternary) Operator\nJavaScript also contains a conditional operator that assigns a value to a variable based on some condition.",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Syntax\nvariablename",
      "content": "= (\ncondition\n) ?\nvalue1\n:\nvalue2\nExample\nlet voteable = (age < 18) ? \"Too young\":\"Old enough\";\n\nIf the variable age is a value below 18, the value of the variable voteable \nwill be \"Too young\", otherwise the value of voteable will be \"Old enough\".\nComparing Different Types\nComparing data of different types may give unexpected results.\nWhen comparing a string with a number, JavaScript will convert the string to \na number when doing the comparison. An empty string converts to 0. A non-numeric \nstring converts to\nNaN\nwhich is always\nfalse\n.\nCase\nValue\nTry\n2 < 12\ntrue\nTry it \u00bb\n2 < \"12\"\ntrue\nTry it \u00bb\n2 < \"John\"\nfalse\nTry it \u00bb\n2 > \"John\"\nfalse\nTry it \u00bb\n2 == \"John\"\nfalse\nTry it \u00bb\n\"2\" < \"12\"\nfalse\nTry it \u00bb\n\"2\" > \"12\"\ntrue\nTry it \u00bb\n\"2\" == \"12\"\nfalse\nTry it \u00bb\nWhen comparing two strings, \"2\" will be greater than \"12\", because \n(alphabetically) 1 is less than 2.\nTo secure a proper result, variables should be converted to the proper type \nbefore comparison:\nage = Number(age);\nif (isNaN(age)) {\nvoteable = \"Input is not a number\";\n} else {\nvoteable = (age < 18) ? \"Too young\" : \"Old enough\";\n}\n\nThe Nullish Coalescing Operator (??)\nThe\n??\noperator returns the first argument if it is not\nnullish\n(\nnull\nor\nundefined\n).\nOtherwise it returns the second argument.\nExample\nlet name = null;\nlet text = \"missing\";\nlet result = name ?? text;\n\nThe nullish operator is supported in all browsers since March 2020:\nChrome 80\nEdge 80\nFirefox 72\nSafari 13.1\nOpera 67\nFeb 2020\nFeb 2020\nJan 2020\nMar 2020\nMar 2020\nThe Optional Chaining Operator (?.)\nThe\n?.\noperator returns\nundefined\nif an object is\nundefined\nor\nnull\n(instead of throwing an error).\nExample\n// Create an object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Ask for car name:\ndocument.getElementById(\"demo\").innerHTML = car?.name;\n\nThe optional chaining operator is supported in all browsers since March 2020:\nChrome 80\nEdge 80\nFirefox 72\nSafari 13.1\nOpera 67\nFeb 2020\nFeb 2020\nJan 2020\nMar 2020\nMar 2020\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "if (age < 18) text = \"Too young to buy alcohol\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let voteable = (age < 18) ? \"Too young\":\"Old enough\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "age = Number(age);\nif (isNaN(age)) {\nvoteable = \"Input is not a number\";\n} else {\nvoteable = (age < 18) ? \"Too young\" : \"Old enough\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let name = null;\nlet text = \"missing\";\nlet result = name ?? text;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Create an object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// Ask for car name:\ndocument.getElementById(\"demo\").innerHTML = car?.name;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "if (age < 18) text = \"Too young to buy alcohol\";"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let voteable = (age < 18) ? \"Too young\":\"Old enough\";"
    }
  ],
  "related_topics": [
    {
      "id": "26a7354d-43d5-4855-a62b-8ab0be21fa05",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ec2afa8b-f7f7-48cf-864d-660be456c436",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "84aa7ed1-0739-4a62-89ba-83103f34ba32",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Comparison and Logical Operators\n\nComparison and Logical operators?",
      "options": [
        "used to test for\ntrue\nor\nfalse",
        "None of the above.",
        "None of the above.",
        "used in logical statements to determine equality or difference between variables or values"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Comparison and Logical Operators\n\nComparison and Logical operators is 'used to test for\ntrue\nor\nfalse'."
    },
    {
      "question": "What is Comparison Operators\nComparison operators?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used in logical statements to determine equality or difference between variables or values",
        "used to test for\ntrue\nor\nfalse"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Comparison Operators\nComparison operators is 'used in logical statements to determine equality or difference between variables or values'."
    }
  ],
  "summary": "This tutorial covers JavaScript Comparison and Logical Operators concepts and techniques. You'll learn how to use JavaScript Comparison and Logical Operators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Comparison and Logical Operators and how to apply it in your projects."
}