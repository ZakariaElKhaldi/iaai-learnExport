{
  "title": "Cyber Security Passwords",
  "url": "https://www.w3schools.com/cybersecurity/cybersecurity_passwords.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Cyber Security Passwords",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Many systems are protected by a simple password. This is not ideal as passwords can in many cases easily be broken, reused, or otherwise abused by attackers. This section will explore attacks and defenses regarding passwords.",
      "html": "<p class=\"intro\">Many systems are protected by a simple password. This is not ideal as passwords can in many cases easily be broken, reused, or otherwise abused by attackers. This section will explore attacks and defenses regarding passwords.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Password Strength",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What determines a strong password? Is it how complex the password is? How many characters it has? The number of special characters?",
      "html": "<p>What determines a strong password? Is it how complex the password is? How many characters it has? The number of special characters?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The famous comic creator xkcd.com brilliantly shows how passwords can be attacked in the comic below. Review it for a second and let us discuss further.",
      "html": "<p>The famous comic creator xkcd.com brilliantly shows how passwords can be attacked in the comic below. Review it for a second and let us discuss further.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p><img alt=\"XKCD Password Strength\" src=\"img_password_strength.png\" style=\"width:100%;max-width:1280px\"/></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "https://xkcd.com/936/",
          "href": "https://xkcd.com/936/",
          "title": ""
        }
      ],
      "text": "Comic from XKCD: https://xkcd.com/936/",
      "html": "<p style=\"text-align:center\">Comic from XKCD: <a href=\"https://xkcd.com/936/\" target=\"_blank\">https://xkcd.com/936/</a></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If we consider the first password Tr0ub4dor&3 , this password is will fit most password policy rules, for example having capitalized letter, numbers, special characters and a length of 11 characters. This password has however some problems, it is:",
      "html": "<p>If we consider the first password <em>Tr0ub4dor&amp;3</em>, this password is will fit most password policy rules, for example having capitalized letter, numbers, special characters and a length of 11 characters. This password has however some problems, it is:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Instead of selecting passwords which have these negative factors, we can instead greatly increase the entropy of passwords in simple ways. If we consider the password CorrectHorseBatteryStaple we see a considerate improvement of the password:",
      "html": "<p>Instead of selecting passwords which have these negative factors, we can instead greatly increase the entropy of passwords in simple ways. If we consider the password <em>CorrectHorseBatteryStaple</em> we see a considerate improvement of the password:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Passwords like this one is called passphrases and is generally a much better practice than a simple word with some complexity. Consider how you could improve the password to be even stronger, and to fit password policy rules such as special characters and capital letters! You can even use spaces in your password, making passphrases even more natural to type.",
      "html": "<p>Passwords like this one is called passphrases and is generally a much better practice than a simple word with some complexity. Consider how you could improve the password to be even stronger, and to fit password policy rules such as special characters and capital letters! You can even use spaces in your password, making passphrases even more natural to type.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Password Managers",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Writing down your password has for many years been considered a bad-practice, but is it really? Using the same password across multiple services online has a significant risk, what if one of those platforms get hacked? Then that password is compromised and attackers can re-use the password across all other services where it is used.",
      "html": "<p>Writing down your password has for many years been considered a bad-practice, but is it really? Using the same password across multiple services online has a significant risk, what if one of those platforms get hacked? Then that password is compromised and attackers can re-use the password across all other services where it is used.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To fight this problem, the recommendation is to not re-use the same password across multiple services. This makes it really hard for users as they are not only required to use unique passwords, but at the same time create strong and robust passwords! A password manager help solve this problem by offering users to, in a secure as possible way, write down passwords in a file, database or other system, making passwords easy accessible and ensuring they are strong and unique across different services.",
      "html": "<p>To fight this problem, the recommendation is to not re-use the same password across multiple services. This makes it really hard for users as they are not only required to use unique passwords, but at the same time create strong and robust passwords! A password manager help solve this problem by offering users to, in a secure as possible way, write down passwords in a file, database or other system, making passwords easy accessible and ensuring they are strong and unique across different services.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When implemented correctly, a password manager will:",
      "html": "<p>When implemented correctly, a password manager will:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Writing down passwords is considered a much lower risk for our users rather than having them reusing passwords. Yes, this is not a perfect solution as the password manager could potentially get compromised, however it is considered a much more safe approach.",
      "html": "<p>Writing down passwords is considered a much lower risk for our users rather than having them reusing passwords. Yes, this is not a perfect solution as the password manager could potentially get compromised, however it is considered a much more safe approach.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Passwordless Solutions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What if passwords in themselves could be put to an end? There is always someone who can not type in a longer passphrase as their password every day. There may be several reasons for this, for example:",
      "html": "<p>What if passwords in themselves could be put to an end? There is always someone who can not type in a longer passphrase as their password every day. There may be several reasons for this, for example:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The development and implementation of systems which does not require users to provide a password is developing rapidly. Instead of asking users to authenticate with a password, what if we allowed them to use for example:",
      "html": "<p>The development and implementation of systems which does not require users to provide a password is developing rapidly. Instead of asking users to authenticate with a password, what if we allowed them to use for example:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are challenges to this, but in terms of security, are we really making the problem worse, or better for our users? We must remember we are not looking to implement perfect security systems, they are normally outside of reach and not implementable, so instead we must make careful considerations on how we can limit the threats and at the same time make life easier for our users. Passwords are not perfect, and neither is passwordless solutions. Which one will you implement for your users?",
      "html": "<p>There are challenges to this, but in terms of security, are we really making the problem worse, or better for our users? We must remember we are not looking to implement perfect security systems, they are normally outside of reach and not implementable, so instead we must make careful considerations on how we can limit the threats and at the same time make life easier for our users. Passwords are not perfect, and neither is passwordless solutions. Which one will you implement for your users?</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Multi-Factor Authentication",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As we learn that regardless of what solution is used to verify users, there will still be significant risks associated with their accounts, other solutions can be implemented to help reduce the risk.",
      "html": "<p>As we learn that regardless of what solution is used to verify users, there will still be significant risks associated with their accounts, other solutions can be implemented to help reduce the risk.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Multi-Factor Authentication allows solutions to not only verify a user based on for example their password, but at the same time require the users to present a second factor to prove who they are.",
      "html": "<p>Multi-Factor Authentication allows solutions to not only verify a user based on for example their password, but at the same time require the users to present a second factor to prove who they are.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p><img alt=\"Multi-Factor Authentication\" class=\"invert-on-dark\" src=\"img_multi-factor-authentication.png\" style=\"width:100%;max-width:1280px\"/></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There can be several different ways to ask for a second factor. Here are a few examples:",
      "html": "<p>There can be several different ways to ask for a second factor. Here are a few examples:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All of the above requires not only a password to be known, but also asks for a second item (a factor) to be provided.",
      "html": "<p>All of the above requires not only a password to be known, but also asks for a second item (a factor) to be provided.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Solutions like these are sometimes considered very invasive to the users. To help solve this problem a concept of DAC (\"Discretionary Access Control\") can be applied. DAC allows the login solution to consider whether or not to challenge a user with a multi-factor code. For example a multi-factor might only be necessary when a user:",
      "html": "<p>Solutions like these are sometimes considered very invasive to the users. To help solve this problem a concept of DAC (\"Discretionary Access Control\") can be applied. DAC allows the login solution to consider whether or not to challenge a user with a multi-factor code. For example a multi-factor might only be necessary when a user:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Password Guessing",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When attackers encounter applications and services, there might be the opportunity to do Password Guessing. Password Guessing is an activity which involves attackers interacting with the application over the network, trying lists of different combinations of usernames and passwords.",
      "html": "<p>When attackers encounter applications and services, there might be the opportunity to do Password Guessing. Password Guessing is an activity which involves attackers interacting with the application over the network, trying lists of different combinations of usernames and passwords.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Password Guessing gives the attacker an opportunity to find accounts with a weak username and password combination.",
      "html": "<p>Password Guessing gives the attacker an opportunity to find accounts with a weak username and password combination.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p><img alt=\"Password Guessing\" class=\"invert-on-dark\" src=\"img_passwordguessing.svg\" style=\"width:100%;max-width:1280px\"/></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the attacker is successful in finding a valid account to log in with, new opportunities is presented to the attacker. Consider what kind of functionality and data is now presented to the attacker. Here are some examples where and attacker successfully guesses someone's password:",
      "html": "<p>If the attacker is successful in finding a valid account to log in with, new opportunities is presented to the attacker. Consider what kind of functionality and data is now presented to the attacker. Here are some examples where and attacker successfully guesses someone's password:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Many network services have built-in administrator accounts, some even with the default password unchanged since it was installed. For each service on the network, attackers can try to log in with default credentials. Furthermore, the attacker can try typical and weak passwords. Here are some examples of typical and weak passwords. Notice all of them end with an exclamation mark in order to defeat password policies:",
      "html": "<p>Many network services have built-in administrator accounts, some even with the default password unchanged since it was installed. For each service on the network, attackers can try to log in with default credentials. Furthermore, the attacker can try typical and weak passwords. Here are some examples of typical and weak passwords. Notice all of them end with an exclamation mark in order to defeat password policies:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Password</th>\n<th>Comment</th>\n</tr>\n<tr>\n<td>Summer2021!</td>\n<td>Many people, including helpdesks of companies, perform password resets and set the password to the season of the year and the year we are currently in.</td>\n</tr>\n<tr>\n<td>W3schools123!</td>\n<td>The name of the company is often used as peoples passwords. The number 123 and ! at the end is selected by users to pass password policies and make it a bit more complex.</td>\n</tr>\n<tr>\n<td>Rosalynn2006!</td>\n<td>Rosalynn, perhaps someone's child? Users often use something of personal affection as their passwords. Names of children and perhaps the year they were born is very popular.</td>\n</tr>\n<tr>\n<td>Qwerty123456!</td>\n<td>A seemingly random password? This password is someone pressing keyboard keys in order, then using numbers to do the same thing.</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A tool which allows us to easily configure lists of usernames and passwords to try against a multitude of different services is THC-Hydra (https://github.com/vanhauser-thc/thc-hydra). It supports plenty of protocols to attack such as:",
      "html": "<p>A tool which allows us to easily configure lists of usernames and passwords to try against a multitude of different services is THC-Hydra (https://github.com/vanhauser-thc/thc-hydra). It supports plenty of protocols to attack such as:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To use THC-Hydra to target for example FTP, the following command can be used:",
      "html": "<p>To use THC-Hydra to target for example FTP, the following command can be used:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "hydra -L common_usernames.txt -P common_passwords.txt ftp://localhost/",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\nhydra -L common_usernames.txt -P common_passwords.txt ftp://localhost/\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This command uses a list of common usernames and common passwords to try each of them against the FTP service at localhost or an IP address of your choice.",
      "html": "<p>This command uses a list of common usernames and common passwords to try each of them against the FTP service at localhost or an IP address of your choice.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Credential Stuffing",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A common attack for attackers to use is Credential Stuffing. This involves attackers downloading huge databases of credentials and testing applicable credentials against the network service. A leak of credentials happen when a third party service is hacked, database is stolen and then leaked on the Internet for anyone to download.",
      "html": "<p>A common attack for attackers to use is Credential Stuffing. This involves attackers downloading huge databases of credentials and testing applicable credentials against the network service. A leak of credentials happen when a third party service is hacked, database is stolen and then leaked on the Internet for anyone to download.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Unfortunately many users re-use the same password on different services, allowing Credential Stuffing attacks to become very efficient against organizations.",
      "html": "<p>Unfortunately many users re-use the same password on different services, allowing Credential Stuffing attacks to become very efficient against organizations.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Password Cracking",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "While Password Guessing is an online attack, Password Cracking is an offline attack. It involves attackers stealing password representations from a target first.",
      "html": "<p>While Password Guessing is an online attack, Password Cracking is an offline attack. It involves attackers stealing password representations from a target first.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Passwords are typically represented as a password hash. A hash is way to store users passwords by sending them through a one-way function, making the password impossible to reverse unless password cracking is used.",
      "html": "<p>Passwords are typically represented as a password hash. A hash is way to store users passwords by sending them through a one-way function, making the password impossible to reverse unless password cracking is used.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the attacker is capable of retrieving credentials from a system, these credentials are likely to be protected via encryption or hashing. Hashing is a one-way function designed to not be reversed into its original value.",
      "html": "<p>If the attacker is capable of retrieving credentials from a system, these credentials are likely to be protected via encryption or hashing. Hashing is a one-way function designed to not be reversed into its original value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Password cracking involves using computing power, that is the CPU (\"Central Processing Unit\") and GPU (\"Graphical Processing Unit\"), to try create password guesses which matches the protected credentials retrieved from the system.",
      "html": "<p>Password cracking involves using computing power, that is the CPU (\"Central Processing Unit\") and GPU (\"Graphical Processing Unit\"), to try create password guesses which matches the protected credentials retrieved from the system.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Services Without Authentication",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By exploring and discovering applications sometimes you can encounter applications which are not protected with authentication. These applications are useful for attackers to explore, for example taking advantage of a search field hunting for sensitive information.",
      "html": "<p>By exploring and discovering applications sometimes you can encounter applications which are not protected with authentication. These applications are useful for attackers to explore, for example taking advantage of a search field hunting for sensitive information.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Many applications on a network can freely be explored, sometimes providing attackers with the exact data they are looking for.",
      "html": "<p>Many applications on a network can freely be explored, sometimes providing attackers with the exact data they are looking for.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When performing network mapping and port scanning exercises, each discovered system and service should be explored.",
      "html": "<p>When performing network mapping and port scanning exercises, each discovered system and service should be explored.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using Existing Credentials",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Typically an attacker is already using credentials of users in the environment. For example if an attacker has compromised someone's computer system they can re-use the credentials already in-use by the system.",
      "html": "<p>Typically an attacker is already using credentials of users in the environment. For example if an attacker has compromised someone's computer system they can re-use the credentials already in-use by the system.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This provides attackers with many more opportunities. Consider all the applications which could now be abused. For example:",
      "html": "<p>This provides attackers with many more opportunities. Consider all the applications which could now be abused. For example:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Once an attacker has access to an application behind access control, vulnerabilities and data is often plentiful.",
      "html": "<p>Once an attacker has access to an application behind access control, vulnerabilities and data is often plentiful.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Credentials from a system can also be extracted via different means, typically involving having administrator access of the system. Mimikatz (https://github.com/gentilkiwi/mimikatz) is such a tool which tries to dump the credentials from the system.",
      "html": "<p>Credentials from a system can also be extracted via different means, typically involving having administrator access of the system. Mimikatz (https://github.com/gentilkiwi/mimikatz) is such a tool which tries to dump the credentials from the system.</p>"
    }
  ]
}