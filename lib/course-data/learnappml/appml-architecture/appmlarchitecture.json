{
  "id": "5c0866d6-a51b-4aad-8206-efc522679c8b",
  "title": "AppMLArchitecture",
  "slug": "appmlarchitecture",
  "metadata": {
    "description": "Learn about AppMLArchitecture with clear explanations and practical examples.",
    "keywords": [
      "c",
      "appml",
      "application",
      "data",
      "model",
      "services",
      "development",
      "applications",
      "html",
      "programming",
      "service"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnAppML",
    "subcategory": "AppML Architecture"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AppML\nArchitecture",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Modern Web Architecture\nAppML combines the most up-to-date techniques and ideas of modern web \ndevelopment.\nAppML focus on speed, simplicity, and low cost:\nLow Cost\nRapid and Agile Web Develoment\nOptimized for Cloud Computing\nHigh Speed and Low Bandwidth Consumption\nMVC (Model Viev Controller) Architecture\nFull Separation of Content from Presentation\nHighly Scalable and Testable\nEasy Configuration and Reconfiguration\nReconfiguration while applications are running\nSmart Support for User Accounts and Roles\nMVC Architecture\nAppML uses an MVC Architecture\nMVC stands for Model, View, Controller\nThe\nModel\ndescribes your application.\nThe\nView\ndisplays your data.\nThe\nController\ncontrols your application (of course).\nWikipedia:\nModel, View, Controller\nThe MODEL - Just JSON\nThe model describes the application.\nThe model is reusable on different hardware \nand software platforms (Server, PC, iPhone, Tablets, etc.).\nThe model is not concerned with presentation or user \ninterface (UI).\nThe model is written in JSON:\nModel\n{\n\"rowsperpage\" : 10,\n\"database\" : {\n\"connection\" : \"localmysql\",\n\"sql\" : \"SELECT CustomerName, City, Country FROM Customers\",\n\"orderby\" : \"CustomerName\"\n},\n\"filteritems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n],\n\"sortitems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n]\n}\nThe VIEW - Just HTML\nThe view is the UI (User Interface) for displaying (and input) data.\nThe view is written in HTML and CSS:\nHTML View\n<!DOCTYPE html>\n<html lang=\"en-US\">\n<title>Customers</title>\n<link rel=\"stylesheet\" href=\"https://www..com/w3css/4/w3.css\">\n<script src=\"https://www..com/appml/2.0.3/appml.js\"></script>\n<body>\n<div class=\"w3-container\" appml-data=\"local?model=model_customers\">\n<h1>Customers</h1>\n<div appml-include-html=\"inc_listcommands.htm\"></div>\n<div appml-include-html=\"inc_filter.htm\"></div>\n<table class=\"w3-table-all\">\n<tr>\n<th>Customer</th>\n<th>City</th>\n<th>Country</th>\n</tr>\n<tr appml-repeat=\"records\">\n<td>{{CustomerName}}</td>\n<td>{{City}}</td>\n<td>{{Country}}</td>\n</tr>\n</table>\n</div>\n</body>\n</html>\n\nThe CONTROLLER - Client and/or Server Scripts\nA client script in the web page can control the application:\nAppML can display data as defined in the model\nAppML can display data as defined by HTML attributes.\nAppML applications can run independent of HTML (hidden)\n(Optionally) AppML can request model data from a web server (SQL \n    server)\n(Optionally) AppML users can edit data\n(Optionally) AppML can send data to a web server\nA server script can control the application by:\nReceiving requests from the client (browser)\nReturning data to the client\nReceiving data from the client\nUpdating data on the server\nTaking care of authentication and security\nThe Art of Programming\nKeeping application size and complexity low, is the main problem of all \nprogramming.\nControlling computer application complexity, is the true art of \nprogramming.\nDeclarative Programming\nSoftware development often breaks deadlines and budgets. Finished software is \noften full of coding errors. This is because computer code is difficult to \ndevelop, test, and maintain.\nCoding is\nOut\n. You should describe more\nWhat\nto do, less\nHow\nto do it.\nWith AppML you\nDeclare\nyour application in the\nModel\nand in the\nView\n.\nWith\nAppML\nthere is\nless (sometimes nothing) \nto code\n.\nWikipedia:\nDeclarative Programming\nRapid and Agile Application Development\nControlling computer application complexity is the true art of programming.\nKeeping application size and complexity under under control is the main \nproblem of all programming.\nRAD is a software development method that uses minimal planning in favor of \nrapid prototyping.\nAppML delivers super-fast prototyping, up to 100 times faster than traditional \ndevelopment methods.\nApplication prototypes can run directly from the application model, without any \ncoding.\nWikipedia: Rapid Application Development\nAgile software development is a method based on step-by-step development, \nwhere solutions are created by users and developers in collaboration.\nWith AppML, applications can be written step by step, in small increments, \nfrom prototypes to full applications.\nWikipedia: Agile Software Development\nCode First\nA web application can be developed in two different ways:\n1. Code First: Using pre-programmed, pre-tested code, adding only new \napplication descriptions.\n2. Contract First: Coding the application from scratch using the full \napplication requirement description.\nAppML\nuses the most rational concept:\nCode First\n.\nService Oriented Architecture (SOA)\nService Oriented Architecture (SOA)\nis an architecture for \nbuilding web applications.\nSOA\noffers low development costs and high flexibility.\nWith\nSOA\n, applications can be created from scratch, or from existing IT \ninfrastructures, and be used, by different applications, on different hardware \nand software.\nSOA\nis a perfect fit for\nMVC\nand\nDeclarative Programming\n, where \ndata can be easily consumed without the concern about how.\nWeb Services\nA\nWeb Service\nis an interface to data, identified by a URL, \njust like a web page.\nA\nWeb Service\ndiffers from a web page, only in the way it \ncommunicates information.\nA typical\nWeb Service\nonly provides data to a web page.\nWith AppML, HTML is the user interface, a\nWeb Service\nprovides the \ndata.\nOriginal Web Services\nwere designed to use XML standards \nlike SOAP, WSDL, and UDDI.\nModern Web Services\nlike AppML are much easier to use.\nSimpler to understand - Can be read by humans\nLightweight - no unnecessary code or markup\nEasy to implement - no development tools required\nBenefits of Web Services\nWeb services are small units of code\nWeb services are designed to handle a limited set of tasks\nWeb services use HTTP based communicating protocols\nWeb services are independent of operating systems\nWeb services are independent of programming languages\nWeb services can connect different applications, systems, and devices\nWeb Services makes it easy to distribute information\nWeb Services favors rapid application development\nExample: A small program designed to supply other \napplications with the stock exchange prices.\nExample: Flight schedules and ticket reservation systems.\nSince web services use HTTP, they are independent of both operating systems and programming languages.\nCloud Computing\nCloud Computing\nis an extension of SOA: Application-as-a service, \nStorage-as-a-service, Data-as-a-service.\nFor most people, Cloud Computing is about storing data on the web:\nEmails and calendars\nDocuments and spreadsheets\nBooks, notes, and to do lists\nMusic, pictures and movies\nDatabases and applications\nThe reasons are pretty obvious:\nTo have access to data from everywhere\nTo share my data with others\nTo survive hardware changes or crashes\nWith AppML, it is very easy to put both databases and applications in the \ncloud.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Model",
      "content": "",
      "order": 3,
      "code": "{\n\"rowsperpage\" : 10,\n\"database\" : {\n\"connection\" : \"localmysql\",\n\"sql\" : \"SELECT CustomerName, City, Country FROM Customers\",\n\"orderby\" : \"CustomerName\"\n},\n\"filteritems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n],\n\"sortitems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n]\n}",
      "language": "javascript",
      "explanation": "Example of model"
    },
    {
      "type": "code_example",
      "title": "HTML View",
      "content": "",
      "order": 4,
      "code": "<!DOCTYPE html>\n<html lang=\"en-US\">\n<title>Customers</title>\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<script src=\"https://www.w3schools.com/appml/2.0.3/appml.js\"></script>\n<body>\n<div class=\"w3-container\" appml-data=\"local?model=model_customers\">\n<h1>Customers</h1>\n<div appml-include-html=\"inc_listcommands.htm\"></div>\n<div appml-include-html=\"inc_filter.htm\"></div>\n<table class=\"w3-table-all\">\n<tr>\n<th>Customer</th>\n<th>City</th>\n<th>Country</th>\n</tr>\n<tr appml-repeat=\"records\">\n<td>{{CustomerName}}</td>\n<td>{{City}}</td>\n<td>{{Country}}</td>\n</tr>\n</table>\n</div>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of html view"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "{\n\"rowsperpage\" : 10,\n# TODO: Complete this line\n\"connection\" : \"localmysql\",\n\"sql\" : \"SELECT CustomerName, City, Country FROM Customers\",\n\"orderby\" : \"CustomerName\"\n},\n\"filteritems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n],\n\"sortitems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n]\n}",
      "solution": "{\n\"rowsperpage\" : 10,\n\"database\" : {\n\"connection\" : \"localmysql\",\n\"sql\" : \"SELECT CustomerName, City, Country FROM Customers\",\n\"orderby\" : \"CustomerName\"\n},\n\"filteritems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n],\n\"sortitems\" : [\n{\"item\" : \"CustomerName\", \"label\" : \"Customer\"},\n{\"item\" : \"City\"},\n{\"item\" : \"Country\"}\n]\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html lang=\"en-US\">\n<title>Customers</title>\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<script src=\"https://www.w3schools.com/appml/2.0.3/appml.js\"></script>\n<body>\n<div class=\"w3-container\" appml-data=\"local?model=model_customers\">\n<h1>Customers</h1>\n<div appml-include-html=\"inc_listcommands.htm\"></div>\n<div appml-include-html=\"inc_filter.htm\"></div>\n<table class=\"w3-table-all\">\n<tr>\n<th>Customer</th>\n# TODO: Complete this line\n<th>Country</th>\n</tr>\n<tr appml-repeat=\"records\">\n<td>{{CustomerName}}</td>\n<td>{{City}}</td>\n<td>{{Country}}</td>\n</tr>\n</table>\n</div>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html lang=\"en-US\">\n<title>Customers</title>\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<script src=\"https://www.w3schools.com/appml/2.0.3/appml.js\"></script>\n<body>\n<div class=\"w3-container\" appml-data=\"local?model=model_customers\">\n<h1>Customers</h1>\n<div appml-include-html=\"inc_listcommands.htm\"></div>\n<div appml-include-html=\"inc_filter.htm\"></div>\n<table class=\"w3-table-all\">\n<tr>\n<th>Customer</th>\n<th>City</th>\n<th>Country</th>\n</tr>\n<tr appml-repeat=\"records\">\n<td>{{CustomerName}}</td>\n<td>{{City}}</td>\n<td>{{Country}}</td>\n</tr>\n</table>\n</div>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "99ad65f4-a626-47a4-9276-deac2c4e030f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "05e29446-0e43-4d22-a12c-9e68cd12e4ae",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c2a36b31-a5be-4533-9290-99d86ea44356",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Architecture\nFull Separation of Content from Presentation\nHighly Scalable and Testable\nEasy Configuration and Reconfiguration\nReconfiguration while applications?",
      "options": [
        "None of the above.",
        "reusable on different hardware \nand software platforms (Server",
        "None of the above.",
        "running\nSmart Support for User Accounts and Roles\nMVC Architecture\nAppML uses an MVC Architecture\nMVC stands for Model"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Architecture\nFull Separation of Content from Presentation\nHighly Scalable and Testable\nEasy Configuration and Reconfiguration\nReconfiguration while applications is 'running\nSmart Support for User Accounts and Roles\nMVC Architecture\nAppML uses an MVC Architecture\nMVC stands for Model'."
    },
    {
      "question": "What is The model?",
      "options": [
        "None of the above.",
        "reusable on different hardware \nand software platforms (Server",
        "None of the above.",
        "running\nSmart Support for User Accounts and Roles\nMVC Architecture\nAppML uses an MVC Architecture\nMVC stands for Model"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The model is 'reusable on different hardware \nand software platforms (Server'."
    }
  ],
  "summary": "This tutorial covers AppMLArchitecture concepts and techniques. You'll learn how to use AppMLArchitecture effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AppMLArchitecture and how to apply it in your projects."
}