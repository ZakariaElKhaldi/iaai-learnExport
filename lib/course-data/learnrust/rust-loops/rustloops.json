{
  "id": "2926eeb8-34d3-4fc7-af62-1b5c21f1a309",
  "title": "RustLoops",
  "slug": "rustloops",
  "metadata": {
    "description": "Learn about RustLoops with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "count",
      "loops",
      "example",
      "println",
      "break",
      "hello",
      "result",
      "rust",
      "code"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nLoops",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable. For example, instead of writing the same line 10 times to print some text, you can use a loop to repeat it for you.\nRust has three types of loops:\nloop\n,\nwhile\n, and\nfor\n.\nloop\nloop\nis the simplest of Rust's three loop types.\nIt will run forever unless you tell it to stop:\nloop {\nprintln!(\"This will repeat forever!\");\n}\nWarning:\nThis loop never stops! You will need to press\nCtrl + C\nto end the program.\nTo stop a loop, use the\nbreak\nkeyword:\nExample\nlet mut count = 1;\nloop {\nprintln!(\"Hello World!\");\nif count == 3 {\nbreak;\n}\ncount \n  += 1;\n}\n\nExample explained:\nThis prints \"Hello World!\" 3 times.\nIt uses a counter to keep track of how many times it has looped.\nThe counter starts at 1 (\nlet mut count = 1;\n).\nEach time the loop runs, the counter goes up by 1: (\ncount += 1;\n).\nWhen it reaches 3, the loop stops.\nReturn a Value\nYou can also return a value from a\nloop\nusing\nbreak\nwith a value.\nThis lets you save the result of the loop into a variable:\nExample\nlet mut count = 1;\nlet result = loop {\nprintln!(\"Hello!\");\nif count == 3 {\nbreak count; // Stop the loop \n  and return the number 3\n}\ncount += 1;\n};\nprintln!(\"The loop stopped at: {}\", result);\n\nThis loop prints \"Hello!\" until\ncount\nreaches 3, then stops and returns that number.\nNote:\nWhen you save the result of a loop into a variable, you must put a semicolon (\n;\n) at the end.\n\nLearn how to use\nwhile\nloops to repeat code while a condition is true.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "loop {\nprintln!(\"This will repeat forever!\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let mut count = 1;\nloop {\nprintln!(\"Hello World!\");\nif count == 3 {\nbreak;\n}\ncount \n  += 1;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let mut count = 1;\nlet result = loop {\nprintln!(\"Hello!\");\nif count == 3 {\nbreak count; // Stop the loop \n  and return the number 3\n}\ncount += 1;\n};\nprintln!(\"The loop stopped at: {}\", result);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "loop {\nprintln!(\"This will repeat forever!\");\n# TODO: Complete this line",
      "solution": "loop {\nprintln!(\"This will repeat forever!\");\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let mut count = 1;\nloop {\nprintln!(\"Hello World!\");\nif count == 3 {\nbreak;\n# TODO: Complete this line\ncount \n  += 1;\n}",
      "solution": "let mut count = 1;\nloop {\nprintln!(\"Hello World!\");\nif count == 3 {\nbreak;\n}\ncount \n  += 1;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "32cb580e-c249-4226-ab00-a431116ce791",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "75a355fc-6197-4759-95c5-26c115025407",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bd1eb665-0fab-4a4c-ad35-8fdf9408e1c6",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nLoops\n\nLoops\nLoops can execute a block of code as long as a specified condition?",
      "options": [
        "None of the above.",
        "handy because they save time",
        "reached",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Rust\nLoops\n\nLoops\nLoops can execute a block of code as long as a specified condition is 'reached'."
    },
    {
      "question": "What is Loops?",
      "options": [
        "None of the above.",
        "reached",
        "handy because they save time",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Loops is 'handy because they save time'."
    }
  ],
  "summary": "This tutorial covers RustLoops concepts and techniques. You'll learn how to use RustLoops effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustLoops and how to apply it in your projects."
}