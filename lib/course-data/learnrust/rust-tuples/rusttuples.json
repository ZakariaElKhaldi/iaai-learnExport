{
  "id": "bab6b5af-1799-4762-9ef0-40cc65aecd95",
  "title": "RustTuples",
  "slug": "rusttuples",
  "metadata": {
    "description": "Learn about RustTuples with clear explanations and practical examples.",
    "keywords": [
      "tuple",
      "values",
      "person",
      "println",
      "tuples",
      "example",
      "name",
      "active",
      "user",
      "return"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Tuples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nTuples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Tuples\nA\ntuple\nis a group of values of different types, stored in a single variable.\nTuples are useful when you want to return or work with multiple values together.\nCreate a Tuple\nTuples are written using parentheses\n()\n, with values separated by commas:\nExample\nlet person = (\"John\", 30, true);\nThis tuple contains a\n&str\n, an\ni32\n, and a\nbool\n.\nAccess Tuple Values\nYou can access tuple values by using a dot\n.\nfollowed by the index:\nExample\nlet person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\nprintln!(\"Is active: {}\", person.2);\n\nUnpack a Tuple\nWhen we create a tuple, we normally assign values to it. This is called \"packing\" a tuple:\nExample\nlet person = (\"Jenny\", 45, false);\nBut, in Rust, we are also allowed to extract the values back into variables. This is called \"unpacking\":\nExample\nlet person = (\"Jenny\", 45, false);\nlet (name, age, active) = person;\nprintln!(\"Name: {}\", name);\nprintln!(\"Age: {}\", age);\nprintln!(\"Active: {}\", active);\n\nReturn a Tuple from a Function\nTuples are often used to return multiple values from a function:\nExample\nfn get_user() -> (String, i32) {\n(String::from(\"Liam\"), 25)\n}\nfn main() {\nlet user = get_user();\nprintln!(\"User: {} \n  ({} years old)\", user.0, user.1);\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let person = (\"John\", 30, true);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\nprintln!(\"Is active: {}\", person.2);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let person = (\"Jenny\", 45, false);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let person = (\"Jenny\", 45, false);\nlet (name, age, active) = person;\nprintln!(\"Name: {}\", name);\nprintln!(\"Age: {}\", age);\nprintln!(\"Active: {}\", active);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fn get_user() -> (String, i32) {\n(String::from(\"Liam\"), 25)\n}\nfn main() {\nlet user = get_user();\nprintln!(\"User: {} \n  ({} years old)\", user.0, user.1);\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let person = (\"John\", 30, true);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\n# TODO: Complete this line",
      "solution": "let person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\nprintln!(\"Is active: {}\", person.2);"
    }
  ],
  "related_topics": [
    {
      "id": "0e955640-f851-45d8-8775-8601684e6402",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e6c36b4d-cb32-4067-8776-952812b155ca",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5f6965c6-19df-4130-b604-4877d908eb92",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nTuples\n\nTuples\nA\ntuple?",
      "options": [
        "None of the above.",
        "None of the above.",
        "useful when you want to return or work with multiple values together",
        "a group of values of different types"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Rust\nTuples\n\nTuples\nA\ntuple is 'a group of values of different types'."
    },
    {
      "question": "What is Tuples?",
      "options": [
        "None of the above.",
        "useful when you want to return or work with multiple values together",
        "None of the above.",
        "a group of values of different types"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Tuples is 'useful when you want to return or work with multiple values together'."
    }
  ],
  "summary": "This tutorial covers RustTuples concepts and techniques. You'll learn how to use RustTuples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustTuples and how to apply it in your projects."
}