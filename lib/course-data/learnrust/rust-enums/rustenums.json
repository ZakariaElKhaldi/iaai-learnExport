{
  "id": "2528393a-3970-40a0-b8b0-031469d30e3a",
  "title": "RustEnums",
  "slug": "rustenums",
  "metadata": {
    "description": "Learn about RustEnums with clear explanations and practical examples.",
    "keywords": [
      "enum",
      "direction",
      "println",
      "enums",
      "left",
      "success",
      "error",
      "right",
      "going",
      "match"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Enums"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nEnums",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Enums\nAn\nenum\n(short for \"enumeration\") is a way to define a type that can be one of a few different values.\nEach value in the enum is called a\nvariant\n.\nEnums are useful when you want to represent a value that can only be one of a set of options - like days of the week, directions, or results like success and error.\nCreate an Enum\nTo create an enum, use the\nenum\nkeyword and add a set of named values (variants) separated by commas:\nExample\nenum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nTo use the enum, create a variable and assign it one of the enum's variants (use\n::\nto access a variant):\nExample\nenum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Up;\nprintln!(\"We are going up!\");\n}\n\nMatch on Enum Values\nEnums work great with the\nmatch\nstatement.  \nYou can run different code depending on which variant is used:\nExample\nenum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Left;\nmatch my_direction {\nDirection::Up => println!(\"Going up\"),\nDirection::Down \n  => println!(\"Going down\"),\nDirection::Left => \n  println!(\"Going left\"),\nDirection::Right => \n  println!(\"Going right\"),\n}\n}\n\nEnums with Data\nEnum variants can also hold data. This is useful when each variant needs to \nstore extra information:\nExample\nenum LoginStatus {\nSuccess(String),\nError(String),\n}\nfn \n  main() {\nlet result1 = LoginStatus::Success(String::from(\"Welcome, \n  John!\"));\nlet result2 = LoginStatus::Error(String::from(\"Incorrect \n  password\"));\nmatch result1 {\nLoginStatus::Success(message) => println!(\"Success: {}\", message),\nLoginStatus::Error(message) => println!(\"Error: {}\", message),\n}\n}\n\nWhy Use Enums?\nTo group related values into one type\nTo make your code more readable and safe\nTo handle different cases with\nmatch\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Up;\nprintln!(\"We are going up!\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Left;\nmatch my_direction {\nDirection::Up => println!(\"Going up\"),\nDirection::Down \n  => println!(\"Going down\"),\nDirection::Left => \n  println!(\"Going left\"),\nDirection::Right => \n  println!(\"Going right\"),\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "enum LoginStatus {\nSuccess(String),\nError(String),\n}\nfn \n  main() {\nlet result1 = LoginStatus::Success(String::from(\"Welcome, \n  John!\"));\nlet result2 = LoginStatus::Error(String::from(\"Incorrect \n  password\"));\nmatch result1 {\nLoginStatus::Success(message) => println!(\"Success: {}\", message),\nLoginStatus::Error(message) => println!(\"Error: {}\", message),\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "enum Direction {\n# TODO: Complete this line\nDown,\nLeft,\nRight,\n}",
      "solution": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Up;\n# TODO: Complete this line\n}",
      "solution": "enum Direction {\nUp,\nDown,\nLeft,\nRight,\n}\nfn main() {\nlet my_direction = Direction::Up;\nprintln!(\"We are going up!\");\n}"
    }
  ],
  "related_topics": [
    {
      "id": "47d8e7f5-167b-4e5c-8989-2af0f5b38536",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9c9e842-5d42-4481-808f-ce5cd98f5648",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "93e39096-e499-48b3-bfcd-794601f5ab33",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Each value in the enum?",
      "options": [
        "Not a Each value in the enum.",
        "called a\nvariant",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Each value in the enum is 'called a\nvariant'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers RustEnums concepts and techniques. You'll learn how to use RustEnums effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustEnums and how to apply it in your projects."
}