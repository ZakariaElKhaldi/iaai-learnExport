{
  "id": "f2bf9c21-bcb7-4b7b-8ca9-ce20c17c5830",
  "title": "RustArrays",
  "slug": "rustarrays",
  "metadata": {
    "description": "Learn about RustArrays with clear explanations and practical examples.",
    "keywords": [
      "array",
      "numbers",
      "example",
      "element",
      "arrays",
      "elements",
      "println",
      "size",
      "value",
      "printing"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nArrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Arrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nCreate an Array\nYou can create an array using square brackets\n[ ]\n, and separate the values with commas.\nNote:\nMake sure all values are of the same data type (integers in the example below):\nExample\nlet numbers = [1, 2, 3, 4, 5];\nThis creates an array with five integers.\nAccess Array Elements\nTo access an array element, refer to its index number.\nArray indexes start with 0: [0] is the first element. [1] is the second element, etc.\nThis statement accesses the value of the first element [\n0\n] in\nnumbers\n:\nExample\nlet numbers = [1, 2, 3, 4, 5];\nprintln!(\"The first number is: {}\", numbers[0]);\n\nChange Array Values\nTo change the value of a specified element, refer to the index number and assign a new \nvalue.\nRemember to make the array mutable (using the\nmut\nkeyword):\nExample\nlet mut numbers = [1, 2, 3, 4, 5];\nnumbers[0] = 10;\nprintln!(\"The new first number is: {}\", numbers[0]);\n\nArray Length\nYou can get the number of elements in an array using the\n.len()\nmethod:\nExample\nlet numbers = [1, 2, 3, 4, 5];\nprintln!(\"This array has {} elements.\", numbers.len());\n\nLoop Through an Array\nYou can loop through the array elements with the\nfor\nloop.\nExample\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nfor fruit in fruits {\nprintln!(\"I like {}.\", fruit);\n}\n\nPrint the Entire Array\nNote:\nWhen printing the whole array, you must use\n{:?}\ninside\nprintln!\n:\nExample\nlet numbers = [1, 2, 3, 4, 5];\nprintln!(\"{:?}\", numbers);\n\nIf you are just printing one element from the array, you can use\n{}\n.\nExample\nlet numbers = [1, 2, 3, 4, 5];\nprintln!(\"{}\", numbers[0]);\n\nTo Sum Up:\nWhen printing a single element from an array, use\n{}\n.\nWhen printing the entire array, use\n{:?}\n.\nIf you are wondering why we didn't use\n{:?}\ninside the loop (in the example earlier on this page), it is because in a loop, you are printing each single value from the array.\nSince each value is a string,\n{}\nworks. But to print the whole array, you need to use\n{:?}\n.\nA good rule is to use\n{}\nfor basic types like strings, numbers, and booleans, and\n{:?}\nfor data structures like arrays and\nvectors\n- when printing the entire structure.\nFixed Size (Arrays) vs. Dynamic Size (Vectors)\nYou will often hear the terms\nfixed size\nand\ndynamic size\nwhen talking about arrays in Rust.\nThis is because\narrays in Rust have a fixed size\n, meaning you cannot add or remove elements after the array is created:\nExample\n// An array with 3 elements\nlet mut cars = [\"Volvo\", \"BMW\", \"Ford\"];\n// Trying to add another element (a fourth element) to the cars array will \n  result in an error\ncars[3] = \"Mazda\";\u00a0\u00a0 // Error: index out of bounds\n\nVectors - Dynamic Size Example\nFor operations that require adding and removing array elements, you can use\nVectors\n, which are resizable arrays.\nThe size of a vector is dynamic, meaning it can grow and shrink as needed.\nYou can use the\nvec!\nmacro to create a \nvector:\nExample\n// A vector with 3 elements\nlet mut cars = vec![\"Volvo\", \"BMW\", \"Ford\"];\n// Add another element\ncars.push(\"Tesla\");\nprintln!(\"{:?}\", cars); // [\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"]\n\nThis was just a short introduction to vectors. You will learn more about them in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let numbers = [1, 2, 3, 4, 5];",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let numbers = [1, 2, 3, 4, 5];\nprintln!(\"The first number is: {}\", numbers[0]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let mut numbers = [1, 2, 3, 4, 5];\nnumbers[0] = 10;\nprintln!(\"The new first number is: {}\", numbers[0]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let numbers = [1, 2, 3, 4, 5];\nprintln!(\"This array has {} elements.\", numbers.len());",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let fruits = [\"apple\", \"banana\", \"orange\"];\nfor fruit in fruits {\nprintln!(\"I like {}.\", fruit);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let numbers = [1, 2, 3, 4, 5];\nprintln!(\"{:?}\", numbers);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let numbers = [1, 2, 3, 4, 5];\nprintln!(\"{}\", numbers[0]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// An array with 3 elements\nlet mut cars = [\"Volvo\", \"BMW\", \"Ford\"];\n// Trying to add another element (a fourth element) to the cars array will \n  result in an error\ncars[3] = \"Mazda\";\u00a0\u00a0 // Error: index out of bounds",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// A vector with 3 elements\nlet mut cars = vec![\"Volvo\", \"BMW\", \"Ford\"];\n// Add another element\ncars.push(\"Tesla\");\nprintln!(\"{:?}\", cars); // [\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"]",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let numbers = [1, 2, 3, 4, 5];"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let numbers = [1, 2, 3, 4, 5];\nprintln!(\"The first number is: {}\", numbers[0]);"
    }
  ],
  "related_topics": [
    {
      "id": "06ce0845-4605-4e3c-a30b-babbc4dd9832",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "61f75f6e-c05e-403b-9aee-297382aa548a",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8bfb2f4a-f4f3-4b13-8b60-c9bf24cfbe3f",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nArrays\n\nArrays\nArrays?",
      "options": [
        "used to store multiple values in a single variable",
        "None of the above.",
        "of the same data type (integers in the example below):\nExample\nlet numbers = [1",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Rust\nArrays\n\nArrays\nArrays is 'used to store multiple values in a single variable'."
    },
    {
      "question": "What is Make sure all values?",
      "options": [
        "of the same data type (integers in the example below):\nExample\nlet numbers = [1",
        "None of the above.",
        "used to store multiple values in a single variable",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Make sure all values is 'of the same data type (integers in the example below):\nExample\nlet numbers = [1'."
    }
  ],
  "summary": "This tutorial covers RustArrays concepts and techniques. You'll learn how to use RustArrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustArrays and how to apply it in your projects."
}