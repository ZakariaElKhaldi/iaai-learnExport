{
  "id": "0e006c2d-40fd-42e2-9cb3-cdb1e08158a0",
  "title": "RustVariables",
  "slug": "rustvariables",
  "metadata": {
    "description": "Learn about RustVariables with clear explanations and practical examples.",
    "keywords": [
      "name",
      "example",
      "println",
      "values",
      "variable",
      "john",
      "rust",
      "variables",
      "order",
      "firstname"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nVariables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Variables\nVariables are containers for storing data values, like numbers and characters.\nTo create a variable in Rust, use the\nlet\nkeyword \nand specify the variable name (\nfirstname\nin this example):\nExample\nlet firstname = \"John\";\nprintln!(\"My first name is: {}\", firstname);\n\nWhat is\n{}\n?\nRust uses\n{}\nas a placeholder in\nprintln!()\nto show variable values.\nIn the example above, the output will be \"My first name is: John\".\nYou can use as many placeholders as you like:\nExample\nlet name = \"John\";\nlet age = 30;\nprintln!(\"{} is {} years old.\", name, age);\n\nUsing Placeholders in Order\nWhen you use many placeholders, the values you pass are used in the same order.\nIn the example above:\nThe first\n{}\ngets replaced with\nname\n(\"John\")\nThe second\n{}\ngets replaced with\nage\n(30)\nImportant:\nThe order matters. If you switch the values, the output will change:\nExample\nThis example shows wrong order:\nlet name = \"John\";\nlet age = 30;\nprintln!(\"{} is {} years old.\", age, name);\u00a0 \n  // Outputs 30 is John years old\n\nVariable Values Cannot be Changed by Default\nBy default, variables in Rust cannot be changed after they are created:\nlet x = 5;\nx = 10; // Error\nprintln!(\"{}\", x);\n\nChange Variable Values\nIf you want to change the value of a variable, you must use the\nmut\nkeyword \n(which means mutable/changeable):\nExample\nlet mut x = 5;\nprintln!(\"Before: {}\", x);\nx = 10;\nprintln!(\"After: {}\", x);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let firstname = \"John\";\nprintln!(\"My first name is: {}\", firstname);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let name = \"John\";\nlet age = 30;\nprintln!(\"{} is {} years old.\", name, age);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let name = \"John\";\nlet age = 30;\nprintln!(\"{} is {} years old.\", age, name);\u00a0 \n  // Outputs 30 is John years old",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 5;\nx = 10; // Error\nprintln!(\"{}\", x);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let mut x = 5;\nprintln!(\"Before: {}\", x);\nx = 10;\nprintln!(\"After: {}\", x);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let firstname = \"John\";\nprintln!(\"My first name is: {}\", firstname);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let name = \"John\";\n# TODO: Complete this line\nprintln!(\"{} is {} years old.\", name, age);",
      "solution": "let name = \"John\";\nlet age = 30;\nprintln!(\"{} is {} years old.\", name, age);"
    }
  ],
  "related_topics": [
    {
      "id": "2567f401-3384-4ce8-a30e-422186236981",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3be34070-b466-49db-a8a4-8e399625c3bb",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4dda6a70-54e0-4b20-89b3-9829ef324d5d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nVariables\n\nVariables\nVariables?",
      "options": [
        "None of the above.",
        "{}",
        "containers for storing data values",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Rust\nVariables\n\nVariables\nVariables is 'containers for storing data values'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "None of the above.",
        "{}",
        "containers for storing data values"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is '{}'."
    }
  ],
  "summary": "This tutorial covers RustVariables concepts and techniques. You'll learn how to use RustVariables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustVariables and how to apply it in your projects."
}