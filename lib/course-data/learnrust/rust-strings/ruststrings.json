{
  "id": "8e2c9578-c3fb-4500-a48b-c5f3aa81bd82",
  "title": "RustStrings",
  "slug": "ruststrings",
  "metadata": {
    "description": "Learn about RustStrings with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "string",
      "strings",
      "hello",
      "example",
      "println",
      "world",
      "greeting",
      "used",
      "result",
      "rust"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Strings"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nStrings",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nStrings\n\nStrings\nStrings are used to store text",
      "content": ".\nYou have already learned that you can use the\n&str\ntype to create a string:\nExample\nlet greeting: &str = \"Hello\";\nprintln!(\"{}\", \n  greeting);\n\nNote\nthat strings are surrounded by double quotes (\n\"\nHello\n\"\n).\nThere are two main types of strings in Rust:\n&str\n- is called \"string slices\", and is used for fixed text like\n\"Hello\"",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "String",
      "content": "- used when you need a string that can change\nIn this chapter, you will mostly work with the\nString\ntype because it is more flexible and can be changed over time.\nCreate a String\nYou can create a\nString\nfrom a string literal using the\nto_string()\nmethod or the\nString::from()\nfunction:\nExample\nlet text1 = \"Hello World\".to_string();\n\nExample\nlet text2 = String::from(\"Hello World\");\n\nIt is up to you which one to choose - both\nto_string()\nand\nString::from()\nare very common in Rust.\nChange a String\nStrings are mutable, so you can change them if they are declared with\nmut\n.\nUse\npush_str()\nto add text to a string:\nExample\nlet mut greeting = String::from(\"Hello\");\ngreeting.push_str(\" World\");\nprintln!(\"{}\", greeting); // Hello World\n\nUse\npush()\nto add one character:\nExample\nlet mut word = String::from(\"Hi\");\nword.push('!');\nprintln!(\"{}\", word); // Hi!\n\nConcatenate Strings\nYou can combine strings using the\nformat!\nmacro:\nExample\nlet s1 = String::from(\"Hello\");\nlet s2 = String::from(\"World!\");\nlet s3 \n  = String::from(\"What a beautiful day!\");\nlet result = format!(\"{} {} {}\", \n  s1, s2, s3);\nprintln!(\"{}\", result);\n\nYou can also use the\n+\noperator to combine strings, but it can get messy with many values.\nExample\nlet s1 = String::from(\"Hello\");\nlet s2 = String::from(\"World!\");\nlet s3 = String::from(\"What a beautiful \n  day!\");\nlet result = s1 + \" \" + &s2 + \" \" + &s3;\nprintln!(\"{}\", result);\n\nNote:\nYou can only add a\n&str\nto a\nString\nwith\n+\n.  \nThat is why\n&s2\nand\n&s3\n(a string slice) is used here.\nGood to know:\nformat!\nis often the preferred choice than using\n+\nfor combining strings.\nString Length\nYou can use the\n.len()\nmethod to get the length of a string:\nExample\nlet name = String::from(\"John\");\nprintln!(\"Length: {}\", name.len()); // 4\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let greeting: &str = \"Hello\";\nprintln!(\"{}\", \n  greeting);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let text1 = \"Hello World\".to_string();",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let text2 = String::from(\"Hello World\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let mut greeting = String::from(\"Hello\");\ngreeting.push_str(\" World\");\nprintln!(\"{}\", greeting); // Hello World",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let mut word = String::from(\"Hi\");\nword.push('!');\nprintln!(\"{}\", word); // Hi!",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let s1 = String::from(\"Hello\");\nlet s2 = String::from(\"World!\");\nlet s3 \n  = String::from(\"What a beautiful day!\");\nlet result = format!(\"{} {} {}\", \n  s1, s2, s3);\nprintln!(\"{}\", result);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let s1 = String::from(\"Hello\");\nlet s2 = String::from(\"World!\");\nlet s3 = String::from(\"What a beautiful \n  day!\");\nlet result = s1 + \" \" + &s2 + \" \" + &s3;\nprintln!(\"{}\", result);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let name = String::from(\"John\");\nprintln!(\"Length: {}\", name.len()); // 4",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let greeting: &str = \"Hello\";\n# TODO: Complete this line\n  greeting);",
      "solution": "let greeting: &str = \"Hello\";\nprintln!(\"{}\", \n  greeting);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let text1 = \"Hello World\".to_string();"
    }
  ],
  "related_topics": [
    {
      "id": "2d9af960-0fcf-4dbd-acad-35f9dc1c6681",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "800669b2-ed6e-478d-88ef-cb5da26d5252",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d016df2f-d22a-4dab-9040-a16e8fae62d2",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nStrings\n\nStrings\nStrings?",
      "options": [
        "used to store text",
        "surrounded by double quotes (\n\"\nHello\n\"\n)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Rust\nStrings\n\nStrings\nStrings is 'used to store text'."
    },
    {
      "question": "What is Note\nthat strings?",
      "options": [
        "surrounded by double quotes (\n\"\nHello\n\"\n)",
        "None of the above.",
        "None of the above.",
        "used to store text"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Note\nthat strings is 'surrounded by double quotes (\n\"\nHello\n\"\n)'."
    }
  ],
  "summary": "This tutorial covers RustStrings concepts and techniques. You'll learn how to use RustStrings effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustStrings and how to apply it in your projects."
}