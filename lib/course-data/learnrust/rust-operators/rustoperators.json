{
  "id": "303e8252-0639-4c43-a374-2ffca2b21da7",
  "title": "RustOperators",
  "slug": "rustoperators",
  "metadata": {
    "description": "Learn about RustOperators with clear explanations and practical examples.",
    "keywords": [
      "println",
      "operators",
      "true",
      "example",
      "values",
      "used",
      "operator",
      "main",
      "equal",
      "arithmetic"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Operators"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nOperators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nOperators\n\nOperators\nOperators are used to perform operations on values and variables",
      "content": ".\nRust supports many common operators, like:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nLogical Operators\nArithmetic Operators\nArithmetic operators are used to do basic math:\nOperator\nName\nExample\nResult\n+\nAddition\n5 + 3\n8\n-\nSubtraction\n5 - 3\n2\n*\nMultiplication\n5 * 3\n15\n/\nDivision\n10 / 2\n5\n%\nRemainder (modulus)\n10 % 3\n1\nExample\nfn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln!(\"Add: {}\", add);\nprintln!(\"Sub: {}\", sub);\nprintln!(\"Mul: {}\", mul);\nprintln!(\"Div: {}\", div);\nprintln!(\"Rem: {}\", rem);\n}\n\nAssignment Operators\nAssignment operators are used to assign and update values:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Same As",
      "content": "=\nx = 5\nAssign 5 to x\n+=\nx += 3\nx = x + 3\n-=\nx -= 2\nx = x - 2\n*=\nx *= 4\nx = x * 4\n/=\nx /= 2\nx = x / 2\n%=\nx %= 2\nx = x % 2\nExample\nfn main() {\nlet mut x = 10;\nprintln!(\"Start: {}\", x);\nx += 5;\nprintln!(\"After += 5: {}\", x);\nx -= 2;\nprintln!(\"After -= 2: {}\", x);\nx *= 2;\nprintln!(\"After *= 2: {}\", x);\nx /= 3;\nprintln!(\"After /= 3: {}\", x);\nx %= 4;\nprintln!(\"After %= 4: {}\", x);\n}\n\nComparison Operators\nComparison operators compare values and return\ntrue\nor\nfalse\n:",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Example",
      "content": "==\nEqual to\n5 == 5\nis true\n!=\nNot equal to\n5 != 3\nis true\n>\nGreater than\n7 > 3\nis true\n<\nLess than\n2 < 5\nis true\n>=\nGreater than or equal to\n5 >= 5\nis true\n<=\nLess than or equal to\n3 <= 4\nis true\nExample\nfn main() {\nlet a = 5;\nlet b = 10;\nprintln!(\"5 == 10: {}\", a == b);\nprintln!(\"5 != 10: {}\", a != \n  b);\nprintln!(\"5 < 10: {}\", a < b);\nprintln!(\"5 >= 10: {}\", \n  a >= b);\n}\n\nLogical Operators\nLogical operators are used to work with boolean values:\nOperator\nName\nDescription\n&&\nAND\ntrue if both values are true\n||\nOR\ntrue if at least one is true\n!\nNOT\ninverts the boolean value\nExample\nfn main() {\nlet logged_in = true;\nlet is_admin = false;\nprintln!(\"Is regular user: {}\", logged_in && !is_admin);\nprintln!(\"Has any access: {}\", logged_in || is_admin);\nprintln!(\"Not logged in: {}\", !logged_in);\n}\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "fn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln!(\"Add: {}\", add);\nprintln!(\"Sub: {}\", sub);\nprintln!(\"Mul: {}\", mul);\nprintln!(\"Div: {}\", div);\nprintln!(\"Rem: {}\", rem);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fn main() {\nlet mut x = 10;\nprintln!(\"Start: {}\", x);\nx += 5;\nprintln!(\"After += 5: {}\", x);\nx -= 2;\nprintln!(\"After -= 2: {}\", x);\nx *= 2;\nprintln!(\"After *= 2: {}\", x);\nx /= 3;\nprintln!(\"After /= 3: {}\", x);\nx %= 4;\nprintln!(\"After %= 4: {}\", x);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fn main() {\nlet a = 5;\nlet b = 10;\nprintln!(\"5 == 10: {}\", a == b);\nprintln!(\"5 != 10: {}\", a != \n  b);\nprintln!(\"5 < 10: {}\", a < b);\nprintln!(\"5 >= 10: {}\", \n  a >= b);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "fn main() {\nlet logged_in = true;\nlet is_admin = false;\nprintln!(\"Is regular user: {}\", logged_in && !is_admin);\nprintln!(\"Has any access: {}\", logged_in || is_admin);\nprintln!(\"Not logged in: {}\", !logged_in);\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fn main() {\nlet add = 5 + 3;\n# TODO: Complete this line\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln!(\"Add: {}\", add);\nprintln!(\"Sub: {}\", sub);\nprintln!(\"Mul: {}\", mul);\nprintln!(\"Div: {}\", div);\nprintln!(\"Rem: {}\", rem);\n}",
      "solution": "fn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln!(\"Add: {}\", add);\nprintln!(\"Sub: {}\", sub);\nprintln!(\"Mul: {}\", mul);\nprintln!(\"Div: {}\", div);\nprintln!(\"Rem: {}\", rem);\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fn main() {\nlet mut x = 10;\nprintln!(\"Start: {}\", x);\nx += 5;\nprintln!(\"After += 5: {}\", x);\nx -= 2;\nprintln!(\"After -= 2: {}\", x);\nx *= 2;\nprintln!(\"After *= 2: {}\", x);\nx /= 3;\nprintln!(\"After /= 3: {}\", x);\n# TODO: Complete this line\nprintln!(\"After %= 4: {}\", x);\n}",
      "solution": "fn main() {\nlet mut x = 10;\nprintln!(\"Start: {}\", x);\nx += 5;\nprintln!(\"After += 5: {}\", x);\nx -= 2;\nprintln!(\"After -= 2: {}\", x);\nx *= 2;\nprintln!(\"After *= 2: {}\", x);\nx /= 3;\nprintln!(\"After /= 3: {}\", x);\nx %= 4;\nprintln!(\"After %= 4: {}\", x);\n}"
    }
  ],
  "related_topics": [
    {
      "id": "adc27c41-3617-4bb2-b11d-492c04dddbc0",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bd7aad60-202a-48f4-9645-c9671534ab4e",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d38aded4-ed98-4210-b8cd-ac2a347a245c",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nOperators\n\nOperators\nOperators?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to do basic math:\nOperator\nName\nExample\nResult\n+\nAddition\n5 + 3\n8\n-\nSubtraction\n5 - 3\n2\n*\nMultiplication\n5 * 3\n15\n/\nDivision\n10 / 2\n5\n%\nRemainder (modulus)\n10 % 3\n1\nExample\nfn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln",
        "used to perform operations on values and variables"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Rust\nOperators\n\nOperators\nOperators is 'used to perform operations on values and variables'."
    },
    {
      "question": "What is Arithmetic Operators\nAssignment Operators\nComparison Operators\nLogical Operators\nArithmetic Operators\nArithmetic operators?",
      "options": [
        "None of the above.",
        "used to perform operations on values and variables",
        "used to do basic math:\nOperator\nName\nExample\nResult\n+\nAddition\n5 + 3\n8\n-\nSubtraction\n5 - 3\n2\n*\nMultiplication\n5 * 3\n15\n/\nDivision\n10 / 2\n5\n%\nRemainder (modulus)\n10 % 3\n1\nExample\nfn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Arithmetic Operators\nAssignment Operators\nComparison Operators\nLogical Operators\nArithmetic Operators\nArithmetic operators is 'used to do basic math:\nOperator\nName\nExample\nResult\n+\nAddition\n5 + 3\n8\n-\nSubtraction\n5 - 3\n2\n*\nMultiplication\n5 * 3\n15\n/\nDivision\n10 / 2\n5\n%\nRemainder (modulus)\n10 % 3\n1\nExample\nfn main() {\nlet add = 5 + 3;\nlet sub = 10 - 4;\nlet mul = 6 * 2;\nlet div = 12 / 3;\nlet rem = 10 % 3;\nprintln'."
    }
  ],
  "summary": "This tutorial covers RustOperators concepts and techniques. You'll learn how to use RustOperators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustOperators and how to apply it in your projects."
}