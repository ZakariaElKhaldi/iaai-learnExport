{
  "id": "b74017a9-5240-436d-b3b1-b9ec410955ab",
  "title": "RustData Types",
  "slug": "rustdata-types",
  "metadata": {
    "description": "Learn about RustData Types with clear explanations and practical examples.",
    "keywords": [
      "type",
      "types",
      "example",
      "println",
      "numbers",
      "rust",
      "char",
      "true",
      "bool",
      "name"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nData Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nData Types\n\nData Types\nUnlike many other programming languages",
      "content": ", variables in Rust do not need to be declared with a specified type (like \"String\" for text or \"Int\" for numbers, if you are familiar with those \nfrom\nC\nor\nJava\n).\nIn Rust, the type of a variable is decided by the value you give it. Rust looks at the value and automatically chooses \nthe right type:\nExample\nlet my_num = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double = 5.99;\u00a0\u00a0\u00a0// float\nlet my_letter = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text = \"Hello\";\u00a0\u00a0// string\n\nHowever, it is possible to explicitly tell Rust what type a value should be:\nExample\nlet my_num: i32 = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double: f64 = 5.99;\u00a0\u00a0\u00a0\u00a0// float\nlet my_letter: char = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool: bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text: &str = \"Hello\";\u00a0\u00a0// string\n\nYou will learn more about when you need to specify the type later in this tutorial. Either way, it is good to understand what the different types mean.\nBasic data types in Rust are divided into different groups:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Numbers",
      "content": "- Whole numbers and decimal numbers (\ni32\n,\nf64\n)",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Characters",
      "content": "- Single letters or symbols (\nchar\n)",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Strings",
      "content": "- Text, a sequence of characters (\n&str\n)",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Booleans",
      "content": "- True or false values (\nbool\n)\nNumbers\nNumber types are divided into two groups: integer types and floating point types.\nInteger (i32)\nThe\ni32\ntype is used to store whole numbers, positive or negative (such as 123 or -456), without decimals:\nExample\nlet age: i32 = 25;\nprintln!(\"Age is: {}\", age);\n\nFloating Point (f64)\nThe\nf64\ntype is used to store numbers containing one or more decimals:\nExample\nlet price: f64 = 19.99;\nprintln!(\"Price is: ${}\", price);\n\nCharacters (char)\nThe\nchar\ntype is used to store a single character. A char value must be surrounded by single quotes, like 'A' or 'c':\nExample\nlet myGrade: char = 'B';\nprintln!(\"{}\", myGrade);\n\nStrings (&str)\nThe\n&str\ntype is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nExample\nlet name: &str = \"John\";\nprintln!(\"Hello, {}!\", name);\n\nBooleans (bool)\nThe\nbool\ntype can only take the values\ntrue\nor\nfalse\n:\nExample\nlet is_logged_in: bool = true;\nprintln!(\"User logged in? {}\", is_logged_in);\n\nCombining Data Types\nYou can mix different types in the same program:\nExample\nlet name = \"John\";\nlet age = 28;\nlet is_admin = false;\nprintln!(\"Name: {}\", name);\nprintln!(\"Age: {}\", age);\nprintln!(\"Admin: {}\", is_admin);\n\n\u2605\n+1",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let my_num = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double = 5.99;\u00a0\u00a0\u00a0// float\nlet my_letter = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text = \"Hello\";\u00a0\u00a0// string",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let my_num: i32 = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double: f64 = 5.99;\u00a0\u00a0\u00a0\u00a0// float\nlet my_letter: char = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool: bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text: &str = \"Hello\";\u00a0\u00a0// string",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let age: i32 = 25;\nprintln!(\"Age is: {}\", age);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let price: f64 = 19.99;\nprintln!(\"Price is: ${}\", price);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let myGrade: char = 'B';\nprintln!(\"{}\", myGrade);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let name: &str = \"John\";\nprintln!(\"Hello, {}!\", name);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let is_logged_in: bool = true;\nprintln!(\"User logged in? {}\", is_logged_in);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let name = \"John\";\nlet age = 28;\nlet is_admin = false;\nprintln!(\"Name: {}\", name);\nprintln!(\"Age: {}\", age);\nprintln!(\"Admin: {}\", is_admin);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let my_num = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double = 5.99;\u00a0\u00a0\u00a0// float\n# TODO: Complete this line\nlet my_bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text = \"Hello\";\u00a0\u00a0// string",
      "solution": "let my_num = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double = 5.99;\u00a0\u00a0\u00a0// float\nlet my_letter = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text = \"Hello\";\u00a0\u00a0// string"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let my_num: i32 = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\n# TODO: Complete this line\nlet my_letter: char = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool: bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text: &str = \"Hello\";\u00a0\u00a0// string",
      "solution": "let my_num: i32 = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// integer\nlet my_double: f64 = 5.99;\u00a0\u00a0\u00a0\u00a0// float\nlet my_letter: char = 'D';\u00a0\u00a0\u00a0\u00a0// character\nlet my_bool: bool = true;\u00a0\u00a0\u00a0\u00a0\u00a0// boolean\nlet my_text: &str = \"Hello\";\u00a0\u00a0// string"
    }
  ],
  "related_topics": [
    {
      "id": "694873d0-2f07-4187-8614-c0c06619807c",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d786ed0a-d463-4c6f-8462-c312b591023b",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f6f34204-b841-42fc-bfc4-a99ce83dedd2",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is if you?",
      "options": [
        "familiar with those \nfrom\nC\nor\nJava\n)",
        "None of the above.",
        "decided by the value you give it",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of if you is 'familiar with those \nfrom\nC\nor\nJava\n)'."
    },
    {
      "question": "What is the type of a variable?",
      "options": [
        "None of the above.",
        "decided by the value you give it",
        "None of the above.",
        "familiar with those \nfrom\nC\nor\nJava\n)"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the type of a variable is 'decided by the value you give it'."
    }
  ],
  "summary": "This tutorial covers RustData Types concepts and techniques. You'll learn how to use RustData Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustData Types and how to apply it in your projects."
}