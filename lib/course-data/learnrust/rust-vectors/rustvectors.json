{
  "id": "9ebefb74-091e-4beb-be50-141065e0c56a",
  "title": "RustVectors",
  "slug": "rustvectors",
  "metadata": {
    "description": "Learn about RustVectors with clear explanations and practical examples.",
    "keywords": [
      "c",
      "fruits",
      "vector",
      "apple",
      "banana",
      "example",
      "orange",
      "elements",
      "println",
      "remove",
      "using"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Vectors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nVectors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vectors\nA\nvector\nis a resizable array.  \nUnlike regular arrays, vectors can grow or shrink in size.\nCreating a Vector\nTo create a vector, use the\nvec!\nmacro:\nExample\nlet fruits = vec![\"apple\", \"banana\", \"orange\"];\nThis creates a vector with three string elements.\nAccess Vector Elements\nYou can access values in a vector using index numbers (just like arrays):\nExample\nlet fruits = vec![\"apple\", \"banana\", \"orange\"];\nprintln!(\"First fruit: {}\", fruits[0]);\n\nChange Vector Values\nTo change a value in the vector, refer to the index number and assign a new \nvalue.\nRemember to make the vector mutable (using the\nmut\nkeyword):\nExample\nlet mut fruits = vec![\"apple\", \"banana\", \"orange\"];\nfruits[0] = \"grape\";\nprintln!(\"New first fruit: {}\", fruits[0]);\n\nAdd Elements to a Vector\nYou can add a new element to the end of a vector using the\npush()\nmethod:\nExample\nlet mut fruits = vec![\"apple\", \"banana\"];\nfruits.push(\"cherry\");\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\", \"cherry\"]\n\nRemove Elements from a Vector\nTo remove the last element from a vector, use\npop()\n:\nExample\nlet mut fruits = vec![\"apple\", \"banana\", \"cherry\"];\nfruits.pop();\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\"]\n\nAdd or Remove Elements at a Specified Index\nRust vectors are designed to grow and shrink at the\nend\n, but you can also add or remove \nelements at the\nbeginning\nor\nat a specified index\n.\nUse\ninsert()\nto add an item at a specified \nindex:\nExample\nAdd \"apple\" to the beginning of the vector:\nlet mut fruits = vec![\"banana\", \"orange\"];\nfruits.insert(0, \"apple\");\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\", \"orange\"]\n\nExample\nAdd \"apple\" in the middle of the vector:\nlet mut fruits = vec![\"banana\", \"orange\"];\nfruits.insert(1, \"apple\");\nprintln!(\"{:?}\", fruits); // [\"banana\", \"apple\", \"orange\"]\n\nRemove the First Item\nUse\nremove()\nto remove an element from a specified \nindex:\nExample\nRemove the first item in the vector:\nlet mut fruits = vec![\"apple\", \"banana\", \"orange\"];\nfruits.remove(0);\nprintln!(\"{:?}\", fruits); // [\"banana\", \"orange\"]\n\nNote:\nAdding or removing elements from the beginning is slower than at the end,  \nbecause all the other elements have to shift positions.\nVector Length\nYou can find out how many elements there are in a vector using the\n.len()\nmethod:\nExample\nlet fruits = vec![\"apple\", \"banana\", \"cherry\"];\nprintln!(\"There are {} fruits.\", fruits.len());\n\nLoop Through a Vector\nJust like arrays, you can use a\nfor\nloop to go through all the values in a vector:\nExample\nlet fruits = vec![\"apple\", \"banana\", \"orange\"];\nfor fruit in &fruits {\nprintln!(\"I like {}.\", fruit);\n}\n\nNote:\nUse\n&fruits\nto borrow the vector instead of moving it.\nIn Rust, borrowing means using a reference to a value instead of taking ownership of it.\nWhen you loop through a vector without\n&\n, the values are moved out, and you can no longer use the vector.\nBut when you borrow the vector using\n&\n, you can still use it later in your program.\nYou can learn more about ownership in our chapters on\nOwnership\nand\nBorrowing and References\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let fruits = vec![\"apple\", \"banana\", \"orange\"];",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let fruits = vec![\"apple\", \"banana\", \"orange\"];\nprintln!(\"First fruit: {}\", fruits[0]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let mut fruits = vec![\"apple\", \"banana\", \"orange\"];\nfruits[0] = \"grape\";\nprintln!(\"New first fruit: {}\", fruits[0]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let mut fruits = vec![\"apple\", \"banana\"];\nfruits.push(\"cherry\");\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\", \"cherry\"]",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let mut fruits = vec![\"apple\", \"banana\", \"cherry\"];\nfruits.pop();\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\"]",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let mut fruits = vec![\"banana\", \"orange\"];\nfruits.insert(0, \"apple\");\nprintln!(\"{:?}\", fruits); // [\"apple\", \"banana\", \"orange\"]",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let mut fruits = vec![\"banana\", \"orange\"];\nfruits.insert(1, \"apple\");\nprintln!(\"{:?}\", fruits); // [\"banana\", \"apple\", \"orange\"]",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let mut fruits = vec![\"apple\", \"banana\", \"orange\"];\nfruits.remove(0);\nprintln!(\"{:?}\", fruits); // [\"banana\", \"orange\"]",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let fruits = vec![\"apple\", \"banana\", \"cherry\"];\nprintln!(\"There are {} fruits.\", fruits.len());",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let fruits = vec![\"apple\", \"banana\", \"orange\"];\nfor fruit in &fruits {\nprintln!(\"I like {}.\", fruit);\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let fruits = vec![\"apple\", \"banana\", \"orange\"];"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let fruits = vec![\"apple\", \"banana\", \"orange\"];\nprintln!(\"First fruit: {}\", fruits[0]);"
    }
  ],
  "related_topics": [
    {
      "id": "bc55a6a1-cb0f-4fd8-bb19-9751691edc29",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9ff3489a-7da3-47f3-b49f-b7cb00be6c93",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "46ace1b2-3aca-4439-a322-0f0eb53c1ef7",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nVectors\n\nVectors\nA\nvector?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a resizable array",
        "designed to grow and shrink at the\nend"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Rust\nVectors\n\nVectors\nA\nvector is 'a resizable array'."
    },
    {
      "question": "What is Add or Remove Elements at a Specified Index\nRust vectors?",
      "options": [
        "designed to grow and shrink at the\nend",
        "a resizable array",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Add or Remove Elements at a Specified Index\nRust vectors is 'designed to grow and shrink at the\nend'."
    }
  ],
  "summary": "This tutorial covers RustVectors concepts and techniques. You'll learn how to use RustVectors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustVectors and how to apply it in your projects."
}