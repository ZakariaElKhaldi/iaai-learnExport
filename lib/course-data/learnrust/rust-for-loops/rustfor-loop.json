{
  "id": "d4817310-d76c-4ebe-9d4f-0e48e81ee1de",
  "title": "RustFor Loop",
  "slug": "rustfor-loop",
  "metadata": {
    "description": "Learn about RustFor Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "code",
      "break",
      "println",
      "rust",
      "know",
      "continue",
      "loops",
      "stop",
      "many"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust For Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nFor Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nfor\nLoop\nWhen you know exactly how many times you want to loop through a block of code, use the\nfor\nloop together with the\nin\nkeyword, instead of a\nwhile\nloop:\nExample\nfor i in 1..6 {\nprintln!(\"i is: {}\", i);\n}\n\nThis prints numbers from 1 to 5.\nNote:\n1..6\nmeans from 1 up to (but not including) 6.\nNote:\nRust handles the counter variable (\ni\n) automatically, \nunlike many other programming languages. You \ndon't need to declare or increment it manually.\nInclusive Range\nIf you want to include the last number, use\n..=\n(two dots and an equals sign):\nExample\nfor i in 1..=6 {\nprintln!(\"i is: {}\", i);\n}\n\nThis prints numbers from 1 to 6, including 6.\nBreak and Continue\nJust like other loops, you can use\nbreak\nto stop the loop and\ncontinue\nto skip a value:\nExample\nfor i in 1..=10 {\nif i == 3 {\ncontinue; // skip 3\n}\nif i == 5 {\nbreak; // stop before printing 5\n}\nprintln!(\"i is: {}\", i);\n}\n\nThis prints 1, 2, and 4. It skips 3 and stops before 5.\nRust Loops Summary\nRust has three types of loops that let you run code over and over again. Each one is used in different situations:\n1.\nloop\nThe simplest kind of loop. It runs forever unless you stop it with\nbreak\n.\nloop {\n// do something\nif condition {\nbreak;\n}\n}\nUse\nloop\nwhen you don't know in advance how many times to repeat.\n2.\nwhile\nRepeats code\nwhile a condition is true\n. It checks the condition before each loop.\nwhile count <= 5 {\nprintln!(\"{}\", count);\ncount += 1;\n}\nUse\nwhile\nwhen you want to repeat code until something happens.\n3.\nfor\nRepeats code a fixed number of times.\nfor i in 1..=5 {\nprintln!(\"{}\", i);\n}\nUse\nfor\nwhen you know exactly what to loop through.\nExtra Keywords\nYou can use these in any loop:\nbreak\n- stop the loop\ncontinue\n- skip a value in the loop\nNow that you know how loops work, you are ready to start working with functions and reusable code!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "for i in 1..6 {\nprintln!(\"i is: {}\", i);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "for i in 1..=6 {\nprintln!(\"i is: {}\", i);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "for i in 1..=10 {\nif i == 3 {\ncontinue; // skip 3\n}\nif i == 5 {\nbreak; // stop before printing 5\n}\nprintln!(\"i is: {}\", i);\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "loop {\n// do something\nif condition {\nbreak;\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "while count <= 5 {\nprintln!(\"{}\", count);\ncount += 1;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "for i in 1..=5 {\nprintln!(\"{}\", i);\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for i in 1..6 {\nprintln!(\"i is: {}\", i);\n# TODO: Complete this line",
      "solution": "for i in 1..6 {\nprintln!(\"i is: {}\", i);\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for i in 1..=6 {\n# TODO: Complete this line\n}",
      "solution": "for i in 1..=6 {\nprintln!(\"i is: {}\", i);\n}"
    }
  ],
  "related_topics": [
    {
      "id": "829de100-6b51-4d6a-98c6-9b00cfe81409",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b852b386-ada9-4014-bb18-aab549fba49f",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "20b28c5f-9fc7-419f-bef6-a2dde5122e22",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers RustFor Loop concepts and techniques. You'll learn how to use RustFor Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustFor Loop and how to apply it in your projects."
}