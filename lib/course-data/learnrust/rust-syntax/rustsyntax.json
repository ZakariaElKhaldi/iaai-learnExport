{
  "id": "a245ba6f-7b1d-494e-bf1d-3ed8bd6eb9f8",
  "title": "RustSyntax",
  "slug": "rustsyntax",
  "metadata": {
    "description": "Learn about RustSyntax with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "code",
      "main",
      "rust",
      "example",
      "println",
      "hello",
      "world",
      "macro",
      "syntax",
      "line"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Syntax"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nSyntax",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Syntax\nYou have already seen the following code a couple of times in the first \nchapters. Let's break it down to understand it better:\nExample\nfn main() {\nprintln!(\"Hello World!\");\n}\n\nExample explained\nLine 1:\nfn main()\nis something that always appears at the beginning of every Rust program.\nmain()\nis called a\nfunction\n, and any code inside its curly brackets\n{}\nwill be executed.\nLine 2:\nprintln!()\nis a\nmacro\n, used to output/print text to the screen. In our example it will output \"Hello World!\". \nTo end the code, you must remember a semicolon (\n;\n).\nWhat is a macro?\nA macro is like a function, but with an exclamation mark (\n!\n) after \nit. Don't worry about the terminology for now. For now, just know that macros \n  are similar to functions (they execute things), but they do not always follow the same rules as \n  functions. You will learn more about macros later.\nGood to know:\nThe Rust compiler ignores white spaces.\nThe code above could also been written as:\nfn main(){println!(\"Hello World!\");}\nHowever\n, multiple lines and indentation makes the code more readable.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "fn main() {\nprintln!(\"Hello World!\");\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fn main() {\nprintln!(\"Hello World!\");\n# TODO: Complete this line",
      "solution": "fn main() {\nprintln!(\"Hello World!\");\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "0a1c3408-5a37-4086-a23d-a0dfb543d668",
      "title": "Typescript Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "647a2375-b5d1-4ad8-953b-ef2b6427df83",
      "title": "Typescript Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers RustSyntax concepts and techniques. You'll learn how to use RustSyntax effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustSyntax and how to apply it in your projects."
}