{
  "id": "cc29cfff-3c99-4684-97c2-fb5963452ab6",
  "title": "RustData Structures",
  "slug": "rustdata-structures",
  "metadata": {
    "description": "Learn about RustData Structures with clear explanations and practical examples.",
    "keywords": [
      "c",
      "data",
      "array",
      "hashmap",
      "println",
      "structures",
      "values",
      "fruits",
      "person",
      "rust",
      "different"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Data Structures"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nData Structures",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data Structures\nIn Rust, data structures are used to store and organize values.\nRust provides many built-in data structures. Each is used to handle data in different ways.\nSome of the most common are:\nArray\nVector (Vec)\nTuple\nHashMap\nWe will explore all of them in detail later, but for now, here's a quick introduction to each one.\nArrays\nAn array in Rust is a fixed-size list of values, all of the same type.\nYou cannot grow or shrink an array after it's created.\nTo access an array element, refer to its index number.\nArray indexes start with 0: [0] is the first element,\n[1] is the second element, etc.\nExample\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nprintln!(\"Last fruit: {}\", fruits[2]);\n\nVectors\nA vector is a resizable array. Unlike regular arrays, vectors can grow or \nshrink in size.\nExample\nlet mut fruits = vec![\"apple\", \"banana\"];\nfruits.push(\"cherry\");\nprintln!(\"Last fruit: {}\", fruits[2]);\n\nTuples\nA tuple can hold multiple values of different types. It is useful when grouping different types together.\nYou access tuple elements using a dot and an index number, like\nperson.1\n, etc:\nExample\nlet person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\nprintln!(\"Is active: {}\", person.2);\n\nHashMaps\nA HashMap stores key-value pairs. It lets you look up a value using a key.\nTo use HashMap, you must import it from the standard library.\nExample\n// Import HashMap\nuse std::collections::HashMap;\nfn main() {\nlet mut capitalCities = HashMap::new();\ncapitalCities.insert(\"France\", \"Paris\");\ncapitalCities.insert(\"Japan\", \"Tokyo\");\nprintln!(\"Capital of Japan is {}\", capitalCities[\"Japan\"]);\n}\n\nData Structures Overview\nData Structure\nUse Case\nCan Grow?\nArray\nFixed-size list of same-type values\nNo\nVector (Vec)\nGrowable list of same-type values\nYes\nTuple\nGroup different types together\nNo\nHashMap\nKey-value lookup\nYes\n\n, let's take a closer look at each data structure in more detail.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let fruits = [\"apple\", \"banana\", \"orange\"];\nprintln!(\"Last fruit: {}\", fruits[2]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let mut fruits = vec![\"apple\", \"banana\"];\nfruits.push(\"cherry\");\nprintln!(\"Last fruit: {}\", fruits[2]);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let person = (\"John\", 30, true);\nprintln!(\"Name: {}\", person.0);\nprintln!(\"Age: {}\", person.1);\nprintln!(\"Is active: {}\", person.2);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Import HashMap\nuse std::collections::HashMap;\nfn main() {\nlet mut capitalCities = HashMap::new();\ncapitalCities.insert(\"France\", \"Paris\");\ncapitalCities.insert(\"Japan\", \"Tokyo\");\nprintln!(\"Capital of Japan is {}\", capitalCities[\"Japan\"]);\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "let fruits = [\"apple\", \"banana\", \"orange\"];\nprintln!(\"Last fruit: {}\", fruits[2]);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let mut fruits = vec![\"apple\", \"banana\"];\n# TODO: Complete this line\nprintln!(\"Last fruit: {}\", fruits[2]);",
      "solution": "let mut fruits = vec![\"apple\", \"banana\"];\nfruits.push(\"cherry\");\nprintln!(\"Last fruit: {}\", fruits[2]);"
    }
  ],
  "related_topics": [
    {
      "id": "39047428-563a-4630-9a39-f24f1ea62a73",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b7c52c18-cf1a-473f-bcd3-38096b1995af",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "303b4a29-7522-4d94-bb85-b834658b4036",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is data structures?",
      "options": [
        "used to store and organize values",
        "None of the above.",
        "used to handle data in different ways",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of data structures is 'used to store and organize values'."
    },
    {
      "question": "What is Each?",
      "options": [
        "used to handle data in different ways",
        "used to store and organize values",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Each is 'used to handle data in different ways'."
    }
  ],
  "summary": "This tutorial covers RustData Structures concepts and techniques. You'll learn how to use RustData Structures effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustData Structures and how to apply it in your projects."
}