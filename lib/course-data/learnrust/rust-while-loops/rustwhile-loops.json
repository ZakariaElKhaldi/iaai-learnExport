{
  "id": "1c2d2dc2-63f7-4555-a6eb-466fcf28954b",
  "title": "RustWhile Loops",
  "slug": "rustwhile-loops",
  "metadata": {
    "description": "Learn about RustWhile Loops with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "count",
      "example",
      "condition",
      "println",
      "prints",
      "numbers",
      "number",
      "long",
      "false"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust While Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nWhile Loops",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nwhile\nLoop\nThe\nwhile\nloop runs as long as a condition is\ntrue\n.\nExample\nlet mut count = 1;\nwhile count <= 5 {\nprintln!(\"Count: {}\", count);\ncount += 1;\n}\n\nIn the example above, the loop keeps running as long as the counter is less than or equal to 5.\nIt prints the numbers from 1 to 5, one on each line.\nFalse Condition\nThe while loop checks the condition before each loop, so if the condition is\nfalse\nat the start, the loop will not run at all:\nExample\nlet count = 10;\nwhile count <= 5 {\nprintln!(\"This won't be printed.\");\n}\nStop a While Loop\nYou can stop a\nwhile\nloop when you want by using\nbreak\n:\nExample\nlet mut num = 1;\nwhile num <= 10 {\nif num == 6 {\nbreak;\n}\nprintln!(\"Number: {}\", num);\nnum += 1;\n}\n\nThis prints numbers from 1 to 5 (stops the loop when\nnum\nreaches 6).\n\nLearn how to use the\nfor\nloop to go through a range of values.\nSkip a Value\nYou can skip a value by using the\ncontinue\nstatement:\nExample\nlet mut num = 1;\nwhile num <= 10 {\nif num == 6 {\nnum += 1;\ncontinue;\n}\nprintln!(\"Number: {}\", num);\nnum += 1;\n}\n\nThis prints numbers from 1 to 10, except for the number 6.\n\nLearn how to use the\nfor\nloop to go through a range of values.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let mut count = 1;\nwhile count <= 5 {\nprintln!(\"Count: {}\", count);\ncount += 1;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let count = 10;\nwhile count <= 5 {\nprintln!(\"This won't be printed.\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let mut num = 1;\nwhile num <= 10 {\nif num == 6 {\nbreak;\n}\nprintln!(\"Number: {}\", num);\nnum += 1;\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let mut num = 1;\nwhile num <= 10 {\nif num == 6 {\nnum += 1;\ncontinue;\n}\nprintln!(\"Number: {}\", num);\nnum += 1;\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let mut count = 1;\n# TODO: Complete this line\nprintln!(\"Count: {}\", count);\ncount += 1;\n}",
      "solution": "let mut count = 1;\nwhile count <= 5 {\nprintln!(\"Count: {}\", count);\ncount += 1;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let count = 10;\n# TODO: Complete this line\nprintln!(\"This won't be printed.\");\n}",
      "solution": "let count = 10;\nwhile count <= 5 {\nprintln!(\"This won't be printed.\");\n}"
    }
  ],
  "related_topics": [
    {
      "id": "f4a3ebcf-41af-48b9-8eb7-2646e97588a8",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6b2ed98f-5bf2-4402-9b9a-89443320698e",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "96290e96-bc60-45a7-9aea-6340ac950214",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nWhile Loops\n\nThe\nwhile\nLoop\nThe\nwhile\nloop runs as long as a condition?",
      "options": [
        "less than or equal to 5",
        "None of the above.",
        "true",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Rust\nWhile Loops\n\nThe\nwhile\nLoop\nThe\nwhile\nloop runs as long as a condition is 'true'."
    },
    {
      "question": "What is the loop keeps running as long as the counter?",
      "options": [
        "None of the above.",
        "None of the above.",
        "less than or equal to 5",
        "true"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of the loop keeps running as long as the counter is 'less than or equal to 5'."
    }
  ],
  "summary": "This tutorial covers RustWhile Loops concepts and techniques. You'll learn how to use RustWhile Loops effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustWhile Loops and how to apply it in your projects."
}