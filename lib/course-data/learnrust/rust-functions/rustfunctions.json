{
  "id": "97841dcb-e0fb-4587-8e3d-2c739092dd06",
  "title": "RustFunctions",
  "slug": "rustfunctions",
  "metadata": {
    "description": "Learn about RustFunctions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "functions",
      "example",
      "code",
      "name",
      "return",
      "println",
      "value",
      "call",
      "keyword"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nFunctions\n\nFunctions\nA function is a block of code that only runs when you call it",
      "content": ".\nFunctions are used to organize your code, avoid repeating yourself, and make your program easier to understand.\nCreating a Function\nTo create a function, use the\nfn\nkeyword, followed by the function name and a set of parentheses\n()\nand curly braces\n{}\n:\nExample\nfn\nfunction_name\n() {\n// code to be executed\n}\nCalling a Function\nNow that you have created a function, you can execute it by\ncalling\nit.\nTo call a function, write the name of the function followed by two parantheses\n()\n.\nExample\n// Create a function\nfn say_hello() {\nprintln!(\"Hello from a function!\");\n}\nsay_hello();\n  // Call the function\n\nFunctions with Parameters\nYou can send information into a function using parameters. Parameters are written inside the parentheses\n()\n.\nExample\nfn greet(name: &str) {\nprintln!(\"Hello, {}!\", name);\n}\ngreet(\"John\");\n\nIn this example, the function takes a string parameter called\nname\nand prints it in the \ngreeting message.\nFunctions with Return Values\nA function can also return a value.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Use the",
      "content": "->\nsymbol in the function header to show what type of value will be returned.\nInside the function, use the\nreturn\nkeyword to send the value back:\nExample\nfn add(a: i32, b: i32) -> i32 {\nreturn a + b;\n}\nlet sum = add(3, 4);\nprintln!(\"Sum is: {}\", sum);\n\nThis function adds two numbers and returns the result.\nIn Rust, you can omit the\nreturn\nkeyword. \nJust write the value on the last line of the function,\nwithout a semicolon\n:\nExample\nfn add(a: i32, b: i32) -> i32 {\na + b\n}\nlet sum = add(3, 4);\nprintln!(\"Sum is: {}\", sum);\n\nThe last line\na + b\nis automatically returned.\nBoth examples do the same thing. It is up to you which one to use.\nWhy Use Functions?\nTo organize your code\nTo avoid repeating the same code\nTo make your programs easier to read and change\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "fn\nfunction_name\n() {\n// code to be executed\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a function\nfn say_hello() {\nprintln!(\"Hello from a function!\");\n}\nsay_hello();\n  // Call the function",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fn greet(name: &str) {\nprintln!(\"Hello, {}!\", name);\n}\ngreet(\"John\");",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fn add(a: i32, b: i32) -> i32 {\nreturn a + b;\n}\nlet sum = add(3, 4);\nprintln!(\"Sum is: {}\", sum);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "fn add(a: i32, b: i32) -> i32 {\na + b\n}\nlet sum = add(3, 4);\nprintln!(\"Sum is: {}\", sum);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fn\nfunction_name\n() {\n# TODO: Complete this line\n}",
      "solution": "fn\nfunction_name\n() {\n// code to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a function\nfn say_hello() {\n# TODO: Complete this line\n}\nsay_hello();\n  // Call the function",
      "solution": "// Create a function\nfn say_hello() {\nprintln!(\"Hello from a function!\");\n}\nsay_hello();\n  // Call the function"
    }
  ],
  "related_topics": [
    {
      "id": "8da906ef-9286-4883-8826-10a85b4453c4",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "71fc9fe0-fad8-407a-849c-885defa928a5",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "8444bf23-aa52-4e9d-a7ea-9e0d0493fe92",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rust\nFunctions\n\nFunctions\nA function?",
      "options": [
        "None of the above.",
        "a block of code that only runs when you call it",
        "used to organize your code",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Rust\nFunctions\n\nFunctions\nA function is 'a block of code that only runs when you call it'."
    },
    {
      "question": "What is Functions?",
      "options": [
        "a block of code that only runs when you call it",
        "None of the above.",
        "used to organize your code",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Functions is 'used to organize your code'."
    }
  ],
  "summary": "This tutorial covers RustFunctions concepts and techniques. You'll learn how to use RustFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustFunctions and how to apply it in your projects."
}