{
  "id": "d701621a-72ab-46e1-bf91-0899fbbc790c",
  "title": "RustScope",
  "slug": "rustscope",
  "metadata": {
    "description": "Learn about RustScope with clear explanations and practical examples.",
    "keywords": [
      "c",
      "inside",
      "variable",
      "scope",
      "block",
      "function",
      "message",
      "println",
      "result",
      "variables",
      "outside"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Scope"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nScope",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Scope\nNow that you understand how functions work, it is important to learn how variables act inside and outside of functions.\nScope\nrefers to where a variable is allowed to be used.\nA variable only lives inside the block where it was created. A block is anything inside curly braces\n{ }\n.\nVariable Inside a Function\nA variable created inside a function only exists inside that function:\nExample\nfn myFunction() {\nlet message = \"Hello!\";\nprintln!(\"{}\", message);\u00a0 // You can access the message \n  variable here\n}\nmyFunction();\nprintln!(\"{}\", message); // Error - you cannot access the message variable \n  outside of the function\n\nNote:\nThe variable\nmessage\nonly exists inside the function.  \nTrying to use it outside the function will cause an error.\nVariable Inside a Block\nYou can also create blocks inside other code, like in\nif\nstatements or loops.  \nVariables created in these blocks are only valid inside them.\nExample\nlet score = 80;\nif score > 50 {\nlet result = \"Pass\";\nprintln!(\"Result: {}\", result);\n}\nprintln!(\"Result: {}\", result); \n    // Error: result is out of scope here\n\nVariables in the Same Scope\nTwo variables cannot have the same name in the same scope.\nExample\nlet x = 5;\nlet x = 10; // Error: name already used in this scope\nBut inside a new block, you can use the same variable name again:\nExample\nlet x = 5;\n{\nlet x = 10;\nprintln!(\"Inside block: {}\", x);\n}\nprintln!(\"Outside block: {}\", x);\n\nHere, the two\nx\nvariables are in different \nscopes, so it is allowed. But if you can, try to use different names to make \nyour code easier to read and understand.\nWhy Scope Matters\nUnderstanding scope helps you:\nKnow where a variable can be used\nPrevent naming conflicts\nAvoid errors when working with functions, loops, and conditionals\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "fn myFunction() {\nlet message = \"Hello!\";\nprintln!(\"{}\", message);\u00a0 // You can access the message \n  variable here\n}\nmyFunction();\nprintln!(\"{}\", message); // Error - you cannot access the message variable \n  outside of the function",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let score = 80;\nif score > 50 {\nlet result = \"Pass\";\nprintln!(\"Result: {}\", result);\n}\nprintln!(\"Result: {}\", result); \n    // Error: result is out of scope here",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 5;\nlet x = 10; // Error: name already used in this scope",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 5;\n{\nlet x = 10;\nprintln!(\"Inside block: {}\", x);\n}\nprintln!(\"Outside block: {}\", x);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "fn myFunction() {\nlet message = \"Hello!\";\nprintln!(\"{}\", message);\u00a0 // You can access the message \n  variable here\n}\n# TODO: Complete this line\nprintln!(\"{}\", message); // Error - you cannot access the message variable \n  outside of the function",
      "solution": "fn myFunction() {\nlet message = \"Hello!\";\nprintln!(\"{}\", message);\u00a0 // You can access the message \n  variable here\n}\nmyFunction();\nprintln!(\"{}\", message); // Error - you cannot access the message variable \n  outside of the function"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let score = 80;\nif score > 50 {\nlet result = \"Pass\";\nprintln!(\"Result: {}\", result);\n}\nprintln!(\"Result: {}\", result); \n# TODO: Complete this line",
      "solution": "let score = 80;\nif score > 50 {\nlet result = \"Pass\";\nprintln!(\"Result: {}\", result);\n}\nprintln!(\"Result: {}\", result); \n    // Error: result is out of scope here"
    }
  ],
  "related_topics": [
    {
      "id": "24e6b9b5-6bbd-44ae-abf7-812ed02c7309",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3c4e7061-f3a4-4879-bde2-b6cc1c69fade",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "db482e2d-6895-4aff-a818-aa13ffd7bfec",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "important to learn how variables act inside and outside of functions",
        "None of the above.",
        "None of the above.",
        "allowed to be used"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of it is 'important to learn how variables act inside and outside of functions'."
    },
    {
      "question": "What is Scope\nrefers to where a variable?",
      "options": [
        "allowed to be used",
        "None of the above.",
        "None of the above.",
        "important to learn how variables act inside and outside of functions"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Scope\nrefers to where a variable is 'allowed to be used'."
    }
  ],
  "summary": "This tutorial covers RustScope concepts and techniques. You'll learn how to use RustScope effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustScope and how to apply it in your projects."
}