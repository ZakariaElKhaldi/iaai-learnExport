{
  "id": "51d41a07-8f9e-4b90-967e-1c77552d2b70",
  "title": "RustIf .. Else Conditions",
  "slug": "rustif-else-conditions",
  "metadata": {
    "description": "Learn about RustIf .. Else Conditions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "else",
      "println",
      "example",
      "condition",
      "rust",
      "conditions",
      "specify",
      "code",
      "equal",
      "greater"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust If..Else"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nIf .. Else Conditions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Conditions and If..Else\nYou have already learned that Rust supports the usual logical\nconditions\nfrom mathematics:\nLess than:\na < b\nLess than or equal to:\na <= b\nGreater than:\na > b\nGreater than or equal to:\na >= b\nEqual to\na == b\nNot Equal to:\na != b\nYou can use these conditions to perform different actions for different decisions.\nRust has the following conditional statements:\nUse\nif\nto specify a block of code to be executed, if a specified condition is\ntrue\nUse\nelse\nto specify a block of code to be executed, if the same condition is\nfalse\nUse\nelse if\nto specify a new condition to test, if the first condition is\nfalse\nUse\nswitch\nto specify many alternative blocks of code to be executed\nNote:\nUnlike many other programming languages,\nif..else\ncan be used as a statement or as an expression (to assign a value to a variable) in Rust. See an example at the bottom of the page to better understand it.\nif\nUse\nif\nto specify a block of code to be \nexecuted if a condition is\ntrue\n.\nExample\nif 7 > 5 {\nprintln!(\"7 is greater than 5.\");\n}\n\nYou can also test variables:\nExample\nlet x = 7;\nlet y = 5;\nif x > y {\nprintln!(\"x is greater \n  than y.\");\n}\n\nif...else\nIf the condition is not true, you can use\nelse\nto run different code:\nExample\nlet age = 16;\nif age >= 18 {\nprintln!(\"You can vote.\");\n} else {\nprintln!(\"You are too young to vote.\");\n}\n\nelse if\nYou can check multiple conditions using\nelse if\n:\nExample\nlet score = 85;\nif score >= 90 {\nprintln!(\"Grade: A\");\n} else if score >= 80 {\nprintln!(\"Grade: B\");\n} else if score >= 70 {\nprintln!(\"Grade: C\");\n} else {\nprintln!(\"Grade: F\");\n}\n\nUsing\nif\nas an Expression\nIn Rust,\nif...else\ncan also be used as an\nexpression\n.\nThis means you can assign the result of an\nif\nto a variable:\nExample\nlet time = 20;\nlet greeting = if time < 18 {\n\"Good day.\"\n} else {\n\"Good evening.\"\n};\nprintln!(\"{}\", greeting);\n\nWhen using\nif\nas an expression, you must \ninclude\nelse\n. This ensures the result always has a value.\nSimplified Syntax\nIf each block only contains one line, you can remove the curly braces\n{}\nand write it in a shorter way:\nExample\nlet time = 20;\nlet greeting = if time < 18 { \"Good day.\" } else { \"Good \n  evening.\" };\nprintln!(\"{}\", greeting);\n\nNote:\nThe value from\nif\nand\nelse\nmust be the same type, like two pieces of text or two numbers (in our example, both are strings).\nTip:\nThis example works similarly to the\nternary operator\n(short-hand\nif...else\n) in languages like\nJava\nor\nC\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "if 7 > 5 {\nprintln!(\"7 is greater than 5.\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 7;\nlet y = 5;\nif x > y {\nprintln!(\"x is greater \n  than y.\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let age = 16;\nif age >= 18 {\nprintln!(\"You can vote.\");\n} else {\nprintln!(\"You are too young to vote.\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let score = 85;\nif score >= 90 {\nprintln!(\"Grade: A\");\n} else if score >= 80 {\nprintln!(\"Grade: B\");\n} else if score >= 70 {\nprintln!(\"Grade: C\");\n} else {\nprintln!(\"Grade: F\");\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let time = 20;\nlet greeting = if time < 18 {\n\"Good day.\"\n} else {\n\"Good evening.\"\n};\nprintln!(\"{}\", greeting);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let time = 20;\nlet greeting = if time < 18 { \"Good day.\" } else { \"Good \n  evening.\" };\nprintln!(\"{}\", greeting);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "if 7 > 5 {\n# TODO: Complete this line\n}",
      "solution": "if 7 > 5 {\nprintln!(\"7 is greater than 5.\");\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = 7;\n# TODO: Complete this line\nif x > y {\nprintln!(\"x is greater \n  than y.\");\n}",
      "solution": "let x = 7;\nlet y = 5;\nif x > y {\nprintln!(\"x is greater \n  than y.\");\n}"
    }
  ],
  "related_topics": [
    {
      "id": "670962ab-d3a4-4e15-91f7-359640401ef8",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9a3c592-5cd1-46fc-b307-ff9aac799c03",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "456ff35e-fecc-4a8e-861b-0dc583291e33",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is if a specified condition?",
      "options": [
        "None of the above.",
        "true\nUse\nelse\nto specify a block of code to be executed",
        "None of the above.",
        "true"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of if a specified condition is 'true\nUse\nelse\nto specify a block of code to be executed'."
    },
    {
      "question": "What is if\nUse\nif\nto specify a block of code to be \nexecuted if a condition?",
      "options": [
        "None of the above.",
        "true",
        "None of the above.",
        "true\nUse\nelse\nto specify a block of code to be executed"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of if\nUse\nif\nto specify a block of code to be \nexecuted if a condition is 'true'."
    }
  ],
  "summary": "This tutorial covers RustIf .. Else Conditions concepts and techniques. You'll learn how to use RustIf .. Else Conditions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustIf .. Else Conditions and how to apply it in your projects."
}