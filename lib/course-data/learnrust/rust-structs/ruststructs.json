{
  "id": "75b245e8-78c2-450e-ae8a-cb66c4a3d6c8",
  "title": "RustStructs",
  "slug": "ruststructs",
  "metadata": {
    "description": "Learn about RustStructs with clear explanations and practical examples.",
    "keywords": [
      "c",
      "struct",
      "name",
      "person",
      "user",
      "create",
      "string",
      "println",
      "like",
      "fields",
      "structs"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Structs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nStructs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Structs\nA\nstruct\n(short for \"structure\") is a custom data structure that lets you group related values together.\nYou can think of a struct like a mini-database for one thing, like a person with a name and age.\nCreate a Struct\nYou define a struct using the\nstruct\nkeyword and place the fields (variables) inside:\nExample\nstruct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}\nOnce you have a struct, you can create an object of it.\nThen, you can access the fields of the struct using dot syntax (\n.\n):\nExample\n// Create a Struct called Person\nstruct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}\n// Create a Person object\nlet user = Person {\nname: String::from(\"John\"),\nage: 35,\ncan_vote: true,\n};\n// Access and print the values\nprintln!(\"Name: {}\", \n  user.name);\nprintln!(\"Age: {}\", user.age);\nprintln!(\"Can vote? {}\", \n  user.can_vote);\n\nFields are similar to variables, but they belong to a struct.\nSince they are part of a larger structure (like Person or Car), they are called fields in Rust, not regular variables.\nChange a Field\nTo change a value inside a struct, you must make the struct object mutable by using\nmut\n:\nExample\nstruct Person {\nname: String,\nage: u32,\n}\nlet mut user = \n  Person {\nname: String::from(\"John\"),\nage: 35,\n};\nuser.age = \n  36; // Change value of age\nprintln!(\"Name: {}\", user.name);\nprintln!(\"Updated age: {}\", user.age);\n\nWhy Use Structs?\nTo group related data in a clean way\nTo make your code easier to read and maintain\nTo create real-world examples, like users, books, cars, etc.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "struct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create a Struct called Person\nstruct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}\n// Create a Person object\nlet user = Person {\nname: String::from(\"John\"),\nage: 35,\ncan_vote: true,\n};\n// Access and print the values\nprintln!(\"Name: {}\", \n  user.name);\nprintln!(\"Age: {}\", user.age);\nprintln!(\"Can vote? {}\", \n  user.can_vote);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "struct Person {\nname: String,\nage: u32,\n}\nlet mut user = \n  Person {\nname: String::from(\"John\"),\nage: 35,\n};\nuser.age = \n  36; // Change value of age\nprintln!(\"Name: {}\", user.name);\nprintln!(\"Updated age: {}\", user.age);",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "struct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n# TODO: Complete this line",
      "solution": "struct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Struct called Person\nstruct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}\n# TODO: Complete this line\nlet user = Person {\nname: String::from(\"John\"),\nage: 35,\ncan_vote: true,\n};\n// Access and print the values\nprintln!(\"Name: {}\", \n  user.name);\nprintln!(\"Age: {}\", user.age);\nprintln!(\"Can vote? {}\", \n  user.can_vote);",
      "solution": "// Create a Struct called Person\nstruct Person {\nname: String,\nage: u32,\ncan_vote: bool,\n}\n// Create a Person object\nlet user = Person {\nname: String::from(\"John\"),\nage: 35,\ncan_vote: true,\n};\n// Access and print the values\nprintln!(\"Name: {}\", \n  user.name);\nprintln!(\"Age: {}\", user.age);\nprintln!(\"Can vote? {}\", \n  user.can_vote);"
    }
  ],
  "related_topics": [
    {
      "id": "60e7e3e0-5670-4e2a-951b-59b0e680fd85",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "30f6007d-5094-4504-8dac-def58e257f6e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c93b2e0e-c392-4b3c-84dd-0287f7bd047a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Fields?",
      "options": [
        "similar to variables",
        "None of the above.",
        "None of the above.",
        "Not a Fields."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Fields is 'similar to variables'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers RustStructs concepts and techniques. You'll learn how to use RustStructs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustStructs and how to apply it in your projects."
}