{
  "id": "4683d738-1fd3-493f-9ef9-5ab9b8a34fbc",
  "title": "RustOwnership",
  "slug": "rustownership",
  "metadata": {
    "description": "Learn about RustOwnership with clear explanations and practical examples.",
    "keywords": [
      "value",
      "ownership",
      "println",
      "rust",
      "owner",
      "example",
      "string",
      "works",
      "memory",
      "variable"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Ownership"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nOwnership",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nOwnership\n\nOwnership\nRust uses",
      "content": "\"ownership\" to manage memory in a safe way.\nEvery value in Rust has an\nowner\n. The owner is usually a variable.\nOwnership Rules\nEach value has one owner\nWhen the owner goes out of scope, the value is deleted\nYou can only have one owner at a time, unless you\nborrow\nit (covered in the \nBasic Ownership Example\nIn this example,\na\nowns the string. Then we move it to\nb\n:\nExample\nlet a = String::from(\"Hello\");\nlet b = a;\n// println!(\"{}\", a); Error:\na\nno longer owns the value\nprintln!(\"{}\", b); // Ok: b now owns the value\n\nWhen we assign\na\nto\nb\n, the ownership\nmoves\n. This means only\nb\ncan use the value now, because\na\nis no longer valid.\nBut simple types like numbers, characters and booleans are\ncopied\n, not \nmoved.\nThis means you can still use the original variable after assigning it to \nanother:\nExample\nlet a = 5;\nlet b = a;\nprintln!(\"a = {}\", a);\u00a0 // Works\nprintln!(\"b = {}\", b);\u00a0 // Works\n\nHere,\na\nis\ncopied\ninto\nb\n, \nnot moved, so you can still use\nb\n.\nClone\nFor other types, like\nString\n, if you really want to keep the original value and \nalso assign it to another variable, you can use the\n.clone()\nmethod, which makes \na copy of the data:\nExample\nlet a = String::from(\"Hello\");\nlet b = a.clone(); // Now both have the same \n  value\nprintln!(\"a = {}\", a);\u00a0 // Works\nprintln!(\"b = {}\", b);\u00a0 \n  // Works\n\nHowever, if you don't need to own the value twice, using a reference (\n&\n) is usually better than cloning, which you will learn more about in the \nWhy Ownership Matters\nRust uses ownership to automatically free memory when it's no longer needed\nIt prevents bugs like using memory that's already been deleted",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Learn about\nborrowing",
      "content": "- how to let other parts of your program use a value without taking ownership.\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let a = String::from(\"Hello\");\nlet b = a;\n// println!(\"{}\", a); Error:\na\nno longer owns the value\nprintln!(\"{}\", b); // Ok: b now owns the value",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let a = 5;\nlet b = a;\nprintln!(\"a = {}\", a);\u00a0 // Works\nprintln!(\"b = {}\", b);\u00a0 // Works",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let a = String::from(\"Hello\");\nlet b = a.clone(); // Now both have the same \n  value\nprintln!(\"a = {}\", a);\u00a0 // Works\nprintln!(\"b = {}\", b);\u00a0 \n  // Works",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let a = String::from(\"Hello\");\nlet b = a;\n// println!(\"{}\", a); Error:\n# TODO: Complete this line\nno longer owns the value\nprintln!(\"{}\", b); // Ok: b now owns the value",
      "solution": "let a = String::from(\"Hello\");\nlet b = a;\n// println!(\"{}\", a); Error:\na\nno longer owns the value\nprintln!(\"{}\", b); // Ok: b now owns the value"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let a = 5;\nlet b = a;\n# TODO: Complete this line\nprintln!(\"b = {}\", b);\u00a0 // Works",
      "solution": "let a = 5;\nlet b = a;\nprintln!(\"a = {}\", a);\u00a0 // Works\nprintln!(\"b = {}\", b);\u00a0 // Works"
    }
  ],
  "related_topics": [
    {
      "id": "360183f2-e592-40f6-8318-dbec1432fb4f",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "71262362-a009-425c-a04e-235bb6fce53e",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "68446e6c-486d-42fa-87e4-b841ce1bfa7d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The owner?",
      "options": [
        "usually a variable",
        "None of the above.",
        "None of the above.",
        "deleted\nYou can only have one owner at a time"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The owner is 'usually a variable'."
    },
    {
      "question": "What is the value?",
      "options": [
        "deleted\nYou can only have one owner at a time",
        "usually a variable",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the value is 'deleted\nYou can only have one owner at a time'."
    }
  ],
  "summary": "This tutorial covers RustOwnership concepts and techniques. You'll learn how to use RustOwnership effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustOwnership and how to apply it in your projects."
}