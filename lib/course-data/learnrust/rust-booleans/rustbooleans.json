{
  "id": "4ef54a90-65a6-498d-b028-2513f1bb31ca",
  "title": "RustBooleans",
  "slug": "rustbooleans",
  "metadata": {
    "description": "Learn about RustBooleans with clear explanations and practical examples.",
    "keywords": [
      "true",
      "values",
      "println",
      "booleans",
      "false",
      "boolean",
      "bool",
      "rust",
      "type",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Booleans"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nBooleans",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Booleans\nVery often, in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, Rust has a\nbool\ndata type, which is known as booleans.\nBooleans represent values that are either\ntrue\nor\nfalse\n.\nCreating Boolean Variables\nYou can store a boolean value in a variable using the\nbool\ntype:\nExample\nlet is_programming_fun: bool = true;\nlet is_fish_tasty: bool = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);\n\nRemember that Rust is smart enough to understand that\ntrue\nand\nfalse\nvalues are boolean values, meaning that you don't have to specify the\nbool\nkeyword:\nExample\nlet is_programming_fun = true;\nlet is_fish_tasty = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);\n\nBoolean from Comparison\nMost of the time, there is no need to type\ntrue\nor\nfalse\nyourself. Instead, boolean values come from comparing values using operators like\n==\nor\n>\n:\nExample\nlet age = 20;\nlet can_vote = age >= 18;\nprintln!(\"Can vote? {}\", can_vote);\n\nHere,\nage >= 18\nreturns\ntrue\n, as long as age is 18 or older.\nUsing Booleans in\nif\nStatements\nBoolean values are often used in\nif\nstatements to decide what code should run:\nExample\nlet is_logged_in = true;\nif is_logged_in {\nprintln!(\"Welcome back!\");\n} else {\nprintln!(\"Please \n}\n\nCool, right? Booleans are the basis for all Rust comparisons and conditions. You will learn more about if and else statements in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let is_programming_fun: bool = true;\nlet is_fish_tasty: bool = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let is_programming_fun = true;\nlet is_fish_tasty = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let age = 20;\nlet can_vote = age >= 18;\nprintln!(\"Can vote? {}\", can_vote);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let is_logged_in = true;\nif is_logged_in {\nprintln!(\"Welcome back!\");\n} else {\nprintln!(\"Please log in.\");\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let is_programming_fun: bool = true;\nlet is_fish_tasty: bool = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\n# TODO: Complete this line",
      "solution": "let is_programming_fun: bool = true;\nlet is_fish_tasty: bool = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let is_programming_fun = true;\nlet is_fish_tasty = false;\n# TODO: Complete this line\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);",
      "solution": "let is_programming_fun = true;\nlet is_fish_tasty = false;\nprintln!(\"Is Programming Fun? {}\", is_programming_fun);\nprintln!(\"Is Fish Tasty? {}\", is_fish_tasty);"
    }
  ],
  "related_topics": [
    {
      "id": "96bd431e-d690-4813-96c1-e527fa1d40ff",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6af9167b-b04a-4df6-b14b-c60494939f24",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "83e17fa4-1215-4ef7-8be7-3870494f45a4",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "either\ntrue\nor\nfalse",
        "None of the above.",
        "known as booleans",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of which is 'known as booleans'."
    },
    {
      "question": "What is Booleans represent values that?",
      "options": [
        "known as booleans",
        "either\ntrue\nor\nfalse",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Booleans represent values that is 'either\ntrue\nor\nfalse'."
    }
  ],
  "summary": "This tutorial covers RustBooleans concepts and techniques. You'll learn how to use RustBooleans effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustBooleans and how to apply it in your projects."
}