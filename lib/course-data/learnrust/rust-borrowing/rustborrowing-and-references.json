{
  "id": "ef59e873-61b8-46df-9a65-3c796b984ebd",
  "title": "RustBorrowing and References",
  "slug": "rustborrowing-and-references",
  "metadata": {
    "description": "Learn about RustBorrowing and References with clear explanations and practical examples.",
    "keywords": [
      "c",
      "reference",
      "borrowing",
      "value",
      "without",
      "references",
      "lets",
      "println",
      "rust",
      "want",
      "taking"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnRust",
    "subcategory": "Rust Borrowing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rust\nBorrowing and References",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust\nBorrowing and References\n\nBorrowing and References\nSometimes you want to use a value without taking ownership of it",
      "content": ".",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Rust lets you do this using a\nreference",
      "content": "- this is called\nborrowing\n:\nWhat is a Reference?\nA reference lets you look at a value without owning it.  \nYou create a reference using the\n&\nsymbol:\nExample\nlet a = String::from(\"Hello\");\nlet b = &a;\nprintln!(\"a = {}\", a);\nprintln!(\"b = {}\", b);\n\nSince\nb\nis only borrowing the value,\na\nstill owns it.\nMutable References\nIf you want to\nchange\na value through a reference, you need to make the reference\nmut\n:\nExample\nlet mut name = String::from(\"John\");\nlet name_ref = &mut name;\nname_ref.push_str(\" Doe\");\nprintln!(\"{}\", name_ref); // John Doe\n\nNote:\nYou can only have one mutable reference to a value at a time!\nWhy Borrowing is Important\nBorrowing helps you reuse values safely, without giving them away.\nIt lets you use values without taking ownership\nIt avoids cloning, which can be slow for large data\nIt makes your programs safer and faster\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let a = String::from(\"Hello\");\nlet b = &a;\nprintln!(\"a = {}\", a);\nprintln!(\"b = {}\", b);",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let mut name = String::from(\"John\");\nlet name_ref = &mut name;\nname_ref.push_str(\" Doe\");\nprintln!(\"{}\", name_ref); // John Doe",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let a = String::from(\"Hello\");\nlet b = &a;\nprintln!(\"a = {}\", a);\n# TODO: Complete this line",
      "solution": "let a = String::from(\"Hello\");\nlet b = &a;\nprintln!(\"a = {}\", a);\nprintln!(\"b = {}\", b);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let mut name = String::from(\"John\");\nlet name_ref = &mut name;\nname_ref.push_str(\" Doe\");\n# TODO: Complete this line",
      "solution": "let mut name = String::from(\"John\");\nlet name_ref = &mut name;\nname_ref.push_str(\" Doe\");\nprintln!(\"{}\", name_ref); // John Doe"
    }
  ],
  "related_topics": [
    {
      "id": "a67b0914-f32a-4789-bf45-03bebca47a0b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f0bf233d-b199-45be-8bdd-910cd6d338da",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e8ad9a2c-0039-4a52-80f4-81c38082e6a9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is this?",
      "options": [
        "None of the above.",
        "None of the above.",
        "called\nborrowing\n:\nWhat is a Reference",
        "only borrowing the value"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of this is 'called\nborrowing\n:\nWhat is a Reference'."
    },
    {
      "question": "What is Since\nb?",
      "options": [
        "only borrowing the value",
        "None of the above.",
        "called\nborrowing\n:\nWhat is a Reference",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Since\nb is 'only borrowing the value'."
    }
  ],
  "summary": "This tutorial covers RustBorrowing and References concepts and techniques. You'll learn how to use RustBorrowing and References effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of RustBorrowing and References and how to apply it in your projects."
}