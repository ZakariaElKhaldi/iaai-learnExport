{
  "title": "Python Machine Learning - Grid Search",
  "url": "https://www.w3schools.com/python/python_ml_grid_search.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Machine Learning - Grid Search",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "\nNYC Data Science Academy",
          "href": "https://t.sidekickopen01.com/s3t/c/5/f18dQhb0S7kv8c7RP2W1z75qk59hl3kW7_k2847tBZxCVvfv0f1GTV9PW2RxlDT2bzNMYdZ8s8G01?te=W3R5hFj4cm2zwW41-DxM3zhrr_W3F7ZBj3F6bSSW43T4N94hMnzcW3F4Fvd3zbTMqW2fgYK73F7y_5W3Zp0KM3_Qh5fW4hLxLG2f1Dw_W3F7y_53Zp0KMW3_QgzD3H6xvkW2dTzCR3SYMmGW1mp5CL3ZWTYrW4cbSf23_Qh9QW49NMw73HdlCPW3Hbzjf4fKWwkW43TDjD41YtR1W3zbVlf1S1tRf38WL2&si=6321147182055424&pi=566c78b2-d5c2-45ad-ad0c-74291c07630b",
          "title": ""
        }
      ],
      "text": "On this page, W3schools.com collaborates with NYC Data Science Academy , to deliver digital training content to our students.",
      "html": "<p>On this page, W3schools.com collaborates with <a href=\"https://t.sidekickopen01.com/s3t/c/5/f18dQhb0S7kv8c7RP2W1z75qk59hl3kW7_k2847tBZxCVvfv0f1GTV9PW2RxlDT2bzNMYdZ8s8G01?te=W3R5hFj4cm2zwW41-DxM3zhrr_W3F7ZBj3F6bSSW43T4N94hMnzcW3F4Fvd3zbTMqW2fgYK73F7y_5W3Zp0KM3_Qh5fW4hLxLG2f1Dw_W3F7y_53Zp0KMW3_QgzD3H6xvkW2dTzCR3SYMmGW1mp5CL3ZWTYrW4cbSf23_Qh9QW49NMw73HdlCPW3Hbzjf4fKWwkW43TDjD41YtR1W3zbVlf1S1tRf38WL2&amp;si=6321147182055424&amp;pi=566c78b2-d5c2-45ad-ad0c-74291c07630b\" target=\"_blank\">\nNYC Data Science Academy</a>, to deliver digital training content to our students.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Grid Search",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The majority of machine learning models contain parameters that can be adjusted to vary how the model learns. For example, the logistic regression model, from sklearn , has a parameter C that controls regularization,which affects the complexity of the model.",
      "html": "<p>The majority of machine learning models contain parameters that can be adjusted to vary how the model learns.\nFor example, the logistic regression model, from <code>sklearn</code>,\nhas a parameter <code>C</code> that controls regularization,which affects the complexity of the model.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How do we pick the best value for C ? The best value is dependent on the data used to train the model.",
      "html": "<p>How do we pick the best value for <code>C</code>?\nThe best value is dependent on the data used to train the model.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "How does it work?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "One method is to try out different values and then pick the value that gives the best score. This technique is known as a grid search . If we had to select the values for two or more parameters, we would evaluate all combinations of the sets of values thus forming a grid of values.",
      "html": "<p>One method is to try out different values and then pick the value that gives the best score. This technique is known as a <strong>grid search</strong>.\nIf we had to select the values for two or more parameters, we would evaluate all combinations of the sets of values thus forming a grid of values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Before we get into the example it is good to know what the parameter we are changing does. Higher values of C tell the model, the training data resembles real world information, place a greater weight on the training data. While lower values of C do the opposite.",
      "html": "<p>Before we get into the example it is good to know what the parameter we are changing does.\nHigher values of <code>C</code> tell the model, the training data resembles real world information,\nplace a greater weight on the training data. While lower values of <code>C</code> do the opposite.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Using Default Parameters",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "First let's see what kind of results we can generate without a grid search using only the base parameters.",
      "html": "<p>First let's see what kind of results we can generate without a grid search using only the base parameters.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To get started we must first load in the dataset we will be working with.",
      "html": "<p>To get started we must first load in the dataset we will be working with.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "from sklearn import datasets\niris = datasets.load_iris() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "from sklearn import datasets iris = datasets.load_iris()",
      "language": "python",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "from sklearn import datasets\niris = datasets.load_iris() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Next in order to create the model we must have a set of independent variables X and a dependant variable y.",
      "html": "<p>Next in order to create the model we must have a set of independent variables X and a dependant variable y.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "X = iris['data']\ny = iris['target'] ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "'data'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'target'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "X = iris[ 'data' ] y = iris[ 'target' ]",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "X = iris['data']\ny = iris['target'] ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "'data'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'target'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we will load the logistic model for classifying the iris flowers.",
      "html": "<p>Now we will load the logistic model for classifying the iris flowers.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "from sklearn.linear_model import LogisticRegression ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "from sklearn.linear_model import LogisticRegression",
      "language": "python",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "from sklearn.linear_model import LogisticRegression ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Creating the model, setting max_iter to a higher value to ensure that the model finds a result.",
      "html": "<p>Creating the model, setting max_iter to a higher value to ensure that the model finds a result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Keep in mind the default value for C in a logistic regression model is 1 , we will compare this later.",
      "html": "<p>Keep in mind the default value for <code>C</code> in a logistic regression model is <code>1</code>, we will compare this later.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example below, we look at the iris data set and try to train a model with varying values for C in logistic regression.",
      "html": "<p>In the example below, we look at the iris data set and try to train a model with varying values for <code>C</code> in logistic regression.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "logit = LogisticRegression(max_iter = 10000) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "10000",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "logit = LogisticRegression(max_iter = 10000 )",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "logit = LogisticRegression(max_iter = 10000) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "10000",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After we create the model, we must fit the model to the data.",
      "html": "<p>After we create the model, we must fit the model to the data.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "print(logit.fit(X,y)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "print (logit.fit(X,y))",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "print(logit.fit(X,y)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To evaluate the model we run the score method.",
      "html": "<p>To evaluate the model we run the score method.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "print(logit.score(X,y)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "print (logit.score(X,y))",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "print(logit.score(X,y)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  print(logit.fit(X,y))print(logit.score(X,y)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'data'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'target'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "10000",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "from sklearn import datasetsfrom sklearn.linear_model import\nLogisticRegressioniris = datasets.load_iris()X = iris['data']\ny = iris['target']logit = LogisticRegression(max_iter = 10000)\nprint(logit.fit(X,y))print(logit.score(X,y))",
      "syntax_highlighting": [
        {
          "text": "\n from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n print(logit.fit(X,y))print(logit.score(X,y)) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'data'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'target'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "10000",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> datasets<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn.linear_model <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  LogisticRegression<br/><br/>iris = datasets.load_iris()<br/><br/>X = iris[<span class=\"pythonstringcolor\" style=\"color:green\">'data'</span>]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  y = iris[<span class=\"pythonstringcolor\" style=\"color:green\">'target'</span>]<br/><br/>logit = LogisticRegression(max_iter = <span class=\"pythonnumbercolor\" style=\"color:#905\">10000</span>)<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(logit.fit(X,y))<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(logit.score(X,y)) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  print(logit.fit(X,y))print(logit.score(X,y)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'data'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'target'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "10000",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With the default setting of C = 1 , we achieved a score of 0.973 .",
      "html": "<p>With the default setting of <code>C = 1</code>, we achieved a score of <code>0.973</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's see if we can do any better by implementing a grid search with difference values of 0.973.",
      "html": "<p>Let's see if we can do any better by implementing a grid search with difference values of 0.973.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ADVERTISEMENT",
      "html": "<p style=\"text-align:center;font-size:80%;\">ADVERTISEMENT</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Implementing Grid Search",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will follow the same steps of before except this time we will set a range of values for C .",
      "html": "<p>We will follow the same steps of before except this time we will set a range of values for <code>C</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Knowing which values to set for the searched parameters will take a combination of domain knowledge and practice.",
      "html": "<p>Knowing which values to set for the searched parameters will take a combination of domain knowledge and practice.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since the default value for C is 1 , we will set a range of values surrounding it.",
      "html": "<p>Since the default value for <code>C</code> is <code>1</code>, we will set a range of values surrounding it.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2] ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "0.25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0.5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0.75",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.75",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "C = [ 0.25 , 0.5 , 0.75 , 1 , 1.25 , 1.5 , 1.75 , 2 ]",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2] ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "0.25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0.5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0.75",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.75",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Next we will create a for loop to change out the values of C and evaluate the model with each change.",
      "html": "<p>Next we will create a for loop to change out the values of <code>C</code> and evaluate the model with each change.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "First we will create an empty list to store the score within.",
      "html": "<p>First we will create an empty list to store the score within.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "scores = [] ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "scores = []",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "scores = [] ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To change the values of C we must loop over the range of values and update the parameter each time.",
      "html": "<p>To change the values of <code>C</code> we must loop over the range of values and update the parameter each time.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "for choice in C:\n\u00a0\nlogit.set_params(C=choice)\n\u00a0\nlogit.fit(X, y)\n\u00a0\nscores.append(logit.score(X, y))\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "for choice in C: logit.set_params(C=choice) logit.fit(X, y) scores.append(logit.score(X, y))",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "for choice in C:\n\u00a0\nlogit.set_params(C=choice)\n\u00a0\nlogit.fit(X, y)\n\u00a0\nscores.append(logit.score(X, y))\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With the scores stored in a list, we can evaluate what the best choice of C is.",
      "html": "<p>With the scores stored in a list, we can evaluate what the best choice of <code>C</code> is.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "print(scores) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "print (scores)",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "print(scores) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n  scores = []for choice in C:\u00a0 logit.set_params(C=choice)\u00a0 \n  logit.fit(X, y)\u00a0 scores.append(logit.score(X, y))\n  print(scores) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'data'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'target'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "10000",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0.25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0.5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0.75",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1.75",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "from sklearn import datasetsfrom sklearn.linear_model import\nLogisticRegressioniris = datasets.load_iris()X = iris['data']\ny = iris['target']logit = LogisticRegression(max_iter = 10000)\nC = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\nscores = []for choice in C:\u00a0 logit.set_params(C=choice)\nlogit.fit(X, y)\u00a0 scores.append(logit.score(X, y))\nprint(scores)",
      "syntax_highlighting": [
        {
          "text": "\n from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n  scores = []for choice in C:\u00a0 logit.set_params(C=choice)\u00a0 \n  logit.fit(X, y)\u00a0 scores.append(logit.score(X, y))\n print(scores) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'data'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'target'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "10000",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0.25",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0.5",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0.75",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1.25",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1.5",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1.75",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> datasets<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn.linear_model <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  LogisticRegression<br/><br/>iris = datasets.load_iris()<br/><br/>X = iris[<span class=\"pythonstringcolor\" style=\"color:green\">'data'</span>]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  y = iris[<span class=\"pythonstringcolor\" style=\"color:green\">'target'</span>]<br/><br/>logit = LogisticRegression(max_iter = <span class=\"pythonnumbercolor\" style=\"color:#905\">10000</span>)<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  C = [<span class=\"pythonnumbercolor\" style=\"color:#905\">0.25</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">0.5</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">0.75</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1.25</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1.5</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1.75</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>]<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  scores = []<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> choice <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> C:<br/>\u00a0 logit.set_params(C=choice)<br/>\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  logit.fit(X, y)<br/>\u00a0 scores.append(logit.score(X, y))<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(scores) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n  scores = []for choice in C:\u00a0 logit.set_params(C=choice)\u00a0 \n  logit.fit(X, y)\u00a0 scores.append(logit.score(X, y))\n  print(scores) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'data'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'target'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "10000",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0.25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0.5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0.75",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1.75",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Results Explained",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can see that the lower values of C performed worse than the base parameter of 1 . However, as we increased the value of C to 1.75 the model experienced increased accuracy.",
      "html": "<p>We can see that the lower values of <code>C</code> performed worse than the base parameter of <code>1</code>. However, as we increased the value of <code>C</code> to <code>1.75</code> the model experienced increased accuracy.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It seems that increasing C beyond this amount does not help increase model accuracy.",
      "html": "<p>It seems that increasing <code>C</code> beyond this amount does not help increase model accuracy.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note on Best Practices",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We scored our logistic regression model by using the same data that was used to train it. If the model corresponds too closely to that data, it may not be great at predicting unseen data. This statistical error is known as over fitting .",
      "html": "<p>We scored our logistic regression model by using the same data that was used to train it. If the model corresponds too closely to that data, it may not be great at predicting unseen data. This statistical error is known as <strong>over fitting</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To avoid being misled by the scores on the training data, we can put aside a portion of our data and use it specifically for the purpose of testing the model. Refer to the lecture on train/test splitting to avoid being misled and overfitting.",
      "html": "<p>To avoid being misled by the scores on the training data, we can put aside a portion of our data and use it specifically for the purpose of testing the model. Refer to the lecture on train/test splitting to avoid being misled and overfitting.</p>"
    }
  ]
}