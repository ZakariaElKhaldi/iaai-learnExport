{
  "title": "Python Machine Learning Train/Test",
  "url": "https://www.w3schools.com/python/python_ml_train_test.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Machine Learning - Train/Test",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Evaluate Your Model",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In Machine Learning we create models to predict the outcome of certain events, like in the previous chapter where we predicted the CO2 emission of a car when we knew the weight and engine size.",
      "html": "<p>In Machine Learning we create models to predict the outcome of certain events,\nlike in the previous chapter where we predicted the CO2 emission of a car when we knew\nthe weight and engine size.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To measure if the model is good enough, we can use a method called Train/Test.",
      "html": "<p>To measure if the model is good enough, we can use a method called Train/Test.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "What is Train/Test",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Train/Test is a method to measure the accuracy of your model.",
      "html": "<p>Train/Test is a method to measure the accuracy of your model.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is called Train/Test because you split the data set into two sets: a training set and a testing set.",
      "html": "<p>It is called Train/Test because you split the data set into two sets: a training set and a testing set.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "80% for training, and 20% for testing.",
      "html": "<p> \n  80% for training, and 20% for testing.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You train the model using the training set.",
      "html": "<p>You <em>train</em> the model using the training set.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You test the model using the testing set.",
      "html": "<p>You <em>test</em> the model using the testing set.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Train the model means create the model.",
      "html": "<p><em>Train</em> the model means <em>create</em> the model.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Test the model means test the accuracy of the model.",
      "html": "<p><em>Test</em> the model means test the accuracy of the model.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Start With a Data Set",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Start with a data set you want to test.",
      "html": "<p>Start with a data set you want to test.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Our data set illustrates 100 customers in a shop, and their shopping habits.",
      "html": "<p>Our data set illustrates 100 customers in a shop, and their shopping habits.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "as",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "images": [
        {
          "src": "img_traintest1.png",
          "alt": "",
          "title": "",
          "local_path": "/home/ziko/Dev/Scraper/assets/python/img_traintest1.png"
        }
      ],
      "code": "import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40,\n100) / xplt.scatter(x, y)plt.show()",
      "syntax_highlighting": [
        {
          "text": "\n import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\n x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n 100) / xplt.scatter(x, y)plt.show() ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "as",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> numpy<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> matplotlib.pyplot <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">as</span> plt<br/>numpy.random.seed(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>x = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>)<br/>y = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">150</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>) / x<br/><br/>plt.scatter(x, y)<br/>plt.show() </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "as",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Split Into Train/Test",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The training set should be a random selection of 80% of the original data.",
      "html": "<p>The <em>training</em> set should be a random selection of 80% of the original data.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The testing set should be the remaining 20%.",
      "html": "<p>The <em>testing</em> set should be the remaining 20%.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "train_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:] ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-example",
          "ws-light-grey"
        ],
        "isNotranslate": false
      },
      "code": "train_x = x[: 80 ] train_y = y[: 80 ] test_x = x[ 80 :] test_y = y[ 80 :]",
      "language": "unknown",
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "train_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:] ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-example",
        "ws-light-grey"
      ],
      "is_notranslate": false
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Display the Training Set",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Display the same scatter plot with the training set:",
      "html": "<p>Display the same scatter plot with the training set:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  plt.scatter(train_x, \n  train_y)plt.show() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "images": [
        {
          "src": "img_traintest2.png",
          "alt": "",
          "title": "",
          "local_path": "/home/ziko/Dev/Scraper/assets/python/img_traintest2.png"
        }
      ],
      "code": "plt.scatter(train_x,\ntrain_y)plt.show()",
      "syntax_highlighting": [
        {
          "text": "\n  plt.scatter(train_x, \n  train_y)plt.show() ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  plt.scatter(train_x, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  train_y)<br/>plt.show() </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  plt.scatter(train_x, \n  train_y)plt.show() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Display the Testing Set",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To make sure the testing set is not completely different, we will take a look at the testing set as well.",
      "html": "<p>To make sure the testing set is not completely different, we will take a look at the testing set as well.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  plt.scatter(test_x, \n  test_y)plt.show() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "images": [
        {
          "src": "img_traintest3.png",
          "alt": "",
          "title": "",
          "local_path": "/home/ziko/Dev/Scraper/assets/python/img_traintest3.png"
        }
      ],
      "code": "plt.scatter(test_x,\ntest_y)plt.show()",
      "syntax_highlighting": [
        {
          "text": "\n  plt.scatter(test_x, \n  test_y)plt.show() ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  plt.scatter(test_x, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  test_y)<br/>plt.show() </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  plt.scatter(test_x, \n  test_y)plt.show() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Fit the Data Set",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "polynomial regression",
          "href": "https://www.w3schools.com/python_ml_polynomial_regression.asp",
          "title": ""
        }
      ],
      "text": "What does the data set look like? In my opinion I think the best fit would be a polynomial regression , so let us draw a line of polynomial regression.",
      "html": "<p>What does the data set look like? In my opinion I think the best fit would be \na <a href=\"python_ml_polynomial_regression.asp\">polynomial regression</a>, so let us draw a line of polynomial regression.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To draw a line through the data points, we use the plot() method of the matplotlib module:",
      "html": "<p>To draw a line through the data points, we use the <code>\nplot()</code> method of the matplotlib module:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\n  train_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n  myline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "as",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "6",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "images": [
        {
          "src": "img_traintest3_2.png",
          "alt": "",
          "title": "",
          "local_path": "/home/ziko/Dev/Scraper/assets/python/img_traintest3_2.png"
        }
      ],
      "code": "import numpyimport\nmatplotlib.pyplot as pltnumpy.random.seed(2)x =\nnumpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y =\ny[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\nplt.plot(myline, mymodel(myline))plt.show()",
      "syntax_highlighting": [
        {
          "text": "\n import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\n train_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n myline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show() ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "as",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "6",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> numpy<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  matplotlib.pyplot <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">as</span> plt<br/>numpy.random.seed(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/><br/>x = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>)<br/>y = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">150</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>) / x<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>train_x = x[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/>train_y = y[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/><br/>test_x = x[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/>test_y = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  y[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/><br/>mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class=\"pythonnumbercolor\" style=\"color:#905\">4</span>))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>myline = numpy.linspace(<span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">6</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>)<br/><br/>plt.scatter(train_x, train_y)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  plt.plot(myline, mymodel(myline))<br/>plt.show() </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\n  train_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n  myline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "as",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "6",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The result can back my suggestion of the data set fitting a polynomial regression, even though it would give us some weird results if we try to predict values outside of the data set. Example: the line indicates that a customer spending 6 minutes in the shop would make a purchase worth 200. That is probably a sign of overfitting.",
      "html": "<p>The result can back my suggestion of the data set fitting a polynomial \nregression, even though it would give us some weird results if we try to predict \nvalues outside of the data set. Example: the line indicates that a customer \nspending 6 minutes in the shop would make a purchase worth 200. That is probably \na sign of overfitting.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But what about the R-squared score? The R-squared score is a good indicator of how well my data set is fitting the model.",
      "html": "<p>But what about the R-squared score? The R-squared score is a good indicator \nof how well my data set is fitting the model.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "R2",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Remember R2, also known as R-squared?",
      "html": "<p>Remember R2, also known as R-squared?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It measures the relationship between the x axis and the y axis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 means totally related.",
      "html": "<p>It measures the relationship between the x axis and the y \naxis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans totally related.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The sklearn module has a method called r2_score() that will help us find this relationship.",
      "html": "<p>The sklearn module has a method called <code>r2_score()</code> \nthat will help us find this relationship.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this case we would like to measure the relationship between the minutes a customer stays in the shop and how much money they spend.",
      "html": "<p>In this case we would like to measure the relationship  \nbetween the minutes a customer stays in the shop and how much money they spend.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_ml_traintest4",
        "syntaxHighlighting": [
          {
            "text": "\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40,\n100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\ntest_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y,\n4))r2 = r2_score(train_y, mymodel(train_x))print(r2)",
      "syntax_highlighting": [
        {
          "text": "\n import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n 100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n 4))r2 = r2_score(train_y, mymodel(train_x))print(r2) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> numpy<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn.metrics <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> r2_score<br/>numpy.random.seed(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>x = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>)<br/>y = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">150</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>) / x<br/><br/>train_x = x[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/>train_y = y[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/><br/>test_x = x[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  test_y = y[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/><br/>mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">4</span>))<br/><br/>r2 = r2_score(train_y, mymodel(train_x))<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(r2) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_ml_traintest4",
      "syntax_highlighting_data": [
        {
          "text": "\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The result 0.799 shows that there is a OK relationship.",
      "html": "<p><strong>Note:</strong>  The result 0.799 shows that there is a OK relationship.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Bring in the Testing Set",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we have made a model that is OK, at least when it comes to training data.",
      "html": "<p>Now we have made a model that is OK, at least when it comes to training data.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we want to test the model with the testing data as well, to see if gives us the same result.",
      "html": "<p>Now we want to test the model with the testing data as well, to see if gives us the \nsame result.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_ml_traintest5",
        "syntaxHighlighting": [
          {
            "text": "\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "150",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "80",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40,\n100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\ntest_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y,\n4))r2 = r2_score(test_y, mymodel(test_x))print(r2)",
      "syntax_highlighting": [
        {
          "text": "\n import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n 100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n 4))r2 = r2_score(test_y, mymodel(test_x))print(r2) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "150",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "80",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> numpy<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn.metrics <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> r2_score<br/>numpy.random.seed(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>x = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>)<br/>y = numpy.random.normal(<span class=\"pythonnumbercolor\" style=\"color:#905\">150</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">100</span>) / x<br/><br/>train_x = x[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/>train_y = y[:<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>]<br/><br/>test_x = x[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  test_y = y[<span class=\"pythonnumbercolor\" style=\"color:#905\">80</span>:]<br/><br/>mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">4</span>))<br/><br/>r2 = r2_score(test_y, mymodel(test_x))<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(r2) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_ml_traintest5",
      "syntax_highlighting_data": [
        {
          "text": "\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\n  x = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "150",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "80",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: The result 0.809 shows that the model fits the testing set as well, and we are confident that we can use the model to predict future values.",
      "html": "<p><strong>Note:</strong>  The result 0.809 shows that the model fits the \n  testing set as well, and we are confident that we can use the model to predict \n  future values.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Predict Values",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now that we have established that our model is OK, we can start predicting new values.",
      "html": "<p>Now that we have established that our model is OK, we can start predicting \nnew values.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  print(mymodel(5)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "print(mymodel(5))",
      "syntax_highlighting": [
        {
          "text": "\n print(mymodel(5)) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(mymodel(<span class=\"pythonnumbercolor\" style=\"color:#905\">5</span>)) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  print(mymodel(5)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:",
      "html": "<p>The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:</p>"
    }
  ]
}