{
  "title": "Python Binary Trees",
  "url": "https://www.w3schools.com/python/python_dsa_binarytrees.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Python Binary Trees",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A tree is a hierarchical data structure consisting of nodes connected by edges.",
      "html": "<p class=\"intro\">A tree is a hierarchical data structure consisting of nodes connected by edges.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Each node contains a value and references to its child nodes.",
      "html": "<p class=\"intro\">Each node contains a value and references to its child nodes.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes, a left child node and a right child node.",
      "html": "<p>A Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes, a left child node and a right child node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This restriction, that a node can have a maximum of two child nodes, gives us many benefits:",
      "html": "<p>This restriction, that a node can have a maximum of two child nodes, gives us many benefits:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Tree Implementation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Linked List",
          "href": "https://www.w3schools.com/python_dsa_linkedlists.asp",
          "title": ""
        }
      ],
      "text": "The Binary Tree above can be implemented much like a Linked List , except that instead of linking each node to one next node, we create a structure where each node can be linked to both its left and right child nodes.",
      "html": "<p>The Binary Tree above can be implemented much like a <a href=\"python_dsa_linkedlists.asp\">Linked List</a>, except that instead of linking each node to one next node,\n  we create a structure where each node can be linked to both its left and right child nodes.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'R'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'A'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'B'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'C'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'D'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'E'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'F'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'G'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Test",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"root.right.left.data:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class TreeNode:\ndef __init__(self, data):\nself.data = data\nself.left = None\nself.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data)",
      "syntax_highlighting": [
        {
          "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'R'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'A'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'B'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'C'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'D'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'E'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'F'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'G'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Test",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"root.right.left.data:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> TreeNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.left = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.right = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nroot = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'R'</span>)<br/>\nnodeA = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'A'</span>)<br/>\nnodeB = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'B'</span>)<br/>\nnodeC = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'C'</span>)<br/>\nnodeD = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'D'</span>)<br/>\nnodeE = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'E'</span>)<br/>\nnodeF = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'F'</span>)<br/>\nnodeG = TreeNode(<span class=\"pythonstringcolor\" style=\"color:green\">'G'</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nroot.left = nodeA<br/>\nroot.right = nodeB<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnodeA.left = nodeC<br/>\nnodeA.right = nodeD<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnodeB.left = nodeE<br/>\nnodeB.right = nodeF<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnodeF.left = nodeG<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Test<br/></span>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"root.right.left.data:\"</span>, root.right.left.data) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'R'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'A'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'B'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'C'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'D'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'E'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'F'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'G'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Test",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"root.right.left.data:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Types of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.",
      "html": "<p>There are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.",
      "html": "<p>The different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.",
      "html": "<p>Below are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A balanced Binary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.",
      "html": "<p>A <strong>balanced</strong> Binary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A complete Binary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.",
      "html": "<p>A <strong>complete</strong> Binary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A full Binary Tree is a kind of tree where each node has either 0 or 2 child nodes.",
      "html": "<p>A <strong>full</strong> Binary Tree is a kind of tree where each node has either 0 or 2 child nodes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A perfect Binary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.",
      "html": "<p>A <strong>perfect</strong> Binary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Tree Traversal",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Going through a Tree by visiting every node, one node at a time, is called traversal.",
      "html": "<p>Going through a Tree by visiting every node, one node at a time, is called traversal.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the next until you have visited them all.",
      "html": "<p>Since Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the next until you have visited them all.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.",
      "html": "<p>But since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are two main categories of Tree traversal methods:",
      "html": "<p>There are two main categories of Tree traversal methods:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Breadth First Search (BFS) is when the nodes on the same level are visited before going to the next level in the tree. This means that the tree is explored in a more sideways direction.",
      "html": "<p><strong>Breadth First Search (BFS)</strong> is when the nodes on the same level are visited before going to the next level in the tree. This means that the tree is explored in a more sideways direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Depth First Search (DFS) is when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.",
      "html": "<p><strong>Depth First Search (DFS)</strong> is when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are three different types of DFS traversals:",
      "html": "<p>There are three different types of DFS traversals:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Pre-order Traversal of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Pre-order Traversal is a type of Depth First Search, where each node is visited in a certain order..",
      "html": "<p>Pre-order Traversal is a type of Depth First Search, where each node is visited in a certain order..</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Pre-order Traversal is done by visiting the root node first, then recursively do a pre-order traversal of the left subtree, followed by a recursive pre-order traversal of the right subtree. It's used for creating a copy of the tree, prefix notation of an expression tree, etc.",
      "html": "<p>Pre-order Traversal is done by visiting the root node first, then recursively do a pre-order traversal of the left subtree, followed by a recursive pre-order traversal of the right subtree. It's used for creating a copy of the tree, prefix notation of an expression tree, etc.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This traversal is \"pre\" order because the node is visited \"before\" the recursive pre-order traversal of the left and right subtrees.",
      "html": "<p>This traversal is \"pre\" order because the node is visited \"before\" the recursive pre-order traversal of the left and right subtrees.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the code for pre-order traversal looks like:",
      "html": "<p>This is how the code for pre-order traversal looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef preOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0preOrderTraversal(node.left)\n\u00a0\u00a0preOrderTraversal(node.right)\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def preOrderTraversal(node):\nif node is None:\nreturn\nprint(node.data, end=\", \")\npreOrderTraversal(node.left)\npreOrderTraversal(node.right)",
      "syntax_highlighting": [
        {
          "text": "\ndef preOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0preOrderTraversal(node.left)\n\u00a0\u00a0preOrderTraversal(node.right)\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> preOrderTraversal(node):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(node.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\", \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0preOrderTraversal(node.left)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0preOrderTraversal(node.right)<span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef preOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0preOrderTraversal(node.left)\n\u00a0\u00a0preOrderTraversal(node.right)\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The first node to be printed is node R, as the Pre-order Traversal works by first visiting, or printing, the current node (line 4), before calling the left and right child nodes recursively (line 5 and 6).",
      "html": "<p>The first node to be printed is node R, as the Pre-order Traversal works by first visiting, or printing, the current node (line 4), before calling the left and right child nodes recursively (line 5 and 6).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The preOrderTraversal() function keeps traversing the left subtree recursively (line 5), before going on to traversing the right subtree (line 6). So the next nodes that are printed are 'A' and then 'C'.",
      "html": "<p>The <code>preOrderTraversal()</code> function keeps traversing the left subtree recursively (line 5), before going on to traversing the right subtree (line 6). So the next nodes that are printed are 'A' and then 'C'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The first time the argument node is None is when the left child of node C is given as an argument (C has no left child).",
      "html": "<p>The first time the argument <code>node</code> is <code>None</code> is when the left child of node C is given as an argument (C has no left child).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After None is returned the first time when calling C's left child, C's right child also returns None , and then the recursive calls continue to propagate back so that A's right child D is the next to be printed.",
      "html": "<p>After <code>None</code> is returned the first time when calling C's left child, C's right child also returns <code>None</code>, and then the recursive calls continue to propagate back so that A's right child D is the next to be printed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code continues to propagate back so that the rest of the nodes in R's right subtree gets printed.",
      "html": "<p>The code continues to propagate back so that the rest of the nodes in R's right subtree gets printed.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "In-order Traversal of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In-order Traversal is a type of Depth First Search, where each node is visited in a certain order.",
      "html": "<p>In-order Traversal is a type of Depth First Search, where each node is visited in a certain order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In-order Traversal does a recursive In-order Traversal of the left subtree, visits the root node, and finally, does a recursive In-order Traversal of the right subtree. This traversal is mainly used for Binary Search Trees where it returns values in ascending order.",
      "html": "<p>In-order Traversal does a recursive In-order Traversal of the left subtree, visits the root node, and finally, does a recursive In-order Traversal of the right subtree. This traversal is mainly used for Binary Search Trees where it returns values in ascending order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What makes this traversal \"in\" order, is that the node is visited in between the recursive function calls. The node is visited after the In-order Traversal of the left subtree, and before the In-order Traversal of the right subtree.",
      "html": "<p>What makes this traversal \"in\" order, is that the node is visited in between the recursive function calls. The node is visited after the In-order Traversal of the left subtree, and before the In-order Traversal of the right subtree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the code for In-order Traversal looks like:",
      "html": "<p>This is how the code for In-order Traversal looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)",
      "syntax_highlighting": [
        {
          "text": "\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> inOrderTraversal(node):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0inOrderTraversal(node.left)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(node.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\", \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0inOrderTraversal(node.right) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The inOrderTraversal() function keeps calling itself with the current left child node as an argument (line 4) until that argument is None and the function returns (line 2-3).",
      "html": "<p>The <code>inOrderTraversal()</code> function keeps calling itself with the current left child node as an argument (line 4) until that argument is <code>None</code> and the function returns (line 2-3).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The first time the argument node is None is when the left child of node C is given as an argument (C has no left child).",
      "html": "<p>The first time the argument <code>node</code> is <code>None</code> is when the left child of node C is given as an argument (C has no left child).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After that, the data part of node C is printed (line 5), which means that 'C' is the first thing that gets printed.",
      "html": "<p>After that, the <code>data</code> part of node C is printed (line 5), which means that 'C' is the first thing that gets printed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Then, node C's right child is given as an argument (line 6), which is None , so the function call returns without doing anything else.",
      "html": "<p>Then, node C's right child is given as an argument (line 6), which is <code>None</code>, so the function call returns without doing anything else.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After 'C' is printed, the previous inOrderTraversal() function calls continue to run, so that 'A' gets printed, then 'D', then 'R', and so on.",
      "html": "<p>After 'C' is printed, the previous <code>inOrderTraversal()</code> function calls continue to run, so that 'A' gets printed, then 'D', then 'R', and so on.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Post-order Traversal of Binary Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Post-order Traversal is a type of Depth First Search, where each node is visited in a certain order..",
      "html": "<p>Post-order Traversal is a type of Depth First Search, where each node is visited in a certain order..</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Post-order Traversal works by recursively doing a Post-order Traversal of the left subtree and the right subtree, followed by a visit to the root node. It is used for deleting a tree, post-fix notation of an expression tree, etc.",
      "html": "<p>Post-order Traversal works by recursively doing a Post-order Traversal of the left subtree and the right subtree, followed by a visit to the root node. It is used for deleting a tree, post-fix notation of an expression tree, etc.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What makes this traversal \"post\" is that visiting a node is done \"after\" the left and right child nodes are called recursively.",
      "html": "<p>What makes this traversal \"post\" is that visiting a node is done \"after\" the left and right child nodes are called recursively.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how the code for Post-order Traversal looks like:",
      "html": "<p>This is how the code for Post-order Traversal looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef postOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0postOrderTraversal(node.left)\n\u00a0\u00a0postOrderTraversal(node.right)\n\u00a0\u00a0print(node.data, end=\", \") ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def postOrderTraversal(node):\nif node is None:\nreturn\npostOrderTraversal(node.left)\npostOrderTraversal(node.right)\nprint(node.data, end=\", \")",
      "syntax_highlighting": [
        {
          "text": "\ndef postOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0postOrderTraversal(node.left)\n\u00a0\u00a0postOrderTraversal(node.right)\n\u00a0\u00a0print(node.data, end=\", \") ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> postOrderTraversal(node):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0postOrderTraversal(node.left)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0postOrderTraversal(node.right)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(node.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\", \"</span>) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef postOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0postOrderTraversal(node.left)\n\u00a0\u00a0postOrderTraversal(node.right)\n\u00a0\u00a0print(node.data, end=\", \") ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The postOrderTraversal() function keeps traversing the left subtree recursively (line 4), until None is returned when C's left child node is called as the node argument.",
      "html": "<p>The <code>postOrderTraversal()</code> function keeps traversing the left subtree recursively (line 4), until <code>None</code> is returned when C's left child node is called as the <code>node</code> argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After C's left child node returns None , line 5 runs and C's right child node returns None , and then the letter 'C' is printed (line 6).",
      "html": "<p>After C's left child node returns <code>None</code>, line 5 runs and C's right child node returns <code>None</code>, and then the letter 'C' is printed (line 6).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that C is visited, or printed, \"after\" its left and right child nodes are traversed, that is why it is called \"post\" order traversal.",
      "html": "<p>This means that C is visited, or printed, \"after\" its left and right child nodes are traversed, that is why it is called \"post\" order traversal.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The postOrderTraversal() function continues to propagate back to previous recursive function calls, so the next node to be printed is 'D', then 'A'.",
      "html": "<p>The <code>postOrderTraversal()</code> function continues to propagate back to previous recursive function calls, so the next node to be printed is 'D', then 'A'.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The function continues to propagate back and printing nodes until all nodes are printed, or visited.",
      "html": "<p>The function continues to propagate back and printing nodes until all nodes are printed, or visited.</p>"
    }
  ]
}