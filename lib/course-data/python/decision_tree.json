{
  "title": "Python Machine Learning Decision Tree",
  "url": "https://www.w3schools.com/python/python_ml_decision_tree.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Machine Learning - Decision Tree",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_ml_decision_tree.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Decision Tree",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this chapter we will show you how to make a \"Decision Tree\". A Decision Tree is a Flow Chart, and can help you make decisions based on previous experience.",
      "html": "<p>In this chapter we will show you how to make a \"Decision Tree\". A Decision \nTree is a Flow Chart, and can help you make decisions based on previous experience.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example, a person will try to decide if he/she should go to a comedy show or not.",
      "html": "<p>In the example, a person will try to decide if he/she should go to a comedy show or \nnot.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Luckily our example person has registered every time there was a comedy show in town, and registered some information about the comedian, and also registered if he/she went or not.",
      "html": "<p>Luckily our example person has registered every time there was a comedy show \nin town, and registered some information about the comedian, and also \nregistered if he/she went or not.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now, based on this data set, Python can create a decision tree that can be used to decide if any new shows are worth attending to.",
      "html": "<p>Now, based on this data set, Python can create a decision tree that can be used to decide \nif any new shows are worth attending to.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "How Does it Work?",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "First, read the dataset with pandas:",
      "html": "<p>First, read the dataset with pandas:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  import pandasdf = pandas.read_csv(\"data.csv\")\n  print(df) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"data.csv\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "import pandasdf = pandas.read_csv(\"data.csv\")\nprint(df)",
      "syntax_highlighting": [
        {
          "text": "\n import pandasdf = pandas.read_csv(\"data.csv\")\n print(df) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"data.csv\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> pandas<br/><br/>df = pandas.read_csv(<span class=\"pythonstringcolor\" style=\"color:green\">\"data.csv\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(df) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  import pandasdf = pandas.read_csv(\"data.csv\")\n  print(df) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"data.csv\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To make a decision tree, all data has to be numerical.",
      "html": "<p>To make a decision tree, all data has to be numerical.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.",
      "html": "<p>We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Pandas has a map() method that takes a dictionary with information on how to convert the values.",
      "html": "<p>Pandas has a <code>map()</code> method that takes a dictionary with information on how to \nconvert the values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "{'UK': 0, 'USA': 1, 'N': 2}",
      "html": "<p><code>{'UK': 0, 'USA': 1, 'N': 2}</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.",
      "html": "<p>Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  d = {'UK': 0, \n  'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d = \n  {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'UK'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'USA'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'N'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'YES'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'NO'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "d = {'UK': 0,\n'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d =\n{'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df)",
      "syntax_highlighting": [
        {
          "text": "\n  d = {'UK': 0, \n 'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d = \n  {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'UK'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'USA'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'N'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "map",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'YES'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'NO'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "map",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  d = {<span class=\"pythonstringcolor\" style=\"color:green\">'UK'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonstringcolor\" style=\"color:green\">'USA'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'N'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>}<br/>df[<span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>] = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>].<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">map</span>(d)<br/>d = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  {<span class=\"pythonstringcolor\" style=\"color:green\">'YES'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'NO'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>}<br/>df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>] = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>].<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">map</span>(d)<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(df) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  d = {'UK': 0, \n  'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d = \n  {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'UK'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'USA'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'N'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'YES'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'NO'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Then we have to separate the feature columns from the target column.",
      "html": "<p>Then we have to separate the <em>feature</em> columns from the <em>target</em> column.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The feature columns are the columns that we try to predict from , and the target column is the column with the values we try to predict.",
      "html": "<p>The feature columns are the columns that we try to predict <em>from</em>, and \nthe target column is the column with the values we try to predict.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']\n  print(X)print(y) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Age'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Experience'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Rank'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']\nprint(X)print(y)",
      "syntax_highlighting": [
        {
          "text": "\n  features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']\n print(X)print(y) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Age'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Experience'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Rank'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  features = [<span class=\"pythonstringcolor\" style=\"color:green\">'Age'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Experience'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Rank'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>]<br/><br/>X = df[features]<br/>y = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>]<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(X)<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(y) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']\n  print(X)print(y) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Age'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Experience'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Rank'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can create the actual decision tree, fit it with our details. Start by importing the modules we need:",
      "html": "<p>Now we can create the actual decision tree, fit it with our details. Start by \nimporting the modules we need:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  import pandasfrom sklearn import treefrom sklearn.tree import \n  DecisionTreeClassifierimport matplotlib.pyplot as pltdf = \n  pandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality'] \n  = df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)\n  features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]\n  y = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X, \n  y)tree.plot_tree(dtree, feature_names=features) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "as",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"data.csv\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'UK'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'USA'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'N'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "'YES'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'NO'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Age'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Experience'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Rank'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "'Nationality'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "'Go'",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "import pandasfrom sklearn import treefrom sklearn.tree import\nDecisionTreeClassifierimport matplotlib.pyplot as pltdf =\npandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality']\n= df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)\nfeatures = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]\ny = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X,\ny)tree.plot_tree(dtree, feature_names=features)",
      "syntax_highlighting": [
        {
          "text": "\n import pandasfrom sklearn import treefrom sklearn.tree import \n  DecisionTreeClassifierimport matplotlib.pyplot as pltdf = \n  pandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality'] \n  = df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)\n features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]\n  y = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X, \n  y)tree.plot_tree(dtree, feature_names=features) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "as",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"data.csv\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'UK'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'USA'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'N'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "map",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "'YES'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'NO'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "map",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Age'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Experience'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Rank'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "'Nationality'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "'Go'",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> pandas<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> tree<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> sklearn.tree <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  DecisionTreeClassifier<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> matplotlib.pyplot <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">as</span> plt<br/><br/>df = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  pandas.read_csv(<span class=\"pythonstringcolor\" style=\"color:green\">\"data.csv\"</span>)<br/><br/>d = {<span class=\"pythonstringcolor\" style=\"color:green\">'UK'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'USA'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'N'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>}<br/>df[<span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>] <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>].<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">map</span>(d)<br/>d = {<span class=\"pythonstringcolor\" style=\"color:green\">'YES'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'NO'</span>: <span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>}<br/>df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>] = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>].<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">map</span>(d)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>features = [<span class=\"pythonstringcolor\" style=\"color:green\">'Age'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Experience'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Rank'</span>, <span class=\"pythonstringcolor\" style=\"color:green\">'Nationality'</span>]<br/><br/>X = df[features]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  y = df[<span class=\"pythonstringcolor\" style=\"color:green\">'Go'</span>]<br/><br/>dtree = DecisionTreeClassifier()<br/>dtree = dtree.fit(X, <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  y)<br/><br/>tree.plot_tree(dtree, feature_names=features) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  import pandasfrom sklearn import treefrom sklearn.tree import \n  DecisionTreeClassifierimport matplotlib.pyplot as pltdf = \n  pandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality'] \n  = df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)\n  features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]\n  y = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X, \n  y)tree.plot_tree(dtree, feature_names=features) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "as",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"data.csv\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'UK'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'USA'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'N'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "'YES'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'NO'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Age'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Experience'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Rank'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "'Nationality'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "'Go'",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Result Explained",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see a comedian or not.",
      "html": "<p>The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see \na comedian or not.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let us read the different aspects of the decision tree:",
      "html": "<p>Let us read the different aspects of the decision tree:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_decisiontree1.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Rank",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Rank <= 6.5 means that every comedian with a rank of 6.5 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).",
      "html": "<p><code>Rank &lt;= 6.5</code> means that every comedian with a rank of 6.5 or \nlower will follow the \n<code>True</code> arrow (to the left), and the rest will \nfollow the <code>False</code> arrow (to the right).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.497 refers to the quality of the split, and is always a number between 0.0 and 0.5, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.",
      "html": "<p><code>gini = 0.497</code> refers to the quality of the \nsplit, and is always a number between 0.0 and 0.5, where 0.0 would mean all of \nthe samples got the same result, and 0.5 would mean that the split is done \nexactly in the middle.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 13 means that there are 13 comedians left at this point in the decision, which is all of them since this is the first step.",
      "html": "<p><code>samples = 13</code> means that there are 13 \ncomedians left at this point in the decision, which is all of them since this is \nthe first step.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [6, 7] means that of these 13 comedians, 6 will get a \"NO\", and 7 will get a \"GO\".",
      "html": "<p><code>value = [6, 7]</code> means that of these 13 \ncomedians, 6 will get a \"NO\", and 7 will get a \n\"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Gini",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are many ways to split the samples, we use the GINI method in this tutorial.",
      "html": "<p>There are many ways to split the samples, we use the GINI method in this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Gini method uses this formula:",
      "html": "<p>The Gini method uses this formula:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Gini = 1 - (x/n) 2 - (y/n) 2",
      "html": "<p><code>Gini = 1 - (x/n)<sup>2</sup> - (y/n)<sup>2</sup></code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Where x is the number of positive answers(\"GO\"), n is the number of samples, and y is the number of negative answers (\"NO\"), which gives us this calculation:",
      "html": "<p>Where <code>x</code> is the number of positive answers(\"GO\"), \n<code>n</code> is the number of samples, and \n<code>y</code> is the number of negative answers (\"NO\"), \nwhich gives us this calculation:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "1 - (7 / 13) 2 - (6 / 13) 2 = 0.497",
      "html": "<p><code>1 - (7 / 13)<sup>2</sup> - (6 / 13)<sup>2</sup> = 0.497</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_decisiontree2.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next step contains two boxes, one box for the comedians with a 'Rank' of 6.5 or lower, and one box with the rest.",
      "html": "<p>The next step contains two boxes, one box for the comedians with a 'Rank' of \n6.5 or lower, and one box with the rest.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "True - 5 Comedians End Here:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.0 means all of the samples got the same result.",
      "html": "<p><code>gini = 0.0</code> means all of the samples got the \nsame result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 5 means that there are 5 comedians left in this branch (5 comedian with a Rank of 6.5 or lower).",
      "html": "<p><code>samples = 5</code> means that there are 5 comedians \nleft in this branch (5 comedian with a Rank of 6.5 or lower).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [5, 0] means that 5 will get a \"NO\" and 0 will get a \"GO\".",
      "html": "<p><code>value = [5, 0]</code> means that 5 will get a \"NO\" \nand 0 will get a \"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "False - 8 Comedians Continue:",
      "level": "h3"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Nationality",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Nationality <= 0.5 means that the comedians with a nationality value of less than 0.5 will follow the arrow to the left (which means everyone from the UK, ), and the rest will follow the arrow to the right.",
      "html": "<p><code>Nationality &lt;= 0.5</code> means that the comedians \nwith a nationality value of less than 0.5 will follow the arrow to the left \n(which means everyone from the UK, ), and the rest will follow the arrow to the \nright.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.219 means that about 22% of the samples would go in one direction.",
      "html": "<p><code>gini = 0.219</code> means that about 22% of the \nsamples would go in one direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 8 means that there are 8 comedians left in this branch (8 comedian with a Rank higher than 6.5).",
      "html": "<p><code>samples = 8</code> means that there are 8 comedians \nleft in this branch (8 comedian with a Rank higher than 6.5).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [1, 7] means that of these 8 comedians, 1 will get a \"NO\" and 7 will get a \"GO\".",
      "html": "<p><code>value = [1, 7]</code> means that of these 8 \ncomedians, 1 will get a \"NO\" and 7 will get a \"GO\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_decisiontree3_2.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "True - 4 Comedians Continue:",
      "level": "h3"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Age",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Age <= 35.5 means that comedians at the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the right.",
      "html": "<p><code>Age &lt;= 35.5</code> means that comedians \nat the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the \nright.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.375 means that about 37,5% of the samples would go in one direction.",
      "html": "<p><code>gini = 0.375</code> means that about 37,5% of the \nsamples would go in one direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 4 means that there are 4 comedians left in this branch (4 comedians from the UK).",
      "html": "<p><code>samples = 4</code> means that there are 4 comedians \nleft in this branch (4 comedians from the UK).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [1, 3] means that of these 4 comedians, 1 will get a \"NO\" and 3 will get a \"GO\".",
      "html": "<p><code>value = [1, 3]</code> means that of these 4 \ncomedians, 1 will get a \"NO\" and 3 will get a \"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "False - 4 Comedians End Here:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.0 means all of the samples got the same result.",
      "html": "<p><code>gini = 0.0</code> means all of the samples got the \nsame result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 4 means that there are 4 comedians left in this branch (4 comedians not from the UK).",
      "html": "<p><code>samples = 4</code> means that there are 4 comedians \nleft in this branch (4 comedians not from the UK).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [0, 4] means that of these 4 comedians, 0 will get a \"NO\" and 4 will get a \"GO\".",
      "html": "<p><code>value = [0, 4]</code> means that of these 4 \ncomedians, 0 will get a \"NO\" and 4 will get a \"GO\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_decisiontree4_2.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "True - 2 Comedians End Here:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.0 means all of the samples got the same result.",
      "html": "<p><code>gini = 0.0</code> means all of the samples got the \nsame result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 2 means that there are 2 comedians left in this branch (2 comedians at the age 35.5 or younger).",
      "html": "<p><code>samples = 2</code> means that there are 2 comedians \nleft in this branch (2 comedians at the age 35.5 or younger).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [0, 2] means that of these 2 comedians, 0 will get a \"NO\" and 2 will get a \"GO\".",
      "html": "<p><code>value = [0, 2]</code> means that of these 2 \ncomedians, 0 will get a \"NO\" and 2 will get a \"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "False - 2 Comedians Continue:",
      "level": "h3"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Experience",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Experience <= 9.5 means that comedians with 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the right.",
      "html": "<p><code>Experience &lt;= 9.5</code> means that comedians \nwith 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the \nright.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.5 means that 50% of the samples would go in one direction.",
      "html": "<p><code>gini = 0.5</code> means that 50% of the samples \nwould go in one direction.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 2 means that there are 2 comedians left in this branch (2 comedians older than 35.5).",
      "html": "<p><code>samples = 2</code> means that there are 2 comedians \nleft in this branch (2 comedians older than 35.5).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [1, 1] means that of these 2 comedians, 1 will get a \"NO\" and 1 will get a \"GO\".",
      "html": "<p><code>value = [1, 1]</code> means that of these 2 \ncomedians, 1 will get a \"NO\" and 1 will get a \"GO\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p style=\"text-align:center\"><img src=\"img_decisiontree5.png\" style=\"max-width:100%;\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "True - 1 Comedian Ends Here:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.0 means all of the samples got the same result.",
      "html": "<p><code>gini = 0.0</code> means all of the samples got the \nsame result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 1 means that there is 1 comedian left in this branch (1 comedian with 9.5 years of experience or less).",
      "html": "<p><code>samples = 1</code> means that there is 1 comedian \nleft in this branch (1 comedian with 9.5 years of experience or less).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [0, 1] means that 0 will get a \"NO\" and 1 will get a \"GO\".",
      "html": "<p><code>value = [0, 1]</code> means that 0 will get a \"NO\" and \n1 will get a \"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "False - 1 Comedian Ends Here:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "gini = 0.0 means all of the samples got the same result.",
      "html": "<p><code>gini = 0.0</code> means all of the samples got the \nsame result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "samples = 1 means that there is 1 comedians left in this branch (1 comedian with more than 9.5 years of experience).",
      "html": "<p><code>samples = 1</code> means that there is 1 comedians \nleft in this branch (1 comedian with more than 9.5 years of experience).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "value = [1, 0] means that 1 will get a \"NO\" and 0 will get a \"GO\".",
      "html": "<p><code>value = [1, 0]</code> means that 1 will get a \"NO\" and \n0 will get a \"GO\".</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Predict Values",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can use the Decision Tree to predict new values.",
      "html": "<p>We can use the Decision Tree to predict new values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, and a comedy ranking of 7?",
      "html": "<p>Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, \nand a comedy ranking of 7?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  print(dtree.predict([[40, 10, 7, 1]])) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "print(dtree.predict([[40, 10, 7, 1]]))",
      "syntax_highlighting": [
        {
          "text": "\n print(dtree.predict([[40, 10, 7, 1]])) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(dtree.predict([[<span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">10</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>]])) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  print(dtree.predict([[40, 10, 7, 1]])) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n  print(dtree.predict([[40, 10, 6, 1]])) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "40",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "6",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "print(dtree.predict([[40, 10, 6, 1]]))",
      "syntax_highlighting": [
        {
          "text": "\n print(dtree.predict([[40, 10, 6, 1]])) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "40",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "6",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(dtree.predict([[<span class=\"pythonnumbercolor\" style=\"color:#905\">40</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">10</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">6</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>]])) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n  print(dtree.predict([[40, 10, 6, 1]])) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "40",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "6",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Different Results",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You will see that the Decision Tree gives you different results if you run it enough times, even if you feed it with the same data.",
      "html": "<p>You will see that the Decision Tree gives you different results if you run \n  it enough times, even if you feed it with the same data.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "That is because the Decision Tree does not give us a 100% certain answer. It is based on the probability of an outcome, and the answer will vary.",
      "html": "<p>That is because the Decision Tree does not give us a 100% certain answer. It is based on the \n  probability of an outcome, and the answer will vary.</p>"
    }
  ]
}