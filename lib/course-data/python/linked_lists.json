{
  "title": "Linked Lists with Python",
  "url": "https://www.w3schools.com/python/python_dsa_linkedlists.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Linked Lists with Python",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Linked List is, as the word implies, a list where the nodes are linked together. Each node contains data and a pointer. The way they are linked together is that each node points to where in the memory the next node is placed.",
      "html": "<p>A <strong>Linked List</strong> is, as the word implies, a list where the nodes are linked together. Each node contains data and a pointer. The way they are linked together is that each node points to where in the memory the next node is placed.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked Lists",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A linked list consists of nodes with some sort of data, and a pointer, or link, to the next node.",
      "html": "<p>A linked list consists of nodes with some sort of data, and a pointer, or link, to the next node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked Lists vs Arrays",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The easiest way to understand linked lists is perhaps by comparing linked lists with arrays.",
      "html": "<p>The easiest way to understand linked lists is perhaps by comparing linked lists with arrays.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Linked lists consist of nodes, and is a linear data structure we make ourselves, unlike arrays which is an existing data structure in the programming language that we can use.",
      "html": "<p>Linked lists consist of nodes, and is a linear data structure we make ourselves, unlike arrays which is an existing data structure in the programming language that we can use.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Nodes in a linked list store links to other nodes, but array elements do not need to store links to other elements.",
      "html": "<p>Nodes in a linked list store links to other nodes, but array elements do not need to store links to other elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Linked Lists in Memory",
          "href": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php",
          "title": ""
        }
      ],
      "text": "Note: How linked lists and arrays are stored in memory is explained in detail on the page Linked Lists in Memory .",
      "html": "<p><strong>Note: </strong>How linked lists and arrays are stored in memory is explained in detail on the page <a href=\"/dsa/dsa_theory_linkedlists_memory.php\">Linked Lists in Memory</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The table below compares linked lists with arrays to give a better understanding of what linked lists are.",
      "html": "<p>The table below compares linked lists with arrays to give a better understanding of what linked lists are.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th></th>\n<th style=\"width: 20%;\">Arrays</th>\n<th style=\"width: 20%;\">Linked Lists</th>\n</tr>\n<tr>\n<td><i>An existing data structure in the programming language</i></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><i>Fixed size in memory</i></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><i>Elements, or nodes, are stored right after each other in memory (contiguously)</i></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><i>Memory usage is low <br/>(each node only contains data, no links to other nodes)</i></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><i>Elements, or nodes, can be accessed directly (random access)</i></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><i>Elements, or nodes, can be inserted or deleted in constant time, no shifting operations in memory needed.</i></td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These are some key linked list properties, compared to arrays:",
      "html": "<p>These are some key linked list properties, compared to arrays:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Types of Linked Lists",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are three basic forms of linked lists:",
      "html": "<p>There are three basic forms of linked lists:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A singly linked list is the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the next node, like in the image below.",
      "html": "<p>A <strong>singly linked list</strong> is the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the next node, like in the image below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A doubly linked list has nodes with addresses to both the previous and the next node, like in the image below, and therefore takes up more memory. But doubly linked lists are good if you want to be able to move both up and down in the list.",
      "html": "<p>A <strong>doubly linked list</strong> has nodes with addresses to both the previous and the next node, like in the image below, and therefore takes up more memory. But doubly linked lists are good if you want to be able to move both up and down in the list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A circular linked list is like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.",
      "html": "<p>A <strong>circular linked list</strong> is like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In singly or doubly linked lists, we can find the start and end of a list by just checking if the links are null . But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.",
      "html": "<p>In singly or doubly linked lists, we can find the start and end of a list by just checking if the links are <span>null</span>. But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Circular linked lists are good for lists you need to cycle through continuously.",
      "html": "<p>Circular linked lists are good for lists you need to cycle through continuously.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The image below is an example of a singly circular linked list:",
      "html": "<p>The image below is an example of a singly circular linked list:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The image below is an example of a doubly circular linked list:",
      "html": "<p>The image below is an example of a doubly circular linked list:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: What kind of linked list you need depends on the problem you are trying to solve.",
      "html": "<p><strong>Note: </strong>What kind of linked list you need depends on the problem you are trying to solve.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Linked List Operations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Basic things we can do with linked lists are:",
      "html": "<p>Basic things we can do with linked lists are:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For simplicity, singly linked lists will be used to explain these operations below.",
      "html": "<p>For simplicity, singly linked lists will be used to explain these operations below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Traversal of a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Traversing a linked list means to go through the linked list by following the links from one node to the next.",
      "html": "<p>Traversing a linked list means to go through the linked list by following the links from one node to the next.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Traversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.",
      "html": "<p>Traversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's next link, and the next node's next link and so on, until the next address is null.",
      "html": "<p>To traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's next link, and the next node's next link and so on, until the next address is null.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below prints out the node values as it traverses along the linked list, in the same way as the animation above.",
      "html": "<p>The code below prints out the node values as it traverses along the linked list, in the same way as the animation above.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\" -> \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"null\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "11",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1)",
      "syntax_highlighting": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\" -> \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"null\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "11",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> Node:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> traverseAndPrint(head):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> currentNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(currentNode.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\" -&gt; \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"null\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>)<br/>\nnode2 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">11</span>)<br/>\nnode3 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>)<br/>\nnode4 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/>\nnode5 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">9</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node2<br/>\nnode2.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node3<br/>\nnode3.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node4<br/>\nnode4.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node5<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\ntraverseAndPrint(node1) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\" -> \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"null\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "11",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Find The Lowest Value in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Let's find the lowest value in a singly linked list by traversing it and checking each value.",
      "html": "<p>Let's find the lowest value in a singly linked list by traversing it and checking each value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "found the lowest value in an array",
          "href": "https://www.w3schools.com/dsa/dsa_data_arrays.php#findLowest",
          "title": ""
        }
      ],
      "text": "Finding the lowest value in a linked list is very similar to how we found the lowest value in an array , except that we need to follow the next link to get to the next node.",
      "html": "<p>Finding the lowest value in a linked list is very similar to how we <a href=\"/dsa/dsa_data_arrays.php#findLowest\">found the lowest value in an array</a>, except that we need to follow the next link to get to the next node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To find the lowest value we need to traverse the list like in the previous code. But in addition to traversing the list, we must also update the current lowest value when we find a node with a lower value.",
      "html": "<p>To find the lowest value we need to traverse the list like in the previous code. But in addition to traversing the list, we must also update the current lowest value when we find a node with a lower value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the code below, the algorithm to find the lowest value is moved into a function called findLowestValue .",
      "html": "<p>In the code below, the algorithm to find the lowest value is moved into a function called <span>findLowestValue</span>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef findLowestValue(head):\n\u00a0\u00a0minValue = head.data\n\u00a0\u00a0currentNode = head.next\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0if currentNode.data < minValue:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minValue = currentNode.data\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0return minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "11",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"The lowest value in the linked list is:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef findLowestValue(head):\nminValue = head.data\ncurrentNode = head.next\nwhile currentNode:\nif currentNode.data < minValue:\nminValue = currentNode.data\ncurrentNode = currentNode.next\nreturn minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1))",
      "syntax_highlighting": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef findLowestValue(head):\n\u00a0\u00a0minValue = head.data\n\u00a0\u00a0currentNode = head.next\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0if currentNode.data < minValue:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minValue = currentNode.data\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0return minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1)) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "11",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"The lowest value in the linked list is:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> Node:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> findLowestValue(head):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0minValue = head.data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> currentNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> currentNode.data &lt; minValue:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minValue = currentNode.data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> minValue<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>)<br/>\nnode2 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">11</span>)<br/>\nnode3 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>)<br/>\nnode4 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/>\nnode5 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">9</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node2<br/>\nnode2.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node3<br/>\nnode3.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node4<br/>\nnode4.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node5<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"The lowest value in the linked list is:\"</span>, findLowestValue(node1)) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef findLowestValue(head):\n\u00a0\u00a0minValue = head.data\n\u00a0\u00a0currentNode = head.next\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0if currentNode.data < minValue:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minValue = currentNode.data\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0return minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "11",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"The lowest value in the linked list is:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Delete a Node in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you want to delete a node in a linked list, it is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.",
      "html": "<p>If you want to delete a node in a linked list, it is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So before deleting the node, we need to get the next pointer from the previous node, and connect the previous node to the new next node before deleting the node in between.",
      "html": "<p>So before deleting the node, we need to get the next pointer from the previous node, and connect the previous node to the new next node before deleting the node in between.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Also, it is a good idea to first connect next pointer to the node after the node we want to delete, before we delete it. This is to avoid a 'dangling' pointer, a pointer that points to nothing, even if it is just for a brief moment.",
      "html": "<p>Also, it is a good idea to first connect next pointer to the node after the node we want to delete, before we delete it. This is to avoid a 'dangling' pointer, a pointer that points to nothing, even if it is just for a brief moment.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.",
      "html": "<p>The simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the code below, the algorithm to delete a node is moved into a function called deleteSpecificNode .",
      "html": "<p>In the code below, the algorithm to delete a node is moved into a function called <span>deleteSpecificNode</span>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\n\u00a0\u00a0if head == nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0return head.next\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode.next and currentNode.next != nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0if currentNode.next is None:\n\u00a0\u00a0\u00a0\u00a0return head\n\n\u00a0\u00a0currentNode.next = currentNode.next.next\n\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\" -> \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"null\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "11",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"Before deletion:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Delete node4",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"\\nAfter deletion:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\nif head == nodeToDelete:\nreturn head.next\n\ncurrentNode = head\nwhile currentNode.next and currentNode.next != nodeToDelete:\ncurrentNode = currentNode.next\n\nif currentNode.next is None:\nreturn head\n\ncurrentNode.next = currentNode.next.next\n\nreturn head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1)",
      "syntax_highlighting": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\n\u00a0\u00a0if head == nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0return head.next\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode.next and currentNode.next != nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0if currentNode.next is None:\n\u00a0\u00a0\u00a0\u00a0return head\n\n\u00a0\u00a0currentNode.next = currentNode.next.next\n\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\" -> \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"null\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "11",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"Before deletion:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Delete node4",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"\\nAfter deletion:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> Node:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> traverseAndPrint(head):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> currentNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(currentNode.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\" -&gt; \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"null\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> deleteSpecificNode(head, nodeToDelete):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> head == nodeToDelete:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> head.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> and currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> != nodeToDelete:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>)<br/>\nnode2 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">11</span>)<br/>\nnode3 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>)<br/>\nnode4 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/>\nnode5 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">9</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node2<br/>\nnode2.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node3<br/>\nnode3.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node4<br/>\nnode4.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node5<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"Before deletion:\"</span>)<br/>\ntraverseAndPrint(node1)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Delete node4<br/></span>\nnode1 = deleteSpecificNode(node1, node4)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"\\nAfter deletion:\"</span>)<br/>\ntraverseAndPrint(node1) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\n\u00a0\u00a0if head == nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0return head.next\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode.next and currentNode.next != nodeToDelete:\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0if currentNode.next is None:\n\u00a0\u00a0\u00a0\u00a0return head\n\n\u00a0\u00a0currentNode.next = currentNode.next.next\n\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\" -> \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"null\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "11",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"Before deletion:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Delete node4",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"\\nAfter deletion:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the deleteSpecificNode function above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the next node.",
      "html": "<p>In the <span>deleteSpecificNode</span> function above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the next node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insert a Node in a Linked List",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the next pointers to make sure we do not break the linked list.",
      "html": "<p>Inserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the next pointers to make sure we do not break the linked list.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the previous node points to the new node, and the new node points to the correct next node.",
      "html": "<p>To insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the previous node points to the new node, and the new node points to the correct next node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The simulation below shows how the links are adjusted when inserting a new node.",
      "html": "<p>The simulation below shows how the links are adjusted when inserting a new node.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\n\u00a0\u00a0if position == 1:\n\u00a0\u00a0\u00a0\u00a0newNode.next = head\n\u00a0\u00a0\u00a0\u00a0return newNode\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0for _ in range(position - 2):\n\u00a0\u00a0\u00a0\u00a0if currentNode is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0newNode.next = currentNode.next\n\u00a0\u00a0currentNode.next = newNode\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\" -> \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"null\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "range",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "break",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"Original list:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Insert a new node with value 97 at position 2",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "97",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"\\nAfter insertion:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\nif position == 1:\nnewNode.next = head\nreturn newNode\n\ncurrentNode = head\nfor _ in range(position - 2):\nif currentNode is None:\nbreak\ncurrentNode = currentNode.next\n\nnewNode.next = currentNode.next\ncurrentNode.next = newNode\nreturn head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1)",
      "syntax_highlighting": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\n\u00a0\u00a0if position == 1:\n\u00a0\u00a0\u00a0\u00a0newNode.next = head\n\u00a0\u00a0\u00a0\u00a0return newNode\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0for _ in range(position - 2):\n\u00a0\u00a0\u00a0\u00a0if currentNode is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0newNode.next = currentNode.next\n\u00a0\u00a0currentNode.next = newNode\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\" -> \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"null\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "range",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "break",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"Original list:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Insert a new node with value 97 at position 2",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "97",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"\\nAfter insertion:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> Node:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> traverseAndPrint(head):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> currentNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(currentNode.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\" -&gt; \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"null\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> insertNodeAtPosition(head, newNode, position):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> position == <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0newNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> newNode<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode = head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> _ <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">range</span>(position - <span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> currentNode is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">break</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0newNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0currentNode.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = newNode<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> head<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>)<br/>\nnode2 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>)<br/>\nnode3 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/>\nnode4 = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">9</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode1.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node2<br/>\nnode2.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node3<br/>\nnode3.<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span> = node4<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"Original list:\"</span>)<br/>\ntraverseAndPrint(node1)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Insert a new node with value 97 at position 2<br/></span>\nnewNode = Node(<span class=\"pythonnumbercolor\" style=\"color:#905\">97</span>)<br/>\nnode1 = insertNodeAtPosition(node1, newNode, <span class=\"pythonnumbercolor\" style=\"color:#905\">2</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"\\nAfter insertion:\"</span>)<br/>\ntraverseAndPrint(node1) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass Node:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.next = None\n\ndef traverseAndPrint(head):\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0while currentNode:\n\u00a0\u00a0\u00a0\u00a0print(currentNode.data, end=\" -> \")\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\u00a0\u00a0print(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\n\u00a0\u00a0if position == 1:\n\u00a0\u00a0\u00a0\u00a0newNode.next = head\n\u00a0\u00a0\u00a0\u00a0return newNode\n\n\u00a0\u00a0currentNode = head\n\u00a0\u00a0for _ in range(position - 2):\n\u00a0\u00a0\u00a0\u00a0if currentNode is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.next\n\n\u00a0\u00a0newNode.next = currentNode.next\n\u00a0\u00a0currentNode.next = newNode\n\u00a0\u00a0return head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\" -> \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"null\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "range",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "break",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"Original list:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Insert a new node with value 97 at position 2",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "97",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"\\nAfter insertion:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the insertNodeAtPosition function above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.",
      "html": "<p>In the <span>insertNodeAtPosition</span> function above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Time Complexity of Linked Lists Operations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Here we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed previously in this tutorial.",
      "html": "<p>Here we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed previously in this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Remember that time complexity just says something about the approximate number of operations needed by the algorithm based on a large set of data (n) , and does not tell us the exact time a specific implementation of an algorithm takes.",
      "html": "<p>Remember that time complexity just says something about the approximate number of operations needed by the \n  algorithm based on a large set of data <code>(n)</code>, and does not tell us the exact time a specific implementation of an algorithm takes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This means that even though linear search is said to have the same time complexity for arrays as for linked list: O(n) , it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.",
      "html": "<p>This means that even though linear search is said to have the same time complexity for arrays as for linked list: <code>O(n)</code>, it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Linear search",
          "href": "https://www.w3schools.com/python_dsa_linearsearch.asp",
          "title": ""
        }
      ],
      "text": "Linear search for linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is O(n) .",
      "html": "<p><a href=\"python_dsa_linearsearch.asp\">Linear search</a> for linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is <code>O(n)</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary search",
          "href": "https://www.w3schools.com/python_dsa_binarysearch.asp",
          "title": ""
        }
      ],
      "text": "Binary search is not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.",
      "html": "<p><a href=\"python_dsa_binarysearch.asp\">Binary search</a> is not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Sorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.",
      "html": "<p>Sorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.</p>"
    }
  ]
}