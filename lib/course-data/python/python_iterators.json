{
  "title": "Python Iterators",
  "url": "https://www.w3schools.com/python/python_iterators.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Python Iterators",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Python Iterators",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An iterator is an object that contains a countable number of values.",
      "html": "<p>An iterator is an object that contains a countable number of values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.",
      "html": "<p>An iterator is an object that can be iterated upon, meaning that you can \ntraverse through all the values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__() .",
      "html": "<p>Technically, in Python, an iterator is an object which implements the \niterator protocol, which consist of the methods <code>__iter__()</code> \nand <code>__next__()</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Iterator vs Iterable",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.",
      "html": "<p>Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable\n<em>containers</em> which you can get an iterator from.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All these objects have a iter() method which is used to get an iterator:",
      "html": "<p>All these objects have a <code>iter()</code> method which is used to get an iterator:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator",
        "syntaxHighlighting": [
          {
            "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\n    print(next(myit))print(next(myit))print(next(myit))\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"apple\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"banana\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"cherry\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "iter",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\nprint(next(myit))print(next(myit))print(next(myit))",
      "syntax_highlighting": [
        {
          "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\n print(next(myit))print(next(myit))print(next(myit))\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"apple\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"banana\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"cherry\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "iter",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    mytuple = (<span class=\"pythonstringcolor\" style=\"color:green\">\"apple\"</span>, <span class=\"pythonstringcolor\" style=\"color:green\">\"banana\"</span>, <span class=\"pythonstringcolor\" style=\"color:green\">\"cherry\"</span>)<br/>myit = <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">iter</span>(mytuple)<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator",
      "syntax_highlighting_data": [
        {
          "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\n    print(next(myit))print(next(myit))print(next(myit))\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"apple\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"banana\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"cherry\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "iter",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Even strings are iterable objects, and can return an iterator:",
      "html": "<p>Even strings are iterable objects, and can return an iterator:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator2",
        "syntaxHighlighting": [
          {
            "text": "\n    mystr = \"banana\"myit = iter(mystr)\n    print(next(myit))print(next(myit))print(next(myit))\n    print(next(myit))print(next(myit))print(next(myit))\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"banana\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "iter",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mystr = \"banana\"myit = iter(mystr)\nprint(next(myit))print(next(myit))print(next(myit))\nprint(next(myit))print(next(myit))print(next(myit))",
      "syntax_highlighting": [
        {
          "text": "\n    mystr = \"banana\"myit = iter(mystr)\n print(next(myit))print(next(myit))print(next(myit))\n print(next(myit))print(next(myit))print(next(myit))\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"banana\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "iter",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    mystr = <span class=\"pythonstringcolor\" style=\"color:green\">\"banana\"</span><br/>myit = <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">iter</span>(mystr)<br/><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myit))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator2",
      "syntax_highlighting_data": [
        {
          "text": "\n    mystr = \"banana\"myit = iter(mystr)\n    print(next(myit))print(next(myit))print(next(myit))\n    print(next(myit))print(next(myit))print(next(myit))\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"banana\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "iter",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Looping Through an Iterator",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can also use a for loop to iterate through an iterable object:",
      "html": "<p>We can also use a <code>for</code> loop to iterate through an iterable object:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_loop",
        "syntaxHighlighting": [
          {
            "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")\n  for x in mytuple:\n    \u00a0 print(x) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"apple\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"banana\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"cherry\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mytuple = (\"apple\", \"banana\", \"cherry\")\nfor x in mytuple:\nprint(x)",
      "syntax_highlighting": [
        {
          "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")\n for x in mytuple:\n    \u00a0 print(x) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"apple\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"banana\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"cherry\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    mytuple = (<span class=\"pythonstringcolor\" style=\"color:green\">\"apple\"</span>, <span class=\"pythonstringcolor\" style=\"color:green\">\"banana\"</span>, <span class=\"pythonstringcolor\" style=\"color:green\">\"cherry\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> x <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> mytuple:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    \u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(x) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_loop",
      "syntax_highlighting_data": [
        {
          "text": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")\n  for x in mytuple:\n    \u00a0 print(x) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"apple\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"banana\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"cherry\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_loop2",
        "syntaxHighlighting": [
          {
            "text": "\n    mystr = \"banana\"\n  for x in mystr:\n    \u00a0 print(x) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"banana\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mystr = \"banana\"\nfor x in mystr:\nprint(x)",
      "syntax_highlighting": [
        {
          "text": "\n    mystr = \"banana\"\n for x in mystr:\n    \u00a0 print(x) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"banana\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    mystr = <span class=\"pythonstringcolor\" style=\"color:green\">\"banana\"</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> x <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> mystr:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>    \u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(x) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_loop2",
      "syntax_highlighting_data": [
        {
          "text": "\n    mystr = \"banana\"\n  for x in mystr:\n    \u00a0 print(x) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"banana\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The for loop actually creates an iterator object and executes the next() method for each loop.",
      "html": "<p>The <code>for</code> loop actually creates an iterator object and executes the <code>next()</code> \nmethod for each loop.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create an Iterator",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.",
      "html": "<p>To create an object/class as an iterator you have to implement the methods\n<code>__iter__()</code> and <code>\n__next__()</code> to your object.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Python \nClasses/Objects",
          "href": "https://www.w3schools.com/python_classes.asp",
          "title": ""
        }
      ],
      "text": "As you have learned in the Python Classes/Objects chapter, all classes have a function called __init__() , which allows you to do some initializing when the object is being created.",
      "html": "<p>As you have learned in the <a href=\"python_classes.asp\">Python \nClasses/Objects</a> chapter, all classes have a function called\n<code>__init__()</code>, which allows you to do some \ninitializing when the object is being created.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.",
      "html": "<p>The <code>__iter__()</code> method acts similar, you can \ndo operations (initializing etc.), but must always return the iterator object \nitself.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The __next__() method also allows you to do operations, and must return the next item in the sequence.",
      "html": "<p>The <code>__next__()</code> method also allows you to do \noperations, and must return the next item in the sequence.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_create",
        "syntaxHighlighting": [
          {
            "text": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  x = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\n  myclass = MyNumbers()myiter =\n   iter(myclass)print(next(myiter))\n  print(next(myiter))print(next(myiter))print(next(myiter))\n  print(next(myiter)) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "iter",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "next",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a =\n1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\nx = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\nmyclass = MyNumbers()myiter =\niter(myclass)print(next(myiter))\nprint(next(myiter))print(next(myiter))print(next(myiter))\nprint(next(myiter))",
      "syntax_highlighting": [
        {
          "text": "\n class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n 1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  x = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\n myclass = MyNumbers()myiter =\n iter(myclass)print(next(myiter))\n print(next(myiter))print(next(myiter))print(next(myiter))\n print(next(myiter)) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "iter",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "next",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> MyNumbers:<br/>\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __iter__(self):<br/>\u00a0\u00a0\u00a0 self.a = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span><br/>\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> self<br/><br/>\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __next__(self):<br/>\u00a0\u00a0\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  x = self.a<br/>\u00a0\u00a0\u00a0 self.a += <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span><br/>\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> x<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>myclass = MyNumbers()<br/>myiter =<span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">iter</span>(myclass)<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myiter))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myiter))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myiter))<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myiter))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">next</span>(myiter)) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_create",
      "syntax_highlighting_data": [
        {
          "text": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  x = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\n  myclass = MyNumbers()myiter =\n   iter(myclass)print(next(myiter))\n  print(next(myiter))print(next(myiter))print(next(myiter))\n  print(next(myiter)) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "iter",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "next",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "StopIteration",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example above would continue forever if you had enough next() statements, or if it was used in a for loop.",
      "html": "<p>The example above would continue forever if you had enough next() statements, or if it was used in a \n<code>for</code> loop.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To prevent the iteration from going on forever, we can use the StopIteration statement.",
      "html": "<p>To prevent the iteration from going on forever, we can use the \n<code>StopIteration</code> statement.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:",
      "html": "<p>In the <code>__next__()</code> method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_create2",
        "syntaxHighlighting": [
          {
            "text": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  if self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\u00a0\u00a0\u00a0\u00a0\u00a0 \n  self.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\u00a0\u00a0\u00a0 \n  else:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass = \n  MyNumbers()myiter =\n   iter(myclass)for x in myiter:\u00a0 \n  print(x)\n   ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "raise",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "iter",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a =\n1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\nif self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\nself.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\nelse:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass =\nMyNumbers()myiter =\niter(myclass)for x in myiter:\nprint(x)",
      "syntax_highlighting": [
        {
          "text": "\n class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n 1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n if self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\u00a0\u00a0\u00a0\u00a0\u00a0 \n  self.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\u00a0\u00a0\u00a0 \n else:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass = \n  MyNumbers()myiter =\n iter(myclass)for x in myiter:\u00a0 \n print(x)\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "raise",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "iter",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> MyNumbers:<br/>\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __iter__(self):<br/>\u00a0\u00a0\u00a0 self.a = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span><br/>\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> self<br/><br/>\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __next__(self):<br/>\u00a0\u00a0\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> self.a &lt;= <span class=\"pythonnumbercolor\" style=\"color:#905\">20</span>:<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  self.a += <span class=\"pythonnumbercolor\" style=\"color:#905\">1</span><br/>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> x<br/>\u00a0\u00a0\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/>\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">raise</span> StopIteration<br/><br/>myclass = <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  MyNumbers()<br/>myiter =<span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">iter</span>(myclass)<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> x <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> myiter:<br/>\u00a0 <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(x)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/python/trypython.asp?filename=demo_iterator_create2",
      "syntax_highlighting_data": [
        {
          "text": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  if self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\u00a0\u00a0\u00a0\u00a0\u00a0 \n  self.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\u00a0\u00a0\u00a0 \n  else:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass = \n  MyNumbers()myiter =\n   iter(myclass)for x in myiter:\u00a0 \n  print(x)\n   ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "raise",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "iter",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are two methods that you have to implement when you create an iterator, which two?",
      "html": "<p>There are two methods that you have to implement when you create an iterator, which two?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "There are two methods that you have to implement when you create an iterator, which two?",
        "options": [
          {
            "value": "0",
            "text": "__iter__() and __next__()"
          },
          {
            "value": "1",
            "text": "__next__() and __prev__()"
          },
          {
            "value": "2",
            "text": "__init__() and __end__()"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_iterators1"
      },
      "quiz_type": "quiz",
      "question": "There are two methods that you have to implement when you create an iterator, which two?",
      "options": [
        {
          "value": "0",
          "text": "__iter__() and __next__()"
        },
        {
          "value": "1",
          "text": "__next__() and __prev__()"
        },
        {
          "value": "2",
          "text": "__init__() and __end__()"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_iterators1",
      "html": "<form action=\"exercise.asp?x=xrcise_iterators1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\"><code>__iter__()</code> and <code>__next__()</code></label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\"><code>__next__()</code> and <code>__prev__()</code></label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\"><code>__init__()</code> and <code>__end__()</code></label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}