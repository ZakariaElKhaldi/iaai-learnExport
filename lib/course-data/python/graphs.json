{
  "title": "Python Graphs",
  "url": "https://www.w3schools.com/python/python_dsa_graphs.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Python Graphs",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Graphs",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Graph is a non-linear data structure that consists of vertices (nodes) and edges.",
      "html": "<p>A Graph is a non-linear data structure that consists of vertices (nodes) and edges.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A vertex, also called a node, is a point or an object in the Graph, and an edge is used to connect two vertices with each other.",
      "html": "<p>A vertex, also called a node, is a point or an object in the Graph, and an edge is used to connect two vertices with each other.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Graphs are non-linear because the data structure allows us to have different paths to get from one vertex to another, unlike with linear data structures like Arrays or Linked Lists.",
      "html": "<p>Graphs are non-linear because the data structure allows us to have different paths to get from one vertex to another, unlike with linear data structures like Arrays or Linked Lists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Graphs are used to represent and solve problems where the data consists of objects and relationships between them, such as:",
      "html": "<p>Graphs are used to represent and solve problems where the data consists of objects and relationships between them, such as:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Graph Representations",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Graph representation tells us how a Graph is stored in memory.",
      "html": "<p>A Graph representation tells us how a Graph is stored in memory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Different Graph representations can:",
      "html": "<p>Different Graph representations can:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below are short introductions of the different Graph representations, but Adjacency Matrix is the representation we will use for Graphs moving forward in this tutorial, as it is easy to understand and implement, and works in all cases relevant for this tutorial.",
      "html": "<p>Below are short introductions of the different Graph representations, but Adjacency Matrix is the representation we will use for Graphs moving forward in this tutorial, as it is easy to understand and implement, and works in all cases relevant for this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Graph representations store information about which vertices are adjacent, and how the edges between the vertices are. Graph representations are slightly different if the edges are directed or weighted.",
      "html": "<p>Graph representations store information about which vertices are adjacent, and how the edges between the vertices are. Graph representations are slightly different if the edges are directed or weighted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Two vertices are adjacent, or neighbors, if there is an edge between them.",
      "html": "<p>Two vertices are adjacent, or neighbors, if there is an edge between them.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Adjacency Matrix Graph Representation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Adjacency Matrix is the Graph representation (structure) we will use for this tutorial.",
      "html": "<p>Adjacency Matrix is the Graph representation (structure) we will use for this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How to implement an Adjacency Matrix is shown on the next page.",
      "html": "<p>How to implement an Adjacency Matrix is shown on the next page.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Adjacency Matrix is a 2D array (matrix) where each cell on index (i,j) stores information about the edge from vertex i to vertex j .",
      "html": "<p>The Adjacency Matrix is a 2D array (matrix) where each cell on index <code>(i,j)</code> stores information about the edge from vertex <code>i</code> to vertex <code>j</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is a Graph with the Adjacency Matrix representation next to it.",
      "html": "<p>Below is a Graph with the Adjacency Matrix representation next to it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The adjacency matrix above represents an undirected Graph, so the values '1' only tells us where the edges are. Also, the values in the adjacency matrix is symmetrical because the edges go both ways (undirected Graph).",
      "html": "<p>The adjacency matrix above represents an undirected Graph, so the values '1' only tells us where the edges are. Also, the values in the adjacency matrix is symmetrical because the edges go both ways (undirected Graph).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a directed Graph with an adjacency matrix, we must decide which vertices the edges go from and to, by inserting the value at the correct indexes (i,j) . To represent a weighted Graph we can put other values than '1' inside the adjacency matrix.",
      "html": "<p>To create a directed Graph with an adjacency matrix, we must decide which vertices the edges go from and to, by inserting the value at the correct indexes <code>(i,j)</code>. To represent a weighted Graph we can put other values than '1' inside the adjacency matrix.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Below is a directed and weighted Graph with the Adjacency Matrix representation next to it.",
      "html": "<p>Below is a directed and weighted Graph with the Adjacency Matrix representation next to it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the adjacency matrix above, the value 3 on index (0,1) tells us there is an edge from vertex A to vertex B, and the weight for that edge is 3 .",
      "html": "<p>In the adjacency matrix above, the value <code>3</code> on index <code>(0,1)</code> tells us there is an edge from vertex A to vertex B, and the weight for that edge is <code>3</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see, the weights are placed directly into the adjacency matrix for the correct edge, and for a directed Graph, the adjacency matrix does not have to be symmetric.",
      "html": "<p>As you can see, the weights are placed directly into the adjacency matrix for the correct edge, and for a directed Graph, the adjacency matrix does not have to be symmetric.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Adjacency List Graph Representation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In case we have a 'sparse' Graph with many vertices, we can save space by using an Adjacency List compared to using an Adjacency Matrix, because an Adjacency Matrix would reserve a lot of memory on empty Array elements for edges that don't exist.",
      "html": "<p>In case we have a 'sparse' Graph with many vertices, we can save space by using an Adjacency List compared to using an Adjacency Matrix, because an Adjacency Matrix would reserve a lot of memory on empty Array elements for edges that don't exist.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A 'sparse' Graph is a Graph where each vertex only has edges to a small portion of the other vertices in the Graph.",
      "html": "<p>A 'sparse' Graph is a Graph where each vertex only has edges to a small portion of the other vertices in the Graph.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An Adjacency List has an array that contains all the vertices in the Graph, and each vertex has a Linked List (or Array) with the vertex's edges.",
      "html": "<p>An Adjacency List has an array that contains all the vertices in the Graph, and each vertex has a Linked List (or Array) with the vertex's edges.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the adjacency list above, the vertices A to D are placed in an Array, and each vertex in the array has its index written right next to it.",
      "html": "<p>In the adjacency list above, the vertices A to D are placed in an Array, and each vertex in the array has its index written right next to it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Each vertex in the Array has a pointer to a Linked List that represents that vertex's edges. More specifically, the Linked List contains the indexes to the adjacent (neighbor) vertices.",
      "html": "<p>Each vertex in the Array has a pointer to a Linked List that represents that vertex's edges. More specifically, the Linked List contains the indexes to the adjacent (neighbor) vertices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So for example, vertex A has a link to a Linked List with values 3, 1, and 2. These values are the indexes to A's adjacent vertices D, B, and C.",
      "html": "<p>So for example, vertex A has a link to a Linked List with values 3, 1, and 2. These values are the indexes to A's adjacent vertices D, B, and C.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An Adjacency List can also represent a directed and weighted Graph, like this:",
      "html": "<p>An Adjacency List can also represent a directed and weighted Graph, like this:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the Adjacency List above, vertices are stored in an Array. Each vertex has a pointer to a Linked List with edges stored as i,w , where i is the index of the vertex the edge goes to, and w is the weight of that edge.",
      "html": "<p>In the Adjacency List above, vertices are stored in an Array. Each vertex has a pointer to a Linked List with edges stored as <code>i,w</code>, where <code>i</code> is the index of the vertex the edge goes to, and <code>w</code> is the weight of that edge.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Node D for example, has a pointer to a Linked List with an edge to vertex A. The values 0,4 means that vertex D has an edge to vertex on index 0 (vertex A), and the weight of that edge is 4 .",
      "html": "<p>Node D for example, has a pointer to a Linked List with an edge to vertex A. The values <code>0,4</code> means that vertex D has an edge to vertex on index <code>0</code> (vertex A), and the weight of that edge is <code>4</code>.</p>"
    }
  ]
}