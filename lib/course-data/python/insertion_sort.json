{
  "title": "Insertion Sort with Python",
  "url": "https://www.w3schools.com/python/python_dsa_insertionsort.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Insertion Sort with Python",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insertion Sort",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Insertion Sort algorithm uses one part of the array to hold the sorted values, and the other part of the array to hold values that are not sorted yet.",
      "html": "<p>The Insertion Sort algorithm uses one part of the array to hold the sorted values,\n  and the other part of the array to hold values that are not sorted yet.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The algorithm takes one value at a time from the unsorted part of the array and puts it into the right place in the sorted part of the array, until the array is sorted.",
      "html": "<p>The algorithm takes one value at a time from the unsorted part of the array and puts it into the right place in the sorted part of the array, until the array is sorted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Manual Run Through",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Before we implement the Insertion Sort algorithm in a Python program, let's manually run through a short array, just to get the idea.",
      "html": "<p>Before we implement the Insertion Sort algorithm in a Python program, let's manually run through a short array, just to get the idea.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 1: We start with an unsorted array.",
      "html": "<p><strong>Step 1:</strong> We start with an unsorted array.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7, 12, 9, 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 2: We can consider the first value as the initial sorted part of the array. If it is just one value, it must be sorted, right?",
      "html": "<p><strong>Step 2:</strong> We can consider the first value as the initial sorted part of the array. If it is just one value, it must be sorted, right?</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[<mark class=\"dsa_mark\"> 7</mark>, 12, 9, 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 3: The next value 12 should now be moved into the correct position in the sorted part of the array. But 12 is higher than 7, so it is already in the correct position.",
      "html": "<p><strong>Step 3:</strong> The next value 12 should now be moved into the correct position in the sorted part of the array. But 12 is higher than 7, so it is already in the correct position.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7,<mark class=\"dsa_mark\"> 12</mark>, 9, 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 4: Consider the next value 9.",
      "html": "<p><strong>Step 4:</strong> Consider the next value 9.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7, 12,<mark class=\"dsa_mark\"> 9</mark>, 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 5: The value 9 must now be moved into the correct position inside the sorted part of the array, so we move 9 in between 7 and 12.",
      "html": "<p><strong>Step 5:</strong> The value 9 must now be moved into the correct position inside the sorted part of the array, so we move 9 in between 7 and 12.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7,<mark class=\"dsa_mark\"> 9</mark>, 12, 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 6: The next value is 11.",
      "html": "<p><strong>Step 6:</strong> The next value is 11.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7, 9, 12, &gt; 11, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 7: We move it in between 9 and 12 in the sorted part of the array.",
      "html": "<p><strong>Step 7:</strong> We move it in between 9 and 12 in the sorted part of the array.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7, 9,<mark class=\"dsa_mark\"> 11</mark>, 12, 3]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 8: The last value to insert into the correct position is 3.",
      "html": "<p><strong>Step 8:</strong> The last value to insert into the correct position is 3.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[ 7, 9, 11, 12,<mark class=\"dsa_mark\"> 3</mark>]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Step 9: We insert 3 in front of all other values because it is the lowest value.",
      "html": "<p><strong>Step 9:</strong> We insert 3 in front of all other values because it is the lowest value.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\n<code class=\"language-python w3-white\">[<mark class=\"dsa_mark\"> 3</mark>,7, 9, 11, 12]</code>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Finally, the array is sorted.",
      "html": "<p>Finally, the array is sorted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Run the simulation below to see the steps above animated:",
      "html": "<p>Run the simulation below to see the steps above animated:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Implement Insertion Sort in Python",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To implement the Insertion Sort algorithm in a Python program, we need:",
      "html": "<p>To implement the Insertion Sort algorithm in a Python program, we need:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The resulting code looks like this:",
      "html": "<p>The resulting code looks like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist.pop(i)\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_index = j\n\u00a0\u00a0mylist.insert(insert_index, current_value)\n\nprint(mylist)\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "64",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "34",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "12",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "22",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "11",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "90",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "len",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "range",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "range",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\ninsert_index = i\ncurrent_value = mylist.pop(i)\nfor j in range(i-1, -1, -1):\nif mylist[j] > current_value:\ninsert_index = j\nmylist.insert(insert_index, current_value)\n\nprint(mylist)",
      "syntax_highlighting": [
        {
          "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist.pop(i)\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_index = j\n\u00a0\u00a0mylist.insert(insert_index, current_value)\n\nprint(mylist)\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "64",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "34",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "25",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "12",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "22",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "11",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "90",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "len",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "range",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "range",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\nmylist = [<span class=\"pythonnumbercolor\" style=\"color:#905\">64</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">34</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">25</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">12</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">22</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">11</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">90</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">5</span>]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nn = <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">len</span>(mylist)<br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> i <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">range</span>(<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>,n):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0insert_index = i<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0current_value = mylist.pop(i)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> j <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">range</span>(i-<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, -<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, -<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> mylist[j] &gt; current_value:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_index = j<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0mylist.insert(insert_index, current_value)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(mylist)<span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist.pop(i)\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_index = j\n\u00a0\u00a0mylist.insert(insert_index, current_value)\n\nprint(mylist)\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "64",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "34",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "12",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "22",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "11",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "90",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "len",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "range",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "range",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insertion Sort Improvement",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Insertion Sort can be improved a little bit more.",
      "html": "<p>Insertion Sort can be improved a little bit more.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The way the code above first removes a value and then inserts it somewhere else is intuitive. It is how you would do Insertion Sort physically with a hand of cards for example. If low value cards are sorted to the left, you pick up a new unsorted card, and insert it in the correct place between the other already sorted cards.",
      "html": "<p>The way the code above first removes a value and then inserts it somewhere else is intuitive. It is how you would do Insertion Sort physically with a hand of cards for example. If low value cards are sorted to the left, you pick up a new unsorted card, and insert it in the correct place between the other already sorted cards.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The problem with this way of programming it is that when removing a value from the array, all elements above must be shifted one index place down:",
      "html": "<p>The problem with this way of programming it is that when removing a value from the array, all elements above must be shifted one index place down:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And when inserting the removed value into the array again, there are also many shift operations that must be done: all following elements must shift one position up to make place for the inserted value:",
      "html": "<p>And when inserting the removed value into the array again, there are also many shift operations that must be done: all following elements must shift one position up to make place for the inserted value:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These shifting operations can take a lot of time, especially for an array with many elements.",
      "html": "<p>These shifting operations can take a lot of time, especially for an array with many elements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hidden memory shifts: You will not see these shifting operations happening in the code if you are using a high-level programming language such as Python or JavaScript, but the shifting operations are still happening in the background. Such shifting operations require extra time for the computer to do, which can be a problem.",
      "html": "<p><strong>Hidden memory shifts: </strong>You will not see these shifting operations happening in the code if you are using a high-level programming language such as Python or JavaScript, but the shifting operations are still happening in the background. Such shifting operations require extra time for the computer to do, which can be a problem.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php#arraysInMemory",
          "title": ""
        }
      ],
      "text": "You can read more about how arrays are stored in memory here .",
      "html": "<p>You can read more about how arrays are stored in memory <a href=\"/dsa/dsa_theory_linkedlists_memory.php#arraysInMemory\">here</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Improved Solution",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can avoid most of these shift operations by only shifting the values necessary:",
      "html": "<p>We can avoid most of these shift operations by only shifting the values necessary:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the image above, first value 7 is copied, then values 11 and 12 are shifted one place up in the array, and at last value 7 is put where value 11 was before.",
      "html": "<p>In the image above, first value 7 is copied, then values 11 and 12 are shifted one place up in the array, and at last value 7 is put where value 11 was before.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The number of shifting operations is reduced from 12 to 2 in this case.",
      "html": "<p>The number of shifting operations is reduced from 12 to 2 in this case.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This improvement is implemented in the example below:",
      "html": "<p>This improvement is implemented in the example below:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist[i]\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0 if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mylist[j+1] = mylist[j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 insert_index = j\n\u00a0\u00a0\u00a0\u00a0 else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break\n\u00a0\u00a0mylist[insert_index] = current_value\n\nprint(mylist) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "64",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "34",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "25",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "12",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "22",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "11",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "90",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "len",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "range",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "in",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "range",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "break",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\ninsert_index = i\ncurrent_value = mylist[i]\nfor j in range(i-1, -1, -1):\nif mylist[j] > current_value:\nmylist[j+1] = mylist[j]\ninsert_index = j\nelse:\nbreak\nmylist[insert_index] = current_value\n\nprint(mylist)",
      "syntax_highlighting": [
        {
          "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist[i]\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0 if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mylist[j+1] = mylist[j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 insert_index = j\n\u00a0\u00a0\u00a0\u00a0 else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break\n\u00a0\u00a0mylist[insert_index] = current_value\n\nprint(mylist) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "64",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "34",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "25",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "12",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "22",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "11",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "90",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "len",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "range",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "in",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "range",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "break",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\nmylist = [<span class=\"pythonnumbercolor\" style=\"color:#905\">64</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">34</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">25</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">12</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">22</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">11</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">90</span>, <span class=\"pythonnumbercolor\" style=\"color:#905\">5</span>]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nn = <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">len</span>(mylist)<br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> i <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">range</span>(<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>,n):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0insert_index = i<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0current_value = mylist[i]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">for</span> j <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">in</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">range</span>(i-<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, -<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>, -<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> mylist[j] &gt; current_value:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mylist[j+<span class=\"pythonnumbercolor\" style=\"color:#905\">1</span>] = mylist[j]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 insert_index = j<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">break</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0mylist[insert_index] = current_value<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(mylist) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nmylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\n\u00a0\u00a0insert_index = i\n\u00a0\u00a0current_value = mylist[i]\n\u00a0\u00a0for j in range(i-1, -1, -1):\n\u00a0\u00a0\u00a0\u00a0 if mylist[j] > current_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mylist[j+1] = mylist[j]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 insert_index = j\n\u00a0\u00a0\u00a0\u00a0 else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break\n\u00a0\u00a0mylist[insert_index] = current_value\n\nprint(mylist) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "64",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "34",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "25",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "12",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "22",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "11",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "90",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "len",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "range",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "in",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "range",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "break",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is also done in the code above is to break out of the inner loop. That is because there is no need to continue comparing values when we have already found the correct place for the current value.",
      "html": "<p>What is also done in the code above is to break out of the inner loop. That is because there is no need to continue comparing values when we have already found the correct place for the current value.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insertion Sort Time Complexity",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Insertion Sort sorts an array of n n values.",
      "html": "<p>Insertion Sort sorts an array of <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-6-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-20\"><span class=\"mjx-mrow\" id=\"MJXc-Node-21\"><span class=\"mjx-mi\" id=\"MJXc-Node-22\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "On average, each value must be compared to about n 2 n 2 other values to find the correct place to insert it.",
      "html": "<p>On average, each value must be compared to about <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mfrac&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;/math&gt;' id=\"MathJax-Element-7-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-23\"><span class=\"mjx-mrow\" id=\"MJXc-Node-24\"><span class=\"mjx-mfrac\" id=\"MJXc-Node-25\"><span class=\"mjx-box MJXc-stacked\" style=\"width: 0.566em; padding: 0px 0.12em;\"><span class=\"mjx-numerator\" style=\"font-size: 70.7%; width: 0.8em; top: -1.097em;\"><span class=\"mjx-mi\" id=\"MJXc-Node-26\" style=\"\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-denominator\" style=\"font-size: 70.7%; width: 0.8em; bottom: -0.603em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-27\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-line\" style=\"border-bottom: 1.3px solid; top: -0.285em; width: 0.566em;\"></span></span><span class=\"mjx-vsize\" style=\"height: 1.202em; vertical-align: -0.426em;\"></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mi>n</mi><mn>2</mn></mfrac></math></span></span> other values to find the correct place to insert it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Insertion Sort must run the loop to insert a value in its correct place approximately n n times.",
      "html": "<p>Insertion Sort must run the loop to insert a value in its correct place approximately <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;' id=\"MathJax-Element-8-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-28\"><span class=\"mjx-mrow\" id=\"MJXc-Node-29\"><span class=\"mjx-mi\" id=\"MJXc-Node-30\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>n</mi></math></span></span> times.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We get time complexity for Insertion Sort: O ( n 2 \u22c5 n ) = O ( n 2 ) O ( n 2 \u22c5 n ) = O ( n 2 )",
      "html": "<p>We get time complexity for Insertion Sort: <span class=\"MathJax_Preview\" style=\"color: inherit;\"></span><span class=\"mjx-chtml MathJax_CHTML\" data-mathml='&lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;&amp;#x22C5;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow class=\"MJX-TeXAtom-ORD\"&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=\"false\"&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo stretchy=\"false\"&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/math&gt;' id=\"MathJax-Element-9-Frame\" role=\"presentation\" style=\"font-size: 119%; position: relative;\" tabindex=\"0\"><span aria-hidden=\"true\" class=\"mjx-math\" id=\"MJXc-Node-31\"><span class=\"mjx-mrow\" id=\"MJXc-Node-32\"><span class=\"mjx-mi\" id=\"MJXc-Node-33\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-34\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-mfrac\" id=\"MJXc-Node-35\"><span class=\"mjx-box MJXc-stacked\" style=\"width: 0.566em; padding: 0px 0.12em;\"><span class=\"mjx-numerator\" style=\"font-size: 70.7%; width: 0.8em; top: -1.097em;\"><span class=\"mjx-mi\" id=\"MJXc-Node-36\" style=\"\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-denominator\" style=\"font-size: 70.7%; width: 0.8em; bottom: -0.603em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-37\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span><span class=\"mjx-line\" style=\"border-bottom: 1.3px solid; top: -0.285em; width: 0.566em;\"></span></span><span class=\"mjx-vsize\" style=\"height: 1.202em; vertical-align: -0.426em;\"></span></span><span class=\"mjx-mo MJXc-space2\" id=\"MJXc-Node-38\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.003em; padding-bottom: 0.339em;\">\u22c5</span></span><span class=\"mjx-mi MJXc-space2\" id=\"MJXc-Node-39\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-40\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span><span class=\"mjx-mo MJXc-space3\" id=\"MJXc-Node-41\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.059em; padding-bottom: 0.339em;\">=</span></span><span class=\"mjx-texatom MJXc-space3\" id=\"MJXc-Node-42\"><span class=\"mjx-mrow\" id=\"MJXc-Node-43\"><span class=\"mjx-mi\" id=\"MJXc-Node-44\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.507em; padding-bottom: 0.283em;\">O</span></span><span class=\"mjx-mo\" id=\"MJXc-Node-45\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">(</span></span><span class=\"mjx-msubsup\" id=\"MJXc-Node-46\"><span class=\"mjx-base\"><span class=\"mjx-mi\" id=\"MJXc-Node-47\"><span class=\"mjx-char MJXc-TeX-math-I\" style=\"padding-top: 0.227em; padding-bottom: 0.283em;\">n</span></span></span><span class=\"mjx-sup\" style=\"font-size: 70.7%; vertical-align: 0.513em; padding-left: 0px; padding-right: 0.071em;\"><span class=\"mjx-mn\" id=\"MJXc-Node-48\" style=\"\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.395em; padding-bottom: 0.339em;\">2</span></span></span></span><span class=\"mjx-mo\" id=\"MJXc-Node-49\"><span class=\"mjx-char MJXc-TeX-main-R\" style=\"padding-top: 0.451em; padding-bottom: 0.619em;\">)</span></span></span></span></span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>\u22c5</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow class=\"MJX-TeXAtom-ORD\"><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow></math></span></span></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The time complexity for Insertion Sort can be displayed like this:",
      "html": "<p>The time complexity for Insertion Sort can be displayed like this:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For Insertion Sort, there is a big difference between best, average and worst case scenarios.",
      "html": "<p>For Insertion Sort, there is a big difference between best, average and worst case scenarios.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Next up is Quicksort. Finally we will see a faster sorting algorithm!",
      "html": "<p>Next up is Quicksort. Finally we will see a faster sorting algorithm!</p>"
    }
  ]
}