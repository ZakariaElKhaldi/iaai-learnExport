{
  "title": "Python Binary Search Trees",
  "url": "https://www.w3schools.com/python/python_dsa_binarysearchtrees.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Python Binary Search Trees",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Binary Search Tree is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value.",
      "html": "<p>A <strong>Binary Search Tree</strong> is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.",
      "html": "<p>A clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Binary Search Trees",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Tree data structure",
          "href": "https://www.w3schools.com/python_dsa_binarytrees.asp",
          "title": ""
        }
      ],
      "text": "A Binary Search Tree (BST) is a type of Binary Tree data structure , where the following properties must be true for any node \"X\" in the tree:",
      "html": "<p>A Binary Search Tree (BST) is a type of <a href=\"python_dsa_binarytrees.asp\">Binary Tree data structure</a>, where the following properties must be true for any node \"X\" in the tree:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These properties makes it faster to search, add and delete values than a regular binary tree.",
      "html": "<p>These properties makes it faster to search, add and delete values than a regular binary tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.",
      "html": "<p>To make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The size of a tree is the number of nodes in it (n) .",
      "html": "<p>The <strong>size</strong> of a tree is the number of nodes in it <code>(n)</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A subtree starts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.",
      "html": "<p>A <strong>subtree</strong> starts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The descendants of a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.",
      "html": "<p>The <strong>descendants</strong> of a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The node's height is the maximum number of edges between that node and a leaf node.",
      "html": "<p>The <strong>node's height</strong> is the maximum number of edges between that node and a leaf node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A node's in-order successor is the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.",
      "html": "<p>A <strong>node's in-order successor</strong> is the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Traversal of a Binary Search Tree",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.",
      "html": "<p>Just to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Another way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the previous page) and check if the resulting list of values are in an increasing order.",
      "html": "<p>Another way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the previous page) and check if the resulting list of values are in an increasing order.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code below is an implementation of the Binary Search Tree in the figure above, with traversal.",
      "html": "<p>The code below is an implementation of the Binary Search Tree in the figure above, with traversal.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\", \"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "13",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "7",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "15",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "8",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "14",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "19",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "18",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Traverse",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "class TreeNode:\ndef __init__(self, data):\nself.data = data\nself.left = None\nself.right = None\n\ndef inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root)",
      "syntax_highlighting": [
        {
          "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\", \"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "13",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "7",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "15",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "8",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "14",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "19",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "18",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Traverse",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">class</span> TreeNode:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> __init__(self, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.data = data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.left = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0self.right = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> inOrderTraversal(node):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0inOrderTraversal(node.left)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(node.data, end=<span class=\"pythonstringcolor\" style=\"color:green\">\", \"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0inOrderTraversal(node.right)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nroot = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">13</span>)<br/>\nnode7 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">7</span>)<br/>\nnode15 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">15</span>)<br/>\nnode3 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">3</span>)<br/>\nnode8 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">8</span>)<br/>\nnode14 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">14</span>)<br/>\nnode19 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">19</span>)<br/>\nnode18 = TreeNode(<span class=\"pythonnumbercolor\" style=\"color:#905\">18</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nroot.left = node7<br/>\nroot.right = node15<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode7.left = node3<br/>\nnode7.right = node8<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode15.left = node14<br/>\nnode15.right = node19<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\nnode19.left = node18<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Traverse<br/></span>\ninOrderTraversal(root) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nclass TreeNode:\n\u00a0\u00a0def __init__(self, data):\n\u00a0\u00a0\u00a0\u00a0self.data = data\n\u00a0\u00a0\u00a0\u00a0self.left = None\n\u00a0\u00a0\u00a0\u00a0self.right = None\n\ndef inOrderTraversal(node):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0inOrderTraversal(node.left)\n\u00a0\u00a0print(node.data, end=\", \")\n\u00a0\u00a0inOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\", \"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "13",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "7",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "15",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "8",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "14",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "19",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "18",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Traverse",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.",
      "html": "<p>As we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Search for a Value in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Search",
          "href": "https://www.w3schools.com/python_dsa_binarysearch.asp",
          "title": ""
        }
      ],
      "text": "Searching for a value in a BST is very similar to how we found a value using Binary Search on an array.",
      "html": "<p>Searching for a value in a BST is very similar to how we found a value using <a href=\"python_dsa_binarysearch.asp\">Binary Search</a> on an array.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.",
      "html": "<p>For Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Similarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.",
      "html": "<p>Similarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The algorithm can be implemented like this:",
      "html": "<p>The algorithm can be implemented like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef search(node, target):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0elif node.data == target:\n\u00a0\u00a0\u00a0\u00a0return node\n\u00a0\u00a0elif target < node.data:\n\u00a0\u00a0\u00a0\u00a0return search(node.left, target)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0return search(node.right, target)\n\n# Search for a value\nresult = search(root, 13)\nif result:\n\u00a0\u00a0print(f\"Found the node with value: {result.data}\")\nelse:\n\u00a0\u00a0print(\"Value not found in the BST.\") ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "elif",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "elif",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Search for a value",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "13",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"Found the node with value: {result.data}\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"Value not found in the BST.\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def search(node, target):\nif node is None:\nreturn None\nelif node.data == target:\nreturn node\nelif target < node.data:\nreturn search(node.left, target)\nelse:\nreturn search(node.right, target)\n\n# Search for a value\nresult = search(root, 13)\nif result:\nprint(f\"Found the node with value: {result.data}\")\nelse:\nprint(\"Value not found in the BST.\")",
      "syntax_highlighting": [
        {
          "text": "\ndef search(node, target):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0elif node.data == target:\n\u00a0\u00a0\u00a0\u00a0return node\n\u00a0\u00a0elif target < node.data:\n\u00a0\u00a0\u00a0\u00a0return search(node.left, target)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0return search(node.right, target)\n\n# Search for a value\nresult = search(root, 13)\nif result:\n\u00a0\u00a0print(f\"Found the node with value: {result.data}\")\nelse:\n\u00a0\u00a0print(\"Value not found in the BST.\") ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "elif",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "elif",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Search for a value",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "13",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"Found the node with value: {result.data}\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"Value not found in the BST.\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> search(node, target):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">elif</span> node.data == target:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> node<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">elif</span> target &lt; node.data:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> search(node.left, target)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> search(node.right, target)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Search for a value<br/></span>\nresult = search(root, <span class=\"pythonnumbercolor\" style=\"color:#905\">13</span>)<br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> result:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(f<span class=\"pythonstringcolor\" style=\"color:green\">\"Found the node with value: {result.data}\"</span>)<br/>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"Value not found in the BST.\"</span>) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef search(node, target):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return None\n\u00a0\u00a0elif node.data == target:\n\u00a0\u00a0\u00a0\u00a0return node\n\u00a0\u00a0elif target < node.data:\n\u00a0\u00a0\u00a0\u00a0return search(node.left, target)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0return search(node.right, target)\n\n# Search for a value\nresult = search(root, 13)\nif result:\n\u00a0\u00a0print(f\"Found the node with value: {result.data}\")\nelse:\n\u00a0\u00a0print(\"Value not found in the BST.\") ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "elif",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "elif",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Search for a value",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "13",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"Found the node with value: {result.data}\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"Value not found in the BST.\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The time complexity for searching a BST for a value is O(h) , where h is the height of the tree.",
      "html": "<p>The time complexity for searching a BST for a value is <code>O(h)</code>, where <code>h</code> is the height of the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.",
      "html": "<p>For a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Both Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.",
      "html": "<p>Both Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will use the next page to describe a type of Binary Tree called AVL Trees. AVL trees are self-balancing, which means that the height of the tree is kept to a minimum so that operations like search, insertion and deletion take less time.",
      "html": "<p>We will use the next page to describe a type of Binary Tree called AVL Trees. AVL trees are self-balancing, which means that the height of the tree is kept to a minimum so that operations like search, insertion and deletion take less time.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Insert a Node in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting a node in a BST is similar to searching for a value.",
      "html": "<p>Inserting a node in a BST is similar to searching for a value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inserting nodes as described above means that an inserted node will always become a new leaf node.",
      "html": "<p>Inserting nodes as described above means that an inserted node will always become a new leaf node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.",
      "html": "<p>All nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how node insertion in BST can be implemented:",
      "html": "<p>This is how node insertion in BST can be implemented:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef insert(node, data):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return TreeNode(data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.left = insert(node.left, data)\n\u00a0\u00a0\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.right = insert(node.right, data)\n\u00a0\u00a0return node\n\n# Inserting new value into the BST\ninsert(root, 10)\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "elif",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Inserting new value into the BST",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def insert(node, data):\nif node is None:\nreturn TreeNode(data)\nelse:\nif data < node.data:\nnode.left = insert(node.left, data)\nelif data > node.data:\nnode.right = insert(node.right, data)\nreturn node\n\n# Inserting new value into the BST\ninsert(root, 10)",
      "syntax_highlighting": [
        {
          "text": "\ndef insert(node, data):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return TreeNode(data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.left = insert(node.left, data)\n\u00a0\u00a0\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.right = insert(node.right, data)\n\u00a0\u00a0return node\n\n# Inserting new value into the BST\ninsert(root, 10)\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "elif",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Inserting new value into the BST",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> insert(node, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> node is None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> TreeNode(data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> data &lt; node.data:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.left = insert(node.left, data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">elif</span> data &gt; node.data:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.right = insert(node.right, data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> node<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Inserting new value into the BST<br/></span>\ninsert(root, <span class=\"pythonnumbercolor\" style=\"color:#905\">10</span>)<span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef insert(node, data):\n\u00a0\u00a0if node is None:\n\u00a0\u00a0\u00a0\u00a0return TreeNode(data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.left = insert(node.left, data)\n\u00a0\u00a0\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node.right = insert(node.right, data)\n\u00a0\u00a0return node\n\n# Inserting new value into the BST\ninsert(root, 10)\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "elif",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Inserting new value into the BST",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Find The Lowest Value in a BST Subtree",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The next section will explain how we can delete a node in a BST, but to do that we need a function that finds the lowest value in a node's subtree.",
      "html": "<p>The next section will explain how we can delete a node in a BST, but to do that we need a function that finds the lowest value in a node's subtree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how a function for finding the lowest value in the subtree of a BST node looks like:",
      "html": "<p>This is how a function for finding the lowest value in the subtree of a BST node looks like:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef minValueNode(node):\n\u00a0\u00a0current = node\n\u00a0\u00a0while current.left is not None:\n\u00a0\u00a0\u00a0\u00a0current = current.left\n\u00a0\u00a0return current\n\n# Find Lowest\nprint(\"\\nLowest value:\",minValueNode(root).data) ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "while",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Find Lowest",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "print",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"\\nLowest value:\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def minValueNode(node):\ncurrent = node\nwhile current.left is not None:\ncurrent = current.left\nreturn current\n\n# Find Lowest\nprint(\"\\nLowest value:\",minValueNode(root).data)",
      "syntax_highlighting": [
        {
          "text": "\ndef minValueNode(node):\n\u00a0\u00a0current = node\n\u00a0\u00a0while current.left is not None:\n\u00a0\u00a0\u00a0\u00a0current = current.left\n\u00a0\u00a0return current\n\n# Find Lowest\nprint(\"\\nLowest value:\",minValueNode(root).data) ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "while",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Find Lowest",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "print",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"\\nLowest value:\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> minValueNode(node):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0current = node<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">while</span> current.left is not None:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0current = current.left<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> current<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Find Lowest<br/></span>\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">print</span>(<span class=\"pythonstringcolor\" style=\"color:green\">\"\\nLowest value:\"</span>,minValueNode(root).data) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef minValueNode(node):\n\u00a0\u00a0current = node\n\u00a0\u00a0while current.left is not None:\n\u00a0\u00a0\u00a0\u00a0current = current.left\n\u00a0\u00a0return current\n\n# Find Lowest\nprint(\"\\nLowest value:\",minValueNode(root).data) ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "while",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Find Lowest",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "print",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"\\nLowest value:\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We will use this minValueNode() function in the section below, to find a node's in-order successor, and use that to delete a node.",
      "html": "<p>We will use this <code>minValueNode()</code> function in the section below, to find a node's in-order successor, and use that to delete a node.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Delete a Node in a BST",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To delete a node, our function must first search the BST to find it.",
      "html": "<p>To delete a node, our function must first search the BST to find it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After the node is found there are three different cases where deleting a node must be done differently.",
      "html": "<p>After the node is found there are three different cases where deleting a node must be done differently.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How it works:",
      "html": "<p><strong>How it works:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.",
      "html": "<p>In step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is how a BST can be implemented with functionality for deleting a node:",
      "html": "<p>This is how a BST can be implemented with functionality for deleting a node:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndef delete(node, data):\n\u00a0\u00a0if not node:\n\u00a0\u00a0\u00a0\u00a0return None\n\n\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0node.left = delete(node.left, data)\n\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0# Node with only one child or no child\n\u00a0\u00a0\u00a0\u00a0if not node.left:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.right\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\u00a0elif not node.right:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\n\u00a0\u00a0\u00a0\u00a0# Node with two children, get the in-order successor\n\u00a0\u00a0\u00a0\u00a0node.data = minValueNode(node.right).data\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, node.data)\n\n\u00a0\u00a0return node\n\n# Delete node 15\ndelete(root,15)\n ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "elif",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Node with only one child or no child",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "elif",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Node with two children, get the in-order successor",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "# Delete node 15",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "15",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "def delete(node, data):\nif not node:\nreturn None\n\nif data < node.data:\nnode.left = delete(node.left, data)\nelif data > node.data:\nnode.right = delete(node.right, data)\nelse:\n# Node with only one child or no child\nif not node.left:\ntemp = node.right\nnode = None\nreturn temp\nelif not node.right:\ntemp = node.left\nnode = None\nreturn temp\n\n# Node with two children, get the in-order successor\nnode.data = minValueNode(node.right).data\nnode.right = delete(node.right, node.data)\n\nreturn node\n\n# Delete node 15\ndelete(root,15)",
      "syntax_highlighting": [
        {
          "text": "\ndef delete(node, data):\n\u00a0\u00a0if not node:\n\u00a0\u00a0\u00a0\u00a0return None\n\n\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0node.left = delete(node.left, data)\n\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0# Node with only one child or no child\n\u00a0\u00a0\u00a0\u00a0if not node.left:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.right\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\u00a0elif not node.right:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\n\u00a0\u00a0\u00a0\u00a0# Node with two children, get the in-order successor\n\u00a0\u00a0\u00a0\u00a0node.data = minValueNode(node.right).data\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, node.data)\n\n\u00a0\u00a0return node\n\n# Delete node 15\ndelete(root,15)\n ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "elif",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Node with only one child or no child",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "elif",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Node with two children, get the in-order successor",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "# Delete node 15",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "15",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\">\n<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> delete(node, data):<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> not node:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> data &lt; node.data:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0node.left = delete(node.left, data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">elif</span> data &gt; node.data:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">else</span>:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"commentcolor\" style=\"color:slategray\"># Node with only one child or no child<br/></span><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">if</span> not node.left:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.right<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> temp<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">elif</span> not node.right:<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.left<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> temp<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"commentcolor\" style=\"color:slategray\"># Node with two children, get the in-order successor<br/></span><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0node.data = minValueNode(node.right).data<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, node.data)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> node<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"commentcolor\" style=\"color:slategray\"># Delete node 15<br/></span>\ndelete(root,<span class=\"pythonnumbercolor\" style=\"color:#905\">15</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndef delete(node, data):\n\u00a0\u00a0if not node:\n\u00a0\u00a0\u00a0\u00a0return None\n\n\u00a0\u00a0if data < node.data:\n\u00a0\u00a0\u00a0\u00a0node.left = delete(node.left, data)\n\u00a0\u00a0elif data > node.data:\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, data)\n\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0# Node with only one child or no child\n\u00a0\u00a0\u00a0\u00a0if not node.left:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.right\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\u00a0\u00a0\u00a0\u00a0elif not node.right:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp = node.left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0node = None\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temp\n\n\u00a0\u00a0\u00a0\u00a0# Node with two children, get the in-order successor\n\u00a0\u00a0\u00a0\u00a0node.data = minValueNode(node.right).data\n\u00a0\u00a0\u00a0\u00a0node.right = delete(node.right, node.data)\n\n\u00a0\u00a0return node\n\n# Delete node 15\ndelete(root,15)\n ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "elif",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Node with only one child or no child",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "elif",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Node with two children, get the in-order successor",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "# Delete node 15",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "15",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 1 : The node argument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the data we want to delete.",
      "html": "<p><strong>Line 1</strong>: The <code>node</code> argument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the <code>data</code> we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 2-8 : This is searching for the node with correct data that we want to delete.",
      "html": "<p><strong>Line 2-8</strong>: This is searching for the node with correct <code>data</code> that we want to delete.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 9-22 : The node we want to delete has been found. There are three such cases:",
      "html": "<p><strong>Line 9-22</strong>: The node we want to delete has been found. There are three such cases:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Line 24 : node is returned to maintain the recursive functionality.",
      "html": "<p><strong>Line 24</strong>: <code>node</code> is returned to maintain the recursive functionality.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "BST Compared to Other Data Structures",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Binary Search Trees take the best from two other data structures: Arrays and Linked Lists.",
      "html": "<p>Binary Search Trees take the best from two other data structures: Arrays and Linked Lists.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody>\n<tr>\n<th style=\"width:20ch\">Data Structure</th>\n<th>Searching for a value</th>\n<th>Delete / Insert leads to shifting in memory</th>\n</tr>\n<tr>\n<td>Sorted Array</td>\n<td><code class=\"w3-codespan\">O(\\log n)</code></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Linked List</td>\n<td><code class=\"w3-codespan\">O(n)</code></td>\n<td><strong>No</strong></td>\n</tr>\n<tr>\n<td>Binary Search Tree</td>\n<td><code class=\"w3-codespan\">O(\\log n)</code></td>\n<td><strong>No</strong></td>\n</tr>\n</tbody>\n</table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Binary Search",
          "href": "https://www.w3schools.com/python_dsa_binarysearch.asp",
          "title": ""
        }
      ],
      "text": "Searching a BST is just as fast as Binary Search on an array, with the same time complexity O(log n) .",
      "html": "<p>Searching a BST is just as fast as <a href=\"python_dsa_binarysearch.asp\">Binary Search</a> on an array, with the same time complexity <code>O(log n)</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.",
      "html": "<p>And deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "BST Balance and Time Complexity",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "On a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually O(h) . That means that the higher the tree is ( h ), the longer the operation will take.",
      "html": "<p>On a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually <code>O(h)</code>. That means that the higher the tree is (<code>h</code>), the longer the operation will take.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The reason why we wrote that searching for a value is O(log n) in the table above is because that is true if the tree is \"balanced\", like in the image below.",
      "html": "<p>The reason why we wrote that searching for a value is <code>O(log n)</code> in the table above is because that is true if the tree is \"balanced\", like in the image below.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.",
      "html": "<p>We call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one. In the image above, the left subtree of the root node has height h=2 , and the right subtree has height h=3 .",
      "html": "<p>The exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one.\n   In the image above, the left subtree of the root node has height <code>h=2</code>,\n   and the right subtree has height <code>h=3</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For a balanced BST, with a large number of nodes (big n ), we get height h \u2248 \\log_2 n , and therefore the time complexity for searching, deleting, or inserting a node can be written as O(h) = O(\\log n) .",
      "html": "<p>For a balanced BST, with a large number of nodes (big <code>n</code>),\n  we get height <code>h \u2248 \\log_2 n</code>, and therefore the time complexity for searching,\n  deleting, or inserting a node can be written as <code>O(h) = O(\\log n)</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes, h \u2248 n , and we get time complexity O(h) = O(n) for searching, deleting, or inserting a node.",
      "html": "<p>But, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes,\n   <code>h \u2248 n</code>, and we get time complexity <code>O(h) = O(n)</code> \n   for searching, deleting, or inserting a node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "So, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.",
      "html": "<p>So, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "And keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the next page.",
      "html": "<p>And keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the next page.</p>"
    }
  ]
}