{
  "id": "9f713cfc-e37e-479f-aa6c-6eb2bce8423f",
  "title": "GitMerge Conflicts",
  "slug": "gitmerge-conflicts",
  "metadata": {
    "description": "Learn about GitMerge Conflicts with clear explanations and practical examples.",
    "keywords": [
      "merge",
      "example",
      "conflicts",
      "conflict",
      "changes",
      "branch",
      "file",
      "keep",
      "files",
      "resolve"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Merge Conflicts"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nMerge Conflicts\n\nWhat is a Merge Conflict",
      "content": "?\nA\nmerge conflict\nhappens when two branches change the same part of a file.\nGit can't decide which change to keep, so you have to choose.\nYou must resolve the conflict before you can finish the merge.\nWhy Do Merge Conflicts Happen?\nMerge conflicts usually happen when you merge branches that changed the same lines in a file.\nThis is common in collaborative projects or when working on long-lived branches.\nHow to See and Resolve Merge Conflicts\nWhen you merge a branch and there are conflicting changes, Git will pause and mark the files with conflicts.\nExample: Merge a Branch\ngit merge feature-branch\nIf there are conflicts, Git will tell you which files are affected.\nSee Which Files Have Conflicts\nUse\ngit status\nto see which files need your attention:\nExample: Check Status\ngit status\nSee the Differences\nUse\ngit diff\nto see what changed and help you decide how to resolve the conflict:\nExample: See Differences\ngit diff\nEdit the Conflict Markers\nOpen the conflicted file. You'll see sections like this:\nConflict Markers\n<<<<<<< HEAD",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Your changes here",
      "content": "=======\nOther branch's changes\n>>>>>>> feature-branch\nEdit the file to keep what you want, then remove the conflict markers (\n<<<<<<<\n,\n=======\n,\n>>>>>>>\n).\nMark as Resolved\nAfter fixing the file, mark it as resolved:\nExample: Mark Resolved\ngit add filename.txt\nComplete the Merge\nFinish the merge with a commit (if Git doesn't do it automatically):\nExample: Finish Merge\ngit commit\nCancel the Merge\nIf you want to stop and undo the merge:\nExample: Abort Merge\ngit merge --abort\nUse a Visual Merge Tool\nIf you prefer, you can use a visual tool to resolve conflicts:\nExample: Use Mergetool\ngit mergetool\nPick One Side's Changes\nIf you want to keep only your changes or only the other branch's changes:\nExample: Keep Our Changes\ngit checkout --ours filename.txt\nExample: Keep Their Changes\ngit checkout --theirs filename.txt\nTroubleshooting & Best Practices\nIf you're stuck, you can always use\ngit merge --abort\nto start over.\nMake sure you remove all conflict markers before marking as resolved.\nIf you use\ngit mergetool\nand don't like the result, you can still edit the files by hand.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ca616115-fe04-4ef0-bdb4-1d9842ae90c0",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "44ef8a2d-8c9b-40be-89a6-ffb51d0f17aa",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "22d404da-f181-460b-80a7-eaeb1ba6f908",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Git\nMerge Conflicts\n\nWhat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a Merge Conflict",
        "common in collaborative projects or when working on long-lived branches"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Git\nMerge Conflicts\n\nWhat is 'a Merge Conflict'."
    },
    {
      "question": "What is This?",
      "options": [
        "common in collaborative projects or when working on long-lived branches",
        "a Merge Conflict",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'common in collaborative projects or when working on long-lived branches'."
    }
  ],
  "summary": "This tutorial covers GitMerge Conflicts concepts and techniques. You'll learn how to use GitMerge Conflicts effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitMerge Conflicts and how to apply it in your projects."
}