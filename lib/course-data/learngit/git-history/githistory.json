{
  "id": "ae7d1c96-e70b-4e8a-832b-864858bdb54d",
  "title": "GitHistory",
  "slug": "githistory",
  "metadata": {
    "description": "Learn about GitHistory with clear explanations and practical examples.",
    "keywords": [
      "index",
      "commit",
      "html",
      "commits",
      "show",
      "changes",
      "history",
      "diff",
      "author",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git History"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nHistory\n\nWhat is Git History",
      "content": "? Why Use It?\nGit keeps a detailed record of every change made to your project.\nYou can use history commands to see what changed, when, and who made the change.\nThis is useful for tracking progress, finding bugs, and understanding your project's evolution.",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Key Commands for Viewing History\ngit log",
      "content": "- Show full commit history\ngit log --oneline\n- Show a summary of commits\ngit show <commit>\n- Show details of a specific commit\ngit diff\n- See unstaged changes\ngit diff --staged\n- See staged changes\nBest Practices for Viewing History\nMake frequent, meaningful commits to keep your history clear.\nWrite clear commit messages so you and your team can understand changes later.\nUse\ngit log --oneline\nfor a quick overview of your commit history.\nUse\ngit diff\nbefore committing to review your work.\nSee Commit History (\ngit log\n)\nShow a detailed list of all commits in your repository:\nExample: Full Commit History\ngit log\ncommit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master)\nAuthor: -test\nDate:   Fri Mar 26 09:35:54 2021 +0100\n\n    Updated index.html with a new line\nThis command shows all commits, including author, date, and message.\nUse the arrow keys to scroll, and press\nq\nto quit.\nTip:\nWhile viewing the log, you can search for a word by typing\n/\nfollowed by your search term\n(for example,\n/fix\n), then press\nn\nto jump to the \nPress\nq\nat any time to quit.\nShow Commit Details (\ngit show <commit>\n)\nSee all the details and changes for a specific commit:\nExample: Show Commit Details\ngit show 09f4acd\ncommit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master)\nAuthor: -test\nDate:   Fri Mar 26 09:35:54 2021 +0100\n\n    Updated index.html with a new line\n\ndiff --git a/index.html b/index.html\nindex 1234567..89abcde 100644\n--- a/index.html\n+++ b/index.html\n@@ ...\n+\nNew Title\nThis command shows everything about a commit: who made it, when, the message, and the exact changes.\nCompare Changes (\ngit diff\n)\nSee what is different between your working directory and the last commit (unstaged changes):\nExample: See Unstaged Changes\ngit diff\ndiff --git a/index.html b/index.html\nindex 1234567..89abcde 100644\n--- a/index.html\n+++ b/index.html\n@@ ...\n-\nOld Title\n+\nNew Title\nThis command shows changes you have made but not yet staged for commit.\nCompare Staged Changes (\ngit diff --staged\n)\nSee what is different between your staged files and the last commit:\nExample: See Staged Changes\ngit diff --staged\ndiff --git a/index.html b/index.html\nindex 1234567..89abcde 100644\n--- a/index.html\n+++ b/index.html\n@@ ...\n-\nOld Title\n+\nNew Title\nThis command shows changes that are staged and ready to be committed.\nCompare Two Commits (\ngit diff <commit1> <commit2>\n)\nSee what changed between any two commits:\nExample: Compare Two Commits\ngit diff 1234567 89abcde\ndiff --git a/index.html b/index.html\nindex 1234567..89abcde 100644\n--- a/index.html\n+++ b/index.html\n@@ ...\n-\nOld Title\n+\nNew Title\nThis command shows the differences between two specific commits.\nShow a Summary of Commits (\ngit log --oneline\n)\nShow a short summary of each commit (great for a quick overview):\nExample: Oneline Log\ngit log --oneline\n09f4acd Updated index.html with a new line\n8e7b2c1 Add about page\n1a2b3c4 Initial commit\nThis command shows each commit on a single line for easy reading.\nShow Commits by Author (\ngit log --author=\"Alice\"\n)\nSee only the commits made by a specific author:\nExample: Commits by Author\ngit log --author=\"Alice\"\ncommit 1a2b3c4d5e6f7g8h9i0j\nAuthor: Alice\nDate:   Mon Mar 22 10:12:34 2021 +0100\n\n    Add about page\nThis command filters the log to show only commits by the author you specify.\nShow Recent Commits (\ngit log --since=\"2 weeks ago\"\n)\nSee only commits made in the last two weeks:\nExample: Recent Commits\ngit log --since=\"2 weeks ago\"\ncommit 09f4acd3f8836b7f6fc44ad9e012f82faf861803\nAuthor: -test\nDate:   Fri Mar 26 09:35:54 2021 +0100\n\n    Updated index.html with a new line\nThis command shows only the commits made in a recent time frame.\nShow Files Changed Per Commit (\ngit log --stat\n)\nSee which files were changed in each commit and how many lines were added or removed:\nExample: Log with Stats\ngit log --stat\ncommit 09f4acd3f8836b7f6fc44ad9e012f82faf861803\nAuthor: -test\nDate:   Fri Mar 26 09:35:54 2021 +0100\n\n    Updated index.html with a new line\n\nindex.html | 2 +-\n1 file changed, 1 insertion(+), 1 deletion(-)\nThis command adds a summary of file changes to each commit in the log.\nShow a Branch Graph (\ngit log --graph\n)\nSee a simple ASCII graph of your branch history (great for visualizing merges):\nExample: Log with Graph\ngit log --graph --oneline\n* 09f4acd Updated index.html with a new line\n* 8e7b2c1 Add about page\n|\\\n| * aabbccd Merge branch 'feature-x'\n|/\nThis command shows a simple graph of your branch and merge history.\nTroubleshooting\nCan't see your changes?\nMake sure you have committed your work. Uncommitted changes won't appear in the history.\nLog is too long?\nUse\ngit log --oneline\nor\ngit log --since\nto make it easier to read.\nHow do I quit the log view?\nPress\nq\nto exit the log or diff view.\nNote:\nExploring your history helps you understand what changed, when, and why.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "562fa6b0-5f18-4214-bc3a-0c9c1463a692",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "22134f16-ff55-4beb-801c-23e6a13df815",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fd42dcc1-8c4e-47dc-9e8c-b673979b375b",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Git\nHistory\n\nWhat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "useful for tracking progress",
        "Git History"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Git\nHistory\n\nWhat is 'Git History'."
    },
    {
      "question": "What is This?",
      "options": [
        "useful for tracking progress",
        "None of the above.",
        "None of the above.",
        "Git History"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'useful for tracking progress'."
    }
  ],
  "summary": "This tutorial covers GitHistory concepts and techniques. You'll learn how to use GitHistory effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitHistory and how to apply it in your projects."
}