{
  "id": "d233c7e1-1408-477b-8bb6-eee1936f676d",
  "title": "GitGlossary",
  "slug": "gitglossary",
  "metadata": {
    "description": "Learn about GitGlossary with clear explanations and practical examples.",
    "keywords": [
      "example",
      "learn",
      "page",
      "remote",
      "repository",
      "branch",
      "commit",
      "merge",
      "origin",
      "changes"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Glossary"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Git\nGlossary",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Git Glossary\nThis glossary covers common Git terms and concepts. Use it as a handy reference while learning and working with Git.\nSummary of Git Terms\nBranch\nCheckout\nClone\nCommit\nConflict\nFetch\nFork\nHEAD\nIndex (Staging Area)\nMerge\nOrigin\nPull\nPush\nRebase\nRemote\nRepository (Repo)\nStash\nTag\nUpstream\nWorking Directory\nBranch\nA branch is a parallel version of your repository. Used to develop features independently.\nLearn more on our Git Branch page\nExample\ngit branch feature/login\nCheckout\nSwitch to a different branch or commit.\nLearn more on our Git Checkout page\nExample\ngit checkout main\nClone\nCreate a local copy of a remote repository.\nLearn more on our Git Clone page\nExample\ngit clone \nCommit\nA snapshot of your changes in the repository.\nLearn more on our Git Commit page\nExample\ngit commit -m \"Add login feature\"\nConflict\nWhen Git can't automatically merge changes from different commits or branches. You must resolve the differences manually.\nLearn more on our Git Branch Merge page\nExample\n# Example: Merge conflict message\n# CONFLICT (content): Merge conflict in file.txt\nFetch\nDownload changes from a remote repository without merging.\nLearn more on our Git Pull from Remote page\nExample\ngit fetch origin\nFork\nA personal copy of someone else's repository, usually on a platform like GitHub.\nLearn more on our Git Remote Fork page\nExample\n# Use the GitHub interface to fork a repo\nIndex (Staging Area)\nThe Index (also called the Staging Area) is where changes are prepared before committing.\nLearn more on our Git Staging Area page\nExample\ngit add file.txt\nMerge\nCombine changes from different branches.\nLearn more on our Git Merge page\nExample\ngit merge feature/login\nOrigin\nThe default name for your main remote repository. You can rename or have multiple remotes if needed.\nLearn more on our Git Remote page\nExample\ngit remote add origin \nPull\nFetch and merge changes from a remote repository.\nLearn more on our Git Pull from Remote page\nExample\ngit pull origin main\nPush\nUpload your commits to a remote repository.\nLearn more on our Git Push to Remote page\nExample\ngit push origin main\nRebase\nMove or combine a sequence of commits to a new base commit.\nLearn more on our Git Rebase page\nExample\ngit rebase main\nRemote\nA version of your repository hosted on the internet or network.\nLearn more on our Git Set Remote page\nExample\ngit remote -v\nRepository (Repo)\nThe database where your project's history is stored.\nLearn more on our Git Get Started page\nExample\ngit init\nStash\nTemporarily save changes that aren't ready to commit.\nLearn more on our Git Stash page\nExample\ngit stash\nTag\nMark a specific commit as important, usually for releases.\nLearn more on our Git Tag page\nExample\ngit tag v1.0\nNote:\nRefer to this glossary whenever you encounter an unfamiliar Git term!\nHEAD\nHEAD is a reference to the current commit your working directory is based on. Usually points to the latest commit on your current branch.\nExample\ngit log --oneline\n# The top entry is HEAD\nUpstream\nAn \"upstream\" branch is the default branch that your branch tracks and pulls from, usually on a remote repository.\nExample\ngit push --set-upstream origin main\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "504d03e6-dd60-4d78-9a2c-77322bb13b56",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d1b7a2e6-bc31-4840-badc-a96737e38dba",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b0c4892f-e15a-4ec6-9bc9-0e69be57d68d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Stash\nTag\nUpstream\nWorking Directory\nBranch\nA branch?",
      "options": [
        "None of the above.",
        "prepared before committing",
        "a parallel version of your repository",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Stash\nTag\nUpstream\nWorking Directory\nBranch\nA branch is 'a parallel version of your repository'."
    },
    {
      "question": "What is is where changes?",
      "options": [
        "None of the above.",
        "None of the above.",
        "prepared before committing",
        "a parallel version of your repository"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of is where changes is 'prepared before committing'."
    }
  ],
  "summary": "This tutorial covers GitGlossary concepts and techniques. You'll learn how to use GitGlossary effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitGlossary and how to apply it in your projects."
}