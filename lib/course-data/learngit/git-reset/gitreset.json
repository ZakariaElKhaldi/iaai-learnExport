{
  "id": "f42dd5f6-1dfa-4464-80f6-48826c6ab83f",
  "title": "GitReset",
  "slug": "gitreset",
  "metadata": {
    "description": "Learn about GitReset with clear explanations and practical examples.",
    "keywords": [
      "commit",
      "reset",
      "changes",
      "head",
      "history",
      "want",
      "updated",
      "readme",
      "html",
      "find"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Reset"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nReset\n\nChange Platform",
      "content": ":\nGitHub\nBitbucket\nGitLab\nWhat Does Git Reset Do?\nThe\ngit reset\ncommand moves your current branch (HEAD) to a different commit.\nDepending on the option, it can also change which changes are staged or even delete changes from your working directory.\nUse it to undo commits, unstage files, or clean up your history.\nSummary of Git Reset Commands and Options\ngit reset --soft <commit>\n- Move HEAD to commit, keep changes staged\ngit reset --mixed <commit>\n- Move HEAD to commit, unstage changes (default)\ngit reset --hard <commit>\n- Move HEAD to commit, discard all changes\ngit reset <file>\n- Unstage a file\ngit log --oneline\n- Show commit history\nHow to Find the Commit to Reset To\nFirst, you need to find the commit you want to go back to.\nUse\ngit log --oneline\nto see a summary of your commit history:\nStep 2: Move the repository back to that step:\nAfter the \ncommit\nhistory we could go back to.\nLet's try and do that with\nreset\n.\nGit Reset Find Commit in Log\nFirst thing, we need to find the point we want to return to.\nTo do that, we need to go through the\nlog\n.\nTo avoid the very long\nlog\nlist, we are going to use the\n--oneline\noption, \nwhich gives just one line per\ncommit\nshowing:",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The first seven characters of the\ncommit hash",
      "content": "- this is what we need to \n  refer to in our reset command.\nthe\ncommit message\nSo let's find the point we want to\nreset\nto:\nExample\ngit log --oneline\ne56ba1f (HEAD -> master) Revert \"Just a regular update, definitely no accidents here...\"\n52418f7 Just a regular update, definitely no accidents here...\n9a9add8 (origin/master) Added .gitignore\n81912ba Corrected spelling error\n3fdaa5b Merge pull request #1 from -test/update-readme\n836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches\ndaf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta\nfacaeae (gh-page/master) Merge branch 'master' of \ne7de78f Updated index.html. Resized image\n5a04b6f Updated README.md with a line about focus\nd29d69f Updated README.md with a line about GitHub\ne0b6038 merged with hello-world-images after fixing conflicts\n1f1584e added new image\ndfa79db updated index.html with emergency fix\n0312c55 Added image to Hello World\n09f4acd Updated index.html with a new line\n221ec6e First release of Hello World!\nWe want to return to the\ncommit\n:\n9a9add8 (origin/master) Added .gitignore\n, \nthe last one before we started to mess with things.\nGit Reset --soft\ngit reset --soft <commit>\nmoves HEAD to the specified commit, but keeps all your changes staged (in the index).\nThis is useful if you want to combine several commits into one, or just want to rewrite history but keep your work ready to commit.\nExample\ngit reset --soft 9a9add8\nAll changes after\n9a9add8\nare now staged, ready for a new commit.\nGit Reset --mixed (default)\ngit reset --mixed <commit>\n(or just\ngit reset <commit>\n) moves HEAD to the specified commit and unstages any changes, but keeps them in your working directory.\nThis is the default option and is useful if you want to \"undo\" a commit but keep your changes for editing or recommitting.\nExample\ngit reset --mixed 9a9add8\nAll changes after\n9a9add8\nare now unstaged, but still in your files.\nReview Changes\nAfter running Git Reset, review your changes to make sure everything is as expected.\nTips & Best Practices\nUse Git Reset with caution, as it can rewrite your commit history.\nMake sure to communicate with your team before making changes to the remote repository.\nTroubleshooting\nIf you encounter issues with Git Reset, try using\ngit status\nto see the current state of your repository.\nWarnings\nBe careful when using Git Reset, as it can delete changes and rewrite your commit history.\nMake sure to use it only when necessary.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "fa2ad581-83c3-4dce-bf6b-ec9f6bbd5beb",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a84e0a4b-242f-43a1-b006-99e12ef9d7de",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "98f744b9-72cd-45e9-bf66-5aa8436ee027",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it can also change which changes?",
      "options": [
        "None of the above.",
        "None of the above.",
        "going to use the\n--oneline\noption",
        "staged or even delete changes from your working directory"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it can also change which changes is 'staged or even delete changes from your working directory'."
    },
    {
      "question": "What is we?",
      "options": [
        "staged or even delete changes from your working directory",
        "None of the above.",
        "going to use the\n--oneline\noption",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of we is 'going to use the\n--oneline\noption'."
    }
  ],
  "summary": "This tutorial covers GitReset concepts and techniques. You'll learn how to use GitReset effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitReset and how to apply it in your projects."
}