{
  "id": "ecae91a7-1b3e-4a5e-98e3-b5c17798dff3",
  "title": "GitPull from {{title}}",
  "slug": "gitpull-from-title",
  "metadata": {
    "description": "Learn about GitPull from {{title}} with clear explanations and practical examples.",
    "keywords": [
      "master",
      "pull",
      "origin",
      "remote",
      "merge",
      "repository",
      "branch",
      "readme",
      "title",
      "local"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Pull from {{title}}"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nPull from",
      "content": "{{title}}\n\nChange Platform:\nGitHub\nBitbucket\nGitLab\nPull from Remote\nIn the last chapters, we made an account on {{title}} and set up SSH.\nThen we made some changes directly on {{title}}.\nNow we want to update our local repository with the changes from {{title}}.\nKey Pull Commands\nFetch\nMerge\nPull\nFetch, Pull and Merge\nWhen working as a team on a project, it is important that everyone stays up to date.\nAny time you start working on a project, you should get the most recent \nchanges to your local copy.\nWith Git, you can do that with\npull\n.\npull\nis a combination of 2 different commands:\nfetch\nmerge\nLet's take a closer look into how\nfetch\n,\nmerge\n, and\npull\nworks.\nGit Fetch\ngit fetch\ndownloads new data from a remote repository, but does not change your working files or branches. It lets you see what others have pushed before you merge or pull.\nExample\ngit fetch origin\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 733 bytes | 3.00 KiB/s, done.\nFrom \n   e0b6038..d29d69f  master     -> origin/master\nNow that we have the recent\nchanges\n, we can check our\nstatus\n:\nExample\ngit status\nOn branch master\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n\nnothing to commit, working tree clean\nWe are behind the\norigin/master\nby 1\ncommit\n. That should be the updated\nREADME.md\n, but lets double check by viewing the\nlog\n:\nExample\ngit log origin/master\ncommit d29d69ffe2ee9e6df6fa0d313bb0592b50f3b853 (origin/master)\nAuthor: -test <77673807+-test@users.noreply.{{remoteName}}.com>\nDate:   Fri Mar 26 14:59:14 2021 +0100\n\n    Updated README.md with a line about {{title}}\n\ncommit e0b6038b1345e50aca8885d8fd322fc0e5765c3b (HEAD -> master)\nMerge: dfa79db 1f1584e\nAuthor: -test <test@.com>\nDate:   Fri Mar 26 12:42:56 2021 +0100\n\n    merged with hello-world-images after fixing conflicts\n\n...\n...\nThat looks as expected, but we can also verify by showing the differences \nbetween our local\nmaster\nand\norigin/master\n:\nExample\ngit diff origin/master\ndiff --git a/README.md b/README.md\nindex 23a0122..a980c39 100644\n--- a/README.md\n+++ b/README.md\n@@ -2,6 +2,4 @@",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "This is an example repository for the Git tutoial on",
      "content": "-This repository is built step by step in the tutorial.\n-\n-It now includes steps for {{title}}\n+This repository is built step by step in the tutorial.\n\\ No newline at end of file\nThat looks precisely as expected! Now we can safely\nmerge\n.\nGit Merge\nmerge\ncombines the current branch, with a specified branch.\nWe have confirmed that the updates are as expected, and we can merge our current branch (\nmaster\n) with\norigin/master\n:\nExample\ngit merge origin/master\nUpdating e0b6038..d29d69f\nFast-forward\n README.md | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\nCheck our\nstatus\nagain to confirm we are up to date:\nExample\ngit status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\nThere! Your local git is up to date!\nGit Pull\nBut what if you just want to update your local repository, without going through all those steps?\npull\nis a combination of\nfetch\nand\nmerge\n.\nIt is used to pull all changes from a remote repository into the branch you are working on.\nMake another change to the Readme.md file on {{title}}.\nUse\npull\nto update our local Git:\nExample\ngit pull origin\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 794 bytes | 1024 bytes/s, done.\nFrom \n    a7cdd4b..ab6b4ed  master       -> origin/master\nUpdating a7cdd4b..ab6b4ed\nFast-forward\n  README.md | 2 ++\n  1 file changed, 2 insertions(+)\nThat is how you keep your local Git up to date from a remote repository. In the \npush\nworks on {{title}}.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "aadd83e5-291a-4e3e-b60d-d65bf53b3edc",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d7534c2f-0e7b-4241-988c-551cea8965a5",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0c7dbad7-0023-47ce-8d14-68d15f0989df",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "a combination of 2 different commands:\nfetch\nmerge\nLet's take a closer look into how\nfetch",
        "important that everyone stays up to date",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of it is 'important that everyone stays up to date'."
    },
    {
      "question": "What is pull?",
      "options": [
        "a combination of 2 different commands:\nfetch\nmerge\nLet's take a closer look into how\nfetch",
        "None of the above.",
        "important that everyone stays up to date",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of pull is 'a combination of 2 different commands:\nfetch\nmerge\nLet's take a closer look into how\nfetch'."
    }
  ],
  "summary": "This tutorial covers GitPull from {{title}} concepts and techniques. You'll learn how to use GitPull from {{title}} effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitPull from {{title}} and how to apply it in your projects."
}