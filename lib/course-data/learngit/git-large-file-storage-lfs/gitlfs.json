{
  "id": "e37af648-bbac-4cdf-bc5e-7a020cc4865e",
  "title": "GitLFS",
  "slug": "gitlfs",
  "metadata": {
    "description": "Learn about GitLFS with clear explanations and practical examples.",
    "keywords": [
      "files",
      "file",
      "track",
      "repo",
      "gitattributes",
      "example",
      "large",
      "pointer",
      "real",
      "content"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Large File Storage (LFS)"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Git\nLFS",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is Git LFS?\nGit LFS (Large File Storage)\nis an extension for Git that helps you manage large files (like videos, images, or datasets) efficiently.\nInstead of storing big files directly in your repository, LFS stores a small pointer file in your repo and keeps the real content on a separate LFS server.\nThis keeps your repository fast and small, even if you work with huge files.\nEveryone who clones the repo gets the pointer, and Git LFS fetches the real file content as needed.\nFor more about\n.gitattributes\n, see the\ndedicated page\n.\nWhen to Use Git LFS\nWhen you need to version large files (media, datasets, binaries)\nWhen your project exceeds the file size limits of standard Git hosting\nWhen you want to keep your repository size manageable and fast\nInstall Git LFS\nDownload and install Git LFS from\ngit-lfs.github.com\n.\nInitialize LFS in your repository:\nExample\ngit lfs install\nTrack Files with LFS\nTell Git LFS which files to manage by \"tracking\" them. For example, to track all Photoshop files:\nExample: Track .psd Files\ngit lfs track \"*.psd\"\nYou can track any file type. Here are more examples:\ngit lfs track \"*.zip\"\ngit lfs track \"data/*.csv\"\ngit lfs track \"images/*.{png,jpg}\"\nHow LFS Works (.gitattributes & Pointers)\nWhen you track a file type with LFS, Git adds a rule to the\n.gitattributes\nfile. This tells Git to use LFS for those files.\nExample: .gitattributes Entry\n*.psd filter=lfs diff=lfs merge=lfs -text\nWhen you add and commit a tracked file, Git stores a small \"pointer\" file in your repo. The real content is uploaded to the LFS server.\nIf you clone or pull a repo with LFS files, Git will download the real content from the LFS server (if you have LFS installed).\nAdd, Commit, and Push LFS Files\nAdd files as usual:\ngit add largefile.psd\nCommit:\ngit commit -m \"Add large file\"\nPush:\ngit push origin main\nThe actual file data is stored on the LFS server, while your repo contains a pointer file.\nCheck LFS Status\nSee which files are managed by LFS in your repo:\nExample: List LFS Files\ngit lfs ls-files\nUntrack/Remove Files from LFS\nEdit\n.gitattributes\nand remove or change the relevant line.\nRun the untrack command:\nExample: Untrack a File\ngit lfs untrack \"*.psd\"\ngit add .gitattributes\nCommit the change. The file will no longer be managed by LFS (but existing versions are still stored in LFS).\nTips & Best Practices\nUse LFS only for files that are too large or change too often for regular Git.\nCheck if your hosting provider supports LFS before using it (especially for private repos).\nMonitor your LFS storage quota. Free plans are often limited.\nTroubleshooting\nIf you clone a repo and see pointer files instead of real content, make sure Git LFS is installed and run\ngit lfs pull\n.\nIf you push to a remote that doesn't support LFS, you'll get an error.\nSome files may not upload if you exceed your LFS quota.\nWarnings\nNot all hosting providers support LFS. Check before using it.\nLFS storage is often limited on free plans.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d78a7960-d01f-4198-9a3b-6ca25d5388ed",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "34819703-f5e8-460f-a175-4c9877853a37",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "14e75ed4-fd7d-4c51-bcde-a0224390a599",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Git\nLFS\n\nWhat?",
      "options": [
        "None of the above.",
        "Not a Git\nLFS\n\nWhat.",
        "Git LFS",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Git\nLFS\n\nWhat is 'Git LFS'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers GitLFS concepts and techniques. You'll learn how to use GitLFS effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitLFS and how to apply it in your projects."
}