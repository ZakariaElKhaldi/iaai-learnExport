{
  "id": "73afd5f1-f7e1-4318-8108-a5496a99e717",
  "title": "GitStash",
  "slug": "gitstash",
  "metadata": {
    "description": "Learn about GitStash with clear explanations and practical examples.",
    "keywords": [
      "stash",
      "changes",
      "branch",
      "list",
      "stashes",
      "apply",
      "index",
      "example",
      "command",
      "work"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Stash"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Key Commands for Stashing\ngit stash",
      "content": "- Stash your changes\ngit stash push -m \"message\"\n- Stash with a message\ngit stash list\n- List all stashes\ngit stash branch <branchname>\n- Create a branch from a stash\nWhat is Git Stash? Why Use It?\nSometimes you need to quickly switch tasks or fix a bug, but you're not ready to commit your work.\ngit stash\nlets you save your uncommitted changes and return to a clean working directory.\nYou can come back and restore your changes later.\nHere are some common use cases:\nSwitch branches safely:\nSave your work before changing branches.\nHandle emergencies:\nStash your work to fix something urgent, then restore it.\nKeep your work-in-progress safe:\nAvoid messy commits or losing changes.\nStash Your Changes (\ngit stash\n)\nSave your current changes (both staged and unstaged tracked files) with:\nWhat gets stashed?\nTracked files\n(both staged and unstaged) are stashed by default.\nUntracked files\n(new files not yet added to Git) are\nnot\nstashed by default.\nTo stash untracked files too, use\ngit stash -u\n(or\n--include-untracked\n).\nExample: Stash Your Work\ngit stash\nSaved working directory and index state WIP on main: 1234567 Add new feature\nThis command saves your changes and cleans your working directory so you can safely switch tasks or branches.\nYour changes are now saved in a stack.\nWhat is a stash stack?\nEach time you run\ngit stash\n, your changes are saved on top of a \"stack\".\nThe most recent stash is on top, and you can apply or drop stashes from the top down, or pick a specific one from the list.\nYour working directory is clean, and you can switch branches or pull updates safely.\nStash with a Message (\ngit stash push -m\n)\nAdd a message to remember what you stashed:\nExample: Stash with a Message\ngit stash push -m \"WIP: homepage redesign\"\nSaved working directory and index state On main: WIP: homepage redesign\nThis command lets you add a descriptive message to your stash so you can remember what you were working on.\nList All Stashes (\ngit stash list\n)\nSee all your saved stashes:\nExample: List Stashes\ngit stash list\nstash@{0}: On main: WIP: homepage redesign\nstash@{1}: WIP on main: 1234567 Add new feature\nThis command shows all the stashes you have saved so far, with their names and messages.\nShow Stash Details (\ngit stash show\n)\nSee what was changed in the latest stash:\nExample: Show Latest Stash\ngit stash show\n src/index.html | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nThis command gives a summary of what files and changes are in your most recent stash.\nTo see a full diff:\nExample: Show Full Diff\ngit stash show -p\ndiff --git a/src/index.html b/src/index.html\nindex 1234567..89abcde 100644\n--- a/src/index.html\n+++ b/src/index.html\n@@ ...\nThis command shows the exact lines that were changed in your most recent stash.\nApply the Latest Stash (\ngit stash apply\n)\nRestore your most recent stashed changes (keeps the stash in the stack):\nExample: Apply Latest Stash\ngit stash apply\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    modified:   src/index.html\nThis command restores your most recent stashed changes, but keeps the stash in the list so you can use it again if needed.\nApply a Specific Stash (\ngit stash apply stash@{n}\n)\nRestore a specific stash from the list:\nExample: Apply a Specific Stash\ngit stash apply stash@{1}\nOn branch main\nChanges not staged for commit:\n    modified:   src/index.html\nThis command lets you restore a specific stash from your list, not just the most recent one.\nPop the Stash (\ngit stash pop\n)\nApply the latest stash\nand remove it from the stack\n:\nExample: Pop the Stash\ngit stash pop\nOn branch main\nChanges not staged for commit:\n    modified:   src/index.html\nDropped refs/stash@{0} (abc1234d5678)\nThis command restores your most recent stash and removes it from the list at the same time.\nDrop a Stash (\ngit stash drop\n)\nDelete a specific stash when you no longer need it:\nExample: Drop a Stash\ngit stash drop stash@{0}\nDropped stash@{0} (abc1234d5678)\nThis command deletes a specific stash from your list when you no longer need it.\nClear All Stashes (\ngit stash clear\n)\nDelete all your stashes at once:\nExample: Clear All Stashes\ngit stash clear\nThis command deletes all your stashes at once. Be careful! This cannot be undone!\nBranch from a Stash (\ngit stash branch\n)\nCreate a new branch and apply a stash to it.\nUseful if your stashed work should become its own feature branch:\nExample: Branch from a Stash\ngit stash branch new-feature stash@{0}\nSwitched to a new branch 'new-feature'\nOn branch new-feature\nChanges not staged for commit:\n    modified:   src/index.html\nDropped stash@{0} (abc1234d5678)\nThis command creates a new branch and applies your stashed changes to it.\nThis is useful if you decide your work should become its own feature branch.\nBest Practices for Stashing\nUse clear messages when stashing:\ngit stash push -m \"WIP: feature name\"\nDon't use stashes as long-term storage\u2014commit your work when possible.\nCheck your stash list regularly and clean up old stashes you no longer need.\nTroubleshooting\nDid you lose your changes?\nTry\ngit stash list\nand\ngit stash apply\nto recover stashed work.\nStash didn't apply cleanly?\nYou may need to resolve conflicts, just like a merge.\nGit will mark the conflicts in your files for you to resolve.\nUntracked files missing?\nBy default, untracked files are not stashed.\nIf you need to stash them, use\ngit stash -u\n\nAccidentally cleared all stashes?\nUnfortunately,\ngit stash clear\nis permanent.\nAlways double-check before running it!\nNote:\nStashes are useful for temporary work, but are not a replacement for commits!\n\n\u2605\n+1",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "edafabd3-61ce-4b50-b0e8-114f23011350",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "55c02993-a3bb-49cf-9b6d-f5f7f4fd7516",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e9528741-ab13-4042-a199-4120f3a1d688",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Create a branch from a stash\nWhat?",
      "options": [
        "Git Stash",
        "None of the above.",
        "some common use cases:\nSwitch branches safely:\nSave your work before changing branches",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Create a branch from a stash\nWhat is 'Git Stash'."
    },
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "Git Stash",
        "some common use cases:\nSwitch branches safely:\nSave your work before changing branches",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Here is 'some common use cases:\nSwitch branches safely:\nSave your work before changing branches'."
    }
  ],
  "summary": "This tutorial covers GitStash concepts and techniques. You'll learn how to use GitStash effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitStash and how to apply it in your projects."
}