{
  "id": "2a73c08b-ed14-447e-8bcd-dc8263643411",
  "title": "GitIgnore and .gitignore",
  "slug": "gitignore-and-gitignore",
  "metadata": {
    "description": "Learn about GitIgnore and .gitignore with clear explanations and practical examples.",
    "keywords": [
      "file",
      "name",
      "files",
      "gitignore",
      "folders",
      "matches",
      "match",
      "folder",
      "ignore",
      "character"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git .gitignore"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nIgnore and",
      "content": ".gitignore\n\nChange Platform:\nGitHub\nBitbucket\nGitLab\nWhat is .gitignore?\nThe\n.gitignore\nfile tells Git which files and folders to ignore (not track).\nThis is useful for keeping log files, temporary files, build artifacts, or personal files out of your repository.\nExamples of files to ignore: log files, temporary files, hidden files, personal files, OS/editor files, etc.\nThe\n.gitignore\nfile itself\nis\ntracked by Git, so everyone using the repository ignores the same files.\nWhen to Use .gitignore\nWhen you want to keep sensitive, local, or unnecessary files out of your repository\nWhen sharing a project with others and want to avoid cluttering Git history\nWhen working with build tools or editors that create extra files\nCreate a .gitignore File\nGo to the root of your local Git repository.\nCreate a file named\n.gitignore\n:\nExample\ntouch .gitignore\nIgnoring Folders\nTo ignore a folder and everything inside it, use a trailing slash:\ntemp/\nThis ignores any folder named\ntemp\nanywhere in your project.\nWildcards & Patterns\nWildcards let you match many files or folders at once:\n*\nmatches any number of characters\n?\nmatches a single character\n[abc]\nmatches any character in the set\n[!abc]\nmatches any character\nnot\nin the set\n*.tmp      # all .tmp files\nmy?ile.txt # matches my1ile.txt, myAile.txt, etc.\nlog[0-9].txt # log1.txt, log2.txt, ... log9.txt\nNegation (!)\nUse\n!\nto\nnot\nignore something that would otherwise be ignored. This is called an exception:\n*.log\n!important.log\nThis ignores all\n.log\nfiles except\nimportant.log\n.\nComments and Blank Lines\nLines starting with\n#\nare comments and are ignored by Git. Blank lines are also ignored. Use comments to explain your rules:\n# Ignore log files\n*.log",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Ignore temp folders\ntemp/\nLocal & Personal Ignore Rules\nIf you want to ignore files only for yourself (not for everyone who uses the repository), add them to\n.git/info/exclude\n. This works just like\n.gitignore\nbut is not shared.\nGlobal .gitignore (User Level)\nYou can set up a global\n.gitignore\nfile for all your projects. This is great for ignoring OS or editor files everywhere (like\n.DS_Store\nor\nThumbs.db\n):\ngit config --global core.excludesfile ~/.gitignore_global\nThen add your patterns to\n~/.gitignore_global\n.\nHow to Stop Tracking a File\nIf you add a file to\n.gitignore\nbut Git is still tracking it, you need to tell Git to stop:\ngit rm --cached filename.txt\nThis removes the file from the repository but keeps it on your computer. \nTips & Troubleshooting\nCheck for typos\u2014\n.gitignore\nis case-sensitive!\nIf a file is already tracked, use\ngit rm --cached\nto stop tracking it.\nUse comments (\n#\n) to explain tricky rules for your teammates.\nUse\ngit status\nto see if your ignored files are being tracked.\nRemember:\n.gitignore\nonly affects files that are\nnot\nalready tracked by Git.\nPattern Syntax\nHere are some common patterns and how they match:\nPattern\nExplanation/Matches\nExamples\nBlank lines are ignored\n#\ntext comment\nLines starting with # are ignored\nname\nAll\nname\nfiles,\nname\nfolders, and files and folders in any\nname\nfolder\n/name.log\n/name/file.txt\n/lib/name.log\nname\n/\nEnding with / specifies the pattern is for a folder. Matches all files and folders in any\nname\nfolder\n/name/file.txt\n/name/log/name.log\nno match:\n/name.log\nname\n.\nfile\nAll files with the\nname.file\n/name.file\n/lib/name.file\n/name\n.\nfile\nStarting with / specifies the pattern matches only \nfiles in the root folder\n/name.file\nno match:\n/lib/name.file\nlib/name\n.\nfile\nPatterns specifiing files in specific folders are always realative to root \n(even if you do not start with / )\n/lib/name.file\nno match:\nname.file\n/test/lib/name.file\n**\n/lib/name.file\nStarting with ** before / specifies that it matches any folder in the \nrepository. Not just on root.\n/lib/name.file\n/test/lib/name.file\n**\n/name\nAll\nname\nfolders, and files and folders in any\nname\nfolder\n/name/log.file\n/lib/name/log.file\n/name/lib/log.file\n/lib/**\n/name\nAll\nname\nfolders, and files and folders in any\nname\nfolder within the lib folder.\n/lib/name/log.file\n/lib/test/name/log.file\n/lib/test/ver1/name/log.file\nno match:\n/name/log.file\n*.\nfile\nAll files withe\n.file\nextention\n/name.file\n/lib/name.file\n*\nname\n/\nAll folders ending with\nname\n/lastname/log.file\n/firstname/log.file\nname\n?.\nfile\n? matches a\nsingle\nnon-specific character\n/names.file\n/name1.file\nno match:\n/names1.file\nname\n[a-z].\nfile\n[\nrange\n] matches a\nsingle\ncharacter in the \nspecified range (in this case a character in the range of a-z, and also be \nnumberic.)\n/names.file\n/nameb.file\nno match:\n/name1.file\nname\n[abc].\nfile\n[\nset\n] matches a\nsingle\ncharacter in the specified \nset of characters (in this case either a, b, or c)\n/namea.file\n/nameb.file\nno match:\n/names.file\nname\n[!abc].\nfile\n[!\nset\n] matches a\nsingle\ncharacter,\nexcept\nthe ones spesified in the set of characters (in this case a, b, or c)\n/names.file\n/namex.file\nno match:\n/namesb.file\n*.\nfile\nAll files withe\n.file\nextention\n/name.file\n/lib/name.file\nname\n/\n!\nname\n/secret.log\n! specifies a negation or exception. Matches all files and folders in any\nname\nfolder, except name/secret.log\n/name/file.txt\n/name/log/name.log\nno match:\n/name/secret.log\n*.\nfile\n!\nname\n.file\n! specifies a negation or exception. All files withe\n.file\nextention, except name.file\n/log.file\n/lastname.file\nno match:\n/name.file\n*.\nfile\n!\nname\n/*\n.file\njunk.*\nAdding new patterns after a negation will re-ignore a \nAll files withe\n.file\nextention, except the ones in\nname\nfolder. Unless the file name is junk\n/log.file\n/name/log.file\nno match:\n/name/junk.file\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2732b87a-7d3b-42d0-b52c-e639f23b7732",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "963d4e99-354a-4547-9f04-462c08e4f038",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d2ff8977-d42a-46e9-bda0-f6c7ebe4b4be",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "None of the above.",
        "useful for keeping log files",
        "Not a This."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This is 'useful for keeping log files'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers GitIgnore and .gitignore concepts and techniques. You'll learn how to use GitIgnore and .gitignore effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitIgnore and .gitignore and how to apply it in your projects."
}