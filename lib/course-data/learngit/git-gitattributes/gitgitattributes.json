{
  "id": "7734ef56-ea2a-4675-9091-c1431c6c2b28",
  "title": "Git.gitattributes",
  "slug": "gitgitattributes",
  "metadata": {
    "description": "Learn about Git.gitattributes with clear explanations and practical examples.",
    "keywords": [
      "files",
      "file",
      "gitattributes",
      "merge",
      "line",
      "example",
      "endings",
      "diff",
      "like",
      "custom"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git .gitattributes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Git\n.gitattributes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is\n.gitattributes\n?\nThe\n.gitattributes\nfile is a special file that tells Git how to handle specific files in your repository.\nIt controls things like line endings, file types, merge behavior, custom diff tools, and more.\nEveryone on your team gets the same settings\nbecause this file is versioned with your project.\nFor more about Git LFS, see the\ndedicated page\n.\nWhen to Use\n.gitattributes\nTo enforce consistent line endings across different operating systems\nTo mark files as binary (so Git doesn't try to merge or change them)\nTo enable Git LFS for large files\nTo set up custom diff or merge tools for special file types\nTo control how files are exported in archives\nCreate or Edit\n.gitattributes\nGo to the root of your repository (or a subfolder for local rules).\nCreate or edit the\n.gitattributes\nfile.\nAdd rules, one per line, for how Git should treat files.\nExample: Force Unix Line Endings for All Text Files\n*.txt text eol=lf\nHandle Line Endings\nStandardize line endings to avoid merge conflicts and broken files across different OSes.\nExample: Set LF for Shell Scripts\n*.sh text eol=lf\nMark Files as Binary\nTell Git which files are binary (not text).\nThis prevents Git from trying to merge or change line endings for these files.\nExample: Mark PNG Files as Binary\n*.png binary\nEnable LFS for File Types\nUse Git LFS for large files like images or datasets.\nThis tells Git to use LFS for these files:\nExample: Track PSD Files with LFS\n*.psd filter=lfs diff=lfs merge=lfs -text\nCustom Diff Settings\nTell Git to use a special tool to compare certain file types (like Markdown or Jupyter notebooks):\nExample: Custom Diff for Markdown\n*.md diff=markdown\nCheck Attributes\nSee what attributes are set for a file:\nExample: Check Attributes of a File\ngit check-attr --all README.md\nAdvanced Usage\nMerge Strategies:\nSet custom merge drivers for tricky files (like lock files or notebooks).\nExport-ignore:\nExclude files from tar/zip archives created by\ngit archive\n:\nExample: Ignore Files on Export\ndocs/* export-ignore\nTips & Best Practices\nPatterns work like\n.gitignore\n(wildcards, etc).\nPut\n.gitattributes\nin subfolders for rules that only apply there.\nChanging\n.gitattributes\nwon't retroactively fix files already committed\u2014re-add files to update them.\nUse\ngit check-attr\nto debug attribute issues.\nNote:\n.gitattributes\nis versioned with your project, so everyone on your team gets the same settings.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "bcc86b0a-8791-41f5-970e-f5d2713da442",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5d1a7847-5eca-4e17-981e-a3a19c170dc5",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "478f9c1b-05a5-4250-81f1-c48c50b15d15",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is gitattributes\nfile?",
      "options": [
        "a special file that tells Git how to handle specific files in your repository",
        "None of the above.",
        "None of the above.",
        "Not a gitattributes\nfile."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of gitattributes\nfile is 'a special file that tells Git how to handle specific files in your repository'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Git.gitattributes concepts and techniques. You'll learn how to use Git.gitattributes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Git.gitattributes and how to apply it in your projects."
}