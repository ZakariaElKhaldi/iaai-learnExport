{
  "id": "4363c26a-16d6-450a-8da6-ff736dd6a733",
  "title": "GitCommit",
  "slug": "gitcommit",
  "metadata": {
    "description": "Learn about GitCommit with clear explanations and practical examples.",
    "keywords": [
      "commit",
      "message",
      "files",
      "line",
      "changes",
      "first",
      "changed",
      "example",
      "file",
      "commits"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Commit"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nCommit\n\nChange Platform",
      "content": ":\nGitHub\nBitbucket\nGitLab\nWhat is a Commit?\nA\ncommit\nis like a save point in your project.\nIt records a snapshot of your files at a certain time, with a message describing what changed.\nYou can always go back to a \nHere are some key commands for commits:\ngit commit -m \"message\"\n- Commit staged changes with a message\ngit commit -a -m \"message\"\n- Commit all tracked changes (skip staging)\ngit log\n- See commit history\nHow to Commit with a Message (\n-m\n)\nTo save your staged changes, use\ngit commit -m \"your message\"\n:\nExample\ngit commit -m \"First release of Hello World!\"\n[master (root-commit) 221ec6e] First release of Hello World!\n 3 files changed, 26 insertions(+)\n create mode 100644 README.md\n create mode 100644 bluestyle.css\n create mode 100644 index.html\nAlways write a clear message so you and others can understand what changed.\nCommit All Changes Without Staging (\n-a\n)\nYou can skip the staging step for\nalready tracked files\nwith\ngit commit -a -m \"message\"\n.\nThis commits all modified and deleted files,\nbut not new/untracked files\n.\nExample\ngit commit -a -m \"Quick update to README\"\n[master 123abcd] Quick update to README\n 1 file changed, 2 insertions(+)\nWarning:\nSkipping the staging step can make you include unwanted changes. Use with care.\nNote:\ngit commit -a\ndoes\nnot\nwork for new/untracked files. You must use\ngit add <file>\nfirst for new files.",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "What happens if you try to commit a new file with",
      "content": "-a\n?\n$ git commit -a -m \"Try to commit new file\"\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add\n...\" to include in what will be committed)\n        index.html\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nWrite Multi-line Commit Messages\nIf you just type\ngit commit\n(no\n-m\n), your default editor will open so you can write a detailed, multi-line message:\nExample\ngit commit\nWrite a short summary on the first line, leave a blank line, then add more details below.\nCommit Message Best Practices:\nKeep the first line short (50 characters or less).\nUse the imperative mood (e.g., \"Add feature\" not \"Added feature\").\nLeave a blank line after the summary, then add more details if needed.\nDescribe\nwhy\nthe change was made, not just what changed.\nOther Useful Commit Options\nCreate an empty commit:\ngit commit --allow-empty -m \"Start project\"\nUse \ngit commit --no-edit\nQuickly add staged changes to last commit, keep message:\ngit commit --amend --no-edit\nTroubleshooting Common Commit Mistakes\nForgot to stage a file?\nIf you run\ngit commit -m \"message\"\nbut forgot to\ngit add\na file, just add it and commit again. Or use\ngit commit --amend\nto add it to your last commit.\nTypo in your commit message?\nUse\ngit commit --amend -m \"Corrected message\"\nto fix the last commit message.\nAccidentally committed the wrong files?\nYou can use\ngit reset --soft HEAD~1\nto undo the last commit and keep your changes staged.\nView Commit History (\ngit log\n)\nTo view the history of commits for a repository, you can use the\ngit log\ncommand:\nExample\ngit log\ncommit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master)\nAuthor: -test <test@.com>\nDate:   Fri Mar 26 09:35:54 2021 +0100\n\n    Updated index.html with a new line\n\ncommit 221ec6e10aeedbfd02b85264087cd9adc18e4b26\nAuthor: -test <test@.com>\nDate:   Fri Mar 26 09:13:07 2021 +0100\n\n    First release of Hello World!\nFor a shorter view, use\ngit log --oneline\n:\nExample\ngit log --oneline\n09f4acd Updated index.html with a new line\n221ec6e First release of Hello World!\nTo see which files changed in each commit, use\ngit log --stat\n:\nExample\ngit log --stat\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "cce2878f-0a31-4022-8d3f-f69d483335ed",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "486c2b1c-6121-4a9d-b297-f96458e6a046",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "29616005-ba81-4130-baaf-9415ac9d1cfa",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is GitHub\nBitbucket\nGitLab\nWhat?",
      "options": [
        "None of the above.",
        "like a save point in your project",
        "a Commit",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of GitHub\nBitbucket\nGitLab\nWhat is 'a Commit'."
    },
    {
      "question": "What is A\ncommit?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a Commit",
        "like a save point in your project"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A\ncommit is 'like a save point in your project'."
    }
  ],
  "summary": "This tutorial covers GitCommit concepts and techniques. You'll learn how to use GitCommit effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitCommit and how to apply it in your projects."
}