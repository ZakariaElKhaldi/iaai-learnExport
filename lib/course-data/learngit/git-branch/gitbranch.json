{
  "id": "820cfe7b-1227-4ad1-9c6f-78c12c00fe06",
  "title": "GitBranch",
  "slug": "gitbranch",
  "metadata": {
    "description": "Learn about GitBranch with clear explanations and practical examples.",
    "keywords": [
      "c",
      "branch",
      "file",
      "hello",
      "world",
      "html",
      "example",
      "changes",
      "branches",
      "images",
      "main"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 8,
    "category": "LearnGit",
    "subcategory": "Git Branch"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Git\nBranch",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Git\nBranch\n\nChange Platform",
      "content": ":\nGitHub\nBitbucket\nGitLab\nWhat is a Git Branch?\nIn Git, a\nbranch\nis like a separate workspace where you can make changes and try new ideas without affecting the main project. Think of it as a \"parallel universe\" for your code.\nWhy Use Branches?\nBranches let you work on different parts of a project, like new features or bug fixes, without interfering with the main branch.\nCommon Reasons to Create a Branch\nDeveloping a new feature\nFixing a bug\nExperimenting with ideas\nExample: With and Without Git\nLet's say you have a large project, and you need to update the design on it.\nHow would that work without and with Git:\nWithout Git:\nMake copies of all the relevant files to avoid impacting the live version\nStart working with the design and find that code depend on code in other files, that also need to be changed!\nMake copies of the dependant files as well. Making sure that every file dependency references the correct file name\nEMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!\nSave all your files, making a note of the names of the copies you were working on\nWork on the unrelated error and update the code to fix it\nGo back to the design, and finish the work there\nCopy the code or rename the files, so the updated design is on the live version\n(2 weeks later, you realize that the unrelated error was not fixed in the new design version because you copied the files before the fix)\nWith Git:\nWith a new branch called new-design, edit the code directly without impacting the main branch\nEMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!\nCreate a new branch from the main project called small-error-fix\nFix the unrelated error and merge the small-error-fix branch with the main branch\nYou go back to the new-design branch, and finish the work there\nMerge the new-design branch with main (getting alerted to the small error fix that you were missing)\nBranches allow you to work on different parts of a project without impacting the main branch.\nWhen the work is complete, a branch can be merged with the main project.\nYou can even switch between branches and work on different projects without them interfering with each other.\nBranching in Git is very lightweight and fast!\nCreating a New Branch\nLet's say you want to add a new feature. You can create a new branch for it.\nLet add some new features to our\nindex.html\npage.\nWe are working in our local repository, and we do not want to disturb or possibly wreck the main project.\nSo we create a new\nbranch\n:\nExample\ngit branch hello-world-images\nNow we created a new\nbranch\ncalled \"\nhello-world-images\n\"\nListing All Branches\nLet's confirm that we have created a new\nbranch\n.\nTo see all branches in your repository, use:\nExample\ngit branch\n  hello-world-images\n* master\nWe can see the new branch with the name \"hello-world-images\", but the\n*\nbeside\nmaster\nspecifies that we are currently on that\nbranch\n.\nSwitching Between Branches\ncheckout\nis the command used to check out a\nbranch\n.\nMoving us\nfrom\nthe current\nbranch\n,\nto\nthe one specified at the end of the command:\nExample\ngit checkout hello-world-images\nSwitched to branch 'hello-world-images'\nNow you can work in your new branch without affecting the main branch.\nWorking in a Branch\nNow we have moved our current workspace from the master branch, to the new\nbranch\nOpen your favourite editor and make some changes.\nFor this example, we added an \nimage (img_hello_world.jpg) to the working folder and a line of code in the\nindex.html\nfile:\nExample\n<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from \n  Space\"\nstyle=\"width:100%;max-width:960px\"></div>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n</body>\n</html>\nWe have made changes to a file and added a new file in the working directory \n(same directory as the\nmain\nbranch\n).\nNow check the status of the current\nbranch\n:\nExample\ngit status\nOn branch hello-world-images\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   index.html\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        img_hello_world.jpg\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nSo let's go through what happens here:\nThere are changes to our index.html, but the file is not staged for\ncommit\nimg_hello_world.jpg\nis not\ntracked\nSo we need to add both files to the Staging Environment for this\nbranch\n:\nExample\ngit add --all",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Using",
      "content": "--all\ninstead of individual filenames \nwill\nStage\nall changed (new, modified, and deleted) files.\nCheck the\nstatus\nof the\nbranch\n:\nExample\ngit status\nOn branch hello-world-images\nChanges to be committed:\n\u00a0\u00a0(use \"git restore --staged <file>...\" to unstage)\n\u00a0\u00a0\u00a0\u00a0new file: img_hello_world.jpg\n\u00a0\u00a0\u00a0\u00a0modified: index.html\nWe are happy with our changes. So we will commit them to the\nbranch\n:\nExample\ngit commit -m \"Added image to Hello World\"\n[hello-world-images 0312c55] Added image to Hello World\n2 files changed, 1 insertion(+)\ncreate mode 100644 img_hello_world.jpg\nNow we have a new\nbranch\n, that is different from the master\nbranch\n.\nNote:",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Using the",
      "content": "-b\noption \n  on\ncheckout\nwill create a new branch, and move to it, if it does not exist\nSwitching Between Branches\nNow let's see just how quick and easy it is to work with different branches, and how well it works.\nWe are currently on the branch\nhello-world-images\n. We added an image to this branch, so let's list the files in the current directory:\nExample\nls\nREADME.md  bluestyle.css  img_hello_world.jpg  index.html\nWe can see the new file\nimg_hello_world.jpg\n, and if we open the html file, we can see the code has been altered. All is as it should be.\nNow, let's see what happens when we change branch to\nmaster\nExample\ngit checkout master\nSwitched to branch 'master'\nThe new image is not a part of this branch. List the files in the current directory again:\nExample\nls\nREADME.md  bluestyle.css  index.html\nimg_hello_world.jpg\nis no longer there! And if we open the html file, we can see the code reverted to what it was before the alteration.\nSee how easy it is to work with branches? And how this allows you to work on different things?\nEmergency Branch\nNow imagine that we are not yet done with hello-world-images, but we need to fix an error on master.\nI don't want to mess with master directly, and I do not want to mess with \nhello-world-images, since it is not done yet.\nSo we create a new branch to deal with the emergency:\nExample\ngit checkout -b emergency-fix\nSwitched to a new branch 'emergency-fix'\nNow we have created a new branch from master, and changed to it. We can \nsafely fix the error without disturbing the other branches.\nLet's fix our imaginary error:\nExample\n<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>This line is here to show how \n  merging works.</p>\n</body>\n</html>\nWe have made changes in this file, and we need to get those changes to the \nmaster branch.\nCheck the status:\nExample\ngit status\nOn branch emergency-fix\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nstage the file, and commit:\nExample\ngit add index.html\ngit commit -m \"updated index.html with emergency fix\"\n[emergency-fix dfa79db] updated index.html with emergency fix\n 1 file changed, 1 insertion(+), 1 deletion(-)\nNow we have a fix ready for master, and we need to merge the two branches.\nDeleting a Branch\nWhen you're done with a branch, you can delete it:\nExample\ngit branch -d hello-world-images\nThis deletes the branch named\nhello-world-images\n(if it's already merged).\nBest Practices for Working with Branches\nUse clear, descriptive branch names (like\nfeature/login-page\nor\nbugfix/header-crash\n).\nKeep each branch focused on a single purpose or feature.\nRegularly merge changes from the main branch to keep your branch up-to-date.\nDelete branches that are no longer needed to keep your repository clean.\nPractical Examples\nRename a branch:\ngit branch -m old-name new-name\nList all branches:\ngit branch\nSwitch branches:\ngit checkout branch-name\nor\ngit switch branch-name\nDelete a branch (not merged):\ngit branch -D branch-name\nSee which branch you're on:\ngit status\nTroubleshooting\nIf you don't see your changes on the main branch, remember: changes in one branch stay there until you merge them.\nWhen deleting a branch, make sure it's merged first. If you try to delete an unmerged branch, Git will prevent you from doing so.\nTo force delete an unmerged branch, use\ngit branch -D branch-name\n.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from \n  Space\"\nstyle=\"width:100%;max-width:960px\"></div>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>This line is here to show how \n  merging works.</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<head>\n# TODO: Complete this line\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from \n  Space\"\nstyle=\"width:100%;max-width:960px\"></div>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from \n  Space\"\nstyle=\"width:100%;max-width:960px\"></div>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n</body>\n</html>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n# TODO: Complete this line\n  world!</h1>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>This line is here to show how \n  merging works.</p>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link \n  rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n<h1>Hello \n  world!</h1>\n<p>This is the first \n  file in my new Git Repo.</p>\n<p>This line is here to show how \n  merging works.</p>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "fe3ba4d3-68c4-4829-9193-91a6441d4866",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "206b29a6-cc46-418f-99d5-351a82e2a215",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "be7dd4e6-4bbb-46e1-9cbf-748503379948",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is GitHub\nBitbucket\nGitLab\nWhat?",
      "options": [
        "a Git Branch",
        "None of the above.",
        "None of the above.",
        "like a separate workspace where you can make changes and try new ideas without affecting the main project"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of GitHub\nBitbucket\nGitLab\nWhat is 'a Git Branch'."
    },
    {
      "question": "What is a\nbranch?",
      "options": [
        "None of the above.",
        "like a separate workspace where you can make changes and try new ideas without affecting the main project",
        "a Git Branch",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of a\nbranch is 'like a separate workspace where you can make changes and try new ideas without affecting the main project'."
    }
  ],
  "summary": "This tutorial covers GitBranch concepts and techniques. You'll learn how to use GitBranch effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitBranch and how to apply it in your projects."
}