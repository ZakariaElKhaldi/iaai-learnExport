{
  "id": "40d725ed-a832-4c34-8b42-c1268eaf754a",
  "title": "GitConfig",
  "slug": "gitconfig",
  "metadata": {
    "description": "Learn about GitConfig with clear explanations and practical examples.",
    "keywords": [
      "name",
      "config",
      "user",
      "example",
      "global",
      "email",
      "settings",
      "current",
      "system",
      "local"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git Config"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Git\nConfig\n\nConfigure Git\nNow let Git know who you are",
      "content": ".\nThis is important for version control systems, as each Git commit uses this information:\nTip for Beginners:\nConfiguring Git is safe.\nYou can change these settings at any time, they only affect how your name and email appear in your commits.\nUser Name\nYour name will be attached to your commits. Set it with:\nExample\ngit config --global user.name \"Your Name\"\nNote:\nIf you make a typo or mistake, just run the command again with the correct value.\nThe new setting will overwrite the old one.\nEmail Address\nYour email is also attached to your commits. Set it with:\nExample\ngit config --global user.email \"you@example.com\"\nChange the user name and email to your own.\nYou will probably also want to use this when registering to GitHub later on.\nNote:\nIf you forget to set your name or email, Git will prompt you the first time you try to commit.\nYou can always change these settings later, and",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Use",
      "content": "--global\nto set the value for\nevery repository\non your computer.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Use",
      "content": "--local\n(the default) to set it only for the current repository.\nWhy Configure Git?\nGit uses your name and email to label your commits.\nIf you do not set these, Git will prompt you the first time you try to commit.\nNow you have added the minimum of configuration needed to start using Git.\nSo feel free to continue with the \nFor more information about configuration, or if you want to change anything, keep reading this page.\nViewing Your Configuration\nYou can see all your Git settings with:\nExample: List All Settings\ngit config --list\nuser.name=Your Name\nuser.email=you@example.com\ncore.editor=code --wait\nalias.st=status\ninit.defaultbranch=main\n...\nTo view a specific value, use:\nExample: View a Specific Setting\ngit config user.name\nYour Name\nChanging or Unsetting Config Values\nTo change a value, just run the\ngit config\ncommand again with the new value.\nTo remove a setting, use\n--unset\n:\nExample: Unset an Alias\ngit config --global --unset code.editor\nDefault Branch Name\nSet the default branch name for new repositories (for example,\nmain\ninstead of\nmaster\n):\nExample: Set Default Branch Name\ngit config --global init.defaultBranch main\nConfiguration Levels\nThere are three levels of configuration:\nSystem\n(all users):\ngit config --system\nGlobal\n(current user):\ngit config --global\nLocal\n(current repo):\ngit config --local\nThe order of precedence is:\nLocal (current repo)\nGlobal (current user)\nSystem (all users)\nThe reason to use the different levels is that you can set different values for different users or repositories.\nThis can be used for example to set different default branches for different repositories and users.\nExample: Set a Local Config\nLocal settings only apply to the current repository.\ngit config user.name \"Project Name\"\nExample: Set a Global Config\nGlobal settings apply to all repositories for the current user.\ngit config --global user.name \"Global Name\"\nExample: Set a System Config\nSystem settings apply to all repositories for all users.\ngit config --system user.name \"System Name\"\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9e09e6c0-5cee-44fa-bd45-bb5ac90caffd",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "854bdbdf-74cd-40e3-8f52-b188b0a4e505",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "eb60f0c6-be9b-411e-bff3-a7dc1607f7df",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "important for version control systems",
        "None of the above.",
        "None of the above.",
        "Not a This."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This is 'important for version control systems'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers GitConfig concepts and techniques. You'll learn how to use GitConfig effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitConfig and how to apply it in your projects."
}