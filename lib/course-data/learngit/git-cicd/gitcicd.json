{
  "id": "1815059d-fc87-4fc6-833d-d3ea0066e495",
  "title": "GitCI/CD",
  "slug": "gitcicd",
  "metadata": {
    "description": "Learn about GitCI/CD with clear explanations and practical examples.",
    "keywords": [
      "github",
      "steps",
      "runs",
      "push",
      "workflow",
      "code",
      "step",
      "name",
      "actions",
      "tests"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGit",
    "subcategory": "Git CI/CD"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Git\nCI/CD",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is CI/CD?\nCI/CD\nstands for\nContinuous Integration\nand\nContinuous Deployment/Delivery\n.\nIt means your code is automatically tested and deployed every time you push.\nThis helps you catch bugs early and deliver features faster, with less manual work.\nWhy Use CI/CD?\nCI/CD automates the process of testing and deploying your code. This means:\nFind bugs before they reach users\nDeploy changes faster and more safely\nReduce manual steps and mistakes\nGet quick feedback on every push\nHow Does CI/CD Work with Git?\nEvery time you push code to your Git repository:\nThe CI/CD service (like GitHub Actions or GitLab CI) detects the change\nIt runs tests, builds your project, and can deploy automatically\nIf something fails, you get notified right away\nExample Workflow\n[Developer] --push--> [Git Repository] --triggers--> [CI/CD Pipeline: Test, Build, Deploy]\nPopular CI/CD Services\nGitHub Actions:\nBuilt into GitHub, uses YAML files in\n.github/workflows/\nGitLab CI/CD:\nBuilt into GitLab, uses\n.gitlab-ci.yml\nCircleCI:\nWorks with GitHub/GitLab, easy setup for many languages\nTravis CI:\nPopular for open-source, uses\n.travis.yml\nAzure Pipelines:\nWorks with Azure DevOps and GitHub, supports many platforms\nKey CI/CD Concepts\nHere are some important terms:\nWorkflow:\nA series of jobs that run together\nJob:\nA group of steps that run together\nStep:\nA single task, like checking out code or running tests\nRunner:\nThe computer/server that runs your jobs\nTrigger:\nDecides when your workflow runs\nEnvironment Variables:\nSettings for your workflow\nSecrets:\nPasswords or API keys\nJobs\nA\njob\nis a group of steps that run together. Each job runs on a runner (a server).\nExample: A Job in GitHub Actions\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # steps go here\nSteps\nEach\nstep\nis a single task, like checking out code or running tests.\nExample: Steps\nsteps:\n  - uses: actions/checkout@v3\n  - name: Run tests\n    run: npm test\nRunners\nA\nrunner\nis the computer/server that runs your jobs.\nYou can use the service's runners or set up your own for more control.\nExample: Specify a Runner\nruns-on: ubuntu-latest\nTriggers\nA\ntrigger\ndecides when your workflow runs.\nCommon triggers are\npush\n(every push) and\npull_request\n(when a pull request is opened or updated).\nExample: Trigger on Push or Pull Request\non:\n  push:\n  pull_request:\nEnvironment Variables & Secrets\nUse\nenvironment variables\nfor settings, and\nsecrets\nfor passwords or API keys.\nNever hardcode secrets in your code!\nExample: Use a Secret\nenv:\n  NODE_ENV: production\n  API_KEY: ${{ secrets.API_KEY }}\nBuild Logs\nCI/CD tools show logs for every job and step. Check logs to see what happened or to debug failures.\nIn GitHub Actions, click on a workflow run and see logs for each job/step.\nSkipping CI\nYou can skip CI/CD for a commit by adding\n[skip ci]\nto your commit message.\nThis is useful for documentation or minor changes.\nExample: Skip CI\ngit commit -m \"Update docs [skip ci]\"\nBadges\nAdd a badge to your README to show CI/CD status.\nThis lets others see if your latest build passed.\nExample: GitHub Actions Badge\n![CI](\nExample: GitHub Actions Workflow File (Explained)\n# .github/workflows/ci.yml\n# This file tells GitHub Actions how to run CI for your project\n\nname: CI                 # The name of the workflow (shows up in GitHub)\non: [push]               # Trigger: run this workflow on every push\njobs:\n  build:                 # Job name (can be anything)\n    runs-on: ubuntu-latest   # Runner: use the latest Ubuntu server\n    steps:\n      - uses: actions/checkout@v3  # Step: check out your code from the repo\n      - name: Run tests            # Step: give this step a name\n        run: npm test              # Step: run your project's tests\nname:\nSets the workflow's display name in GitHub.\non:\nDecides when the workflow runs (here: every push).\njobs:\nGroups together steps that run on a runner.\nbuild:\nThe name of this job (can be anything).\nruns-on:\nPicks the type of server (here: Ubuntu Linux).\nsteps:\nEach step does one thing, like checking out code or running tests.\nuses:\nUses a pre-made GitHub Action (here: checks out your code).\nname:\n(under steps) Gives a step a label.\nrun:\nRuns a shell command (here:\nnpm test\nto run tests).\nTroubleshooting & Best Practices\nIf a build fails, check the logs for error messages.\nMake sure your secrets and environment variables are set correctly.\nYou can rerun failed jobs from the CI/CD dashboard.\nCheck the documentation for your CI/CD service for more help.\nStart small: automate tests first, then add deployment when ready.\nKeep secrets out of your code and never commit API keys.\nUse badges to show your build status in the README.\nNote:\nCI/CD helps catch bugs early and speeds up delivery. Even small projects can benefit from automation!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "f7b03f37-83e1-4657-af67-d1ebde5e0f42",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "13aa7dea-9bf8-4b4c-9030-f61f8a1cab3a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0252b662-948f-4dc1-8a2a-a2e9f94ba1c5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is CD\n\nWhat?",
      "options": [
        "CI/CD",
        "None of the above.",
        "automatically tested and deployed every time you push",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of CD\n\nWhat is 'CI/CD'."
    },
    {
      "question": "What is It means your code?",
      "options": [
        "automatically tested and deployed every time you push",
        "CI/CD",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of It means your code is 'automatically tested and deployed every time you push'."
    }
  ],
  "summary": "This tutorial covers GitCI/CD concepts and techniques. You'll learn how to use GitCI/CD effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GitCI/CD and how to apply it in your projects."
}