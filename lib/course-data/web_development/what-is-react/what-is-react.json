{
  "id": "6fd1312c-baaa-44ed-8520-5e3093f8c14b",
  "title": "What is React?",
  "slug": "what-is-react",
  "metadata": {
    "description": "Learn about What is React? with clear explanations and practical examples.",
    "keywords": [
      "c",
      "react",
      "example",
      "render",
      "babel",
      "script",
      "welcome",
      "tutorial",
      "html",
      "javascript",
      "hello"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "Web Development",
    "subcategory": "What is React"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "What is React?",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "React is a\nJavaScript\nlibrary created by\nFacebook\nReact is a\nUser Interface\n(UI) library\nReact is a tool for building\nUI components\nReact Quickstart Tutorial\nThis is a quickstart tutorial.\nBefore you start, you should have a basic understanding of:\nWhat is\nHTML\nWhat is\nCSS\nWhat is\nDOM\nWhat is\nES6\nWhat is\nNode.js\nWhat is\nnpm\nFor a full tutorial:\nGo to our React Tutorial \u276f\nAdding React to an HTML Page\nThis quickstart tutorial will add React to a page like this:\nExample\n<!DOCTYPE html>\n<html lang=\"en\">\n<title>Test React</title>\n<!-- Load React API -->\n<script src= \"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n<!-- Load React DOM-->\n<script src= \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n<!-- Load \n  Babel Compiler -->\n<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n<body>\n<script type=\"text/babel\">\n//\u00a0 JSX Babel code goes here\n</script>\n</body>\n</html>\nWhat is Babel?\nBabel is a JavaScript compiler that can translate markup or programming languages into JavaScript.\nWith Babel, you can use the newest features of JavaScript (ES6 - ECMAScript 2015).\nBabel is available for different conversions. React uses Babel to convert JSX into JavaScript.\nPlease note that <script type=\"text/babel\"> is needed for using Babel.\nWhat is JSX?\nJSX stands for\nJ\nava\nS\ncript\nX\nML.\nJSX is an XML/HTML like extension to JavaScript.\nExample\nconst element = <h1>Hello World!</h1>\nAs you can see above, JSX is not JavaScript nor HTML.\nJSX is a XML syntax extension to JavaScript that also comes with the full power of \nES6 (ECMAScript 2015).\nJust like HTML, JSX tags can have a tag names, attributes, and children.\nIf an attribute is wrapped in curly braces, the value is a JavaScript expression.\nNote that JSX does not use quotes around the HTML text string.\nReact DOM Render\nThe method ReactDom.render() is used to render (display) HTML elements:\nExample\n<div id=\"id01\">Hello World!</div>\n<script type=\"text/babel\">\nReactDOM.render(\n<h1>Hello React!</h1>,\ndocument.getElementById('id01'));\n</script>\n\nJSX Expressions\nExpressions can be used in JSX by wrapping them in curly\n{}\nbraces.\nExample\n<div id=\"id01\">Hello World!</div>\n<script type=\"text/babel\">\nconst\nname\n= 'John Doe';\nReactDOM.render(\n<h1>Hello\n{name}\n!</h1>,\ndocument.getElementById('id01'));\n</script>\n\nReact Elements\nReact applications are usually built around a single\nHTML element\n.\nReact developers often call this the\nroot node\n(root element):\n<div id=\"root\"></div>\nReact elements\nlook like this:\nconst element = <h1>Hello React!</h1>\nElements are\nrendered\n(displayed) with the ReactDOM.render() method:\nReactDOM.render(element, document.getElementById('root'));\n\nReact elements are\nimmutable\n. They cannot be changed.\nThe only way to change a React element is to render a new element every time:\nExample\nfunction tick() {\nconst element = (<h1>{new \n  Date().toLocaleTimeString()}</h1>);\nReactDOM.render(element, document.getElementById('root'));\n}\nsetInterval(tick, 1000);\n\nReact Components\nReact components are JavaScript functions.\nThis example creates a React\ncomponent\nnamed \"Welcome\":\nExample\nfunction Welcome() {\nreturn <h1>Hello React!</h1>;\n}\nReactDOM.render(<Welcome />, document.getElementById('root'));\n\nReact can also use ES6 classes to create components.\nThis example creates a React component named Welcome with a render\nmethod\n:\nExample\nclass Welcome extends React.Component {\nrender() { \n  return(<h1>Hello React!</h1>); }\n}\nReactDOM.render(<Welcome />, \n  document.getElementById('root'));\n\nReact Component Properties\nThis example creates a React\ncomponent\nnamed \"Welcome\" \nwith property arguments:\nExample\nfunction Welcome(props) {\nreturn <h1>Hello \n  {props.name}!</h1>;\n}\nReactDOM.render(<Welcome name=\"John Doe\"/>, \n  document.getElementById('root'));\n\nReact can also use ES6 classes to create components.\nThis example also creates a React component named \"Welcome\" with property \narguments:\nExample\nclass Welcome extends React.Component {\nrender() { \n  return(<h1>Hello {this.props.name}</h1>); }\n}\nReactDOM.render(<Welcome \n  name=\"John Doe\"/>, document.getElementById('root'));\n\nJSX Compiler\nThe examples on this page compiles JSX in the browser.\nFor production code, the compilation should be done separately.\nCreate React Application\nFacebook has created a\nCreate React Application\nwith everything you need to build a React app.\nIt is a a development server that uses Webpack to compile React, JSX, and ES6, auto-prefix CSS files.\nThe Create React App uses ESLint to test and warn about mistakes in the code.\nTo create a Create React App run the following code on your terminal:\nExample\nnpx create-react-app react-tutorial\nMake sure you have Node.js 5.2 or higher. Otherwise you must install npx:\nExample\nnpm i npx\nStart one folder up from where you want your application to stay:\nExample\nC:\\Users\\myUser>npx create-react-app react-tutorial\nSuccess Result:\nnpx: installed 63 \nin 10.359s\nCreating a new React app in C:\\Users\\myUser\\react-tutorial.\nInstalling packages. This might take a couple of minutes.\nInstalling react, \nreact-dom, and react-scripts...\n+ react-dom@16.5.2\n+ react@16.5.2\n+ \nreact-scripts@2.0.4\nadded 1732 packages from 664 contributors and audited \n31900 packages in 355.501s\nfound 0 vulnerabilities+ react@16.5.2\nSuccess! Created react-tutorial at C:\\Users\\myUser\\react-tutorial\nInside that directory, you can run several commands:\nnpm start\nStarts the development server.\nnpm run build\nBundles the app into static files for production.\nnpm test\nStarts the test runner.\nnpm run eject\nRemoves this tool and copies build dependencies, configuration files\nand scripts into the app directory. If you do this, you can't go back!\nWe suggest that you begin by typing:\ncd react-tutorial\nnpm start\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<title>Test React</title>\n<!-- Load React API -->\n<script src= \"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n<!-- Load React DOM-->\n<script src= \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n<!-- Load \n  Babel Compiler -->\n<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n<body>\n<script type=\"text/babel\">\n//\u00a0 JSX Babel code goes here\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const element = <h1>Hello World!</h1>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<div id=\"id01\">Hello World!</div>\n<script type=\"text/babel\">\nReactDOM.render(\n<h1>Hello React!</h1>,\ndocument.getElementById('id01'));\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<div id=\"id01\">Hello World!</div>\n<script type=\"text/babel\">\nconst\nname\n= 'John Doe';\nReactDOM.render(\n<h1>Hello\n{name}\n!</h1>,\ndocument.getElementById('id01'));\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<div id=\"root\"></div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const element = <h1>Hello React!</h1>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "ReactDOM.render(element, document.getElementById('root'));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "function tick() {\nconst element = (<h1>{new \n  Date().toLocaleTimeString()}</h1>);\nReactDOM.render(element, document.getElementById('root'));\n}\nsetInterval(tick, 1000);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "function Welcome() {\nreturn <h1>Hello React!</h1>;\n}\nReactDOM.render(<Welcome />, document.getElementById('root'));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "class Welcome extends React.Component {\nrender() { \n  return(<h1>Hello React!</h1>); }\n}\nReactDOM.render(<Welcome />, \n  document.getElementById('root'));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "function Welcome(props) {\nreturn <h1>Hello \n  {props.name}!</h1>;\n}\nReactDOM.render(<Welcome name=\"John Doe\"/>, \n  document.getElementById('root'));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "class Welcome extends React.Component {\nrender() { \n  return(<h1>Hello {this.props.name}</h1>); }\n}\nReactDOM.render(<Welcome \n  name=\"John Doe\"/>, document.getElementById('root'));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "npx create-react-app react-tutorial",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "npm i npx",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "C:\\Users\\myUser>npx create-react-app react-tutorial",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Success Result:",
      "content": "",
      "order": 18,
      "code": "npx: installed 63 \nin 10.359s\nCreating a new React app in C:\\Users\\myUser\\react-tutorial.\nInstalling packages. This might take a couple of minutes.\nInstalling react, \nreact-dom, and react-scripts...\n+ react-dom@16.5.2\n+ react@16.5.2\n+ \nreact-scripts@2.0.4\nadded 1732 packages from 664 contributors and audited \n31900 packages in 355.501s\nfound 0 vulnerabilities+ react@16.5.2\nSuccess! Created react-tutorial at C:\\Users\\myUser\\react-tutorial\nInside that directory, you can run several commands:\nnpm start\nStarts the development server.\nnpm run build\nBundles the app into static files for production.\nnpm test\nStarts the test runner.\nnpm run eject\nRemoves this tool and copies build dependencies, configuration files\nand scripts into the app directory. If you do this, you can't go back!\nWe suggest that you begin by typing:\ncd react-tutorial\nnpm start",
      "language": "unknown",
      "explanation": "Example of success result:"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html lang=\"en\">\n<title>Test React</title>\n<!-- Load React API -->\n<script src= \"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n<!-- Load React DOM-->\n<script src= \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n<!-- Load \n  Babel Compiler -->\n<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n# TODO: Complete this line\n<script type=\"text/babel\">\n//\u00a0 JSX Babel code goes here\n</script>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html lang=\"en\">\n<title>Test React</title>\n<!-- Load React API -->\n<script src= \"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\n<!-- Load React DOM-->\n<script src= \"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\n<!-- Load \n  Babel Compiler -->\n<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n<body>\n<script type=\"text/babel\">\n//\u00a0 JSX Babel code goes here\n</script>\n</body>\n</html>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "const element = <h1>Hello World!</h1>"
    }
  ],
  "related_topics": [
    {
      "id": "91ca41e9-831c-42f2-8f07-e03fbcd1a21a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c79925d2-950b-432c-84f2-973b1518bb8e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f771f7a2-1d67-4312-a58f-a05107df5d91",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "a\nUser Interface\n(UI) library\nReact is a tool for building\nUI components\nReact Quickstart Tutorial\nThis is a quickstart tutorial",
        "React",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of What is 'React'."
    },
    {
      "question": "What is React is a\nJavaScript\nlibrary created by\nFacebook\nReact?",
      "options": [
        "None of the above.",
        "a\nUser Interface\n(UI) library\nReact is a tool for building\nUI components\nReact Quickstart Tutorial\nThis is a quickstart tutorial",
        "None of the above.",
        "React"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of React is a\nJavaScript\nlibrary created by\nFacebook\nReact is 'a\nUser Interface\n(UI) library\nReact is a tool for building\nUI components\nReact Quickstart Tutorial\nThis is a quickstart tutorial'."
    }
  ],
  "summary": "This tutorial covers What is React? concepts and techniques. You'll learn how to use What is React? effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of What is React? and how to apply it in your projects."
}