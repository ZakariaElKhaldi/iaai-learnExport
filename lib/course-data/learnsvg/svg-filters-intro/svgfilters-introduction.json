{
  "id": "3a100d5f-b93f-4b83-bd62-89ea5267dba3",
  "title": "SVGFilters Introduction",
  "slug": "svgfilters-introduction",
  "metadata": {
    "description": "Learn about SVGFilters Introduction with clear explanations and practical examples.",
    "keywords": [
      "c",
      "filter",
      "graphic",
      "effects",
      "filters",
      "element",
      "source",
      "defs",
      "input",
      "light",
      "used"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "SVG Filters Intro"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SVG\nFilters Introduction",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "SVG Filters\nSVG filters are used to add special effects to SVG graphics.\nAll SVG filters are defined within a\n<defs>\nelement. The\n<defs>\nelement is short for \n\"definitions\", and contains definition of special elements (such as filters).\nThe\n<filter>\nelement is used \nto define an SVG filter. The\n<filter>\nelement has a required\nid\nattribute which \nidentifies the filter. The graphic/image then points to the filter to use.\nThen, inside the\n<filter>\nelement, we \nput one or more filter effects to use on the graphic (see table below for list of  \nfilter effects elements).\nQuick Example\nHere we use the\n<feGaussianBlur>\nfilter to \nblur an SVG graphic:\nSorry, your browser does not support inline SVG.\nHere is the SVG code:\nExample\n<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter \n  id=\"f1\" x=\"0\" y=\"0\">\n<feGaussianBlur in=\"SourceGraphic\" \n  stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"red\" filter=\"url(#f1)\" />\n</svg>\n\nSVG Filter Effects Elements\nThe available filters in SVG are:\nName\nDescription\n<feBlend>\nCombines two graphics together by a certain blending mode\n<feColorMatrix>\nChanges colors based on a transformation matrix\n<feComponentTransfer>\nPerforms component-wise remapping of data for each pixel. Can adjust \n    brightness, contrast, color balance, etc\n<feComposite>\nPerforms combination of two input images pixel-wise in image space using \n    a compositing operation\n<feConvolveMatrix>\nApplies a matrix convolution filter effect (this includes blurring, edge \n    detection, sharpening, embossing and beveling)\n<feDiffuseLighting>\nLights a graphic by using the alpha channel as a bump map\n<feDisplacementMap>\nUses pixels values from the graphic from in2 attribute to displace the image from \n    the in attribute\n<feDistantLight>\nSpecifies a distant light source to be used inside a lighting filter \n    primitive: <feDiffuseLighting> or <feSpecularLighting>\n<feDropShadow>\nCreates a drop shadow of the graphic\n<feFlood>\nFills the filter subregion with the color and opacity defined by \n    flood-color and flood-opacity attributes\n<feGaussianBlur>\nBlurs the graphic\n<feImage>\nGets graphic data from an external source and provides the pixel data as \n    output\n<feMerge>\nBlends input graphic layers (applies filter effects concurrently instead \n    of sequentially)\n<feMergeNode>\nTakes the result of another filter to be processed by its parent <feMerge>\n<feMorphology>\nErodes or dilates the graphic (for fattening or thinning effects)\n<feOffset>\nOffsets the input graphic\n<fePointLight>\nSpecifies a light source that allows creating a point light effect\n<feSpecularLighting>\nLights a source graphic by using the alpha channel as a bump map\n<feSpotLight>\nSpecifies a light source that allows creating a spotlight effect\n<feTile>\nFills a target rectangle with a repeated pattern of an input graphic\n<feTurbulence>\nCreates a graphic with the Perlin turbulence function\nTip:\nYou can use multiple filter effects on each SVG element!\nIn the \nthat are possible - and give you an idea of what can be done with SVG!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter \n  id=\"f1\" x=\"0\" y=\"0\">\n<feGaussianBlur in=\"SourceGraphic\" \n  stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"red\" filter=\"url(#f1)\" />\n</svg>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter \n  id=\"f1\" x=\"0\" y=\"0\">\n<feGaussianBlur in=\"SourceGraphic\" \n  stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"red\" filter=\"url(#f1)\" />\n# TODO: Complete this line",
      "solution": "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter \n  id=\"f1\" x=\"0\" y=\"0\">\n<feGaussianBlur in=\"SourceGraphic\" \n  stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"red\" filter=\"url(#f1)\" />\n</svg>"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "620bfe61-7382-47ac-9f8e-2a5ca22d320e",
      "title": "C Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "b59b4dc5-fa8e-4884-b09a-406f3d082959",
      "title": "C Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is SVG\nFilters Introduction\n\nSVG Filters\nSVG filters?",
      "options": [
        "defined within a\n<defs>\nelement",
        "None of the above.",
        "None of the above.",
        "used to add special effects to SVG graphics"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of SVG\nFilters Introduction\n\nSVG Filters\nSVG filters is 'used to add special effects to SVG graphics'."
    },
    {
      "question": "What is All SVG filters?",
      "options": [
        "defined within a\n<defs>\nelement",
        "None of the above.",
        "None of the above.",
        "used to add special effects to SVG graphics"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of All SVG filters is 'defined within a\n<defs>\nelement'."
    }
  ],
  "summary": "This tutorial covers SVGFilters Introduction concepts and techniques. You'll learn how to use SVGFilters Introduction effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SVGFilters Introduction and how to apply it in your projects."
}