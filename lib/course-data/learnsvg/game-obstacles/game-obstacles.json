{
  "id": "440fabb0-e9c4-4860-90da-45dcba493741",
  "title": "Game Obstacles",
  "slug": "game-obstacles",
  "metadata": {
    "description": "Learn about Game Obstacles with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "mygamearea",
      "canvas",
      "mygamepiece",
      "height",
      "myobstacles",
      "update",
      "width",
      "component",
      "updategamearea"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "Game Obstacles"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Game Obstacles",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Push the buttons to move the red square:\nUP\nLEFT\nRIGHT\nDOWN\nAdd Some Obstacles\nNow we want to add some obstacles to our game.\nAdd a new component to the gaming area. Make it green, 10px wide, 200px high, \nand place it 300px to the right and 120px down.\nAlso update the obstacle component in every frame:\nExample\nvar myGamePiece;\nvar myObstacle;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyObstacle = new component(10, 200, \"green\", 300, 120);\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\nHit The Obstacle = Game Over\nIn the example above, nothing happens when you hit the obstacle. In a game, \nthat is not very satisfying.\nHow do we know if our red square hits the obstacle?\nCreate a new method in the component constructor, that checks if the \ncomponent crashes with another component. This method should be called every \ntime the frames updates, 50 times per second.\nAlso add a\nstop()\nmethod to the\nmyGameArea\nobject, \nwhich clears the 20 milliseconds interval.\nExample\nvar myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n,\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\nthis.crashWith = function(otherobj) {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar otherleft = otherobj.x;\nvar otherright = otherobj.x + (otherobj.width);\nvar othertop = otherobj.y;\nvar otherbottom = otherobj.y + (otherobj.height);\nvar crash = true;\nif ((mybottom < othertop) ||\n(mytop > otherbottom) ||\n(myright < otherleft) ||\n(myleft > otherright)) {\ncrash = false;\n}\nreturn crash;\n}\n}\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}\n\nMoving Obstacle\nThe obstacle is of no danger when it is static, so we want it to move.\nChange the property value of\nmyObstacle.x\nat \nevery update:\nExample\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.x += -1;\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}\n\nMultiple Obstacles\nHow about adding multiple obstacles?\nFor that we need a property for counting frames, and a method for execute something at a given frame rate.\nExample\nvar myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.frameNo = 0;\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n},\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction everyinterval(n) {\nif ((myGameArea.frameNo / n) % 1 == 0) {return true;}\nreturn false;\n}\nThe everyinterval function returns true if the current framenumber \ncorresponds with the given interval.\nTo define multiple obstacles, first declare the obstacle variable as an \narray.\nSecond, we need to make some changes in the updateGameArea function.\nExample\nvar myGamePiece;\nvar myObstacles = [];\nfunction updateGameArea() {\nvar x, y;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\ny = myGameArea.canvas.height - 200\nmyObstacles.push(new component(10, 200, \"green\", x, y));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\nIn the\nupdateGameArea\nfunction we must loop through every obstacle to see if \nthere is a crash. If there is a crash, the\nupdateGameArea\nfunction \nwill stop, and no more drawing is done.\nThe\nupdateGameArea\nfunction counts frames and adds an obstacle for every \n150th \nframe.\nObstacles of Random Size\nTo make the game a bit more difficult, and fun, we will send in obstacles of random sizes, so that the red square must move up and down to \nnot crash.\nExample\nfunction updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var myGamePiece;\nvar myObstacle;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyObstacle = new component(10, 200, \"green\", 300, 120);\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n,\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\nthis.crashWith = function(otherobj) {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar otherleft = otherobj.x;\nvar otherright = otherobj.x + (otherobj.width);\nvar othertop = otherobj.y;\nvar otherbottom = otherobj.y + (otherobj.height);\nvar crash = true;\nif ((mybottom < othertop) ||\n(mytop > otherbottom) ||\n(myright < otherleft) ||\n(myleft > otherright)) {\ncrash = false;\n}\nreturn crash;\n}\n}\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.x += -1;\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.frameNo = 0;\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n},\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction everyinterval(n) {\nif ((myGameArea.frameNo / n) % 1 == 0) {return true;}\nreturn false;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "var myGamePiece;\nvar myObstacles = [];\nfunction updateGameArea() {\nvar x, y;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\ny = myGameArea.canvas.height - 200\nmyObstacles.push(new component(10, 200, \"green\", x, y));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "function updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var myGamePiece;\nvar myObstacle;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyObstacle = new component(10, 200, \"green\", 300, 120);\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyObstacle.update();\n# TODO: Complete this line\nmyGamePiece.update();\n}",
      "solution": "var myGamePiece;\nvar myObstacle;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyObstacle = new component(10, 200, \"green\", 300, 120);\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\n# TODO: Complete this line\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n,\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\nthis.crashWith = function(otherobj) {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar otherleft = otherobj.x;\nvar otherright = otherobj.x + (otherobj.width);\nvar othertop = otherobj.y;\nvar otherbottom = otherobj.y + (otherobj.height);\nvar crash = true;\nif ((mybottom < othertop) ||\n(mytop > otherbottom) ||\n(myright < otherleft) ||\n(myleft > otherright)) {\ncrash = false;\n}\nreturn crash;\n}\n}\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}",
      "solution": "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n,\nstop : function() {\nclearInterval(this.interval);\n}\n}\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\nthis.crashWith = function(otherobj) {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar otherleft = otherobj.x;\nvar otherright = otherobj.x + (otherobj.width);\nvar othertop = otherobj.y;\nvar otherbottom = otherobj.y + (otherobj.height);\nvar crash = true;\nif ((mybottom < othertop) ||\n(mytop > otherbottom) ||\n(myright < otherleft) ||\n(myleft > otherright)) {\ncrash = false;\n}\nreturn crash;\n}\n}\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "3ff7b2d8-1b04-4170-8d97-99743d6fa897",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fbc6fd1e-36fe-442c-9118-2d04a6cf5c88",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "01988a00-8906-4a1d-b9c0-fff09a082c5b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is that?",
      "options": [
        "static",
        "not very satisfying",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of that is 'not very satisfying'."
    },
    {
      "question": "What is Moving Obstacle\nThe obstacle is of no danger when it?",
      "options": [
        "None of the above.",
        "not very satisfying",
        "None of the above.",
        "static"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Moving Obstacle\nThe obstacle is of no danger when it is 'static'."
    }
  ],
  "summary": "This tutorial covers Game Obstacles concepts and techniques. You'll learn how to use Game Obstacles effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Game Obstacles and how to apply it in your projects."
}