{
  "id": "bfee0378-fe24-424c-a6c8-c1ab9ba8f7df",
  "title": "Game Images",
  "slug": "game-images",
  "metadata": {
    "description": "Learn about Game Images with clear explanations and practical examples.",
    "keywords": [
      "image",
      "component",
      "type",
      "mygamepiece",
      "width",
      "background",
      "function",
      "height",
      "speedx",
      "color"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "Game Images"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Game Images",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Push the buttons to move the smiley:\nUP\nLEFT\nRIGHT\nDOWN\nHow to Use Images?\nTo add images on a canvas, the getContext(\"2d\") object has built-in image \nproperties and methods.\nIn our game, to create the gamepiece as an image, use the component \nconstructor, but instead of referring to a color, you must refer to the url of \nthe image. And you must tell the constructor that this component is of type \n\"image\":\nExample\nfunction startGame() {\nmyGamePiece = new component(30, 30,\n\"smiley.gif\"\n, 10, 120,\n\"image\"\n);\nmyGameArea.start();\n}\nIn the component constructor we test if the component is of type \"image\", and \ncreate an image object by using the built-in \"new Image()\" object constructor. \nWhen we are ready to draw the image, we use the drawImage method instead of the fillRect method:\nExample\nfunction component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\") {\nctx.drawImage(this.image,\nthis.x,\nthis.y,\nthis.width, this.height);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n}\n\nChange Images\nYou can change the image whenever you like by changing the\nsrc\nproperty of the\nimage\nobject of your component.\nIf you want to change the smiley everytime it moves, change the image source when the user clicks a button, \nand back to normal when the button is not clicked:\nExample\nfunction move(dir) {\nmyGamePiece.image.src = \"angry.gif\";\nif (dir == \"up\") {myGamePiece.speedY = -1; }\nif (dir == \"down\") {myGamePiece.speedY = 1; }\nif (dir == \"left\") {myGamePiece.speedX = -1; }\nif (dir == \"right\") {myGamePiece.speedX = 1; }\n}\nfunction clearmove() {\nmyGamePiece.image.src = \"smiley.gif\";\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\n}\n\nBackground Images\nAdd a background image to your game area by adding it as a component, and \nalso update the background in every frame:\nExample\nvar myGamePiece;\nvar myBackground;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"smiley.gif\", 10, 120, \"image\");\nmyBackground = new component(656, 270, \"citymarket.jpg\", 0, 0, \"image\");\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\nMoving Background\nChange the background component's\nspeedX\nproperty to make the background move:\nExample\nfunction updateGameArea() {\nmyGameArea.clear();\nmyBackground.speedX = -1;\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\nBackground Loop\nTo make the same background loop forever, we must use a specific technique.\nStart by telling the component constructor that this is a\nbackground\n.\nThe component constructor will then add the image twice, placing the second image \nimmediately after the first image.\nIn the\nnewPos()\nmethod, check if the\nx\nposition of the component has reach \nthe end of the image, if it has, set the\nx\nposition of the component to 0:\nExample\nfunction component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\"\n|| type == \"background\"\n) {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\" || type == \"background\") {\nctx.drawImage(this.image, this.x, this.y, this.width, this.height);\nif (type == \"background\") {\nctx.drawImage(this.image, this.x + this.width, this.y, this.width, this.height);\n}\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\nif (this.type == \"background\") {\nif (this.x == -(this.width)) {\nthis.x = 0;\n}\n}\n}\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function startGame() {\nmyGamePiece = new component(30, 30,\n\"smiley.gif\"\n, 10, 120,\n\"image\"\n);\nmyGameArea.start();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\") {\nctx.drawImage(this.image,\nthis.x,\nthis.y,\nthis.width, this.height);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function move(dir) {\nmyGamePiece.image.src = \"angry.gif\";\nif (dir == \"up\") {myGamePiece.speedY = -1; }\nif (dir == \"down\") {myGamePiece.speedY = 1; }\nif (dir == \"left\") {myGamePiece.speedX = -1; }\nif (dir == \"right\") {myGamePiece.speedX = 1; }\n}\nfunction clearmove() {\nmyGamePiece.image.src = \"smiley.gif\";\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var myGamePiece;\nvar myBackground;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"smiley.gif\", 10, 120, \"image\");\nmyBackground = new component(656, 270, \"citymarket.jpg\", 0, 0, \"image\");\nmyGameArea.start();\n}\nfunction updateGameArea() {\nmyGameArea.clear();\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function updateGameArea() {\nmyGameArea.clear();\nmyBackground.speedX = -1;\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\"\n|| type == \"background\"\n) {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\" || type == \"background\") {\nctx.drawImage(this.image, this.x, this.y, this.width, this.height);\nif (type == \"background\") {\nctx.drawImage(this.image, this.x + this.width, this.y, this.width, this.height);\n}\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\nif (this.type == \"background\") {\nif (this.x == -(this.width)) {\nthis.x = 0;\n}\n}\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function startGame() {\nmyGamePiece = new component(30, 30,\n# TODO: Complete this line\n, 10, 120,\n\"image\"\n);\nmyGameArea.start();\n}",
      "solution": "function startGame() {\nmyGamePiece = new component(30, 30,\n\"smiley.gif\"\n, 10, 120,\n\"image\"\n);\nmyGameArea.start();\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\") {\nctx.drawImage(this.image,\nthis.x,\nthis.y,\nthis.width, this.height);\n# TODO: Complete this line\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n}",
      "solution": "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\") {\nctx.drawImage(this.image,\nthis.x,\nthis.y,\nthis.width, this.height);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "f858ccfe-b407-409a-a007-937c19cbd75d",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6dd5b3c3-8fa0-4ded-af74-139a255707dd",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7d99cdc2-f7a4-4113-91f2-5c8135a6b11d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is And you must tell the constructor that this component?",
      "options": [
        "None of the above.",
        "of type \"image\"",
        "None of the above.",
        "of type \n\"image\":\nExample\nfunction startGame() {\nmyGamePiece = new component(30"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of And you must tell the constructor that this component is 'of type \n\"image\":\nExample\nfunction startGame() {\nmyGamePiece = new component(30'."
    },
    {
      "question": "What is In the component constructor we test if the component?",
      "options": [
        "None of the above.",
        "of type \"image\"",
        "None of the above.",
        "of type \n\"image\":\nExample\nfunction startGame() {\nmyGamePiece = new component(30"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of In the component constructor we test if the component is 'of type \"image\"'."
    }
  ],
  "summary": "This tutorial covers Game Images concepts and techniques. You'll learn how to use Game Images effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Game Images and how to apply it in your projects."
}