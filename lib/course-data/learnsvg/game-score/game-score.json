{
  "id": "29d60d11-ebe3-49f1-b350-3f271f590caa",
  "title": "Game Score",
  "slug": "game-score",
  "metadata": {
    "description": "Learn about Game Score with clear explanations and practical examples.",
    "keywords": [
      "c",
      "component",
      "height",
      "myobstacles",
      "score",
      "mygamearea",
      "text",
      "type",
      "width",
      "mygamepiece",
      "function"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "Game Score"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Game Score",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Push the buttons to move the red square:\nRestart\nUP\nLEFT\nRIGHT\nDOWN\nCount The Score\nThere are many ways to keep the score in a game, we will show you how to \nwrite a score onto the canvas.\nFirst make a score component:\nExample\nvar myGamePiece;\nvar myObstacles = [];\nvar myScore;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 160);\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}\nThe syntax for writing text on a canvas element is different from drawing a rectangle.\nTherefore we must call the component constructor using an additional argument,\ntelling the constructor that this component is of type \"text\".\nIn the component constructor we test if the component is of type \"text\", and use the\nfillText\nmethod instead of the\nfillRect\nmethod:\nExample\nfunction component(width, height, color, x, y\n, type\n) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (this.type == \"text\") {\nctx.font = this.width + \" \" + this.height;\nctx.fillStyle = color;\nctx.fillText(this.text, this.x, this.y);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n...\n}\nAt last we add some code in the updateGameArea function that writes the score \nonto the canvas. We use the\nframeNo\nproperty to count the score:\nExample\nfunction updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].speedX = -1;\nmyObstacles[i].newPos();\nmyObstacles[i].update();\n}\nmyScore.text = \"SCORE: \" + myGameArea.frameNo;\nmyScore.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var myGamePiece;\nvar myObstacles = [];\nvar myScore;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 160);\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function component(width, height, color, x, y\n, type\n) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (this.type == \"text\") {\nctx.font = this.width + \" \" + this.height;\nctx.fillStyle = color;\nctx.fillText(this.text, this.x, this.y);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n...\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].speedX = -1;\nmyObstacles[i].newPos();\nmyObstacles[i].update();\n}\nmyScore.text = \"SCORE: \" + myGameArea.frameNo;\nmyScore.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var myGamePiece;\nvar myObstacles = [];\n# TODO: Complete this line\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 160);\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}",
      "solution": "var myGamePiece;\nvar myObstacles = [];\nvar myScore;\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 160);\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function component(width, height, color, x, y\n, type\n) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (this.type == \"text\") {\nctx.font = this.width + \" \" + this.height;\nctx.fillStyle = color;\nctx.fillText(this.text, this.x, this.y);\n} else {\nctx.fillStyle = color;\n# TODO: Complete this line\n}\n}\n...\n}",
      "solution": "function component(width, height, color, x, y\n, type\n) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (this.type == \"text\") {\nctx.font = this.width + \" \" + this.height;\nctx.fillStyle = color;\nctx.fillText(this.text, this.x, this.y);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n...\n}"
    }
  ],
  "related_topics": [
    {
      "id": "76111b63-89b3-4a65-90c8-40057b53a53d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c95facac-2b50-4e63-87d5-213ede3e1751",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "50240450-0982-41e3-88f8-9ef7b6cf7f92",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Restart\nUP\nLEFT\nRIGHT\nDOWN\nCount The Score\nThere?",
      "options": [
        "None of the above.",
        "different from drawing a rectangle",
        "many ways to keep the score in a game",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Restart\nUP\nLEFT\nRIGHT\nDOWN\nCount The Score\nThere is 'many ways to keep the score in a game'."
    },
    {
      "question": "What is The syntax for writing text on a canvas element?",
      "options": [
        "different from drawing a rectangle",
        "None of the above.",
        "many ways to keep the score in a game",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The syntax for writing text on a canvas element is 'different from drawing a rectangle'."
    }
  ],
  "summary": "This tutorial covers Game Score concepts and techniques. You'll learn how to use Game Score effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Game Score and how to apply it in your projects."
}