{
  "id": "7ea307e1-4883-490d-af62-a9c72377439a",
  "title": "Game Bouncing",
  "slug": "game-bouncing",
  "metadata": {
    "description": "Learn about Game Bouncing with clear explanations and practical examples.",
    "keywords": [
      "c",
      "bounce",
      "height",
      "gravityspeed",
      "function",
      "width",
      "property",
      "component",
      "gravity",
      "type",
      "rockbottom"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "Game Bouncing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Game Bouncing",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This red square bounces when it hits the floor:\nRESTART\nBouncing\nAnother functionallity we want to add is the\nbounce\nproperty.\nThe\nbounce\nproperty indicates if the component will bounce back when gravity makes it fall down to the ground.\nThe bounce property value must be a number. 0 is no bounce at all, and 1 will make the component bounce all the way backto where it start falling.\nExample\nfunction component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.1;\nthis.gravitySpeed = 0;\nthis.bounce = 0.6;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = this.gamearea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\nthis.gravitySpeed = -(this.gravitySpeed * this.bounce);\n}\n}\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.1;\nthis.gravitySpeed = 0;\nthis.bounce = 0.6;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = this.gamearea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\nthis.gravitySpeed = -(this.gravitySpeed * this.bounce);\n}\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.1;\nthis.gravitySpeed = 0;\nthis.bounce = 0.6;\nthis.update = function() {\n# TODO: Complete this line\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = this.gamearea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\nthis.gravitySpeed = -(this.gravitySpeed * this.bounce);\n}\n}\n}",
      "solution": "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.1;\nthis.gravitySpeed = 0;\nthis.bounce = 0.6;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = this.gamearea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\nthis.gravitySpeed = -(this.gravitySpeed * this.bounce);\n}\n}\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b4c73144-ffee-43bd-ace9-d609900f2937",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4f1f5f07-1233-4ff6-af87-18feeb7ec064",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "50702961-d1fb-40dd-a0b8-2e2e820b25da",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is RESTART\nBouncing\nAnother functionallity we want to add?",
      "options": [
        "the\nbounce\nproperty",
        "None of the above.",
        "Not a RESTART\nBouncing\nAnother functionallity we want to add.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of RESTART\nBouncing\nAnother functionallity we want to add is 'the\nbounce\nproperty'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Game Bouncing concepts and techniques. You'll learn how to use Game Bouncing effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Game Bouncing and how to apply it in your projects."
}