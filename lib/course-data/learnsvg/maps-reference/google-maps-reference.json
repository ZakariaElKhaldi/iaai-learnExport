{
  "id": "a58c1cf7-da55-4454-9efc-a52754b0e24a",
  "title": "Google Maps Reference",
  "slug": "google-maps-reference",
  "metadata": {
    "description": "Learn about Google Maps Reference with clear explanations and practical examples.",
    "keywords": [
      "c",
      "none",
      "fired",
      "options",
      "rendering",
      "control",
      "returns",
      "user",
      "changes",
      "marker",
      "creates"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSVG",
    "subcategory": "Maps Reference"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Google Maps Reference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Map() Constructor\nExample\nCreate a Google Map:\nvar map = new google.maps.Map(mapCanvas, mapOptions);\nDefinition and Usage\nThe Map() constructor creates a new map inside a specified HTML element (typically a <div> element).\nSyntax\nnew google.maps.Map(\nHTMLElement\n,\nMapOptions\n)\nParameter Values\nParameter\nDescription\nHTMLElement\nSpecifies in what HTML element to put the map\nMapOptions\nA MapOptions object that holds the map initialization variables/options\nMethods of Map()\nMethod\nReturn Value\nDescription\nfitBounds(\nLatLngBounds\n)\nNone\nSets the viewport to contain the given bounds\ngetBounds()\nLatLng,LatLng\nReturns the south-west latitude/longitude and the north-east latitude/longitude of the current viewport\ngetCenter()\nLatLng\nReturns the lat/lng of the center of the map\ngetDiv()\nNode\nReturns a DOM object that contains the map\ngetHeading()\nnumber\nReturns the compass heading of aerial imagery (for SATELLITE and HYBRID map types)\ngetMapTypeId()\nHYBRID\nROADMAP\nSATELLITE\nTERRAIN\nReturns the current map type\ngetProjection()\nProjection\nReturns the current Projection\ngetStreetView()\nStreetViewPanorama\nReturns the default StreetViewPanorama bound to the map\ngetTilt()\nnumber\nReturns the angle of incidence for aerial imagery in degrees (for SATELLITE and HYBRID map types)\ngetZoom()\nnumber\nReturns the current zoom level of the map\npanBy(\nxnumber,ynumber\n)\nNone\nChanges the center of the map by the given distance in pixels\npanTo(\nLatLng\n)\nNone\nChanges the center of the map to the given LatLng\npanToBounds(\nLatLngBounds\n)\nNone\nPans the map by the minimum amount necessary to contain the given LatLngBounds\nsetCenter(\nLatLng\n)\nNone\nSets the lat/lng of the center of the map\nsetHeading(\nnumber\n)\nNone\nSets the compass heading for aerial imagery measured in degrees from cardinal direction North\nsetMapTypeId(\nMapTypeId\n)\nNone\nSets the map type to display\nsetOptions(\nMapOptions\n)\nNone\nsetStreetView(\nStreetViewPanorama\n)\nNone\nBinds a StreetViewPanorama to the map\nsetTilt(\nnumber\n)\nNone\nSets the angle of incidence for aerial imagery in degrees (for SATELLITE and HYBRID map types)\nsetZoom(\nnumber\n)\nNone\nSets the zoom level of the map\nProperties of Map()\nProperty\nType\nDescription\ncontrols\nArray.<MVCArray.<Node>>\nAdditional controls to attach to the map\nmapTypes\nMapTypeRegistry\nA registry of MapType instances by string ID\noverlayMapTypes\nMVCArray.<MapType>\nAdditional map types to overlay\nEvents of Map()\nEvent\nArguments\nDescription\nbounds_changed\nNone\nFired when the viewport bounds have changed\ncenter_changed\nNone\nFired when the map center property changes\nclick\nMouseEvent\nFired when the user clicks on the map\ndblclick\nMouseEvent\nFired when the user double-clicks on the map\ndrag\nNone\nFired repeatedly while the user drags the map\ndragend\nNone\nFired when the user stops dragging the map\ndragstart\nNone\nFired when the user starts dragging the map\nheading_changed\nNone\nFired when the map heading property changes\nidle\nNone\nFired when the map becomes idle after panning or zooming\nmaptypeid_changed\nNone\nFired when the mapTypeId property changes\nmousemove\nMouseEvent\nFired whenever the user's mouse moves over the map container\nmouseout\nMouseEvent\nFired when the user's mouse exits the map container\nmouseover\nMouseEvent\nFired when the user's mouse enters the map container\nprojection_changed\nNone\nFired when the projection has changed\nresize\nNone\nFired when the map (div) changes size\nrightclick\nMouseEvent\nFired when the user right-clicks on the map\ntilesloaded\nNone\nFired when the visible tiles have finished loading\ntilt_changed\nNone\nFired when the map tilt property changes\nzoom_changed\nNone\nFired when the map zoom property changes\nOverlays\nConstructor/Object\nDescription\nMarker\nCreates a marker. (Note that the position must be set for the marker to display)\nMarkerOptions\nOptions for rendering the marker\nMarkerImage\nA structure representing a Marker icon or shadow image\nMarkerShape\nDefines the marker shape to use in determination of a marker's clickable region (type and coord)\nAnimation\nSpecifies animations that can be played on a marker (bounce or drop)\nInfoWindow\nCreates an info window\nInfoWindowOptions\nOptions for rendering the info window\nPolyline\nCreates a polyline (contains path and stroke styles)\nPolylineOptions\nOptions for rendering the polyline\nPolygon\nCreates a polygon (contains path and stroke+fill styles)\nPolygonOptions\nOptions for rendering the polygon\nRectangle\nCreates a rectangle (contains bounds and stroke+fill styles)\nRectangleOptions\nOptions for rendering the rectangle\nCircle\nCreates a circle (contains center+radius and stroke+fill styles)\nCircleOptions\nOptions for rendering the circle\nGroundOverlay\nGroundOverlayOptions\nOverlayView\nMapPanes\nMapCanvasProjection\nEvents\nConstructor/Object\nDescription\nMapsEventListener\nIt has no methods and no constructor. Its instances are returned from addListener(), addDomListener() and are eventually passed back to removeListener()\nevent\nAdds/Removes/Trigger event listeners\nMouseEvent\nReturned from various mouse events on the map and overlays\nControls\nConstructor/Object\nDescription\nMapTypeControlOptions\nHolds options for modifying a control (position and style)\nMapTypeControlStyle\nSpecifies what kind of map control to display (Drop-down menu or buttons)\nOverviewMapControlOptions\nOptions for rendering of the overview map control (opened or collapsed)\nPanControlOptions\nOptions for rendering of the pan control (position)\nRotateControlOptions\nOptions for rendering of the rotate control (position)\nScaleControlOptions\nOptions for rendering of the scale control (position and style)\nScaleControlStyle\nSpecifies what kind of scale control to display\nStreetViewControlOptions\nOptions for rendering of the street view pegman control (position)\nZoomControlOptions\nOptions for rendering of the zoom control (position and style)\nZoomControlStyle\nSpecifies what kind of zoom control to display (large or small)\nControlPosition\nSpecifies the placement of controls on the map\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var map = new google.maps.Map(mapCanvas, mapOptions);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "new google.maps.Map(\nHTMLElement\n,\nMapOptions\n)",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var map = new google.maps.Map(mapCanvas, mapOptions);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "new google.maps.Map(\nHTMLElement\n# TODO: Complete this line\nMapOptions\n)",
      "solution": "new google.maps.Map(\nHTMLElement\n,\nMapOptions\n)"
    }
  ],
  "related_topics": [
    {
      "id": "bd1b7991-5c5c-4999-91f4-491b4fd5cf76",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "efb09cbd-47ee-4e07-bd07-8a11e22456e8",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b26a729a-93cf-418b-b6f7-a37d70dfd35b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Its instances?",
      "options": [
        "None of the above.",
        "None of the above.",
        "None of the above.",
        "returned from addListener()"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Its instances is 'returned from addListener()'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Google Maps Reference concepts and techniques. You'll learn how to use Google Maps Reference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Google Maps Reference and how to apply it in your projects."
}