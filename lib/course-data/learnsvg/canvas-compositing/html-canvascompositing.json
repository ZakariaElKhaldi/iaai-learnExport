{
  "id": "89e3d115-6394-43a8-ab3d-8727924d94fc",
  "title": "HTML CanvasCompositing",
  "slug": "html-canvascompositing",
  "metadata": {
    "description": "Learn about HTML CanvasCompositing with clear explanations and practical examples.",
    "keywords": [
      "c",
      "canvas",
      "globalcompositeoperation",
      "draw",
      "value",
      "overlapping",
      "rectangles",
      "script",
      "const",
      "fillstyle",
      "fillrect"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 7,
    "category": "LearnSVG",
    "subcategory": "Canvas Compositing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "HTML Canvas\nCompositing",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The globalCompositeOperation Property\nThe\nglobalCompositeOperation\nproperty sets \nthe type of compositing operation to apply when drawing new shapes. In the\n\ndecide what to do with new shades with the\nglobalCompositeOperation\nproperty.\nLet's look at some examples!\nThe \"source-over\" Value\nThe \"source-over\" value is default. It will draw new shapes on top of the existing content.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"source-over\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"source-out\" Value\nThe \"source-out\" value will draw new shapes only where it does not overlap the existing content.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"source-out\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-out\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"destination-over\" Value\nThe \"destination-over\" value will draw new shapes behind the existing content.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"destination-over\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"destination-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"destination-atop\" Value\nThe \"destination-atop\" value will keep the existing content where it overlaps the new shape. The \nnew shape is drawn behind the existing content.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"destination-atop\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"destination-atop\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"lighter\" Value\nThe \"lighter\" value will result in a brighter color where both shapes overlap.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"lighter\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"lighter\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"copy\" Value\nThe \"copy\" value will result in that only the new shape is shown.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"copy\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"copy\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"xor\" Value\nThe \"xor\" value will result in that shapes are transparent where both overlap, and drawn normal \neverywhere else.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"xor\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"xor\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"multiply\" Value\nThe \"multiply\" value will result in a darker picture. Multiplies \nthe pixels of the top layer with the pixels of the bottom layer.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"multiply\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"multiply\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"screen\" Value\nThe \"screen\" value will result in a lighter picture. Invert the pixels, \nthen multiply, and inverted again (opposite of \"multiply\").\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"screen\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"screen\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"darken\" Value\nThe \"darken\" value will result in a darker color where both shapes \noverlap (keeps the darkest pixels of both layers).\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"darken\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"darken\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"lighten\" Value\nThe \"lighten\" value will result in a lighter color where both shapes \noverlap (keeps the lightest pixels of both layers).\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"lighten\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"lighten\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"hue\" Value\nThe \"hue\" value adopts the hue of the top layer and preserves the luma and chroma \nof the bottom layer.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"hue\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"hue\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe \"luminosity\" Value\nThe \"luminosity\" value adopts the luma of the top layer and preserves the hue and chroma of the bottom layer.\nExample\nSet\nglobalCompositeOperation\nproperty to \n\"luminosity\". Then draw two overlapping rectangles:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"luminosity\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>\n\nThe globalCompositeOperation Property Values\nThe\nglobalCompositeOperation\nproperty can have the following values:\nValue\nDescription\nsource-over\nDefault. Draws new shapes on top of the existing content\nsource-in\nDraws new shapes only where both the new shape and the existing content overlap. Everything else is made transparent\nsource-out\nDraws new shapes only where it does not overlap the existing content\nsource-atop\nDraws new shapes only where it does overlap the existing content\ndestination-over\nDraws new shapes behind the existing content\ndestination-in\nKeeps the existing content where both the new shape and \n    existing content overlap. Everything else is made transparent\ndestination-out\nKeeps the existing content where it does not overlap the new shape\ndestination-atop\nKeeps the existing content where it overlaps the new shape. The \n    new shape is drawn behind the existing content\nlighter\nResult in a brighter color where both shapes overlap\ncopy\nShows only the new shape\nxor\nShapes are transparent where both overlap and drawn normal \n    everywhere else\nmultiply\nMultiplies the pixels of the top layer with the pixels \n    of the bottom layer. A darker picture is the result\nscreen\nInvert the pixels, then multiply, and invert again. A lighter \n    picture is the result (opposite of \"multiply\")\noverlay\nA combination of multiply and screen. Dark parts of base layer \n    is darker, and light parts is lighter\ndarken\nKeeps the darkest pixels of both layers\nlighten\nKeeps the lightest pixels of both layers\ncolor-dodge\nDivides the bottom layer by the inverted top layer\ncolor-burn\nDivides the inverted bottom layer by the top layer, and then inverts the \n    result\nhard-light\nLike \"overlay\", but instead with \n    the top layer and bottom layer swapped\nsoft-light\nA softer version of \"hard-light\"\ndifference\nSubtracts the bottom layer from the top layer - or the other way round - \n    to always get a positive value\nexclusion\nLike \"difference\", but with lower contrast\nhue\nAdopts the hue of the top layer and preserves the luma and chroma of the \n    bottom layer\nsaturation\nAdopts the chroma of the top layer and preserves the luma and hue of the \n    bottom layer\ncolor\nAdopts the hue and chroma of the top layer and preserves the luma of the \n    bottom layer\nluminosity\nAdopts the luma of the top layer and preserves the hue and chroma of the \n    bottom layer\nSee Also:\n' Full Canvas Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-out\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"destination-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"destination-atop\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"lighter\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"copy\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"xor\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"multiply\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"screen\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"darken\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"lighten\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"hue\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"luminosity\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n# TODO: Complete this line\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "solution": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-over\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-out\";\n# TODO: Complete this line\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
      "solution": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.globalCompositeOperation = \"source-out\";\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \n  \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>"
    }
  ],
  "related_topics": [
    {
      "id": "551cdbdb-91d7-4cd2-8080-709e9c65119f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8f90bb14-4c58-42b3-bfc2-1a0e9ec7a05f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "069dd925-5639-4bb1-b987-a070948184c4",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is value?",
      "options": [
        "default",
        "None of the above.",
        "drawn behind the existing content",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of value is 'default'."
    },
    {
      "question": "What is The \nnew shape?",
      "options": [
        "drawn behind the existing content",
        "default",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The \nnew shape is 'drawn behind the existing content'."
    }
  ],
  "summary": "This tutorial covers HTML CanvasCompositing concepts and techniques. You'll learn how to use HTML CanvasCompositing effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of HTML CanvasCompositing and how to apply it in your projects."
}