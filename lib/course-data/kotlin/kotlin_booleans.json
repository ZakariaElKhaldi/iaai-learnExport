{
  "title": "Kotlin Booleans",
  "url": "https://www.w3schools.com/kotlin/kotlin_booleans.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Kotlin Booleans",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Kotlin Booleans",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Very often, in programming, you will need a data type that can only have one of two values, like:",
      "html": "<p>Very often, in programming, you will need a data type that can only have one of two values, like:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For this, Kotlin has a Boolean data type, which can take the values true or false .",
      "html": "<p>For this, Kotlin has a <code>Boolean</code> data type, which can take the values <code>true</code> or <code>false</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Boolean Values",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A boolean type can be declared with the Boolean keyword and can only take the values true or false :",
      "html": "<p>A boolean type can be declared with the <code>Boolean</code> keyword and can only take the values <code>true</code> or <code>false</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nisKotlinFun\n:\nBoolean\n=\n\ntrue\n\n\nval\nisFishTasty\n:\nBoolean\n=\n\nfalse\n\n\nprintln\n(\nisKotlinFun\n)\n\n// Outputs true\n\n\nprintln\n(\nisFishTasty\n)\n\n// Outputs false",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> isKotlinFun<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword keyword-val\">val</span> isFishTasty<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>isKotlinFun<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs true</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>isFishTasty<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs false </span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just like you have learned with other data types in the previous chapters, the example above can also be written without specifying the type, as Kotlin is smart enough to understand that the variables are Booleans:",
      "html": "<p>Just like you have learned with other data types in the previous chapters, the example above can also be written without specifying the type, as Kotlin is smart enough to understand that the variables are Booleans:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans_without",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nisKotlinFun\n=\n\ntrue\n\n\nval\nisFishTasty\n=\n\nfalse\n\n\nprintln\n(\nisKotlinFun\n)\n\n// Outputs true\n\n\nprintln\n(\nisFishTasty\n)\n\n// Outputs false",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> isKotlinFun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword keyword-val\">val</span> isFishTasty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>isKotlinFun<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs true</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>isFishTasty<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs false </span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans_without",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Boolean Expression",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Boolean expression returns a Boolean value: true or false .",
      "html": "<p>A Boolean expression <strong>returns </strong>a Boolean value: <code>true</code> or <code>false</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can use a comparison operator, such as the greater than ( > ) operator to find out if an expression (or a variable) is true:",
      "html": "<p>You can use a comparison operator, such as the <strong>greater than</strong> (<code>&gt;</code>) operator to find out if an expression (or a variable) is true:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans1",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nx\n=\n\n10\n\n\nval\ny\n=\n\n9\nprintln\n(\nx\n>\ny\n)\n\n// Returns true, because 10 is greater than 9",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword keyword-val\">val</span> y <span class=\"token operator\">=</span> <span class=\"token function\">9<br/>println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns true, because 10 is greater than 9</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans1",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Or even easier:",
      "html": "<p>Or even easier:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "println\n(\n10\n\n>\n\n9\n)\n\n// Returns true, because 10 is greater than 9",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns true, because 10 is greater than 9</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the examples below, we use the equal to ( == ) operator to evaluate an expression:",
      "html": "<p>In the examples below, we use the <strong>equal to</strong> (<code>==</code>) operator to evaluate an expression:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans3",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nx\n=\n\n10\n;\n\n\nprintln\n(\nx\n==\n\n10\n)\n;\n\n// Returns true, because the value of x is equal to 10",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns true, because the value of x is equal to 10</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans3",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans4",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "println\n(\n10\n\n==\n\n15\n)\n;\n\n// Returns false, because 10 is not equal to 15",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns false, because 10 is not equal to 15</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_booleans4",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Boolean value of an expression is the basis for all Kotlin comparisons and conditions.",
      "html": "<p>The Boolean value of an expression is the basis for all Kotlin comparisons and conditions.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You will learn more about conditions in the next chapter.",
      "html": "<p>You will learn more about conditions in the next chapter.</p>"
    }
  ]
}