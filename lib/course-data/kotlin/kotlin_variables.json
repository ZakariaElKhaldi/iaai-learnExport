{
  "title": "Kotlin Variables",
  "url": "https://www.w3schools.com/kotlin/kotlin_variables.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Kotlin Variables",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Kotlin Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Variables are containers for storing data values.",
      "html": "<p>Variables are containers for storing data values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a variable, use var or val , and assign a value to it with the equal sign ( = ):",
      "html": "<p>To create a variable, use <code>var</code> or <code>val</code>, and assign a value to it with the equal sign (<code>=</code>):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\n\nvariableName\n\n=\n\nvalue\n\n\nval\n\nvariableName\n\n=\n\nvalue",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> <em>variableName</em> <span class=\"token operator\">=</span> <em>value</em>\n<span class=\"token keyword keyword-val\">val</span> <em>variableName</em> <span class=\"token operator\">=</span> <em>value</em></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables1",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n=\n\n\"John\"\n\n\nval\nbirthyear\n=\n\n1975\n\n\n\nprintln\n(\nname\n)\n\n// Print the value of name\n\n\nprintln\n(\nbirthyear\n)\n\n// Print the value of birthyear",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token keyword keyword-val\">val</span> birthyear <span class=\"token operator\">=</span> <span class=\"token number\">1975</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// Print the value of name</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>birthyear<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// Print the value of birthyear</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables1",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The difference between var and val is that variables declared with the var keyword can be changed/modified , while val variables cannot .",
      "html": "<p>The difference between <code>var</code> and <code>val</code> is that variables declared \nwith the <code>var</code> keyword \n<strong>can be changed/modified</strong>, while <code>val</code> variables \n<strong>cannot</strong>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Variable Type",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Unlike many other programming languages, variables in Kotlin do not need to be declared with a specified type (like \"String\" for text or \"Int\" for numbers, if you are familiar with those).",
      "html": "<p>Unlike many other programming languages, variables in Kotlin do not need to be declared with a specified \n<em>type</em> (like \"String\" for text or \"Int\" for numbers, if you are familiar with those).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a variable in Kotlin that should store text and another that should store a number, look at the following example:",
      "html": "<p>To create a variable in Kotlin that should store text and another that should store a number, look at the following example:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n=\n\n\"John\"\n\n// String (text)\n\n\nval\nbirthyear\n=\n\n1975\n\n// Int (number)\n\n\n\nprintln\n(\nname\n)\n\n// Print the value of name\n\n\nprintln\n(\nbirthyear\n)\n\n// Print the value of birthyear",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>      <span class=\"token comment\">// String (text)</span>\n<span class=\"token keyword keyword-val\">val</span> birthyear <span class=\"token operator\">=</span> <span class=\"token number\">1975</span>   <span class=\"token comment\">// Int (number)</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// Print the value of name</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>birthyear<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// Print the value of birthyear</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Kotlin is smart enough to understand that \"John\" is a String (text), and that 1975 is an Int (number) variable.",
      "html": "<p>Kotlin is smart enough to understand that <b>\"John\"</b> is a <code>String</code> (text), and that <b>1975</b> is an <code>Int</code> \n(number) variable.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "However, it is possible to specify the type if you insist:",
      "html": "<p>However, it is possible to specify the type if you insist:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n:\nString\n=\n\n\"John\"\n\n// String\n\n\nval\nbirthyear\n:\nInt\n=\n\n1975\n\n// Int\n\n\n\nprintln\n(\nname\n)\n\n\nprintln\n(\nbirthyear\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span> <span class=\"token comment\">// String</span>\n<span class=\"token keyword keyword-val\">val</span> birthyear<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1975</span> <span class=\"token comment\">// Int</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>birthyear<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also declare a variable without assigning the value, and assign the value later. However , this is only possible when you specify the type:",
      "html": "<p>You can also declare a variable without assigning the value, and assign the \nvalue later. <strong>However</strong>, this is only possible when you specify the type:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n:\nString\nname\n=\n\n\"John\"\n\n\nprintln\n(\nname\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name<span class=\"token operator\">:</span> String\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "w3-border-red",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\nname\n=\n\n\"John\"\n\n\nprintln\n(\nname\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white w3-border-red language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Data Types in the next chapter",
          "href": "https://www.w3schools.com/kotlin_data_types.php",
          "title": ""
        }
      ],
      "text": "Note: You will learn more about Data Types in the next chapter .",
      "html": "<p><strong>Note:</strong> You will learn more about <a href=\"kotlin_data_types.php\">Data Types in the next chapter</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Notes on val",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When you create a variable with the val keyword, the value cannot be changed/reassigned.",
      "html": "<p>When you create a variable with the <code>val</code> keyword, the value \n  <strong>cannot</strong> be changed/reassigned.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The following example will generate an error:",
      "html": "<p>The following example will generate an error:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables5",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "w3-border-red",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nname\n=\n\n\"John\"\n\nname\n=\n\n\"Robert\"\n\n// Error (Val cannot be reassigned)\n\n\nprintln\n(\nname\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white w3-border-red language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Robert\"</span></span>  <span class=\"token comment\">// Error (Val cannot be reassigned)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables5",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When using var , you can change the value whenever you want:",
      "html": "<p>When using <code>var</code>, you can change the value whenever you want:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_change",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n=\n\n\"John\"\n\nname\n=\n\n\"Robert\"\n\n\nprintln\n(\nname\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Robert\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_change",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "So When To Use val ?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The val keyword is useful when you want a variable to always store the same value, like PI (3.14159...):",
      "html": "<p>The <code>val</code> keyword is useful when you want a variable to always store the same value, like PI (3.14159...):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_pi",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\npi\n=\n\n3.14159265359\n\n\nprintln\n(\npi\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14159265359</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_pi",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Display Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Like you have seen with the examples above, the println() method is often used to display variables.",
      "html": "<p>Like you have seen with the examples above, the <code>println()</code> method is often used to display variables.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To combine both text and a variable, use the + character:",
      "html": "<p>To combine both text and a variable, use the <code>+</code> character:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nname\n=\n\n\"John\"\n\n\nprintln\n(\n\"Hello \"\n\n+\nname\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello \"</span></span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also use the + character to add a variable to another variable:",
      "html": "<p>You can also use the <code>+</code> character to add a variable to another variable:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nfirstName\n=\n\n\"John \"\n\n\nval\nlastName\n=\n\n\"Doe\"\n\n\nval\nfullName\n=\nfirstName\n+\nlastName\n\nprintln\n(\nfullName\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> firstName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John \"</span></span>\n<span class=\"token keyword keyword-val\">val</span> lastName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Doe\"</span></span>\n<span class=\"token keyword keyword-val\">val</span> fullName <span class=\"token operator\">=</span> firstName <span class=\"token operator\">+</span> lastName\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For numeric values, the + character works as a mathematical operator:",
      "html": "<p>For numeric values, the <code>+</code> character works as \na mathematical operator:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println3",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nx\n=\n\n5\n\n\nval\ny\n=\n\n6\n\n\nprintln\n(\nx\n+\ny\n)\n\n// Print the value of x + y",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword keyword-val\">val</span> y <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Print the value of x + y </span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables_println3",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "From the example above, you can expect:",
      "html": "<p>From the example above, you can expect:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Variable Names",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A variable can have a short name (like x and y) or more descriptive names (age, sum, totalVolume).",
      "html": "<p>A variable can have a short name (like x and y) or more descriptive names (age, sum, totalVolume).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The general rule for Kotlin variables are:",
      "html": "<p>The general rule for Kotlin variables are:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "camelCase variables",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You might notice that we used firstName and lastName as variable names in the example above, instead of firstname and lastname. This is called \"camelCase\", and it is considered as good practice as it makes it easier to read when you have a variable name with different words in it, for example \"myFavoriteFood\", \"rateActionMovies\" etc.",
      "html": "<p>You might notice that we used <strong>firstName</strong> and <strong>lastName</strong> as variable names in the example above, instead of firstname and lastname. This is called \"camelCase\", and it is considered as good practice as it makes it easier to read when you have a variable name with different words in it, for example \"myFavoriteFood\", \"rateActionMovies\" etc.</p>"
    }
  ]
}