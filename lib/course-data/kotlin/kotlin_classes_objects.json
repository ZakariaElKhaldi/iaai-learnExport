{
  "title": "Kotlin Classes and Objects",
  "url": "https://www.w3schools.com/kotlin/kotlin_classes.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Kotlin Classes and Objects",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Kotlin Classes/Objects",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Everything in Kotlin is associated with classes and objects, along with its properties and functions. For example: in real life, a car is an object . The car has properties , such as brand, weight and color, and functions , such as drive and brake.",
      "html": "<p>Everything in Kotlin is associated with classes and objects, along with its properties and \nfunctions. For example: in real life, a car is an <strong>object</strong>. The car has <strong>properties</strong>, such as \nbrand, weight and color, and <strong>\nfunctions</strong>, such as drive and brake. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Class is like an object constructor, or a \"blueprint\" for creating objects.",
      "html": "<p>A Class is like an object constructor, or a \"blueprint\" for creating objects.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create a Class",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a class, use the class keyword, and specify the name of the class:",
      "html": "<p>To create a class, use the <code>class</code> keyword, and specify the name of the class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "class\nCar\n{\n\n\nvar\nbrand\n=\n\n\"\"\n\n\nvar\nmodel\n=\n\n\"\"\n\n\nvar\nyear\n=\n\n0\n\n\n}",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-class\">class</span> Car <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-var\">var</span> brand <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n  <span class=\"token keyword keyword-var\">var</span> model <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n  <span class=\"token keyword keyword-var\">var</span> year <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span> </code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "variable",
          "href": "https://www.w3schools.com/kotlin_variables.php",
          "title": ""
        }
      ],
      "text": "A property is basically a variable that belongs to the class.",
      "html": "<p>A <strong>property </strong>is basically a <a href=\"kotlin_variables.php\"><strong>variable</strong></a> that belongs to the class.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Good to Know: It is considered good practice to start the name of a class with an upper case letter, for better organization.",
      "html": "<p><strong>Good to Know:</strong> It is considered good practice to start the \n  name of a class with an upper case letter, for better organization.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create an Object",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can use the class named Car to create objects.",
      "html": "<p>Now we can use the class named <strong>Car</strong> to create objects.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example below, we create an object of Car called c1 , and then we access the properties of c1 by using the dot syntax ( . ), just like we did to access array and string properties:",
      "html": "<p>In the example below, we create an object of <strong>Car</strong> called\n<strong>c1</strong>, and then we access the properties of <strong>c1</strong> by \nusing the dot syntax (<code>.</code>), just like we did to \naccess array and string properties:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "// Create a c1 object of the Car class\n\n\nval\nc1\n=\n\nCar\n(\n)\n\n\n\n// Access the properties and add some values to it\n\nc1\n.\nbrand\n=\n\n\"Ford\"\n\nc1\n.\nmodel\n=\n\n\"Mustang\"\n\nc1\n.\nyear\n=\n\n1969\n\n\n\nprintln\n(\nc1\n.\nbrand\n)\n\n// Outputs Ford\n\n\nprintln\n(\nc1\n.\nmodel\n)\n\n// Outputs Mustang\n\n\nprintln\n(\nc1\n.\nyear\n)\n\n// Outputs 1969",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token comment\">// Create a c1 object of the Car class</span>\n<span class=\"token keyword keyword-val\">val</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Access the properties and add some values to it</span>\nc1<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Ford\"</span></span>\nc1<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Mustang\"</span></span>\nc1<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs Ford</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs Mustang</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// Outputs 1969 </span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Multiple Objects",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can create multiple objects of one class:",
      "html": "<p>You can create multiple objects of one class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes_multiple",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "val\nc1\n=\n\nCar\n(\n)\n\nc1\n.\nbrand\n=\n\n\"Ford\"\n\nc1\n.\nmodel\n=\n\n\"Mustang\"\n\nc1\n.\nyear\n=\n\n1969\n\n\n\nval\nc2\n=\n\nCar\n(\n)\n\nc2\n.\nbrand\n=\n\n\"BMW\"\n\nc2\n.\nmodel\n=\n\n\"X5\"\n\nc2\n.\nyear\n=\n\n1999\n\n\n\nprintln\n(\nc1\n.\nbrand\n)\n\n// Ford\n\n\nprintln\n(\nc2\n.\nbrand\n)\n\n// BMW",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-val\">val</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc1<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Ford\"</span></span>\nc1<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Mustang\"</span></span>\nc1<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span>\n\n<span class=\"token keyword keyword-val\">val</span> c2 <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc2<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"BMW\"</span></span>\nc2<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"X5\"</span></span>\nc2<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1999</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Ford</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// BMW</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_classes_multiple",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    }
  ]
}