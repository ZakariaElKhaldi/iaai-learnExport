{
  "title": "Kotlin Strings",
  "url": "https://www.w3schools.com/kotlin/kotlin_strings.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Kotlin Strings",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Kotlin Strings",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Strings are used for storing text.",
      "html": "<p>Strings are used for storing text.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A string contains a collection of characters surrounded by double quotes:",
      "html": "<p>A string contains a collection of characters surrounded by double quotes:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ngreeting\n=\n\n\"Hello\"",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello\"</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Java",
          "href": "https://www.w3schools.com/java/default.asp",
          "title": ""
        }
      ],
      "text": "Unlike Java , you do not have to specify that the variable should be a String . Kotlin is smart enough to understand that the greeting variable in the example above is a String because of the double quotes.",
      "html": "<p>Unlike <a href=\"/java/default.asp\">Java</a>, you do not have to specify that the variable should be a <code>String</code>. Kotlin is smart enough to understand that the greeting variable in the example \nabove is a <code>String</code> because of the double quotes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "However, just like with other data types, you can specify the type if you insist:",
      "html": "<p>However, just like with other data types, you can specify the type if you insist:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ngreeting\n:\nString\n=\n\n\"Hello\"",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> greeting<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello\"</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: If you want to create a String without assigning the value (and assign the value later), you must specify the type while declaring the variable:",
      "html": "<p><strong>Note:</strong> If you want to create a <code>String</code> without assigning the value (and assign the value later), you must specify the type while declaring the variable:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\n:\nString\nname\n=\n\n\"John\"\n\n\nprintln\n(\nname\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name<span class=\"token operator\">:</span> String\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables3",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "w3-border-red",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nname\nname\n=\n\n\"John\"\n\n\nprintln\n(\nname\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white w3-border-red language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> name\nname <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_variables4",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "w3-border-red",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Access a String",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To access the characters (elements) of a string, you must refer to the index number inside square brackets.",
      "html": "<p>To access the characters (elements) of a string, you must refer to the <strong>index number</strong> \ninside <strong>square brackets.</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "String indexes start with 0. In the example below, we access the first and third element in txt :",
      "html": "<p>String indexes start with 0. In the example below, we access the first and third element in <code>\ntxt</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_access",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt\n=\n\n\"Hello World\"\n\n\nprintln\n(\ntxt\n[\n0\n]\n)\n\n// first element (H)\n\n\nprintln\n(\ntxt\n[\n2\n]\n)\n\n// third element (l)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello World\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// first element (H)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// third element (l)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_access",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "[0] is the first element. [1] is the second element, [2] is the third element, etc.",
      "html": "<p>[0] is the first element. [1] is the second element, [2] is the third element, etc.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "String Length",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, by writing a dot character ( . ) after the specific string variable. For example, the length of a string can be found with the length property:",
      "html": "<p>A String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, \nby writing a dot character (<code>.</code>) after the specific string variable. For example, the length of a string can be found with the <code>length</code> \nproperty:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_length",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt\n=\n\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n\nprintln\n(\n\"The length of the txt string is: \"\n\n+\ntxt\n.\nlength\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"The length of the txt string is: \"</span></span> <span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_length",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "String Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are many string functions available, for example toUpperCase() and toLowerCase() :",
      "html": "<p>There are many string functions available, for example <code>toUpperCase()</code> and <code>toLowerCase()</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_touppercase",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt\n=\n\n\"Hello World\"\n\n\nprintln\n(\ntxt\n.\ntoUpperCase\n(\n)\n)\n\n// Outputs \"HELLO WORLD\"\n\n\nprintln\n(\ntxt\n.\ntoLowerCase\n(\n)\n)\n\n// Outputs \"hello world\"",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello World\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs \"HELLO WORLD\"</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// Outputs \"hello world\"</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_touppercase",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Comparing Strings",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The compareTo( string ) function compares two strings and returns 0 if both are equal:",
      "html": "<p>The <code>compareTo(<em>string</em>)</code> function \ncompares two strings and returns 0 if both are equal:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_compareto",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt1\n=\n\n\"Hello World\"\nvar\ntxt2\n=\n\n\"Hello World\"\n\n\nprintln\n(\ntxt1\n.\ncompareTo\n(\ntxt2\n)\n)\n\n// Outputs 0 (they are equal)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello World\"</span></span><span class=\"token keyword keyword-var\"><br/>var</span> txt2 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Hello World\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>txt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Outputs 0 (they are equal)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_compareto",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Finding a String in a String",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The indexOf() function returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):",
      "html": "<p>The <code>indexOf()</code> function returns the <strong>index</strong> (the position) \nof the first occurrence of a specified text in a string \n(including whitespace):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_indexof",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt\n=\n\n\"Please locate where 'locate' occurs!\"\n\n\nprintln\n(\ntxt\n.\nindexOf\n(\n\"locate\"\n)\n)\n\n// Outputs 7",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Please locate where 'locate' occurs!\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"locate\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Outputs 7</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_indexof",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Remember that Kotlin counts positions from zero. 0 is the first position in a string, 1 is the second, 2 is the third ...",
      "html": "<p>Remember that Kotlin counts positions from zero.<br/>0 is the first position in a \nstring, 1 is the second, 2 is the third ...</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Quotes Inside a String",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To use quotes inside a string, use single quotes ( ' ):",
      "html": "<p>To use quotes inside a string, use single quotes (<code>'</code>):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_quotes",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\ntxt1\n=\n\n\"It's alright\"\n\n\nvar\ntxt2\n=\n\n\"That's great\"",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> txt1 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"It's alright\"</span></span>\n<span class=\"token keyword keyword-var\">var</span> txt2 <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"That's great\"</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_quotes",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "String Concatenation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The + operator can be used between strings to add them together to make a new string. This is called concatenation :",
      "html": "<p>The <code>+</code> operator can be used between strings to add them together to make a new \nstring. This is called <strong>concatenation</strong>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nfirstName\n=\n\n\"John\"\n\n\nvar\nlastName\n=\n\n\"Doe\"\n\n\nprintln\n(\nfirstName\n+\n\n\" \"\n\n+\nlastName\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token keyword keyword-var\">var</span> lastName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Doe\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\" \"</span></span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note that we have added an empty text (\" \") to create a space between firstName and lastName on print.",
      "html": "<p>Note that we have added an empty text (\" \") to create a space between firstName and lastName on print.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also use the plus() function to concatenate two strings:",
      "html": "<p>You can also use the <code>plus()</code> function to concatenate two strings:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc2",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nfirstName\n=\n\n\"John \"\n\n\nvar\nlastName\n=\n\n\"Doe\"\n\n\nprintln\n(\nfirstName\n.\nplus\n(\nlastName\n)\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John \"</span></span>\n<span class=\"token keyword keyword-var\">var</span> lastName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Doe\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_conc2",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "String Templates/Interpolation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Instead of concatenation, you can also use \"string templates\", which is an easy way to add variables and expressions inside a string.",
      "html": "<p>Instead of concatenation, you can also use \"string templates\", which is an \neasy way to add variables and expressions inside a string.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just refer to the variable with the $ symbol:",
      "html": "<p>Just refer to the variable with the <code>$</code> symbol:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_template",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "var\nfirstName\n=\n\n\"John\"\n\n\nvar\nlastName\n=\n\n\"Doe\"\n\n\nprintln\n(\n\"My name is\n$\nfirstName\n\n$\nlastName\n\"\n)",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token keyword keyword-var\">var</span> firstName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"John\"</span></span>\n<span class=\"token keyword keyword-var\">var</span> lastName <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Doe\"</span></span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">firstName</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">lastName</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_strings_template",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "\"String Templates\" is a popular feature of Kotlin, as it reduces the amount of code. For example, you do not have to specify a whitespace between firstName and lastName, like we did in the concatenation example.",
      "html": "<p>\"String Templates\" is a popular feature of Kotlin, as it reduces the amount \nof code. For example, you do not have to specify a whitespace between firstName \nand lastName, like we did in the concatenation example.</p>"
    }
  ]
}