{
  "title": "Kotlin Inheritance",
  "url": "https://www.w3schools.com/kotlin/kotlin_inheritance.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Kotlin Inheritance",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Kotlin Inheritance (Subclass and Superclass)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In Kotlin, it is possible to inherit class properties and functions from one class to another. We group the \"inheritance concept\" into two categories:",
      "html": "<p>In Kotlin, it is possible to inherit class properties and functions from one class to another. We group the \"inheritance concept\" into two categories:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example below, MyChildClass (subclass) inherits the properties from the MyParentClass class (superclass):",
      "html": "<p>In the example below, <code>MyChildClass</code> (subclass) inherits the \nproperties from the <code>\nMyParentClass</code> class \n(superclass):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_inheritance",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-kotlin"
        ],
        "isNotranslate": true
      },
      "code": "// Superclass\nopen class MyParentClass {\n\n\nval\nx\n=\n\n5\n\n\n}\n\n\n\n// Subclass\n\n\nclass\nMyChildClass\n:\n\nMyParentClass\n(\n)\n\n{\n\n\nfun\n\nmyFunction\n(\n)\n\n{\n\n\nprintln\n(\nx\n)\n\n// x is now inherited from the superclass\n\n\n}\n\n\n}\n\n\n\n// Create an object of MyChildClass and call myFunction\n\n\nfun\n\nmain\n(\n)\n\n{\n\n\nval\nmyObj\n=\n\nMyChildClass\n(\n)\n\nmyObj\n.\nmyFunction\n(\n)\n\n\n}",
      "language": "javascript",
      "code_html": "<pre class=\"notranslate w3-white language-kotlin\" tabindex=\"0\"><code class=\"language-kotlin\"><span class=\"token comment\">// Superclass<br/>open class MyParentClass {</span>\n  <span class=\"token keyword keyword-val\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Subclass</span>\n<span class=\"token keyword keyword-class\">class</span> MyChildClass<span class=\"token operator\">:</span> <span class=\"token function\">MyParentClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-fun\">fun</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// x is now inherited from the superclass</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Create an object of MyChildClass and call myFunction</span>\n<span class=\"token keyword keyword-fun\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-val\">val</span> myObj <span class=\"token operator\">=</span> <span class=\"token function\">MyChildClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  myObj<span class=\"token punctuation\">.</span><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> </code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "tryItLink": "https://www.w3schools.com/kotlin/trykotlin.php?filename=demo_inheritance",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-kotlin"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Example Explained",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use the open keyword in front of the superclass /parent, to make this the class other classes should inherit properties and functions from.",
      "html": "<p>Use the <code>open</code> keyword in front of the <strong>superclass</strong>/parent, \nto make this the class other classes should inherit properties and functions from.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To inherit from a class, specify the name of the subclass , followed by a colon : , and then the name of the superclass .",
      "html": "<p>To inherit from a class, specify the name of the <strong>subclass</strong>, followed by a colon <code>:</code>, \nand then the name of the <strong>superclass</strong>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Why And When To Use \"Inheritance\"?",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "- It is useful for code reusability: reuse properties and functions of an existing class when you create a new class.",
      "html": "<p>- It is useful for code reusability: reuse properties and functions of an existing class when you create a new class.</p>"
    }
  ]
}