{
  "title": "JavaScript ECMAScript 2021",
  "url": "https://www.w3schools.com/js/js_2021.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "ECMAScript 2021",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Version Numbers",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Old ECMAScript versions was named by numbers: ES5 and ES6.",
      "html": "<p>Old ECMAScript versions was named by numbers: ES5 and ES6.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "html": "<p>From 2016, versions are named by year: ES2016, 2018, 2020 ...</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "New Features in ES2021",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Warning",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These features are relatively new.",
      "html": "<p>These features are relatively new.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Older browsers may need an alternative code (Polyfill)",
      "html": "<p>Older browsers may need an alternative code (Polyfill)</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Promise.any()",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_promise_any",
        "syntaxHighlighting": [
          {
            "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\n\u00a0\u00a0myDisplay(x);\n});\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create a Promise",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"King\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create another Promise",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Queen\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Run when any promise fulfill",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "any",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "then",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});",
      "syntax_highlighting": [
        {
          "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\n\u00a0\u00a0myDisplay(x);\n});\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create a Promise",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"King\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create another Promise",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Queen\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Run when any promise fulfill",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "any",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "then",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Promise<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myPromise1 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((resolve, reject) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"King\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create another Promise<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myPromise2 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((resolve, reject) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Queen\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Run when any promise fulfill<br/></span>\nPromise.<span class=\"jspropertycolor\" style=\"color:black\">any</span>([myPromise1, myPromise2]).<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>((x) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0myDisplay(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_promise_any",
      "syntax_highlighting_data": [
        {
          "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\n\u00a0\u00a0myDisplay(x);\n});\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create a Promise",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"King\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create another Promise",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Queen\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Run when any promise fulfill",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "any",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "then",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Promise.any() is supported in all modern browsers since September 2020:",
      "html": "<p><code>Promise.any()</code> is supported in all modern browsers since September 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 85</td>\n<td>Edge 85</td>\n<td>Firefox 79</td>\n<td>Safari 14</td>\n<td>Opera 71</td>\n</tr>\n<tr>\n<td>Aug 2019</td>\n<td>Aug 2020</td>\n<td>Jul 2020</td>\n<td>Sep 2020</td>\n<td>Sep 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript String ReplaceAll()",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ES2021 introduced the string method replaceAll() :",
      "html": "<p>ES2021 introduced the string method <code>replaceAll()</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_replaceall",
        "syntaxHighlighting": [
          {
            "text": "\ntext = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "replaceAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Cats\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Dogs\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "replaceAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"cats\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"dogs\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");",
      "syntax_highlighting": [
        {
          "text": "\ntext = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "replaceAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Cats\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Dogs\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "replaceAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"cats\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"dogs\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\ntext = text.<span class=\"jspropertycolor\" style=\"color:black\">replaceAll</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Cats\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Dogs\"</span>);<br/>\ntext = text.<span class=\"jspropertycolor\" style=\"color:black\">replaceAll</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"cats\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"dogs\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_replaceall",
      "syntax_highlighting_data": [
        {
          "text": "\ntext = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "replaceAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Cats\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Dogs\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "replaceAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"cats\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"dogs\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.",
      "html": "<p>The <code>replaceAll()</code> method allows you to specify a\nregular expression instead of a string to be replaced.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.",
      "html": "<p>If the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_replaceall2",
        "syntaxHighlighting": [
          {
            "text": "\ntext = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "replaceAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "/Cats/g",
            "color": "rgb(238, 153, 0)",
            "class": "jsregexpcolor"
          },
          {
            "text": "\"Dogs\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "replaceAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "/cats/g",
            "color": "rgb(238, 153, 0)",
            "class": "jsregexpcolor"
          },
          {
            "text": "\"dogs\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "text = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");",
      "syntax_highlighting": [
        {
          "text": "\ntext = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "replaceAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "/Cats/g",
          "color": "#e90",
          "class": [
            "jsregexpcolor"
          ]
        },
        {
          "text": "\"Dogs\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "replaceAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "/cats/g",
          "color": "#e90",
          "class": [
            "jsregexpcolor"
          ]
        },
        {
          "text": "\"dogs\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\ntext = text.<span class=\"jspropertycolor\" style=\"color:black\">replaceAll</span>(<span class=\"jsregexpcolor\" style=\"color:#e90\">/Cats/g</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Dogs\"</span>);<br/>\ntext = text.<span class=\"jspropertycolor\" style=\"color:black\">replaceAll</span>(<span class=\"jsregexpcolor\" style=\"color:#e90\">/cats/g</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"dogs\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_replaceall2",
      "syntax_highlighting_data": [
        {
          "text": "\ntext = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "replaceAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "/Cats/g",
          "color": "rgb(238, 153, 0)",
          "class": "jsregexpcolor"
        },
        {
          "text": "\"Dogs\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "replaceAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "/cats/g",
          "color": "rgb(238, 153, 0)",
          "class": "jsregexpcolor"
        },
        {
          "text": "\"dogs\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "ES2020",
          "href": "https://www.w3schools.com/js_2020.asp",
          "title": ""
        }
      ],
      "text": "ES2020 introduced the string method matchAll().",
      "html": "<p><a href=\"js_2020.asp\">ES2020</a> introduced the string method matchAll().</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Numeric Separator (_)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ES2021 intoduced the numeric separator (_) to make numbers more readable:",
      "html": "<p>ES2021 intoduced the numeric separator (_) to make numbers more readable:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator",
        "syntaxHighlighting": [
          {
            "text": "\nconst num = 1_000_000_000;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const num = 1_000_000_000;",
      "syntax_highlighting": [
        {
          "text": "\nconst num = 1_000_000_000;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> num = 1_000_000_000;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator",
      "syntax_highlighting_data": [
        {
          "text": "\nconst num = 1_000_000_000;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numeric separator is only for visual use.",
      "html": "<p>The numeric separator is only for visual use.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator2",
        "syntaxHighlighting": [
          {
            "text": "\nconst num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2); \n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1000000000",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2);",
      "syntax_highlighting": [
        {
          "text": "\nconst num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2); \n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1000000000",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> num1 = 1_000_000_000;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> num2 = <span class=\"jsnumbercolor\" style=\"color:#905\">1000000000</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>(num1 === num2); <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator2",
      "syntax_highlighting_data": [
        {
          "text": "\nconst num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2); \n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1000000000",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numeric separator can be placed anywhere in a number:",
      "html": "<p>The numeric separator can be placed anywhere in a number:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator3",
        "syntaxHighlighting": [
          {
            "text": "\nconst num1 = 1_2_3_4_5;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const num1 = 1_2_3_4_5;",
      "syntax_highlighting": [
        {
          "text": "\nconst num1 = 1_2_3_4_5;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> num1 = 1_2_3_4_5;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numeric_separator3",
      "syntax_highlighting_data": [
        {
          "text": "\nconst num1 = 1_2_3_4_5;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numeric separator is not allowed at the beginning or at the end of a number.",
      "html": "<p>The numeric separator is not allowed at the beginning or at the end of a number.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In JavaScript only variables can start with _.",
      "html": "<p>In JavaScript only variables can start with _.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The numeric separator is supported in all modern browsers since January 2020:",
      "html": "<p>The numeric separator is supported in all modern browsers since January 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 75</td>\n<td>Edge 79</td>\n<td>Firefox 74</td>\n<td>Safari 13.1</td>\n<td>Opera 67</td>\n</tr>\n<tr>\n<td>Jun 2019</td>\n<td>Jan 2020</td>\n<td>Oct 2019</td>\n<td>Sep 2019</td>\n<td>Jun 2019</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    }
  ]
}