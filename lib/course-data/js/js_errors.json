{
  "title": "JavaScript Errors Try Catch Throw",
  "url": "https://www.w3schools.com/js/js_errors.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Errors",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Throw, and Try...Catch...Finally",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The try statement defines a code block to run (to try).",
      "html": "<p>The <code>try</code> statement defines a code block to run (to try).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The catch statement defines a code block to handle any error.",
      "html": "<p>The <code>catch</code> statement defines a code block to handle any error.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The finally statement defines a code block to run regardless of the result.",
      "html": "<p>The <code>finally</code> statement defines a code block to run regardless of the result.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The throw statement defines a custom error.",
      "html": "<p>The <code>throw</code> statement defines a custom error.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Errors Will Happen!",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When executing JavaScript code, different errors can occur.",
      "html": "<p>When executing JavaScript code, different errors can \noccur. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.",
      "html": "<p>Errors can be coding errors made by the programmer, errors due to wrong \ninput, and other unforeseeable things.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_try_catch",
        "syntaxHighlighting": [
          {
            "text": "<p id=\"demo\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " id=\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"demo\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "\ntry {\u00a0 adddlert(\"Welcome guest!\");}catch(err) {\u00a0 \ndocument.getElementById(\"demo\").innerHTML = err.message;}",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Welcome guest!\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "message",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<p id=\"demo\"></p>\n\n<script>\ntry {\u00a0 adddlert(\"Welcome guest!\");}catch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;}</script>",
      "syntax_highlighting": [
        {
          "text": "<p id=\"demo\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " id=\"demo\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"demo\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "\ntry {\u00a0 adddlert(\"Welcome guest!\");}catch(err) {\u00a0 \ndocument.getElementById(\"demo\").innerHTML = err.message;}",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Welcome guest!\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "message",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"demo\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/>\u00a0 adddlert(<span class=\"jsstringcolor\" style=\"color:green\">\"Welcome guest!\"</span>);<br/>}<br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/>\u00a0 \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">message</span>;<br/>}<br/></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_try_catch",
      "syntax_highlighting_data": [
        {
          "text": "<p id=\"demo\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " id=\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"demo\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "\ntry {\u00a0 adddlert(\"Welcome guest!\");}catch(err) {\u00a0 \ndocument.getElementById(\"demo\").innerHTML = err.message;}",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Welcome guest!\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "message",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript catches adddlert as an error, and executes the catch code to handle it.",
      "html": "<p>JavaScript catches <strong>adddlert</strong> as an error, and executes the \ncatch code to \nhandle it.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript try and catch",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The try statement allows you to define a block of code to be tested for errors while it is being executed.",
      "html": "<p>The <code>try</code> statement allows you to define a block of code to be \ntested for errors while it is being executed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.",
      "html": "<p>The <code>catch</code> statement allows you to define a block of code to \nbe executed, if an error occurs in the try block.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The JavaScript statements try and catch come in pairs:",
      "html": "<p>The JavaScript statements <code>try</code> and <code>catch</code> \ncome in pairs:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "w3-code",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "try {\n\n}\n\ncatch() {\n\n}",
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate\">\ntry {<br/>\n  \u00a0 <em>Block of code to try<br/>\n</em>}<br/>\ncatch(<em>err</em>) {<br/>\n  \u00a0 <em>Block of code to handle errors<br/>\n</em>}\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "w3-code",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Throws Errors",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When an error occurs, JavaScript will normally stop and generate an error message.",
      "html": "<p>When an error occurs, JavaScript will \nnormally stop and generate an error message.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The technical term for this is: JavaScript will throw an exception (throw an error) .",
      "html": "<p>The technical term for this is: JavaScript will <strong>throw an \nexception (throw an error)</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript will actually create an Error object with two properties: name and message .",
      "html": "<p>JavaScript will actually create an <strong>Error object</strong> with two properties: \n<strong>name</strong> and <strong>message</strong>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The throw Statement",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The throw statement allows you to create a custom error.",
      "html": "<p>The <code>throw</code> statement allows you to create a custom error.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Technically you can throw an exception (throw an error) .",
      "html": "<p>Technically you can <strong>throw an exception (throw an error)</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The exception can be a JavaScript String , a Number , a Boolean or an Object :",
      "html": "<p>The exception can be a JavaScript <code>String</code>, a <code>Number</code>, a <code>Boolean</code> or an <code>Object</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nthrow \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Too big\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// throw a text",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "500",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// throw a number ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "throw \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number",
      "syntax_highlighting": [
        {
          "text": "\nthrow \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Too big\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// throw a text",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "500",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// throw a number ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Too big\"</span>;\u00a0\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// throw a text<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// throw a number </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nthrow \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Too big\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// throw a text",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "500",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// throw a number ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you use throw together with try and catch , you can control program flow and generate custom error messages.",
      "html": "<p>If you use <code>throw</code> together with <code>try</code> and \n<code>catch</code>, you can control program \nflow and generate custom error messages.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Input Validation Example",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This example examines input. If the value is wrong, an exception (err) is thrown.",
      "html": "<p>This example examines input. If the value is wrong, \nan exception (err) is thrown.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The exception (err) is caught by the catch statement and a custom error message is displayed:",
      "html": "<p>The exception (err) is caught by the catch statement and a custom error message is displayed:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "html",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_throw_error",
        "syntaxHighlighting": [
          {
            "text": "<!DOCTYPE html>",
            "color": "rgb(112, 128, 144)",
            "class": "doctypecolor"
          },
          {
            "text": "<html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<input id=\"demo\" type=\"text\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " id=\"demo\" type=\"text\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"demo\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"text\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<button type=\"button\" \nonclick=\"myFunction()\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " type=\"button\" \nonclick=\"myFunction()\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"button\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"myFunction()\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</button>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<p id=\"p01\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " id=\"p01\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"p01\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</p>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "<script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "function myFunction() {\u00a0\u00a0const message = \ndocument.getElementById(\"p01\");\u00a0\u00a0message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0\u00a0if(x.trim() == \"\") throw \"empty\";\n  \u00a0\u00a0\u00a0 \n if(isNaN(x)) throw \"not a number\";\u00a0\u00a0\u00a0 \n x = Number(x);\u00a0\u00a0\u00a0 if(x < 5) throw \n \"too low\";\u00a0\u00a0\u00a0 if(x > 10) throw \"too \n high\";\u00a0\u00a0}\u00a0\u00a0catch(err) {\u00a0\u00a0\u00a0 message.innerHTML = \n\"Input is \" + err;\u00a0\u00a0}}",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"p01\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "trim",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"empty\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"not a number\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"too low\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"too \n high\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Input is \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</body>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "</html>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<!DOCTYPE html>\n<html>\n<body>\n\n<p>Please input a number between \n5 and 10:</p>\n\n<input id=\"demo\" type=\"text\">\n<button type=\"button\" \nonclick=\"myFunction()\">Test Input</button>\n<p id=\"p01\"></p>\n\n\n<script>function myFunction() {\u00a0\u00a0const message = \ndocument.getElementById(\"p01\");\u00a0\u00a0message.innerHTML = \"\";\nlet x =\ndocument.getElementById(\"demo\").value;\ntry { \u00a0\u00a0\u00a0\u00a0if(x.trim() == \"\") throw \"empty\";\n\nif(isNaN(x)) throw \"not a number\";\nx = Number(x);\u00a0\u00a0\u00a0 if(x < 5) throw\n\"too low\";\u00a0\u00a0\u00a0 if(x > 10) throw \"too\nhigh\";\u00a0\u00a0}\u00a0\u00a0catch(err) {\u00a0\u00a0\u00a0 message.innerHTML =\n\"Input is \" + err;\u00a0\u00a0}}</script>\n\n</body>\n</html>",
      "syntax_highlighting": [
        {
          "text": "<!DOCTYPE html>",
          "color": "slategray",
          "class": [
            "doctypecolor"
          ]
        },
        {
          "text": "<html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<input id=\"demo\" type=\"text\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " id=\"demo\" type=\"text\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"demo\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"text\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<button type=\"button\" \nonclick=\"myFunction()\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " type=\"button\" \nonclick=\"myFunction()\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"button\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"myFunction()\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</button>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<p id=\"p01\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " id=\"p01\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"p01\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</p>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "<script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "function myFunction() {\u00a0\u00a0const message = \ndocument.getElementById(\"p01\");\u00a0\u00a0message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0\u00a0if(x.trim() == \"\") throw \"empty\";\n  \u00a0\u00a0\u00a0 \n if(isNaN(x)) throw \"not a number\";\u00a0\u00a0\u00a0 \n x = Number(x);\u00a0\u00a0\u00a0 if(x < 5) throw \n \"too low\";\u00a0\u00a0\u00a0 if(x > 10) throw \"too \n high\";\u00a0\u00a0}\u00a0\u00a0catch(err) {\u00a0\u00a0\u00a0 message.innerHTML = \n\"Input is \" + err;\u00a0\u00a0}}",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"p01\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "trim",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"empty\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"not a number\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"too low\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"too \n high\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Input is \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</body>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "</html>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"doctypecolor\" style=\"color:slategray\">&lt;!DOCTYPE html&gt;</span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>Please input a number between \n5 and 10:<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"demo\"</span> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"text\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>button<span class=\"attributecolor\" style=\"color:green\"> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"button\"</span> \nonclick<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myFunction()\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>Test Input<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/button<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>p<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"p01\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/p<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> message = \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"p01\"</span>);<br/>\u00a0\u00a0message.<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/>\u00a0 \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <br/>\u00a0\u00a0\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>() == <span class=\"jsstringcolor\" style=\"color:green\">\"\"</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"empty\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(isNaN(x)) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"not a number\"</span>;<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> x = Number(x);<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"too low\"</span>;<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"too \n high\"</span>;<br/>\u00a0\u00a0}<br/>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/>\u00a0\u00a0\u00a0 message.<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = \n<span class=\"jsstringcolor\" style=\"color:green\">\"Input is \"</span> + err;<br/>\u00a0\u00a0}<br/>}<br/></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/body<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/html<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>\n</div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_throw_error",
      "syntax_highlighting_data": [
        {
          "text": "<!DOCTYPE html>",
          "color": "rgb(112, 128, 144)",
          "class": "doctypecolor"
        },
        {
          "text": "<html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<input id=\"demo\" type=\"text\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " id=\"demo\" type=\"text\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"demo\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"text\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<button type=\"button\" \nonclick=\"myFunction()\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " type=\"button\" \nonclick=\"myFunction()\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"button\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"myFunction()\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</button>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<p id=\"p01\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " id=\"p01\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"p01\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</p>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "<script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "function myFunction() {\u00a0\u00a0const message = \ndocument.getElementById(\"p01\");\u00a0\u00a0message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0\u00a0if(x.trim() == \"\") throw \"empty\";\n  \u00a0\u00a0\u00a0 \n if(isNaN(x)) throw \"not a number\";\u00a0\u00a0\u00a0 \n x = Number(x);\u00a0\u00a0\u00a0 if(x < 5) throw \n \"too low\";\u00a0\u00a0\u00a0 if(x > 10) throw \"too \n high\";\u00a0\u00a0}\u00a0\u00a0catch(err) {\u00a0\u00a0\u00a0 message.innerHTML = \n\"Input is \" + err;\u00a0\u00a0}}",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"p01\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "trim",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"empty\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"not a number\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"too low\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"too \n high\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Input is \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</body>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "</html>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "HTML Validation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The code above is just an example.",
      "html": "<p>The code above is just an example.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes:",
      "html": "<p>Modern browsers will often use a combination of JavaScript and built-in HTML \nvalidation, using predefined validation rules defined in HTML attributes: </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"demo\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"number\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"5\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"10\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": "=\"1\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
      "syntax_highlighting": [
        {
          "text": "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"demo\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"number\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"5\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"10\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": "=\"1\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>input<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"demo\"</span> type<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"number\"</span> min<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"5\"</span> max<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"10\"</span> step<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"1\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"demo\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"number\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"5\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"10\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": "=\"1\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can read more about forms validation in a later chapter of this tutorial.",
      "html": "<p>You can read more about forms validation in a later chapter of this tutorial.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The finally Statement",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The finally statement lets you execute code, after try and catch, regardless of the result:",
      "html": "<p>The <code>finally</code> statement lets you execute code, after try and \ncatch, regardless of the result:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ntry {\n  \u00a0 Block of code to try\n}\ncatch(err) {\n  \u00a0 Block of code to handle errors\n}\nfinally {\u00a0 Block of code to be executed regardless of the try / catch result\n} ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "finally",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "try {\nBlock of code to try\n}\ncatch(err) {\nBlock of code to handle errors\n}\nfinally {\u00a0 Block of code to be executed regardless of the try / catch result\n}",
      "syntax_highlighting": [
        {
          "text": "\ntry {\n  \u00a0 Block of code to try\n}\ncatch(err) {\n  \u00a0 Block of code to handle errors\n}\nfinally {\u00a0 Block of code to be executed regardless of the try / catch result\n} ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "finally",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <em>Block of code to <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span><br/>\n</em>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(<em>err</em>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <em>Block of code to handle errors<br/>\n</em>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">finally</span> {<br/>\u00a0 <em>Block of code to be executed regardless of the <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> result<br/>\n</em>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ntry {\n  \u00a0 Block of code to try\n}\ncatch(err) {\n  \u00a0 Block of code to handle errors\n}\nfinally {\u00a0 Block of code to be executed regardless of the try / catch result\n} ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "finally",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_finally_error",
        "syntaxHighlighting": [
          {
            "text": "\n function myFunction() {\u00a0 const message = \ndocument.getElementById(\"p01\");\u00a0 message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0 \nif(x.trim() == \"\") throw \"is empty\";\u00a0\u00a0\u00a0 if(isNaN(x)) \nthrow \"is not a number\";\u00a0\u00a0\u00a0 \n    x = Number(x);\u00a0\u00a0\u00a0 if(x > \n10) throw \"is too high\";\u00a0\u00a0\u00a0 if(x < \n5) throw \"is too low\";\u00a0\u00a0}\u00a0\u00a0catch(err) \n{\u00a0\u00a0\u00a0 message.innerHTML = \"Error: \" + \nerr + \".\";\u00a0\u00a0}\u00a0\u00a0finally {\u00a0\u00a0\u00a0\u00a0document.getElementById(\"demo\").value = \"\";\n  \u00a0\u00a0}} ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"p01\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "trim",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"is empty\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"is not a number\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"is too high\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "throw",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"is too low\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Error: \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\".\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "finally",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "value",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function myFunction() {\u00a0 const message =\ndocument.getElementById(\"p01\");\u00a0 message.innerHTML = \"\";\nlet x =\ndocument.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"is empty\";\u00a0\u00a0\u00a0 if(isNaN(x))\nthrow \"is not a number\";\nx = Number(x);\u00a0\u00a0\u00a0 if(x >\n10) throw \"is too high\";\u00a0\u00a0\u00a0 if(x <\n5) throw \"is too low\";\u00a0\u00a0}\u00a0\u00a0catch(err)\n{\u00a0\u00a0\u00a0 message.innerHTML = \"Error: \" +\nerr + \".\";\u00a0\u00a0}\u00a0\u00a0finally {\u00a0\u00a0\u00a0\u00a0document.getElementById(\"demo\").value = \"\";\n}}",
      "syntax_highlighting": [
        {
          "text": "\n function myFunction() {\u00a0 const message = \ndocument.getElementById(\"p01\");\u00a0 message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0 \nif(x.trim() == \"\") throw \"is empty\";\u00a0\u00a0\u00a0 if(isNaN(x)) \nthrow \"is not a number\";\u00a0\u00a0\u00a0 \n    x = Number(x);\u00a0\u00a0\u00a0 if(x > \n10) throw \"is too high\";\u00a0\u00a0\u00a0 if(x < \n5) throw \"is too low\";\u00a0\u00a0}\u00a0\u00a0catch(err) \n{\u00a0\u00a0\u00a0 message.innerHTML = \"Error: \" + \nerr + \".\";\u00a0\u00a0}\u00a0\u00a0finally {\u00a0\u00a0\u00a0\u00a0document.getElementById(\"demo\").value = \"\";\n  \u00a0\u00a0}} ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"p01\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "trim",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"is empty\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"is not a number\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"is too high\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "throw",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"is too low\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Error: \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\".\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "finally",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "value",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> message = \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"p01\"</span>);<br/>\u00a0 message.<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/>\u00a0 \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <br/>\u00a0\u00a0\u00a0 \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>() == <span class=\"jsstringcolor\" style=\"color:green\">\"\"</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"is empty\"</span>;<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(isNaN(x)) \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"is not a number\"</span>;<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    x = Number(x);<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">\n10</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"is too high\"</span>;<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(x &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">\n5</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jsstringcolor\" style=\"color:green\">\"is too low\"</span>;<br/>\u00a0\u00a0}<br/>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/>\u00a0\u00a0\u00a0 message.<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Error: \"</span> + \nerr + <span class=\"jsstringcolor\" style=\"color:green\">\".\"</span>;<br/>\u00a0\u00a0}<br/>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">finally</span> {<br/>\u00a0\u00a0\u00a0\u00a0document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0\u00a0}<br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_finally_error",
      "syntax_highlighting_data": [
        {
          "text": "\n function myFunction() {\u00a0 const message = \ndocument.getElementById(\"p01\");\u00a0 message.innerHTML = \"\";\n\u00a0\u00a0let x = \ndocument.getElementById(\"demo\").value;\u00a0 \ntry { \u00a0\u00a0\u00a0 \nif(x.trim() == \"\") throw \"is empty\";\u00a0\u00a0\u00a0 if(isNaN(x)) \nthrow \"is not a number\";\u00a0\u00a0\u00a0 \n    x = Number(x);\u00a0\u00a0\u00a0 if(x > \n10) throw \"is too high\";\u00a0\u00a0\u00a0 if(x < \n5) throw \"is too low\";\u00a0\u00a0}\u00a0\u00a0catch(err) \n{\u00a0\u00a0\u00a0 message.innerHTML = \"Error: \" + \nerr + \".\";\u00a0\u00a0}\u00a0\u00a0finally {\u00a0\u00a0\u00a0\u00a0document.getElementById(\"demo\").value = \"\";\n  \u00a0\u00a0}} ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"p01\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "trim",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"is empty\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"is not a number\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"is too high\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "throw",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"is too low\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Error: \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\".\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "finally",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "value",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Error Object",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript has a built in error object that provides error information when an error occurs.",
      "html": "<p>JavaScript has a built in error object that provides error information when \nan error occurs. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The error object provides two useful properties: name and message.",
      "html": "<p>The error object provides two useful properties: name and message.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Error Object Properties",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Error Name Values",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Six different values can be returned by the error name property:",
      "html": "<p>Six different values can be returned by the error name property:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The six different values are described below.",
      "html": "<p>The six different values are described below.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Eval Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An EvalError indicates an error in the eval() function.",
      "html": "<p>An <code>EvalError</code> indicates an error in the eval() function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.",
      "html": "<p>Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Range Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A RangeError is thrown if you use a number that is outside the range of legal values.",
      "html": "<p>A <code>RangeError</code> is thrown if you use a number that is outside \nthe range of legal values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For example: You cannot set the number of significant digits of a number to 500.",
      "html": "<p>For example: You cannot set the number of significant digits of a number to \n500. </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_rangeerror",
        "syntaxHighlighting": [
          {
            "text": "\nlet num = 1;\ntry {\n  \u00a0 num.toPrecision(500);\u00a0\u00a0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "toPrecision",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "500",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// A number cannot have 500 \n significant digits",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let num = 1;\ntry {\nnum.toPrecision(500);\u00a0\u00a0 // A number cannot have 500\nsignificant digits\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "syntax_highlighting": [
        {
          "text": "\nlet num = 1;\ntry {\n  \u00a0 num.toPrecision(500);\u00a0\u00a0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "toPrecision",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "500",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// A number cannot have 500 \n significant digits",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> num = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 num.<span class=\"jspropertycolor\" style=\"color:black\">toPrecision</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">500</span>);\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// A number cannot have 500 \n significant digits<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_rangeerror",
      "syntax_highlighting_data": [
        {
          "text": "\nlet num = 1;\ntry {\n  \u00a0 num.toPrecision(500);\u00a0\u00a0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "toPrecision",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "500",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// A number cannot have 500 \n significant digits",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reference Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A ReferenceError is thrown if you use (reference) a variable that has not been declared:",
      "html": "<p>A <code>ReferenceError</code> is thrown if you use (reference) a variable \nthat has not been declared:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_referenceerror",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = 5;try {\n\u00a0\u00a0x = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// y cannot be used (referenced)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = 5;try {\nx = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "syntax_highlighting": [
        {
          "text": "\nlet x = 5;try {\n\u00a0\u00a0x = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// y cannot be used (referenced)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0x = y + <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// y cannot be used (referenced)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_referenceerror",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = 5;try {\n\u00a0\u00a0x = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\n  \u00a0 document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// y cannot be used (referenced)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Syntax Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A SyntaxError is thrown if you try to evaluate code with a syntax error.",
      "html": "<p>A <code>SyntaxError</code> is thrown if you try to evaluate code with a \nsyntax error.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_syntaxerror",
        "syntaxHighlighting": [
          {
            "text": "\n try {\u00a0 eval(\"alert('Hello)\");\u00a0\u00a0 // \n Missing ' will produce an error}catch(err) {\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;}  ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "eval",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"alert('Hello)\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// \n Missing ' will produce an error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "try {\u00a0 eval(\"alert('Hello)\");\u00a0\u00a0 //\nMissing ' will produce an error}catch(err) {\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;}",
      "syntax_highlighting": [
        {
          "text": "\n try {\u00a0 eval(\"alert('Hello)\");\u00a0\u00a0 // \n Missing ' will produce an error}catch(err) {\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;}  ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "eval",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"alert('Hello)\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// \n Missing ' will produce an error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"alert('Hello)\"</span>);\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// \n Missing ' will produce an error<br/></span>}<br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/>\u00a0\u00a0document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/>}  </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_syntaxerror",
      "syntax_highlighting_data": [
        {
          "text": "\n try {\u00a0 eval(\"alert('Hello)\");\u00a0\u00a0 // \n Missing ' will produce an error}catch(err) {\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;}  ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "eval",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"alert('Hello)\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// \n Missing ' will produce an error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A TypeError is thrown if an operand or argument is incompatible with the type expected by an operator or function.",
      "html": "<p>A <code>TypeError</code> is thrown if an operand or argument \nis incompatible with the type expected by an operator or function.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_typeerror",
        "syntaxHighlighting": [
          {
            "text": "\nlet num = 1;\ntry {\n\u00a0\u00a0num.toUpperCase();\u00a0\u00a0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "toUpperCase",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// You cannot convert a number \n to upper case",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let num = 1;\ntry {\nnum.toUpperCase();\u00a0\u00a0 // You cannot convert a number\nto upper case\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "syntax_highlighting": [
        {
          "text": "\nlet num = 1;\ntry {\n\u00a0\u00a0num.toUpperCase();\u00a0\u00a0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "toUpperCase",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// You cannot convert a number \n to upper case",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> num = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0num.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// You cannot convert a number \n to upper case<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_typeerror",
      "syntax_highlighting_data": [
        {
          "text": "\nlet num = 1;\ntry {\n\u00a0\u00a0num.toUpperCase();\u00a0\u00a0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "toUpperCase",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// You cannot convert a number \n to upper case",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "URI (Uniform Resource Identifier) Error",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A URIError is thrown if you use illegal characters in a URI function:",
      "html": "<p>A <code>URIError</code> is thrown if you use illegal characters in a URI function:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_urierror",
        "syntaxHighlighting": [
          {
            "text": "\ntry {\n  \u00a0 decodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "try",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"%%%\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// You cannot URI decode \n  percent signs",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "catch",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "try {\ndecodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode\npercent signs\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "syntax_highlighting": [
        {
          "text": "\ntry {\n  \u00a0 decodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "try",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"%%%\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// You cannot URI decode \n  percent signs",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "catch",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 decodeURI(<span class=\"jsstringcolor\" style=\"color:green\">\"%%%\"</span>);\u00a0\u00a0 <span class=\"commentcolor\" style=\"color:slategray\">// You cannot URI decode \n  percent signs<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = err.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_error_urierror",
      "syntax_highlighting_data": [
        {
          "text": "\ntry {\n  \u00a0 decodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\n\u00a0\u00a0document.getElementById(\"demo\").innerHTML = err.name;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "try",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"%%%\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// You cannot URI decode \n  percent signs",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "catch",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Non-Standard Error Object Properties",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Mozilla and Microsoft define some non-standard error object properties:",
      "html": "<p>Mozilla and Microsoft define some non-standard error object properties:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "fileName (Mozilla) lineNumber (Mozilla) columnNumber (Mozilla) stack (Mozilla) description (Microsoft) number (Microsoft)",
      "html": "<p>fileName (Mozilla)<br/>\nlineNumber (Mozilla)<br/>\ncolumnNumber (Mozilla)<br/>\nstack (Mozilla)<br/>\ndescription (Microsoft)<br/>\nnumber (Microsoft)</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Do not use these properties in public web sites. They will not work in all browsers.",
      "html": "<p>Do not use these properties in public web sites. They will not work in all browsers.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Complete Error Reference",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Complete \nJavaScript Error Reference",
          "href": "https://www.w3schools.com/jsref/jsref_obj_error.asp",
          "title": ""
        }
      ],
      "text": "For a complete reference of the Error object, go to our Complete JavaScript Error Reference .",
      "html": "<p>For a complete reference of the Error object, go to our <a href=\"/jsref/jsref_obj_error.asp\">Complete \nJavaScript Error Reference</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Only one of the following words is a legal JavaScript statement, which one?",
      "html": "<p>Only one of the following words is a legal JavaScript statement, which one?</p>"
    },
    {
      "type": "page_quiz",
      "metadata": {
        "type": "quiz",
        "question": "Only one of the following words is a legal JavaScript statement, which one?",
        "options": [
          {
            "value": "0",
            "text": "find"
          },
          {
            "value": "1",
            "text": "check"
          },
          {
            "value": "2",
            "text": "try"
          },
          {
            "value": "3",
            "text": "execute"
          }
        ],
        "formAction": "exercise.asp?x=xrcise_errors1"
      },
      "quiz_type": "quiz",
      "question": "Only one of the following words is a legal JavaScript statement, which one?",
      "options": [
        {
          "value": "0",
          "text": "find"
        },
        {
          "value": "1",
          "text": "check"
        },
        {
          "value": "2",
          "text": "try"
        },
        {
          "value": "3",
          "text": "execute"
        }
      ],
      "form_action": "exercise.asp?x=xrcise_errors1",
      "html": "<form action=\"exercise.asp?x=xrcise_errors1\" method=\"post\" rel=\"opener\" target=\"_blank\"><div class=\"quizoption\"><input id=\"quizoption0\" name=\"quizoption\" type=\"radio\" value=\"0\"/><label for=\"quizoption0\"><code>find</code></label></div><div class=\"quizoption\"><input id=\"quizoption1\" name=\"quizoption\" type=\"radio\" value=\"1\"/><label for=\"quizoption1\"><code>check</code></label></div><div class=\"quizoption\"><input id=\"quizoption2\" name=\"quizoption\" type=\"radio\" value=\"2\"/><label for=\"quizoption2\"><code>try</code></label></div><div class=\"quizoption\"><input id=\"quizoption3\" name=\"quizoption\" type=\"radio\" value=\"3\"/><label for=\"quizoption3\"><code>execute</code></label></div><br/><button class=\"ws-btn\" type=\"submit\">Submit Answer \u00bb</button></form>"
    }
  ]
}