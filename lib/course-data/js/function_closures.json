{
  "title": "JavaScript Function Closures",
  "url": "https://www.w3schools.com/js/js_function_closures.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Closures",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript variables can belong to:",
      "html": "<p class=\"intro\">JavaScript variables can belong to:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The local scope or The global scope",
      "html": "<p>The <b>local scope</b> or The <b>global scope</b></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Global variables can be made local (private) with closures .",
      "html": "<p>Global variables can be made local (private) with <strong>closures</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Closures makes it possible for a function to have \"private\" variables.",
      "html": "<p>Closures makes it possible for a function to have \"private\" variables.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Local Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A local variable is a \"private\" variable defined inside a function.",
      "html": "<p>A <b>local variable</b> is a \"private\" variable defined <b>inside</b> a function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A function can access all variables in the local scope .",
      "html": "<p>A <code>function</code> can access all variables in the <b>local scope</b>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope2",
        "syntaxHighlighting": [
          {
            "text": "\nfunction myFunction() {\n  \u00a0 let a = 4;\n  \u00a0 return a * a;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function myFunction() {\nlet a = 4;\nreturn a * a;\n}",
      "syntax_highlighting": [
        {
          "text": "\nfunction myFunction() {\n  \u00a0 let a = 4;\n  \u00a0 return a * a;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> a = <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a * a;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope2",
      "syntax_highlighting_data": [
        {
          "text": "\nfunction myFunction() {\n  \u00a0 let a = 4;\n  \u00a0 return a * a;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Global Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A global variable is a \"public\" variable defined outside a function.",
      "html": "<p>A <b>global variable</b> is a \"public\" variable defined <b>outside</b> a function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A function can access all variables in the global scope :",
      "html": "<p>A <code>function</code> can access all variables in the <b>global scope</b>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope1",
        "syntaxHighlighting": [
          {
            "text": "\nlet a = 4;function myFunction() {\n  \u00a0 return a * a;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let a = 4;function myFunction() {\nreturn a * a;\n}",
      "syntax_highlighting": [
        {
          "text": "\nlet a = 4;function myFunction() {\n  \u00a0 return a * a;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> a = <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>;<br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a * a;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope1",
      "syntax_highlighting_data": [
        {
          "text": "\nlet a = 4;function myFunction() {\n  \u00a0 return a * a;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In a web page, global variables belong to the page.",
      "html": "<p>In a web page, global variables belong to the page.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Global variables can be used (or changed) by all scripts in the page.",
      "html": "<p>Global variables can be used (or changed) by all scripts in the page.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A local variable can only be used inside the function where it is defined. It is private and hidden from other functions and other scripting code.",
      "html": "<p>A local variable can only be used inside the function where it is defined. It \nis private and hidden from other functions and other scripting code.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Global and local variables with the same name are different variables. Modifying one, does not modify the other.",
      "html": "<p>Global \nand local variables with the same name are  \ndifferent variables. Modifying one, does not modify the other. </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Undeclared variables (created without a keyword var , let , const ), are always global , even if they are created inside a function.",
      "html": "<p><b>Undeclared variables</b> (created without a keyword <code>var</code>,\n<code>let</code>, <code>const</code>), \nare <b>always global</b>, even if they are created inside a function.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope4",
        "syntaxHighlighting": [
          {
            "text": "\nfunction myFunction() {\n\u00a0 a = 4;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function myFunction() {\na = 4;\n}",
      "syntax_highlighting": [
        {
          "text": "\nfunction myFunction() {\n\u00a0 a = 4;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 a = <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_scope4",
      "syntax_highlighting_data": [
        {
          "text": "\nfunction myFunction() {\n\u00a0 a = 4;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Variable Lifetime",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Global variables live until the page is discarded, like when you navigate to another page or close the window.",
      "html": "<p>Global variables live until the page is discarded, like when you navigate \nto another page or close the window.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Local variables have short lives. They are created when the function is invoked, and deleted when the function is finished.",
      "html": "<p>Local \nvariables have short lives. They are created when the function is \ninvoked, and deleted when the function is finished.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "A Counter Dilemma",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Suppose you want to use a variable for counting something, and you want this counter to be available to everyone (all functions).",
      "html": "<p>Suppose you want to use a variable for counting something, and you want this \ncounter to be available to everyone (all functions).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You could use a global variable, and a function to increase the counter:",
      "html": "<p>You could use a global variable, and a <code>function</code> to increase the counter:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures1",
        "syntaxHighlighting": [
          {
            "text": "\n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\n\u00a0\u00a0counter += 1;\n}// Call add() 3 times\nadd();\nadd();\nadd();// The counter should now be 3 ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Initiate counter",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Function to increment \n  counter",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Call add() 3 times",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "// The counter should now be 3 ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Initiate counterlet counter = 0;// Function to increment\ncounterfunction add() {\ncounter += 1;\n}// Call add() 3 times\nadd();\nadd();\nadd();// The counter should now be 3",
      "syntax_highlighting": [
        {
          "text": "\n // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\n\u00a0\u00a0counter += 1;\n}// Call add() 3 times\nadd();\nadd();\nadd();// The counter should now be 3 ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Initiate counter",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Function to increment \n  counter",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Call add() 3 times",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "// The counter should now be 3 ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Initiate counter<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// Function to increment \n  counter<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0counter += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// Call add() 3 times<br/></span>\nadd();<br/>\nadd();<br/>\nadd();<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// The counter should now be 3 </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures1",
      "syntax_highlighting_data": [
        {
          "text": "\n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\n\u00a0\u00a0counter += 1;\n}// Call add() 3 times\nadd();\nadd();\nadd();// The counter should now be 3 ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Initiate counter",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Function to increment \n  counter",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Call add() 3 times",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "// The counter should now be 3 ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Warning !",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There is a problem with the solution above: Any code on the page can change the counter, without calling add() .",
      "html": "<p>There is a problem with the solution above: Any code on the page can change the counter, <b>without calling add()</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The counter should be local to the add() function, to prevent other code from changing it:",
      "html": "<p>The counter should be local to the <code>add()</code> function, to prevent other code from changing \nit:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures2",
        "syntaxHighlighting": [
          {
            "text": "\n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\u00a0 let counter = 0; \u00a0 \n  counter += 1;}// \n  Call add() 3 timesadd();add();add();// The counter should \n  now be 3. But it is 0 ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Initiate counter",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Function to increment \n  counter",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// \n  Call add() 3 times",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "// The counter should \n  now be 3. But it is 0 ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Initiate counterlet counter = 0;// Function to increment\ncounterfunction add() {\u00a0 let counter = 0;\ncounter += 1;}//\nCall add() 3 timesadd();add();add();// The counter should\nnow be 3. But it is 0",
      "syntax_highlighting": [
        {
          "text": "\n // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\u00a0 let counter = 0; \u00a0 \n  counter += 1;}// \n  Call add() 3 timesadd();add();add();// The counter should \n  now be 3. But it is 0 ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Initiate counter",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Function to increment \n  counter",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// \n  Call add() 3 times",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "// The counter should \n  now be 3. But it is 0 ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Initiate counter<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// Function to increment \n  counter<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add() {<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; <br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  counter += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>}<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// \n  Call add() 3 times<br/></span>add();<br/>add();<br/>add();<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">// The counter should \n  now be 3. But it is 0 </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures2",
      "syntax_highlighting_data": [
        {
          "text": "\n  // Initiate counterlet counter = 0;// Function to increment \n  counterfunction add() {\u00a0 let counter = 0; \u00a0 \n  counter += 1;}// \n  Call add() 3 timesadd();add();add();// The counter should \n  now be 3. But it is 0 ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Initiate counter",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Function to increment \n  counter",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// \n  Call add() 3 times",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "// The counter should \n  now be 3. But it is 0 ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It did not work because we display the global counter instead of the local counter.",
      "html": "<p>It did not work because we display the global counter instead of the local \ncounter.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can remove the global counter and access the local counter by letting the function return it:",
      "html": "<p>We can remove the global counter and access the local counter by letting the \nfunction return it:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures3",
        "syntaxHighlighting": [
          {
            "text": "\n// Function to increment counter\nfunction add() {\n\u00a0 let counter = 0;\n\u00a0 counter += 1;\n\u00a0\u00a0return counter;\n}\nlet x= 0;\n// Call add() 3 times\nx = add();\nx = add();\nx = add();\n// The counter should now be 3. But it is 1.\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Function to increment counter",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Call add() 3 times",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// The counter should now be 3. But it is 1.\n ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Function to increment counter\nfunction add() {\nlet counter = 0;\ncounter += 1;\nreturn counter;\n}\nlet x= 0;\n// Call add() 3 times\nx = add();\nx = add();\nx = add();\n// The counter should now be 3. But it is 1.",
      "syntax_highlighting": [
        {
          "text": "\n// Function to increment counter\nfunction add() {\n\u00a0 let counter = 0;\n\u00a0 counter += 1;\n\u00a0\u00a0return counter;\n}\nlet x= 0;\n// Call add() 3 times\nx = add();\nx = add();\nx = add();\n// The counter should now be 3. But it is 1.\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Function to increment counter",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Call add() 3 times",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// The counter should now be 3. But it is 1.\n ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Function to increment counter<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 counter += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> counter;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x= <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Call add() 3 times<br/></span>\nx = add();<br/>\nx = add();<br/>\nx = add();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"commentcolor\" style=\"color:slategray\">// The counter should now be 3. But it is 1.\n </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures3",
      "syntax_highlighting_data": [
        {
          "text": "\n// Function to increment counter\nfunction add() {\n\u00a0 let counter = 0;\n\u00a0 counter += 1;\n\u00a0\u00a0return counter;\n}\nlet x= 0;\n// Call add() 3 times\nx = add();\nx = add();\nx = add();\n// The counter should now be 3. But it is 1.\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Function to increment counter",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Call add() 3 times",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// The counter should now be 3. But it is 1.\n ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It did not work because we reset the local counter every time we call the function.",
      "html": "<p>It did not work because we reset the local counter every time we call the \nfunction.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Solution",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A JavaScript inner function can solve this.",
      "html": "<p>\u00a0<strong>A JavaScript inner function can solve this.</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Nested Functions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All functions have access to the global scope.",
      "html": "<p>All functions have access to the global scope.\u00a0\u00a0 </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In fact, in JavaScript, all functions have access to the scope \"above\" them.",
      "html": "<p>In fact, in JavaScript, all functions have access to the scope \"above\" them.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript supports nested functions. Nested functions have access to the scope \"above\" them.",
      "html": "<p>JavaScript supports nested functions. Nested functions have access to the \nscope \"above\" them. </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures4",
        "syntaxHighlighting": [
          {
            "text": "\n function add() {\n  \u00a0 let counter = 0;\n  \u00a0 function plus() {counter += 1;}\u00a0\u00a0plus();\u00a0\u00a0\u00a0\n \u00a0\u00a0return counter; } ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function add() {\nlet counter = 0;\nfunction plus() {counter += 1;}\u00a0\u00a0plus();\nreturn counter; }",
      "syntax_highlighting": [
        {
          "text": "\n function add() {\n  \u00a0 let counter = 0;\n  \u00a0 function plus() {counter += 1;}\u00a0\u00a0plus();\u00a0\u00a0\u00a0\n \u00a0\u00a0return counter; } ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> plus() {counter += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;}<br/>\u00a0\u00a0plus();\u00a0\u00a0\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> counter; <br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures4",
      "syntax_highlighting_data": [
        {
          "text": "\n function add() {\n  \u00a0 let counter = 0;\n  \u00a0 function plus() {counter += 1;}\u00a0\u00a0plus();\u00a0\u00a0\u00a0\n \u00a0\u00a0return counter; } ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This could have solved the counter dilemma, if we could reach the plus() function from the outside.",
      "html": "<p>This could have solved the counter dilemma, if we could reach the <code>plus()</code> \nfunction from the outside.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We also need to find a way to execute counter = 0 only once.",
      "html": "<p>We also need to find a way to execute <code>counter = 0</code> only once.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Solution",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We need a closure.",
      "html": "<p><strong>We need a closure.</strong></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Closures",
      "level": "h2"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures5",
        "syntaxHighlighting": [
          {
            "text": "\nfunction myCounter() {\n\u00a0\u00a0let counter = 0;\n\u00a0\u00a0return function() {\n\u00a0\u00a0\u00a0\u00a0counter++;\n\u00a0\u00a0\u00a0\u00a0return counter;\n\u00a0\u00a0};\n}\nconst add = myCounter();\nadd();\nadd();\nadd();\n\n// the counter is now 3\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// the counter is now 3\n ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function myCounter() {\nlet counter = 0;\nreturn function() {\ncounter++;\nreturn counter;\n};\n}\nconst add = myCounter();\nadd();\nadd();\nadd();\n\n// the counter is now 3",
      "syntax_highlighting": [
        {
          "text": "\nfunction myCounter() {\n\u00a0\u00a0let counter = 0;\n\u00a0\u00a0return function() {\n\u00a0\u00a0\u00a0\u00a0counter++;\n\u00a0\u00a0\u00a0\u00a0return counter;\n\u00a0\u00a0};\n}\nconst add = myCounter();\nadd();\nadd();\nadd();\n\n// the counter is now 3\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// the counter is now 3\n ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myCounter() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0counter++;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> counter;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> add = myCounter();<br/>\nadd();<br/>\nadd();<br/>\nadd();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// the counter is now 3\n </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_function_closures5",
      "syntax_highlighting_data": [
        {
          "text": "\nfunction myCounter() {\n\u00a0\u00a0let counter = 0;\n\u00a0\u00a0return function() {\n\u00a0\u00a0\u00a0\u00a0counter++;\n\u00a0\u00a0\u00a0\u00a0return counter;\n\u00a0\u00a0};\n}\nconst add = myCounter();\nadd();\nadd();\nadd();\n\n// the counter is now 3\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// the counter is now 3\n ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Example Explained",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The variable add is assigned to the return value of a function.",
      "html": "<p>The variable <code>add</code> is assigned to the return value of a function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The function only runs once. It sets the counter to zero (0), and returns a function expression.",
      "html": "<p>The function only runs once. It sets the counter to zero (0), and returns a function expression.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This way add becomes a function. The \"wonderful\" part is that it can access the counter in its parent scope.",
      "html": "<p>This way add becomes a function. The \"wonderful\" part is that it can access the counter in its parent scope.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is called a closure. It makes it possible for a function to have \" private \" variables.",
      "html": "<p>This is called a <strong>closure.</strong> It makes it possible \nfor a function to have \"<strong>private</strong>\" variables.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The counter is protected by the scope of the myCounter function, and can only be changed using the add function.",
      "html": "<p>The counter is protected by the scope of the myCounter function, \nand can only be changed using the add function.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Conclusion",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A closure is a function that has access to the parent scope, after the parent function has closed.",
      "html": "<p>A closure is a function that has access to the parent scope, after the parent function has closed.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Closures has historically been used to:",
      "html": "<p>Closures has historically been used to:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Old JavaScript code will often contain closures, but modern JavaScript will not use closures as frequently as before.",
      "html": "<p>Old JavaScript code will often contain closures, but modern JavaScript will not use closures as frequently as\nbefore.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ECMAScript 2015 and subsequent JavaScript versions have introduced new language features that provide alternatives to closures.",
      "html": "<p>ECMAScript 2015 and subsequent JavaScript versions have introduced new language features that provide\nalternatives to closures.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "While closures are a powerful concept in JavaScript, new JavaScript features make some use cases for closures less necessary.",
      "html": "<p>While closures are a powerful concept in JavaScript, new JavaScript features make some use cases for\nclosures less necessary.</p>"
    }
  ]
}