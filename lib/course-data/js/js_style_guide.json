{
  "title": "JavaScript Style Guide",
  "url": "https://www.w3schools.com/js/js_conventions.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Style Guide",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Always use the same coding conventions for all your JavaScript projects.",
      "html": "<p class=\"intro\">Always use the same coding conventions for all your JavaScript \nprojects.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Coding Conventions",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Coding conventions are style guidelines for programming . They typically cover:",
      "html": "<p>Coding conventions are <strong>style guidelines for programming</strong>. \nThey typically cover:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Coding conventions secure quality :",
      "html": "<p>Coding conventions <strong>secure quality</strong>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.",
      "html": "<p>Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This page describes the general JavaScript code conventions used by W3Schools. You should also read the next chapter \"Best Practices\", and learn how to avoid coding pitfalls.",
      "html": "<p>This page describes the general JavaScript code conventions used by W3Schools.<br/>\nYou should also read the next chapter \"Best Practices\", and learn how to avoid coding pitfalls.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Variable Names",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "At W3schools we use camelCase for identifier names (variables and functions).",
      "html": "<p>At W3schools we use <strong>camelCase</strong> for identifier names (variables and functions).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All names start with a letter .",
      "html": "<p>All names start with a <strong>letter</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "At the bottom of this page, you will find a wider discussion about naming rules.",
      "html": "<p>At the bottom of this page, you will find a wider discussion about naming \nrules.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nfirstName = \"John\";lastName = \"Doe\";price = 19.90;\n tax = 0.20;fullPrice = price + (price * tax); ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\"John\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Doe\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "19.90",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0.20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "firstName = \"John\";lastName = \"Doe\";price = 19.90;\ntax = 0.20;fullPrice = price + (price * tax);",
      "syntax_highlighting": [
        {
          "text": "\nfirstName = \"John\";lastName = \"Doe\";price = 19.90;\n tax = 0.20;fullPrice = price + (price * tax); ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\"John\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Doe\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "19.90",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0.20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\nfirstName = <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>;<br/>lastName = <span class=\"jsstringcolor\" style=\"color:green\">\"Doe\"</span>;<br/><br/>price = <span class=\"jsnumbercolor\" style=\"color:#905\">19.90</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> tax = <span class=\"jsnumbercolor\" style=\"color:#905\">0.20</span>;<br/><br/>fullPrice = price + (price * tax); </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nfirstName = \"John\";lastName = \"Doe\";price = 19.90;\n tax = 0.20;fullPrice = price + (price * tax); ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\"John\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Doe\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "19.90",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0.20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Spaces Around Operators",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Always put spaces around operators ( = + - * / ), and after commas:",
      "html": "<p>Always put spaces around operators ( = + - * / ), and after commas:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nlet x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"]; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Volvo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Saab\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Fiat\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = y + z;\nconst myArray = [\"Volvo\", \"Saab\",\n\"Fiat\"];",
      "syntax_highlighting": [
        {
          "text": "\nlet x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"]; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Volvo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Saab\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Fiat\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = y + z;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArray = [<span class=\"jsstringcolor\" style=\"color:green\">\"Volvo\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Saab\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Fiat\"</span>]; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \n \"Fiat\"]; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Volvo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Saab\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Fiat\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Code Indentation",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Always use 2 spaces for indentation of code blocks:",
      "html": "<p>Always use 2 spaces for indentation of code blocks:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nfunction toCelsius(fahrenheit) {\n  \u00a0 return (5 / 9) * (fahrenheit - 32);\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "32",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}",
      "syntax_highlighting": [
        {
          "text": "\nfunction toCelsius(fahrenheit) {\n  \u00a0 return (5 / 9) * (fahrenheit - 32);\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "32",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> toCelsius(fahrenheit) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<span class=\"jsnumbercolor\" style=\"color:#905\">5</span> / <span class=\"jsnumbercolor\" style=\"color:#905\">9</span>) * (fahrenheit - <span class=\"jsnumbercolor\" style=\"color:#905\">32</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nfunction toCelsius(fahrenheit) {\n  \u00a0 return (5 / 9) * (fahrenheit - 32);\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "32",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Do not use tabs (tabulators) for indentation. Different editors interpret tabs differently.",
      "html": "<p>Do not use tabs (tabulators) for indentation. Different editors interpret tabs differently.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Statement Rules",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "General rules for simple statements:",
      "html": "<p>General rules for simple statements:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Volvo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Saab\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Fiat\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"John\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Doe\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "50",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"blue\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const cars = [\"Volvo\", \"Saab\",\n\"Fiat\"];\nconst person = {\u00a0 firstName: \"John\",\nlastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor:\n\"blue\"};",
      "syntax_highlighting": [
        {
          "text": "\nconst cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Volvo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Saab\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Fiat\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"John\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Doe\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "50",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"blue\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> cars = [<span class=\"jsstringcolor\" style=\"color:green\">\"Volvo\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Saab\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Fiat\"</span>];<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = {<br/>\u00a0 firstName: <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>,<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> lastName: <span class=\"jsstringcolor\" style=\"color:green\">\"Doe\"</span>,<br/>\u00a0 age: <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<br/>\u00a0 eyeColor: <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span><br/>}; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst cars = [\"Volvo\", \"Saab\", \n \"Fiat\"];\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Volvo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Saab\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Fiat\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"John\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Doe\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "50",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"blue\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "General rules for complex (compound) statements:",
      "html": "<p>General rules for complex (compound) statements:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nfunction toCelsius(fahrenheit) {\n\u00a0\u00a0return (5 / 9) * (fahrenheit - 32);\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "9",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "32",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}",
      "syntax_highlighting": [
        {
          "text": "\nfunction toCelsius(fahrenheit) {\n\u00a0\u00a0return (5 / 9) * (fahrenheit - 32);\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "9",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "32",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> toCelsius(fahrenheit) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<span class=\"jsnumbercolor\" style=\"color:#905\">5</span> / <span class=\"jsnumbercolor\" style=\"color:#905\">9</span>) * (fahrenheit - <span class=\"jsnumbercolor\" style=\"color:#905\">32</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nfunction toCelsius(fahrenheit) {\n\u00a0\u00a0return (5 / 9) * (fahrenheit - 32);\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "9",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "32",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n for (let i = 0; i < 5; i++) {\u00a0\u00a0x += i;} ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "for (let i = 0; i < 5; i++) {\u00a0\u00a0x += i;}",
      "syntax_highlighting": [
        {
          "text": "\n for (let i = 0; i < 5; i++) {\u00a0\u00a0x += i;} ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>; i++) {<br/>\u00a0\u00a0x += i;<br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n for (let i = 0; i < 5; i++) {\u00a0\u00a0x += i;} ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n if (time < 20) {\u00a0\u00a0greeting = \"Good day\";} else {\n  \u00a0 \n greeting = \"Good evening\";} ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Good day\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Good evening\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "if (time < 20) {\u00a0\u00a0greeting = \"Good day\";} else {\n\ngreeting = \"Good evening\";}",
      "syntax_highlighting": [
        {
          "text": "\n if (time < 20) {\u00a0\u00a0greeting = \"Good day\";} else {\n  \u00a0 \n greeting = \"Good evening\";} ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Good day\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Good evening\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (time &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>) {<br/>\u00a0\u00a0greeting = <span class=\"jsstringcolor\" style=\"color:green\">\"Good day\"</span>;<br/>} <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  \u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> greeting = <span class=\"jsstringcolor\" style=\"color:green\">\"Good evening\"</span>;<br/>} </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n if (time < 20) {\u00a0\u00a0greeting = \"Good day\";} else {\n  \u00a0 \n greeting = \"Good evening\";} ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Good day\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Good evening\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Object Rules",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "General rules for object definitions:",
      "html": "<p>General rules for object definitions:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"John\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Doe\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "50",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"blue\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const person = {\u00a0 firstName: \"John\",\nlastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor:\n\"blue\"};",
      "syntax_highlighting": [
        {
          "text": "\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"John\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Doe\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "50",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"blue\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\" style=\"color: #404040\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = {<br/>\u00a0 firstName: <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>,<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> lastName: <span class=\"jsstringcolor\" style=\"color:green\">\"Doe\"</span>,<br/>\u00a0 age: <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<br/>\u00a0 eyeColor: <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span><br/>}; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst person = {\u00a0 firstName: \"John\",\u00a0 \n lastName: \"Doe\",\u00a0 age: 50,\u00a0 eyeColor: \n \"blue\"}; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"John\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Doe\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "50",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"blue\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Short objects can be written compressed, on one line, using spaces only between properties, like this:",
      "html": "<p>Short objects can be written compressed, on one line, using spaces only \nbetween properties, like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"John\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Doe\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "50",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"blue\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
      "syntax_highlighting": [
        {
          "text": "\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"John\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Doe\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "50",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"blue\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\" style=\"color: #404040\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = {firstName:<span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>, lastName:<span class=\"jsstringcolor\" style=\"color:green\">\"Doe\"</span>, age:<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>, eyeColor:<span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>}; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"John\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Doe\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "50",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"blue\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Line Length < 80",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For readability, avoid lines longer than 80 characters.",
      "html": "<p>For readability, avoid lines longer than 80 \ncharacters.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If a JavaScript statement does not fit on one line, the best place to break it, is after an operator or a comma.",
      "html": "<p>If a JavaScript statement does not fit on one line, the best place to break \nit, is after an operator or a comma.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_line_break",
        "syntaxHighlighting": [
          {
            "text": "\ndocument.getElementById(\"demo\").innerHTML =\n  \"Hello Dolly.\";\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Hello Dolly.\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly.\";",
      "syntax_highlighting": [
        {
          "text": "\ndocument.getElementById(\"demo\").innerHTML =\n \"Hello Dolly.\";\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Hello Dolly.\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Hello Dolly.\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_line_break",
      "syntax_highlighting_data": [
        {
          "text": "\ndocument.getElementById(\"demo\").innerHTML =\n  \"Hello Dolly.\";\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Hello Dolly.\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Naming Conventions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Always use the same naming convention for all your code. For example:",
      "html": "<p>Always use the same naming convention for all your code. For example:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Should you use hyp-hens , camelCase , or under_scores in variable names?",
      "html": "<p>Should you use <strong>hyp-hens</strong>, <strong>camelCase</strong>, or\n<strong>under_scores</strong> in variable names?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This is a question programmers often discuss. The answer depends on who you ask:",
      "html": "<p>This is a question programmers often discuss. The answer depends on who you \nask:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hyphens in HTML and CSS:",
      "html": "<p><strong>Hyphens in HTML and CSS:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "HTML5 attributes can start with data- (data-quantity, data-price).",
      "html": "<p>HTML5 attributes can start with data- (data-quantity, data-price).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "CSS uses hyphens in property-names (font-size).",
      "html": "<p>CSS uses hyphens in property-names (font-size).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.",
      "html": "<p>Hyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Underscores:",
      "html": "<p><strong>Underscores:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Many programmers prefer to use underscores (date_of_birth), especially in SQL databases.",
      "html": "<p>Many programmers prefer to use underscores (date_of_birth), especially in SQL \ndatabases.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Underscores are often used in PHP documentation.",
      "html": "<p>Underscores are often used in PHP documentation.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PascalCase:",
      "html": "<p><strong>PascalCase:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "PascalCase is often preferred by C programmers.",
      "html": "<p>PascalCase is often preferred by C programmers.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "camelCase:",
      "html": "<p><strong>camelCase:</strong></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "camelCase is used by JavaScript itself, by jQuery, and other JavaScript libraries.",
      "html": "<p>camelCase is used by JavaScript itself, by jQuery, and other JavaScript \nlibraries.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Do not start names with a $ sign. It will put you in conflict with many JavaScript library names.",
      "html": "<p>Do not start names with a $ sign. It will put you in conflict with many JavaScript library names.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Loading JavaScript in HTML",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Use simple syntax for loading external scripts (the type attribute is not necessary):",
      "html": "<p>Use simple syntax for loading external scripts (the type attribute is not \nnecessary):</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<script src=\"myscript.js\">",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": " src=\"myscript.js\"",
            "color": "rgb(0, 128, 0)",
            "class": "attributecolor"
          },
          {
            "text": "=\"myscript.js\"",
            "color": "rgb(0, 92, 197)",
            "class": "attributevaluecolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<script src=\"myscript.js\"></script>",
      "syntax_highlighting": [
        {
          "text": "<script src=\"myscript.js\">",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": " src=\"myscript.js\"",
          "color": "green",
          "class": [
            "attributecolor"
          ]
        },
        {
          "text": "=\"myscript.js\"",
          "color": "#005cc5",
          "class": [
            "attributevaluecolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myscript.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<script src=\"myscript.js\">",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": " src=\"myscript.js\"",
          "color": "rgb(0, 128, 0)",
          "class": "attributecolor"
        },
        {
          "text": "=\"myscript.js\"",
          "color": "rgb(0, 92, 197)",
          "class": "attributevaluecolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Accessing HTML Elements",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A consequence of using \"untidy\" HTML styles, might result in JavaScript errors.",
      "html": "<p>A consequence of using \"untidy\" HTML styles, might result in JavaScript errors.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These two JavaScript statements will produce different results:",
      "html": "<p>These two JavaScript statements will produce different results:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")",
      "syntax_highlighting": [
        {
          "text": "\nconst obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> obj = getElementById(<span class=\"jsstringcolor\" style=\"color:green\">\"Demo\"</span>)<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> obj = getElementById(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>)<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst obj = getElementById(\"Demo\")\nconst obj = getElementById(\"demo\")\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If possible, use the same naming convention (as JavaScript) in HTML.",
      "html": "<p>If possible, use the same naming convention (as JavaScript) in HTML. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Visit the HTML Style Guide",
          "href": "https://www.w3schools.com/html/html5_syntax.asp",
          "title": ""
        }
      ],
      "text": "Visit the HTML Style Guide .",
      "html": "<p><a href=\"/html/html5_syntax.asp\">Visit the HTML Style Guide</a>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "File Extensions",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "HTML files should have a .html extension ( .htm is allowed).",
      "html": "<p>HTML files should have a <strong>.html</strong> extension (<strong>.htm</strong> is allowed).\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "CSS files should have a .css extension.",
      "html": "<p>CSS files should have a <strong>.css</strong> extension.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript files should have a .js extension.",
      "html": "<p>JavaScript files should have a <strong>.js</strong> extension.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Use Lower Case File Names",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Most web servers (Apache, Unix) are case sensitive about file names:",
      "html": "<p>Most web servers (Apache, Unix) are case sensitive about file names:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "london.jpg cannot be accessed as London.jpg.",
      "html": "<p>london.jpg cannot be accessed as London.jpg. </p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Other web servers (Microsoft, IIS) are not case sensitive:",
      "html": "<p>Other web servers (Microsoft, IIS) are not case sensitive:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "london.jpg can be accessed as London.jpg or london.jpg.",
      "html": "<p>london.jpg can be accessed as London.jpg or london.jpg.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you use a mix of upper and lower case, you have to be extremely consistent.",
      "html": "<p>If you use a mix of upper and lower case, you have to be extremely \nconsistent.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you move from a case insensitive, to a case sensitive server, even small errors can break your web site.",
      "html": "<p>If you move from a case insensitive, to a case sensitive server, even small \nerrors can break your web site.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To avoid these problems, always use lower case file names (if possible).",
      "html": "<p>To avoid these problems, always use lower case file names (if possible). </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Performance",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Coding conventions are not used by computers. Most rules have little impact on the execution of programs.",
      "html": "<p>Coding conventions are not used by computers. Most rules have \nlittle impact on the execution of programs.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Indentation and extra spaces are not significant in small scripts.",
      "html": "<p>Indentation and extra spaces are not significant in small scripts.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "For code in development, readability should be preferred. Larger production scripts should be minimized.",
      "html": "<p>For code in development, readability should be preferred. Larger production \nscripts should be minimized.</p>"
    }
  ]
}