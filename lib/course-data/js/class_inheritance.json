{
  "title": "JavaScript Class Inheritance",
  "url": "https://www.w3schools.com/js/js_class_inheritance.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Class Inheritance",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Class Inheritance",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a class inheritance, use the extends keyword.",
      "html": "<p>To create a class inheritance, use the <code>extends</code> \nkeyword.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A class created with a class inheritance inherits all the methods from another class:",
      "html": "<p>A class created with a class inheritance inherits all the methods from \nanother class:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_inherit",
        "syntaxHighlighting": [
          {
            "text": "\nclass Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname = \n  brand;\u00a0\n  }\u00a0 present() {\u00a0\u00a0\u00a0 return 'I have a ' + this.carname;\u00a0\n  }}class Model extends Car {\u00a0\n  constructor(brand, mod) {\u00a0\u00a0\u00a0 super(brand);\u00a0\u00a0\u00a0 this.model = mod;\u00a0\n  }\u00a0 show() {\u00a0\u00a0\u00a0\n      return this.present() + ', it is a ' + this.model;\u00a0\n  }}let myCar = new Model(\"Ford\", \"Mustang\");document.getElementById(\"demo\").innerHTML \n  = myCar.show();\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'I have a '",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "extends",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "super",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "model",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "present",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "', it is a '",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "model",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Ford\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"Mustang\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "show",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname =\nbrand;\n}\u00a0 present() {\u00a0\u00a0\u00a0 return 'I have a ' + this.carname;\n}}class Model extends Car {\nconstructor(brand, mod) {\u00a0\u00a0\u00a0 super(brand);\u00a0\u00a0\u00a0 this.model = mod;\n}\u00a0 show() {\nreturn this.present() + ', it is a ' + this.model;\n}}let myCar = new Model(\"Ford\", \"Mustang\");document.getElementById(\"demo\").innerHTML\n= myCar.show();",
      "syntax_highlighting": [
        {
          "text": "\nclass Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname = \n  brand;\u00a0\n  }\u00a0 present() {\u00a0\u00a0\u00a0 return 'I have a ' + this.carname;\u00a0\n  }}class Model extends Car {\u00a0\n  constructor(brand, mod) {\u00a0\u00a0\u00a0 super(brand);\u00a0\u00a0\u00a0 this.model = mod;\u00a0\n  }\u00a0 show() {\u00a0\u00a0\u00a0\n return this.present() + ', it is a ' + this.model;\u00a0\n  }}let myCar = new Model(\"Ford\", \"Mustang\");document.getElementById(\"demo\").innerHTML \n  = myCar.show();\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'I have a '",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "extends",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "super",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "model",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "present",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "', it is a '",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "model",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Ford\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"Mustang\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "show",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Car {<br/>\u00a0 constructor(brand) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  brand;<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/>\u00a0 present() {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">'I have a '</span> + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span>;<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Model <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Car {<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  constructor(brand, mod) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(brand);<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">model</span> = mod;<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/>\u00a0 show() {<br/>\u00a0\u00a0\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">present</span>() + <span class=\"jsstringcolor\" style=\"color:green\">', it is a '</span> + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">model</span>;<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myCar = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Model(<span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Mustang\"</span>);<br/>document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = myCar.<span class=\"jspropertycolor\" style=\"color:black\">show</span>();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_inherit",
      "syntax_highlighting_data": [
        {
          "text": "\nclass Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname = \n  brand;\u00a0\n  }\u00a0 present() {\u00a0\u00a0\u00a0 return 'I have a ' + this.carname;\u00a0\n  }}class Model extends Car {\u00a0\n  constructor(brand, mod) {\u00a0\u00a0\u00a0 super(brand);\u00a0\u00a0\u00a0 this.model = mod;\u00a0\n  }\u00a0 show() {\u00a0\u00a0\u00a0\n      return this.present() + ', it is a ' + this.model;\u00a0\n  }}let myCar = new Model(\"Ford\", \"Mustang\");document.getElementById(\"demo\").innerHTML \n  = myCar.show();\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'I have a '",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "extends",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "super",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "model",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "present",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "', it is a '",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "model",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Ford\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"Mustang\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "show",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The super() method refers to the parent class.",
      "html": "<p>The <code>super()</code> method refers to the parent \nclass.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.",
      "html": "<p>By calling the <code>super()</code> method in the \nconstructor method, we call the parent's constructor method and gets access to \nthe parent's properties and methods.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.",
      "html": "<p>Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Getters and Setters",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Classes also allow you to use getters and setters.",
      "html": "<p>Classes also allow you to use getters and setters.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It can be smart to use getters and setters for your properties, especially if you want to do something special with the value before returning them, or before you set them.",
      "html": "<p>It can be smart to use getters and setters for your properties, especially if \nyou want to do something special with the value before returning them, or before \nyou set them.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To add getters and setters in the class, use the get and set keywords.",
      "html": "<p>To add getters and setters in the class, use the <code>\nget</code> and <code>set</code> keywords.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_getters",
        "syntaxHighlighting": [
          {
            "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname \n  = brand;\u00a0 }\u00a0 get cnam() {\u00a0\u00a0\u00a0 \n  return this.carname;\u00a0 }\u00a0 set cnam(x) {\u00a0\u00a0\u00a0 \n  this.carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.cnam; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Ford\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "cnam",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname\n= brand;\u00a0 }\u00a0 get cnam() {\nreturn this.carname;\u00a0 }\u00a0 set cnam(x) {\nthis.carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;",
      "syntax_highlighting": [
        {
          "text": "\n class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname \n  = brand;\u00a0 }\u00a0 get cnam() {\u00a0\u00a0\u00a0 \n return this.carname;\u00a0 }\u00a0 set cnam(x) {\u00a0\u00a0\u00a0 \n this.carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.cnam; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Ford\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "cnam",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Car {<br/>\u00a0 constructor(brand) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = brand;<br/>\u00a0 }<br/>\u00a0 get cnam() {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span>;<br/>\u00a0 }<br/>\u00a0 set cnam(x) {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span> = x;<br/>\u00a0 }<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCar = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Car(<span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = myCar.<span class=\"jspropertycolor\" style=\"color:black\">cnam</span>; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_getters",
      "syntax_highlighting_data": [
        {
          "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this.carname \n  = brand;\u00a0 }\u00a0 get cnam() {\u00a0\u00a0\u00a0 \n  return this.carname;\u00a0 }\u00a0 set cnam(x) {\u00a0\u00a0\u00a0 \n  this.carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.cnam; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Ford\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "cnam",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: even if the getter is a method, you do not use parentheses when you want to get the property value.",
      "html": "<p><strong>Note:</strong> even if the getter is a method, you do not use parentheses when you \nwant to get the property value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The name of the getter/setter method cannot be the same as the name of the property, in this case carname .",
      "html": "<p>The name of the getter/setter method cannot be the same as the name of the \nproperty, in this case <code>carname</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p>\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Many programmers use an underscore character _ before the property name to separate the getter/setter from the actual property:",
      "html": "<p>Many programmers use an underscore character <code>_</code> \nbefore the property name to separate the getter/setter from the actual property:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_getters2",
        "syntaxHighlighting": [
          {
            "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n  return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n  this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Ford\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname\n= brand;\u00a0 }\u00a0 get carname() {\nreturn this._carname;\u00a0 }\u00a0 set carname(x) {\nthis._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
      "syntax_highlighting": [
        {
          "text": "\n class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Ford\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Car {<br/>\u00a0 constructor(brand) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = brand;<br/>\u00a0 }<br/>\u00a0 get carname() {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span>;<br/>\u00a0 }<br/>\u00a0 set carname(x) {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span> = x;<br/>\u00a0 }<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCar = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Car(<span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = myCar.<span class=\"jspropertycolor\" style=\"color:black\">carname</span>; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_getters2",
      "syntax_highlighting_data": [
        {
          "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n  return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n  this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Ford\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To use a setter , use the same syntax as when you set a property value, without parentheses:",
      "html": "<p>To use a <em>setter</em>, use the same syntax as when you set a property value, without parentheses:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_setter",
        "syntaxHighlighting": [
          {
            "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n  return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n  this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  myCar.carname = \"Volvo\";\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "_carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Ford\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Volvo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname\n= brand;\u00a0 }\u00a0 get carname() {\nreturn this._carname;\u00a0 }\u00a0 set carname(x) {\nthis._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\nmyCar.carname = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
      "syntax_highlighting": [
        {
          "text": "\n class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  myCar.carname = \"Volvo\";\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "_carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Ford\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Volvo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Car {<br/>\u00a0 constructor(brand) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = brand;<br/>\u00a0 }<br/>\u00a0 get carname() {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span>;<br/>\u00a0 }<br/>\u00a0 set carname(x) {<br/>\u00a0\u00a0\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_carname</span> = x;<br/>\u00a0 }<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCar = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Car(<span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  myCar.<span class=\"jspropertycolor\" style=\"color:black\">carname</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Volvo\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = myCar.<span class=\"jspropertycolor\" style=\"color:black\">carname</span>; </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_setter",
      "syntax_highlighting_data": [
        {
          "text": "\n  class Car {\u00a0 constructor(brand) {\u00a0\u00a0\u00a0 this._carname \n  = brand;\u00a0 }\u00a0 get carname() {\u00a0\u00a0\u00a0 \n  return this._carname;\u00a0 }\u00a0 set carname(x) {\u00a0\u00a0\u00a0 \n  this._carname = x;\u00a0 }}const myCar = new Car(\"Ford\");\n  myCar.carname = \"Volvo\";\n  document.getElementById(\"demo\").innerHTML = myCar.carname; ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "_carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Ford\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Volvo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Hoisting",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Unlike functions, and other JavaScript declarations, class declarations are not hoisted.",
      "html": "<p>Unlike functions, and other JavaScript declarations, class declarations are not hoisted.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "That means that you must declare a class before you can use it:",
      "html": "<p>That means that you must declare a class before you can use it:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_hoisting",
        "syntaxHighlighting": [
          {
            "text": "\n  //You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {\u00a0\n  constructor(brand) {\u00a0\u00a0\u00a0 this.carname = brand;\u00a0\n  }}//Now you can use the class:const myCar = new Car(\"Ford\") ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//You cannot use the class yet.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "//myCar = new Car(\"Ford\") will raise an error.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "class",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "this",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "carname",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "//Now you can use the class:",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Ford\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "//You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {\nconstructor(brand) {\u00a0\u00a0\u00a0 this.carname = brand;\n}}//Now you can use the class:const myCar = new Car(\"Ford\")",
      "syntax_highlighting": [
        {
          "text": "\n //You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {\u00a0\n  constructor(brand) {\u00a0\u00a0\u00a0 this.carname = brand;\u00a0\n  }}//Now you can use the class:const myCar = new Car(\"Ford\") ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//You cannot use the class yet.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "//myCar = new Car(\"Ford\") will raise an error.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "class",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "this",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "carname",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "//Now you can use the class:",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Ford\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">//You cannot use the class yet.<br/></span><span class=\"commentcolor\" style=\"color:slategray\">//myCar = new Car(\"Ford\") will raise an error.<br/></span><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Car {<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  constructor(brand) {<br/>\u00a0\u00a0\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">carname</span> = brand;<br/>\u00a0<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/>}<br/><br/><span class=\"commentcolor\" style=\"color:slategray\">//Now you can use the class:<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myCar = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Car(<span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>) </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_classes_hoisting",
      "syntax_highlighting_data": [
        {
          "text": "\n  //You cannot use the class yet.//myCar = new Car(\"Ford\") will raise an error.class Car {\u00a0\n  constructor(brand) {\u00a0\u00a0\u00a0 this.carname = brand;\u00a0\n  }}//Now you can use the class:const myCar = new Car(\"Ford\") ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//You cannot use the class yet.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "//myCar = new Car(\"Ford\") will raise an error.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "class",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "this",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "carname",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "//Now you can use the class:",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Ford\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top).",
      "html": "<p><strong>Note:</strong> For other declarations, like functions, you will NOT get an \nerror when you try to use it before it is declared, because the default behavior \nof JavaScript declarations are hoisting (moving the declaration to the top).</p>"
    }
  ]
}