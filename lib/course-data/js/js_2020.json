{
  "title": "JavaScript ECMAScript 2020",
  "url": "https://www.w3schools.com/js/js_2020.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "ECMAScript 2020",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Version Numbers",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Old ECMAScript versions was named by numbers: ES5 and ES6.",
      "html": "<p>Old ECMAScript versions was named by numbers: ES5 and ES6.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "From 2016, versions are named by year: ES2016, 2018, 2020 ...",
      "html": "<p>From 2016, versions are named by year: ES2016, 2018, 2020 ...</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "New Features in ES2020",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Warning",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These features are relatively new.",
      "html": "<p>These features are relatively new.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Older browsers may need an alternative code (Polyfill)",
      "html": "<p>Older browsers may need an alternative code (Polyfill)</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript BigInt",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript BigInt variables are used to store big integer values that are too big to be represented by a a normal JavaScript Number .",
      "html": "<p>JavaScript <code>BigInt</code> variables are used to store big integer values\nthat are too big to be represented by a a normal JavaScript <code>Number</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript integers are only accurate up to about 15 digits.",
      "html": "<p>JavaScript integers are only accurate up to about 15 digits.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_inaccurate1",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = 999999999999999;\nlet y = 9999999999999999; // too big\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "999999999999999",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "9999999999999999",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// too big\n ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = 999999999999999;\nlet y = 9999999999999999; // too big",
      "syntax_highlighting": [
        {
          "text": "\nlet x = 999999999999999;\nlet y = 9999999999999999; // too big\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "999999999999999",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "9999999999999999",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// too big\n ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">999999999999999</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = <span class=\"jsnumbercolor\" style=\"color:#905\">9999999999999999</span>; <span class=\"commentcolor\" style=\"color:slategray\">// too big\n </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_inaccurate1",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = 999999999999999;\nlet y = 9999999999999999; // too big\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "999999999999999",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "9999999999999999",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// too big\n ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To create a BigInt , append n to the end of an integer or call BigInt() :",
      "html": "<p>To create a <code>BigInt</code>, append n to the end of an integer or call\n<code>BigInt()</code>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_bigint_create",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1234567890123456789012345",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)",
      "syntax_highlighting": [
        {
          "text": "\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1234567890123456789012345",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = 1234567890123456789012345n;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = BigInt(<span class=\"jsnumbercolor\" style=\"color:#905\">1234567890123456789012345</span>)<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_bigint_create",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1234567890123456789012345",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The JavaScript typeof a BigInt is \"bigint\":",
      "html": "<p>The JavaScript <code>typeof</code> a <code>BigInt</code> is \"bigint\":</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_bigint_typeof",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = BigInt(999999999999999);\nlet type = typeof x;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "999999999999999",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "typeof",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = BigInt(999999999999999);\nlet type = typeof x;",
      "syntax_highlighting": [
        {
          "text": "\nlet x = BigInt(999999999999999);\nlet type = typeof x;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "999999999999999",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "typeof",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = BigInt(<span class=\"jsnumbercolor\" style=\"color:#905\">999999999999999</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> type = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> x;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_numbers_bigint_typeof",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = BigInt(999999999999999);\nlet type = typeof x;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "999999999999999",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "typeof",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "BigInt is supported in all modern browsers since September 2020:",
      "html": "<p><code>BigInt</code> is supported in all modern browsers since September 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 67</td>\n<td>Edge 79</td>\n<td>Firefox 68</td>\n<td>Safari 14</td>\n<td>Opera 54</td>\n</tr>\n<tr>\n<td>May 2018</td>\n<td>Jan 2020</td>\n<td>Jul 2019</td>\n<td>Sep 2020</td>\n<td>Jun 2018</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript String matchAll()",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Before ES2020 there was no string method that could be used to search for all occurrences of a string in a string.",
      "html": "<p>Before ES2020 there was no string method that could be used to search for all occurrences\nof a string in a string.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall",
        "syntaxHighlighting": [
          {
            "text": "\nconst iterator = text.matchAll(\"Cats\");\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "matchAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Cats\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const iterator = text.matchAll(\"Cats\");",
      "syntax_highlighting": [
        {
          "text": "\nconst iterator = text.matchAll(\"Cats\");\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "matchAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Cats\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> iterator = text.<span class=\"jspropertycolor\" style=\"color:black\">matchAll</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Cats\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall",
      "syntax_highlighting_data": [
        {
          "text": "\nconst iterator = text.matchAll(\"Cats\");\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "matchAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Cats\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the parameter is a regular expression, the global flag (g) must be set set, otherwise a TypeError is thrown.",
      "html": "<p>If the parameter is a regular expression, the global flag (g) must be set set, otherwise\na TypeError is thrown.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall2",
        "syntaxHighlighting": [
          {
            "text": "\nconst iterator = text.matchAll(/Cats/g);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "matchAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "/Cats/g",
            "color": "rgb(238, 153, 0)",
            "class": "jsregexpcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const iterator = text.matchAll(/Cats/g);",
      "syntax_highlighting": [
        {
          "text": "\nconst iterator = text.matchAll(/Cats/g);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "matchAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "/Cats/g",
          "color": "#e90",
          "class": [
            "jsregexpcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> iterator = text.<span class=\"jspropertycolor\" style=\"color:black\">matchAll</span>(<span class=\"jsregexpcolor\" style=\"color:#e90\">/Cats/g</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall2",
      "syntax_highlighting_data": [
        {
          "text": "\nconst iterator = text.matchAll(/Cats/g);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "matchAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "/Cats/g",
          "color": "rgb(238, 153, 0)",
          "class": "jsregexpcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you want to search case insensitive, the insensitive flag (i) must be set:",
      "html": "<p>If you want to search case insensitive, the insensitive flag (i) must be set:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall3",
        "syntaxHighlighting": [
          {
            "text": "\nconst iterator = text.matchAll(/Cats/gi);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "matchAll",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "/Cats/gi",
            "color": "rgb(238, 153, 0)",
            "class": "jsregexpcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const iterator = text.matchAll(/Cats/gi);",
      "syntax_highlighting": [
        {
          "text": "\nconst iterator = text.matchAll(/Cats/gi);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "matchAll",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "/Cats/gi",
          "color": "#e90",
          "class": [
            "jsregexpcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> iterator = text.<span class=\"jspropertycolor\" style=\"color:black\">matchAll</span>(<span class=\"jsregexpcolor\" style=\"color:#e90\">/Cats/gi</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_string_matchall3",
      "syntax_highlighting_data": [
        {
          "text": "\nconst iterator = text.matchAll(/Cats/gi);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "matchAll",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "/Cats/gi",
          "color": "rgb(238, 153, 0)",
          "class": "jsregexpcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "ES2021",
          "href": "https://www.w3schools.com/js_2021.asp",
          "title": ""
        }
      ],
      "text": "ES2021 introduced the string method replaceAll().",
      "html": "<p><a href=\"js_2021.asp\">ES2021</a> introduced the string method replaceAll().</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Nullish Coalescing Operator (??)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The ?? operator returns the first argument if it is not nullish ( null or undefined ).",
      "html": "<p>The <code>??</code> operator returns the first argument if it is not <b>nullish</b>\n(<code>null</code> or <code>undefined</code>).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Otherwise it returns the second.",
      "html": "<p>Otherwise it returns the second.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_nullish",
        "syntaxHighlighting": [
          {
            "text": "\nlet name = null;\nlet text = \"missing\";\nlet result = name ?? text;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"missing\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let name = null;\nlet text = \"missing\";\nlet result = name ?? text;",
      "syntax_highlighting": [
        {
          "text": "\nlet name = null;\nlet text = \"missing\";\nlet result = name ?? text;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"missing\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> name = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> text = <span class=\"jsstringcolor\" style=\"color:green\">\"missing\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = name ?? text;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_nullish",
      "syntax_highlighting_data": [
        {
          "text": "\nlet name = null;\nlet text = \"missing\";\nlet result = name ?? text;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"missing\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The nullish operator is supported in all modern browsers since March 2020:",
      "html": "<p>The nullish operator is supported in all modern browsers since March 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 80</td>\n<td>Edge 80</td>\n<td>Firefox 72</td>\n<td>Safari 13.1</td>\n<td>Opera 67</td>\n</tr>\n<tr>\n<td>Feb 2020</td>\n<td>Feb 2020</td>\n<td>Jan 2020</td>\n<td>Mar 2020</td>\n<td>Mar 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Optional Chaining Operator (?.)",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Optional Chaining Operator returns undefined if an object is undefined or null (instead of throwing an error).",
      "html": "<p>The <b>Optional Chaining Operator</b> returns <code>undefined</code> if an object is\n<code>undefined</code> or <code>null</code> (instead of throwing an error).</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_oper_optional_chaining",
        "syntaxHighlighting": [
          {
            "text": "\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\nlet name = car?.name;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Fiat\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"500\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"white\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};\nlet name = car?.name;",
      "syntax_highlighting": [
        {
          "text": "\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\nlet name = car?.name;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Fiat\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"500\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"white\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car = {type:<span class=\"jsstringcolor\" style=\"color:green\">\"Fiat\"</span>, model:<span class=\"jsstringcolor\" style=\"color:green\">\"500\"</span>, color:<span class=\"jsstringcolor\" style=\"color:green\">\"white\"</span>};<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> name = car?.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_oper_optional_chaining",
      "syntax_highlighting_data": [
        {
          "text": "\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\nlet name = car?.name;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Fiat\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"500\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"white\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The ?.= operator is supported in all modern browsers since March 2020:",
      "html": "<p>The <code>?.=</code> operator is supported in all modern browsers since March 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 80</td>\n<td>Edge 80</td>\n<td>Firefox 74</td>\n<td>Safari 13.1</td>\n<td>Opera 67</td>\n</tr>\n<tr>\n<td>Feb 2020</td>\n<td>Feb 2020</td>\n<td>Mar 2020</td>\n<td>Mar 2020</td>\n<td>Mar 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The &&= Operator",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Logical AND Assignment Operator is used between two values.",
      "html": "<p>The <b>Logical AND Assignment Operator</b> is used between two values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the first value is true , the second value is assigned.",
      "html": "<p>If the first value is <code>true</code>, the second value is assigned.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_logical_and_and",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = 10;\nx &&= 5;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = 10;\nx &&= 5;",
      "syntax_highlighting": [
        {
          "text": "\nlet x = 10;\nx &&= 5;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/>\nx &amp;&amp;= <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_logical_and_and",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = 10;\nx &&= 5;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The &&= operator is supported in all modern browsers since September 2020:",
      "html": "<p>The <code>&amp;&amp;=</code> operator is supported in all modern browsers since September 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 85</td>\n<td>Edge 85</td>\n<td>Firefox 79</td>\n<td>Safari 14</td>\n<td>Opera 71</td>\n</tr>\n<tr>\n<td>Aug 2020</td>\n<td>Aug 2020</td>\n<td>Mar 2020</td>\n<td>Sep 2020</td>\n<td>Sep 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The ||= Operator",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Logical OR Assignment Operator is used between two values.",
      "html": "<p>The <b>Logical OR Assignment Operator</b> is used between two values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the first value is false , the second value is assigned.",
      "html": "<p>If the first value is <code>false</code>, the second value is assigned.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_logical_or_or",
        "syntaxHighlighting": [
          {
            "text": "\nlet x = 10;\nx ||= 5;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x = 10;\nx ||= 5;",
      "syntax_highlighting": [
        {
          "text": "\nlet x = 10;\nx ||= 5;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/>\nx ||= <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_logical_or_or",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x = 10;\nx ||= 5;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The ||= operator is supported in all modern browsers since September 2020:",
      "html": "<p>The <code>||=</code> operator is supported in all modern browsers since September 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 85</td>\n<td>Edge 85</td>\n<td>Firefox 79</td>\n<td>Safari 14</td>\n<td>Opera 71</td>\n</tr>\n<tr>\n<td>Aug 2020</td>\n<td>Aug 2020</td>\n<td>Mar 2020</td>\n<td>Sep 2020</td>\n<td>Sep 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The ??= Operator",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Nullish Coalescing Assignment Operator is used between two values.",
      "html": "<p>The <b>Nullish Coalescing Assignment Operator</b> is used between two values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the first value is undefined or null , the second value is assigned.",
      "html": "<p>If the first value is <code>undefined</code> or <code>null</code>, the second value is assigned.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_nullish",
        "syntaxHighlighting": [
          {
            "text": "\nlet x;\nx ??= 5;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x;\nx ??= 5;",
      "syntax_highlighting": [
        {
          "text": "\nlet x;\nx ??= 5;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x;<br/>\nx ??= <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_assign_nullish",
      "syntax_highlighting_data": [
        {
          "text": "\nlet x;\nx ??= 5;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The ??= operator is supported in all modern browsers since September 2020:",
      "html": "<p>The <code>??=</code> operator is supported in all modern browsers since September 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 85</td>\n<td>Edge 85</td>\n<td>Firefox 79</td>\n<td>Safari 14</td>\n<td>Opera 71</td>\n</tr>\n<tr>\n<td>Aug 2020</td>\n<td>Aug 2020</td>\n<td>Mar 2020</td>\n<td>Sep 2020</td>\n<td>Sep 2020</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "JavaScript Promise.allSettled()",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Promise.allSettled() method returns a single Promise from a list of promises.",
      "html": "<p>The <code>Promise.allSettled()</code> method returns a single Promise from a list of promises.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_promise_allsettled",
        "syntaxHighlighting": [
          {
            "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Settle All\nPromise.allSettled([myPromise1, myPromise2]).then((results) =>\n\u00a0\u00a0results.forEach((x) => myDisplay(x.status)),\n);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create a Promise",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"King\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create another Promise",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "100",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Queen\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Settle All",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "allSettled",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "then",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "forEach",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "status",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n\n// Settle All\nPromise.allSettled([myPromise1, myPromise2]).then((results) =>\nresults.forEach((x) => myDisplay(x.status)),\n);",
      "syntax_highlighting": [
        {
          "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Settle All\nPromise.allSettled([myPromise1, myPromise2]).then((results) =>\n\u00a0\u00a0results.forEach((x) => myDisplay(x.status)),\n);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create a Promise",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"King\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create another Promise",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "100",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Queen\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Settle All",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "allSettled",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "then",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "forEach",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "status",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Promise<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myPromise1 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((resolve, reject) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"King\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create another Promise<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myPromise2 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((resolve, reject) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Queen\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Settle All<br/></span>\nPromise.<span class=\"jspropertycolor\" style=\"color:black\">allSettled</span>([myPromise1, myPromise2]).<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>((results) =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0results.<span class=\"jspropertycolor\" style=\"color:black\">forEach</span>((x) =&gt; myDisplay(x.<span class=\"jspropertycolor\" style=\"color:black\">status</span>)),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_promise_allsettled",
      "syntax_highlighting_data": [
        {
          "text": "\n// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\n\u00a0\u00a0setTimeout(resolve, 100, \"Queen\");\n});\n\n// Settle All\nPromise.allSettled([myPromise1, myPromise2]).then((results) =>\n\u00a0\u00a0results.forEach((x) => myDisplay(x.status)),\n);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create a Promise",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"King\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create another Promise",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "100",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Queen\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Settle All",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "allSettled",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "then",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "forEach",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "status",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Promise.allSettled() is supported in all modern browsers since March 2020:",
      "html": "<p><code>Promise.allSettled()</code> is supported in all modern browsers since March 2020:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "browserref",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"browserref notranslate\">\n<tbody><tr style=\"height:50px\">\n<th class=\"bsChrome\" style=\"width:20%;\" title=\"Chrome\"></th>\n<th class=\"bsEdge\" style=\"width:20%;\" title=\"Edge\"></th>\n<th class=\"bsFirefox\" style=\"width:20%;\" title=\"Firefox\"></th>\n<th class=\"bsSafari\" style=\"width:20%;\" title=\"Safari\"></th>\n<th class=\"bsOpera\" style=\"width:19%;\" title=\"Opera\"></th>\n</tr>\n<tr>\n<td>Chrome 76</td>\n<td>Edge 79</td>\n<td>Firefox 71</td>\n<td>Safari 13</td>\n<td>Opera 63</td>\n</tr>\n<tr>\n<td>May 2019</td>\n<td>Nov 2019</td>\n<td>Mar 2020</td>\n<td>Sep 2019</td>\n<td>Aug 2019</td>\n</tr>\n</tbody>\n</table>",
      "code_classes": [
        "browserref",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "browserref",
        "notranslate"
      ],
      "is_notranslate": true
    }
  ]
}