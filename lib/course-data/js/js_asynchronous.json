{
  "title": "JavaScript Asynchronous",
  "url": "https://www.w3schools.com/js/js_asynchronous.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Asynchronous JavaScript",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "\"I will finish later!\"",
      "html": "<p><i>\"I will finish later!\"</i></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Functions running in parallel with other functions are called asynchronous",
      "html": "<p>Functions running in <b>parallel</b> with other functions are called <b>asynchronous</b></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A good example is JavaScript setTimeout()",
      "html": "<p>A good example is JavaScript setTimeout()</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Asynchronous JavaScript",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The examples used in the previous chapter, was very simplified.",
      "html": "<p>The examples used in the previous chapter, was very simplified.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The purpose of the examples was to demonstrate the syntax of callback functions:",
      "html": "<p>The purpose of the examples was to demonstrate the syntax of callback functions:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback4",
        "syntaxHighlighting": [
          {
            "text": "\n  function myDisplayer(something) {\u00a0 document.getElementById(\"demo\").innerHTML \n  = something;}function myCalculator(num1, num2, myCallback) {\u00a0 let sum = num1 + num2;\u00a0 \n  myCallback(sum);}myCalculator(5, 5, myDisplayer);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function myDisplayer(something) {\u00a0 document.getElementById(\"demo\").innerHTML\n= something;}function myCalculator(num1, num2, myCallback) {\u00a0 let sum = num1 + num2;\nmyCallback(sum);}myCalculator(5, 5, myDisplayer);",
      "syntax_highlighting": [
        {
          "text": "\n function myDisplayer(something) {\u00a0 document.getElementById(\"demo\").innerHTML \n  = something;}function myCalculator(num1, num2, myCallback) {\u00a0 let sum = num1 + num2;\u00a0 \n  myCallback(sum);}myCalculator(5, 5, myDisplayer);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myDisplayer(something) {<br/>\u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  = something;<br/>}<br/><br/><span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myCalculator(num1, num2, myCallback) {<br/>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = num1 + num2;<br/>\u00a0 <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  myCallback(sum);<br/>}<br/><br/>myCalculator(<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, myDisplayer);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback4",
      "syntax_highlighting_data": [
        {
          "text": "\n  function myDisplayer(something) {\u00a0 document.getElementById(\"demo\").innerHTML \n  = something;}function myCalculator(num1, num2, myCallback) {\u00a0 let sum = num1 + num2;\u00a0 \n  myCallback(sum);}myCalculator(5, 5, myDisplayer);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example above, myDisplayer is the name of a function.",
      "html": "<p>In the example above, <code>myDisplayer</code> is the name of a function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is passed to myCalculator() as an argument.",
      "html": "<p>It is passed to <code>myCalculator()</code> as an argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the real world, callbacks are most often used with asynchronous functions.",
      "html": "<p>In the real world, callbacks are most often used with asynchronous functions.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A typical example is JavaScript setTimeout() .",
      "html": "<p>A typical example is JavaScript <code>setTimeout()</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Waiting for a Timeout",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When using the JavaScript function setTimeout() , you can specify a callback function to be executed on time-out:",
      "html": "<p>When using the JavaScript function <code>setTimeout()</code>,\nyou can specify a callback function to be executed on time-out:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback5",
        "syntaxHighlighting": [
          {
            "text": "\nsetTimeout(myFunction, 3000);\n\nfunction myFunction() {\n\u00a0 document.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "3000",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"I love You !!\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "setTimeout(myFunction, 3000);\n\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}",
      "syntax_highlighting": [
        {
          "text": "\nsetTimeout(myFunction, 3000);\n\nfunction myFunction() {\n\u00a0 document.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "3000",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"I love You !!\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\nsetTimeout(myFunction, <span class=\"jsnumbercolor\" style=\"color:#905\">3000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"I love You !!\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback5",
      "syntax_highlighting_data": [
        {
          "text": "\nsetTimeout(myFunction, 3000);\n\nfunction myFunction() {\n\u00a0 document.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "3000",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"I love You !!\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example above, myFunction is used as a callback.",
      "html": "<p>In the example above, <code>myFunction</code> is used as a callback.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "myFunction is passed to setTimeout() as an argument.",
      "html": "<p><code>myFunction</code> is passed to <code>setTimeout()</code> as an argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.",
      "html": "<p>3000 is the number of milliseconds before time-out, so\n<code>myFunction()</code> will be called after 3 seconds.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When you pass a function as an argument, remember not to use parenthesis.",
      "html": "<p>When you pass a function as an argument, remember not to use parenthesis.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Right: setTimeout(myFunction, 3000);",
      "html": "<p>Right: setTimeout(myFunction, 3000);</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Wrong: setTimeout(myFunction(), 3000) ;",
      "html": "<p>Wrong: <del>setTimeout(myFunction(), 3000)</del>;</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Instead of passing the name of a function as an argument to another function, you can always pass a whole function instead:",
      "html": "<p>Instead of passing the name of a function as an argument to another function,\nyou can always pass a whole function instead:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback9",
        "syntaxHighlighting": [
          {
            "text": "\nsetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\n\u00a0 document.getElementById(\"demo\").innerHTML = value;\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"I love You !!!\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "3000",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n}",
      "syntax_highlighting": [
        {
          "text": "\nsetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\n\u00a0 document.getElementById(\"demo\").innerHTML = value;\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"I love You !!!\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "3000",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\nsetTimeout(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() { myFunction(<span class=\"jsstringcolor\" style=\"color:green\">\"I love You !!!\"</span>); }, <span class=\"jsnumbercolor\" style=\"color:#905\">3000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction(value) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback9",
      "syntax_highlighting_data": [
        {
          "text": "\nsetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\n\u00a0 document.getElementById(\"demo\").innerHTML = value;\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"I love You !!!\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "3000",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example above, function(){ myFunction(\"I love You !!!\"); } is used as a callback. It is a complete function. The complete function is passed to setTimeout() as an argument.",
      "html": "<p>In the example above, <code>function(){ myFunction(\"I love You !!!\"); }</code>\nis used as a callback. It is a complete function.\nThe complete function is passed to setTimeout() as an argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.",
      "html": "<p>3000 is the number of milliseconds before time-out, so\n<code>myFunction()</code> will be called after 3 seconds.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Waiting for Intervals:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When using the JavaScript function setInterval() , you can specify a callback function to be executed for each interval:",
      "html": "<p>When using the JavaScript function <code>setInterval()</code>,\nyou can specify a callback function to be executed for each interval:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback6",
        "syntaxHighlighting": [
          {
            "text": "\nsetInterval(myFunction, 1000);\n\nfunction myFunction() {\n\u00a0 let d = new Date();\n\u00a0 document.getElementById(\"demo\").innerHTML=\n\u00a0 d.getHours() + \":\" +\n\u00a0 d.getMinutes() + \":\" + \n\u00a0 d.getSeconds();\n}\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "1000",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML=",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getHours",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\":\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getMinutes",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\":\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "getSeconds",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "setInterval(myFunction, 1000);\n\nfunction myFunction() {\nlet d = new Date();\ndocument.getElementById(\"demo\").innerHTML=\nd.getHours() + \":\" +\nd.getMinutes() + \":\" +\nd.getSeconds();\n}",
      "syntax_highlighting": [
        {
          "text": "\nsetInterval(myFunction, 1000);\n\nfunction myFunction() {\n\u00a0 let d = new Date();\n\u00a0 document.getElementById(\"demo\").innerHTML=\n\u00a0 d.getHours() + \":\" +\n\u00a0 d.getMinutes() + \":\" + \n\u00a0 d.getSeconds();\n}\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "1000",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML=",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getHours",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\":\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getMinutes",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\":\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "getSeconds",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\nsetInterval(myFunction, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> d = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Date();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML=</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 d.<span class=\"jspropertycolor\" style=\"color:black\">getHours</span>() + <span class=\"jsstringcolor\" style=\"color:green\">\":\"</span> +<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 d.<span class=\"jspropertycolor\" style=\"color:black\">getMinutes</span>() + <span class=\"jsstringcolor\" style=\"color:green\">\":\"</span> + <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0 d.<span class=\"jspropertycolor\" style=\"color:black\">getSeconds</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_callback6",
      "syntax_highlighting_data": [
        {
          "text": "\nsetInterval(myFunction, 1000);\n\nfunction myFunction() {\n\u00a0 let d = new Date();\n\u00a0 document.getElementById(\"demo\").innerHTML=\n\u00a0 d.getHours() + \":\" +\n\u00a0 d.getMinutes() + \":\" + \n\u00a0 d.getSeconds();\n}\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "1000",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML=",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getHours",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\":\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getMinutes",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\":\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "getSeconds",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example above, myFunction is used as a callback.",
      "html": "<p>In the example above, <code>myFunction</code> is used as a callback.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "myFunction is passed to setInterval() as an argument.",
      "html": "<p><code>myFunction</code> is passed to <code>setInterval()</code> as an argument.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "1000 is the number of milliseconds between intervals, so myFunction() will be called every second.",
      "html": "<p>1000 is the number of milliseconds between intervals, so\n<code>myFunction()</code> will be called every second.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Callback Alternatives",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With asynchronous programming, JavaScript programs can start long-running tasks, and continue running other tasks in parallel.",
      "html": "<p>With asynchronous programming, JavaScript programs can start long-running tasks,\nand continue running other tasks in parallel.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "But, asynchronus programmes are difficult to write and difficult to debug.",
      "html": "<p>But, asynchronus programmes are difficult to write and difficult to debug.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Because of this, most modern asynchronous JavaScript methods don't use callbacks. Instead, in JavaScript, asynchronous programming is solved using Promises instead.",
      "html": "<p>Because of this, most modern asynchronous JavaScript methods don't use callbacks.\nInstead, in JavaScript, asynchronous programming is solved using <b>Promises</b> instead.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You will learn about promises in the next chapter of this tutorial.",
      "html": "<p>You will learn about promises in the next chapter of this tutorial.</p>"
    }
  ]
}