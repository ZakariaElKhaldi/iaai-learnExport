{
  "title": "JavaScript Performance",
  "url": "https://www.w3schools.com/js/js_performance.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "JavaScript Performance",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "How to speed up your JavaScript code.",
      "html": "<p class=\"intro\">How to speed up your JavaScript code.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reduce Activity in Loops",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Loops are often used in programming.",
      "html": "<p>Loops are often used in programming.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Each statement in a loop, including the for statement, is executed for each iteration of the loop.",
      "html": "<p>Each statement in a loop, including the for statement, is executed for each iteration of the \nloop.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Statements or assignments that can be placed outside the loop will make the loop run faster.",
      "html": "<p>Statements or assignments that can be placed outside the loop will make the \nloop run faster. </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nfor (let i = 0; i < arr.length; i++) {\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh",
          "w3-border-red"
        ],
        "isNotranslate": true
      },
      "code": "for (let i = 0; i < arr.length; i++) {",
      "syntax_highlighting": [
        {
          "text": "\nfor (let i = 0; i < arr.length; i++) {\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh w3-border-red\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; arr.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh",
        "w3-border-red"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nfor (let i = 0; i < arr.length; i++) {\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh",
        "w3-border-red"
      ],
      "is_notranslate": true
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nlet l = arr.length;\nfor (let i = 0; i < l; i++) { ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let l = arr.length;\nfor (let i = 0; i < l; i++) {",
      "syntax_highlighting": [
        {
          "text": "\nlet l = arr.length;\nfor (let i = 0; i < l; i++) { ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> l = arr.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; l; i++) { </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nlet l = arr.length;\nfor (let i = 0; i < l; i++) { ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The bad code accesses the length property of an array each time the loop is iterated.",
      "html": "<p>The bad code accesses the length property of an array each time the loop is \niterated.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The better code accesses the length property outside the loop and makes the loop run faster.",
      "html": "<p>The better code accesses the length property outside the loop and makes the \nloop run faster.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reduce DOM Access",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Accessing the HTML DOM is very slow, compared to other JavaScript statements.",
      "html": "<p>Accessing the HTML DOM is very slow, compared to other JavaScript statements.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you expect to access a DOM element several times, access it once, and use it as a local variable:",
      "html": "<p>If you expect to access a DOM element several times, access it once, and use \nit as a local variable:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_element_reference",
        "syntaxHighlighting": [
          {
            "text": "\nconst obj = document.getElementById(\"demo\");obj.innerHTML = \"Hello\";\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"Hello\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const obj = document.getElementById(\"demo\");obj.innerHTML = \"Hello\";",
      "syntax_highlighting": [
        {
          "text": "\nconst obj = document.getElementById(\"demo\");obj.innerHTML = \"Hello\";\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"Hello\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> obj = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>);<br/>obj.<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Hello\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_element_reference",
      "syntax_highlighting_data": [
        {
          "text": "\nconst obj = document.getElementById(\"demo\");obj.innerHTML = \"Hello\";\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"Hello\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Reduce DOM Size",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Keep the number of elements in the HTML DOM small.",
      "html": "<p>Keep the number of elements in the HTML DOM small.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This will always improve page loading, and speed up rendering (page display), especially on smaller devices.",
      "html": "<p>This will always \nimprove page loading, and speed up rendering (page display), especially on smaller devices.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Every attempt to search the DOM (like getElementsByTagName) will benefit from a smaller DOM.",
      "html": "<p>Every attempt to search the DOM (like getElementsByTagName) will benefit \nfrom a smaller DOM.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Avoid Unnecessary Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Don't create new variables if you don't plan to save values.",
      "html": "<p>Don't create new variables if you don't plan to save values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Often you can replace code like this:",
      "html": "<p>Often you can replace code like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nlet fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\" \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;",
      "syntax_highlighting": [
        {
          "text": "\nlet fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\" \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> fullName = firstName + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + lastName;<br/>\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = fullName;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nlet fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\" \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With this:",
      "html": "<p>With this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ndocument.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "getElementById",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"demo\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "innerHTML",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\" \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "document.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;",
      "syntax_highlighting": [
        {
          "text": "\ndocument.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "getElementById",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"demo\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "innerHTML",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\" \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = firstName + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + lastName;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ndocument.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "getElementById",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"demo\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "innerHTML",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\" \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Delay JavaScript Loading",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Putting your scripts at the bottom of the page body lets the browser load the page first.",
      "html": "<p>Putting your scripts at the bottom of the page body lets the browser load the \npage first.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "While a script is downloading, the browser will not start any other downloads. In addition all parsing and rendering activity might be blocked.",
      "html": "<p>While a script is downloading, the browser will not start any other \ndownloads. In addition all parsing and rendering activity might be blocked.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The HTTP specification defines that browsers should not download more than two components in parallel.",
      "html": "<p>The HTTP specification defines that browsers should not download more than \ntwo components in parallel.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "An alternative is to use defer=\"true\" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts.",
      "html": "<p>An alternative is to use <code>defer=\"true\"</code> in the script tag. The \ndefer attribute specifies that the script should be executed after the page has \nfinished parsing, but it only works for external scripts.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If possible, you can add your script to the page by code, after the page has loaded:",
      "html": "<p>If possible, you can add your script to the page by code, after the page has loaded:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "<script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": "window.onload = function() {\u00a0 \nconst element = document.createElement(\"script\");\u00a0 \nelement.src = \"myScript.js\";\u00a0 \ndocument.body.appendChild(element);};",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "onload",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "createElement",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"script\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "src",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"myScript.js\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "body",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "appendChild",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "</script>",
            "color": "rgb(153, 0, 85)",
            "class": "tagnamecolor"
          },
          {
            "text": "<",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          },
          {
            "text": ">",
            "color": "rgb(153, 153, 153)",
            "class": "tagcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "htmlHigh"
        ],
        "isNotranslate": true
      },
      "code": "<script>window.onload = function() {\u00a0 \nconst element = document.createElement(\"script\");\nelement.src = \"myScript.js\";\ndocument.body.appendChild(element);};</script>",
      "syntax_highlighting": [
        {
          "text": "<script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": "window.onload = function() {\u00a0 \nconst element = document.createElement(\"script\");\u00a0 \nelement.src = \"myScript.js\";\u00a0 \ndocument.body.appendChild(element);};",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "onload",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "createElement",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"script\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "src",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"myScript.js\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "body",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "appendChild",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "</script>",
          "color": "#905",
          "class": [
            "tagnamecolor"
          ]
        },
        {
          "text": "<",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        },
        {
          "text": ">",
          "color": "#999",
          "class": [
            "tagcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate htmlHigh\">\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/>window.<span class=\"jspropertycolor\" style=\"color:black\">onload</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/>\u00a0 \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> element = document.<span class=\"jspropertycolor\" style=\"color:black\">createElement</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"script\"</span>);<br/>\u00a0 \nelement.<span class=\"jspropertycolor\" style=\"color:black\">src</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"myScript.js\"</span>;<br/>\u00a0 \ndocument.<span class=\"jspropertycolor\" style=\"color:black\">body</span>.<span class=\"jspropertycolor\" style=\"color:black\">appendChild</span>(element);<br/>};<br/></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span> </div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "<script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": "window.onload = function() {\u00a0 \nconst element = document.createElement(\"script\");\u00a0 \nelement.src = \"myScript.js\";\u00a0 \ndocument.body.appendChild(element);};",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "onload",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "createElement",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"script\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "src",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"myScript.js\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "body",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "appendChild",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "</script>",
          "color": "rgb(153, 0, 85)",
          "class": "tagnamecolor"
        },
        {
          "text": "<",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        },
        {
          "text": ">",
          "color": "rgb(153, 153, 153)",
          "class": "tagcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "htmlHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Avoid Using with",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Avoid using the with keyword. It has a negative effect on speed. It also clutters up JavaScript scopes.",
      "html": "<p>Avoid using the <code>with</code> keyword. It has a negative effect on \nspeed. It also clutters up JavaScript scopes.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The with keyword is not allowed in strict mode.",
      "html": "<p>The <code>with</code> keyword is <strong>not allowed</strong> in strict mode.</p>"
    }
  ]
}