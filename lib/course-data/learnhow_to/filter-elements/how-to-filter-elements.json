{
  "id": "a84c4d32-642a-43cf-a110-d1b841d7861b",
  "title": "How TO - Filter Elements",
  "slug": "how-to-filter-elements",
  "metadata": {
    "description": "Learn about How TO - Filter Elements with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "class",
      "filterdiv",
      "button",
      "elements",
      "show",
      "fruits",
      "classname",
      "element",
      "animals",
      "active"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnHow To",
    "subcategory": "Filter Elements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "How TO - Filter Elements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Learn how to filter a DIV element based on its class name.\nFilter DIV Elements\nShow all\nCars\nAnimals\nFruits\nColors\nBMW\nOrange\nVolvo\nRed\nFord\nBlue\nCat\nDog\nMelon\nKiwi\nBanana\nLemon\nCow\n\nCreate Filterable DIV Elements\nStep 1) Add HTML:\nExample\n<!-- Control buttons -->\n<div id=\"myBtnContainer\">\n<button \n  class=\"btn active\" onclick=\"filterSelection('all')\"> Show all</button>\n<button class=\"btn\" onclick=\"filterSelection('cars')\"> Cars</button>\n<button class=\"btn\" onclick=\"filterSelection('animals')\"> Animals</button>\n<button class=\"btn\" onclick=\"filterSelection('fruits')\"> Fruits</button>\n<button class=\"btn\" onclick=\"filterSelection('colors')\"> Colors</button>\n</div>\n<!-- The filterable elements. Note that \n  some have multiple class names (this can be used if they belong to multiple \n  categories) -->\n<div \n  class=\"container\">\n<div \n  class=\"filterDiv cars\">BMW</div>\n<div class=\"filterDiv colors \n  fruits\">Orange</div>\n<div class=\"filterDiv cars\">Volvo</div>\n<div class=\"filterDiv colors\">Red</div>\n<div class=\"filterDiv cars\">Ford</div>\n<div class=\"filterDiv colors\">Blue</div>\n<div class=\"filterDiv animals\">Cat</div>\n<div class=\"filterDiv \n  animals\">Dog</div>\n<div class=\"filterDiv fruits\">Melon</div>\n<div class=\"filterDiv fruits animals\">Kiwi</div>\n<div class=\"filterDiv \n  fruits\">Banana</div>\n<div class=\"filterDiv fruits\">Lemon</div>\n<div class=\"filterDiv animals\">Cow</div>\n</div>\nStep 2) Add CSS:\nExample\n.container {\noverflow: hidden;\n}\n.filterDiv {\nfloat: left;\nbackground-color: #2196F3;\ncolor: #ffffff;\nwidth: 100px;\nline-height: 100px;\ntext-align: center;\nmargin: 2px;\ndisplay: none; /* Hidden by default */\n}\n/* The \"show\" class is \n  added to the filtered elements */\n.show {\ndisplay: block;\n}\n/* Style the buttons */\n.btn {\nborder: none;\noutline: none;\npadding: 12px 16px;\nbackground-color: \n    #f1f1f1;\ncursor: pointer;\n}\n/* Add a light grey \n    background on mouse-over */\n.btn:hover {\nbackground-color: #ddd;\n}\n/* Add a dark background to \n    the active button */\n.btn.active {\nbackground-color: #666;\ncolor: white;\n}\nStep 3) Add JavaScript:\nExample\nfilterSelection(\"all\")\nfunction filterSelection(c) {\nvar x, i;\nx = document.getElementsByClassName(\"filterDiv\");\nif (c == \"all\") c = \"\";\n// Add the \"show\" class (display:block) to the filtered elements, and remove \n  the \"show\" class from the elements that are not selected\nfor (i = 0; i < x.length; i++) {\nw3RemoveClass(x[i], \n  \"show\");\nif (x[i].className.indexOf(c) > -1) \n  w3AddClass(x[i], \"show\");\n}\n}\n// Show filtered \n  elements\nfunction w3AddClass(element, \n  name) {\nvar i, arr1, arr2;\narr1 = element.className.split(\" \n  \");\narr2 = name.split(\" \");\nfor (i = 0; i < arr2.length; \n  i++) {\nif (arr1.indexOf(arr2[i]) == -1) {\nelement.className += \" \" + arr2[i];\n}\n}\n}\n// Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\nvar i, arr1, arr2;\narr1 = element.className.split(\" \");\narr2 = name.split(\" \");\nfor (i = 0; i < arr2.length; i++) {\nwhile \n  (arr1.indexOf(arr2[i]) > -1) {\narr1.splice(arr1.indexOf(arr2[i]), 1);\n}\n}\nelement.className = arr1.join(\" \");\n}\n// Add active class \n  to the current control button (highlight it)\nvar btnContainer = document.getElementById(\"myBtnContainer\");\nvar btns = \n  btnContainer.getElementsByClassName(\"btn\");\nfor (var i = 0; i < btns.length; i++) \n  {\nbtns[i].addEventListener(\"click\", function() {\nvar current = document.getElementsByClassName(\"active\");\ncurrent[0].className = current[0].className.replace(\" active\", \"\");\nthis.className += \" active\";\n});\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<!-- Control buttons -->\n<div id=\"myBtnContainer\">\n<button \n  class=\"btn active\" onclick=\"filterSelection('all')\"> Show all</button>\n<button class=\"btn\" onclick=\"filterSelection('cars')\"> Cars</button>\n<button class=\"btn\" onclick=\"filterSelection('animals')\"> Animals</button>\n<button class=\"btn\" onclick=\"filterSelection('fruits')\"> Fruits</button>\n<button class=\"btn\" onclick=\"filterSelection('colors')\"> Colors</button>\n</div>\n<!-- The filterable elements. Note that \n  some have multiple class names (this can be used if they belong to multiple \n  categories) -->\n<div \n  class=\"container\">\n<div \n  class=\"filterDiv cars\">BMW</div>\n<div class=\"filterDiv colors \n  fruits\">Orange</div>\n<div class=\"filterDiv cars\">Volvo</div>\n<div class=\"filterDiv colors\">Red</div>\n<div class=\"filterDiv cars\">Ford</div>\n<div class=\"filterDiv colors\">Blue</div>\n<div class=\"filterDiv animals\">Cat</div>\n<div class=\"filterDiv \n  animals\">Dog</div>\n<div class=\"filterDiv fruits\">Melon</div>\n<div class=\"filterDiv fruits animals\">Kiwi</div>\n<div class=\"filterDiv \n  fruits\">Banana</div>\n<div class=\"filterDiv fruits\">Lemon</div>\n<div class=\"filterDiv animals\">Cow</div>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": ".container {\noverflow: hidden;\n}\n.filterDiv {\nfloat: left;\nbackground-color: #2196F3;\ncolor: #ffffff;\nwidth: 100px;\nline-height: 100px;\ntext-align: center;\nmargin: 2px;\ndisplay: none; /* Hidden by default */\n}\n/* The \"show\" class is \n  added to the filtered elements */\n.show {\ndisplay: block;\n}\n/* Style the buttons */\n.btn {\nborder: none;\noutline: none;\npadding: 12px 16px;\nbackground-color: \n    #f1f1f1;\ncursor: pointer;\n}\n/* Add a light grey \n    background on mouse-over */\n.btn:hover {\nbackground-color: #ddd;\n}\n/* Add a dark background to \n    the active button */\n.btn.active {\nbackground-color: #666;\ncolor: white;\n}",
      "language": "css",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "filterSelection(\"all\")\nfunction filterSelection(c) {\nvar x, i;\nx = document.getElementsByClassName(\"filterDiv\");\nif (c == \"all\") c = \"\";\n// Add the \"show\" class (display:block) to the filtered elements, and remove \n  the \"show\" class from the elements that are not selected\nfor (i = 0; i < x.length; i++) {\nw3RemoveClass(x[i], \n  \"show\");\nif (x[i].className.indexOf(c) > -1) \n  w3AddClass(x[i], \"show\");\n}\n}\n// Show filtered \n  elements\nfunction w3AddClass(element, \n  name) {\nvar i, arr1, arr2;\narr1 = element.className.split(\" \n  \");\narr2 = name.split(\" \");\nfor (i = 0; i < arr2.length; \n  i++) {\nif (arr1.indexOf(arr2[i]) == -1) {\nelement.className += \" \" + arr2[i];\n}\n}\n}\n// Hide elements that are not selected\nfunction w3RemoveClass(element, name) {\nvar i, arr1, arr2;\narr1 = element.className.split(\" \");\narr2 = name.split(\" \");\nfor (i = 0; i < arr2.length; i++) {\nwhile \n  (arr1.indexOf(arr2[i]) > -1) {\narr1.splice(arr1.indexOf(arr2[i]), 1);\n}\n}\nelement.className = arr1.join(\" \");\n}\n// Add active class \n  to the current control button (highlight it)\nvar btnContainer = document.getElementById(\"myBtnContainer\");\nvar btns = \n  btnContainer.getElementsByClassName(\"btn\");\nfor (var i = 0; i < btns.length; i++) \n  {\nbtns[i].addEventListener(\"click\", function() {\nvar current = document.getElementsByClassName(\"active\");\ncurrent[0].className = current[0].className.replace(\" active\", \"\");\nthis.className += \" active\";\n});\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!-- Control buttons -->\n<div id=\"myBtnContainer\">\n<button \n  class=\"btn active\" onclick=\"filterSelection('all')\"> Show all</button>\n<button class=\"btn\" onclick=\"filterSelection('cars')\"> Cars</button>\n<button class=\"btn\" onclick=\"filterSelection('animals')\"> Animals</button>\n<button class=\"btn\" onclick=\"filterSelection('fruits')\"> Fruits</button>\n<button class=\"btn\" onclick=\"filterSelection('colors')\"> Colors</button>\n</div>\n# TODO: Complete this line\n  some have multiple class names (this can be used if they belong to multiple \n  categories) -->\n<div \n  class=\"container\">\n<div \n  class=\"filterDiv cars\">BMW</div>\n<div class=\"filterDiv colors \n  fruits\">Orange</div>\n<div class=\"filterDiv cars\">Volvo</div>\n<div class=\"filterDiv colors\">Red</div>\n<div class=\"filterDiv cars\">Ford</div>\n<div class=\"filterDiv colors\">Blue</div>\n<div class=\"filterDiv animals\">Cat</div>\n<div class=\"filterDiv \n  animals\">Dog</div>\n<div class=\"filterDiv fruits\">Melon</div>\n<div class=\"filterDiv fruits animals\">Kiwi</div>\n<div class=\"filterDiv \n  fruits\">Banana</div>\n<div class=\"filterDiv fruits\">Lemon</div>\n<div class=\"filterDiv animals\">Cow</div>\n</div>",
      "solution": "<!-- Control buttons -->\n<div id=\"myBtnContainer\">\n<button \n  class=\"btn active\" onclick=\"filterSelection('all')\"> Show all</button>\n<button class=\"btn\" onclick=\"filterSelection('cars')\"> Cars</button>\n<button class=\"btn\" onclick=\"filterSelection('animals')\"> Animals</button>\n<button class=\"btn\" onclick=\"filterSelection('fruits')\"> Fruits</button>\n<button class=\"btn\" onclick=\"filterSelection('colors')\"> Colors</button>\n</div>\n<!-- The filterable elements. Note that \n  some have multiple class names (this can be used if they belong to multiple \n  categories) -->\n<div \n  class=\"container\">\n<div \n  class=\"filterDiv cars\">BMW</div>\n<div class=\"filterDiv colors \n  fruits\">Orange</div>\n<div class=\"filterDiv cars\">Volvo</div>\n<div class=\"filterDiv colors\">Red</div>\n<div class=\"filterDiv cars\">Ford</div>\n<div class=\"filterDiv colors\">Blue</div>\n<div class=\"filterDiv animals\">Cat</div>\n<div class=\"filterDiv \n  animals\">Dog</div>\n<div class=\"filterDiv fruits\">Melon</div>\n<div class=\"filterDiv fruits animals\">Kiwi</div>\n<div class=\"filterDiv \n  fruits\">Banana</div>\n<div class=\"filterDiv fruits\">Lemon</div>\n<div class=\"filterDiv animals\">Cow</div>\n</div>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": ".container {\noverflow: hidden;\n}\n.filterDiv {\nfloat: left;\nbackground-color: #2196F3;\ncolor: #ffffff;\nwidth: 100px;\nline-height: 100px;\ntext-align: center;\nmargin: 2px;\ndisplay: none; /* Hidden by default */\n}\n/* The \"show\" class is \n  added to the filtered elements */\n.show {\ndisplay: block;\n}\n/* Style the buttons */\n.btn {\nborder: none;\noutline: none;\npadding: 12px 16px;\nbackground-color: \n    #f1f1f1;\n# TODO: Complete this line\n}\n/* Add a light grey \n    background on mouse-over */\n.btn:hover {\nbackground-color: #ddd;\n}\n/* Add a dark background to \n    the active button */\n.btn.active {\nbackground-color: #666;\ncolor: white;\n}",
      "solution": ".container {\noverflow: hidden;\n}\n.filterDiv {\nfloat: left;\nbackground-color: #2196F3;\ncolor: #ffffff;\nwidth: 100px;\nline-height: 100px;\ntext-align: center;\nmargin: 2px;\ndisplay: none; /* Hidden by default */\n}\n/* The \"show\" class is \n  added to the filtered elements */\n.show {\ndisplay: block;\n}\n/* Style the buttons */\n.btn {\nborder: none;\noutline: none;\npadding: 12px 16px;\nbackground-color: \n    #f1f1f1;\ncursor: pointer;\n}\n/* Add a light grey \n    background on mouse-over */\n.btn:hover {\nbackground-color: #ddd;\n}\n/* Add a dark background to \n    the active button */\n.btn.active {\nbackground-color: #666;\ncolor: white;\n}"
    }
  ],
  "related_topics": [
    {
      "id": "acb2c50e-d6ad-4485-a513-37d017ab2ab8",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "aa794426-3205-429e-9720-14330b62225c",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "44ee4ebf-e174-414b-b18a-203c51b16239",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is class?",
      "options": [
        "added to the filtered elements */",
        "None of the above.",
        "not selected\nfor (i = 0; i < x",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of class is 'added to the filtered elements */'."
    },
    {
      "question": "What is class from the elements that?",
      "options": [
        "None of the above.",
        "added to the filtered elements */",
        "not selected\nfor (i = 0; i < x",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of class from the elements that is 'not selected\nfor (i = 0; i < x'."
    }
  ],
  "summary": "This tutorial covers How TO - Filter Elements concepts and techniques. You'll learn how to use How TO - Filter Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of How TO - Filter Elements and how to apply it in your projects."
}