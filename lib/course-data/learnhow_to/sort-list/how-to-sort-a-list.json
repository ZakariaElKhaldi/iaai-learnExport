{
  "id": "9698e58a-3e04-48e0-81c4-9b8b24dc8310",
  "title": "How TO - Sort a List",
  "slug": "how-to-sort-a-list",
  "metadata": {
    "description": "Learn about How TO - Sort a List with clear explanations and practical examples.",
    "keywords": [
      "switching",
      "list",
      "switch",
      "shouldswitch",
      "true",
      "loop",
      "done",
      "innerhtml",
      "sort",
      "break"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnHow To",
    "subcategory": "Sort List"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "How TO - Sort a List",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Learn how to sort an HTML list, using JavaScript.\nClick the button to sort the list alphabetically:\nSort\nOslo\nStockholm\nHelsinki\nBerlin\nRome\nMadrid\n\nCreating a Sort Function\nExample\n<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortList() {\nvar list, i, switching, b, shouldSwitch;\nlist = \n  document.getElementById(\"id01\");\nswitching = true;\n/* Make \n  a loop that will continue until\nno switching has been done: */\nwhile (switching) {\n// Start by saying: no switching is \n  done:\nswitching = false;\nb = \n  list.getElementsByTagName(\"LI\");\n// Loop through all \n  list items:\nfor (i = 0; i < (b.length - 1); i++) {\n// Start by saying there should be no switching:\nshouldSwitch = false;\n/* Check if the \n  item should\nswitch place with the current \n  item: */\nif (b[i].innerHTML.toLowerCase() > \n  b[i + 1].innerHTML.toLowerCase()) {\n/* If \nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark the switch as done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n}\n}\n}\n</script>\n\nSorting Ascending and Descending\nThe first time you click the button, the sorting direction is ascending (A to Z).\nClick again, and the sorting direction will be descending (Z to A):\nSort\nOslo\nStockholm\nHelsinki\nBerlin\nRome\nMadrid\nExample\n<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortListDir() {\nvar list, i, switching, b, shouldSwitch, dir, switchcount = 0;\nlist \n  = document.getElementById(\"id01\");\nswitching = true;\n// Set \n  the sorting direction to ascending:\ndir = \"asc\";\n// Make a \n  loop that will continue until no switching has been done:\nwhile \n  (switching) {\n// Start by saying: no switching is done:\nswitching = false;\nb = list.getElementsByTagName(\"LI\");\n// Loop through all list-items:\nfor (i = 0; i < (b.length \n  - 1); i++) {\n// Start by saying there should \n  be no switching:\nshouldSwitch = false;\n/* Check if the \nbased on the sorting direction (asc or desc): */\nif (dir == \"asc\") {\nif (b[i].innerHTML.toLowerCase() \n  > b[i + 1].innerHTML.toLowerCase()) {\n/* If \nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n} else if (dir == \"desc\") {\nif \n  (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {\n/* If \nmark as a switch and break the loop: */\nshouldSwitch= true;\nbreak;\n}\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark that a switch has been done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n// Each time a switch is \n  done, increase switchcount by 1:\nswitchcount \n  ++;\n} else {\n/* If no \n  switching has been done AND the direction is \"asc\",\nset the direction to \"desc\" and run the while loop again. */\nif (switchcount == 0 && dir == \"asc\") {\ndir = \"desc\";\nswitching = true;\n}\n}\n}\n}\n</script>\n\nSort List Numerically\nExample\nif (Number(b[i].innerHTML) > Number(b[i + 1].innerHTML)) {\nshouldSwitch =\u00a0 true;\nbreak;\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortList() {\nvar list, i, switching, b, shouldSwitch;\nlist = \n  document.getElementById(\"id01\");\nswitching = true;\n/* Make \n  a loop that will continue until\nno switching has been done: */\nwhile (switching) {\n// Start by saying: no switching is \n  done:\nswitching = false;\nb = \n  list.getElementsByTagName(\"LI\");\n// Loop through all \n  list items:\nfor (i = 0; i < (b.length - 1); i++) {\n// Start by saying there should be no switching:\nshouldSwitch = false;\n/* Check if the next \n  item should\nswitch place with the current \n  item: */\nif (b[i].innerHTML.toLowerCase() > \n  b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark the switch as done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n}\n}\n}\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortListDir() {\nvar list, i, switching, b, shouldSwitch, dir, switchcount = 0;\nlist \n  = document.getElementById(\"id01\");\nswitching = true;\n// Set \n  the sorting direction to ascending:\ndir = \"asc\";\n// Make a \n  loop that will continue until no switching has been done:\nwhile \n  (switching) {\n// Start by saying: no switching is done:\nswitching = false;\nb = list.getElementsByTagName(\"LI\");\n// Loop through all list-items:\nfor (i = 0; i < (b.length \n  - 1); i++) {\n// Start by saying there should \n  be no switching:\nshouldSwitch = false;\n/* Check if the next item should switch place with the current item,\nbased on the sorting direction (asc or desc): */\nif (dir == \"asc\") {\nif (b[i].innerHTML.toLowerCase() \n  > b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n} else if (dir == \"desc\") {\nif \n  (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically higher than current item,\nmark as a switch and break the loop: */\nshouldSwitch= true;\nbreak;\n}\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark that a switch has been done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n// Each time a switch is \n  done, increase switchcount by 1:\nswitchcount \n  ++;\n} else {\n/* If no \n  switching has been done AND the direction is \"asc\",\nset the direction to \"desc\" and run the while loop again. */\nif (switchcount == 0 && dir == \"asc\") {\ndir = \"desc\";\nswitching = true;\n}\n}\n}\n}\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "if (Number(b[i].innerHTML) > Number(b[i + 1].innerHTML)) {\nshouldSwitch =\u00a0 true;\nbreak;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortList() {\nvar list, i, switching, b, shouldSwitch;\nlist = \n  document.getElementById(\"id01\");\nswitching = true;\n/* Make \n  a loop that will continue until\nno switching has been done: */\nwhile (switching) {\n// Start by saying: no switching is \n  done:\nswitching = false;\nb = \n  list.getElementsByTagName(\"LI\");\n// Loop through all \n  list items:\nfor (i = 0; i < (b.length - 1); i++) {\n// Start by saying there should be no switching:\nshouldSwitch = false;\n/* Check if the next \n  item should\nswitch place with the current \n  item: */\nif (b[i].innerHTML.toLowerCase() > \n  b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n}\nif (shouldSwitch) {\n# TODO: Complete this line\nand mark the switch as done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n}\n}\n}\n</script>",
      "solution": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortList() {\nvar list, i, switching, b, shouldSwitch;\nlist = \n  document.getElementById(\"id01\");\nswitching = true;\n/* Make \n  a loop that will continue until\nno switching has been done: */\nwhile (switching) {\n// Start by saying: no switching is \n  done:\nswitching = false;\nb = \n  list.getElementsByTagName(\"LI\");\n// Loop through all \n  list items:\nfor (i = 0; i < (b.length - 1); i++) {\n// Start by saying there should be no switching:\nshouldSwitch = false;\n/* Check if the next \n  item should\nswitch place with the current \n  item: */\nif (b[i].innerHTML.toLowerCase() > \n  b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark the switch as done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n}\n}\n}\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortListDir() {\nvar list, i, switching, b, shouldSwitch, dir, switchcount = 0;\nlist \n  = document.getElementById(\"id01\");\nswitching = true;\n// Set \n  the sorting direction to ascending:\ndir = \"asc\";\n// Make a \n  loop that will continue until no switching has been done:\nwhile \n  (switching) {\n// Start by saying: no switching is done:\nswitching = false;\nb = list.getElementsByTagName(\"LI\");\n// Loop through all list-items:\nfor (i = 0; i < (b.length \n  - 1); i++) {\n// Start by saying there should \n  be no switching:\nshouldSwitch = false;\n/* Check if the next item should switch place with the current item,\nbased on the sorting direction (asc or desc): */\nif (dir == \"asc\") {\nif (b[i].innerHTML.toLowerCase() \n  > b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n} else if (dir == \"desc\") {\nif \n  (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically higher than current item,\nmark as a switch and break the loop: */\nshouldSwitch= true;\nbreak;\n}\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark that a switch has been done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n// Each time a switch is \n  done, increase switchcount by 1:\nswitchcount \n  ++;\n} else {\n/* If no \n  switching has been done AND the direction is \"asc\",\nset the direction to \"desc\" and run the while loop again. */\nif (switchcount == 0 && dir == \"asc\") {\ndir = \"desc\";\n# TODO: Complete this line\n}\n}\n}\n}\n</script>",
      "solution": "<ul id=\"id01\">\n<li>Oslo</li>\n<li>Stockholm</li>\n<li>Helsinki</li>\n<li>Berlin</li>\n<li>Rome</li>\n<li>Madrid</li>\n</ul>\n<script>\nfunction sortListDir() {\nvar list, i, switching, b, shouldSwitch, dir, switchcount = 0;\nlist \n  = document.getElementById(\"id01\");\nswitching = true;\n// Set \n  the sorting direction to ascending:\ndir = \"asc\";\n// Make a \n  loop that will continue until no switching has been done:\nwhile \n  (switching) {\n// Start by saying: no switching is done:\nswitching = false;\nb = list.getElementsByTagName(\"LI\");\n// Loop through all list-items:\nfor (i = 0; i < (b.length \n  - 1); i++) {\n// Start by saying there should \n  be no switching:\nshouldSwitch = false;\n/* Check if the next item should switch place with the current item,\nbased on the sorting direction (asc or desc): */\nif (dir == \"asc\") {\nif (b[i].innerHTML.toLowerCase() \n  > b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically lower than current item,\nmark as a switch and break the loop: */\nshouldSwitch = true;\nbreak;\n}\n} else if (dir == \"desc\") {\nif \n  (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {\n/* If next item is alphabetically higher than current item,\nmark as a switch and break the loop: */\nshouldSwitch= true;\nbreak;\n}\n}\n}\nif (shouldSwitch) {\n/* If a switch has been marked, make the switch\nand mark that a switch has been done: */\nb[i].parentNode.insertBefore(b[i + 1], b[i]);\nswitching = true;\n// Each time a switch is \n  done, increase switchcount by 1:\nswitchcount \n  ++;\n} else {\n/* If no \n  switching has been done AND the direction is \"asc\",\nset the direction to \"desc\" and run the while loop again. */\nif (switchcount == 0 && dir == \"asc\") {\ndir = \"desc\";\nswitching = true;\n}\n}\n}\n}\n</script>"
    }
  ],
  "related_topics": [
    {
      "id": "a2877e83-6931-4de2-bb9d-b7f39c4adbdf",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c8d4b398-e54f-44bc-9425-41c3101db84d",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3a34f9fb-4e14-4164-b287-16bf971a0c94",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is no switching?",
      "options": [
        "None of the above.",
        "ascending (A to Z)",
        "done:\nswitching = false;\nb = \n  list",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of no switching is 'done:\nswitching = false;\nb = \n  list'."
    },
    {
      "question": "What is the sorting direction?",
      "options": [
        "done:\nswitching = false;\nb = \n  list",
        "None of the above.",
        "ascending (A to Z)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of the sorting direction is 'ascending (A to Z)'."
    }
  ],
  "summary": "This tutorial covers How TO - Sort a List concepts and techniques. You'll learn how to use How TO - Sort a List effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of How TO - Sort a List and how to apply it in your projects."
}