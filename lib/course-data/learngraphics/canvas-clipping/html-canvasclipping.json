{
  "id": "ad6951bd-2219-4fa7-b6c7-3d316f3a6b83",
  "title": "HTML CanvasClipping",
  "slug": "html-canvasclipping",
  "metadata": {
    "description": "Learn about HTML CanvasClipping with clear explanations and practical examples.",
    "keywords": [
      "c",
      "canvas",
      "clipping",
      "region",
      "const",
      "script",
      "create",
      "rectangles",
      "clip",
      "draw",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGraphics",
    "subcategory": "Canvas Clipping"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "HTML Canvas\nClipping",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The clip() Method\nThe\nclip()\nmethod turns the current path \ninto the current clipping region.\nWhen a region is clipped, future drawing is only visible inside the clipped region.\nThe\nclip()\nmethod has the following parameters:\nParameter\nDescription\nfillrule\nIs a point inside or outside the \n    clipping region? Possible values: nonzero|evenodd\npath\nA path to use as the clipping region\nLet's look at some examples:\nExample\nFirst, create a circular clipping region. Then draw two rectangles;  \nonly those parts that lies inside the clipping region are visible:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a circular \n  clipping region\nctx.beginPath();\nctx.arc(100, 75, 70, 0, Math.PI * 2);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>\n\nExample\nFirst, create a triangle-shaped clipping region. Then draw two rectangles;  \nonly those parts that lies inside the clipping region are visible:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a \n  triangle-shaped clipping region\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>\n\nExample\nFirst, create a circular clipping region. Then draw an image onto the canvas; again -  \nonly those parts that lies inside the clipping region are visible:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = \n  document.getElementById(\"scream\");\nimage.addEventListener(\"load\", (e) \n  => {\n// Create a circular clipping region\nctx.beginPath();\nctx.arc(110, 145, 75, 0, Math.PI * 2);\nctx.clip();\n// Draw \n  image onto canvas\nctx.drawImage(image, 0, 0);\n});\n</script>\n\nExample\nFirst, we save two rectangles to a Path2D() object, this will be the clipping \nregion. The \"evenodd\" rule creates a hole where the clipping rectangles \nintersect: If we had used the default \"nonzero\" rule, there would be no hole:\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create clipping path \n  (two rectangles)\nlet r = new Path2D();\nr.rect(80,10, 45,130);\nr.rect(40,50, 120,50);\nctx.clip(r, \"evenodd\");\n// Draw a rectangle\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 300, 150);\n</script>\n\nExample\nSame example as above, but with the \"nonzero\" rule (does not create a hole where the clipping rectangles \nintersect):\nYour browser does not support the HTML5 canvas tag.\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create clipping path \n  (two rectangles)\nlet r = new Path2D();\nr.rect(80,10, 45,130);\nr.rect(40,50, 120,50);\nctx.clip(r, \"nonzero\");\n// Draw a rectangle\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 300, 150);\n</script>\n\nSee Also:\n' Full Canvas Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a circular \n  clipping region\nctx.beginPath();\nctx.arc(100, 75, 70, 0, Math.PI * 2);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a \n  triangle-shaped clipping region\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = \n  document.getElementById(\"scream\");\nimage.addEventListener(\"load\", (e) \n  => {\n// Create a circular clipping region\nctx.beginPath();\nctx.arc(110, 145, 75, 0, Math.PI * 2);\nctx.clip();\n// Draw \n  image onto canvas\nctx.drawImage(image, 0, 0);\n});\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create clipping path \n  (two rectangles)\nlet r = new Path2D();\nr.rect(80,10, 45,130);\nr.rect(40,50, 120,50);\nctx.clip(r, \"evenodd\");\n// Draw a rectangle\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 300, 150);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create clipping path \n  (two rectangles)\nlet r = new Path2D();\nr.rect(80,10, 45,130);\nr.rect(40,50, 120,50);\nctx.clip(r, \"nonzero\");\n// Draw a rectangle\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 300, 150);\n</script>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a circular \n  clipping region\nctx.beginPath();\nctx.arc(100, 75, 70, 0, Math.PI * 2);\n# TODO: Complete this line\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>",
      "solution": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a circular \n  clipping region\nctx.beginPath();\nctx.arc(100, 75, 70, 0, Math.PI * 2);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a \n  triangle-shaped clipping region\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\n# TODO: Complete this line\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>",
      "solution": "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n// Create a \n  triangle-shaped clipping region\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\nctx.clip();\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, \n  90, 90);\n</script>"
    }
  ],
  "related_topics": [
    {
      "id": "3936a7e1-9007-4948-9f59-6063d690036d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b58fa9ba-a31c-45c1-aab9-e86ad13cebc5",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8770ab98-ffb0-48ae-ac5b-8a5205698009",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is When a region?",
      "options": [
        "None of the above.",
        "visible:\nYour browser does not support the HTML5 canvas tag",
        "None of the above.",
        "clipped"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of When a region is 'clipped'."
    },
    {
      "question": "What is only those parts that lies inside the clipping region?",
      "options": [
        "None of the above.",
        "clipped",
        "None of the above.",
        "visible:\nYour browser does not support the HTML5 canvas tag"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of only those parts that lies inside the clipping region is 'visible:\nYour browser does not support the HTML5 canvas tag'."
    }
  ],
  "summary": "This tutorial covers HTML CanvasClipping concepts and techniques. You'll learn how to use HTML CanvasClipping effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of HTML CanvasClipping and how to apply it in your projects."
}