{
  "id": "29b1b23f-1dff-43b0-ad89-0b23757fbb8b",
  "title": "JavaScriptString Methods",
  "slug": "javascriptstring-methods",
  "metadata": {
    "description": "Learn about JavaScriptString Methods with clear explanations and practical examples.",
    "keywords": [
      "string",
      "text",
      "method",
      "javascript",
      "example",
      "slice",
      "replace",
      "position",
      "hello",
      "world"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 9,
    "category": "LearnJSON",
    "subcategory": "JS String Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nString Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Basic String Methods\nJavascript strings are primitive and immutable:\nAll string methods produce a new string without altering the original string.\nString length\nString charAt()\nString charCodeAt()\nString at()\nString [ ]\nString slice()\nString substring()\nString substr()\nSee Also:\nString Search Methods\nString Templates\nString toUpperCase()\nString toLowerCase()\nString concat()\nString trim()\nString trimStart()\nString trimEnd()\nString padStart()\nString padEnd()\nString repeat()\nString replace()\nString replaceAll()\nString split()\nJavaScript String Length\nThe\nlength\nproperty returns the length of a string:\nExample\nlet text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;\n\nExtracting String Characters\nThere are 4 methods for extracting string characters:\nThe\nat(\nposition\n)\nMethod\nThe\ncharAt(\nposition\n)\nMethod\nThe\ncharCodeAt(\nposition\n)\nMethod\nUsing property access [] like in arrays\nJavaScript String charAt()\nThe\ncharAt()\nmethod returns the character at a specified \nindex (position) in a string:\nExample\nlet text = \"HELLO WORLD\";\nlet char = text.charAt(0);\n\nJavaScript String charCodeAt()\nThe\ncharCodeAt()\nmethod returns the code of the character \nat a specified index in a string:\nThe method returns a UTF-16 code (an integer between 0 and 65535).\nExample\nlet text = \"HELLO WORLD\";\nlet char = text.charCodeAt(0);\n\nJavaScript String at()\nES2022\nintroduced the string method\nat()\n:\nExamples\nGet the third letter of name:\nconst name = \"\";\nlet letter = name.at(2);\n\nGet the third letter of name:\nconst name = \"\";\nlet letter = name[2];\n\nThe\nat()\nmethod returns the character at a specified index (position) in a string.\nThe\nat()\nmethod is supported in all modern browsers since March 2022:\nNote\nThe\nat()\nmethod is a new addition to JavaScript.\nIt allows the use of negative indexes while\ncharAt()\ndo not.\nNow you can use\nmyString.at(-2)\ninstead of\ncharAt(myString.length-2)\n.\nBrowser Support\nat()\nis an ES2022 feature.\nJavaScript 2022 (ES2022) is supported in all modern browsers since March 2023:\nChrome 94\nEdge 94\nFirefox 93\nSafari 16.4\nOpera 79\nSep 2021\nSep 2021\nOct 2021\nMar 2023\nOct 2021\nProperty Access [ ]\nExample\nlet text = \"HELLO WORLD\";\nlet char = text[0];\n\nNote\nProperty access might be a little\nunpredictable:\nIt makes strings look like arrays (but they are not)\nIf no character is found, [ ] returns undefined, while charAt() returns an empty string.\nIt is read only. str[0] = \"A\" gives no error (but does not work!)\nExample\nlet text = \"HELLO WORLD\";\ntext[0] = \"A\";\u00a0\u00a0\u00a0\u00a0// Gives no error, but does not work\n\nExtracting String Parts\nThere are 3 methods for extracting a part of a string:\nslice(\nstart\n,\nend\n)\nsubstring(\nstart\n,\nend\n)\nsubstr(\nstart\n,\nlength\n)\nJavaScript String slice()\nslice()\nextracts a part of a string and returns the \nextracted part in a new string.\nThe method takes 2 parameters: start position, and end position (end not included).\nExample\nSlice out a portion of a string from position 7 to position 13:\nlet text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7, 13);\n\nNote\nJavaScript counts positions from zero.\nFirst position is 0.\nSecond position is 1.\nExamples\nIf you omit the second parameter, the method will slice out the rest of the string:\nlet text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7);\n\nIf a parameter is negative, the position is counted from the end of the string:\nlet text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(-12);\n\nThis example slices out a portion of a string from position -12 to position -6:\nlet text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(-12, -6);\n\nJavaScript String substring()\nsubstring()\nis similar to\nslice()\n.\nThe difference is that start and end values less than 0 are treated as 0 in\nsubstring()\n.\nExample\nlet str = \"Apple, Banana, Kiwi\";\nlet part = str.substring(7, 13);\n\nIf you omit the second parameter,\nsubstring()\nwill slice out the rest of the \nstring.\nJavaScript String substr()\nsubstr()\nis similar to\nslice()\n.\nThe difference is \nthat the second parameter specifies the\nlength\nof the extracted part.\nWarning\nThe\nsubstr()\nmethod is removed (deprecated) in the latest JavaScript standard.\nUse\nsubstring()\nor\nslice()\ninstead.\nExample\nlet str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7, 6);\n\nIf you omit the second parameter,\nsubstr()\nwill slice out the rest of the \nstring.\nExample\nlet str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7);\n\nIf the first parameter is negative, the position counts from the end of the \nstring.\nExample\nlet str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(-4);\n\nConverting to Upper and Lower Case\nA string is converted to upper case with\ntoUpperCase()\n:\nA string is converted to lower case with\ntoLowerCase()\n:\nJavaScript String toUpperCase()\nExample\nlet text1 = \"Hello World!\";\nlet text2 = text1.toUpperCase();\n\nJavaScript String toLowerCase()\nExample\nlet text1 = \"Hello World!\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // String\nlet text2 = text1.toLowerCase();\u00a0\u00a0// text2 is text1 \nconverted to lower\n\nJavaScript String concat()\nconcat()\njoins two or more strings:\nExample\nlet text1 = \"Hello\";\nlet text2 = \"World\";\nlet text3 = text1.concat(\" \", text2);\n\nThe\nconcat()\nmethod can be used instead of the plus operator. \nThese two lines do the same:\nExample\ntext = \"Hello\" + \" \" + \"World!\";\ntext = \"Hello\".concat(\" \", \"World!\");\nNote\nAll string methods return a new string. They don't modify the original string.\nFormally said:\nStrings are immutable: Strings cannot be changed, only replaced.\nJavaScript String trim()\nThe\ntrim()\nmethod removes whitespace from both sides of a string:\nExample\nlet text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0 Hello World! \u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trim();\n\nJavaScript String trimStart()\nECMAScript 2019\nadded the String method\ntrimStart()\nto JavaScript.\nThe\ntrimStart()\nmethod works like\ntrim()\n, but removes whitespace only from the start of a string.\nExample\nlet text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimStart();\n\nJavaScript String\ntrimStart()\nis supported in all modern browsers since January 2020:\nChrome 66\nEdge 79\nFirefox 61\nSafari 12\nOpera 50\nApr 2018\nJan 2020\nJun 2018\nSep 2018\nMay 2018\nJavaScript String trimEnd()\nECMAScript 2019\nadded the string method\ntrimEnd()\nto JavaScript.\nThe\ntrimEnd()\nmethod works like\ntrim()\n, but removes whitespace only from the end of a string.\nExample\nlet text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimEnd();\n\nJavaScript String\ntrimEnd()\nis supported in all modern browsers since January 2020:\nChrome 66\nEdge 79\nFirefox 61\nSafari 12\nOpera 50\nApr 2018\nJan 2020\nJun 2018\nSep 2018\nMay 2018\nJavaScript String Padding\nECMAScript 2017\nadded two new string methods to JavaScript:\npadStart()\nand\npadEnd()\nto support padding at the beginning and at the end of a string.\nJavaScript String padStart()\nThe\npadStart()\nmethod pads a string from the start.\nIt pads a string with another string (multiple times) until it reaches a given length.\nExamples\nPad a string with \"0\" until it reaches the length 4:\nlet text = \"5\";\nlet padded = text.padStart(4,\"0\");\n\nPad a string with \"x\" until it reaches the length 4:\nlet text = \"5\";\nlet padded = text.padStart(4,\"x\");\n\nNote\nThe\npadStart()\nmethod is a string method.\nTo pad a number, convert the number to a string first.\nSee the example below.\nExample\nlet numb = 5;\nlet text = numb.toString();\nlet padded = text.padStart(4,\"0\");\n\nBrowser Support\npadStart()\nis an\nECMAScript 2017\nfeature.\nES2017 is supported in all modern browsers since September 2017:\nChrome 58\nEdge 15\nFirefox 52\nSafari 11\nOpera 45\nApr 2017\nApr 2017\nMar 2017\nSep 2017\nMay 2017\npadStart()\nis not supported in Internet Explorer.\nJavaScript String padEnd()\nThe\npadEnd()\nmethod pads a string from the end.\nIt pads a string with another string (multiple times) until it reaches a given length.\nExamples\nlet text = \"5\";\nlet padded = text.padEnd(4,\"0\");\n\nlet text = \"5\";\nlet padded = text.padEnd(4,\"x\");\n\nNote\nThe\npadEnd()\nmethod is a string method.\nTo pad a number, convert the number to a string first.\nSee the example below.\nExample\nlet numb = 5;\nlet text = numb.toString();\nlet padded = text.padEnd(4,\"0\");\n\nBrowser Support\npadEnd()\nis an\nECMAScript 2017\nfeature.\nES2017 is supported in all modern browsers since September 2017:\nChrome 58\nEdge 15\nFirefox 52\nSafari 11\nOpera 45\nApr 2017\nApr 2017\nMar 2017\nSep 2017\nMay 2017\npadEnd()\nis not supported in Internet Explorer.\nJavaScript String repeat()\nThe\nrepeat()\nmethod returns a string with a number of copies of a string.\nThe\nrepeat()\nmethod returns a new string.\nThe\nrepeat()\nmethod does not change the original string.\nExamples\nCreate copies of a text:\nlet text = \"Hello world!\";\nlet result = text.repeat(2);\n\nlet text = \"Hello world!\";\nlet result = text.repeat(4);\n\nSyntax\nstring\n.repeat(\ncount\n)\nParameters\nParameter\nDescription\ncount\nRequired.\nThe number of copies wanted.\nReturn Value\nType\nDescription\nString\nA new string containing the copies.\nBrowser Support\nrepeat()\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nrepeat()\nis not supported in Internet Explorer.\nReplacing String Content\nThe\nreplace()\nmethod replaces a specified value with another \nvalue in a string:\nExample\nlet text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"\");\n\nNote\nThe\nreplace()\nmethod does not change the string it is called on.\nThe\nreplace()\nmethod returns a new string.\nThe\nreplace()\nmethod replaces\nonly the first\nmatch\nIf you want to replace all matches, use a regular expression with the /g flag set. See examples below.\nBy default, the\nreplace()\nmethod replaces\nonly the first\nmatch:\nExample\nlet text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"\");\n\nBy default, the\nreplace()\nmethod is case sensitive. Writing MICROSOFT (with \nupper-case) will not work:\nExample\nlet text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"MICROSOFT\", \"\");\n\nTo replace case insensitive, use a\nregular expression\nwith an\n/i\nflag (insensitive):\nExample\nlet text = \"Please visit Microsoft!\";\nlet newText = text.replace(/MICROSOFT/i, \"\");\n\nNote\nRegular expressions are written without quotes.\nTo replace all matches, use a\nregular expression\nwith a\n/g\nflag (global match):\nExample\nlet text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(/Microsoft/g, \"\");\n\nNote\nYou will learn a lot more about regular expressions in the chapter\nJavaScript Regular \nExpressions\n.\nJavaScript String ReplaceAll()\nIn 2021, JavaScript introduced the string method\nreplaceAll()\n:\nExample\ntext = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");\n\nThe\nreplaceAll()\nmethod allows you to specify a\nregular expression instead of a string to be replaced.\nIf the parameter is a regular expression, the global flag (g) must be set, otherwise\na TypeError is thrown.\nExample\ntext = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");\n\nNote\nreplaceAll()\nis an\nES2021\nfeature.\nreplaceAll()\ndoes not work in Internet Explorer.\nConverting a String to an Array\nIf you want to work with a string as an array, you can convert it to an array.\nJavaScript String split()\nA string can be converted to an array with the\nsplit()\nmethod:\nExample\ntext.split(\",\")\u00a0\u00a0\u00a0\u00a0// Split on commas\ntext.split(\" \")\u00a0\u00a0\u00a0\u00a0// Split on spaces\ntext.split(\"|\")\u00a0\u00a0\u00a0\u00a0// Split on pipe\n\nIf the separator is omitted, the returned array will contain the whole string \nin index [0].\nIf the separator is \"\", the returned array will be an array of single \ncharacters:\nExample\ntext.split(\"\")\n\nComplete String Reference\nFor a complete String reference, go to our:\nComplete JavaScript String Reference\n.\nThe reference contains descriptions and examples of all string properties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let text = \"HELLO WORLD\";\nlet char = text.charAt(0);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let text = \"HELLO WORLD\";\nlet char = text.charCodeAt(0);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 6,
      "code": "const name = \"W3Schools\";\nlet letter = name.at(2);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let text = \"HELLO WORLD\";\nlet char = text[0];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let text = \"HELLO WORLD\";\ntext[0] = \"A\";\u00a0\u00a0\u00a0\u00a0// Gives no error, but does not work",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7, 13);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 10,
      "code": "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substring(7, 13);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7, 6);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(-4);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let text1 = \"Hello World!\";\nlet text2 = text1.toUpperCase();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let text1 = \"Hello World!\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // String\nlet text2 = text1.toLowerCase();\u00a0\u00a0// text2 is text1 \nconverted to lower",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let text1 = \"Hello\";\nlet text2 = \"World\";\nlet text3 = text1.concat(\" \", text2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "text = \"Hello\" + \" \" + \"World!\";\ntext = \"Hello\".concat(\" \", \"World!\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0 Hello World! \u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trim();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimStart();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "let text1 = \"\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\u00a0\u00a0\u00a0\u00a0\u00a0\";\nlet text2 = text1.trimEnd();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 22,
      "code": "let text = \"5\";\nlet padded = text.padStart(4,\"0\");",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let numb = 5;\nlet text = numb.toString();\nlet padded = text.padStart(4,\"0\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 24,
      "code": "let text = \"5\";\nlet padded = text.padEnd(4,\"0\");",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "let numb = 5;\nlet text = numb.toString();\nlet padded = text.padEnd(4,\"0\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 26,
      "code": "let text = \"Hello world!\";\nlet result = text.repeat(2);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "let text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"MICROSOFT\", \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(/MICROSOFT/i, \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 31,
      "code": "let text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(/Microsoft/g, \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "text = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 34,
      "code": "text.split(\",\")\u00a0\u00a0\u00a0\u00a0// Split on commas\ntext.split(\" \")\u00a0\u00a0\u00a0\u00a0// Split on spaces\ntext.split(\"|\")\u00a0\u00a0\u00a0\u00a0// Split on pipe",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 35,
      "code": "text.split(\"\")",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text = \"HELLO WORLD\";\nlet char = text.charAt(0);"
    }
  ],
  "related_topics": [
    {
      "id": "cf8103f1-698c-4b82-a0fb-122ddd31b24f",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "c8831588-36b7-4a3b-bbf3-c8618ba716b4",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "46dbb9a3-7fdf-40d6-805a-a9a91cf6771b",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nString Methods\n\nBasic String Methods\nJavascript strings?",
      "options": [
        "4 methods for extracting string characters:\nThe\nat(\nposition\n)\nMethod\nThe\ncharAt(\nposition\n)\nMethod\nThe\ncharCodeAt(\nposition\n)\nMethod\nUsing property access [] like in arrays\nJavaScript String charAt()\nThe\ncharAt()\nmethod returns the character at a specified \nindex (position) in a string:\nExample\nlet text = \"HELLO WORLD\";\nlet char = text",
        "None of the above.",
        "None of the above.",
        "primitive and immutable:\nAll string methods produce a new string without altering the original string"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript\nString Methods\n\nBasic String Methods\nJavascript strings is 'primitive and immutable:\nAll string methods produce a new string without altering the original string'."
    },
    {
      "question": "What is Extracting String Characters\nThere?",
      "options": [
        "None of the above.",
        "primitive and immutable:\nAll string methods produce a new string without altering the original string",
        "None of the above.",
        "4 methods for extracting string characters:\nThe\nat(\nposition\n)\nMethod\nThe\ncharAt(\nposition\n)\nMethod\nThe\ncharCodeAt(\nposition\n)\nMethod\nUsing property access [] like in arrays\nJavaScript String charAt()\nThe\ncharAt()\nmethod returns the character at a specified \nindex (position) in a string:\nExample\nlet text = \"HELLO WORLD\";\nlet char = text"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Extracting String Characters\nThere is '4 methods for extracting string characters:\nThe\nat(\nposition\n)\nMethod\nThe\ncharAt(\nposition\n)\nMethod\nThe\ncharCodeAt(\nposition\n)\nMethod\nUsing property access [] like in arrays\nJavaScript String charAt()\nThe\ncharAt()\nmethod returns the character at a specified \nindex (position) in a string:\nExample\nlet text = \"HELLO WORLD\";\nlet char = text'."
    }
  ],
  "summary": "This tutorial covers JavaScriptString Methods concepts and techniques. You'll learn how to use JavaScriptString Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptString Methods and how to apply it in your projects."
}