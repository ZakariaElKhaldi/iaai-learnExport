{
  "id": "3af7d60b-71ff-4fc4-ac07-2e3024cb6843",
  "title": "JavaScriptRegular Expressions",
  "slug": "javascriptregular-expressions",
  "metadata": {
    "description": "Learn about JavaScriptRegular Expressions with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "string",
      "search",
      "regular",
      "expression",
      "text",
      "pattern",
      "replace",
      "example",
      "find",
      "method"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS RegExp"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nRegular Expressions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A regular expression is a sequence of characters that forms a \nsearch pattern.\nThe search pattern can be used for text search and text replace \noperations.\nWhat Is a Regular Expression?\nA regular expression is a sequence of characters that forms a\nsearch \npattern\n.\nWhen you search for data in a text, you can use this search pattern to describe what you are searching for.\nA regular expression can be a single character, or a more complicated pattern.\nRegular expressions can be used to perform all types of\ntext search\nand\ntext replace\noperations.\nSyntax\n/\npattern\n/\nmodifiers\n;\nExample\n//i;\nExample explained:\n//i\nis a regular expression.\n\nis a pattern (to be used in a search).\ni\nis a modifier (modifies the search to be case-insensitive).\nUsing String Methods\nIn JavaScript, regular expressions are often used with the two\nstring \nmethods\n:\nsearch()\nand\nreplace()\n.\nThe\nsearch()\nmethod uses an expression to search for a \nmatch, and returns the position of the match.\nThe\nreplace()\nmethod returns a modified string where the \npattern is replaced.\nUsing String search() With a String\nThe\nsearch()\nmethod searches a string for a specified value and returns the position of the match:\nExample\nUse a string to do a search for \"\" in a string:\nlet text = \"Visit !\";\nlet n = text.search(\"\");\nThe result in\nn\nwill be:\n6\n\nUsing String search() With a Regular Expression\nExample\nUse a regular expression to do a case-insensitive search for \"\" in a string:\nlet text = \"Visit \";\nlet n = text.search(//i);\nThe result in\nn\nwill be:\n6\n\nUsing String replace() With a String\nThe\nreplace()\nmethod replaces a specified value with another value in a string:\nlet text = \"Visit Microsoft!\";\nlet result = text.replace(\"Microsoft\", \"\");\n\nUse String replace() With a Regular Expression\nExample\nUse a case insensitive regular expression to replace Microsoft with  \nin a string:\nlet text = \"Visit Microsoft!\";\nlet result = text.replace(/microsoft/i, \"\");\nThe result in\nres\nwill be:\nVisit !\n\nDid You Notice?\nRegular expression arguments (instead of string arguments) can be used in the methods above.\nRegular expressions can make your search much more powerful (case insensitive for example).\nRegular Expression Modifiers\nModifiers\ncan be used to perform case-insensitive more global searches:\nModifier\nDescription\nTry it\ni\nPerform case-insensitive matching\nTry it \u00bb\ng\nPerform a global match (find all)\nTry it \u00bb\nm\nPerform multiline matching\nTry it \u00bb\nd\nPerform start and end matching (New in\nES2022\n)\nTry it \u00bb\nRegular Expression Patterns\nBrackets\nare used to find a range of characters:\nExpression\nDescription\nTry it\n[abc]\nFind any of the characters between the brackets\nTry it \u00bb\n[0-9]\nFind any of the digits between the brackets\nTry it \u00bb\n(x|y)\nFind any of the alternatives separated with |\nTry it \u00bb\nMetacharacters\nare characters with a special meaning:\nMetacharacter\nDescription\nTry it\n\\d\nFind a digit\nTry it \u00bb\n\\s\nFind a whitespace character\nTry it \u00bb\n\\b\nFind a match at the beginning of a word like this: \\bWORD, or at the end of a word \n    like this: WORD\\b\nTry it \u00bb\nTry it \u00bb\n\\uxxxx\nFind the Unicode character specified by the hexadecimal number xxxx\nTry it \u00bb\nQuantifiers\ndefine quantities:\nQuantifier\nDescription\nTry it\nn+\nMatches any string that contains at least one\nn\nTry it \u00bb\nn*\nMatches any string that contains zero or more occurrences of\nn\nTry it \u00bb\nn?\nMatches any string that contains zero or one occurrences of\nn\nTry it \u00bb\nUsing the RegExp Object\nIn JavaScript, the RegExp object is a regular expression object with \npredefined properties and methods.\nUsing test()\nThe\ntest()\nmethod is a RegExp expression method.\nIt searches a string for a pattern, and returns true \nor false, depending on the result.\nThe following example searches a string for the character \"e\":\nExample\nconst pattern = /e/;\npattern.test(\"The best things in life are free!\");\nSince there is an \"e\" in the string, the output of the code above will be:\ntrue\n\nYou don't have to put the regular expression in a variable first. The two \nlines above can be shortened to one:\n/e/.test(\"The best things in life are free!\");\nUsing exec()\nThe\nexec()\nmethod is a RegExp expression method.\nIt searches a string for a specified pattern, and returns the found text as \nan object.\nIf no match is found, it returns an empty\n(null)\nobject.\nThe following example searches a string for the character \"e\":\nExample\n/e/.exec(\"The best things in life are free!\");\n\nComplete RegExp Reference\nFor a complete reference, go to our\nComplete \nJavaScript RegExp Reference\n.\nThe reference contains descriptions and examples of all RegExp \nproperties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "/w3schools/i;",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let text = \"Visit W3Schools!\";\nlet n = text.search(\"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let text = \"Visit W3Schools\";\nlet n = text.search(/w3schools/i);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let text = \"Visit Microsoft!\";\nlet result = text.replace(\"Microsoft\", \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let text = \"Visit Microsoft!\";\nlet result = text.replace(/microsoft/i, \"W3Schools\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const pattern = /e/;\npattern.test(\"The best things in life are free!\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "/e/.test(\"The best things in life are free!\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "/e/.exec(\"The best things in life are free!\");",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "/w3schools/i;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text = \"Visit W3Schools!\";\nlet n = text.search(\"W3Schools\");"
    }
  ],
  "related_topics": [
    {
      "id": "072d303e-398d-4ad6-b9c3-57579c7e6ad2",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a5e55745-e39b-4c73-9b42-ea3bca9789f5",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3274c4d8-9b79-4d8b-9d20-03ac2cda4b32",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nRegular Expressions\n\nA regular expression?",
      "options": [
        "a sequence of characters that forms a \nsearch pattern",
        "a sequence of characters that forms a\nsearch \npattern",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript\nRegular Expressions\n\nA regular expression is 'a sequence of characters that forms a \nsearch pattern'."
    },
    {
      "question": "What is A regular expression?",
      "options": [
        "a sequence of characters that forms a \nsearch pattern",
        "None of the above.",
        "a sequence of characters that forms a\nsearch \npattern",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A regular expression is 'a sequence of characters that forms a\nsearch \npattern'."
    }
  ],
  "summary": "This tutorial covers JavaScriptRegular Expressions concepts and techniques. You'll learn how to use JavaScriptRegular Expressions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptRegular Expressions and how to apply it in your projects."
}