{
  "id": "b12db440-dba5-4762-b53a-27aa6ee7fb90",
  "title": "JavaScript Class Inheritance",
  "slug": "javascript-class-inheritance",
  "metadata": {
    "description": "Learn about JavaScript Class Inheritance with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "class",
      "carname",
      "brand",
      "mycar",
      "constructor",
      "property",
      "ford",
      "method",
      "setter",
      "inheritance"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "Class Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Class Inheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Class Inheritance\nTo create a class inheritance, use the\nextends\nkeyword.\nA class created with a class inheritance inherits all the methods from \nanother class:\nExample\nCreate a class named \"Model\" which will inherit the methods from the \"Car\" \nclass:\nclass Car {\nconstructor(brand) {\nthis.carname = \n  brand;\n}\npresent() {\nreturn 'I have a ' + this.carname;\n}\n}\nclass Model extends Car {\nconstructor(brand, mod) {\nsuper(brand);\nthis.model = mod;\n}\nshow() {\nreturn this.present() + ', it is a ' + this.model;\n}\n}\nlet myCar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML \n  = myCar.show();\n\nThe\nsuper()\nmethod refers to the parent \nclass.\nBy calling the\nsuper()\nmethod in the \nconstructor method, we call the parent's constructor method and gets access to \nthe parent's properties and methods.\nInheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.\nGetters and Setters\nClasses also allow you to use getters and setters.\nIt can be smart to use getters and setters for your properties, especially if \nyou want to do something special with the value before returning them, or before \nyou set them.\nTo add getters and setters in the class, use the\nget\nand\nset\nkeywords.\nExample\nCreate a getter and a setter for the \"carname\" property:\nclass Car {\nconstructor(brand) {\nthis.carname \n  = brand;\n}\nget cnam() {\nreturn this.carname;\n}\nset cnam(x) {\nthis.carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;\n\nNote:\neven if the getter is a method, you do not use parentheses when you \nwant to get the property value.\nThe name of the getter/setter method cannot be the same as the name of the \nproperty, in this case\ncarname\n.\nMany programmers use an underscore character\n_\nbefore the property name to separate the getter/setter from the actual property:\nExample\nYou can use the underscore character to separate the getter/setter from the \nactual property:\nclass Car {\nconstructor(brand) {\nthis._carname \n  = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;\n\nTo use a\nsetter\n, use the same syntax as when you set a property value, without parentheses:\nExample\nUse a setter to change the carname to \"Volvo\":\nclass Car {\nconstructor(brand) {\nthis._carname \n  = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\nmyCar.carname = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;\n\nHoisting\nUnlike functions, and other JavaScript declarations, class declarations are not hoisted.\nThat means that you must declare a class before you can use it:\nExample\n//You cannot use the class yet.\n//myCar = new Car(\"Ford\") will raise an error.\nclass Car {\nconstructor(brand) {\nthis.carname = brand;\n}\n}\n//Now you can use the class:\nconst myCar = new Car(\"Ford\")\n\nNote:\nFor other declarations, like functions, you will NOT get an \nerror when you try to use it before it is declared, because the default behavior \nof JavaScript declarations are hoisting (moving the declaration to the top).\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "class Car {\nconstructor(brand) {\nthis.carname = \n  brand;\n}\npresent() {\nreturn 'I have a ' + this.carname;\n}\n}\nclass Model extends Car {\nconstructor(brand, mod) {\nsuper(brand);\nthis.model = mod;\n}\nshow() {\nreturn this.present() + ', it is a ' + this.model;\n}\n}\nlet myCar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML \n  = myCar.show();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "class Car {\nconstructor(brand) {\nthis.carname \n  = brand;\n}\nget cnam() {\nreturn this.carname;\n}\nset cnam(x) {\nthis.carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "class Car {\nconstructor(brand) {\nthis._carname \n  = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "class Car {\nconstructor(brand) {\nthis._carname \n  = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\nmyCar.carname = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "//You cannot use the class yet.\n//myCar = new Car(\"Ford\") will raise an error.\nclass Car {\nconstructor(brand) {\nthis.carname = brand;\n}\n}\n//Now you can use the class:\nconst myCar = new Car(\"Ford\")",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class Car {\nconstructor(brand) {\nthis.carname = \n  brand;\n}\npresent() {\nreturn 'I have a ' + this.carname;\n}\n}\nclass Model extends Car {\n# TODO: Complete this line\nsuper(brand);\nthis.model = mod;\n}\nshow() {\nreturn this.present() + ', it is a ' + this.model;\n}\n}\nlet myCar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML \n  = myCar.show();",
      "solution": "class Car {\nconstructor(brand) {\nthis.carname = \n  brand;\n}\npresent() {\nreturn 'I have a ' + this.carname;\n}\n}\nclass Model extends Car {\nconstructor(brand, mod) {\nsuper(brand);\nthis.model = mod;\n}\nshow() {\nreturn this.present() + ', it is a ' + this.model;\n}\n}\nlet myCar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML \n  = myCar.show();"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class Car {\n# TODO: Complete this line\nthis.carname \n  = brand;\n}\nget cnam() {\nreturn this.carname;\n}\nset cnam(x) {\nthis.carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;",
      "solution": "class Car {\nconstructor(brand) {\nthis.carname \n  = brand;\n}\nget cnam() {\nreturn this.carname;\n}\nset cnam(x) {\nthis.carname = x;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;"
    }
  ],
  "related_topics": [
    {
      "id": "3674f5e8-2c3c-4886-9e42-4077673ea52b",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9f49ab14-a040-4627-a700-52b78cc9a66f",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ae317bfe-f699-4bc3-8e1c-fd2a4a5d380d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a ' + this",
        "useful for code reusability: reuse properties and methods of an existing class when you create a new class"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of it is 'a ' + this'."
    },
    {
      "question": "What is Inheritance?",
      "options": [
        "useful for code reusability: reuse properties and methods of an existing class when you create a new class",
        "None of the above.",
        "a ' + this",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Inheritance is 'useful for code reusability: reuse properties and methods of an existing class when you create a new class'."
    }
  ],
  "summary": "This tutorial covers JavaScript Class Inheritance concepts and techniques. You'll learn how to use JavaScript Class Inheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Class Inheritance and how to apply it in your projects."
}