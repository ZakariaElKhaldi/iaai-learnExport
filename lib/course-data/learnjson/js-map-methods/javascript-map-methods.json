{
  "id": "45cb966e-d477-4f0d-9558-342b2365dd1f",
  "title": "JavaScript Map Methods",
  "slug": "javascript-map-methods",
  "metadata": {
    "description": "Learn about JavaScript Map Methods with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "fruits",
      "example",
      "method",
      "apples",
      "values",
      "const",
      "groupby",
      "object",
      "elements",
      "text"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Map Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Map Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The new Map() Method\nYou can create a map by passing an array to the\nnew Map()\nconstructor:\nExample\n// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n\nMap.get()\nYou get the value of a key in a map with the\nget()\nmethod\nExample\nfruits.get(\"apples\");\n\nMap.set()\nYou can add elements to a map with the\nset()\nmethod:\nExample\n// Create a Map\nconst fruits = new Map();\n// Set Map Values\nfruits.set(\"apples\", 500);\nfruits.set(\"bananas\", 300);\nfruits.set(\"oranges\", 200);\n\nThe\nset()\nmethod can also be used to change existing map values:\nExample\nfruits.set(\"apples\", 500);\n\nMap.size\nThe\nsize\nproperty returns the number of elements in a map:\nExample\nfruits.size;\n\nMap.delete()\nThe\ndelete()\nmethod removes a map element:\nExample\nfruits.delete(\"apples\");\n\nMap.clear()\nThe\nclear()\nmethod removes all the elements from a map:\nExample\nfruits.clear();\n\nMap.has()\nThe\nhas()\nmethod returns true if a key exists in a map:\nExample\nfruits.has(\"apples\");\n\nTry This:\nfruits.delete(\"apples\");\nfruits.has(\"apples\");\n\nMap.forEach()\nThe\nforEach()\nmethod invokes a callback for each key/value pair in a map:\nExample\n// List all entries\nlet text = \"\";\nfruits.forEach (function(value, key) {\ntext += key + ' = ' + value;\n})\n\nMap.entries()\nThe\nentries()\nmethod returns an iterator object with the [key,values] in a map:\nExample\n// List all entries\nlet text = \"\";\nfor (const x of fruits.entries()) {\ntext += x;\n}\n\nMap.keys()\nThe\nkeys()\nmethod returns an iterator object with the keys in a map:\nExample\n// List all keys\nlet text = \"\";\nfor (const x of fruits.keys()) {\ntext += x;\n}\n\nMap.values()\nThe\nvalues()\nmethod returns an iterator object with the values in a map:\nExample\n// List all values\nlet text = \"\";\nfor (const x of fruits.values()) {\ntext += x;\n}\n\nYou can use the\nvalues()\nmethod to sum the values in a map:\nExample\n// Sum all values\nlet total = 0;\nfor (const x of fruits.values()) {\ntotal += x;\n}\n\nObjects as Keys\nBeing able to use objects as keys is an important Map feature.\nExample\n// Create Objects\nconst apples = {name: 'Apples'};\nconst bananas = {name: 'Bananas'};\nconst oranges = {name: 'Oranges'};\n// Create a Map\nconst fruits = new Map();\n// Add new Elements to the Map\nfruits.set(apples, 500);\nfruits.set(bananas, 300);\nfruits.set(oranges, 200);\n\nRemember: The key is an object (apples), not a string (\"apples\"):\nExample\nfruits.get(\"apples\");\u00a0\u00a0// Returns undefined\n\nJavaScript Map.groupBy()\nES2024 added the\nMap.groupBy()\nmethod to JavaScript.\nThe\nMap.groupBy()\nmethod groups elements of an object\naccording to string values returned from a callback function.\nThe\nMap.groupBy()\nmethod does not change the original object.\nExample\n// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);\n\nBrowser Support\nMap.groupby()\nis an ES2024 feature.\nIt is supported in new browsers since March 2024:\nChrome 117\nEdge 117\nFirefox 119\nSafari 17.4\nOpera 103\nSep 2023\nSep 2023\nOct 2023\nOkt 2024\nMay 2023\nWarning\nES2024 features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nComplete Map Reference\nFor a complete reference, go to our:\nComplete JavaScript Map Reference\n.\nThe reference contains descriptions and examples of all Map Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "fruits.get(\"apples\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create a Map\nconst fruits = new Map();\n// Set Map Values\nfruits.set(\"apples\", 500);\nfruits.set(\"bananas\", 300);\nfruits.set(\"oranges\", 200);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "fruits.set(\"apples\", 500);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "fruits.size;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "fruits.delete(\"apples\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "fruits.clear();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "fruits.has(\"apples\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// List all entries\nlet text = \"\";\nfruits.forEach (function(value, key) {\ntext += key + ' = ' + value;\n})",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "// List all entries\nlet text = \"\";\nfor (const x of fruits.entries()) {\ntext += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "// List all keys\nlet text = \"\";\nfor (const x of fruits.keys()) {\ntext += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "// List all values\nlet text = \"\";\nfor (const x of fruits.values()) {\ntext += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "// Sum all values\nlet total = 0;\nfor (const x of fruits.values()) {\ntotal += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "// Create Objects\nconst apples = {name: 'Apples'};\nconst bananas = {name: 'Bananas'};\nconst oranges = {name: 'Oranges'};\n// Create a Map\nconst fruits = new Map();\n// Add new Elements to the Map\nfruits.set(apples, 500);\nfruits.set(bananas, 300);\nfruits.set(oranges, 200);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "fruits.get(\"apples\");\u00a0\u00a0// Returns undefined",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n# TODO: Complete this line\n[\"oranges\", 200]\n]);",
      "solution": "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "fruits.get(\"apples\");"
    }
  ],
  "related_topics": [
    {
      "id": "ec4d4af3-6b1c-4cd1-98fd-3a805a20c34b",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "dac13afc-79ba-43df-8c39-102d55e22139",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "1646b2df-bd6e-480a-a1ed-53872d7af130",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Objects as Keys\nBeing able to use objects as keys?",
      "options": [
        "None of the above.",
        "None of the above.",
        "an object (apples)",
        "an important Map feature"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Objects as Keys\nBeing able to use objects as keys is 'an important Map feature'."
    },
    {
      "question": "What is The key?",
      "options": [
        "an object (apples)",
        "an important Map feature",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The key is 'an object (apples)'."
    }
  ],
  "summary": "This tutorial covers JavaScript Map Methods concepts and techniques. You'll learn how to use JavaScript Map Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Map Methods and how to apply it in your projects."
}