{
  "id": "128900f4-57d3-434f-beb6-5c40fb39deb9",
  "title": "JavaScriptBitwise Operations",
  "slug": "javascriptbitwise-operations",
  "metadata": {
    "description": "Learn about JavaScriptBitwise Operations with clear explanations and practical examples.",
    "keywords": [
      "bits",
      "bitwise",
      "binary",
      "javascript",
      "example",
      "decimal",
      "right",
      "shift",
      "operation",
      "result"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Bitwise"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nBitwise Operations",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nBitwise Operations\n\nJavaScript Bitwise Operators\nOperator\nName\nDescription",
      "content": "&\nAND\nSets each bit to 1 if both bits are 1\n|\nOR\nSets each bit to 1 if one of two bits is 1\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\n~\nNOT\nInverts all the bits\n<<\nZero fill left shift\nShifts left by pushing zeros in from the right and let the leftmost bits fall off\n>>\nSigned right shift\nShifts right by pushing copies of the leftmost bit in from the left, and let the rightmost bits \nfall off\n>>>\nZero fill right shift\nShifts right by pushing zeros in from the left, and let the rightmost bits fall off\nExamples\nOperation\nResult\nSame as\nResult\n5 & 1\n1\n0101 & 0001\n0001\n5 | 1\n5\n0101 | 0001\n0101\n~ 5\n10\n~0101\n1010\n5 << 1\n10\n0101 << 1\n1010\n5 ^ 1\n4\n0101 ^ 0001\n0100\n5 >> 1\n2\n0101 >> 1\n0010\n5 >>> 1\n2\n0101 >>> 1\n0010\nJavaScript Uses 32 bits Bitwise Operands\nJavaScript stores numbers as 64 bits floating point numbers, but all bitwise \noperations are performed on 32 bits binary numbers.\nBefore a bitwise operation is performed, JavaScript converts numbers to 32 bits \nsigned integers.\nAfter the bitwise operation is performed, the result is converted back to 64 bits JavaScript \nnumbers.\nThe examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10.\nSince JavaScript uses 32 bits signed integers, it will not return 10. It will return -6.\n00000000000000000000000000000101 (5)\n11111111111111111111111111111010 (~5 = -6)\nA signed integer uses the leftmost bit as the minus sign.\nJavaScript Bitwise AND\nWhen a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.\nOne bit example:\nOperation\nResult\n0 & 0\n0\n0 & 1\n0\n1 & 0\n0\n1 & 1\n1\n4 bits example:\nOperation\nResult\n1111 & 0000\n0000\n1111 & 0001\n0001\n1111 & 0010\n0010\n1111 & 0100\n0100\nJavaScript Bitwise OR\nWhen a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1:\nOne bit example:\nOperation\nResult\n0 | 0\n0\n0 | 1\n1\n1 | 0\n1\n1 | 1\n1\n4 bits example:\nOperation\nResult\n1111 | 0000\n1111\n1111 | 0001\n1111\n1111 | 0010\n1111\n1111 | 0100\n1111\nJavaScript Bitwise XOR\nWhen a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:\nOne bit example:\nOperation\nResult\n0 ^ 0\n0\n0 ^ 1\n1\n1 ^ 0\n1\n1 ^ 1\n0\n4 bits example:\nOperation\nResult\n1111 ^ 0000\n1111\n1111 ^ 0001\n1110\n1111 ^ 0010\n1101\n1111 ^ 0100\n1011\nJavaScript Bitwise AND (&)\nBitwise AND returns 1 only if both bits are 1:\nDecimal\nBinary\n5\n00000000000000000000000000000101\n1\n00000000000000000000000000000001\n5 & 1\n00000000000000000000000000000001 (1)\nExample\nlet x = 5 & 1;\n\nJavaScript Bitwise OR (|)\nBitwise OR returns 1 if one of the bits is 1:\nDecimal\nBinary\n5\n00000000000000000000000000000101\n1\n00000000000000000000000000000001\n5 | 1\n00000000000000000000000000000101 (5)\nExample\nlet x = 5 | 1;\n\nJavaScript Bitwise XOR (^)\nBitwise XOR returns 1 if the bits are different:\nDecimal\nBinary\n5\n00000000000000000000000000000101\n1\n00000000000000000000000000000001\n5 ^ 1\n00000000000000000000000000000100 (4)\nExample\nlet x = 5 ^ 1;\n\nJavaScript Bitwise NOT (~)\nDecimal\nBinary\n5\n00000000000000000000000000000101\n~5\n11111111111111111111111111111010 (-6)\nExample\nlet x = ~5;\n\nJavaScript (Zero Fill) Bitwise Left Shift (<<)\nThis is a zero fill left shift. One or more zero bits are pushed in from the right,\nand the leftmost bits fall off:\nDecimal\nBinary\n5\n00000000000000000000000000000101\n5 << 1\n00000000000000000000000000001010 (10)\nExample\nlet x = 5 << 1;\n\nJavaScript (Sign Preserving) Bitwise Right Shift (>>)\nThis is a sign preserving right shift. Copies of the leftmost bit are pushed \nin from the left, and the rightmost bits fall off:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Binary",
      "content": "-5\n11111111111111111111111111111011\n-5 >> 1\n11111111111111111111111111111101 (-3)\nExample\nlet x = -5 >> 1;\n\nJavaScript (Zero Fill) Right Shift (>>>)\nThis is a zero fill right shift. One or more zero bits are pushed in from the left,\nand the rightmost bits fall off:\nDecimal\nBinary\n5\n00000000000000000000000000000101\n5 >>> 1\n00000000000000000000000000000010 (2)\nExample\nlet x = 5 >>> 1;\n\nBinary Numbers\nBinary numbers with only one bit set are easy to understand:\nBinary Representation\nDecimal value\n00000000000000000000000000000001\n1\n00000000000000000000000000000010\n2\n00000000000000000000000000000100\n4\n00000000000000000000000000001000\n8\n00000000000000000000000000010000\n16\n00000000000000000000000000100000\n32\n00000000000000000000000001000000\n64\nSetting a few more bits reveals the binary pattern:\nBinary Representation\nDecimal value\n00000000000000000000000000000101\n5 (4 + 1)\n00000000000000000000000000001101\n13 (8 + 4 + 1)\n00000000000000000000000000101101\n45 (32 + 8 + 4 + 1)\nJavaScript binary numbers are stored in two's complement format.\nThis means that a negative number is the bitwise NOT of the number plus 1:\nBinary Representation\nDecimal value\n00000000000000000000000000000101\n5\n11111111111111111111111111111011\n-5\n00000000000000000000000000000110\n6\n11111111111111111111111111111010\n-6\n00000000000000000000000000101000\n40\n11111111111111111111111111011000\n-40\nJoke:\nThere are only 10 types of people in the world: those who understand binary and those who don't.\nConverting Decimal to Binary\nExample\nfunction dec2bin(dec){\nreturn (dec >>> 0).toString(2);\n}\n\nConverting Binary to Decimal\nExample\nfunction bin2dec(bin){\nreturn parseInt(bin, 2).toString(10);\n}\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 5 & 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 5 | 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 5 ^ 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = ~5;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = 5 << 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = -5 >> 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x = 5 >>> 1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "function dec2bin(dec){\nreturn (dec >>> 0).toString(2);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "function bin2dec(bin){\nreturn parseInt(bin, 2).toString(10);\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 5 & 1;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 5 | 1;"
    }
  ],
  "related_topics": [
    {
      "id": "785d50e5-57de-4c51-809c-d0ed04c08cb0",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ee8496d9-e8eb-462c-88b8-893d8ba8f135",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a17540b9-2db0-459a-88c8-bd28d923d941",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is if both bits?",
      "options": [
        "1\n|\nOR\nSets each bit to 1 if one of two bits is 1\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\n~\nNOT\nInverts all the bits\n<<\nZero fill left shift\nShifts left by pushing zeros in from the right and let the leftmost bits fall off\n>>\nSigned right shift\nShifts right by pushing copies of the leftmost bit in from the left",
        "performed",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of if both bits is '1\n|\nOR\nSets each bit to 1 if one of two bits is 1\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\n~\nNOT\nInverts all the bits\n<<\nZero fill left shift\nShifts left by pushing zeros in from the right and let the leftmost bits fall off\n>>\nSigned right shift\nShifts right by pushing copies of the leftmost bit in from the left'."
    },
    {
      "question": "What is Before a bitwise operation?",
      "options": [
        "None of the above.",
        "None of the above.",
        "1\n|\nOR\nSets each bit to 1 if one of two bits is 1\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\n~\nNOT\nInverts all the bits\n<<\nZero fill left shift\nShifts left by pushing zeros in from the right and let the leftmost bits fall off\n>>\nSigned right shift\nShifts right by pushing copies of the leftmost bit in from the left",
        "performed"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Before a bitwise operation is 'performed'."
    }
  ],
  "summary": "This tutorial covers JavaScriptBitwise Operations concepts and techniques. You'll learn how to use JavaScriptBitwise Operations effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptBitwise Operations and how to apply it in your projects."
}