{
  "id": "b55dfcdb-7b9d-4a66-b508-409e3e7745f9",
  "title": "ECMAScript 2022",
  "slug": "ecmascript-2022",
  "metadata": {
    "description": "Learn about ECMAScript 2022 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "method",
      "object",
      "javascript",
      "error",
      "const",
      "class",
      "fruits",
      "name",
      "array",
      "string"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS 2022"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2022",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020, 2022.\nNew Features in ES2022\nArray at()\nString at()\nRegExp /d\nObject.hasOwn()\nerror.cause\nawait import\nClass field declarations\nPrivate methods and fields\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nJavaScript Array at()\nES2022 intoduced the array method\nat()\n:\nExamples\nGet the third element of fruits:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);\n\nGet the third element of fruits:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[2];\n\nThe\nat()\nmethod returns an indexed element from an array.\nThe\nat()\nmethod returns the same as\n[]\n.\nThe\nat()\nmethod is supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15.4\nOpera 78\nApr 2021\nJul 2021\nJul 2021\nMar 2022\nAug 2021\nNote\nMany languages allows\nnegative bracket indexing\nlike [-1] to access elements from the end of an\nobject / array / string.\nThis is not possible in JavaScript, because [] is used for accessing both arrays and objects.\nobj[-1] refers to the value of key -1, not to the last property of the object.\nThe\nat()\nmethod was introduced in ES2022 to solve this problem.\nJavaScript String at()\nES2022 intoduced the string method\nat()\n:\nExamples\nGet the third letter of name:\nconst name = \"\";\nlet letter = name.at(2);\n\nGet the third letter of name:\nconst name = \"\";\nlet letter = name[2];\n\nThe\nat()\nmethod returns an indexed element from an string.\nThe\nat()\nmethod returns the same as\n[]\n.\nThe\nat()\nmethod is supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15.4\nOpera 78\nApr 2021\nJul 2021\nJul 2021\nMar 2022\nAug 2021\nRegExp d Modifier\nES2022 added the /d modifier to express the start and end of the match.\nExample\nlet text = \"aaaabb\";\nlet result = text.match(/(aa)(bb)/d);\n\nRegExp Modifiers are used to spescfy case-insensitive, and other global searches:\nModifier\nDescription\nTry it\ni\nPerform case-insensitive matching\nTry it \u00bb\ng\nPerform a global match (find all)\nTry it \u00bb\nm\nPerform multiline matching\nTry it \u00bb\nd\nPerform substring matches (New in ES2022)\nTry it \u00bb\nObject hasOwn\nES2022 provides a safe way to check if a property is the own property of an object.\nObject.hasOwn()\nis similar to\nObject.prototype.hasOwnProperty\nbut supports all object types.\nExample\nObject.hasOwn(myObject, age)\n\nError Cause\nES2022 let you specify the reason behind an error with\nerror.cause\n.\nExample\ntry {\n  connectData();\n} catch (err) {\n  throw new Error(\"Connecting failed.\", { cause: err });\n}\n\nJavaScript await import\nJavasSript modules can now wait for resources that require import before running:\nimport {myData} from './myData.js';\nconst data = await myData();\nJavaScript Class Field Declarations\nclass Hello {\ncounter = 0; // Class field\n}\nconst myClass = new Hello();\nlet x = myClass.counter;\nClass Field Declarations is supported in all modern browsers since April 2021:\nChrome 72\nEdge 79\nFirefox 69\nSafari 14.1\nOpera 60\nJan 2019\nJan 2020\nSep 2019\nApr 2021\nJan 2020\nJavaScript Private Methods and Fields\nclass Hello {\n#counter = 0; \u00a0// Private field\n#myMethod() {} // Private method\n}\nconst myClass = new Hello();\nlet x = myClass.#counter;  // Error\nmyClass.#myMethod(); \u00a0\u00a0\u00a0\u00a0\u00a0// Error\nPrivate Methods and Fields is supported in all modern browsers since June 2021:\nChrome 74\nEdge 79\nFirefox 90\nSafari 14.1\nOpera 62\nApr 2019\nJan 2020\nJun 2021\nApr 2021\nJun 2019\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 4,
      "code": "const name = \"W3Schools\";\nlet letter = name.at(2);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let text = \"aaaabb\";\nlet result = text.match(/(aa)(bb)/d);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "Object.hasOwn(myObject, age)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "try {\n  connectData();\n} catch (err) {\n  throw new Error(\"Connecting failed.\", { cause: err });\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import {myData} from './myData.js';\nconst data = await myData();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "class Hello {\ncounter = 0; // Class field\n}\nconst myClass = new Hello();\nlet x = myClass.counter;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "class Hello {\n#counter = 0; \u00a0// Private field\n#myMethod() {} // Private method\n}\nconst myClass = new Hello();\nlet x = myClass.#counter;  // Error\nmyClass.#myMethod(); \u00a0\u00a0\u00a0\u00a0\u00a0// Error",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const name = \"W3Schools\";\nlet letter = name.at(2);"
    }
  ],
  "related_topics": [
    {
      "id": "0569e5d2-10f9-46e2-8c4b-a1e6e2aa1ec2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e8ef717b-9213-4992-8232-5694aee9f7f8",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "92fac6c5-2bc4-4cbc-8888-295c218ba64a",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "named by year: ES2016",
        "relatively new",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "What is cause\nawait import\nClass field declarations\nPrivate methods and fields\nWarning\nThese features?",
      "options": [
        "None of the above.",
        "relatively new",
        "named by year: ES2016",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of cause\nawait import\nClass field declarations\nPrivate methods and fields\nWarning\nThese features is 'relatively new'."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2022 concepts and techniques. You'll learn how to use ECMAScript 2022 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2022 and how to apply it in your projects."
}