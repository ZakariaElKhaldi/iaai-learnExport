{
  "id": "cbf4e874-e491-46f2-a21c-2524b254ccf8",
  "title": "JavaScript Errors",
  "slug": "javascript-errors",
  "metadata": {
    "description": "Learn about JavaScript Errors with clear explanations and practical examples.",
    "keywords": [
      "error",
      "throw",
      "catch",
      "code",
      "number",
      "javascript",
      "message",
      "example",
      "demo",
      "name"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Errors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Errors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Throw, and Try...Catch...Finally\nThe\ntry\nstatement defines a code block to run (to try).\nThe\ncatch\nstatement defines a code block to handle any error.\nThe\nfinally\nstatement defines a code block to run regardless of the result.\nThe\nthrow\nstatement defines a custom error.\nErrors Will Happen!\nWhen executing JavaScript code, different errors can \noccur.\nErrors can be coding errors made by the programmer, errors due to wrong \ninput, and other unforeseeable things.\nExample\nIn this example we misspelled \"alert\" as \"adddlert\" to deliberately produce an error:\n<p id=\"demo\"></p>\n<script>\ntry {\nadddlert(\"Welcome guest!\");\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>\n\nJavaScript catches\nadddlert\nas an error, and executes the \ncatch code to \nhandle it.\nJavaScript try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it is being executed.\nThe\ncatch\nstatement allows you to define a block of code to \nbe executed, if an error occurs in the try block.\nThe JavaScript statements\ntry\nand\ncatch\ncome in pairs:\ntry {\nBlock of code to try\n}\ncatch(\nerr\n) {\nBlock of code to handle errors\n}\nJavaScript Throws Errors\nWhen an error occurs, JavaScript will \nnormally stop and generate an error message.\nThe technical term for this is: JavaScript will\nthrow an \nexception (throw an error)\n.\nJavaScript will actually create an\nError object\nwith two properties:\nname\nand\nmessage\n.\nThe throw Statement\nThe\nthrow\nstatement allows you to create a custom error.\nTechnically you can\nthrow an exception (throw an error)\n.\nThe exception can be a JavaScript\nString\n, a\nNumber\n, a\nBoolean\nor an\nObject\n:\nthrow \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number\nIf you use\nthrow\ntogether with\ntry\nand\ncatch\n, you can control program \nflow and generate custom error messages.\nInput Validation Example\nThis example examines input. If the value is wrong, \nan exception (err) is thrown.\nThe exception (err) is caught by the catch statement and a custom error message is displayed:\n<!DOCTYPE html>\n<html>\n<body>\n<p>Please input a number between \n5 and 10:</p>\n<input id=\"demo\" type=\"text\">\n<button type=\"button\" \nonclick=\"myFunction()\">Test Input</button>\n<p id=\"p01\"></p>\n<script>\nfunction myFunction() {\nconst message = \ndocument.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = \ndocument.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"empty\";\nif(isNaN(x)) throw \"not a number\";\nx = Number(x);\nif(x < 5) throw \n \"too low\";\nif(x > 10) throw \"too \n high\";\n}\ncatch(err) {\nmessage.innerHTML = \n\"Input is \" + err;\n}\n}\n</script>\n</body>\n</html>\n\nHTML Validation\nThe code above is just an example.\nModern browsers will often use a combination of JavaScript and built-in HTML \nvalidation, using predefined validation rules defined in HTML attributes:\n<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">\nYou can read more about forms validation in a later chapter of this tutorial.\nThe finally Statement\nThe\nfinally\nstatement lets you execute code, after try and \ncatch, regardless of the result:\nSyntax\ntry {\nBlock of code to try\n}\ncatch(\nerr\n) {\nBlock of code to handle errors\n}\nfinally {\nBlock of code to be executed regardless of the try / catch result\n}\nExample\nfunction myFunction() {\nconst message = \ndocument.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = \ndocument.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"is empty\";\nif(isNaN(x)) \nthrow \"is not a number\";\nx = Number(x);\nif(x > \n10) throw \"is too high\";\nif(x < \n5) throw \"is too low\";\n}\ncatch(err) \n{\nmessage.innerHTML = \"Error: \" + \nerr + \".\";\n}\nfinally {\ndocument.getElementById(\"demo\").value = \"\";\n}\n}\n\nThe Error Object\nJavaScript has a built in error object that provides error information when \nan error occurs.\nThe error object provides two useful properties: name and message.\nError Object Properties\nProperty\nDescription\nname\nSets or returns an error name\nmessage\nSets or returns an error message (a string)\nError Name Values\nSix different values can be returned by the error name property:\nError Name\nDescription\nEvalError\nAn error has occurred in the eval() function\nRangeError\nA number \"out of range\" has occurred\nReferenceError\nAn illegal reference has occurred\nSyntaxError\nA syntax error has occurred\nTypeError\nA type error has occurred\nURIError\nAn error in encodeURI() has occurred\nThe six different values are described below.\nEval Error\nAn\nEvalError\nindicates an error in the eval() function.\nNewer versions of JavaScript do not throw EvalError. Use SyntaxError instead.\nRange Error\nA\nRangeError\nis thrown if you use a number that is outside \nthe range of legal values.\nFor example: You cannot set the number of significant digits of a number to \n500.\nExample\nlet num = 1;\ntry {\nnum.toPrecision(500);\u00a0\u00a0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}\n\nReference Error\nA\nReferenceError\nis thrown if you use (reference) a variable \nthat has not been declared:\nExample\nlet x = 5;\ntry {\nx = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}\n\nSyntax Error\nA\nSyntaxError\nis thrown if you try to evaluate code with a \nsyntax error.\nExample\ntry {\neval(\"alert('Hello)\");\u00a0\u00a0 // \n Missing ' will produce an error\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}\n\nType Error\nA\nTypeError\nis thrown if an operand or argument \nis incompatible with the type expected by an operator or function.\nExample\nlet num = 1;\ntry {\nnum.toUpperCase();\u00a0\u00a0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}\n\nURI (Uniform Resource Identifier) Error\nA\nURIError\nis thrown if you use illegal characters in a URI function:\nExample\ntry {\ndecodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}\n\nNon-Standard Error Object Properties\nMozilla and Microsoft define some non-standard error object properties:\nfileName (Mozilla)\nlineNumber (Mozilla)\ncolumnNumber (Mozilla)\nstack (Mozilla)\ndescription (Microsoft)\nnumber (Microsoft)\nDo not use these properties in public web sites. They will not work in all browsers.\nComplete Error Reference\nFor a complete reference of the Error object, go to our\nComplete \nJavaScript Error Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<p id=\"demo\"></p>\n<script>\ntry {\nadddlert(\"Welcome guest!\");\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "try {\nBlock of code to try\n}\ncatch(\nerr\n) {\nBlock of code to handle errors\n}",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "throw \"Too big\";\u00a0\u00a0\u00a0 // throw a text\nthrow 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // throw a number",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<p>Please input a number between \n5 and 10:</p>\n<input id=\"demo\" type=\"text\">\n<button type=\"button\" \nonclick=\"myFunction()\">Test Input</button>\n<p id=\"p01\"></p>\n<script>\nfunction myFunction() {\nconst message = \ndocument.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = \ndocument.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"empty\";\nif(isNaN(x)) throw \"not a number\";\nx = Number(x);\nif(x < 5) throw \n \"too low\";\nif(x > 10) throw \"too \n high\";\n}\ncatch(err) {\nmessage.innerHTML = \n\"Input is \" + err;\n}\n}\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 8,
      "code": "try {\nBlock of code to try\n}\ncatch(\nerr\n) {\nBlock of code to handle errors\n}\nfinally {\nBlock of code to be executed regardless of the try / catch result\n}",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "function myFunction() {\nconst message = \ndocument.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = \ndocument.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"is empty\";\nif(isNaN(x)) \nthrow \"is not a number\";\nx = Number(x);\nif(x > \n10) throw \"is too high\";\nif(x < \n5) throw \"is too low\";\n}\ncatch(err) \n{\nmessage.innerHTML = \"Error: \" + \nerr + \".\";\n}\nfinally {\ndocument.getElementById(\"demo\").value = \"\";\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let num = 1;\ntry {\nnum.toPrecision(500);\u00a0\u00a0 // A number cannot have 500 \n significant digits\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = 5;\ntry {\nx = y + 1;\u00a0\u00a0 // y cannot be used (referenced)\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "try {\neval(\"alert('Hello)\");\u00a0\u00a0 // \n Missing ' will produce an error\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let num = 1;\ntry {\nnum.toUpperCase();\u00a0\u00a0 // You cannot convert a number \n to upper case\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "try {\ndecodeURI(\"%%%\");\u00a0\u00a0 // You cannot URI decode \n  percent signs\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<p id=\"demo\"></p>\n<script>\n# TODO: Complete this line\nadddlert(\"Welcome guest!\");\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>",
      "solution": "<p id=\"demo\"></p>\n<script>\ntry {\nadddlert(\"Welcome guest!\");\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "try {\nBlock of code to try\n}\n# TODO: Complete this line\nerr\n) {\nBlock of code to handle errors\n}",
      "solution": "try {\nBlock of code to try\n}\ncatch(\nerr\n) {\nBlock of code to handle errors\n}"
    }
  ],
  "related_topics": [
    {
      "id": "52744437-74b8-47fd-895b-c505891a1d72",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d0cc299f-65ac-4887-ba1e-2086a3f59393",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "42cdbd09-69cb-4a87-8f18-34e95baa5bdb",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it?",
      "options": [
        "None of the above.",
        "being executed",
        "Not a JavaScript try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of JavaScript try and catch\nThe\ntry\nstatement allows you to define a block of code to be \ntested for errors while it is 'being executed'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript Errors concepts and techniques. You'll learn how to use JavaScript Errors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Errors and how to apply it in your projects."
}