{
  "id": "ebb2d03d-2a79-45d3-8e55-173953621806",
  "title": "JavaScriptFor Loop",
  "slug": "javascriptfor-loop",
  "metadata": {
    "description": "Learn about JavaScriptFor Loop with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "loop",
      "expression",
      "text",
      "cars",
      "loops",
      "code",
      "variable",
      "block",
      "example",
      "condition"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Loop For"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nFor Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Loops can execute a block of code a number of times.\nJavaScript Loops\nLoops are handy, if you want to run the same code over and over again, each \ntime with a different value.\nOften this is the case when working with arrays:\nInstead of writing:\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";\nYou can write:\nfor (let i = 0; i < cars.length; i++) {\ntext += cars[i] + \"<br>\";\n}\n\nDifferent Kinds of Loops\nJavaScript supports different kinds of loops:\nfor\n- loops through a block of code a number of times\nfor/in\n- loops through the properties of an object\nfor/of\n- loops through the values of an \n  iterable object\nwhile\n- loops through a block of code while a specified condition is true\ndo/while\n- also loops through a block of code while a specified condition is true\nThe For Loop\nThe\nfor\nstatement creates a loop with 3 optional expressions:\nfor (\nexpression 1\n;\nexpression 2\n;\nexpression 3\n) {\n//\ncode block to be executed\n}\nExpression 1\nis executed (one time) before the execution of the code block.\nExpression 2\ndefines the condition for executing the code block.\nExpression 3\nis executed (every time) after the code block has been executed.\nExample\nfor (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}\n\nFrom the example above, you can read:\nExpression 1 sets a variable before the loop starts (let i = 0).\nExpression 2 defines the condition for the loop to run (i must be less than \n5).\nExpression 3 increases a value (i++) each time the code block in the loop has \nbeen executed.\nHow to use Expression 1\nExpression 1 is used to initialize the variable(s) used in the loop (let i = 0).\nBut, expression 1 is optional.\nYou can omit expression 1 when your values are set before the loop starts:\nExample\nlet i = 2;\nlet len = cars.length;\nlet text = \"\";\nfor (; i < len; i++) {\ntext += cars[i] + \"<br>\";\n}\n\nYou can intiate many values in expression 1 (separated by comma):\nExample\nfor (i = 0, len = cars.length, text = \"\"; i < len; i++) {\ntext += cars[i] + \"<br>\";\n}\n\nHow to use Expression 2\nExpression 2 is used to evaluate the condition of the initial variable (i < len).\nBut, expression 2 is also optional.\nIf expression 2 returns true, the loop will start over again. If it returns false, the \nloop will end.\nNote\nIf you omit expression 2, you must provide a\nbreak\ninside the \nloop. Otherwise the loop will never end. This will crash your browser.\nRead about breaks in a later chapter of this tutorial.\nHow to use Expression 3\nExpression 3 increments the value of the initial variable (i++).\nBut, expression 3 is also optional.\nExpression 3 can do anything like negative increment (i--), positive \nincrement (i = i + 15), or anything else.\nExpression 3 can also be omitted (like when you increment your values inside the loop):\nExample\nlet i = 0;\nlet len = cars.length;\nlet text = \"\";\nfor (; i < len; ) {\ntext += cars[i] + \"<br>\";\ni++;\n}\n\nLoop Scope\nUsing\nvar\nin a loop:\nExample\nvar i = 5;\nfor (var i = 0; i < 10; i++) {\n// some code\n}\n// Here i is 10\n\nUsing\nlet\nin a loop:\nExample\nlet i = 5;\nfor (let i = 0; i < 10; i++) {\n// some code\n}\n// Here i is 5\n\nIn the first example, using\nvar\n, the variable declared in \nthe loop redeclares the variable outside the loop.\nIn the second example, using\nlet\n, the variable declared in \nthe loop does not redeclare the variable outside the loop.\nWhen\nlet\nis used to declare the i variable in a loop, the i \nvariable will only be visible within the loop.\nFor/Of and For/In Loops\nThe\nfor/in\nloop and the\nfor/of\nloop are explained in the \nWhile Loops\nThe\nwhile\nloop and the\ndo/while\nare explained in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Instead of writing:",
      "content": "",
      "order": 3,
      "code": "text += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";",
      "language": "javascript",
      "explanation": "Example of instead of writing:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let i = 2;\nlet len = cars.length;\nlet text = \"\";\nfor (; i < len; i++) {\ntext += cars[i] + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "for (i = 0, len = cars.length, text = \"\"; i < len; i++) {\ntext += cars[i] + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let i = 0;\nlet len = cars.length;\nlet text = \"\";\nfor (; i < len; ) {\ntext += cars[i] + \"<br>\";\ni++;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "var i = 5;\nfor (var i = 0; i < 10; i++) {\n// some code\n}\n// Here i is 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let i = 5;\nfor (let i = 0; i < 10; i++) {\n// some code\n}\n// Here i is 5",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "text += cars[0] + \"<br>\";\n# TODO: Complete this line\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";",
      "solution": "text += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for (let i = 0; i < 5; i++) {\n# TODO: Complete this line\n}",
      "solution": "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "f0701695-b95d-4722-b59d-0edabce33493",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "aa7e53c0-ebe5-45e4-ab3c-64bbf937e2cb",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c5bd456b-cd01-44e8-9f00-9d5f2aa441c4",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Loops\nLoops?",
      "options": [
        "None of the above.",
        "handy",
        "None of the above.",
        "the case when working with arrays:\nInstead of writing:\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";\nYou can write:\nfor (let i = 0; i < cars"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of JavaScript Loops\nLoops is 'handy'."
    },
    {
      "question": "What is Often this?",
      "options": [
        "handy",
        "the case when working with arrays:\nInstead of writing:\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";\nYou can write:\nfor (let i = 0; i < cars",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Often this is 'the case when working with arrays:\nInstead of writing:\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";\nYou can write:\nfor (let i = 0; i < cars'."
    }
  ],
  "summary": "This tutorial covers JavaScriptFor Loop concepts and techniques. You'll learn how to use JavaScriptFor Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptFor Loop and how to apply it in your projects."
}