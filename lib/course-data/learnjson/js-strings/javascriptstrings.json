{
  "id": "19b835ba-43df-46a7-9abf-4f65705f59ec",
  "title": "JavaScriptStrings",
  "slug": "javascriptstrings",
  "metadata": {
    "description": "Learn about JavaScriptStrings with clear explanations and practical examples.",
    "keywords": [
      "string",
      "strings",
      "quotes",
      "john",
      "javascript",
      "text",
      "example",
      "templates",
      "called",
      "single"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Strings"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nStrings",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nStrings\n\nStrings are for\nstoring text\nStrings are written\nwith quotes\nUsing Quotes\nA JavaScript string is zero or more characters written inside quotes",
      "content": ".\nExample\nlet text = \"John Doe\";\n\nYou can use single or double quotes:\nExample\nlet carName1 = \"Volvo XC60\";\u00a0 \n  // Double quotes\nlet carName2 = 'Volvo XC60';\u00a0 // Single quotes\n\nNote\nStrings created with single or double quotes work the same.\nThere is no difference between the two.\nQuotes Inside Quotes\nYou can use quotes inside a string, as long as they don't match the quotes \nsurrounding the string:\nExample\nlet answer1 = \"It's alright\";\nlet answer2 = \"He is called 'Johnny'\";\nlet answer3 = 'He is called \"Johnny\"';\n\nTemplate Strings\nTemplates were introduced with ES6 (JavaScript 2016).\nTemplates are strings enclosed in backticks (`This is a template string`).\nTemplates allow single and double quotes inside a string:\nExample\nlet text = `He's often called \"Johnny\"`;\n\nNote\nTemplates are not supported in Internet Explorer.\nString Length\nTo find the length of a string, use the built-in\nlength\nproperty:\nExample\nlet text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;\n\nEscape Characters\nBecause strings must be written within quotes, JavaScript will misunderstand this string:\nlet text = \"We are the so-called \"Vikings\" from the north.\";\nThe string will be chopped to \"We are the so-called \".\nTo solve this problem, you can use an\nbackslash escape character\n.\nThe backslash escape character (\n\\\n) turns special characters into string characters:\nCode\nResult\nDescription\n\\'\n'\nSingle quote\n\\\"\n\"\nDouble quote\n\\\\\n\\\nBackslash\nExamples\n\\\" inserts a double quote in a string:\nlet text = \"We are the so-called \\\"Vikings\\\" from the north.\";\n\n\\' inserts a single quote in a string:\nlet text= 'It\\'s alright.';\n\n\\\\ inserts a backslash in a string:\nlet text = \"The character \\\\ is called backslash.\";\n\nSix other escape sequences are valid in JavaScript:\nCode\nResult\n\\b\nBackspace\n\\f\nForm Feed\n\\n\nNew Line\n\\r\nCarriage Return\n\\t\nHorizontal Tabulator\n\\v\nVertical Tabulator\nNote\nThe 6 escape characters above were originally designed to control \ntypewriters, teletypes, and fax machines. They do not make any sense in HTML.\nBreaking Long Lines\nFor readability, programmers often like to avoid long code lines.\nA safe way to break up a\nstatement\nis after an operator:\nExample\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";\n\nA safe way to break up a\nstring\nis by using string addition:\nExample\ndocument.getElementById(\"demo\").innerHTML = \"Hello \" +\n\"Dolly!\";\n\nTemplate Strings\nTemplates were introduced with ES6 (JavaScript 2016).\nTemplates are strings enclosed in backticks (`This is a template string`).\nTemplates allow multiline strings:\nExample\nlet text =\n`The quick\nbrown fox\njumps over\nthe lazy dog`;\n\nNote\nTemplates are not supported in Internet Explorer.\nJavaScript Strings as Objects\nNormally, JavaScript strings are primitive values, created from literals:\nlet x = \"John\";\nBut strings can also be defined as objects with the keyword\nnew\n:\nlet y = new String(\"John\");\nExample\nlet x = \"John\";\nlet y = new String(\"John\");\n\nDo not create String objects.\nThe\nnew\nkeyword complicates the code and slows down execution speed.\nString objects can produce unexpected results:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "When using the",
      "content": "==\noperator, x and y are\nequal\n:\nlet x = \"John\";\nlet y = new String(\"John\");",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "When using the",
      "content": "===\noperator, x and y are\nnot equal\n:\nlet x = \"John\";\nlet y = new String(\"John\");\n\nNote the difference between\n(x==y)\nand\n(x===y)\n.\n(x == y)\ntrue or false?\nlet x = new String(\"John\");\nlet y = new String(\"John\");\n\n(x === y)\ntrue or false?\nlet x = new String(\"John\");\nlet y = new String(\"John\");\n\nComparing two JavaScript objects\nalways\nreturns\nfalse\n.\nComplete String Reference\nFor a complete String reference, go to our:\nComplete JavaScript String Reference\n.\nThe reference contains descriptions and examples of all string properties and methods.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let text = \"John Doe\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let carName1 = \"Volvo XC60\";\u00a0 \n  // Double quotes\nlet carName2 = 'Volvo XC60';\u00a0 // Single quotes",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let answer1 = \"It's alright\";\nlet answer2 = \"He is called 'Johnny'\";\nlet answer3 = 'He is called \"Johnny\"';",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let text = `He's often called \"Johnny\"`;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let text = \"We are the so-called \"Vikings\" from the north.\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 11,
      "code": "let text = \"We are the so-called \\\"Vikings\\\" from the north.\";",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "document.getElementById(\"demo\").innerHTML = \"Hello \" +\n\"Dolly!\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let text =\n`The quick\nbrown fox\njumps over\nthe lazy dog`;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let x = \"John\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let x = \"John\";\nlet y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "let x = \"John\";\nlet y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "let x = \"John\";\nlet y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "let x = new String(\"John\");\nlet y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "let x = new String(\"John\");\nlet y = new String(\"John\");",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text = \"John Doe\";"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let carName1 = \"Volvo XC60\";\u00a0 \n# TODO: Complete this line\nlet carName2 = 'Volvo XC60';\u00a0 // Single quotes",
      "solution": "let carName1 = \"Volvo XC60\";\u00a0 \n  // Double quotes\nlet carName2 = 'Volvo XC60';\u00a0 // Single quotes"
    }
  ],
  "related_topics": [
    {
      "id": "493d1a4e-4bcd-466d-953b-036d99ab071e",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1f38a42d-6bd3-4d64-89cf-09105ee9de4b",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "36155e78-ec69-4b16-8af9-4762c41d0d99",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nStrings\n\nStrings are for\nstoring text\nStrings are written\nwith quotes\nUsing Quotes\nA JavaScript string?",
      "options": [
        "None of the above.",
        "no difference between the two",
        "None of the above.",
        "zero or more characters written inside quotes"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript\nStrings\n\nStrings are for\nstoring text\nStrings are written\nwith quotes\nUsing Quotes\nA JavaScript string is 'zero or more characters written inside quotes'."
    },
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "no difference between the two",
        "None of the above.",
        "zero or more characters written inside quotes"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of There is 'no difference between the two'."
    }
  ],
  "summary": "This tutorial covers JavaScriptStrings concepts and techniques. You'll learn how to use JavaScriptStrings effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptStrings and how to apply it in your projects."
}