{
  "id": "f616d640-a07b-443b-9f53-a9ea6fdc0d76",
  "title": "ECMAScript 2024",
  "slug": "ecmascript-2024",
  "metadata": {
    "description": "Learn about ECMAScript 2024 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "object",
      "groupby",
      "quantity",
      "temporal",
      "javascript",
      "const",
      "name",
      "elements",
      "example",
      "function"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS 2024"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2024",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nThe 15th edition, ECMAScript 2024, is published in July 2024.\nNew Features in ES2024\nObject.groupBy()\nMap.groupBy()\nTemporal.PlainDate()\nTemporal.PlainTime()\nTemporal.PlainMonthDay()\nTemporal.PlainYearMonth()\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nJavaScript Object.groupBy()\nExample\n// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);\n\nDescription\nThe\nObject.groupBy()\nmethod groups elements of an object\naccording to string values returned from a callback function.\nThe\nObject.groupBy()\nmethod does not change the original object.\nNote:\nThe elements in the original and in the returned object are the same.\nChanges will be reflected in both the original and in the returned object.\nJavaScript Map.groupBy()\nExample\n// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);\n\nDescription\nThe\nMap.groupBy()\nmethod groups elements of an object\naccording to string values returned from a callback function.\nThe\nMap.groupBy()\nmethod does not change the original object.\nNote:\nThe elements in the original and in the returned object are the same.\nChanges will be reflected in both the original and in the returned object.\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nJavaScript Temporal.PlainDate()\nExample\nconst date = Temporal.PlainDate(2024, 5, 1);\n\nJavaScript Temporal.PlainTime()\nExample\nconst date = new Temporal.PlainTime(10, 30);\n\nJavaScript Temporal.PlainMonthDay()\nExample\nconst date = new Temporal.PlainMonthDay(5, 1);\n\nJavaScript Temporal.YearMonth()\nExample\nconst date = new Temporal.PlainYearMonth(2024, 5);\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const date = Temporal.PlainDate(2024, 5, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const date = new Temporal.PlainTime(10, 30);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const date = new Temporal.PlainMonthDay(5, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const date = new Temporal.PlainYearMonth(2024, 5);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n# TODO: Complete this line\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);",
      "solution": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n# TODO: Complete this line\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);",
      "solution": "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);"
    }
  ],
  "related_topics": [
    {
      "id": "9f8844ee-d51f-4875-ae04-95af89ef7d7c",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "91de8e96-f494-4929-9015-15c05ad1453e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c28d67fc-39c0-41a1-ad00-207fbd65e9fc",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "Not a versions.",
        "None of the above.",
        "named by year: ES2016",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2024 concepts and techniques. You'll learn how to use ECMAScript 2024 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2024 and how to apply it in your projects."
}