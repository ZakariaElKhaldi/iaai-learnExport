{
  "id": "a4c9b02a-fd59-47a5-82e2-752bd524c88d",
  "title": "JavaScriptNumbers",
  "slug": "javascriptnumbers",
  "metadata": {
    "description": "Learn about JavaScriptNumbers with clear explanations and practical examples.",
    "keywords": [
      "number",
      "example",
      "javascript",
      "numbers",
      "result",
      "mynumber",
      "string",
      "infinity",
      "strings",
      "base"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nNumbers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nNumbers\n\nJavaScript has only one type of number",
      "content": ".\nNumbers can be written with or without decimals.\nExample\nlet x = 3.14;\u00a0\u00a0\u00a0 // A number with decimals\nlet y = 3;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // A number without decimals\nTry it \nYourself \u00bb\nExtra large or extra small numbers can be written with scientific (exponent) notation:\nExample\nlet x = 123e5;\u00a0\u00a0\u00a0 // 12300000\nlet y = 123e-5;\u00a0\u00a0 // 0.00123\nTry it \nYourself \u00bb\nJavaScript Numbers are Always 64-bit Floating Point\nUnlike many other programming languages, \nJavaScript does not define different types of numbers, like integers, short, long, \nfloating-point etc.\nJavaScript numbers are always stored as double precision floating point \nnumbers, following the international IEEE 754 standard.\nThis format \nstores numbers in 64 bits, where the number (the fraction) is stored in bits 0 \nto 51, the exponent in bits 52 to 62, and the sign in bit 63:\nValue (aka Fraction/Mantissa)\nExponent\nSign\n52 bits (0 - 51)\n11 bits (52 - 62)\n1 bit (63)\nInteger Precision\nIntegers (numbers without a period or exponent notation) are accurate up to 15 digits.\nExample\nlet x = 999999999999999;\u00a0\u00a0 // x will be 999999999999999\nlet y = 9999999999999999;\u00a0 // y will be 10000000000000000\n\nThe maximum number of decimals is 17.\nFloating Precision\nFloating point arithmetic is not always 100% accurate:\nlet x = 0.2 + 0.1;\nTry it \nYourself \u00bb\nTo solve the problem above, it helps to multiply and divide:\nlet x = (0.2 * 10 + 0.1 * 10) / 10;\n\nAdding Numbers and Strings\nWARNING !!\nJavaScript uses the + operator for both addition and concatenation.\nNumbers are added. Strings are concatenated.\nIf you add two numbers, the result will be a number:\nExample\nlet x = 10;\nlet y = 20;\nlet z = x + y;\n\nIf you add two strings, the result will be a string concatenation:\nExample\nlet x = \"10\";\nlet y = \"20\";\nlet z = x + y;\n\nIf you add a number and a string, the result will be a string concatenation:\nExample\nlet x = 10;\nlet y = \"20\";\nlet z = x + y;\n\nIf you add a string and a number, the result will be a string concatenation:\nExample\nlet x = \"10\";\nlet y = 20;\nlet z = x + y;\n\nA common mistake is to expect this result to be 30:\nExample\nlet x = 10;\nlet y = 20;\nlet z = \"The result is: \" + x + y;\n\nA common mistake is to expect this result to be 102030:\nExample\nlet x = 10;\nlet y = 20;\nlet z = \"30\";\nlet result = x + y + z;\n\nThe JavaScript interpreter works from left to right.\nFirst 10 + 20 is added because x and y are both numbers.\nThen 30 + \"30\" is concatenated because z is a string.\nNumeric Strings\nJavaScript strings can have numeric content:\nlet x = 100;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x is a number\nlet y = \"100\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // y is a \nstring\nJavaScript will try to convert strings to numbers in all numeric operations:\nThis will work:\nlet x = \"100\";\nlet y = \"10\";\nlet z = x / y;\n\nThis will also work:\nlet x = \"100\";\nlet y = \"10\";\nlet z = x * y;\n\nAnd this will work:\nlet x = \"100\";\nlet y = \"10\";\nlet z = x - y;\n\nBut this will not work:\nlet x = \"100\";\nlet y = \"10\";\nlet z = x + y;\n\nIn the last example JavaScript uses the + operator to concatenate the strings.\nNaN - Not a Number\nNaN\nis a JavaScript reserved word indicating that a number is not a legal number.\nTrying to do arithmetic with a non-numeric string will result in\nNaN\n(Not a \nNumber):\nExample\nlet x = 100 / \"Apple\";\n\nHowever, if the string is numeric, the result will be a \nnumber:\nExample\nlet x = 100 / \"10\";\n\nYou can use the global JavaScript function\nisNaN()\nto find out if a value is a not a number:\nExample\nlet x = 100 / \"Apple\";\nisNaN(x);\n\nWatch out for\nNaN\n. If you use\nNaN\nin a mathematical operation, the result will also be\nNaN\n:\nExample\nlet x = NaN;\nlet y = 5;\nlet z = x + y;\n\nOr the result might be a concatenation like NaN5:\nExample\nlet x = NaN;\nlet y = \"5\";\nlet z = x + y;\n\nNaN\nis a number:\ntypeof NaN\nreturns\nnumber\n:\nExample\ntypeof NaN;\n\nInfinity\nInfinity\n(or\n-Infinity\n) is the value JavaScript will return if you calculate a number outside the largest \npossible number.\nExample\nlet myNumber = 2;\n// Execute until Infinity\nwhile (myNumber != Infinity) {\nmyNumber = myNumber * myNumber;\n}\nTry \nit Yourself \u00bb\nDivision by 0 (zero) also generates\nInfinity\n:\nExample\nlet x =\u00a0 2 / 0;\nlet y = -2 / 0;\n\nInfinity\nis a number:\ntypeof Infinity\nreturns\nnumber\n.\nExample\ntypeof Infinity;\n\nHexadecimal\nJavaScript interprets numeric constants as hexadecimal if they are preceded by \n0x.\nExample\nlet x = 0xFF;\n\nNever write a number with a leading zero (like 07).\nSome JavaScript versions interpret \nnumbers as octal if they are written with a leading zero.\nBy default, JavaScript displays numbers as\nbase 10\ndecimals.\nBut you can use the\ntoString()\nmethod to output numbers from\nbase 2\nto\nbase 36\n.\nHexadecimal is\nbase 16\n. Decimal is\nbase 10\n. \nOctal is\nbase 8\n. Binary is\nbase 2\n.\nExample\nlet myNumber = 32;\nmyNumber.toString(32);\nmyNumber.toString(16);\nmyNumber.toString(12);\nmyNumber.toString(10);\nmyNumber.toString(8);\nmyNumber.toString(2);\n\nJavaScript Numbers as Objects\nNormally JavaScript numbers are primitive values created from literals:\nlet x = 123;\nBut numbers can also be defined as objects with the keyword\nnew\n:\nlet y = new Number(123);\nExample\nlet x = 123;\nlet y = new Number(123);\nTry \nit Yourself \u00bb\nDo not create Number objects.\nThe\nnew\nkeyword complicates the code and slows down execution speed.\nNumber Objects can produce unexpected results:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "When using the",
      "content": "==\noperator, x and y are\nequal\n:\nlet x = 500;\nlet y = new Number(500);",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "When using the",
      "content": "===\noperator, x and y are\nnot equal\n.\nlet x = 500;\nlet y = new Number(500);\n\nNote the difference between\n(x==y)\nand\n(x===y)\n.\n(x == y)\ntrue or false?\nlet x = new Number(500);\nlet y = new Number(500);\n\n(x === y)\ntrue or false?\nlet x = new Number(500);\nlet y = new Number(500);\n\nComparing two JavaScript objects\nalways\nreturns\nfalse\n.\nComplete JavaScript Number Reference\nFor a complete Number reference, visit our:\nComplete JavaScript Number Reference\n.\nThe reference contains descriptions and examples of all Number  properties and methods.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 3.14;\u00a0\u00a0\u00a0 // A number with decimals\nlet y = 3;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // A number without decimals",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 123e5;\u00a0\u00a0\u00a0 // 12300000\nlet y = 123e-5;\u00a0\u00a0 // 0.00123",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = 999999999999999;\u00a0\u00a0 // x will be 999999999999999\nlet y = 9999999999999999;\u00a0 // y will be 10000000000000000",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = 0.2 + 0.1;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = (0.2 * 10 + 0.1 * 10) / 10;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x = 10;\nlet y = 20;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = \"10\";\nlet y = \"20\";\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let x = 10;\nlet y = \"20\";\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let x = \"10\";\nlet y = 20;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let x = 10;\nlet y = 20;\nlet z = \"The result is: \" + x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let x = 10;\nlet y = 20;\nlet z = \"30\";\nlet result = x + y + z;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let x = 100;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x is a number\nlet y = \"100\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // y is a \nstring",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let x = \"100\";\nlet y = \"10\";\nlet z = x / y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "let x = \"100\";\nlet y = \"10\";\nlet z = x * y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "let x = \"100\";\nlet y = \"10\";\nlet z = x - y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "let x = \"100\";\nlet y = \"10\";\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "let x = 100 / \"Apple\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "let x = 100 / \"10\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let x = 100 / \"Apple\";\nisNaN(x);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "let x = NaN;\nlet y = 5;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "let x = NaN;\nlet y = \"5\";\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "typeof NaN;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "let myNumber = 2;\n// Execute until Infinity\nwhile (myNumber != Infinity) {\nmyNumber = myNumber * myNumber;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "let x =\u00a0 2 / 0;\nlet y = -2 / 0;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "typeof Infinity;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "let x = 0xFF;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 31,
      "code": "let myNumber = 32;\nmyNumber.toString(32);\nmyNumber.toString(16);\nmyNumber.toString(12);\nmyNumber.toString(10);\nmyNumber.toString(8);\nmyNumber.toString(2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "let x = 123;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "let y = new Number(123);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 34,
      "code": "let x = 123;\nlet y = new Number(123);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 35,
      "code": "let x = 500;\nlet y = new Number(500);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 36,
      "code": "let x = 500;\nlet y = new Number(500);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 37,
      "code": "let x = new Number(500);\nlet y = new Number(500);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 38,
      "code": "let x = new Number(500);\nlet y = new Number(500);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 3.14;\u00a0\u00a0\u00a0 // A number with decimals\nlet y = 3;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // A number without decimals"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 123e5;\u00a0\u00a0\u00a0 // 12300000\nlet y = 123e-5;\u00a0\u00a0 // 0.00123"
    }
  ],
  "related_topics": [
    {
      "id": "c898170f-01b3-4dd8-82f9-dcc6c0c16d38",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "49ea0671-c314-41dd-bcf8-82540f46e1ed",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8b4bdc51-5487-425a-9efe-a6b9fc3a3ad3",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Numbers?",
      "options": [
        "Always 64-bit Floating Point\nUnlike many other programming languages",
        "None of the above.",
        "always stored as double precision floating point \nnumbers",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Numbers is 'Always 64-bit Floating Point\nUnlike many other programming languages'."
    },
    {
      "question": "What is JavaScript numbers?",
      "options": [
        "always stored as double precision floating point \nnumbers",
        "Always 64-bit Floating Point\nUnlike many other programming languages",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript numbers is 'always stored as double precision floating point \nnumbers'."
    }
  ],
  "summary": "This tutorial covers JavaScriptNumbers concepts and techniques. You'll learn how to use JavaScriptNumbers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptNumbers and how to apply it in your projects."
}