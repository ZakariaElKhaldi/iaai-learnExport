{
  "id": "a100b7cc-b683-4999-b537-b17fe42d66af",
  "title": "JavaScriptNumber Properties",
  "slug": "javascriptnumber-properties",
  "metadata": {
    "description": "Learn about JavaScriptNumber Properties with clear explanations and practical examples.",
    "keywords": [
      "number",
      "javascript",
      "example",
      "properties",
      "epsilon",
      "possible",
      "safe",
      "integer",
      "returned",
      "overflow"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Number Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nNumber Properties",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Property\nDescription\nEPSILON\nThe difference between 1 and the smallest number > 1.\nMAX_VALUE\nThe largest number possible in JavaScript\nMIN_VALUE\nThe smallest number possible in JavaScript\nMAX_SAFE_INTEGER\nThe maximum safe integer (2\n53\n- 1)\nMIN_SAFE_INTEGER\nThe minimum safe integer -(2\n53\n- 1)\nPOSITIVE_INFINITY\nInfinity (returned on overflow)\nNEGATIVE_INFINITY\nNegative infinity (returned on overflow)\nNaN\nA \"Not-a-Number\" value\nJavaScript EPSILON\nNumber.EPSILON\nis the difference between\nthe smallest floating point number greater than 1 and 1.\nExample\nlet x = Number.EPSILON;\nTry \nit Yourself \u00bb\nNote\nNumber.EPSILON\nis an\nES6\nfeature.\nIt does not work in Internet Explorer.\nJavaScript MAX_VALUE\nNumber.MAX_VALUE\nis a constant representing the largest possible number in JavaScript.\nExample\nlet x = Number.MAX_VALUE;\nTry \nit Yourself \u00bb\nNumber Properties Cannot be Used on Variables\nNumber properties belong to the JavaScript\nNumber Object\n.\nThese properties can only be accessed as\nNumber.MAX_VALUE\n.\nUsing x.MAX_VALUE, where x is a variable or a value,\nwill return\nundefined\n:\nExample\nlet x = 6;\nx.MAX_VALUE\nTry \nit Yourself \u00bb\nJavaScript MIN_VALUE\nNumber.MIN_VALUE\nis a constant representing the lowest possible number in JavaScript.\nExample\nlet x = Number.MIN_VALUE;\nTry \nit Yourself \u00bb\nJavaScript MAX_SAFE_INTEGER\nNumber.MAX_SAFE_INTEGER\nrepresents the maximum safe integer in JavaScript.\nNumber.MAX_SAFE_INTEGER\nis (2\n53\n- 1).\nExample\nlet x = Number.MAX_SAFE_INTEGER;\nTry \nit Yourself \u00bb\nJavaScript MIN_SAFE_INTEGER\nNumber.MIN_SAFE_INTEGER\nrepresents the minimum safe integer in JavaScript.\nNumber.MIN_SAFE_INTEGER\nis -(2\n53\n- 1).\nExample\nlet x = Number.MIN_SAFE_INTEGER;\nTry \nit Yourself \u00bb\nNote\nMAX_SAFE_INTEGER\nand\nMIN_SAFE_INTEGER\nare\nES6\nfeatures.\nThey do not work in Internet Explorer.\nJavaScript POSITIVE_INFINITY\nExample\nlet x = Number.POSITIVE_INFINITY;\nTry \nit Yourself \u00bb\nPOSITIVE_INFINITY\nis returned on overflow:\nlet x = 1 / 0;\nTry \nit Yourself \u00bb\nJavaScript NEGATIVE_INFINITY\nExample\nlet x = Number.NEGATIVE_INFINITY;\nTry \nit Yourself \u00bb\nNEGATIVE_INFINITY\nis returned on overflow:\nlet x = -1 / 0;\nTry \nit Yourself \u00bb\nJavaScript NaN - Not a Number\nNaN\nis a JavaScript reserved word for a number that is not a legal number.\nExamples\nlet x = Number.NaN;\nTry \nit Yourself \u00bb\nTrying to do arithmetic with a non-numeric string will result in\nNaN\n(Not a \nNumber):\nlet x = 100 / \"Apple\";\n\nComplete JavaScript Number Reference\nFor a complete Number reference, visit our:\nComplete JavaScript Number Reference\n.\nThe reference contains descriptions and examples of all Number  properties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let x = Number.EPSILON;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = Number.MAX_VALUE;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 6;\nx.MAX_VALUE",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = Number.MIN_VALUE;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = Number.MAX_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = Number.MIN_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = Number.POSITIVE_INFINITY;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x = Number.NEGATIVE_INFINITY;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 11,
      "code": "let x = Number.NaN;",
      "language": "javascript",
      "explanation": "Example of examples"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = Number.EPSILON;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = Number.MAX_VALUE;"
    }
  ],
  "related_topics": [
    {
      "id": "4d651ee6-49ca-4939-a65e-2a75089bf18c",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8cf46b25-a2b7-4472-91a3-6b7ed8cac905",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ea2ae995-afb2-4f24-9321-19cd83e0864d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is EPSILON?",
      "options": [
        "the difference between\nthe smallest floating point number greater than 1 and 1",
        "an\nES6\nfeature",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of EPSILON is 'the difference between\nthe smallest floating point number greater than 1 and 1'."
    },
    {
      "question": "What is EPSILON?",
      "options": [
        "None of the above.",
        "an\nES6\nfeature",
        "the difference between\nthe smallest floating point number greater than 1 and 1",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of EPSILON is 'an\nES6\nfeature'."
    }
  ],
  "summary": "This tutorial covers JavaScriptNumber Properties concepts and techniques. You'll learn how to use JavaScriptNumber Properties effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptNumber Properties and how to apply it in your projects."
}