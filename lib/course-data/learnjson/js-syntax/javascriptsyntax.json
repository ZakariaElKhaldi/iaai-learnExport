{
  "id": "da29589f-5e5c-4749-8d02-b15101ad3dd6",
  "title": "JavaScriptSyntax",
  "slug": "javascriptsyntax",
  "metadata": {
    "description": "Learn about JavaScriptSyntax with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "variables",
      "values",
      "lastname",
      "case",
      "syntax",
      "variable",
      "john",
      "used",
      "identifiers"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Syntax"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nSyntax",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript syntax is the set of\u00a0rules, how \nJavaScript programs are constructed:\n// How to create variables:\nvar x;\nlet y;\n// How to use variables:\nx = 5;\ny = 6;\nlet z = x + y;\nJavaScript Values\nThe JavaScript syntax defines two types of values:\nFixed values\nVariable values\nFixed values are called\nLiterals\n.\nVariable values are called\nVariables\n.\nJavaScript Literals\nThe two most important syntax rules for fixed values are:\n1.\nNumbers\nare written with or \nwithout decimals:\n10.50\n1001\n\n2.\nStrings\nare text, written within double or single quotes:\n\"John Doe\"\n'John Doe'\n\nJavaScript Variables\nIn a programming language,\nvariables\nare used to\nstore\ndata values.\nJavaScript uses the keywords\nvar\n,\nlet\nand\nconst\nto\ndeclare\nvariables.\nAn\nequal sign\nis used to\nassign values\nto variables.\nIn this example, x is defined as a variable. Then, x is \nassigned (given) the value \n6:\nlet x;\nx = 6;\n\nJavaScript Operators\nJavaScript uses\narithmetic operators\n(\n+\n-\n*\n/\n) to\ncompute\nvalues:\n(5 + 6) * 10\n\nJavaScript uses an\nassignment operator\n(\n=\n) to\nassign\nvalues to variables:\nlet x, y;\nx = 5;\ny = 6;\n\nJavaScript Expressions\nAn expression is a combination of values, variables, and operators, \nwhich computes to a value.\nThe computation is called an evaluation.\nFor example, 5 * 10 evaluates to 50:\n5 * 10\n\nExpressions can also contain variable values:\nx * 10\n\nThe values can be of various types, such as numbers and strings.\nFor example, \"John\" + \" \" + \"Doe\", evaluates to \"John Doe\":\n\"John\" + \" \" + \"Doe\"\n\nJavaScript Keywords\nJavaScript\nkeywords\nare used to \nidentify actions to be performed.\nThe\nlet\nkeyword tells the browser to create variables:\nlet x, y;\nx = 5 + 6;\ny = x * 10;\n\nThe\nvar\nkeyword also tells the browser to create variables:\nvar x, y;\nx = 5 + 6;\ny = x * 10;\n\nIn these examples, using\nvar\nor\nlet\nwill produce the same result.\nYou will learn more about\nvar\nand\nlet\nlater in this tutorial.\nJavaScript Comments\nNot all JavaScript statements are \"executed\".\nCode after double slashes\n//\nor between\n/*\nand\n*/\nis treated as a\ncomment\n.\nComments are ignored, and will not be \nexecuted:\nlet x = 5;\u00a0\u00a0 // I will be executed\n// x = 6;\u00a0\u00a0 I will \nNOT be executed\n\nYou will learn more about comments in a later chapter.\nJavaScript Identifiers / Names\nIdentifiers are JavaScript names.\nIdentifiers are used to name variables and keywords, and functions.\nThe rules for legal names are the same in most programming languages.\nA JavaScript name must begin with:\nA letter (A-Z or a-z)\nA dollar sign ($)\nOr an underscore (_)\nSubsequent characters may be letters, digits, underscores, or dollar signs.\nNote\nNumbers are not allowed as the first character in names.\nThis way JavaScript can easily distinguish identifiers from numbers.\nJavaScript is Case Sensitive\nAll JavaScript identifiers are\ncase sensitive\n.\nThe variables\nlastName\nand\nlastname\n, \nare two different variables:\nlet lastname, lastName;\nlastName = \"Doe\";\nlastname = \"Peterson\";\n\nJavaScript does not interpret\nLET\nor\nLet\nas the keyword\nlet\n.\nJavaScript and Camel Case\nHistorically, programmers have used different ways of joining multiple words into one variable name:\nHyphens:\nfirst-name, last-name, master-card, inter-city.\nHyphens are not allowed in JavaScript. They are reserved for subtractions.\nUnderscore:\nfirst_name, last_name, master_card, inter_city.\nUpper Camel Case (Pascal Case):\nFirstName, LastName, MasterCard, InterCity.\nLower Camel Case:\nJavaScript programmers tend to use camel case that starts with a lowercase letter:\nfirstName, lastName, masterCard, interCity.\nJavaScript Character Set\nJavaScript uses the\nUnicode\ncharacter set.\nUnicode covers (almost) all the characters, punctuations, and symbols in the world.\nFor a closer look, please study our\nComplete Unicode Reference\n.\nVideo: JavaScript Syntax\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "10.50\n1001",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "\"John Doe\"\n'John Doe'",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x;\nx = 6;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "(5 + 6) * 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x, y;\nx = 5;\ny = 6;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "5 * 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "x * 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "\"John\" + \" \" + \"Doe\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x, y;\nx = 5 + 6;\ny = x * 10;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var x, y;\nx = 5 + 6;\ny = x * 10;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let x = 5;\u00a0\u00a0 // I will be executed\n// x = 6;\u00a0\u00a0 I will \nNOT be executed",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let lastname, lastName;\nlastName = \"Doe\";\nlastname = \"Peterson\";",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "10.50\n1001"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "\"John Doe\"\n'John Doe'"
    }
  ],
  "related_topics": [
    {
      "id": "e23b11df-4563-471f-aa92-8bfc9de24fab",
      "title": "Javascript Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "7659c361-64e0-42d1-aaf8-ec248ef2b8a1",
      "title": "Javascript Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nSyntax\n\nJavaScript syntax?",
      "options": [
        "called\nVariables",
        "the set of\u00a0rules",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of JavaScript\nSyntax\n\nJavaScript syntax is 'the set of\u00a0rules'."
    },
    {
      "question": "What is Variable values?",
      "options": [
        "called\nVariables",
        "None of the above.",
        "the set of\u00a0rules",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Variable values is 'called\nVariables'."
    }
  ],
  "summary": "This tutorial covers JavaScriptSyntax concepts and techniques. You'll learn how to use JavaScriptSyntax effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptSyntax and how to apply it in your projects."
}