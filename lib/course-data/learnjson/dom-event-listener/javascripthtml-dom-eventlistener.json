{
  "id": "933c9cc6-6034-4b10-ba7b-7aafcf060ea2",
  "title": "JavaScriptHTML DOM EventListener",
  "slug": "javascripthtml-dom-eventlistener",
  "metadata": {
    "description": "Learn about JavaScriptHTML DOM EventListener with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "event",
      "element",
      "addeventlistener",
      "click",
      "html",
      "method",
      "function",
      "example",
      "object",
      "myfunction"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "DOM Event Listener"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nHTML DOM EventListener",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The addEventListener() method\nExample\nAdd an event listener that fires when a user clicks a button:\ndocument.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);\n\nThe\naddEventListener()\nmethod attaches an event handler to the specified element.\nThe\naddEventListener()\nmethod attaches an event handler to an element without overwriting existing event handlers.\nYou can add many event handlers to one element.\nYou can add many event handlers of the same type to one element, i.e two \"click\" events.\nYou can add event listeners to any DOM object not only HTML elements. i.e the window object.\nThe\naddEventListener()\nmethod makes it easier to control how the event reacts to bubbling.\nWhen using the\naddEventListener()\nmethod, the JavaScript is separated from the HTML markup, for better readability \nand allows you to add event listeners even when you do not control the HTML markup.\nYou can easily remove an event listener by using the\nremoveEventListener()\nmethod.\nSyntax\nelement\n.addEventListener(\nevent, function, useCapture\n);\nThe first parameter is the type of the event (like \"\nclick\n\" or \"\nmousedown\n\" \nor any other\nHTML DOM Event\n.)\nThe second parameter is the function we want to call when the event occurs.\nThe third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.\nNote that you don't use the \n\"on\" prefix for the event; use \"\nclick\n\" instead of \"\nonclick\n\".\nAdd an Event Handler to an Element\nExample\nAlert \"Hello World!\" when the user clicks on an element:\nelement\n.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });\n\nYou can also refer to an external \"named\" function:\nExample\nAlert \"Hello World!\" when the user clicks on an element:\nelement\n.addEventListener(\"click\",  myFunction);\nfunction myFunction() {\nalert (\"Hello World!\");\n}\n\nAdd Many Event Handlers to the Same Element\nThe\naddEventListener()\nmethod allows you to add many events to the same \nelement, without overwriting existing events:\nExample\nelement\n.addEventListener(\"click\", myFunction);\nelement\n.addEventListener(\"click\", mySecondFunction);\n\nYou can add events of different types to the same element:\nExample\nelement\n.addEventListener(\"mouseover\", myFunction);\nelement\n.addEventListener(\"click\", mySecondFunction);\nelement\n.addEventListener(\"mouseout\", myThirdFunction);\n\nAdd an Event Handler to the window Object\nThe\naddEventListener()\nmethod allows you to add event listeners on any HTML \nDOM object such as HTML elements, the HTML document, the window object, or other \nobjects that support events, like the\nxmlHttpRequest\nobject.\nExample\nAdd an event listener that fires when a user resizes the window:\nwindow.addEventListener(\"resize\", function(){\ndocument.getElementById(\"demo\").innerHTML =\nsometext\n;\n});\n\nPassing Parameters\nWhen passing parameter values, use \nan \"anonymous function\" that calls the specified function with the parameters:\nExample\nelement\n.addEventListener(\"click\", function(){ myFunction(p1, p2); });\n\nEvent Bubbling or Event Capturing?\nThere are two ways of event propagation in the HTML DOM, bubbling and capturing.\nEvent propagation is a way of defining the element order when an event occurs.\nIf you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \n\"click\" event should be handled first?\nIn\nbubbling\nthe inner most element's event is handled first and then the outer:\nthe <p> element's click event is handled first, then the <div> element's click event.\nIn\ncapturing\nthe outer most element's event is handled first and then the inner:\nthe <div> element's click event will be handled first, then the <p> element's click event.\nWith the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:\naddEventListener(\nevent\n,\nfunction\n,\nuseCapture\n);\nThe default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\nExample\ndocument.getElementById(\"myP\").addEventListener(\"click\", myFunction, true);\ndocument.getElementById(\"myDiv\").addEventListener(\"click\", myFunction, true);\n\nThe removeEventListener() method\nThe\nremoveEventListener()\nmethod removes event handlers that have been \nattached with the addEventListener() method:\nExample\nelement\n.removeEventListener(\"mousemove\", myFunction);\n\nHTML DOM Event Object Reference\nFor a list of all HTML DOM events, look at our complete\nHTML DOM Event Object Reference\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "document.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "element\n.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "element\n.addEventListener(\"click\",  myFunction);\nfunction myFunction() {\nalert (\"Hello World!\");\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "element\n.addEventListener(\"click\", myFunction);\nelement\n.addEventListener(\"click\", mySecondFunction);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "element\n.addEventListener(\"mouseover\", myFunction);\nelement\n.addEventListener(\"click\", mySecondFunction);\nelement\n.addEventListener(\"mouseout\", myThirdFunction);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "window.addEventListener(\"resize\", function(){\ndocument.getElementById(\"demo\").innerHTML =\nsometext\n;\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "element\n.addEventListener(\"click\", function(){ myFunction(p1, p2); });",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "document.getElementById(\"myP\").addEventListener(\"click\", myFunction, true);\ndocument.getElementById(\"myDiv\").addEventListener(\"click\", myFunction, true);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "element\n.removeEventListener(\"mousemove\", myFunction);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "document.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "element\n.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });"
    }
  ],
  "related_topics": [
    {
      "id": "2c697722-e64a-4b93-b00e-2bd7943a3132",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "206c04d1-554c-409b-8a0a-3d81774306eb",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cadea155-5e14-4856-b4a4-a533f7877b90",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the JavaScript?",
      "options": [
        "separated from the HTML markup",
        "None of the above.",
        "the type of the event (like \"\nclick\n\" or \"\nmousedown\n\" \nor any other\nHTML DOM Event",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the JavaScript is 'separated from the HTML markup'."
    },
    {
      "question": "What is The first parameter?",
      "options": [
        "None of the above.",
        "separated from the HTML markup",
        "None of the above.",
        "the type of the event (like \"\nclick\n\" or \"\nmousedown\n\" \nor any other\nHTML DOM Event"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The first parameter is 'the type of the event (like \"\nclick\n\" or \"\nmousedown\n\" \nor any other\nHTML DOM Event'."
    }
  ],
  "summary": "This tutorial covers JavaScriptHTML DOM EventListener concepts and techniques. You'll learn how to use JavaScriptHTML DOM EventListener effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptHTML DOM EventListener and how to apply it in your projects."
}