{
  "id": "50f338e0-3b88-48a8-9ba4-ae7674e7c985",
  "title": "JavaScript BigInt",
  "slug": "javascript-bigint",
  "metadata": {
    "description": "Learn about JavaScript BigInt with clear explanations and practical examples.",
    "keywords": [
      "bigint",
      "number",
      "javascript",
      "integer",
      "example",
      "safe",
      "isinteger",
      "issafeinteger",
      "integers",
      "precision"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS BigInt"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript BigInt",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript BigInt\n\nJavaScript\nBigInt\nvariables are used to store big integer values\nthat are too big to be represented by a normal JavaScript\nNumber",
      "content": ".\nJavaScript Integer Accuracy\nJavaScript integers are only accurate up to 15 digits:\nInteger Precision\nlet x = 999999999999999;\nlet y = 9999999999999999;\n\nIn JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).\nWith this standard, large integer cannot be exactly represented and will be rounded.\nBecause of this, JavaScript can only safely represent integers:\nUp to\n9007199254740991\n+(2\n53\n-1)\nand",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Down to",
      "content": "-9007199254740991\n-(2\n53\n-1).\nInteger values outside this range lose precision.\nHow to Create a BigInt\nTo create a\nBigInt\n, append n to the end of an integer or call\nBigInt()\n:\nExamples\nlet x = 9999999999999999;\nlet y = 9999999999999999n;\n\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n\nBigInt: A new JavaScript Datatype\nThe JavaScript\ntypeof\na\nBigInt\nis \"bigint\":\nExample\nlet x = BigInt(999999999999999);\nlet type = typeof x;\n\nBigInt\nis the second numeric data type in JavaScript\n(after\nNumber\n).\nWith\nBigInt\nthe total number of supported data types in JavaScript is 8:\n1. String\n2. Number\n3. Bigint\n4. Boolean\n5. Undefined\n6. Null\n7. Symbol\n8. Object\nBigInt Operators\nOperators that can be used on a JavaScript\nNumber\ncan also be used on a\nBigInt\n.\nBigInt Multiplication Example\nlet x = 9007199254740995n;\nlet y = 9007199254740995n;\nlet z = x * y;\n\nNotes\nArithmetic between a\nBigInt\nand a\nNumber\nis not allowed (type conversion lose information).\nUnsigned right shift (>>>) can not be done on a\nBigInt\n(it does not have a fixed width).\nBigInt Decimals\nA\nBigInt\ncan not have decimals.\nBigInt Division Example\nlet x = 5n;\nlet y = x / 2;\n// Error: Cannot mix BigInt and other types, use explicit conversion.\nlet x = 5n;\nlet y = Number(x) / 2;\n\nBigInt Hex, Octal and Binary\nBigInt\ncan also be written in hexadecimal, octal, or binary notation:\nBigInt Hex Example\nlet hex = 0x20000000000003n;\nlet oct = 0o400000000000000003n;\nlet bin = 0b100000000000000000000000000000000000000000000000000011n;\n\nPrecision Curiosity\nRounding can compromise program security:\nMAX_SAFE_INTEGER Example\n9007199254740992 === 9007199254740993; // is true !!!\n\nBrowser Support\nBigInt\nis supported in all browsers since September 2020:\nChrome 67\nEdge 79\nFirefox 68\nSafari 14\nOpera 54\nMay 2018\nJan 2020\nJul 2019\nSep 2020\nJun 2018\nMinimum and Maximum Safe Integers\nES6\nadded max and min properties to the Number object:\nMAX_SAFE_INTEGER\nMIN_SAFE_INTEGER\nMAX_SAFE_INTEGER Example\nlet x = Number.MAX_SAFE_INTEGER;\n\nMIN_SAFE_INTEGER Example\nlet x = Number.MIN_SAFE_INTEGER;\n\nNew Number Methods\nES6\nalso added 2 new methods to the Number object:\nNumber.isInteger()\nNumber.isSafeInteger()\nThe Number.isInteger() Method\nThe\nNumber.isInteger()\nmethod returns\ntrue\nif the argument is an integer.\nExample: isInteger()\nNumber.isInteger(10);\nNumber.isInteger(10.5);\n\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe\nNumber.isSafeInteger()\nmethod returns\ntrue\nif the argument is a safe integer.\nExample isSafeInteger()\nNumber.isSafeInteger(10);\nNumber.isSafeInteger(12345678901234567890);\n\nSafe integers are all integers from -(2\n53\n- 1) to +(2\n53\n- 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Integer Precision",
      "content": "",
      "order": 4,
      "code": "let x = 999999999999999;\nlet y = 9999999999999999;",
      "language": "javascript",
      "explanation": "Example of integer precision"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 5,
      "code": "let x = 9999999999999999;\nlet y = 9999999999999999n;",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = BigInt(999999999999999);\nlet type = typeof x;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "BigInt Multiplication Example",
      "content": "",
      "order": 7,
      "code": "let x = 9007199254740995n;\nlet y = 9007199254740995n;\nlet z = x * y;",
      "language": "javascript",
      "explanation": "Example of bigint multiplication example"
    },
    {
      "type": "code_example",
      "title": "BigInt Division Example",
      "content": "",
      "order": 8,
      "code": "let x = 5n;\nlet y = x / 2;\n// Error: Cannot mix BigInt and other types, use explicit conversion.",
      "language": "javascript",
      "explanation": "Example of bigint division example"
    },
    {
      "type": "code_example",
      "title": "BigInt Hex Example",
      "content": "",
      "order": 9,
      "code": "let hex = 0x20000000000003n;\nlet oct = 0o400000000000000003n;\nlet bin = 0b100000000000000000000000000000000000000000000000000011n;",
      "language": "javascript",
      "explanation": "Example of bigint hex example"
    },
    {
      "type": "code_example",
      "title": "MAX_SAFE_INTEGER Example",
      "content": "",
      "order": 10,
      "code": "9007199254740992 === 9007199254740993; // is true !!!",
      "language": "javascript",
      "explanation": "Example of max_safe_integer example"
    },
    {
      "type": "code_example",
      "title": "MAX_SAFE_INTEGER Example",
      "content": "",
      "order": 11,
      "code": "let x = Number.MAX_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of max_safe_integer example"
    },
    {
      "type": "code_example",
      "title": "MIN_SAFE_INTEGER Example",
      "content": "",
      "order": 12,
      "code": "let x = Number.MIN_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of min_safe_integer example"
    },
    {
      "type": "code_example",
      "title": "Example: isInteger()",
      "content": "",
      "order": 13,
      "code": "Number.isInteger(10);\nNumber.isInteger(10.5);",
      "language": "javascript",
      "explanation": "Example of example: isinteger()"
    },
    {
      "type": "code_example",
      "title": "Example isSafeInteger()",
      "content": "",
      "order": 14,
      "code": "Number.isSafeInteger(10);\nNumber.isSafeInteger(12345678901234567890);",
      "language": "javascript",
      "explanation": "Example of example issafeinteger()"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 999999999999999;\nlet y = 9999999999999999;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 9999999999999999;\nlet y = 9999999999999999n;"
    }
  ],
  "related_topics": [
    {
      "id": "97a8a865-ada6-40bf-831f-8720da6bdba1",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2cdab964-5c92-4b03-80de-0b5ad6a5aaab",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "68758851-8650-4188-8ed4-7e3333294e9f",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript BigInt\n\nJavaScript\nBigInt\nvariables are used to store big integer values\nthat?",
      "options": [
        "None of the above.",
        "only accurate up to 15 digits:\nInteger Precision\nlet x = 999999999999999;\nlet y = 9999999999999999;\n\nIn JavaScript",
        "None of the above.",
        "too big to be represented by a normal JavaScript\nNumber"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript BigInt\n\nJavaScript\nBigInt\nvariables are used to store big integer values\nthat is 'too big to be represented by a normal JavaScript\nNumber'."
    },
    {
      "question": "What is JavaScript Integer Accuracy\nJavaScript integers?",
      "options": [
        "only accurate up to 15 digits:\nInteger Precision\nlet x = 999999999999999;\nlet y = 9999999999999999;\n\nIn JavaScript",
        "None of the above.",
        "None of the above.",
        "too big to be represented by a normal JavaScript\nNumber"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Integer Accuracy\nJavaScript integers is 'only accurate up to 15 digits:\nInteger Precision\nlet x = 999999999999999;\nlet y = 9999999999999999;\n\nIn JavaScript'."
    }
  ],
  "summary": "This tutorial covers JavaScript BigInt concepts and techniques. You'll learn how to use JavaScript BigInt effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript BigInt and how to apply it in your projects."
}