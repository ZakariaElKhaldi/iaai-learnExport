{
  "id": "c8f06a27-6910-4e96-bdc3-59c4e48d9907",
  "title": "JSON Object Literals",
  "slug": "json-object-literals",
  "metadata": {
    "description": "Learn about JSON Object Literals with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "json",
      "object",
      "myobj",
      "name",
      "myjson",
      "const",
      "null",
      "john",
      "string",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JSON Objects"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JSON Object Literals",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This is a JSON string:\n'{\"name\":\"John\", \"age\":30, \"car\":null}'\nInside the JSON string there is a JSON object literal:\n{\"name\":\"John\", \"age\":30, \"car\":null}\nJSON object literals are surrounded by curly braces {}.\nJSON object literals contains key/value pairs.\nKeys and values are separated by a colon.\nKeys must be strings, \nand values must be a valid JSON data type:\nstring\nnumber\nobject\narray\nboolean\nnull\nEach key/value pair is separated by a comma.\nIt is a common mistake to call a JSON object literal \"a JSON object\".\nJSON cannot be an object. JSON is a string format.\nThe data is only JSON when it is in a string format. \nWhen it is converted to a JavaScript variable, it becomes a JavaScript object.\nJavaScript Objects\nYou can create a JavaScript object from a JSON object literal:\nExample\nmyObj = {\"name\":\"John\", \"age\":30, \"car\":null};\n\nNormally, you create a JavaScript object by parsing a JSON string:\nExample\nmyJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nmyObj = JSON.parse(myJSON);\n\nAccessing Object Values\nYou can access object values by using dot (.) notation:\nExample\nconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj.name;\n\nYou can also access object values by using bracket ([]) notation:\nExample\nconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj[\"name\"];\n\nLooping an Object\nYou can loop through object properties with a for-in loop:\nExample\nconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nlet text = \"\";\nfor (const x in myObj) {\ntext += x + \", \";\n}\n\nIn a for-in loop, use the bracket notation to access the property\nvalues\n:\nExample\nconst myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nlet text = \"\";\nfor (const x in myObj) {\ntext += myObj[x] + \", \";\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "{\"name\":\"John\", \"age\":30, \"car\":null}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "myObj = {\"name\":\"John\", \"age\":30, \"car\":null};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nmyObj = JSON.parse(myJSON);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj.name;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj[\"name\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nlet text = \"\";\nfor (const x in myObj) {\ntext += x + \", \";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nlet text = \"\";\nfor (const x in myObj) {\ntext += myObj[x] + \", \";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "'{\"name\":\"John\", \"age\":30, \"car\":null}'"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "{\"name\":\"John\", \"age\":30, \"car\":null}"
    }
  ],
  "related_topics": [
    {
      "id": "560cc536-2ce2-4129-945a-ae96b1d76f53",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "152502fc-fe9e-437b-8d8b-53e2cb5b0051",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3371c62f-fa11-4bc3-8dda-65b50ae021d0",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JSON Object Literals\n\nThis?",
      "options": [
        "separated by a colon",
        "None of the above.",
        "None of the above.",
        "a JSON string:\n'{\"name\":\"John\""
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JSON Object Literals\n\nThis is 'a JSON string:\n'{\"name\":\"John\"'."
    },
    {
      "question": "What is Keys and values?",
      "options": [
        "None of the above.",
        "a JSON string:\n'{\"name\":\"John\"",
        "separated by a colon",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Keys and values is 'separated by a colon'."
    }
  ],
  "summary": "This tutorial covers JSON Object Literals concepts and techniques. You'll learn how to use JSON Object Literals effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JSON Object Literals and how to apply it in your projects."
}