{
  "id": "2c19203c-f134-4bd1-ac6a-46999a9f2a23",
  "title": "JavaScript Function apply()",
  "slug": "javascript-function-apply",
  "metadata": {
    "description": "Learn about JavaScript Function apply() with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "method",
      "apply",
      "example",
      "return",
      "math",
      "fullname",
      "person",
      "const",
      "firstname",
      "lastname"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "Function Apply"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Function apply()",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Method Reuse\nWith the\napply()\nmethod, you can write a method that can be used on different \nobjects.\nThe JavaScript apply() Method\nThe\napply()\nmethod is similar to the\ncall()\nmethod (\nIn this example the\nfullName\nmethod of\nperson\nis\napplied\non\nperson1\n:\nExample\nconst person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName: \"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\":\nperson.fullName.apply(person1);\n\nThe Difference Between call() and apply()\nThe difference is:\nThe\ncall()\nmethod takes arguments\nseparately\n.\nThe\napply()\nmethod takes arguments as an\narray\n.\nThe apply() method is very handy if you want to use an array instead of an argument list.\nThe apply() Method with Arguments\nThe\napply()\nmethod accepts arguments in an array:\nExample\nconst person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);\n\nCompared with the\ncall()\nmethod:\nExample\nconst person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.call(person1, \"Oslo\", \"Norway\");\n\nSimulate a Max Method on Arrays\nYou can find the largest number (in a list of numbers) using the\nMath.max()\nmethod:\nExample\nMath.max(1,2,3);\u00a0 // Will return 3\n\nSince JavaScript\narrays\ndo not have a max() method, you can apply the\nMath.max()\nmethod instead.\nExample\nMath.max.apply(null, [1,2,3]); // Will also return 3\n\nThe first argument (null) does not matter. It is not used in this example.\nThese examples will give the same result:\nExample\nMath.max.apply(Math, [1,2,3]); // Will also return 3\n\nExample\nMath.max.apply(\" \", [1,2,3]); // Will also return 3\n\nExample\nMath.max.apply(0, [1,2,3]); // Will also return 3\n\nJavaScript Strict Mode\nIn JavaScript strict mode, if the first argument of the\napply()\nmethod is not an object,\nit becomes the owner (object) of the invoked function.\nIn \"non-strict\" mode, it becomes the global object.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName: \"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\":\nperson.fullName.apply(person1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.call(person1, \"Oslo\", \"Norway\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "Math.max(1,2,3);\u00a0 // Will return 3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "Math.max.apply(null, [1,2,3]); // Will also return 3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "Math.max.apply(Math, [1,2,3]); // Will also return 3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "Math.max.apply(\" \", [1,2,3]); // Will also return 3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "Math.max.apply(0, [1,2,3]); // Will also return 3",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\n# TODO: Complete this line\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\":\nperson.fullName.apply(person1);",
      "solution": "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName: \"Mary\",\nlastName: \"Doe\"\n}\n// This will return \"Mary Doe\":\nperson.fullName.apply(person1);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\n# TODO: Complete this line\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);",
      "solution": "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName \n  + \",\" + city + \",\" + country;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);"
    }
  ],
  "related_topics": [
    {
      "id": "328b4bfd-1073-4b0b-b3f8-80f54acaf781",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "03c72e35-7073-478e-b24c-78fbb4c7fb9c",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "53e0b8b8-3293-41e5-a64b-245ca2ca9634",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "Not a method.",
        "None of the above.",
        "similar to the\ncall()\nmethod (\nIn this example the\nfullName\nmethod of\nperson\nis\napplied\non\nperson1\n:\nExample\nconst person = {\nfullName: function() {\nreturn this",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of method is 'similar to the\ncall()\nmethod (\nIn this example the\nfullName\nmethod of\nperson\nis\napplied\non\nperson1\n:\nExample\nconst person = {\nfullName: function() {\nreturn this'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript Function apply() concepts and techniques. You'll learn how to use JavaScript Function apply() effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Function apply() and how to apply it in your projects."
}