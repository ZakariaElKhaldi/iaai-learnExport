{
  "id": "911d0a4a-3f28-4d41-8eda-4c74e0190a85",
  "title": "JavaScript Array Methods",
  "slug": "javascript-array-methods",
  "metadata": {
    "description": "Learn about JavaScript Array Methods with clear explanations and practical examples.",
    "keywords": [
      "array",
      "fruits",
      "const",
      "method",
      "orange",
      "apple",
      "example",
      "banana",
      "mango",
      "javascript"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 8,
    "category": "LearnJSON",
    "subcategory": "JS Array Methods"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Array Methods",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Basic Array Methods\nArray length\nArray toString\n()\nArray at()\nArray join()\nArray pop()\nArray push()\nSee Also:\nSearch Methods\nSort Methods\nIteration Methods\nArray shift()\nArray unshift()\nArray delete()\nArray concat()\nArray copyWithin()\nArray flat()\nArray splice()\nArray toSpliced()\nArray slice()\nJavaScript Array length\nThe\nlength\nproperty returns the length (size) of an array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet size = fruits.length;\n\nJavaScript Array toString()\nThe JavaScript method\ntoString()\nconverts an array to a \nstring of (comma separated) array values.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();\nResult:\nBanana,Orange,Apple,Mango\n\nJavaScript Array at()\nES2022\nintoduced the array method\nat()\n:\nExamples\nGet the third element of fruits using at():\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);\n\nGet the third element of fruits using []:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[2];\n\nThe\nat()\nmethod returns an indexed element from an array.\nThe\nat()\nmethod returns the same as\n[]\n.\nThe\nat()\nmethod is supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15.4\nOpera 78\nApr 2021\nJul 2021\nJul 2021\nMar 2022\nAug 2021\nNote\nMany languages allow\nnegative bracket indexing\nlike [-1] to access elements from the end of an\nobject / array / string.\nThis is not possible in JavaScript, because [] is used for accessing both arrays and objects.\nobj[-1] refers to the value of key -1, not to the last property of the object.\nThe\nat()\nmethod was introduced in ES2022 to solve this problem.\nJavaScript Array join()\nThe\njoin()\nmethod also joins all array elements into a string.\nIt behaves just like\ntoString()\n, but in addition you can specify the separator:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.join(\" * \");\nResult:\nBanana * Orange * Apple * Mango\n\nPopping and Pushing\nWhen you work with arrays, it is easy to remove elements and add \nnew elements.\nThis is what popping and pushing is:\nPopping items\nout\nof an array, or pushing \nitems\ninto\nan array.\nJavaScript Array pop()\nThe\npop()\nmethod removes the last element from an array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.pop();\n\nThe\npop()\nmethod returns the value that was \"popped out\":\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.pop();\n\nJavaScript Array push()\nThe\npush()\nmethod adds a new element to an array (at the end):\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.push(\"Kiwi\");\n\nThe\npush()\nmethod returns the new array length:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.push(\"Kiwi\");\n\nShifting Elements\nShifting is equivalent to popping, but working on the first element instead of \nthe last.\nJavaScript Array shift()\nThe\nshift()\nmethod removes the first array element and \"shifts\" all \nother elements to a lower index.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.shift();\n\nThe\nshift()\nmethod returns the value that was \"shifted out\":\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.shift();\n\nJavaScript Array unshift()\nThe\nunshift()\nmethod adds a new element to an array (at the beginning), and \"unshifts\" \nolder elements:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\");\n\nThe\nunshift()\nmethod returns the new array length:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\");\n\nChanging Elements\nArray elements are accessed using their\nindex number\n:\nArray\nindexes\nstart with 0:\n[0] is the first array element\n[1] is the second\n[2] is the third ...\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[0] = \"Kiwi\";\n\nJavaScript Array length\nThe\nlength\nproperty provides an easy way to append a new element to an array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[fruits.length] = \"Kiwi\";\n\nJavaScript Array delete()\nWarning !\nUsing\ndelete()\nleaves\nundefined\nholes in the \narray.\nUse pop() or shift() instead.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndelete fruits[0];\n\nMerging Arrays (Concatenating)\nIn programming languages, concatenation means joining strings end-to-end.\nConcatenation \"snow\" and \"ball\" gives \"snowball\".\nConcatenating arrays means joining arrays end-to-end.\nJavaScript Array concat()\nThe\nconcat()\nmethod creates a new array by merging (concatenating) \nexisting arrays:\nExample (Merging Two Arrays)\nconst myGirls = [\"Cecilie\", \"Lone\"];\nconst myBoys = [\"Emil\", \"Tobias\", \"Linus\"];\nconst myChildren = myGirls.concat(myBoys);\n\nNote\nThe\nconcat()\nmethod does not change the existing arrays. It always returns a new array.\nThe\nconcat()\nmethod can take any number of array arguments.\nExample (Merging Three Arrays)\nconst arr1 = [\"Cecilie\", \"Lone\"];\nconst arr2 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst arr3 = [\"Robin\", \"Morgan\"];\nconst myChildren = arr1.concat(arr2, arr3);\n\nThe\nconcat()\nmethod can also take strings as arguments:\nExample (Merging an Array with Values)\nconst arr1 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst myChildren = arr1.concat(\"Peter\");\n\nArray copyWithin()\nThe\ncopyWithin()\nmethod copies array elements to another position in an array:\nExamples\nCopy to index 2, all elements from index 0:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.copyWithin(2, 0);\n\nCopy to index 2, the elements from index 0 to 2:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Kiwi\"];\nfruits.copyWithin(2, 0, 2);\n\nNote\nThe\ncopyWithin()\nmethod overwrites the existing values.\nThe\ncopyWithin()\nmethod does not add items to the array.\nThe\ncopyWithin()\nmethod does not change the length of the array.\nFlattening an Array\nFlattening an array is the process of reducing the dimensionality of an array.\nFlattening is useful when you want to convert a multi-dimensional array into a one-dimensional array.\nJavaScript Array flat()\nES2019\nIntroduced the Array flat() method.\nThe\nflat()\nmethod creates a new array with sub-array elements concatenated to a specified depth.\nExample\nconst myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();\n\nBrowser Support\nJavaScript Array\nflat()\nis supported in all modern browsers since January 2020:\nChrome 69\nEdge 79\nFirefox 62\nSafari 12\nOpera 56\nSep 2018\nJan 2020\nSep 2018\nSep 2018\nSep 2018\nJavaScript Array flatMap()\nES2019 added the Array\nflatMap()\nmethod to JavaScript.\nThe\nflatMap()\nmethod first maps all elements of an array\nand then creates a new array by flattening the array.\nExample\nconst myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);\n\nBrowser Support\nJavaScript Array\nflatMap()\nis supported in all modern browsers since January 2020:\nChrome 69\nEdge 79\nFirefox 62\nSafari 12\nOpera 56\nSep 2018\nJan 2020\nSep 2018\nSep 2018\nSep 2018\nSplicing and Slicing Arrays\nThe\nsplice()\nmethod adds new items to an array.\nThe\nslice()\nmethod slices out a piece of an array.\nJavaScript Array splice()\nThe\nsplice()\nmethod can be used to add new items to an array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");\n\nThe first parameter (2) defines the position\nwhere\nnew elements should be\nadded\n(spliced in).\nThe second parameter (0) defines\nhow many\nelements should be\nremoved\n.\nThe rest of the parameters (\"Lemon\" , \"Kiwi\") define the new elements to be\nadded\n.\nThe\nsplice()\nmethod returns an array with the deleted items:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 2, \"Lemon\", \"Kiwi\");\n\nUsing splice() to Remove Elements\nWith clever parameter setting, you can use\nsplice()\nto remove elements without leaving \n\"holes\" in the array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(0, 1);\n\nThe first parameter (0) defines the position where new elements should be\nadded\n(spliced in).\nThe second parameter (1) defines\nhow many\nelements should be\nremoved\n.\nThe rest of the parameters are omitted. No new elements will be added.\nJavaScript Array toSpliced()\nES2023\nadded the Array toSpliced() method as a safe way to splice an array without altering the original array.\nThe difference between the new\ntoSpliced()\nmethod and the old\nsplice()\nmethod is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);\n\nJavaScript Array slice()\nThe\nslice()\nmethod slices out a piece of an array into a new \narray:\nExample\nSlice out a part of an array starting from array element 1 (\"Orange\"):\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1);\n\nNote\nThe\nslice()\nmethod creates a new array.\nThe\nslice()\nmethod does not remove any elements from the source array.\nExample\nSlice out a part of an array starting from array element 3 (\"Apple\"):\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(3);\n\nThe\nslice()\nmethod can take two arguments like\nslice(1, 3)\n.\nThe method then selects elements from the start argument, and up to (but not \nincluding) the end argument.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1, 3);\n\nIf the end argument is omitted, like in the first examples, the\nslice()\nmethod slices out the rest of the array.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(2);\n\nAutomatic toString()\nJavaScript automatically converts an array to a comma separated string when a \nprimitive value is expected.\nThis is always the case when you try to output an array.\nThese two examples will produce the same result:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();\n\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits;\n\nNote\nAll JavaScript objects have a toString() method.\nSearching Arrays\nSearching arrays\nare covered in the \nSorting Arrays\nSorting arrays\ncovers the methods used to sort arraysg.\nIterating Arrays\nIterating arrays\ncovers methods that operate on all array elements.\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference\n.\nThe reference contains descriptions and examples of all Array \nproperties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet size = fruits.length;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 5,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.join(\" * \");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.pop();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.pop();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.push(\"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.push(\"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.shift();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.shift();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[0] = \"Kiwi\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[fruits.length] = \"Kiwi\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndelete fruits[0];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example (Merging Two Arrays)",
      "content": "",
      "order": 18,
      "code": "const myGirls = [\"Cecilie\", \"Lone\"];\nconst myBoys = [\"Emil\", \"Tobias\", \"Linus\"];\nconst myChildren = myGirls.concat(myBoys);",
      "language": "javascript",
      "explanation": "Example of example (merging two arrays)"
    },
    {
      "type": "code_example",
      "title": "Example (Merging Three Arrays)",
      "content": "",
      "order": 19,
      "code": "const arr1 = [\"Cecilie\", \"Lone\"];\nconst arr2 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst arr3 = [\"Robin\", \"Morgan\"];\nconst myChildren = arr1.concat(arr2, arr3);",
      "language": "javascript",
      "explanation": "Example of example (merging three arrays)"
    },
    {
      "type": "code_example",
      "title": "Example (Merging an Array with Values)",
      "content": "",
      "order": 20,
      "code": "const arr1 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst myChildren = arr1.concat(\"Peter\");",
      "language": "javascript",
      "explanation": "Example of example (merging an array with values)"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 21,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.copyWithin(2, 0);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "const myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 2, \"Lemon\", \"Kiwi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(0, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(3);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1, 3);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 31,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet size = fruits.length;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();"
    }
  ],
  "related_topics": [
    {
      "id": "a8ddcb55-9f6b-4611-8716-a5a398d79fea",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "37043861-b44d-4e23-879d-9af8a7cf23d9",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "b37d01a6-0d7b-4b6d-9c5d-6348b538f561",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "None of the above.",
        "not possible in JavaScript",
        "None of the above.",
        "supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15'."
    },
    {
      "question": "What is This?",
      "options": [
        "supported in all modern browsers since March 2022:\nChrome 92\nEdge 92\nFirefox 90\nSafari 15",
        "None of the above.",
        "None of the above.",
        "not possible in JavaScript"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'not possible in JavaScript'."
    }
  ],
  "summary": "This tutorial covers JavaScript Array Methods concepts and techniques. You'll learn how to use JavaScript Array Methods effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Array Methods and how to apply it in your projects."
}