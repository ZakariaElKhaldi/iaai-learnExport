{
  "id": "b858630a-9b34-4844-89ef-8cbccff3737e",
  "title": "JavaScriptConst",
  "slug": "javascriptconst",
  "metadata": {
    "description": "Learn about JavaScriptConst with clear explanations and practical examples.",
    "keywords": [
      "const",
      "allowed",
      "example",
      "constant",
      "scope",
      "variable",
      "block",
      "declared",
      "javascript",
      "variables"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Const"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nConst",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nconst\nkeyword was introduced in\nES6 (2015)\nVariables defined with\nconst\ncannot be\nRedeclared\nVariables defined with\nconst\ncannot be\nReassigned\nVariables defined with\nconst\nhave\nBlock Scope\nCannot be Reassigned\nA variable defined with the\nconst\nkeyword cannot be reassigned:\nExample\nconst PI = 3.141592653589793;\nPI = 3.14;\u00a0\u00a0\u00a0\u00a0\u00a0 // This will give an error\nPI = PI + 10;\u00a0\u00a0 // This will also give an error\n\nMust be Assigned\nJavaScript\nconst\nvariables must be assigned a value when they are declared:\nCorrect\nconst PI = 3.14159265359;\nIncorrect\nconst PI;\nPI = 3.14159265359;\nWhen to use JavaScript const?\nAlways declare a variable with\nconst\nwhen you know that\nthe value should not be changed.\nUse\nconst\nwhen you declare:\nA new Array\nA new Object\nA new Function\nA new RegExp\nConstant Objects and Arrays\nThe keyword\nconst\nis a little misleading.\nIt does not define a constant value. It defines a constant reference to a value.\nBecause of this you can NOT:\nReassign a constant value\nReassign a constant array\nReassign a constant object\nBut you CAN:\nChange the elements of constant array\nChange the properties of constant object\nConstant Arrays\nYou can change the elements of a constant array:\nExample\n// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// You can change an element:\ncars[0] = \"Toyota\";\n// You can add an element:\ncars.push(\"Audi\");\n\nBut you can NOT reassign the array:\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];\u00a0\u00a0\u00a0 // ERROR\n\nConstant Objects\nYou can change the properties of a constant object:\nExample\n// You can create a const object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// You can change a property:\ncar.color = \"red\";\n// You can add a property:\ncar.owner = \"Johnson\";\n\nBut you can NOT reassign the object:\nExample\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = {type:\"Volvo\", model:\"EX60\", color:\"red\"};\u00a0\u00a0\u00a0 // \n  ERROR\n\nDifference Between var, let and const\nScope\nRedeclare\nReassign\nHoisted\nBinds this\nvar\nNo\nYes\nYes\nYes\nYes\nlet\nYes\nNo\nYes\nNo\nNo\nconst\nYes\nNo\nNo\nNo\nNo\nWhat is Good?\nlet\nand\nconst\nhave\nblock scope\n.\nlet\nand\nconst\ncan not be\nredeclared\n.\nlet\nand\nconst\nmust be\ndeclared\nbefore use.\nlet\nand\nconst\ndoes\nnot bind\nto\nthis\n.\nlet\nand\nconst\nare\nnot hoisted\n.\nWhat is Not Good?\nvar\ndoes not have to be declared.\nvar\nis hoisted.\nvar\nbinds to this.\nBrowser Support\nThe\nlet\nand\nconst\nkeywords are\nnot supported in Internet Explorer 11 or earlier.\nThe following table defines the first browser versions with full support:\nChrome 49\nEdge 12\nFirefox 36\nSafari 11\nOpera 36\nMar, 2016\nJul, 2015\nJan, 2015\nSep, 2017\nMar, 2016\nBlock Scope\nDeclaring a variable with\nconst\nis similar to\nlet\nwhen it comes to\nBlock Scope\n.\nThe x declared in the block, in this example, is not the same as the x declared outside the block:\nExample\nconst x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10\n\nYou can learn more about block scope in the chapter\nJavaScript Scope\n.\nRedeclaring\nRedeclaring a JavaScript\nvar\nvariable is allowed \nanywhere in a program:\nExample\nvar x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nvar x = 3;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nx = 4;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nRedeclaring an existing\nvar\nor\nlet\nvariable to\nconst\n, in the same scope, is not allowed:\nExample\nvar x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n{\nlet x = 2;\u00a0 \u00a0\u00a0 // Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}\n{\nconst x = 2;\u00a0\u00a0 // Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}\nReassigning an existing\nconst\nvariable, in the same scope, is not allowed:\nExample\nconst x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nx = 2;\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nvar x = 2;\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nlet x = 2;\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nconst x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n{\nconst x = 2;\u00a0\u00a0 // Allowed\nx = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nvar x = 2;\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nlet x = 2;\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}\nRedeclaring a variable with\nconst\n, in another scope, or in another block, is allowed:\nExample\nconst x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Allowed\n{\nconst x = 3;\u00a0\u00a0 // Allowed\n}\n{\nconst x = 4;\u00a0\u00a0\u00a0// Allowed\n}\nHoisting\nVariables defined with\nvar\nare\nhoisted\nto the top \nand can be initialized at any time.\nMeaning: You can use the variable before it is declared:\nExample\nThis is OK:\ncarName = \"Volvo\";\nvar carName;\n\nIf you want to learn more about hoisting, study the chapter\nJavaScript Hoisting\n.\nVariables defined with\nconst\nare also hoisted to the top,\nbut not initialized.\nMeaning: Using a\nconst\nvariable before it is declared will result in a\nReferenceError\n:\nExample\nalert (carName);\nconst carName = \"Volvo\";\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const PI = 3.141592653589793;\nPI = 3.14;\u00a0\u00a0\u00a0\u00a0\u00a0 // This will give an error\nPI = PI + 10;\u00a0\u00a0 // This will also give an error",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Correct",
      "content": "",
      "order": 4,
      "code": "const PI = 3.14159265359;",
      "language": "javascript",
      "explanation": "Example of correct"
    },
    {
      "type": "code_example",
      "title": "Incorrect",
      "content": "",
      "order": 5,
      "code": "const PI;\nPI = 3.14159265359;",
      "language": "javascript",
      "explanation": "Example of incorrect"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// You can change an element:\ncars[0] = \"Toyota\";\n// You can add an element:\ncars.push(\"Audi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];\u00a0\u00a0\u00a0 // ERROR",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// You can create a const object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n// You can change a property:\ncar.color = \"red\";\n// You can add a property:\ncar.owner = \"Johnson\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = {type:\"Volvo\", model:\"EX60\", color:\"red\"};\u00a0\u00a0\u00a0 // \n  ERROR",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "var x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nvar x = 3;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nx = 4;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n{\nlet x = 2;\u00a0 \u00a0\u00a0 // Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}\n{\nconst x = 2;\u00a0\u00a0 // Allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "const x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nx = 2;\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nvar x = 2;\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nlet x = 2;\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\nconst x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n{\nconst x = 2;\u00a0\u00a0 // Allowed\nx = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nvar x = 2;\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nlet x = 2;\u00a0\u00a0\u00a0\u00a0 \n  // Not allowed\nconst x = 2;\u00a0\u00a0\u00a0// Not allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "const x = 2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Allowed\n{\nconst x = 3;\u00a0\u00a0 // Allowed\n}\n{\nconst x = 4;\u00a0\u00a0\u00a0// Allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "carName = \"Volvo\";\nvar carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "alert (carName);\nconst carName = \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const PI = 3.141592653589793;\n# TODO: Complete this line\nPI = PI + 10;\u00a0\u00a0 // This will also give an error",
      "solution": "const PI = 3.141592653589793;\nPI = 3.14;\u00a0\u00a0\u00a0\u00a0\u00a0 // This will give an error\nPI = PI + 10;\u00a0\u00a0 // This will also give an error"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const PI = 3.14159265359;"
    }
  ],
  "related_topics": [
    {
      "id": "1909dace-1783-4553-b8cb-075370191079",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c4e0e56b-2705-434a-bebc-29088c52d4b0",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6415d10-4a98-4d7d-896f-2846afe0bf37",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This will also give an error\n\nMust be Assigned\nJavaScript\nconst\nvariables must be assigned a value when they?",
      "options": [
        "declared:\nCorrect\nconst PI = 3",
        "None of the above.",
        "None of the above.",
        "a little misleading"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This will also give an error\n\nMust be Assigned\nJavaScript\nconst\nvariables must be assigned a value when they is 'declared:\nCorrect\nconst PI = 3'."
    },
    {
      "question": "What is A new Array\nA new Object\nA new Function\nA new RegExp\nConstant Objects and Arrays\nThe keyword\nconst?",
      "options": [
        "declared:\nCorrect\nconst PI = 3",
        "None of the above.",
        "None of the above.",
        "a little misleading"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A new Array\nA new Object\nA new Function\nA new RegExp\nConstant Objects and Arrays\nThe keyword\nconst is 'a little misleading'."
    }
  ],
  "summary": "This tutorial covers JavaScriptConst concepts and techniques. You'll learn how to use JavaScriptConst effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptConst and how to apply it in your projects."
}