{
  "id": "87880d9f-a4fc-4443-946c-09962902e1f7",
  "title": "JavaScript Operator Precedence",
  "slug": "javascript-operator-precedence",
  "metadata": {
    "description": "Learn about JavaScript Operator Precedence with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "assignment",
      "operators",
      "bitwise",
      "shift",
      "logical",
      "operator",
      "precedence",
      "right",
      "executed",
      "operations"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Precedence"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Operator Precedence",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript Operator Precedence\n\nOperator precedence describes the order in which operations are performed in \nan arithmetic expression",
      "content": ".\nMultiplication (\n*\n) and division (\n/\n) have higher\nprecedence\nthan \naddition (\n+\n) and subtraction (\n-\n).\nAs in traditional mathematics, multiplication is done first:\nlet x = 100 + 50 * 3;\n\nWhen using parentheses, operations inside the parentheses are computed first:\nlet x = (100 + 50) * 3;\n\nOperations with the same precedence (like * and /) are computed from left to right:\nlet x = 100 / 50 * 3;\n\nOperator Precedence Values\nExpressions in parentheses are computed\nbefore\nthe rest of the expression\nFunction are executed\nbefore\nthe result is used in the rest of the expression\nVal\nOperator\nDescription\nExample\n18\n( )\nExpression Grouping\n(100 + 50) * 3\n17\n.\nMember Of\nperson.name\n17\n[]\nMember Of\nperson[\"name\"]\n17\n?.\nOptional Chaining\nES2020\nx ?. y\n17\n()\nFunction Call\nmyFunction()\n17\nnew\nNew with Arguments\nnew Date(\"June 5,2022\")\n16\nnew\nNew without Arguments\nnew Date()\nIncrement Operators\nPostfix increments are executed\nbefore\nprefix increments\n15\n++\nPostfix Increment\ni++\n15\n--\nPostfix Decrement\ni--\n14\n++\nPrefix Increment\n++i\n14\n--",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Prefix Decrement",
      "content": "--i\nNOT Operators\n14\n!\nLogical NOT\n!(x==y)\n14\n~\nBitwise NOT\n~x\nUnary Operators\n14\n+\nUnary Plus\n+x\n14\n-",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Unary Minus",
      "content": "-x\n14\ntypeof\nData Type\ntypeof x\n14\nvoid\nEvaluate Void\nvoid(0)\n14\ndelete\nProperty Delete\ndelete myCar.color\nArithmetic Operators\nExponentiations are executed\nbefore\nmultiplications\nMultiplications and divisions are executed\nbefore\nadditions and subtractions\n13\n**\nExponentiation\nES2016\n10 ** 2\n12\n*\nMultiplication\n10 * 5\n12\n/\nDivision\n10 / 5\n12\n%\nDivision Remainder\n10 % 5\n11\n+\nAddition\n10 + 5\n11\n-\nSubtraction\n10 - 5\n11\n+\nConcatenation\n\"John\" + \"Doe\"\nShift Operators\n10\n<<\nShift Left\nx << 2\n10\n>>\nShift Right (signed)\nx >> 2\n10\n>>>\nShift Right (unsigned)\nx >>> 2\nRelational Operators\n9\nin\nProperty in Object\n\"PI\" in Math\n9\ninstanceof\nInstance of Object\nx instanceof Array\nComparison Operators\n9\n<\nLess than\nx < y\n9\n<=\nLess than or equal\nx <= y\n9\n>\nGreater than\nx > y\n9\n>=\nGreater than or equal\nx >= Array\n8\n==\nEqual\nx == y\n8\n===\nStrict equal\nx === y\n8\n!=\nUnequal\nx != y\n8\n!==\nStrict unequal\nx !== y\nBitwise Operators\n7\n&\nBitwise AND\nx & y\n6\n^\nBitwise XOR\nx ^ y\n5\n|\nBitwise OR\nx | y\nLogical Operators\n4\n&&\nLogical AND\nx && y\n3\n||\nLogical OR\nx || y\n3\n??\nNullish Coalescing\nES2020\nx ?? y\nConditional (ternary) Operator\n2\n? :\nCondition\n? \"yes\" : \"no\"\nAssignment Operators\nAssignments are executed\nafter\nother operations\n2\n=\nSimple Assignment\nx = y\n2\n:\nColon Assignment\nx: 5\n2\n+=\nAddition Assignment\nx += y\n2\n-=\nSubtraction Assignment\nx -= y\n2\n*=\nMultiplication Assignment\nx *= y\n2\n**=\nExponentiation Assignment\nx **= y\n2\n/=\nDivision Assignment\nx /= y\n2\n%=\nRemainder Assignment\nx %= y\n2\n<<=\nLeft Shift Assignment\nx <<= y\n2\n>>=\nRight Shift Assignment\nx >>= y\n2\n>>>=\nUnsigned Right Shift\nx >>>= y\n2\n&=\nBitwise AND Assignment\nx &= y\n2\n|=\nBitwise OR Assignment\nx |= y\n2\n^=\nBitwise XOR Assignment\nx ^= y\n2\n&&=\nLogical AND Assignment\nx &&= y\n2\n||=\nLogical OR Assignment\nx ||= y\n2\n=>\nArrow\nx => y\n2\nyield\nPause / Resume\nyield x\n2\nyield*\nDelegate\nyield* x\n2\n...\nSpread\n... x\n1\n,\nComma\nx , y\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 100 + 50 * 3;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 100 + 50 * 3;"
    },
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "c8fe8ff0-deb7-4fd3-8721-0e80afff68b1",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3f47b7d8-2087-4ea9-b2d8-98f9ad221d8a",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f117b0b5-dc10-4dd5-aa12-f824ea8fb5b3",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Operator Precedence\n\nOperator precedence describes the order in which operations?",
      "options": [
        "None of the above.",
        "None of the above.",
        "done first:\nlet x = 100 + 50 * 3;\n\nWhen using parentheses",
        "performed in \nan arithmetic expression"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript Operator Precedence\n\nOperator precedence describes the order in which operations is 'performed in \nan arithmetic expression'."
    },
    {
      "question": "What is multiplication?",
      "options": [
        "done first:\nlet x = 100 + 50 * 3;\n\nWhen using parentheses",
        "None of the above.",
        "None of the above.",
        "performed in \nan arithmetic expression"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of multiplication is 'done first:\nlet x = 100 + 50 * 3;\n\nWhen using parentheses'."
    }
  ],
  "summary": "This tutorial covers JavaScript Operator Precedence concepts and techniques. You'll learn how to use JavaScript Operator Precedence effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Operator Precedence and how to apply it in your projects."
}