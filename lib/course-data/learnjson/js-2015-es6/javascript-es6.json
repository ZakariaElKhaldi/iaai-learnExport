{
  "id": "e224eb8e-dc1a-4cb6-8bfc-33016707314f",
  "title": "Javascript ES6",
  "slug": "javascript-es6",
  "metadata": {
    "description": "Learn about Javascript ES6 with clear explanations and practical examples.",
    "keywords": [
      "returns",
      "example",
      "math",
      "array",
      "const",
      "javascript",
      "function",
      "method",
      "number",
      "value"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 9,
    "category": "LearnJSON",
    "subcategory": "JS 2015 (ES6)"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Javascript ES6",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ECMAScript 2015 was the second major revision to JavaScript.\nECMAScript 2015 is also known as ES6 and ECMAScript 6.\nThis chapter describes the most important features of ES6.\nNew Features in ES6\nThe let keyword\nThe const keyword\nArrow Functions\nThe {a,b} = Operator\nThe [a,b] = Operator\nThe ... Operator\nFor/of\nMap Objects\nSet Objects\nClasses\nPromises\nSymbol\nDefault Parameters\nFunction Rest Parameter\nString.includes()\nString.startsWith()\nString.endsWith()\nArray entries()\nArray.from()\nArray keys()\nArray find()\nArray findIndex()\nMath.trunc\nMath.sign\nMath.cbrt\nMath.log2\nMath.log10\nNumber.EPSILON\nNumber.MIN_SAFE_INTEGER\nNumber.MAX_SAFE_INTEGER\nNumber.isInteger()\nNumber.isSafeInteger()\nNew Global Methods\nJavaScript Modules\nBrowser Support for ES6 (2015)\nES6 is fully supported in all modern browsers since June 2017:\nChrome\n51\nEdge\n15\nFirefox\n54\nSafari\n10\nOpera\n38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nES6 is not supported in Internet Explorer.\nJavaScript let\nThe\nlet\nkeyword allows you to declare a variable with \nblock scope.\nExample\nvar x = 10;\n// Here x is 10\n{\nlet x = 2;\n// Here x is 2\n}\n// Here x is 10\n\nRead more about\nlet\nin the chapter:\nJavaScript Let\n.\nJavaScript const\nThe\nconst\nkeyword allows you to declare a constant (a \nJavaScript variable with a constant value).\nConstants are similar to let variables, except that the value cannot be changed.\nExample\nvar x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10\n\nRead more about\nconst\nin the chapter:\nJavaScript Const\n.\nArrow Functions\nArrow functions allows a short syntax for writing function expressions.\nYou don't need the\nfunction\nkeyword, the\nreturn\nkeyword, and the\ncurly brackets\n.\nExample\n// ES5\nvar x = function(x, y) {\nreturn x * y;\n}\n// ES6\nconst x = (x, y) => x * y;\n\nArrow functions do not have their own\nthis\n.\nThey are not well suited for defining\nobject methods\n.\nArrow functions are not hoisted. They must be defined\nbefore\nthey are used.\nUsing\nconst\nis safer than using\nvar\n, because a function expression is \nalways a constant value.\nYou can only omit the\nreturn\nkeyword and the curly brackets if the function is a single statement. \nBecause of this, it might be a good habit to always keep them:\nExample\nconst x = (x, y) => { return x * y };\n\nLearn more about Arrow Functions in the chapter:\nJavaScript Arrow Function\n.\nObject Destructuring\nDestructuring assignment makes it easy to assign array values and object properties to variables.\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Destructuring Assignment\nlet { firstName, age } = person;\n\nNote:\nWhen destructuring an object, you must use the same name for the variables\nas the corresponding object keys (names).\nThe order of the keys (names) does not matter.\nArray Destructuring\nDestructuring assignment makes it easy to assign array values and object properties to variables.\nExample\n// Create an Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n// Destructuring Assignment\nlet [fruit1, fruit2] = fruits;\n\nThe Spread (...) Operator\nThe ... operator expands an iterable (like an array) into more elements:\nExample\nconst q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"May\"];\nconst year = [...q1, ...q2, ...q3, ...q4];\n\nThe ... operator can be used to expand an iterable into more arguments for function calls:\nExample\nconst numbers = [23,55,21,87,56];\nlet maxValue = Math.max(...numbers);\n\nThe For/Of Loop\nThe JavaScript\nfor/of\nstatement loops \nthrough the values of an iterable objects.\nfor/of\nlets you loop over data structures \nthat are iterable such as Arrays, Strings, Maps, NodeLists, and more.\nThe\nfor/of\nloop has the following syntax:\nfor (\nvariable\nof\niterable\n) {\n//\ncode block to be executed\n}\nvariable\n- For every iteration the value of the \nassigned to the variable.\nVariable\ncan be declared with\nconst\n,\nlet\n, or\nvar\n.\niterable\n- An object that has iterable properties.\nLooping over an Array\nExample\nconst cars = [\"BMW\", \"Volvo\", \"Mini\"];\nlet text = \"\";\nfor (let x of cars) {\ntext += x + \" \";\n}\n\nLooping over a String\nExample\nlet language = \"JavaScript\";\nlet text = \"\";\nfor (let x of language) {\ntext += x + \" \";\n}\n\nLearn more in the chapter:\nJavaScript Loop For/In/Of\n.\nJavaScript Maps\nBeing able to use an Object as a key is an important Map feature.\nExample\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n\nLearn more about Map objects, and the difference between a Map and an Array, in the the chapter:\nJavaScript Maps\n.\nJavaScript Sets\nExample\n// Create a Set\nconst letters = new Set();\n// Add some values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\n\nLearn more about Set objects in the the chapter:\nJavaScript Sets\n.\nJavaScript Classes\nJavaScript Classes are templates for JavaScript Objects.\nUse the keyword\nclass\nto create a class.\nAlways add a method named\nconstructor()\n:\nSyntax\nclass ClassName {\nconstructor() { ... }\n}\nExample\nclass Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}\nThe example above creates a class named \"Car\".\nThe class has two initial properties: \"name\" and \"year\".\nA JavaScript class is\nnot\nan object.\nIt is a\ntemplate\nfor JavaScript objects.\nUsing a Class\nWhen you have a class, you can use the class to create objects:\nExample\nconst myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);\n\nLearn more about classes in the the chapter:\nJavaScript Classes\n.\nJavaScript Promises\nA Promise is a JavaScript object that links \"Producing Code\" and \"Consuming Code\".\n\"Producing Code\" can take some time and \"Consuming Code\" must wait for the result.\nPromise Syntax\nconst myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\nmyResolve(); // when successful\nmyReject(); \u00a0// when error\n});\n// \"Consuming Code\" (Must wait for a fulfilled Promise).\nmyPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);\nExample Using a Promise\nconst myPromise = new Promise(function(myResolve, myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\nmyPromise.then(function(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n});\n\nLearn more about Promises in the the chapter:\nJavaScript Promises\n.\nThe Symbol Type\nA JavaScript Symbol is a primitive data type just like Number, String, or Boolean.\nIt represents a unique \"hidden\" identifier that no other code can accidentally access.\nFor instance, if different coders want to add a person.id property to a person object belonging to a third-party code,\nthey could mix each others values.\nUsing Symbol() to create a unique identifiers, solves this problem:\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\nlet id = Symbol('id');\nperson[id] = 140353;\n// Now person[id] = 140353\n// but person.id is still undefined\n\nNote\nSymbols are always unique.\nIf you create two symbols with the same description they will have different values:\nSymbol(\"id\") == Symbol(\"id\"); // false\nDefault Parameter Values\nES6 allows function parameters to have default values.\nExample\nfunction myFunction(x, y = 10) {\n// y is 10 if not passed or undefined\nreturn x + y;\n}\nmyFunction(5); // will return 15\n\nFunction Rest Parameter\nThe rest parameter (...) allows a function to treat an indefinite number of arguments as an array:\nExample\nfunction sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);\n\nString.includes()\nThe\nincludes()\nmethod returns\ntrue\nif a string contains a specified value,\notherwise\nfalse\n:\nExample\nlet text = \"Hello world, welcome to the universe.\";\ntext.includes(\"world\")\u00a0\u00a0\u00a0\u00a0// Returns true\n\nString.startsWith()\nThe\nstartsWith()\nmethod returns\ntrue\nif a string begins with a specified value, otherwise\nfalse\n:\nExample\nlet text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"Hello\")\u00a0\u00a0\u00a0// Returns true\n\nString.endsWith()\nThe\nendsWith()\nmethod returns\ntrue\nif a string ends with a specified value, otherwise\nfalse\n:\nExample\nvar text = \"John Doe\";\ntext.endsWith(\"Doe\")\u00a0\u00a0\u00a0\u00a0// Returns true\n\nArray entries()\nExample\nCreate an Array Iterator, and then iterate over the key/value pairs:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}\n\nThe\nentries()\nmethod returns an Array Iterator object with key/value pairs:\n[0, \"Banana\"]\n[1, \"Orange\"]\n[2, \"Apple\"]\n[3, \"Mango\"]\nThe\nentries()\nmethod does not change the original array.\nArray.from()\nThe\nArray.from()\nmethod returns an Array object from any object with a length \nproperty or any iterable object.\nExample\nCreate an Array from a String:\nArray.from(\"ABCDEFG\")\u00a0\u00a0\u00a0// Returns [A,B,C,D,E,F,G]\n\nArray keys()\nThe\nkeys()\nmethod returns an Array Iterator object with the keys of an array.\nExample\nCreate an Array Iterator object, containing the keys of the array:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\nlet text = \"\";\nfor (let x of keys) {\ntext += x + \"<br>\";\n}\n\nArray find()\nThe\nfind()\nmethod returns the value of the first array element that passes a \ntest function.\nThis example finds (returns the value of ) the first element that is larger \nthan 18:\nExample\nconst numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.find(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nArray findIndex()\nThe\nfindIndex()\nmethod returns the index of the first array element that \npasses a test function.\nThis example finds the index of the first element that is larger than 18:\nExample\nconst numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.findIndex(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nNew Math Methods\nES6 added the following methods to the Math object:\nMath.trunc()\nMath.sign()\nMath.cbrt()\nMath.log2()\nMath.log10()\nThe Math.trunc() Method\nMath.trunc(x)\nreturns the integer part of x:\nExample\nMath.trunc(4.9);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.7);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.4);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.2);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(-4.2);\u00a0\u00a0\u00a0\u00a0// returns -4\n\nThe Math.sign() Method\nMath.sign(x)\nreturns if x is negative, null or positive:\nExample\nMath.sign(-4);\u00a0\u00a0\u00a0\u00a0// returns -1\nMath.sign(0);\u00a0\u00a0\u00a0\u00a0// returns 0\nMath.sign(4);\u00a0\u00a0\u00a0\u00a0// returns 1\n\nThe Math.cbrt() Method\nMath.cbrt(x)\nreturns the cube root of x:\nExample\nMath.cbrt(8);\u00a0\u00a0\u00a0\u00a0// returns 2\nMath.cbrt(64);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.cbrt(125);\u00a0\u00a0\u00a0\u00a0// returns 5\n\nThe Math.log2() Method\nMath.log2(x)\nreturns the base 2 logarithm of x:\nExample\nMath.log2(2);\u00a0\u00a0\u00a0\u00a0// returns 1\n\nThe Math.log10() Method\nMath.log10(x)\nreturns the base 10 logarithm of x:\nExample\nMath.log10(10);\u00a0\u00a0\u00a0\u00a0// returns 1\n\nNew Number Properties\nES6 added the following properties to the Number object:\nEPSILON\nMIN_SAFE_INTEGER\nMAX_SAFE_INTEGER\nEPSILON Example\nlet x = Number.EPSILON;\n\nMIN_SAFE_INTEGER Example\nlet x = Number.MIN_SAFE_INTEGER;\n\nMAX_SAFE_INTEGER Example\nlet x = Number.MAX_SAFE_INTEGER;\n\nThe Number.isInteger() Method\nThe\nNumber.isInteger()\nmethod returns\ntrue\nif the argument is an integer.\nExample\nNumber.isInteger(10);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true\nNumber.isInteger(10.5);\u00a0\u00a0\u00a0\u00a0\u00a0 // returns false\n\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe\nNumber.isSafeInteger()\nmethod returns\ntrue\nif the argument is a safe integer.\nExample\nNumber.isSafeInteger(10);\u00a0\u00a0\u00a0\u00a0// returns true\nNumber.isSafeInteger(12345678901234567890);\u00a0 // returns false\n\nSafe integers are all integers from -(2\n53\n- 1) to +(2\n53\n- 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nNew Global Methods\nES6 added 2 new global number methods:\nisFinite()\nisNaN()\nThe isFinite() Method\nThe global\nisFinite()\nmethod returns\nfalse\nif the argument is\nInfinity\nor\nNaN\n.\nOtherwise it returns\ntrue\n:\nExample\nisFinite(10/0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns false\nisFinite(10/1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true\n\nThe isNaN() Method\nThe global\nisNaN()\nmethod returns\ntrue\nif the argument is\nNaN\n. Otherwise it returns\nfalse\n:\nExample\nisNaN(\"Hello\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true\n\nModules\nModules are imported in two different ways:\nImport from named exports\nImport named exports from the file person.js:\nimport { name, age } from \"./person.js\";\n\nImport from default exports\nImport a default export from the file message.js:\nimport message from \"./message.js\";\n\nLearn more about Modules in:\nJavaScript Modules\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var x = 10;\n// Here x is 10\n{\nlet x = 2;\n// Here x is 2\n}\n// Here x is 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "var x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// ES5\nvar x = function(x, y) {\nreturn x * y;\n}\n// ES6\nconst x = (x, y) => x * y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const x = (x, y) => { return x * y };",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n// Destructuring Assignment\nlet { firstName, age } = person;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create an Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n// Destructuring Assignment\nlet [fruit1, fruit2] = fruits;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"May\"];\nconst year = [...q1, ...q2, ...q3, ...q4];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const numbers = [23,55,21,87,56];\nlet maxValue = Math.max(...numbers);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const cars = [\"BMW\", \"Volvo\", \"Mini\"];\nlet text = \"\";\nfor (let x of cars) {\ntext += x + \" \";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let language = \"JavaScript\";\nlet text = \"\";\nfor (let x of language) {\ntext += x + \" \";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "const fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "// Create a Set\nconst letters = new Set();\n// Add some values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 15,
      "code": "class ClassName {\nconstructor() { ... }\n}",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "const myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Promise Syntax",
      "content": "",
      "order": 18,
      "code": "const myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\nmyResolve(); // when successful\nmyReject(); \u00a0// when error\n});\n// \"Consuming Code\" (Must wait for a fulfilled Promise).\nmyPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
      "language": "javascript",
      "explanation": "Example of promise syntax"
    },
    {
      "type": "code_example",
      "title": "Example Using a Promise",
      "content": "",
      "order": 19,
      "code": "const myPromise = new Promise(function(myResolve, myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\nmyPromise.then(function(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n});",
      "language": "javascript",
      "explanation": "Example of example using a promise"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\nlet id = Symbol('id');\nperson[id] = 140353;\n// Now person[id] = 140353\n// but person.id is still undefined",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "function myFunction(x, y = 10) {\n// y is 10 if not passed or undefined\nreturn x + y;\n}\nmyFunction(5); // will return 15",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "function sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let text = \"Hello world, welcome to the universe.\";\ntext.includes(\"world\")\u00a0\u00a0\u00a0\u00a0// Returns true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "let text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"Hello\")\u00a0\u00a0\u00a0// Returns true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "var text = \"John Doe\";\ntext.endsWith(\"Doe\")\u00a0\u00a0\u00a0\u00a0// Returns true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "Array.from(\"ABCDEFG\")\u00a0\u00a0\u00a0// Returns [A,B,C,D,E,F,G]",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\nlet text = \"\";\nfor (let x of keys) {\ntext += x + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "const numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.find(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "const numbers = [4, 9, 16, 25, 29];\nlet first = \n  numbers.findIndex(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 31,
      "code": "Math.trunc(4.9);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.7);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.4);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(4.2);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.trunc(-4.2);\u00a0\u00a0\u00a0\u00a0// returns -4",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "Math.sign(-4);\u00a0\u00a0\u00a0\u00a0// returns -1\nMath.sign(0);\u00a0\u00a0\u00a0\u00a0// returns 0\nMath.sign(4);\u00a0\u00a0\u00a0\u00a0// returns 1",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "Math.cbrt(8);\u00a0\u00a0\u00a0\u00a0// returns 2\nMath.cbrt(64);\u00a0\u00a0\u00a0\u00a0// returns 4\nMath.cbrt(125);\u00a0\u00a0\u00a0\u00a0// returns 5",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 34,
      "code": "Math.log2(2);\u00a0\u00a0\u00a0\u00a0// returns 1",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 35,
      "code": "Math.log10(10);\u00a0\u00a0\u00a0\u00a0// returns 1",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "EPSILON Example",
      "content": "",
      "order": 36,
      "code": "let x = Number.EPSILON;",
      "language": "javascript",
      "explanation": "Example of epsilon example"
    },
    {
      "type": "code_example",
      "title": "MIN_SAFE_INTEGER Example",
      "content": "",
      "order": 37,
      "code": "let x = Number.MIN_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of min_safe_integer example"
    },
    {
      "type": "code_example",
      "title": "MAX_SAFE_INTEGER Example",
      "content": "",
      "order": 38,
      "code": "let x = Number.MAX_SAFE_INTEGER;",
      "language": "javascript",
      "explanation": "Example of max_safe_integer example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 39,
      "code": "Number.isInteger(10);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true\nNumber.isInteger(10.5);\u00a0\u00a0\u00a0\u00a0\u00a0 // returns false",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 40,
      "code": "Number.isSafeInteger(10);\u00a0\u00a0\u00a0\u00a0// returns true\nNumber.isSafeInteger(12345678901234567890);\u00a0 // returns false",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 41,
      "code": "isFinite(10/0);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns false\nisFinite(10/1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 42,
      "code": "isNaN(\"Hello\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // returns true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Import from named exports",
      "content": "",
      "order": 43,
      "code": "import { name, age } from \"./person.js\";",
      "language": "javascript",
      "explanation": "Example of import from named exports"
    },
    {
      "type": "code_example",
      "title": "Import from default exports",
      "content": "",
      "order": 44,
      "code": "import message from \"./message.js\";",
      "language": "javascript",
      "explanation": "Example of import from default exports"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var x = 10;\n# TODO: Complete this line\n{\nlet x = 2;\n// Here x is 2\n}\n// Here x is 10",
      "solution": "var x = 10;\n// Here x is 10\n{\nlet x = 2;\n// Here x is 2\n}\n// Here x is 10"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var x = 10;\n# TODO: Complete this line\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10",
      "solution": "var x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10"
    }
  ],
  "related_topics": [
    {
      "id": "685518b0-168d-46bb-85c3-a410d0dc1396",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b98a09bb-bf4f-4a9b-97e0-f46af1137db9",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "182cc5f0-2a60-4295-9e59-d63b24886917",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Javascript ES6 concepts and techniques. You'll learn how to use Javascript ES6 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Javascript ES6 and how to apply it in your projects."
}