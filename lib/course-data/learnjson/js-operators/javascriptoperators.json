{
  "id": "58c844b2-9afb-47c2-bb30-a22326f0f6ca",
  "title": "JavaScriptOperators",
  "slug": "javascriptoperators",
  "metadata": {
    "description": "Learn about JavaScriptOperators with clear explanations and practical examples.",
    "keywords": [
      "operators",
      "javascript",
      "operator",
      "assignment",
      "type",
      "example",
      "note",
      "equal",
      "logical",
      "value"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Operators"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nOperators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nOperators\n\nJavascript operators are used to perform different types of mathematical and logical computations",
      "content": ".\nExamples:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Assignment Operator",
      "content": "=\nassigns values\nThe\nAddition Operator\n+\nadds values\nThe\nMultiplication Operator\n*\nmultiplies values\nThe\nComparison Operator\n>\ncompares values\nJavaScript Assignment\nThe\nAssignment Operator\n(\n=\n) assigns a value to a variable:\nAssignment Examples\nlet x = 10;\n\n// Assign the value 5 to x\nlet x = 5;\n// Assign the value 2 to y\nlet y = 2;\n// Assign the value x + y to z:\nlet z = x + y;\n\nJavaScript Addition\nThe\nAddition Operator\n(\n+\n) adds numbers:\nAdding\nlet x = 5;\nlet y = 2;\nlet z = x + y;\n\nJavaScript Multiplication\nThe\nMultiplication Operator\n(\n*\n) multiplies numbers:\nMultiplying\nlet x = 5;\nlet y = 2;\nlet z = x * y;\n\nTypes of JavaScript Operators\nThere are different types of JavaScript operators:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nString Operators\nLogical Operators\nBitwise Operators\nTernary Operators\nType Operators\nJavaScript Arithmetic Operators\nArithmetic Operators\nare used to perform arithmetic on numbers:\nArithmetic Operators Example\nlet a = 3;\nlet x = (100 + 50) * a;\n\nOperator\nDescription\n+",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Addition",
      "content": "-\nSubtraction\n*\nMultiplication\n**\nExponentiation (\nES2016\n)\n/\nDivision\n%\nModulus (Division Remainder)\n++",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Increment",
      "content": "--\nDecrement\nNote\nArithmetic operators are fully described in the\nJS Arithmetic\nchapter.\nJavaScript Assignment Operators\nAssignment operators assign values to JavaScript variables.\nThe\nAddition Assignment Operator\n(\n+=\n) adds a value to a variable.\nAssignment\nlet x = 10;\nx += 5;",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Same As",
      "content": "=\nx = y\nx = y\n+=\nx += y\nx = x + y\n-=\nx -= y\nx = x - y\n*=\nx *= y\nx = x * y\n/=\nx /= y\nx = x / y\n%=\nx %= y\nx = x % y\n**=\nx **= y\nx = x ** y\nNote\nAssignment operators are fully described in the\nJS Assignment\nchapter.",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Description",
      "content": "==\nequal to\n===\nequal value and equal type\n!=\nnot equal\n!==\nnot equal value or not equal type\n>\ngreater than\n<\nless than\n>=\ngreater than or equal to\n<=\nless than or equal to\n?\nternary operator\nNote\nComparison operators are fully described in the\nJS Comparisons\nchapter.\nJavaScript String Comparison\nAll the comparison operators above can also be used on strings:\nExample\nlet text1 = \"A\";\nlet text2 = \"B\";\nlet result = text1 < text2;\n\nNote that strings are compared alphabetically:\nExample\nlet text1 = \"20\";\nlet text2 = \"5\";\nlet result = text1 < text2;\n\nJavaScript String Addition\nThe\n+\ncan also be used to add (concatenate) strings:\nExample\nlet text1 = \"John\";\nlet text2 = \"Doe\";\nlet text3 = text1 + \" \" + text2;\n\nThe\n+=\nassignment operator can also be used to add (concatenate) strings:\nExample\nlet text1 = \"What a very \";\ntext1 += \"nice day\";\nThe result of text1 will be:\nWhat a very nice day\n\nNote\nWhen used on strings, the + operator is called the concatenation operator.\nAdding Strings and Numbers\nAdding two numbers, will return the sum as a number like 5 + 5 = 10.\nAdding a number and a string, will return the sum as a concatenated string like 5 + \"5\" = \"55\".\nExample\nlet x = 5 + 5;\nlet y = \"5\" + 5;\nlet z = \"Hello\" + 5;\nThe result of\nx\n,\ny\n, and\nz\nwill be:\n10\n55\nHello5\n\nNote\nIf you add a number and a string, the result will be a string!\nJavaScript Logical Operators\nOperator\nDescription\n&&\nlogical and\n||\nlogical or\n!\nlogical not\nNote\nLogical operators are fully described in the\nJS Comparisons\nchapter.\nJavaScript Type Operators\nOperator\nDescription\ntypeof\nReturns the type of a variable\ninstanceof\nReturns true if an object is an instance of an object type\nNote\nType operators are fully described in the\nJS Type Conversion\nchapter.\nJavaScript Bitwise Operators\nBit operators work on 32 bits numbers.\nAny numeric operand in the operation is converted into a 32 bit number.\nThe result is converted back to a JavaScript number.\nOperator\nDescription\nExample\nSame as\nResult\nDecimal\n&\nAND\n5 & 1\n0101 & 0001\n0001\n1\n|\nOR\n5 | 1\n0101 | 0001\n0101\n5\n~\nNOT\n~ 5\n~0101\n1010\n10\n^\nXOR\n5 ^ 1\n0101 ^ 0001\n0100\n4\n<<\nleft shift\n5 << 1\n0101 << 1\n1010\n10\n>>\nright shift\n5 >> 1\n0101 >> 1\n0010\n2\n>>>\nunsigned right shift\n5 >>> 1\n0101 >>> 1\n0010\n2\nThe examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.\nBecause of this, in JavaScript, ~ 5 will not return 10. It will return -6.\n~00000000000000000000000000000101 will return 11111111111111111111111111111010\nBitwise operators are fully described in the\nJS \nBitwise\nchapter.\n\n\u2605\n+1",
      "order": 7,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Assignment Examples",
      "content": "",
      "order": 8,
      "code": "let x = 10;",
      "language": "javascript",
      "explanation": "Example of assignment examples"
    },
    {
      "type": "code_example",
      "title": "Adding",
      "content": "",
      "order": 9,
      "code": "let x = 5;\nlet y = 2;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of adding"
    },
    {
      "type": "code_example",
      "title": "Multiplying",
      "content": "",
      "order": 10,
      "code": "let x = 5;\nlet y = 2;\nlet z = x * y;",
      "language": "javascript",
      "explanation": "Example of multiplying"
    },
    {
      "type": "code_example",
      "title": "Arithmetic Operators Example",
      "content": "",
      "order": 11,
      "code": "let a = 3;\nlet x = (100 + 50) * a;",
      "language": "javascript",
      "explanation": "Example of arithmetic operators example"
    },
    {
      "type": "code_example",
      "title": "Assignment",
      "content": "",
      "order": 12,
      "code": "let x = 10;\nx += 5;",
      "language": "javascript",
      "explanation": "Example of assignment"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let text1 = \"A\";\nlet text2 = \"B\";\nlet result = text1 < text2;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let text1 = \"20\";\nlet text2 = \"5\";\nlet result = text1 < text2;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let text1 = \"John\";\nlet text2 = \"Doe\";\nlet text3 = text1 + \" \" + text2;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let text1 = \"What a very \";\ntext1 += \"nice day\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let x = 5 + 5;\nlet y = \"5\" + 5;\nlet z = \"Hello\" + 5;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 10;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x = 5;\nlet y = 2;\n# TODO: Complete this line",
      "solution": "let x = 5;\nlet y = 2;\nlet z = x + y;"
    }
  ],
  "related_topics": [
    {
      "id": "b24f4508-04d2-49cf-be2a-9da53f6ec933",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b5837367-d549-44da-b208-47924f0237af",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a25a9daa-c27b-49dc-b748-9886c2e60949",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nOperators\n\nJavascript operators?",
      "options": [
        "None of the above.",
        "different types of JavaScript operators:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nString Operators\nLogical Operators\nBitwise Operators\nTernary Operators\nType Operators\nJavaScript Arithmetic Operators\nArithmetic Operators\nare used to perform arithmetic on numbers:\nArithmetic Operators Example\nlet a = 3;\nlet x = (100 + 50) * a;\n\nOperator\nDescription\n+\nAddition\n-\nSubtraction\n*\nMultiplication\n**\nExponentiation (\nES2016\n)\n/\nDivision\n%\nModulus (Division Remainder)\n++\nIncrement\n--\nDecrement\nNote\nArithmetic operators are fully described in the\nJS Arithmetic\nchapter",
        "None of the above.",
        "used to perform different types of mathematical and logical computations"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript\nOperators\n\nJavascript operators is 'used to perform different types of mathematical and logical computations'."
    },
    {
      "question": "What is Types of JavaScript Operators\nThere?",
      "options": [
        "used to perform different types of mathematical and logical computations",
        "None of the above.",
        "None of the above.",
        "different types of JavaScript operators:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nString Operators\nLogical Operators\nBitwise Operators\nTernary Operators\nType Operators\nJavaScript Arithmetic Operators\nArithmetic Operators\nare used to perform arithmetic on numbers:\nArithmetic Operators Example\nlet a = 3;\nlet x = (100 + 50) * a;\n\nOperator\nDescription\n+\nAddition\n-\nSubtraction\n*\nMultiplication\n**\nExponentiation (\nES2016\n)\n/\nDivision\n%\nModulus (Division Remainder)\n++\nIncrement\n--\nDecrement\nNote\nArithmetic operators are fully described in the\nJS Arithmetic\nchapter"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Types of JavaScript Operators\nThere is 'different types of JavaScript operators:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nString Operators\nLogical Operators\nBitwise Operators\nTernary Operators\nType Operators\nJavaScript Arithmetic Operators\nArithmetic Operators\nare used to perform arithmetic on numbers:\nArithmetic Operators Example\nlet a = 3;\nlet x = (100 + 50) * a;\n\nOperator\nDescription\n+\nAddition\n-\nSubtraction\n*\nMultiplication\n**\nExponentiation (\nES2016\n)\n/\nDivision\n%\nModulus (Division Remainder)\n++\nIncrement\n--\nDecrement\nNote\nArithmetic operators are fully described in the\nJS Arithmetic\nchapter'."
    }
  ],
  "summary": "This tutorial covers JavaScriptOperators concepts and techniques. You'll learn how to use JavaScriptOperators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptOperators and how to apply it in your projects."
}