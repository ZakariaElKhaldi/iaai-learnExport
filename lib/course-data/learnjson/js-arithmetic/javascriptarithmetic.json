{
  "id": "9f7198cd-97a4-46b8-98bb-02b0901c5f93",
  "title": "JavaScriptArithmetic",
  "slug": "javascriptarithmetic",
  "metadata": {
    "description": "Learn about JavaScriptArithmetic with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "operator",
      "example",
      "arithmetic",
      "numbers",
      "division",
      "precedence",
      "multiplication",
      "addition",
      "remainder",
      "subtraction"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Arithmetic"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nArithmetic",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nArithmetic\n\nJavaScript Arithmetic Operators\nArithmetic operators perform arithmetic on numbers",
      "content": "(literals or variables).\nOperator\nDescription\n+",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Addition",
      "content": "-\nSubtraction\n*\nMultiplication\n**\nExponentiation (\nES2016\n)\n/\nDivision\n%\nModulus (Remainder)\n++",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Increment",
      "content": "--\nDecrement\nArithmetic Operations\nA typical arithmetic operation operates on two numbers.\nThe two numbers can be literals:\nExample\nlet x = 100 + 50;\n\nor variables:\nExample\nlet x = a + b;\n\nor expressions:\nExample\nlet x = (100 + 50) * a;\n\nOperators and Operands\nThe numbers (in an arithmetic operation) are called\noperands\n.\nThe operation (to be performed between the two operands) is defined by an\noperator\n.\nOperand\nOperator\nOperand\n100\n+\n50\nAdding\nThe\naddition\noperator (\n+\n) adds numbers:\nExample\nlet x = 5;\nlet y = 2;\nlet z = x + y;\n\nSubtracting\nThe\nsubtraction\noperator (\n-\n) subtracts numbers.\nExample\nlet x = 5;\nlet y = 2;\nlet z = x - y;\n\nMultiplying\nThe\nmultiplication\noperator (\n*\n) multiplies numbers.\nExample\nlet x = 5;\nlet y = 2;\nlet z = x * y;\n\nDividing\nThe\ndivision\noperator (\n/\n) divides numbers.\nExample\nlet x = 5;\nlet y = 2;\nlet z = x / y;\n\nRemainder\nThe\nmodulus\noperator (\n%\n) returns the division remainder.\nExample\nlet x = 5;\nlet y = 2;\nlet z = x % y;\n\nIn arithmetic, the division of two integers produces a\nquotient\nand a\nremainder\n.\nIn mathematics, the result of a\nmodulo operation\nis the\nremainder\nof an arithmetic division.\nIncrementing\nThe\nincrement\noperator (\n++\n) increments numbers.\nExample\nlet x = 5;\nx++;\nlet z = x;\n\nDecrementing\nThe\ndecrement\noperator (\n--\n) decrements numbers.\nExample\nlet x = 5;\nx--;\nlet z = x;\n\nExponentiation\nThe\nexponentiation\noperator (\n**\n) raises the first operand to the power of the second operand.\nExample\nlet x = 5;\nlet z =\n x ** 2;\n\nx ** y produces the same result as\nMath.pow(x,y)\n:\nExample\nlet x = 5;\nlet z =\n  Math.pow(x,2);\n\nOperator Precedence\nOperator precedence describes the order in which operations are performed in \nan arithmetic expression.\nExample\nlet x = 100 + 50 * 3;\n\nIs the result of example above the same as 150 * 3, or is it the same as 100 \n+ 150?\nIs the addition or the multiplication done first?\nAs in traditional school mathematics, the multiplication is done first.\nMultiplication (\n*\n) and division (\n/\n) have higher\nprecedence\nthan \naddition (\n+\n) and subtraction (\n-\n).\nAnd (as in school mathematics) the precedence can be changed by using \nparentheses.\nWhen using parentheses, the operations inside the parentheses are computed \nfirst:\nExample\nlet x = (100 + 50) * 3;\n\nWhen many operations have the same precedence (like addition and \nsubtraction or multiplication and division), they are computed from left to \nright:\nExamples\nlet x = 100 + 50 - 3;\n\nlet x = 100 / 50 * 3;\n\nNote\nFor a full list of operator precedence values go to:\nJavaScript Operator Precedence Values\n.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 100 + 50;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = a + b;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = (100 + 50) * a;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = 5;\nlet y = 2;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = 5;\nlet y = 2;\nlet z = x - y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x = 5;\nlet y = 2;\nlet z = x * y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = 5;\nlet y = 2;\nlet z = x / y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let x = 5;\nlet y = 2;\nlet z = x % y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let x = 5;\nx++;\nlet z = x;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let x = 5;\nx--;\nlet z = x;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "let x = 5;\nlet z =\n x ** 2;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let x = 5;\nlet z =\n  Math.pow(x,2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let x = 100 + 50 * 3;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "let x = (100 + 50) * 3;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 19,
      "code": "let x = 100 + 50 - 3;",
      "language": "javascript",
      "explanation": "Example of examples"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 100 + 50;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = a + b;"
    }
  ],
  "related_topics": [
    {
      "id": "60391947-1cc2-4f52-8fd8-68e30f11fbac",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3e5564bb-7fb2-4c9c-81e8-98af1a24bd7b",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "af53b1be-f05a-468c-b55b-5a95cec2b1de",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptArithmetic concepts and techniques. You'll learn how to use JavaScriptArithmetic effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptArithmetic and how to apply it in your projects."
}