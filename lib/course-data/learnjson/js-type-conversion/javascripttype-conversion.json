{
  "id": "4117f39f-de35-4f57-b47b-5720db138dcb",
  "title": "JavaScriptType Conversion",
  "slug": "javascripttype-conversion",
  "metadata": {
    "description": "Learn about JavaScriptType Conversion with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "number",
      "string",
      "true",
      "returns",
      "numbers",
      "tostring",
      "false",
      "converting",
      "method",
      "strings"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Type Conversion"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nType Conversion",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Converting Strings to Numbers\nConverting Numbers to Strings\nConverting Dates to Numbers\nConverting Numbers to Dates\nConverting Booleans to Numbers\nConverting Numbers to Booleans\nJavaScript Type Conversion\nJavaScript variables can be converted to a new variable and another data type:\nBy the use of a JavaScript function\nAutomatically\nby JavaScript itself\nConverting Strings to Numbers\nThe global method\nNumber()\nconverts a variable (or a value) into a number.\nA numeric string (like \"3.14\") converts to a number (like 3.14).\nAn empty string (like \"\") converts to 0.\nA non numeric string (like \"John\") converts to\nNaN\n(Not a Number).\nExamples\nThese will convert:\nNumber(\"3.14\")\nNumber(Math.PI)\nNumber(\" \")\nNumber(\"\")\nThese will not convert:\nNumber(\"99 88\")\nNumber(\"John\")\n\nNumber Methods\nIn the chapter\nNumber Methods\n, you \nwill find more methods that can be used to convert strings to \nnumbers:\nMethod\nDescription\nNumber()\nReturns a number, converted from its argument\nparseFloat()\nParses a string and returns a floating point number\nparseInt()\nParses a string and returns an integer\nThe Unary + Operator\nThe\nunary + operator\ncan be used to \nconvert a variable to a number:\nExample\nlet y = \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number\n\nIf the \nvariable cannot be converted, it will still become a number, but with the value\nNaN\n(Not a Number):\nExample\nlet y = \"John\";\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// x is a number (NaN)\n\nConverting Numbers to Strings\nThe global method\nString()\ncan convert numbers to strings.\nIt can be used on any type of numbers, literals, variables, or expressions:\nExample\nString(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// returns a string from a number variable x\nString(123)\u00a0\u00a0 \u00a0\u00a0\u00a0 // returns a string from a number literal 123\nString(100 + 23)\u00a0 // returns a string from a number from an expression\n\nThe Number method\ntoString()\ndoes the same.\nExample\nx.toString()\n(123).toString()\n(100 + 23).toString()\n\nMore Methods\nIn the chapter\nNumber Methods\n, you \nwill find more methods that can be used to convert numbers to \nstrings:\nMethod\nDescription\ntoExponential()\nReturns a string, with a number rounded and written using exponential notation.\ntoFixed()\nReturns a string, with a number rounded and written with a specified number of decimals.\ntoPrecision()\nReturns a string, with a number written with a specified length\nConverting Dates to Numbers\nThe global method\nNumber()\ncan be used to convert dates to \nnumbers.\nd = new Date();\nNumber(d)\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0 // returns 1404568027739\nThe date method\ngetTime()\ndoes the same.\nd = new Date();\nd.getTime()\u00a0\u00a0\u00a0 \u00a0 \u00a0 // returns 1404568027739\nConverting Dates to Strings\nThe global method\nString()\ncan convert dates to \nstrings.\nString(Date())\u00a0 // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"\nThe Date method\ntoString()\ndoes the same.\nExample\nDate().toString()\u00a0 // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"\nIn the chapter\nDate Methods\n, you \nwill find more methods that can be used to convert dates to \nstrings:\nMethod\nDescription\ngetDate()\nGet the day as a number (1-31)\ngetDay()\nGet the weekday a number (0-6)\ngetFullYear()\nGet the four digit year (yyyy)\ngetHours()\nGet the hour (0-23)\ngetMilliseconds()\nGet the milliseconds (0-999)\ngetMinutes()\nGet the minutes (0-59)\ngetMonth()\nGet the month (0-11)\ngetSeconds()\nGet the seconds (0-59)\ngetTime()\nGet the time (milliseconds since January 1, 1970)\nConverting Booleans to Numbers\nThe global method\nNumber()\ncan also convert booleans to numbers.\nNumber(false)\u00a0\u00a0\u00a0\u00a0 // returns 0\nNumber(true)\u00a0 \u00a0\u00a0\u00a0 // returns 1\nConverting Booleans to Strings\nThe global method\nString()\ncan convert booleans to \nstrings.\nString(false)\u00a0\u00a0\u00a0 \u00a0\u00a0// returns \"false\"\nString(true)\u00a0\u00a0\u00a0\u00a0 \u00a0 // returns \"true\"\nThe Boolean method\ntoString()\ndoes the same.\nfalse.toString()\u00a0\u00a0\u00a0// returns \"false\"\ntrue.toString()\u00a0 \u00a0 // returns \"true\"\nAutomatic Type Conversion\nWhen JavaScript tries to operate on a \"wrong\" data type, it will try to \nconvert the value to a \"right\" type.\nThe result is not always what you expect:\n5 + null\u00a0\u00a0\u00a0 // returns 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because null is converted to 0\n\"5\" + null\u00a0 // returns \"5null\"\u00a0\u00a0 because null is converted to \"null\"\n\"5\" + 2\u00a0\u00a0\u00a0\u00a0 // returns \n    \"52\"\u00a0\u00a0\u00a0\u00a0\u00a0 because 2 is converted to \"2\"\n\"5\" - 2\u00a0\u00a0\u00a0\u00a0 // returns 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" is converted to 5\n\"5\" * \"2\"\u00a0\u00a0 // returns \n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" and \"2\" are \n    converted to 5 and 2\n\nAutomatic String Conversion\nJavaScript automatically calls the variable's\ntoString()\nfunction when you try \nto \"output\" an object or a variable:\ndocument.getElementById(\"demo\").innerHTML = myVar;\n// if myVar = {name:\"Fjohn\"}\u00a0 // toString converts to \"[object Object]\"\n// if myVar = [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"1,2,3,4\"\n// if myVar = new Date()\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"Fri Jul 18 2014 09:08:55 GMT+0200\"\nNumbers and booleans are also converted, but this is not very visible:\n// if myVar = 123\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"123\"\n// if myVar = true \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"true\"\n// if myVar = false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"false\"\nJavaScript Type Conversion Table\nThis table shows the result of converting different JavaScript values to Number, String, and Boolean:\nOriginal\nValue\nConverted\nto Number\nConverted\nto String\nConverted\nto Boolean\nTry it\nfalse\n0\n\"false\"\nfalse\nTry it \u00bb\ntrue\n1\n\"true\"\ntrue\nTry it \u00bb\n0\n0\n\"0\"\nfalse\nTry it \u00bb\n1\n1\n\"1\"\ntrue\nTry it \u00bb\n\"0\"\n0\n\"0\"\ntrue\nTry it \u00bb\n\"000\"\n0\n\"000\"\ntrue\nTry it \u00bb\n\"1\"\n1\n\"1\"\ntrue\nTry it \u00bb\nNaN\nNaN\n\"NaN\"\nfalse\nTry it \u00bb\nInfinity\nInfinity\n\"Infinity\"\ntrue\nTry it \u00bb\n-Infinity\n-Infinity\n\"-Infinity\"\ntrue\nTry it \u00bb\n\"\"\n0\n\"\"\nfalse\nTry it \u00bb\n\"20\"\n20\n\"20\"\ntrue\nTry it \u00bb\n\"twenty\"\nNaN\n\"twenty\"\ntrue\nTry it \u00bb\n[ ]\n0\n\"\"\ntrue\nTry it \u00bb\n[20]\n20\n\"20\"\ntrue\nTry it \u00bb\n[10,20]\nNaN\n\"10,20\"\ntrue\nTry it \u00bb\n[\"twenty\"]\nNaN\n\"twenty\"\ntrue\nTry it \u00bb\n[\"ten\",\"twenty\"]\nNaN\n\"ten,twenty\"\ntrue\nTry it \u00bb\nfunction(){}\nNaN\n\"function(){}\"\ntrue\nTry it \u00bb\n{ }\nNaN\n\"[object Object]\"\ntrue\nTry it \u00bb\nnull\n0\n\"null\"\nfalse\nTry it \u00bb\nundefined\nNaN\n\"undefined\"\nfalse\nTry it \u00bb\nValues in quotes indicate string values.\nRed values\nindicate values (some) programmers might not expect.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "Number(\"3.14\")\nNumber(Math.PI)\nNumber(\" \")\nNumber(\"\")",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let y = \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let y = \"John\";\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// x is a number (NaN)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "String(x)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// returns a string from a number variable x\nString(123)\u00a0\u00a0 \u00a0\u00a0\u00a0 // returns a string from a number literal 123\nString(100 + 23)\u00a0 // returns a string from a number from an expression",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "x.toString()\n(123).toString()\n(100 + 23).toString()",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "d = new Date();\nNumber(d)\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0 // returns 1404568027739",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "d = new Date();\nd.getTime()\u00a0\u00a0\u00a0 \u00a0 \u00a0 // returns 1404568027739",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "String(Date())\u00a0 // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "Date().toString()\u00a0 // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "Number(false)\u00a0\u00a0\u00a0\u00a0 // returns 0\nNumber(true)\u00a0 \u00a0\u00a0\u00a0 // returns 1",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "String(false)\u00a0\u00a0\u00a0 \u00a0\u00a0// returns \"false\"\nString(true)\u00a0\u00a0\u00a0\u00a0 \u00a0 // returns \"true\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "false.toString()\u00a0\u00a0\u00a0// returns \"false\"\ntrue.toString()\u00a0 \u00a0 // returns \"true\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "5 + null\u00a0\u00a0\u00a0 // returns 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because null is converted to 0\n\"5\" + null\u00a0 // returns \"5null\"\u00a0\u00a0 because null is converted to \"null\"\n\"5\" + 2\u00a0\u00a0\u00a0\u00a0 // returns \n    \"52\"\u00a0\u00a0\u00a0\u00a0\u00a0 because 2 is converted to \"2\"\n\"5\" - 2\u00a0\u00a0\u00a0\u00a0 // returns 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" is converted to 5\n\"5\" * \"2\"\u00a0\u00a0 // returns \n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" and \"2\" are \n    converted to 5 and 2",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "document.getElementById(\"demo\").innerHTML = myVar;\n// if myVar = {name:\"Fjohn\"}\u00a0 // toString converts to \"[object Object]\"\n// if myVar = [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"1,2,3,4\"\n// if myVar = new Date()\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"Fri Jul 18 2014 09:08:55 GMT+0200\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "// if myVar = 123\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"123\"\n// if myVar = true \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"true\"\n// if myVar = false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // toString converts to \"false\"",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "Number(\"3.14\")\nNumber(Math.PI)\n# TODO: Complete this line\nNumber(\"\")",
      "solution": "Number(\"3.14\")\nNumber(Math.PI)\nNumber(\" \")\nNumber(\"\")"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let y = \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n# TODO: Complete this line",
      "solution": "let y = \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\n// y is a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number"
    }
  ],
  "related_topics": [
    {
      "id": "4bbd71de-d6ea-429e-8593-c4945ca7917f",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3ceec61c-c033-4f79-bd8b-6f4e05c405ec",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "876ec405-5ed9-43a9-95bf-e7301f3f6b40",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is y?",
      "options": [
        "a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number\n\nIf the \nvariable cannot be converted",
        "not always what you expect:\n5 + null\u00a0\u00a0\u00a0 // returns 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because null is converted to 0\n\"5\" + null\u00a0 // returns \"5null\"\u00a0\u00a0 because null is converted to \"null\"\n\"5\" + 2\u00a0\u00a0\u00a0\u00a0 // returns \n    \"52\"\u00a0\u00a0\u00a0\u00a0\u00a0 because 2 is converted to \"2\"\n\"5\" - 2\u00a0\u00a0\u00a0\u00a0 // returns 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" is converted to 5\n\"5\" * \"2\"\u00a0\u00a0 // returns \n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" and \"2\" are \n    converted to 5 and 2\n\nAutomatic String Conversion\nJavaScript automatically calls the variable's\ntoString()\nfunction when you try \nto \"output\" an object or a variable:\ndocument",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of y is 'a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number\n\nIf the \nvariable cannot be converted'."
    },
    {
      "question": "What is The result?",
      "options": [
        "a string\nlet x = + y;\u00a0\u00a0\u00a0\u00a0\u00a0 \n// x is a number\n\nIf the \nvariable cannot be converted",
        "None of the above.",
        "not always what you expect:\n5 + null\u00a0\u00a0\u00a0 // returns 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because null is converted to 0\n\"5\" + null\u00a0 // returns \"5null\"\u00a0\u00a0 because null is converted to \"null\"\n\"5\" + 2\u00a0\u00a0\u00a0\u00a0 // returns \n    \"52\"\u00a0\u00a0\u00a0\u00a0\u00a0 because 2 is converted to \"2\"\n\"5\" - 2\u00a0\u00a0\u00a0\u00a0 // returns 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" is converted to 5\n\"5\" * \"2\"\u00a0\u00a0 // returns \n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" and \"2\" are \n    converted to 5 and 2\n\nAutomatic String Conversion\nJavaScript automatically calls the variable's\ntoString()\nfunction when you try \nto \"output\" an object or a variable:\ndocument",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The result is 'not always what you expect:\n5 + null\u00a0\u00a0\u00a0 // returns 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because null is converted to 0\n\"5\" + null\u00a0 // returns \"5null\"\u00a0\u00a0 because null is converted to \"null\"\n\"5\" + 2\u00a0\u00a0\u00a0\u00a0 // returns \n    \"52\"\u00a0\u00a0\u00a0\u00a0\u00a0 because 2 is converted to \"2\"\n\"5\" - 2\u00a0\u00a0\u00a0\u00a0 // returns 3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" is converted to 5\n\"5\" * \"2\"\u00a0\u00a0 // returns \n    10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 because \"5\" and \"2\" are \n    converted to 5 and 2\n\nAutomatic String Conversion\nJavaScript automatically calls the variable's\ntoString()\nfunction when you try \nto \"output\" an object or a variable:\ndocument'."
    }
  ],
  "summary": "This tutorial covers JavaScriptType Conversion concepts and techniques. You'll learn how to use JavaScriptType Conversion effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptType Conversion and how to apply it in your projects."
}