{
  "id": "3aa5cba1-eb7c-46eb-af4b-deb770e939cf",
  "title": "Asynchronous JavaScript",
  "slug": "asynchronous-javascript",
  "metadata": {
    "description": "Learn about Asynchronous JavaScript with clear explanations and practical examples.",
    "keywords": [
      "function",
      "myfunction",
      "example",
      "javascript",
      "settimeout",
      "asynchronous",
      "callback",
      "argument",
      "used",
      "functions"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Asynchronous"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Asynchronous JavaScript",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "\"I will finish later!\"\nFunctions running in\nparallel\nwith other functions are called\nasynchronous\nA good example is JavaScript setTimeout()\nAsynchronous JavaScript\nThe examples used in the \nThe purpose of the examples was to demonstrate the syntax of callback functions:\nExample\nfunction myDisplayer(something) {\ndocument.getElementById(\"demo\").innerHTML \n  = something;\n}\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);\n\nIn the example above,\nmyDisplayer\nis the name of a function.\nIt is passed to\nmyCalculator()\nas an argument.\nIn the real world, callbacks are most often used with asynchronous functions.\nA typical example is JavaScript\nsetTimeout()\n.\nWaiting for a Timeout\nWhen using the JavaScript function\nsetTimeout()\n,\nyou can specify a callback function to be executed on time-out:\nExample\nsetTimeout(myFunction, 3000);\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}\n\nIn the example above,\nmyFunction\nis used as a callback.\nmyFunction\nis passed to\nsetTimeout()\nas an argument.\n3000 is the number of milliseconds before time-out, so\nmyFunction()\nwill be called after 3 seconds.\nNote\nWhen you pass a function as an argument, remember not to use parenthesis.\nRight: setTimeout(myFunction, 3000);\nWrong:\nsetTimeout(myFunction(), 3000)\n;\nInstead of passing the name of a function as an argument to another function,\nyou can always pass a whole function instead:\nExample\nsetTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\nfunction myFunction(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n}\n\nIn the example above,\nfunction(){ myFunction(\"I love You !!!\"); }\nis used as a callback. It is a complete function.\nThe complete function is passed to setTimeout() as an argument.\n3000 is the number of milliseconds before time-out, so\nmyFunction()\nwill be called after 3 seconds.\nWaiting for Intervals:\nWhen using the JavaScript function\nsetInterval()\n,\nyou can specify a callback function to be executed for each interval:\nExample\nsetInterval(myFunction, 1000);\nfunction myFunction() {\nlet d = new Date();\ndocument.getElementById(\"demo\").innerHTML=\nd.getHours() + \":\" +\nd.getMinutes() + \":\" +\nd.getSeconds();\n}\n\nIn the example above,\nmyFunction\nis used as a callback.\nmyFunction\nis passed to\nsetInterval()\nas an argument.\n1000 is the number of milliseconds between intervals, so\nmyFunction()\nwill be called every second.\nCallback Alternatives\nWith asynchronous programming, JavaScript programs can start long-running tasks,\nand continue running other tasks in parallel.\nBut, asynchronus programmes are difficult to write and difficult to debug.\nBecause of this, most modern asynchronous JavaScript methods don't use callbacks.\nInstead, in JavaScript, asynchronous programming is solved using\nPromises\ninstead.\nNote\nYou will learn about promises in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function myDisplayer(something) {\ndocument.getElementById(\"demo\").innerHTML \n  = something;\n}\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "setTimeout(myFunction, 3000);\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\nfunction myFunction(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "setInterval(myFunction, 1000);\nfunction myFunction() {\nlet d = new Date();\ndocument.getElementById(\"demo\").innerHTML=\nd.getHours() + \":\" +\nd.getMinutes() + \":\" +\nd.getSeconds();\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myDisplayer(something) {\ndocument.getElementById(\"demo\").innerHTML \n  = something;\n# TODO: Complete this line\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);",
      "solution": "function myDisplayer(something) {\ndocument.getElementById(\"demo\").innerHTML \n  = something;\n}\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "setTimeout(myFunction, 3000);\nfunction myFunction() {\n# TODO: Complete this line\n}",
      "solution": "setTimeout(myFunction, 3000);\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "9715834c-e5ee-4f94-a4ae-5f00de497509",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8c57cebf-8c7a-4ba9-b571-7453a2da2545",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "264648f8-6fa0-4907-9dcc-bbf2f6b4f671",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Functions running in\nparallel\nwith other functions are called\nasynchronous\nA good example?",
      "options": [
        "JavaScript setTimeout()\nAsynchronous JavaScript\nThe examples used in the \nThe purpose of the examples was to demonstrate the syntax of callback functions:\nExample\nfunction myDisplayer(something) {\ndocument",
        "None of the above.",
        "None of the above.",
        "the name of a function"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Functions running in\nparallel\nwith other functions are called\nasynchronous\nA good example is 'JavaScript setTimeout()\nAsynchronous JavaScript\nThe examples used in the \nThe purpose of the examples was to demonstrate the syntax of callback functions:\nExample\nfunction myDisplayer(something) {\ndocument'."
    },
    {
      "question": "What is myDisplayer?",
      "options": [
        "the name of a function",
        "JavaScript setTimeout()\nAsynchronous JavaScript\nThe examples used in the \nThe purpose of the examples was to demonstrate the syntax of callback functions:\nExample\nfunction myDisplayer(something) {\ndocument",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of myDisplayer is 'the name of a function'."
    }
  ],
  "summary": "This tutorial covers Asynchronous JavaScript concepts and techniques. You'll learn how to use Asynchronous JavaScript effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Asynchronous JavaScript and how to apply it in your projects."
}