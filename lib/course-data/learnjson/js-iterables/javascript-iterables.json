{
  "id": "de8a9901-d418-4241-8be6-57a49372cae7",
  "title": "JavaScript Iterables",
  "slug": "javascript-iterables",
  "metadata": {
    "description": "Learn about JavaScript Iterables with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "const",
      "iterator",
      "iterable",
      "code",
      "done",
      "iterating",
      "example",
      "symbol",
      "iterables",
      "elements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "JS Iterables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Iterables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Iterables are iterable objects (like Arrays).\nIterables can be accessed with simple and efficient code.\nIterables can be iterated over with\nfor..of\nloops\nThe For Of Loop\nThe JavaScript\nfor..of\nstatement loops \nthrough the elements of an iterable object.\nSyntax\nfor (variable of iterable) {\n//\ncode block to be executed\n}\nIterating\nIterating is easy to understand.\nIt simply means looping over a sequence of elements.\nHere are some easy examples:\nIterating over a String\nIterating over an Array\nIterating Over a String\nYou can use a\nfor..of\nloop to iterate over the elements of a string:\nExample\nconst name = \"\";\nfor (const x of name) {\n//\ncode block to be executed\n}\n\nIterating Over an Array\nYou can use a\nfor..of\nloop to iterate over the elements of an Array:\nExample 1\nconst letters = [\"a\",\"b\",\"c\"];\nfor (const x of letters) {\n//\ncode block to be executed\n}\n\nExample 2\nconst numbers = [2,4,6,8];\nfor (const x of numbers) {\n//\ncode block to be executed\n}\n\nIterating Over a Set\nYou can use a\nfor..of\nloop to iterate over the elements of a Set:\nExample\nconst letters = new Set([\"a\",\"b\",\"c\"]);\nfor (const x of letters) {\n//\ncode block to be executed\n}\n\nNote\nSets and Maps are covered in the \nIterating Over a Map\nYou can use a\nfor..of\nloop to iterate over the elements of a Map:\nExample\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\nfor (const x of fruits) {\n//\ncode block to be executed\n}\n\nJavaScript Iterators\nThe\niterator protocol\ndefines how to produce a\nsequence of values\nfrom an object.\nAn object becomes an\niterator\nwhen it implements a\n\nmethod.\nThe\n\nmethod must return an object with two properties:\nvalue (the \ndone (true or false)\nvalue\nThe value returned by the iterator\n(Can be omitted if done is true)\ndone\ntrue\nif the iterator has completed\nfalse\nif the iterator has produced a new value\nNote\nTechnically, iterables must implement the\nSymbol.iterator\nmethod.\nString, Array, TypedArray, Map and Set are all iterables, because their prototype objects have a Symbol.iterator method.\nHome Made Iterable\nThis iterable returns never ending: 10,20,30,40,.... Everytime\n\nis called:\nExample\n// Home Made Iterable\nfunction myNumbers() {\nlet n = 0;\nreturn {\n\nn += 10;\nreturn {value:n, done:false};\n}\n};\n}\n// Create Iterable\nconst n = myNumbers();\nn.\nn.\nn.\n\nThe problem with a home made iterable:\nIt does not support the JavaScript\nfor..of\nstatement.\nA JavaScript iterable is an object that has a\nSymbol.iterator\n.\nThe\nSymbol.iterator\nis a function that returns a\n\nfunction.\nAn iterable can be iterated over with the code:\nfor (const x of iterable) { }\nExample\n// Create an Object\nmyNumbers = {};\n// Make it Iterable\nmyNumbers[Symbol.iterator] = function() {\nlet n = 0;\ndone = false;\nreturn {\n\nn += 10;\nif (n == 100) {done = true}\nreturn {value:n, done:done};\n}\n};\n}\nNow you can use\nfor..of\nfor (const num of myNumbers) {\n// Any Code Here\n}\n\nThe Symbol.iterator method is called automatically by\nfor..of\n.\nBut we can also do it \"manually\":\nExample\nlet iterator = myNumbers[Symbol.iterator]();\nwhile (true) {\nconst result = iterator.\nif (result.done) break;\n// Any Code Here\n}\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "for (variable of iterable) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const name = \"W3Schools\";\nfor (const x of name) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 5,
      "code": "const letters = [\"a\",\"b\",\"c\"];\nfor (const x of letters) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 6,
      "code": "const numbers = [2,4,6,8];\nfor (const x of numbers) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const letters = new Set([\"a\",\"b\",\"c\"]);\nfor (const x of letters) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\nfor (const x of fruits) {\n//\ncode block to be executed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Home Made Iterable\nfunction myNumbers() {\nlet n = 0;\nreturn {\nnext: function() {\nn += 10;\nreturn {value:n, done:false};\n}\n};\n}\n// Create Iterable\nconst n = myNumbers();\nn.next(); // Returns 10\nn.next(); // Returns 20\nn.next(); // Returns 30",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "// Create an Object\nmyNumbers = {};\n// Make it Iterable\nmyNumbers[Symbol.iterator] = function() {\nlet n = 0;\ndone = false;\nreturn {\nnext() {\nn += 10;\nif (n == 100) {done = true}\nreturn {value:n, done:done};\n}\n};\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let iterator = myNumbers[Symbol.iterator]();\nwhile (true) {\nconst result = iterator.next();\nif (result.done) break;\n// Any Code Here\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for (variable of iterable) {\n//\ncode block to be executed\n# TODO: Complete this line",
      "solution": "for (variable of iterable) {\n//\ncode block to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const name = \"W3Schools\";\nfor (const x of name) {\n//\n# TODO: Complete this line\n}",
      "solution": "const name = \"W3Schools\";\nfor (const x of name) {\n//\ncode block to be executed\n}"
    }
  ],
  "related_topics": [
    {
      "id": "c551c0fc-d576-46d5-9331-7532c977de28",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3cfcef69-7a8b-441c-9e47-b55e20f07543",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4315e565-7969-49a3-b359-09a41c158b71",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Iterables\n\nIterables?",
      "options": [
        "iterable objects (like Arrays)",
        "None of the above.",
        "easy to understand",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript Iterables\n\nIterables is 'iterable objects (like Arrays)'."
    },
    {
      "question": "What is Iterating\nIterating?",
      "options": [
        "iterable objects (like Arrays)",
        "None of the above.",
        "easy to understand",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Iterating\nIterating is 'easy to understand'."
    }
  ],
  "summary": "This tutorial covers JavaScript Iterables concepts and techniques. You'll learn how to use JavaScript Iterables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Iterables and how to apply it in your projects."
}