{
  "id": "0d2234a5-2229-443e-a341-151cf2ef237b",
  "title": "JavaScriptObject Prototypes",
  "slug": "javascriptobject-prototypes",
  "metadata": {
    "description": "Learn about JavaScriptObject Prototypes with clear explanations and practical examples.",
    "keywords": [
      "prototype",
      "objects",
      "person",
      "eyecolor",
      "first",
      "last",
      "object",
      "javascript",
      "inherit",
      "properties"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJSON",
    "subcategory": "Object Prototypes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObject Prototypes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "All JavaScript objects inherit properties and methods \nfrom a prototype.\nIn the \nobject constructor\n:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\n\nWe also learned that you can\nnot\nadd a new property to an existing object constructor:\nExample\nPerson.nationality = \"English\";\n\nTo add a new property to a constructor, you must add it to the \nconstructor function:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}\n\nPrototype Inheritance\nAll JavaScript objects inherit properties and methods from a prototype:\nDate\nobjects inherit from\nDate.prototype\nArray\nobjects inherit from\nArray.prototype\nPerson\nobjects inherit from\nPerson.prototype\nThe\nObject.prototype\nis on the top of the prototype inheritance chain:\nDate\nobjects,\nArray\nobjects, and\nPerson\nobjects inherit from\nObject.prototype\n.\nAdding Properties and Methods to Objects\nSometimes you want to add new properties (or methods) to all existing objects of a given type.\nSometimes you want to add new properties (or methods) to an object \nconstructor.\nUsing the\nprototype\nProperty\nThe JavaScript\nprototype\nproperty allows you to add new properties to object \nconstructors:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nPerson.prototype.nationality = \"English\";\n\nThe JavaScript\nprototype\nproperty also allows you to add new methods to objects \nconstructors:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nPerson.prototype.name = function() {\nreturn this.firstName + \" \" + this.lastName;\n};\n\nOnly modify your\nown\nprototypes. Never modify the prototypes of  \nstandard JavaScript objects.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "Person.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nPerson.prototype.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nPerson.prototype.name = function() {\nreturn this.firstName + \" \" + this.lastName;\n};",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\n# TODO: Complete this line\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");",
      "solution": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "Person.nationality = \"English\";"
    }
  ],
  "related_topics": [
    {
      "id": "28505a8a-a95e-4262-9a2d-6883f21682e5",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ed0051b4-3c6f-4260-bf9d-c600969f86a7",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b795d906-a53a-413e-9f82-6fda16ac9ef6",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is prototype?",
      "options": [
        "None of the above.",
        "on the top of the prototype inheritance chain:\nDate\nobjects",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of prototype is 'on the top of the prototype inheritance chain:\nDate\nobjects'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptObject Prototypes concepts and techniques. You'll learn how to use JavaScriptObject Prototypes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObject Prototypes and how to apply it in your projects."
}