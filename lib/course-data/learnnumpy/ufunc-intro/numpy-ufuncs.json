{
  "id": "ed922c95-42a2-4065-8a59-570260cfeac5",
  "title": "NumPy ufuncs",
  "slug": "numpy-ufuncs",
  "metadata": {
    "description": "Learn about NumPy ufuncs with clear explanations and practical examples.",
    "keywords": [
      "c",
      "ufuncs",
      "numpy",
      "elements",
      "vectorization",
      "ufunc",
      "functions",
      "faster",
      "also",
      "additional",
      "like"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "ufunc Intro"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy ufuncs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What are ufuncs?\nufuncs stands for \"Universal Functions\" and they are NumPy functions that\noperate on the\nndarray\nobject.\nWhy use ufuncs?\nufuncs are used to implement\nvectorization\nin NumPy which is way faster than iterating over elements.\nThey also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.\nufuncs also take additional arguments, like:\nwhere\nboolean array or condition defining where the operations should take place.\ndtype\ndefining the return type of elements.\nout\noutput array where the return value should be copied.\nWhat is Vectorization?\nConverting iterative statements into a vector based operation is called vectorization.\nIt is faster as modern CPUs are optimized for such operations.\nAdd the Elements of Two Lists\nlist 1: [1, 2, 3, 4]\nlist 2: [4, 5, 6, 7]\nOne way of doing it is to iterate over both of the lists and then sum each elements.\nExample\nWithout ufunc, we can use Python's built-in\nzip()\nmethod:\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\nz.append(i + j)\nprint(z)\n\nNumPy has a ufunc for this, called\nadd(x, y)\nthat will produce the same result.\nExample\nWith ufunc, we can use the\nadd()\nfunction:\nimport numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\nz.append(i + j)\nprint(z)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\nz.append(i + j)\n# TODO: Complete this line",
      "solution": "x = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\nz.append(i + j)\nprint(z)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\n# TODO: Complete this line",
      "solution": "import numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)"
    }
  ],
  "related_topics": [
    {
      "id": "c265cc01-a40a-4f58-9d2c-2f3e87f2310b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "70d384b5-76c1-4d22-9d35-cadd3c3cfe4c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5cb70760-b65b-4ba7-88b7-4dbe955fce91",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy ufuncs\n\nWhat?",
      "options": [
        "ufuncs",
        "None of the above.",
        "NumPy functions that\noperate on the\nndarray\nobject",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of NumPy ufuncs\n\nWhat is 'ufuncs'."
    },
    {
      "question": "What is and they?",
      "options": [
        "None of the above.",
        "NumPy functions that\noperate on the\nndarray\nobject",
        "ufuncs",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and they is 'NumPy functions that\noperate on the\nndarray\nobject'."
    }
  ],
  "summary": "This tutorial covers NumPy ufuncs concepts and techniques. You'll learn how to use NumPy ufuncs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPy ufuncs and how to apply it in your projects."
}