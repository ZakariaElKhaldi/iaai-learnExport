{
  "id": "4cf18891-1b9c-4c11-b20a-3e3ade408979",
  "title": "NumPy Logs",
  "slug": "numpy-logs",
  "metadata": {
    "description": "Learn about NumPy Logs with clear explanations and practical examples.",
    "keywords": [
      "base",
      "numpy",
      "function",
      "import",
      "perform",
      "elements",
      "example",
      "array",
      "arange",
      "print"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "ufunc Logs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy Logs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Logs\nNumPy provides functions to perform log at the base 2, e and 10.\nWe will also explore how we can take log for any base by creating a custom ufunc.\nAll of the log functions will place -inf or inf in the elements if the log can not be computed.\nLog at Base 2\nUse the\nlog2()\nfunction to perform log at the base 2.\nExample\nFind log at base 2 of all elements of following array:\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log2(arr))\n\nNote:\nThe\narange(1, 10)\nfunction returns an array \n  with integers starting from 1 (included) to 10 (not included).\nLog at Base 10\nUse the\nlog10()\nfunction to perform log at the base 10.\nExample\nFind log at base 10 of all elements of following array:\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log10(arr))\n\nNatural Log, or Log at Base e\nUse the\nlog()\nfunction to perform log at the base e.\nExample\nFind log at base e of all elements of following array:\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log(arr))\n\nLog at Any Base\nNumPy does not provide any function to take log at any base,\nso we can use the\nfrompyfunc()\nfunction along with inbuilt function\nmath.log()\nwith two input parameters and one output parameter:\nExample\nfrom math import log\nimport numpy as np\nnplog = np.frompyfunc(log, \n  2, 1)\nprint(nplog(100, 15))\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.arange(1, 10)\nprint(np.log2(arr))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.arange(1, 10)\nprint(np.log10(arr))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.arange(1, 10)\nprint(np.log(arr))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "from math import log\nimport numpy as np\nnplog = np.frompyfunc(log, \n  2, 1)\nprint(nplog(100, 15))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nprint(np.log2(arr))",
      "solution": "import numpy as np\narr = np.arange(1, 10)\nprint(np.log2(arr))"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.arange(1, 10)\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.arange(1, 10)\nprint(np.log10(arr))"
    }
  ],
  "related_topics": [
    {
      "id": "d27e870d-504f-48a0-811f-1a4a34f4d1cf",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9643e10-378c-40e1-93fd-b37da4d7392a",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3ac3a8be-4edb-4248-a577-9036c1e984e9",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers NumPy Logs concepts and techniques. You'll learn how to use NumPy Logs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPy Logs and how to apply it in your projects."
}