{
  "id": "f77eec27-d3a8-49c3-b731-419ef0896310",
  "title": "NumPyArray Slicing",
  "slug": "numpyarray-slicing",
  "metadata": {
    "description": "Learn about NumPyArray Slicing with clear explanations and practical examples.",
    "keywords": [
      "c",
      "index",
      "array",
      "numpy",
      "example",
      "import",
      "print",
      "elements",
      "slice",
      "slicing",
      "step"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Slicing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nArray Slicing",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Slicing arrays\nSlicing in python means taking elements from one given index to another given \nindex.\nWe pass slice instead of index like this:\n[\nstart\n:\nend\n]\n.\nWe can also define the step, like this:\n[\nstart\n:\nend\n:\nstep\n]\n.\nIf we don't pass start its considered 0\nIf we don't pass end its considered length of array in that dimension\nIf we don't pass step its considered 1\nExample\nSlice elements from index 1 to index 5 from the following array:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])\n\nNote:\nThe result\nincludes\nthe start index, but\nexcludes\nthe end index.\nExample\nSlice elements from index 4 to the end of the array:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])\n\nExample\nSlice elements from the beginning to index 4 (not included):\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[:4])\n\nNegative Slicing\nUse the minus operator to refer to an index from the end:\nExample\nSlice from the index 3 from the end to index 1 from the end:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[-3:-1])\n\nSTEP\nUse the\nstep\nvalue to determine the step of the slicing:\nExample\nReturn every other element from index 1 to index 5:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5:2])\n\nExample\nReturn every other element from the entire array:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[::2])\n\nSlicing 2-D Arrays\nExample\nFrom the second element, slice elements from index 1 to index 4 (not included):\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[1, 1:4])\n\nNote:\nRemember that\nsecond element\nhas index 1.\nExample\nFrom both elements, return index 2:\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 2])\n\nExample\nFrom both elements, slice index 1 to index 4 (not included), this will return a 2-D array:\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 1:4])\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[:4])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[-3:-1])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5:2])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[::2])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[1, 1:4])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 2])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "import numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(arr[0:2, 1:4])",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])"
    }
  ],
  "related_topics": [
    {
      "id": "c08c4200-ebd5-4c6e-bef1-e62b72b19a57",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "465b7df4-74d3-48f7-85b1-b3a02bd8af35",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c2be5d19-1b31-4e69-9f24-20c48821b284",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nArray Slicing\n\nSlicing arrays\nSlicing in python?",
      "options": [
        "None of the above.",
        "taking elements from one given index to another given \nindex",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of NumPy\nArray Slicing\n\nSlicing arrays\nSlicing in python is 'taking elements from one given index to another given \nindex'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers NumPyArray Slicing concepts and techniques. You'll learn how to use NumPyArray Slicing effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyArray Slicing and how to apply it in your projects."
}