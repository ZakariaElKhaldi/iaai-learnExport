{
  "id": "d6af939e-664e-44c3-b27e-a6920aa5e3de",
  "title": "NumPyJoining Array",
  "slug": "numpyjoining-array",
  "metadata": {
    "description": "Learn about NumPyJoining Array with clear explanations and practical examples.",
    "keywords": [
      "array",
      "numpy",
      "along",
      "arrays",
      "axis",
      "join",
      "example",
      "import",
      "print",
      "stack"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Join"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nJoining Array",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Joining NumPy Arrays\nJoining means putting contents of two or more arrays in a single array.\nIn SQL we join tables based on a key, whereas in NumPy we join arrays by axes.\nWe pass a sequence of arrays that we want to join to the\nconcatenate()\nfunction, along with the axis. If axis is not explicitly passed, it is taken as 0.\nExample\nJoin two arrays\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)\n\nExample\nJoin two 2-D arrays along rows (axis=1):\nimport numpy as np\narr1 = np.array([[1, 2], [3, 4]])\narr2 = \n  np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)\n\nJoining Arrays Using Stack Functions\nStacking is same as concatenation, the only difference is that stacking is done along a new axis.\nWe can concatenate two 1-D arrays along the second axis which would result in putting them one over \nthe other, ie. stacking.\nWe pass a sequence of arrays that we want to join to the\nstack()\nmethod along with the axis. If axis is not explicitly passed it is taken as 0.\nExample\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = \n  np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)\n\nStacking Along Rows\nNumPy provides a helper function:\nhstack()\nto stack along rows.\nExample\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)\n\nStacking Along Columns\nNumPy provides a helper function:\nvstack()\nto stack along columns.\nExample\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)\n\nStacking Along Height (depth)\nNumPy provides a helper function:\ndstack()\nto stack along height, which is the same as depth.\nExample\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr1 = np.array([[1, 2], [3, 4]])\narr2 = \n  np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = \n  np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.concatenate((arr1, arr2))\n# TODO: Complete this line",
      "solution": "import numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, \n  5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\narr2 = \n  np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)",
      "solution": "import numpy as np\narr1 = np.array([[1, 2], [3, 4]])\narr2 = \n  np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\nprint(arr)"
    }
  ],
  "related_topics": [
    {
      "id": "762d8cd7-c2e3-48a1-ab7c-11e6edfcbead",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0b6f7e38-6837-4123-8a25-f0b1044dd550",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "33be8ef3-c665-4459-95cb-078880df4900",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nJoining Array\n\nJoining NumPy Arrays\nJoining?",
      "options": [
        "None of the above.",
        "not explicitly passed",
        "None of the above.",
        "putting contents of two or more arrays in a single array"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of NumPy\nJoining Array\n\nJoining NumPy Arrays\nJoining is 'putting contents of two or more arrays in a single array'."
    },
    {
      "question": "What is If axis?",
      "options": [
        "None of the above.",
        "None of the above.",
        "not explicitly passed",
        "putting contents of two or more arrays in a single array"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of If axis is 'not explicitly passed'."
    }
  ],
  "summary": "This tutorial covers NumPyJoining Array concepts and techniques. You'll learn how to use NumPyJoining Array effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyJoining Array and how to apply it in your projects."
}