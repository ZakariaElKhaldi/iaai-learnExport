{
  "id": "8c162182-7fc4-41a3-9aa9-afa500c28af6",
  "title": "NumPySplitting Array",
  "slug": "numpysplitting-array",
  "metadata": {
    "description": "Learn about NumPySplitting Array with clear explanations and practical examples.",
    "keywords": [
      "array",
      "arrays",
      "newarr",
      "split",
      "example",
      "numpy",
      "print",
      "splitting",
      "three",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Split"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nSplitting Array",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Splitting NumPy Arrays\nSplitting is reverse operation of Joining.\nJoining merges multiple arrays into one and Splitting breaks one\narray into multiple.\nWe use\narray_split()\nfor splitting arrays, we pass it the array we want to split \nand the number of splits.\nExample\nSplit the array in 3 parts:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr)\n\nNote:\nThe return value is a list containing three arrays.\nIf the array has less elements than required, it will adjust from the end accordingly.\nExample\nSplit the array in 4 parts:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 4)\nprint(newarr)\n\nNote:\nWe also have the method\nsplit()\navailable but it will not adjust the elements when elements are less in\nsource array for splitting like in example above,\narray_split()\nworked properly but\nsplit()\nwould fail.\nSplit Into Arrays\nThe return value of the\narray_split()\nmethod is an array containing each of the split as an array.\nIf you split an array into 3 arrays, you can access them from the result just \nlike any array element:\nExample\nAccess the splitted arrays:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])\n\nSplitting 2-D Arrays\nUse the same syntax when splitting 2-D arrays.\nUse the\narray_split()\nmethod, pass in the array \nyou want to split \nand the number of splits you want to do.\nExample\nSplit the 2-D array into three 2-D arrays.\nimport numpy as np\narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, \n  10], [11, 12]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)\n\nThe example above returns three 2-D arrays.\nLet's look at another example, this time each element in the 2-D arrays \ncontains 3 elements.\nExample\nSplit the 2-D array into three 2-D arrays.\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, \n  11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)\n\nThe example above returns three 2-D arrays.\nIn addition, you can specify which axis you want to do the split around.\nThe example below also returns three 2-D arrays, but they are split along the \ncolumn (axis=1).\nExample\nSplit the 2-D array into three 2-D arrays along columns.\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, \n  11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3, axis=1)\nprint(newarr)\n\nAn alternate solution is using\nhsplit()\nopposite of\nhstack()\nExample\nUse the\nhsplit()\nmethod to split the 2-D array into three 2-D arrays along \n  columns.\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], \n  [10, 11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.hsplit(arr, 3)\nprint(newarr)\n\nNote:\nSimilar alternates to\nvstack()\nand\ndstack()\nare available as\nvsplit()\nand\ndsplit()\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 4)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, \n  10], [11, 12]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, \n  11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, \n  11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3, axis=1)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], \n  [10, 11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.hsplit(arr, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr)",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 3)\nprint(newarr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\n# TODO: Complete this line\n  np.array_split(arr, 4)\nprint(newarr)",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =\n  np.array_split(arr, 4)\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "de068ea3-ce7a-4c58-bd7f-857aec9bc117",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8ebd7cfc-e954-4da9-b7d8-a07164f024db",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "37d555cf-4625-47e0-9f75-f3949b5afc68",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nSplitting Array\n\nSplitting NumPy Arrays\nSplitting?",
      "options": [
        "a list containing three arrays",
        "None of the above.",
        "None of the above.",
        "reverse operation of Joining"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of NumPy\nSplitting Array\n\nSplitting NumPy Arrays\nSplitting is 'reverse operation of Joining'."
    },
    {
      "question": "What is The return value?",
      "options": [
        "reverse operation of Joining",
        "a list containing three arrays",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The return value is 'a list containing three arrays'."
    }
  ],
  "summary": "This tutorial covers NumPySplitting Array concepts and techniques. You'll learn how to use NumPySplitting Array effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPySplitting Array and how to apply it in your projects."
}