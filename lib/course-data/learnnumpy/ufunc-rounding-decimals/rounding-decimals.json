{
  "id": "af296eec-a974-4d4b-a01d-894133ac0b54",
  "title": "Rounding Decimals",
  "slug": "rounding-decimals",
  "metadata": {
    "description": "Learn about Rounding Decimals with clear explanations and practical examples.",
    "keywords": [
      "c",
      "numpy",
      "floor",
      "ceil",
      "example",
      "rounding",
      "import",
      "print",
      "decimal",
      "decimals",
      "elements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "ufunc Rounding Decimals"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Rounding Decimals",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Rounding Decimals\nThere are primarily five ways of rounding off decimals in NumPy:\ntruncation\nfix\nrounding\nfloor\nceil\nTruncation\nRemove the decimals, and return the float number closest to zero. Use the\ntrunc()\nand\nfix()\nfunctions.\nExample\nTruncate elements of following array:\nimport numpy as np\narr = np.trunc([-3.1666, 3.6667])\nprint(arr)\n\nExample\nSame example, using\nfix()\n:\nimport numpy as np\narr = np.fix([-3.1666, 3.6667])\nprint(arr)\n\nRounding\nThe\naround()\nfunction increments preceding digit or decimal by 1 if >=5 else do nothing.\nE.g. round off to 1 decimal point, 3.16666 is 3.2\nExample\nRound off 3.1666 to 2 decimal places:\nimport numpy as np\narr = np.around(3.1666, 2)\nprint(arr)\n\nFloor\nThe floor() function rounds off decimal to nearest lower integer.\nE.g. floor of 3.166 is 3.\nExample\nFloor the elements of following array:\nimport numpy as np\narr = np.floor([-3.1666, \n  3.6667])\nprint(arr)\n\nCeil\nThe ceil() function rounds off decimal to nearest upper integer.\nE.g. ceil of 3.166 is 4.\nExample\nCeil the elements of following array:\nimport numpy as np\narr = np.ceil([-3.1666, \n  3.6667])\nprint(arr)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.trunc([-3.1666, 3.6667])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.fix([-3.1666, 3.6667])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.around(3.1666, 2)\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.floor([-3.1666, \n  3.6667])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.ceil([-3.1666, \n  3.6667])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nprint(arr)",
      "solution": "import numpy as np\narr = np.trunc([-3.1666, 3.6667])\nprint(arr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.fix([-3.1666, 3.6667])\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.fix([-3.1666, 3.6667])\nprint(arr)"
    }
  ],
  "related_topics": [
    {
      "id": "862a4041-3003-4055-a463-63e529f354a5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "848255dc-ed95-43a0-8ee3-19d314ff2e4d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f979d2d3-bc80-4ca5-a641-4d9b08f649e5",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Rounding Decimals\n\nRounding Decimals\nThere?",
      "options": [
        "None of the above.",
        "None of the above.",
        "primarily five ways of rounding off decimals in NumPy:\ntruncation\nfix\nrounding\nfloor\nceil\nTruncation\nRemove the decimals",
        "Not a Rounding Decimals\n\nRounding Decimals\nThere."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Rounding Decimals\n\nRounding Decimals\nThere is 'primarily five ways of rounding off decimals in NumPy:\ntruncation\nfix\nrounding\nfloor\nceil\nTruncation\nRemove the decimals'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Rounding Decimals concepts and techniques. You'll learn how to use Rounding Decimals effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Rounding Decimals and how to apply it in your projects."
}