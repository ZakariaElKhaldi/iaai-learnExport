{
  "id": "7ca346ce-ce9d-4e59-9d90-8adfee3f8824",
  "title": "NumPyArray Indexing",
  "slug": "numpyarray-indexing",
  "metadata": {
    "description": "Learn about NumPyArray Indexing with clear explanations and practical examples.",
    "keywords": [
      "array",
      "element",
      "access",
      "numpy",
      "arrays",
      "example",
      "print",
      "first",
      "second",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Indexing"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nArray Indexing",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Access Array Elements\nArray indexing is the same as accessing an array element.\nYou can access an array element by referring to its index number.\nThe indexes in NumPy arrays start with 0, meaning that the first element  \nhas index 0, and the second has index 1 etc.\nExample\nGet the first element from the following array:\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[0])\n\nExample\nGet the second element from the following array.\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1])\n\nExample\nGet third and fourth elements from the following array and add them.\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[2] + \n  arr[3])\n\nAccess 2-D Arrays\nTo access elements from 2-D arrays we can use comma separated integers representing \nthe \ndimension and the index of the element.\nThink of 2-D arrays like a table with rows and columns, where the dimension \nrepresents the row and the index represents the column.\nExample\nAccess the element on the first row, second column:\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('2nd element on 1st row: ', arr[0, 1])\n\nExample\nAccess the element on the 2nd row, 5th column:\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('5th element on \n  2nd row: ', arr[1, 4])\n\nAccess 3-D Arrays\nTo access elements from 3-D arrays we can use comma separated integers representing \nthe dimensions and the index of the element.\nExample\nAccess the third element of the second array of the first array:\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, \n  9], [10, 11, 12]]])\nprint(arr[0, 1, 2])\n\nExample Explained\narr[0, 1, 2]\nprints the value\n6\n.\nAnd this is why:\nThe first number represents the first dimension, which contains two arrays:\n[[1, 2, 3], [4, 5, 6]]\nand:\n[[7, 8, 9], [10, 11, 12]]\nSince we selected\n0\n, we are left with the first array:\n[[1, 2, 3], [4, 5, 6]]\nThe second number represents the second dimension, which also contains two arrays:\n[1, 2, 3]\nand:\n[4, 5, 6]\nSince we selected\n1\n, we are left with the second array:\n[4, 5, 6]\nThe third number represents the third dimension, which contains three values:\n4\n5\n6\nSince we selected\n2\n, we end up with the third value:\n6\nNegative Indexing\nUse negative indexing to access an array from the end.\nExample\nPrint the last element from the 2nd dim:\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('Last element \n  from \n  2nd dim: ', arr[1, -1])\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[0])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[2] + \n  arr[3])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('2nd element on 1st row: ', arr[0, 1])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('5th element on \n  2nd row: ', arr[1, 4])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, \n  9], [10, 11, 12]]])\nprint(arr[0, 1, 2])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('Last element \n  from \n  2nd dim: ', arr[1, -1])",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nprint(arr[0])",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[0])"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4])\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1])"
    }
  ],
  "related_topics": [
    {
      "id": "9d18add1-7ae1-41a4-a430-f96562e70172",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8f69701d-56bb-4463-a646-85a8cbfb0aa4",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "890b8dc1-c2aa-46c7-be9f-f398e765872d",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nArray Indexing\n\nAccess Array Elements\nArray indexing?",
      "options": [
        "None of the above.",
        "None of the above.",
        "why:\nThe first number represents the first dimension",
        "the same as accessing an array element"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of NumPy\nArray Indexing\n\nAccess Array Elements\nArray indexing is 'the same as accessing an array element'."
    },
    {
      "question": "What is And this?",
      "options": [
        "None of the above.",
        "why:\nThe first number represents the first dimension",
        "the same as accessing an array element",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of And this is 'why:\nThe first number represents the first dimension'."
    }
  ],
  "summary": "This tutorial covers NumPyArray Indexing concepts and techniques. You'll learn how to use NumPyArray Indexing effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyArray Indexing and how to apply it in your projects."
}