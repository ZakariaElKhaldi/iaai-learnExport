{
  "id": "571456d9-86ea-45f9-b402-2519dc903e5c",
  "title": "NumPyArray Reshaping",
  "slug": "numpyarray-reshaping",
  "metadata": {
    "description": "Learn about NumPyArray Reshaping with clear explanations and practical examples.",
    "keywords": [
      "array",
      "elements",
      "reshape",
      "numpy",
      "newarr",
      "dimension",
      "example",
      "arrays",
      "import",
      "print"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Reshape"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nArray Reshaping",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "NumPy\nArray Reshaping\n\nReshaping arrays\nReshaping means changing the shape of an array",
      "content": ".\nThe shape of an array is the number of elements in each dimension.\nBy reshaping we can add or remove dimensions or change number of elements in each dimension.\nReshape From 1-D to 2-D\nExample\nConvert the following 1-D array with 12 elements into a 2-D array.\nThe outermost dimension will have 4 arrays, each with 3 elements:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)\n\nReshape From 1-D to 3-D\nExample\nConvert the following 1-D array with 12 elements into a 3-D array.\nThe outermost dimension will have 2 arrays that contains 3 arrays, each \n  with 2 elements:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(2, 3, 2)\nprint(newarr)\n\nCan We Reshape Into any Shape?\nYes, as long as the elements required for reshaping are equal in both shapes.\nWe can reshape an 8 elements 1D array into 4 elements in 2 rows 2D array but we cannot reshape it \ninto a 3 elements 3 rows 2D array as that would require 3x3 = 9 elements.\nExample\nTry converting 1D array with 8 elements to a 2D array with 3 elements in each dimension (will raise an error):\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(3, 3)\nprint(newarr)\n\nReturns Copy or View?\nExample\nCheck if the returned array is a copy or a view:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint(arr.reshape(2, 4).base)\n\nThe example above returns the original array, so it is a view.\nUnknown Dimension\nYou are allowed to have one \"unknown\" dimension.\nMeaning that you do not have to specify an exact number for one of the \ndimensions in the reshape method.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Pass",
      "content": "-1\nas the value, and NumPy will \ncalculate this number for you.\nExample\nConvert 1D array with 8 elements to 3D array with 2x2 elements:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(2, 2, -1)\nprint(newarr)\n\nNote:",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "We can not pass",
      "content": "-1\nto more than one dimension.\nFlattening the arrays\nFlattening array means converting a multidimensional array into a 1D array.\nWe can use\nreshape(-1)\nto do this.\nExample\nConvert the array into a 1D array:\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nnewarr \n  = arr.reshape(-1)\nprint(newarr)\n\nNote:\nThere are a lot of functions for changing the shapes of arrays in numpy\nflatten\n,\nravel\nand also for rearranging the elements\nrot90\n,\nflip\n,\nfliplr\n,\nflipud\netc. These fall under Intermediate to Advanced section of numpy.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(2, 3, 2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(3, 3)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint(arr.reshape(2, 4).base)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(2, 2, -1)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nnewarr \n  = arr.reshape(-1)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\n  12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(2, 3, 2)\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, \n  12])\nnewarr = arr.reshape(2, 3, 2)\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "bb31ac94-850f-41f2-9c02-8d009c32d5b7",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bfff5a24-aedf-4faa-9ac8-6cd1e6d03b53",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4df7ecfe-0db3-42f4-aa82-6303f44a5b33",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nArray Reshaping\n\nReshaping arrays\nReshaping?",
      "options": [
        "None of the above.",
        "changing the shape of an array",
        "the number of elements in each dimension",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of NumPy\nArray Reshaping\n\nReshaping arrays\nReshaping is 'changing the shape of an array'."
    },
    {
      "question": "What is The shape of an array?",
      "options": [
        "the number of elements in each dimension",
        "changing the shape of an array",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The shape of an array is 'the number of elements in each dimension'."
    }
  ],
  "summary": "This tutorial covers NumPyArray Reshaping concepts and techniques. You'll learn how to use NumPyArray Reshaping effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyArray Reshaping and how to apply it in your projects."
}