{
  "id": "35825f61-b024-4af2-898d-a850facfccf7",
  "title": "Simple Arithmetic",
  "slug": "simple-arithmetic",
  "metadata": {
    "description": "Learn about Simple Arithmetic with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "return",
      "values",
      "newarr",
      "example",
      "numpy",
      "import",
      "print",
      "arithmetic",
      "function"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "ufunc Simple Arithmetic"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Simple Arithmetic",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Simple Arithmetic\nYou could use arithmetic operators\n+\n-\n*\n/\ndirectly between NumPy arrays, but this section discusses an extension of the same where we have \nfunctions that can take any array-like objects e.g. lists, tuples etc. and perform arithmetic\nconditionally\n.\nArithmetic Conditionally:\nmeans that we can define conditions where the arithmetic operation should happen.\nAll of the discussed arithmetic functions take a\nwhere\nparameter in which we can specify that condition.\nAddition\nThe\nadd()\nfunction sums the content of two arrays, and \nreturn the results in a new array.\nExample\nAdd the values in arr1 to the values in arr2:\nimport numpy as np\narr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)\n\nThe example above will return [30 32 34 36 38 40] which is the sums of 10+20, 11+21, 12+22 etc.\nSubtraction\nThe\nsubtract()\nfunction subtracts the values from one array with the values from \nanother array,\nand return the results in a new array.\nExample\nSubtract the values in arr2 from the values in arr1:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)\n\nThe example above will return [-10  -1   8  17  26  35] which is the result of 10-20, 20-21, 30-22 etc.\nMultiplication\nThe\nmultiply()\nfunction multiplies the values from one array with the values from \nanother array,\nand return the results in a new array.\nExample\nMultiply the values in arr1 with the values in arr2:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.multiply(arr1, arr2)\nprint(newarr)\n\nThe example above will return [200  420  660  920 1200 1500] which is the result of 10*20, 20*21, 30*22 etc.\nDivision\nThe\ndivide()\nfunction divides the values from one array with the values from another array,\nand return the results in a new array.\nExample\nDivide the values in arr1 with the values in arr2:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, \n  5, 10, 8, 2, 33])\nnewarr = np.divide(arr1, arr2)\nprint(newarr)\n\nThe example above will return [3.33333333  4.          3.          5.         25.          1.81818182] which is the result of 10/3, 20/5, 30/10 etc.\nPower\nThe\npower()\nfunction rises the values from the first array to the power of the values of the second array,\nand return the results in a new array.\nExample\nRaise the valules in arr1 to the power of values in arr2:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, \n  5, 6, 8, 2, 33])\nnewarr = np.power(arr1, arr2)\nprint(newarr)\n\nThe example above will return [1000       3200000     729000000 6553600000000          2500\n             0] which is the result of 10*10*10, 20*20*20*20*20, 30*30*30*30*30*30 etc.\nRemainder\nBoth the\nmod()\nand the\nremainder()\nfunctions\nreturn the remainder of the values in the first array corresponding to the values in the second array, and return the results in a new array.\nExample\nReturn the remainders:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.mod(arr1, arr2)\nprint(newarr)\n\nThe example above will return [1  6  3  0  0 27] which is the remainders when you divide 10 with 3 (10%3), 20 with 7 (20%7) 30 with 9 (30%9) etc.\nYou get the same result when using the\nremainder()\nfunction:\nExample\nReturn the remainders:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.remainder(arr1, arr2)\nprint(newarr)\n\nQuotient and Mod\nThe\ndivmod()\nfunction\nreturn both the quotient and the mod. The return value is two arrays, the \nfirst array contains the quotient and second array contains the mod.\nExample\nReturn the quotient and mod:\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.divmod(arr1, arr2)\nprint(newarr)\n\nThe example above will return:\n(array([3,  2,  3,  5, 25,  1]),\n array([1,  6,  3,  0,  0, 27]))\nThe first array represents the quotients, \n  (the integer value when you divide 10 with 3, 20 with 7, 30 with 9 etc.\nThe second array represents the \n  remainders of the same divisions.\nAbsolute Values\nBoth the\nabsolute()\nand the\nabs()\nfunctions\n do the same absolute operation element-wise but we should use\nabsolute()\nto avoid confusion with python's inbuilt\nmath.abs()\nExample\nReturn the quotient and mod:\nimport numpy as np\narr = np.array([-1, -2, 1, 2, 3, -4])\nnewarr = np.absolute(arr)\nprint(newarr)\n\nThe example above will return [1 2 1 2 3 4].\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.multiply(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, \n  5, 10, 8, 2, 33])\nnewarr = np.divide(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, \n  5, 6, 8, 2, 33])\nnewarr = np.power(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.mod(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.remainder(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.divmod(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "import numpy as np\narr = np.array([-1, -2, 1, 2, 3, -4])\nnewarr = np.absolute(arr)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\n# TODO: Complete this line",
      "solution": "import numpy as np\narr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\n# TODO: Complete this line\nprint(newarr)",
      "solution": "import numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = \n  np.array([20, \n  21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "1bc8822f-15a4-4afb-9eed-269546a9460e",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "da2842d1-1653-41fb-a83e-edb254deaf42",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4ea33260-3a3b-4a83-b7db-e31406fedc7d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "the sums of 10+20",
        "Not a which.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of which is 'the sums of 10+20'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Simple Arithmetic concepts and techniques. You'll learn how to use Simple Arithmetic effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Simple Arithmetic and how to apply it in your projects."
}