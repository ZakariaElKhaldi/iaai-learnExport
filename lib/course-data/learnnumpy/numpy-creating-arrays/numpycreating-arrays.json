{
  "id": "6f38c26f-1f33-42a8-8c8c-408ca458dcce",
  "title": "NumPyCreating Arrays",
  "slug": "numpycreating-arrays",
  "metadata": {
    "description": "Learn about NumPyCreating Arrays with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "arrays",
      "numpy",
      "print",
      "create",
      "dimensions",
      "example",
      "import",
      "ndarray",
      "elements"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Creating Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nCreating Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Create a NumPy ndarray Object\nNumPy is used to work with arrays. The array object in NumPy is called\nndarray\n.\nWe can create a NumPy\nndarray\nobject by using the\narray()\nfunction.\nExample\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)\nprint(type(arr))\n\ntype():\nThis built-in Python function tells us the type of the object passed to it. Like in above code \n  it shows that\narr\nis\nnumpy.ndarray\ntype.\nTo create an\nndarray\n,\nwe can pass a list, tuple or any array-like object into the\narray()\nmethod, and it will be converted into an\nndarray\n:\nExample\nUse a tuple to create a NumPy array:\nimport numpy as np\narr = np.array((1, 2, 3, 4, 5))\nprint(arr)\n\nDimensions in Arrays\nA dimension in arrays is one level of array depth (nested arrays).\nnested array:\nare arrays that have arrays as their elements.\n0-D Arrays\n0-D arrays, \nor Scalars, are the elements in an array. Each value in an array is a 0-D array.\nExample\nCreate a 0-D array with value 42\nimport numpy as np\narr = np.array(42)\nprint(arr)\n\n1-D Arrays\nAn array that has 0-D arrays as its elements is called uni-dimensional or 1-D array.\nThese are the most common and basic arrays.\nExample\nCreate a 1-D array containing the values 1,2,3,4,5:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)\n\n2-D Arrays\nAn array that has 1-D arrays as its elements is called a 2-D array.\nThese are often used to represent matrix or 2nd order tensors.\nNumPy has a whole sub module dedicated towards matrix operations called\nnumpy.mat\nExample\nCreate a 2-D array containing two arrays with the values 1,2,3 and 4,5,6:\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr)\n\n3-D arrays\nAn array that has 2-D arrays (matrices) as its elements is called 3-D array.\nThese are often used to represent a 3rd order tensor.\nExample\nCreate a 3-D array with two 2-D arrays, both containing two arrays with the \nvalues 1,2,3 and 4,5,6:\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(arr)\n\nCheck Number of Dimensions?\nNumPy Arrays provides the\nndim\nattribute that returns an integer that tells us how many dimensions the array have.\nExample\nCheck how many dimensions the arrays have:\nimport numpy as np\na = np.array(42)\nb = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)\n\nHigher Dimensional Arrays\nAn array can have any number of dimensions.\nWhen the array is created, you can define the number of dimensions by using \nthe\nndmin\nargument.\nExample\nCreate an array with 5 dimensions and verify that it has 5 dimensions:\nimport numpy as np\narr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint('number of dimensions :', arr.ndim)\n\nIn this array the innermost dimension (5th dim) has 4 elements,\nthe 4th dim has 1 element that is the vector,\nthe 3rd dim has 1 element that is the matrix with the vector,\nthe 2nd dim has 1 element that is 3D array and 1st dim has 1 element that is a 4D array.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)\nprint(type(arr))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array((1, 2, 3, 4, 5))\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array(42)\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(arr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "import numpy as np\na = np.array(42)\nb = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim)\nprint(b.ndim)\nprint(c.ndim)\nprint(d.ndim)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint('number of dimensions :', arr.ndim)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5])\n# TODO: Complete this line\nprint(type(arr))",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)\nprint(type(arr))"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nprint(arr)",
      "solution": "import numpy as np\narr = np.array((1, 2, 3, 4, 5))\nprint(arr)"
    }
  ],
  "related_topics": [
    {
      "id": "25a8cb84-1ee0-4451-a77e-b111ee28ce5e",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bac4a3ae-7f48-4328-a191-70196ab393df",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "713bebf0-4390-4f65-be26-c8b130286be8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nCreating Arrays\n\nCreate a NumPy ndarray Object\nNumPy?",
      "options": [
        "None of the above.",
        "called\nndarray",
        "None of the above.",
        "used to work with arrays"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of NumPy\nCreating Arrays\n\nCreate a NumPy ndarray Object\nNumPy is 'used to work with arrays'."
    },
    {
      "question": "What is The array object in NumPy?",
      "options": [
        "used to work with arrays",
        "called\nndarray",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The array object in NumPy is 'called\nndarray'."
    }
  ],
  "summary": "This tutorial covers NumPyCreating Arrays concepts and techniques. You'll learn how to use NumPyCreating Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyCreating Arrays and how to apply it in your projects."
}