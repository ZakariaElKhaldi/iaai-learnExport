{
  "id": "53639d0d-337d-49c4-95cb-397ee50e88bb",
  "title": "NumPySearching Arrays",
  "slug": "numpysearching-arrays",
  "metadata": {
    "description": "Learn about NumPySearching Arrays with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "search",
      "example",
      "value",
      "indexes",
      "index",
      "numpy",
      "inserted",
      "find",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Search"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nSearching Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Searching Arrays\nYou can search an array for a certain value, and return the indexes that get a match.\nTo search an array, use the\nwhere()\nmethod.\nExample\nFind the indexes where the value is 4:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 4, 4])\nx =\n  np.where(arr == 4)\nprint(x)\n\nThe example above will return a tuple:\n(array([3, 5, 6],)\nWhich means that the value 4 is present at index 3, 5, and 6.\nExample\nFind the indexes where the values are even:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =\n  np.where(arr%2 == 0)\nprint(x)\n\nExample\nFind the indexes where the values are odd:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =\n  np.where(arr%2 == 1)\nprint(x)\n\nSearch Sorted\nThere is a method called\nsearchsorted()\nwhich performs a binary search in the array,\nand returns the index where the specified value would be inserted to maintain the \nsearch order.\nThe\nsearchsorted()\nmethod is assumed to be \n  used on sorted arrays.\nExample\nFind the indexes where the value 7 should be inserted:\nimport numpy as np\narr = np.array([6, \n  7, 8, 9])\nx =\n  np.searchsorted(arr, 7)\nprint(x)\n\nExample explained: The number 7 should be inserted on index 1 to remain the sort order.\nThe method starts the search from the left and returns the first index where the number \n7 is no longer larger than the \nSearch From the Right Side\nBy default the left most index is returned, but we can give\nside='right'\nto return the right most index instead.\nExample\nFind the indexes where the value 7 should be inserted, starting from the \nright:\nimport numpy as np\narr = np.array([6, \n  7, 8, 9])\nx =\n  np.searchsorted(arr, 7, side='right')\nprint(x)\n\nExample explained: The number 7 should be inserted on index 2 to remain the sort order.\nThe method starts the search from the right and returns the first index where the number \n7 is no longer less than the \nMultiple Values\nTo search for more than one value, use an array with the specified values.\nExample\nFind the indexes where the values 2, 4, and 6 should be inserted:\nimport numpy as np\narr = np.array([1, \n  3, 5, 7])\nx =\n  np.searchsorted(arr, [2, 4, 6])\nprint(x)\n\nThe return value is an array:\n[1 2 3]\ncontaining the three indexes where 2, 4, 6 would be inserted \nin the original array to maintain the order.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 4, 4])\nx =\n  np.where(arr == 4)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =\n  np.where(arr%2 == 0)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =\n  np.where(arr%2 == 1)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([6, \n  7, 8, 9])\nx =\n  np.searchsorted(arr, 7)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([6, \n  7, 8, 9])\nx =\n  np.searchsorted(arr, 7, side='right')\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy as np\narr = np.array([1, \n  3, 5, 7])\nx =\n  np.searchsorted(arr, [2, 4, 6])\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 4, 4])\nx =\n  np.where(arr == 4)\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 4, 4])\nx =\n  np.where(arr == 4)\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\nx =\n  np.where(arr%2 == 0)\nprint(x)",
      "solution": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =\n  np.where(arr%2 == 0)\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "1b7fe52c-db41-4a20-8f76-f4b65a0848a9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7659175d-0283-46e9-a9c8-74d113ec749f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6ba260be-406a-4d12-a3e2-b9392a2368c9",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Example\nFind the indexes where the value?",
      "options": [
        "None of the above.",
        "4:\nimport numpy as np\narr = np",
        "None of the above.",
        "that the value 4 is present at index 3"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Example\nFind the indexes where the value is '4:\nimport numpy as np\narr = np'."
    },
    {
      "question": "What is Which?",
      "options": [
        "None of the above.",
        "that the value 4 is present at index 3",
        "None of the above.",
        "4:\nimport numpy as np\narr = np"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Which is 'that the value 4 is present at index 3'."
    }
  ],
  "summary": "This tutorial covers NumPySearching Arrays concepts and techniques. You'll learn how to use NumPySearching Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPySearching Arrays and how to apply it in your projects."
}