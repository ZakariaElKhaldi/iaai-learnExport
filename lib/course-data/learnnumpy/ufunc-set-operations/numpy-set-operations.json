{
  "id": "845ed350-531e-47af-9e47-814f2ac909fc",
  "title": "NumPy Set Operations",
  "slug": "numpy-set-operations",
  "metadata": {
    "description": "Learn about NumPy Set Operations with clear explanations and practical examples.",
    "keywords": [
      "array",
      "find",
      "true",
      "numpy",
      "method",
      "newarr",
      "sets",
      "arrays",
      "unique",
      "difference"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "ufunc Set Operations"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy Set Operations",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is a Set\nA set in mathematics is a collection of unique elements.\nSets are used for operations involving frequent intersection, union and difference operations.\nCreate Sets in NumPy\nWe can use NumPy's\nunique()\nmethod to find unique elements from any array.\nE.g. create a set array, but remember that the set arrays should only be 1-D arrays.\nExample\nConvert following array with repeated elements to a set:\nimport numpy as np\narr = np.array([1, 1, 1, 2, 3, 4, 5, 5, 6, 7])\nx = np.unique(arr)\nprint(x)\n\nFinding Union\nTo find the unique values of two arrays, use the\nunion1d()\nmethod.\nExample\nFind union of the following two set arrays:\nimport numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.union1d(arr1, arr2)\nprint(newarr)\n\nFinding Intersection\nTo find only the values that are present in both arrays, use the\nintersect1d()\nmethod.\nExample\nFind intersection of the following two set arrays:\nimport numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.intersect1d(arr1, arr2, assume_unique=True)\nprint(newarr)\n\nNote:\nthe\nintersect1d()\nmethod takes an optional argument\nassume_unique\n,\n   which if set to True can speed up computation. It should always be set to True when dealing with sets.\nFinding Difference\nTo find only the values in the first set that is NOT present in the seconds set, use the\nsetdiff1d()\nmethod.\nExample\nFind the difference of the set1 from set2:\nimport numpy as np\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setdiff1d(set1, set2, assume_unique=True)\nprint(newarr)\n\nNote:\nthe\nsetdiff1d()\nmethod takes an optional argument\nassume_unique\n,\n   which if set to True can speed up computation. It should always be set to True when dealing with sets.\nFinding Symmetric Difference\nTo find only the values that are NOT present in BOTH sets, use the\nsetxor1d()\nmethod.\nExample\nFind the symmetric difference of the set1 and set2:\nimport numpy as np\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setxor1d(set1, set2, assume_unique=True)\nprint(newarr)\n\nNote:\nthe\nsetxor1d()\nmethod takes an optional argument\nassume_unique\n,\n   which if set to True can speed up computation. It should always be set to True when dealing with sets.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([1, 1, 1, 2, 3, 4, 5, 5, 6, 7])\nx = np.unique(arr)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.union1d(arr1, arr2)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.intersect1d(arr1, arr2, assume_unique=True)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setdiff1d(set1, set2, assume_unique=True)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setxor1d(set1, set2, assume_unique=True)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([1, 1, 1, 2, 3, 4, 5, 5, 6, 7])\nx = np.unique(arr)\n# TODO: Complete this line",
      "solution": "import numpy as np\narr = np.array([1, 1, 1, 2, 3, 4, 5, 5, 6, 7])\nx = np.unique(arr)\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\n# TODO: Complete this line\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.union1d(arr1, arr2)\nprint(newarr)",
      "solution": "import numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.union1d(arr1, arr2)\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "c7b4b80a-1f73-41c4-af3b-e49bb4dde94f",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "09dc9ef8-b021-4c29-a3bc-105eb4f08946",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "28ea9a4b-8718-43e7-a108-940057c45d92",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy Set Operations\n\nWhat is a Set\nA set in mathematics?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used for operations involving frequent intersection",
        "a collection of unique elements"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of NumPy Set Operations\n\nWhat is a Set\nA set in mathematics is 'a collection of unique elements'."
    },
    {
      "question": "What is Sets?",
      "options": [
        "None of the above.",
        "used for operations involving frequent intersection",
        "a collection of unique elements",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Sets is 'used for operations involving frequent intersection'."
    }
  ],
  "summary": "This tutorial covers NumPy Set Operations concepts and techniques. You'll learn how to use NumPy Set Operations effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPy Set Operations and how to apply it in your projects."
}