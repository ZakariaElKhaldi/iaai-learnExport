{
  "id": "5cffb724-6212-45a0-be97-cbfaa4f0b9c9",
  "title": "NumPyFilter Array",
  "slug": "numpyfilter-array",
  "metadata": {
    "description": "Learn about NumPyFilter Array with clear explanations and practical examples.",
    "keywords": [
      "array",
      "filter",
      "element",
      "newarr",
      "numpy",
      "true",
      "print",
      "false",
      "example",
      "create"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnNumPy",
    "subcategory": "NumPy Array Filter"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "NumPy\nFilter Array",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Filtering Arrays\nGetting some elements out of an existing array and creating a new array out \nof them is called\nfiltering\n.\nIn NumPy, you filter an array using a\nboolean index list\n.\nA\nboolean index list\nis a list of booleans corresponding to indexes in the array.\nIf the value at an index is\nTrue\nthat element is contained in the filtered array, if the value at that index is\nFalse\nthat element is excluded from the filtered array.\nExample\nCreate an array from the elements on index 0 and 2:\nimport numpy as np\narr = np.array([41, 42, 43, 44])\nx = [True, \n  False, True, False]\nnewarr = arr[x]\nprint(newarr)\n\nThe example above will return\n[41, 43]\n, why?\nBecause the new array contains only the values where the filter array had the value\nTrue\n, in this case, index \n0 and 2.\nCreating the Filter Array\nIn the example above we hard-coded the\nTrue\nand\nFalse\nvalues, but the common use is to create a filter array based on conditions.\nExample\nCreate a filter array that will return only values higher than 42:\nimport numpy as np\narr = np.array([41, 42, 43, 44])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is higher than 42, set \n  the value to True, otherwise False:\nif element > 42:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)\n\nExample\nCreate a filter array that will return only even elements from the original \narray:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is completely divisble \n  by 2, set the value to True, otherwise False\nif element % 2 == 0:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)\n\nCreating Filter Directly From Array\nThe above example is quite a common task in NumPy and NumPy provides a nice way to tackle it.\nWe can directly substitute the array instead of the iterable variable in our condition and it will work just as we expect it to.\nExample\nCreate a filter array that will return only values higher than 42:\nimport numpy as np\narr = np.array([41, 42, 43, 44])\nfilter_arr = arr \n  > 42\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)\n\nExample\nCreate a filter array that will return only even elements from the original \narray:\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nfilter_arr = arr \n  % 2 == 0\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\narr = np.array([41, 42, 43, 44])\nx = [True, \n  False, True, False]\nnewarr = arr[x]\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\narr = np.array([41, 42, 43, 44])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is higher than 42, set \n  the value to True, otherwise False:\nif element > 42:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is completely divisble \n  by 2, set the value to True, otherwise False\nif element % 2 == 0:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy as np\narr = np.array([41, 42, 43, 44])\nfilter_arr = arr \n  > 42\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nfilter_arr = arr \n  % 2 == 0\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([41, 42, 43, 44])\nx = [True, \n  False, True, False]\n# TODO: Complete this line\nprint(newarr)",
      "solution": "import numpy as np\narr = np.array([41, 42, 43, 44])\nx = [True, \n  False, True, False]\nnewarr = arr[x]\nprint(newarr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\narr = np.array([41, 42, 43, 44])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is higher than 42, set \n  the value to True, otherwise False:\nif element > 42:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\n# TODO: Complete this line\nprint(newarr)",
      "solution": "import numpy as np\narr = np.array([41, 42, 43, 44])\n# \n  Create an empty list\nfilter_arr = []\n# go through each element in \n  arr\nfor element in arr:\n# if the element is higher than 42, set \n  the value to True, otherwise False:\nif element > 42:\nfilter_arr.append(True)\nelse:\nfilter_arr.append(False)\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "ebcfdd28-0948-43ff-bb12-a49a8245fbcd",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "23477cdb-1c1e-497e-8585-bfa310c50f1c",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "167f918d-2666-4b8a-983c-6acc9ad0a5f6",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is NumPy\nFilter Array\n\nFiltering Arrays\nGetting some elements out of an existing array and creating a new array out \nof them?",
      "options": [
        "a list of booleans corresponding to indexes in the array",
        "called\nfiltering",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of NumPy\nFilter Array\n\nFiltering Arrays\nGetting some elements out of an existing array and creating a new array out \nof them is 'called\nfiltering'."
    },
    {
      "question": "What is A\nboolean index list?",
      "options": [
        "called\nfiltering",
        "None of the above.",
        "None of the above.",
        "a list of booleans corresponding to indexes in the array"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A\nboolean index list is 'a list of booleans corresponding to indexes in the array'."
    }
  ],
  "summary": "This tutorial covers NumPyFilter Array concepts and techniques. You'll learn how to use NumPyFilter Array effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of NumPyFilter Array and how to apply it in your projects."
}