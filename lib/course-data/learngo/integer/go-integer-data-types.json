{
  "id": "730b0e9b-4514-4fba-9f50-13474bf69075",
  "title": "Go Integer Data Types",
  "slug": "go-integer-data-types",
  "metadata": {
    "description": "Learn about Go Integer Data Types with clear explanations and practical examples.",
    "keywords": [
      "go",
      "type",
      "bits",
      "integers",
      "systems",
      "byte",
      "integer",
      "store",
      "main",
      "value",
      "types"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Integer"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Integer Data Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Go Integer Data Types\n\nGo Integer Data Types\nInteger data types are used to store a whole number without \ndecimals",
      "content": ", like 35, -50, or 1345000.\nThe integer data type has two categories:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Signed integers",
      "content": "- can store both positive and negative values",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Unsigned integers",
      "content": "- can only store non-negative values\nTip:\nThe default type for integer is\nint\n. If you \ndo not specify a type, the type will be\nint\n.\nSigned Integers\nSigned integers, declared with one of the\nint\nkeywords, can store both positive and negative values:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x int = 500\nvar y int = -4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}\n\nGo has five keywords/types of signed integers:\nType\nSize\nRange\nint\nDepends on platform:\n32 bits in 32 bit systems and\n64 bit in \n        64 bit systems\n-2147483648 to 2147483647 in 32 bit systems and\n-9223372036854775808 to 9223372036854775807 in 64 bit systems\nint8\n8 bits/1 byte\n-128 to 127\nint16\n16 bits/2 byte\n-32768 to 32767\nint32\n32 bits/4 byte\n-2147483648 to 2147483647\nint64\n64 bits/8 byte\n-9223372036854775808 to 9223372036854775807\nUnsigned Integers\nUnsigned integers, declared with one of the\nuint\nkeywords, can only store non-negative values:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x uint = 500\nvar y uint = 4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n        y, y)\n}\n\nGo has five keywords/types of unsigned integers:\nType\nSize\nRange\nuint\nDepends on platform:\n32 bits in 32 bit \n        systems and\n64 bit in 64 bit systems\n0 to 4294967295 in 32 bit systems and\n0 to 18446744073709551615 \n        in 64 bit systems\nuint8\n8 bits/1 byte\n0 to 255\nuint16\n16 bits/2 byte\n0 to 65535\nuint32\n32 bits/4 byte\n0 to 4294967295\nuint64\n64 bits/8 byte\n0 to 18446744073709551615\nWhich Integer Type to Use?\nThe type of integer to choose, depends on the value the variable has to store.\nExample\nThis example will result in an error because 1000 is out of range for \n    int8 (which is from -128 to 127):\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x int8 = 1000\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}\nResult:\n./prog.go:5:7: constant 1000 overflows int8\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x int = 500\nvar y int = -4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x uint = 500\nvar y uint = 4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n        y, y)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x int8 = 1000\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x int = 500\n# TODO: Complete this line\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar x int = 500\nvar y int = -4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x uint = 500\nvar y uint = 4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar x uint = 500\nvar y uint = 4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n        y, y)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "e6c0674f-e854-45be-aa20-099142690474",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5d49b797-95d2-4831-bc80-70f69bfb5a1d",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7750dd56-5b18-4a3d-a3ef-a44979dc83b8",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Integer Data Types\n\nGo Integer Data Types\nInteger data types?",
      "options": [
        "None of the above.",
        "int",
        "used to store a whole number without \ndecimals",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Go Integer Data Types\n\nGo Integer Data Types\nInteger data types is 'used to store a whole number without \ndecimals'."
    },
    {
      "question": "What is The default type for integer?",
      "options": [
        "None of the above.",
        "None of the above.",
        "int",
        "used to store a whole number without \ndecimals"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The default type for integer is 'int'."
    }
  ],
  "summary": "This tutorial covers Go Integer Data Types concepts and techniques. You'll learn how to use Go Integer Data Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Integer Data Types and how to apply it in your projects."
}