{
  "id": "ce25a661-fb96-41e7-99e7-2512d8a6aa9c",
  "title": "Go Nested if Statement",
  "slug": "go-nested-if-statement",
  "metadata": {
    "description": "Learn about Go Nested if Statement with clear explanations and practical examples.",
    "keywords": [
      "go",
      "nested",
      "statements",
      "println",
      "statement",
      "code",
      "executed",
      "true",
      "example",
      "main",
      "also"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Nested if"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Nested if Statement",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The Nested if Statement\nYou can have\nif\nstatements inside\nif\nstatements, this is called \na nested if.\nSyntax\nif\ncondition1\n{\n// code to be executed if condition1 is true\nif\ncondition2\n{\n// code to be executed if both condition1 and condition2 \n        are true\n}\n}\nExample\nThis example shows how to use nested\nif\nstatements:\npackage main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt.Println(\"Num is more than 10.\")\nif num > 15 {\nfmt.Println(\"Num is also more than 15.\")\n}\n} else {\nfmt.Println(\"Num is less than 10.\")\n}\n}\nResult:\nNum is more than 10.\nNum is also more than 15.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "if\ncondition1\n{\n// code to be executed if condition1 is true\nif\ncondition2\n{\n// code to be executed if both condition1 and condition2 \n        are true\n}\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt.Println(\"Num is more than 10.\")\nif num > 15 {\nfmt.Println(\"Num is also more than 15.\")\n}\n} else {\nfmt.Println(\"Num is less than 10.\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "if\ncondition1\n{\n// code to be executed if condition1 is true\nif\ncondition2\n{\n// code to be executed if both condition1 and condition2 \n# TODO: Complete this line\n}\n}",
      "solution": "if\ncondition1\n{\n// code to be executed if condition1 is true\nif\ncondition2\n{\n// code to be executed if both condition1 and condition2 \n        are true\n}\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\n# TODO: Complete this line\nfmt.Println(\"Num is more than 10.\")\nif num > 15 {\nfmt.Println(\"Num is also more than 15.\")\n}\n} else {\nfmt.Println(\"Num is less than 10.\")\n}\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt.Println(\"Num is more than 10.\")\nif num > 15 {\nfmt.Println(\"Num is also more than 15.\")\n}\n} else {\nfmt.Println(\"Num is less than 10.\")\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "9d1cd562-13eb-44c7-b0d2-140760ad4f39",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0a3d4e9a-1926-4477-a7b7-141dea8c4aba",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "222d5321-0e1f-4579-9c4b-ad4df9dbe6f3",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is this?",
      "options": [
        "None of the above.",
        "called \na nested if",
        "None of the above.",
        "true\n}\n}\nExample\nThis example shows how to use nested\nif\nstatements:\npackage main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of this is 'called \na nested if'."
    },
    {
      "question": "What is ?",
      "options": [
        "true\n}\n}\nExample\nThis example shows how to use nested\nif\nstatements:\npackage main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt",
        "None of the above.",
        "called \na nested if",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of  is 'true\n}\n}\nExample\nThis example shows how to use nested\nif\nstatements:\npackage main\nimport (\"fmt\")\nfunc main() {\nnum  := 20\nif num >= 10 {\nfmt'."
    }
  ],
  "summary": "This tutorial covers Go Nested if Statement concepts and techniques. You'll learn how to use Go Nested if Statement effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Nested if Statement and how to apply it in your projects."
}