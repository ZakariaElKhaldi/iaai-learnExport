{
  "id": "264b6702-721a-443e-9cfe-ea1e3651d8b1",
  "title": "Go Function Returns",
  "slug": "go-function-returns",
  "metadata": {
    "description": "Learn about Go Function Returns with clear explanations and practical examples.",
    "keywords": [
      "c",
      "return",
      "result",
      "myfunction",
      "func",
      "main",
      "value",
      "string",
      "example",
      "package",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Function Returns"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Function Returns",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Return Values\nIf you want the function to return a value, you need to define the data type of the return value \n(such as\nint\n,\nstring\n, etc), and \nalso use the\nreturn\nkeyword inside the function:\nSyntax\nfunc\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n)\ntype\n{\n// code to be executed\nreturn\noutput\n}\nFunction Return Example\nExample\nHere,\nmyFunction()\nreceives two integers (\nx\nand\ny\n) and returns their addition (\nx + y\n) as integer \n  (\nint\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y int) int {\nreturn x + y\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}\nResult:\n3\n\nNamed Return Values\nIn Go, you can name the return values of a function.\nExample\nHere, we name the return value as\nresult\n(of type\nint\n), and return the value with a naked return (means that we use the\nreturn\nstatement without specifying \n  the variable name):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}\nResult:\n3\n\nThe example above can also be written like this. Here, the return statement specifies the variable name:\nExample\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn result\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}\nStore the Return Value in a Variable\nYou can also store the return value in a variable, like this:\nExample\nHere, we store the return value in a variable called\ntotal\n:\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn\n}\nfunc main() {\ntotal := \n      myFunction(1, 2)\nfmt.Println(total)\n}\n\nMultiple Return Values\nGo functions can also return multiple values.\nExample\nHere,\nmyFunction()\nreturns one integer (\nresult\n) and one string (\ntxt1\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult =  x + x\ntxt1 =  y + \" World!\"\nreturn\n}\nfunc main() {\nfmt.Println(myFunction(5, \"Hello\"))\n}\nResult:\n10 Hello World!\n\nExample\nHere, we store the two return values into two variables (\na\nand\nb\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\na, b := myFunction(5, \"Hello\")\nfmt.Println(a, b)\n}\nResult:\n10 Hello World!\n\nIf we (for some reason) do not want to use some of the returned values, we can add an underscore (\n_\n), to omit this value.\nExample\nHere, we want to omit the first returned value (\nresult\n- which is stored in variable\na\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\n_, b := myFunction(5, \"Hello\")\nfmt.Println(b)\n}\nResult:\nHello World!\n\nExample\nHere, we want to omit the second returned value (\ntxt1\n- which is stored in variable\nb\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\na, _ := myFunction(5, \"Hello\")\nfmt.Println(a)\n}\nResult:\n10\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "func\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n)\ntype\n{\n// code to be executed\nreturn\noutput\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) int {\nreturn x + y\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn result\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) (result int) {\nresult =  x + y\nreturn\n}\nfunc main() {\ntotal := \n      myFunction(1, 2)\nfmt.Println(total)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult =  x + x\ntxt1 =  y + \" World!\"\nreturn\n}\nfunc main() {\nfmt.Println(myFunction(5, \"Hello\"))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\na, b := myFunction(5, \"Hello\")\nfmt.Println(a, b)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\n_, b := myFunction(5, \"Hello\")\nfmt.Println(b)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\nfunc main() {\na, _ := myFunction(5, \"Hello\")\nfmt.Println(a)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "func\nFunctionName\n(\nparam1\ntype\n# TODO: Complete this line\nparam2\ntype\n)\ntype\n{\n// code to be executed\nreturn\noutput\n}",
      "solution": "func\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n)\ntype\n{\n// code to be executed\nreturn\noutput\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) int {\nreturn x + y\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n# TODO: Complete this line",
      "solution": "package main\nimport (\"fmt\")\nfunc myFunction(x int, y int) int {\nreturn x + y\n}\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}"
    }
  ],
  "related_topics": [
    {
      "id": "0127d758-a7c6-4c15-ac7e-395d3f985b09",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7838650e-badc-40cf-a0dd-c907a44f4a98",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "dee25359-075b-4363-b257-a6cfd3b20c1e",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "stored in variable\na\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int",
        "Not a which.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of which is 'stored in variable\na\n):\npackage main\nimport (\"fmt\")\nfunc myFunction(x int'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Go Function Returns concepts and techniques. You'll learn how to use Go Function Returns effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Function Returns and how to apply it in your projects."
}