{
  "id": "25477314-314b-4336-8c45-655c8b935f8d",
  "title": "Go Functions",
  "slug": "go-functions",
  "metadata": {
    "description": "Learn about Go Functions with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "executed",
      "func",
      "name",
      "mymessage",
      "main",
      "call",
      "create",
      "functions",
      "code"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Create/Call Function"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Functions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A function is a block of statements that can be used repeatedly in a program.\nA function will not execute automatically when a page loads.\nA function will be executed by a call to the function.\nCreate a Function\nTo create (often referred to as declare) a function, do the following:\nUse the\nfunc\nkeyword.\nSpecify a name for the function, followed by parentheses ().\nFinally, add code that defines what the function should do, inside curly \nbraces {}.\nSyntax\nfunc\nFunctionName\n() {\n// code to be executed\n}\nCall a Function\nFunctions are not executed immediately. They are \"saved for later use\", and will be executed when they are called.\nIn the example below, we create a function named \"myMessage()\". The opening \ncurly brace ( { ) indicates the beginning of the function code, and the closing \ncurly brace ( } ) indicates the end of the function. The function outputs \"I \njust got executed!\". To call the function, just write its name followed by two \nparentheses ():\nExample\npackage main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\nfunc main() {\nmyMessage() // call the function\n}\nResult:\nI just got executed!\n\nA function can be called multiple times.\nExample\npackage main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\nfunc main() {\nmyMessage()\nmyMessage()\nmyMessage()\n}\nResult:\nI just got executed!\nI just got executed!\nI just got executed!\n\nNaming Rules for Go Functions\nA function name must start with a letter\nA function name can only contain alpha-numeric characters and underscores (\nA-z\n,\n0-9\n, and\n_\n)\nFunction names are case-sensitive\nA function name cannot contain spaces\nIf the function name consists of multiple words, techniques introduced for\nmulti-word variable naming\ncan be used\nTip:\nGive the function a name that reflects what the \nfunction does!\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate a function named myFunction and call it inside main().\npackage main   \nimport (\"fmt\")\nfunc\n{\n  fmt.Println(\"I just got executed!\")\n}\nfunc main() {\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "func\nFunctionName\n() {\n// code to be executed\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\nfunc main() {\nmyMessage() // call the function\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\nfunc main() {\nmyMessage()\nmyMessage()\nmyMessage()\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "func\nFunctionName\n() {\n# TODO: Complete this line\n}",
      "solution": "func\nFunctionName\n() {\n// code to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n# TODO: Complete this line\nfunc main() {\nmyMessage() // call the function\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\nfunc main() {\nmyMessage() // call the function\n}"
    }
  ],
  "related_topics": [
    {
      "id": "5050d3d7-3635-4d6b-9019-70ad877f1dd9",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "fd0cc876-8ea9-4a0c-b043-c61b7cf37cb1",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "0bb715b0-fcdb-4ba3-be7b-69a8dc7be0c6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Functions\n\nA function?",
      "options": [
        "not executed immediately",
        "None of the above.",
        "None of the above.",
        "a block of statements that can be used repeatedly in a program"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Go Functions\n\nA function is 'a block of statements that can be used repeatedly in a program'."
    },
    {
      "question": "What is Call a Function\nFunctions?",
      "options": [
        "a block of statements that can be used repeatedly in a program",
        "None of the above.",
        "None of the above.",
        "not executed immediately"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Call a Function\nFunctions is 'not executed immediately'."
    }
  ],
  "summary": "This tutorial covers Go Functions concepts and techniques. You'll learn how to use Go Functions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Functions and how to apply it in your projects."
}