{
  "id": "5e599921-9908-40ab-8706-de9e30898293",
  "title": "Go Maps",
  "slug": "go-maps",
  "metadata": {
    "description": "Learn about Go Maps with clear explanations and practical examples.",
    "keywords": [
      "go",
      "string",
      "main",
      "brand",
      "ford",
      "year",
      "model",
      "example",
      "mustang",
      "maps",
      "println"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Maps"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Maps",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Go Maps\n\nGo Maps\nMaps are used to store data values in key",
      "content": ":value pairs.\nEach element in a map is a key:value pair.\nA map is an unordered and changeable collection that does not allow duplicates.\nThe length of a map is the number of its elements. You can find it using the\nlen()\nfunction.\nThe default value of a map is nil.\nMaps hold references to an underlying hash table.\nGo has multiple ways for creating maps.\nCreate Maps Using\nvar\nand\n:=",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Syntax\nvar\na",
      "content": "= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}\nb\n:= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}\nExample\nThis example shows how to create maps in Go. Notice the order in the code and in the output\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := map[string]int{\"Oslo\": 1, \"Bergen\": 2, \"Trondheim\": 3, \"Stavanger\": 4}\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}\nResult:\na\u00a0\u00a0\u00a0map[brand:Ford model:Mustang year:1964]\nb\u00a0\u00a0\u00a0map[Bergen:2 Oslo:1 Stavanger:4 Trondheim:3]\n\nNote:\nThe order of the map elements defined in the code is different from the way that they are stored. The data are stored in a way to have efficient data retrieval from the map.\nCreate Maps Using the\nmake()\nFunction:",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Syntax\nvar\na",
      "content": "= make(map[KeyType]ValueType)\nb\n:= make(map[KeyType]ValueType)\nExample\nThis example shows how to create maps in Go using the\nmake()\nfunction.\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\n// The map is empty now\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n// a is no longer empty\nb := make(map[string]int)\nb[\"Oslo\"] = 1\nb[\"Bergen\"] = 2\nb[\"Trondheim\"] = 3\nb[\"Stavanger\"] = 4\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}\nResult:\na\u00a0\u00a0\u00a0map[brand:Ford model:Mustang year:1964]\nb\u00a0\u00a0\u00a0map[Bergen:2 Oslo:1 Stavanger:4 Trondheim:3]\n\nCreate an Empty Map\nThere are two ways to create an empty map. One is by using the\nmake()\nfunction and the other is by using the following syntax.\nSyntax\nvar\na\nmap[KeyType]ValueType\nNote:\nThe\nmake()\nfunction is the right way to create an empty map. If you make an empty map in a different way and write to it, it will causes a runtime panic.\nExample\nThis example shows the difference between declaring an empty map using with the\nmake()\nfunction and without it.\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\nvar b map[string]string\nfmt.Println(a == nil)\nfmt.Println(b == nil)\n}\nResult:\nfalse\ntrue\n\nAllowed Key Types\nThe map key can be of any data type for which the equality operator (\n==\n) is defined. These include:\nBooleans\nNumbers\nStrings\nArrays\nPointers\nStructs\nInterfaces (as long as the dynamic type supports equality)\nInvalid key types are:\nSlices\nMaps\nFunctions\nThese types are invalid because the equality operator (\n==\n) is not defined for them.\nAllowed Value Types\nThe map values can be\nany\ntype.\nAccess Map Elements\nYou can access map elements by:",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Syntax\nvalue",
      "content": "=\nmap_name\n[key]\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Printf(a[\"brand\"])\n}\nResult:\nFord\n\nUpdate and Add Map Elements\nUpdating or adding an elements are done by:\nSyntax\nmap_name\n[key] = value\nExample\nThis example shows how to update and add elements to a map.\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Println(a)\na[\"year\"] = \"1970\"\n// Updating an element\na[\"color\"] = \"red\"\n// Adding an element\nfmt.Println(a)\n}\nResult:\nmap[brand:Ford model:Mustang year:1964]\nmap[brand:Ford color:red model:Mustang year:1970]\n\nRemove Element from Map\nRemoving elements is done using the\ndelete()\nfunction.\nSyntax\ndelete(\nmap_name\n, key)\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Println(a)\ndelete(a,\"year\")\nfmt.Println(a)\n}\nResult:\nmap[brand:Ford model:Mustang year:1964]\nmap[brand:Ford model:Mustang]\n\nCheck For Specific Elements in a Map\nYou can check if a certain key exists in a map using:\nSyntax\nval\n,\nok\n:=\nmap_name\n[key]\nIf you only want to check the existence of a certain key, you can use the blank identifier (\n_\n) in place of val.\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\", \"day\":\"\"}\nval1, ok1 := a[\"brand\"]\n// Checking for existing key and its value\nval2, ok2 := a[\"color\"]\n// Checking for non-existing key and its value\nval3, ok3 := a[\"day\"]\n// Checking for existing key and its value\n_, ok4 := a[\"model\"]\n// Only checking for existing key and not its value\nfmt.Println(val1, ok1)\nfmt.Println(val2, ok2)\nfmt.Println(val3, ok3)\nfmt.Println(ok4)\n}\nResult:\nFord true\nfalse\ntrue\ntrue\n\nExample Explained\nIn this example, we checked for existence of different keys in the map.\nThe key \"\ncolor\n\" does not exist in the map. So the value is an empty string ('').\nThe\nok2\nvariable is used to find out if the key exist or not. Because we would have got the same value if the value of the \"color\" key was empty. This is the case for\nval3\n.\nMaps Are References\nMaps are references to hash tables.\nIf two map variables refer to the same hash table, changing the content of one variable affect the content of the other.\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := a\nfmt.Println(a)\nfmt.Println(b)\nb[\"year\"] = \"1970\"\nfmt.Println(\"After change to b:\")\nfmt.Println(a)\nfmt.Println(b)\n}\nResult:\nmap[brand:Ford model:Mustang year:1964]\nmap[brand:Ford model:Mustang \n    year:1964]\nAfter change to b:\nmap[brand:Ford model:Mustang year:1970]\nmap[brand:Ford model:Mustang year:1970]\n\nIterate Over Maps\nYou can use\nrange\nto iterate over maps.\nExample\nThis example shows how to iterate over the elements in a map. Note the order of the elements in the output.\npackage main\nimport (\"fmt\")\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nfor k, v := range a {\nfmt.Printf(\"%v : %v, \", k, v)\n}\n}\nResult:\ntwo : 2, three : 3, four : 4, one : 1,\n\nIterate Over Maps in a Specific Order\nMaps are unordered data structures. If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order.\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nvar b []string\n// defining the order\nb = append(b, \"one\", \"two\", \"three\", \"four\")\nfor k, v := range a {\n// loop with no order\nfmt.Printf(\"%v : %v, \", k, v)\n}\nfmt.Println()\nfor _, element := range b {\n// loop with the defined order\nfmt.Printf(\"%v : %v, \", element, a[element])\n}\n}\nResult:\ntwo : 2, three : 3, four : 4, one : 1,\none : 1, two : 2, three : 3, four : 4,\n\n\u2605\n+1",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 6,
      "code": "var\na\n= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}\nb\n:= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := map[string]int{\"Oslo\": 1, \"Bergen\": 2, \"Trondheim\": 3, \"Stavanger\": 4}\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 8,
      "code": "var\na\n= make(map[KeyType]ValueType)\nb\n:= make(map[KeyType]ValueType)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\n// The map is empty now\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n// a is no longer empty\nb := make(map[string]int)\nb[\"Oslo\"] = 1\nb[\"Bergen\"] = 2\nb[\"Trondheim\"] = 3\nb[\"Stavanger\"] = 4\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 10,
      "code": "var\na\nmap[KeyType]ValueType",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\nvar b map[string]string\nfmt.Println(a == nil)\nfmt.Println(b == nil)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 12,
      "code": "value\n=\nmap_name\n[key]",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Printf(a[\"brand\"])\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 14,
      "code": "map_name\n[key] = value",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Println(a)\na[\"year\"] = \"1970\"\n// Updating an element\na[\"color\"] = \"red\"\n// Adding an element\nfmt.Println(a)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 16,
      "code": "delete(\nmap_name\n, key)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\nfmt.Println(a)\ndelete(a,\"year\")\nfmt.Println(a)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 18,
      "code": "val\n,\nok\n:=\nmap_name\n[key]",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\", \"day\":\"\"}\nval1, ok1 := a[\"brand\"]\n// Checking for existing key and its value\nval2, ok2 := a[\"color\"]\n// Checking for non-existing key and its value\nval3, ok3 := a[\"day\"]\n// Checking for existing key and its value\n_, ok4 := a[\"model\"]\n// Only checking for existing key and not its value\nfmt.Println(val1, ok1)\nfmt.Println(val2, ok2)\nfmt.Println(val3, ok3)\nfmt.Println(ok4)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := a\nfmt.Println(a)\nfmt.Println(b)\nb[\"year\"] = \"1970\"\nfmt.Println(\"After change to b:\")\nfmt.Println(a)\nfmt.Println(b)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nfor k, v := range a {\nfmt.Printf(\"%v : %v, \", k, v)\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nvar b []string\n// defining the order\nb = append(b, \"one\", \"two\", \"three\", \"four\")\nfor k, v := range a {\n// loop with no order\nfmt.Printf(\"%v : %v, \", k, v)\n}\nfmt.Println()\nfor _, element := range b {\n// loop with the defined order\nfmt.Printf(\"%v : %v, \", element, a[element])\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var\na\n= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}\nb\n:= map[KeyType]ValueType{\n# TODO: Complete this line\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}",
      "solution": "var\na\n= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}\nb\n:= map[KeyType]ValueType{\nkey1\n:\nvalue1\n,\nkey2\n:\nvalue2\n,...}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\n# TODO: Complete this line\nb := map[string]int{\"Oslo\": 1, \"Bergen\": 2, \"Trondheim\": 3, \"Stavanger\": 4}\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := map[string]int{\"Oslo\": 1, \"Bergen\": 2, \"Trondheim\": 3, \"Stavanger\": 4}\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "bedb6cd9-5140-4f25-9fe1-091c0d3295a9",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "46833a80-03a1-4b22-9015-67a38ecd7916",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fe8875ad-62a7-4db2-8efd-71577594350d",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Maps\n\nGo Maps\nMaps?",
      "options": [
        "used to store data values in key:value pairs",
        "None of the above.",
        "None of the above.",
        "a key:value pair"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Go Maps\n\nGo Maps\nMaps is 'used to store data values in key:value pairs'."
    },
    {
      "question": "What is Each element in a map?",
      "options": [
        "used to store data values in key:value pairs",
        "a key:value pair",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Each element in a map is 'a key:value pair'."
    }
  ],
  "summary": "This tutorial covers Go Maps concepts and techniques. You'll learn how to use Go Maps effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Maps and how to apply it in your projects."
}