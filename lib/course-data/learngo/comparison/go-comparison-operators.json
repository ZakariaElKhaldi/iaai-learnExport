{
  "id": "e533fc64-bc58-4d71-a0a9-f5fd6d4f8d39",
  "title": "Go Comparison Operators",
  "slug": "go-comparison-operators",
  "metadata": {
    "description": "Learn about Go Comparison Operators with clear explanations and practical examples.",
    "keywords": [
      "c",
      "comparison",
      "operators",
      "greater",
      "equal",
      "example",
      "true",
      "operator",
      "main",
      "less",
      "used"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Comparison"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Comparison Operators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Go Comparison Operators\n\nComparison Operators\nComparison operators are used to compare two values",
      "content": ".\nNote:\nThe return value of a comparison is either true (\n1\n) or false (\n0\n).\nIn the following example, we use the\ngreater than\noperator (\n>\n) to find out if 5 is greater than 3:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x = 5\nvar y = 3\nfmt.Println(x>y) // returns 1 (true) because 5 is greater than 3\n}\n\nA list of all comparison operators:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Try it",
      "content": "==\nEqual to\nx == y\nTry it \u00bb\n!=\nNot equal\nx != y\nTry it \u00bb\n>\nGreater than\nx > y\nTry it \u00bb\n<\nLess than\nx < y\nTry it \u00bb\n>=\nGreater than or equal to\nx >= y\nTry it \u00bb\n<=\nLess than or equal to\nx <= y\nTry it \u00bb\nYou will learn more about comparison operators and how to use them in the\nGo Conditions\nchapter.\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x = 5\nvar y = 3\nfmt.Println(x>y) // returns 1 (true) because 5 is greater than 3\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x = 5\nvar y = 3\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar x = 5\nvar y = 3\nfmt.Println(x>y) // returns 1 (true) because 5 is greater than 3\n}"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ec6fb17f-c7e4-4d06-8abb-d0a348300dc4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3990e635-396b-440a-8083-eee09aed94eb",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "922adcc9-089c-4f2a-b0a1-6162708842f8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Comparison Operators\n\nComparison Operators\nComparison operators?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to compare two values",
        "either true (\n1\n) or false (\n0\n)"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Go Comparison Operators\n\nComparison Operators\nComparison operators is 'used to compare two values'."
    },
    {
      "question": "What is The return value of a comparison?",
      "options": [
        "either true (\n1\n) or false (\n0\n)",
        "used to compare two values",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The return value of a comparison is 'either true (\n1\n) or false (\n0\n)'."
    }
  ],
  "summary": "This tutorial covers Go Comparison Operators concepts and techniques. You'll learn how to use Go Comparison Operators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Comparison Operators and how to apply it in your projects."
}