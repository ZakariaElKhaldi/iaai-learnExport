{
  "id": "fddadb17-0fcd-40a5-a59d-6663abd871e5",
  "title": "Go Slices",
  "slug": "go-slices",
  "metadata": {
    "description": "Learn about Go Slices with clear explanations and practical examples.",
    "keywords": [
      "c",
      "slice",
      "length",
      "capacity",
      "myslice",
      "create",
      "array",
      "printf",
      "slices",
      "example",
      "make"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Slices"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Slices",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Slices\nSlices are similar to arrays, but are more powerful and flexible.\nLike arrays, slices are also used to store multiple values of the same type in a single variable.\nHowever, unlike arrays, the length of a slice can grow and shrink as you see fit.\nIn Go, there are several ways to create a slice:\nUsing the []\ndatatype\n{\nvalues\n} format\nCreate a slice from an array\nUsing the make() function\nCreate a Slice With []\ndatatype\n{\nvalues\n}\nSyntax\nslice_name\n:= []\ndatatype\n{\nvalues\n}\nA common way of declaring a slice is like this:\nmyslice := []int{}\nThe code above declares an empty slice of 0 length and 0 capacity.\nTo initialize the slice during declaration, use this:\nmyslice := []int{1,2,3}\nThe code above declares a slice of integers of length 3 and also the capacity of \n3.\nIn Go, there are two functions that can be used to return the length and \ncapacity of a slice:\nlen()\nfunction - returns the length \n  of the slice (the number of elements in the slice)\ncap()\nfunction - returns the capacity of \n  the slice (the number of elements the slice can grow \n  or shrink to)\nExample\nThis example shows how to create slices using the []\ndatatype\n{\nvalues\n} format:\npackage main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{}\nfmt.Println(len(myslice1))\nfmt.Println(cap(myslice1))\nfmt.Println(myslice1)\nmyslice2 := []string{\"Go\", \"Slices\", \"Are\", \"Powerful\"}\nfmt.Println(len(myslice2))\nfmt.Println(cap(myslice2))\nfmt.Println(myslice2)\n}\nResult:\n0\n0\n[]\n4\n4\n[Go Slices Are Powerful]\n\nIn the example above, we see that in the first slice (myslice1), the actual elements are not specified, \nso both the length and capacity of the \nslice will be zero. In the second slice (myslice2), the elements are specified, \nand both length and capacity is \nequal to the number of actual elements specified.\nCreate a Slice From an Array\nYou can create a slice by slicing an array:\nSyntax\nvar myarray = [length]datatype{values} // An array\nmyslice := myarray[start:end]\n// A slice made from the array\nExample\nThis example shows how to create a slice from an array:\npackage main\nimport (\"fmt\")\nfunc main() {\narr1 := [6]int{10, 11, 12, 13, 14,15}\nmyslice := arr1[2:4]\nfmt.Printf(\"myslice = %v\\n\", myslice)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice))\n}\nResult:\nmyslice = [12 13]\nlength = 2\ncapacity = 4\n\nIn the example above\nmyslice\nis a slice with length \n2. It is made from\narr1\nwhich is an array with length 6.\nThe slice starts from the third element of the array which has value 12 \n(remember that array indexes start at 0. That means that [0] is the first \nelement, [1] is the second element, etc.). The slice can grow to the end of the array. This means that the capacity of the slice is \n4.\nIf\nmyslice\nstarted from element 0, the slice capacity would be 6.\nCreate a Slice With The make() Function\nThe\nmake()\nfunction can also be used to \ncreate a slice.\nSyntax\nslice_name\n:= make([]\ntype\n,\nlength\n,\ncapacity\n)\nNote:\nIf the\ncapacity\nparameter is not defined, it will be equal to\nlength\n.\nExample\nThis example shows how to create slices using the\nmake()\nfunction:\npackage main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := make([]int, 5, 10)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n// with omitted capacity\nmyslice2 := make([]int, 5)\nfmt.Printf(\"myslice2 = %v\\n\", myslice2)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice2))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice2))\n}\nResult:\nmyslice1 = [0 0 0 0 0]\nlength = 5\ncapacity = 10\nmyslice2 = [0 0 0 0 \n    0]\nlength = 5\ncapacity = 5\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "slice_name\n:= []\ndatatype\n{\nvalues\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "myslice := []int{}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "myslice := []int{1,2,3}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{}\nfmt.Println(len(myslice1))\nfmt.Println(cap(myslice1))\nfmt.Println(myslice1)\nmyslice2 := []string{\"Go\", \"Slices\", \"Are\", \"Powerful\"}\nfmt.Println(len(myslice2))\nfmt.Println(cap(myslice2))\nfmt.Println(myslice2)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 7,
      "code": "var myarray = [length]datatype{values} // An array\nmyslice := myarray[start:end]\n// A slice made from the array",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\narr1 := [6]int{10, 11, 12, 13, 14,15}\nmyslice := arr1[2:4]\nfmt.Printf(\"myslice = %v\\n\", myslice)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 9,
      "code": "slice_name\n:= make([]\ntype\n,\nlength\n,\ncapacity\n)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := make([]int, 5, 10)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n// with omitted capacity\nmyslice2 := make([]int, 5)\nfmt.Printf(\"myslice2 = %v\\n\", myslice2)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice2))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice2))\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "slice_name\n:= []\ndatatype\n# TODO: Complete this line\nvalues\n}",
      "solution": "slice_name\n:= []\ndatatype\n{\nvalues\n}"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your java code here",
      "solution": "myslice := []int{}"
    }
  ],
  "related_topics": [
    {
      "id": "8d134a05-9b6f-4509-8abf-84451d9cff9f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d0ec5919-fd67-4c1e-80d5-280e829f3cf6",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "386109af-2513-451e-9195-7c18977cf001",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Slices\n\nGo Slices\nSlices?",
      "options": [
        "also used to store multiple values of the same type in a single variable",
        "None of the above.",
        "None of the above.",
        "similar to arrays"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Go Slices\n\nGo Slices\nSlices is 'similar to arrays'."
    },
    {
      "question": "What is slices?",
      "options": [
        "also used to store multiple values of the same type in a single variable",
        "None of the above.",
        "None of the above.",
        "similar to arrays"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of slices is 'also used to store multiple values of the same type in a single variable'."
    }
  ],
  "summary": "This tutorial covers Go Slices concepts and techniques. You'll learn how to use Go Slices effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Slices and how to apply it in your projects."
}