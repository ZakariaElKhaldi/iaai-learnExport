{
  "id": "d1bdbb10-c93c-44f3-851c-fcc0b4680c6f",
  "title": "Go Constants",
  "slug": "go-constants",
  "metadata": {
    "description": "Learn about Go Constants with clear explanations and practical examples.",
    "keywords": [
      "c",
      "constants",
      "constant",
      "main",
      "const",
      "println",
      "value",
      "example",
      "type",
      "package",
      "import"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Constants"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Constants",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Go Constants\n\nGo Constants\nIf a variable should have a fixed value that cannot be changed",
      "content": ", you can use the\nconst\nkeyword.\nThe\nconst\nkeyword declares the variable as \"constant\", which means \nthat it is\nunchangeable and read-only\n.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "CONSTNAME type",
      "content": "=\nvalue\nNote:\nThe value of a constant must be assigned when you declare it.\nDeclaring a Constant\nHere is an example of declaring a constant in Go:\nExample\npackage main\nimport (\"fmt\")\nconst PI = 3.14\nfunc main() {\nfmt.Println(PI)\n}\n\nConstant Rules\nConstant names follow the same naming rules as\nvariables\nConstant names are usually written in uppercase letters (for easy identification and differentiation from variables)\nConstants can be declared both inside and outside of a function\nConstant Types\nThere are two types of constants:\nTyped constants\nUntyped constants\nTyped Constants\nTyped constants are declared with a defined type:\nExample\npackage main\nimport (\"fmt\")\nconst A int = 1\nfunc main() {\nfmt.Println(A)\n}\n\nUntyped Constants\nUntyped constants are declared without a type:\nExample\npackage main\nimport (\"fmt\")\nconst A = 1\nfunc main() {\nfmt.Println(A)\n}\n\nNote:\nIn this case, the type of the constant is inferred from the value (means the compiler decides the type of the constant, based on the value).\nConstants: Unchangeable and Read-only\nWhen a constant is declared, it is not possible to change the value later:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nconst A = 1\nA = 2\nfmt.Println(A)\n}\nResult:\n./prog.go:8:7: cannot assign to A\n\nMultiple Constants Declaration\nMultiple constants can be grouped together into a block for readability:\nExample\npackage main\nimport (\"fmt\")\nconst (\nA int = 1\nB = 3.14\nC = \"Hi!\"\n)\nfunc main() {\nfmt.Println(A)\nfmt.Println(B)\nfmt.Println(C)\n}\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 4,
      "code": "const\nCONSTNAME type\n=\nvalue",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nconst PI = 3.14\nfunc main() {\nfmt.Println(PI)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nconst A int = 1\nfunc main() {\nfmt.Println(A)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nconst A = 1\nfunc main() {\nfmt.Println(A)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nconst A = 1\nA = 2\nfmt.Println(A)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nconst (\nA int = 1\nB = 3.14\nC = \"Hi!\"\n)\nfunc main() {\nfmt.Println(A)\nfmt.Println(B)\nfmt.Println(C)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const\nCONSTNAME type\n# TODO: Complete this line\nvalue",
      "solution": "const\nCONSTNAME type\n=\nvalue"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\n# TODO: Complete this line\nconst PI = 3.14\nfunc main() {\nfmt.Println(PI)\n}",
      "solution": "package main\nimport (\"fmt\")\nconst PI = 3.14\nfunc main() {\nfmt.Println(PI)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "ba3872e4-0dff-4559-86ed-179d50ee3ed6",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7adc893d-bd28-4a67-9092-c2e011551bd7",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "88e37096-c529-4ec7-a365-29c0e4e95126",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which means \nthat it?",
      "options": [
        "None of the above.",
        "unchangeable and read-only",
        "an example of declaring a constant in Go:\nExample\npackage main\nimport (\"fmt\")\nconst PI = 3",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of which means \nthat it is 'unchangeable and read-only'."
    },
    {
      "question": "What is Declaring a Constant\nHere?",
      "options": [
        "an example of declaring a constant in Go:\nExample\npackage main\nimport (\"fmt\")\nconst PI = 3",
        "None of the above.",
        "None of the above.",
        "unchangeable and read-only"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Declaring a Constant\nHere is 'an example of declaring a constant in Go:\nExample\npackage main\nimport (\"fmt\")\nconst PI = 3'."
    }
  ],
  "summary": "This tutorial covers Go Constants concepts and techniques. You'll learn how to use Go Constants effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Constants and how to apply it in your projects."
}