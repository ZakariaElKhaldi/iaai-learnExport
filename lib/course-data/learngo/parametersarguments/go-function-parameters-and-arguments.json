{
  "id": "392c5a84-d7d4-46af-a266-b28254a8c483",
  "title": "Go Function Parameters and Arguments",
  "slug": "go-function-parameters-and-arguments",
  "metadata": {
    "description": "Learn about Go Function Parameters and Arguments with clear explanations and practical examples.",
    "keywords": [
      "c",
      "function",
      "parameters",
      "familyname",
      "hello",
      "refsnes",
      "fname",
      "liam",
      "arguments",
      "parameter",
      "func"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Parameters/Arguments"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Function Parameters and Arguments",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Parameters and Arguments\nInformation can be passed to functions as a parameter. Parameters act as variables inside the function.\nParameters and their types are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma:\nSyntax\nfunc\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n,\nparam3\ntype\n) {\n// code to be executed\n}\nFunction With Parameter Example\nThe following example has a function with one parameter (\nfname\n) \nof type\nstring\n. When the familyName() function is called, we also pass along a name (e.g. \nLiam), and the name is used inside the function, which outputs several different first names, but an equal last name:\nExample\npackage main\nimport (\"fmt\")\nfunc familyName(fname string) {\nfmt.Println(\"Hello\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\")\nfamilyName(\"Jenny\")\nfamilyName(\"Anja\")\n}\nResult:\nHello Liam Refsnes\nHello Jenny Refsnes\nHello Anja Refsnes\n\nNote:\nWhen a\nparameter\nis passed to the function, it is called an\nargument\n. So, from the example above:\nfname\nis a\nparameter\n, while\nLiam\n,\nJenny\nand\nAnja\nare\narguments\n.\nMultiple Parameters\nInside the function, you can add as many parameters as you want:\nExample\npackage main\nimport (\"fmt\")\nfunc familyName(fname string, age int) {\nfmt.Println(\"Hello\", age, \"year old\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\", 3)\nfamilyName(\"Jenny\", 14)\nfamilyName(\"Anja\", 30)\n}\nResult:\nHello 3 year old Liam Refsnes\nHello 14 year old Jenny Refsnes\nHello 30 year old Anja Refsnes\n\nNote:\nWhen you are working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "func\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n,\nparam3\ntype\n) {\n// code to be executed\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc familyName(fname string) {\nfmt.Println(\"Hello\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\")\nfamilyName(\"Jenny\")\nfamilyName(\"Anja\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc familyName(fname string, age int) {\nfmt.Println(\"Hello\", age, \"year old\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\", 3)\nfamilyName(\"Jenny\", 14)\nfamilyName(\"Anja\", 30)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "func\nFunctionName\n(\nparam1\ntype\n,\nparam2\n# TODO: Complete this line\n,\nparam3\ntype\n) {\n// code to be executed\n}",
      "solution": "func\nFunctionName\n(\nparam1\ntype\n,\nparam2\ntype\n,\nparam3\ntype\n) {\n// code to be executed\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\n# TODO: Complete this line\nfunc familyName(fname string) {\nfmt.Println(\"Hello\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\")\nfamilyName(\"Jenny\")\nfamilyName(\"Anja\")\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc familyName(fname string) {\nfmt.Println(\"Hello\", fname, \"Refsnes\")\n}\nfunc main() {\nfamilyName(\"Liam\")\nfamilyName(\"Jenny\")\nfamilyName(\"Anja\")\n}"
    }
  ],
  "related_topics": [
    {
      "id": "273e3e12-0e0d-40ec-9224-26f7d43d8d8a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ada67622-3546-401b-968d-a1bf4c0a693f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d636e607-4f79-45c1-8fd0-a13a1c60e402",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Parameters and their types?",
      "options": [
        "None of the above.",
        "called",
        "None of the above.",
        "specified after the function name"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Parameters and their types is 'specified after the function name'."
    },
    {
      "question": "What is function?",
      "options": [
        "None of the above.",
        "called",
        "specified after the function name",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of function is 'called'."
    }
  ],
  "summary": "This tutorial covers Go Function Parameters and Arguments concepts and techniques. You'll learn how to use Go Function Parameters and Arguments effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Function Parameters and Arguments and how to apply it in your projects."
}