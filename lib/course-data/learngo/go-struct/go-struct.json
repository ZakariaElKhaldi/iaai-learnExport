{
  "id": "625b1569-3e6b-42eb-9a13-a5e205c92e49",
  "title": "Go Struct",
  "slug": "go-struct",
  "metadata": {
    "description": "Learn about Go Struct with clear explanations and practical examples.",
    "keywords": [
      "c",
      "name",
      "salary",
      "struct",
      "println",
      "type",
      "person",
      "string",
      "structure",
      "data",
      "pers"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Struct"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Struct",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Structures\nA struct (short for structure) is used to create a collection of members of \ndifferent data types, into a single variable.\nWhile arrays are used to store multiple values of the same data type into a \nsingle variable, structs are used to store multiple values of different data \ntypes into a single variable.\nA struct can be useful for grouping data together to create records.\nDeclare a Struct\nTo declare a structure in Go, use the\ntype\nand\nstruct\nkeywords:\nSyntax\ntype\nstruct_name\nstruct {\nmember1\ndatatype\n;\nmember2\ndatatype\n;\nmember3\ndatatype\n;\n...\n}\nExample\nHere we declare a struct type\nPerson\nwith the following members:\nname\n,\nage\n,\njob\nand\nsalary\n:\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\nTip:\nNotice that the struct members above have different \ndata types.\nname\nand\njob\nis of type string, while\nage\nand\nsalary\nis of type int.\nAccess Struct Members\nTo access any member of a structure, use the dot operator (.) between the \nstructure variable name and the structure member:\nExample\npackage main\nimport (\"fmt\")\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n// Pers1 \n    specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = \n    6000\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = \n    4500\n// Access and print Pers1 info\nfmt.Println(\"Name: \", pers1.name)\nfmt.Println(\"Age: \", pers1.age)\nfmt.Println(\"Job: \", pers1.job)\nfmt.Println(\"Salary: \", pers1.salary)\n// \n    Access and print Pers2 info\nfmt.Println(\"Name: \", pers2.name)\nfmt.Println(\"Age: \", pers2.age)\nfmt.Println(\"Job: \", pers2.job)\nfmt.Println(\"Salary: \", pers2.salary)\n}\nResult:\nName: Hege\nAge: 45\nJob: Teacher\nSalary: 6000\nName: Cecilie\nAge: \n    24\nJob: Marketing\nSalary: 4500\n\nPass Struct as Function Arguments\nYou can also pass a structure as a function argument, like this:\nExample\npackage main\nimport (\"fmt\")\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n// Pers1 \n    specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = \n    6000\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = \n    4500\n// Print Pers1 info by calling a function\nprintPerson(pers1)\n// Print Pers2 info by calling a function\nprintPerson(pers2)\n}\nfunc printPerson(pers Person) {\nfmt.Println(\"Name: \", pers.name)\nfmt.Println(\"Age: \", pers.age)\nfmt.Println(\"Job: \", pers.job)\nfmt.Println(\"Salary: \", pers.salary)\n}\nResult:\nName: Hege\nAge: 45\nJob: Teacher\nSalary: 6000\nName: Cecilie\nAge: \n    24\nJob: Marketing\nSalary: 4500\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "type\nstruct_name\nstruct {\nmember1\ndatatype\n;\nmember2\ndatatype\n;\nmember3\ndatatype\n;\n...\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "type Person struct {\nname string\nage int\njob string\nsalary int\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n// Pers1 \n    specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = \n    6000\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = \n    4500\n// Access and print Pers1 info\nfmt.Println(\"Name: \", pers1.name)\nfmt.Println(\"Age: \", pers1.age)\nfmt.Println(\"Job: \", pers1.job)\nfmt.Println(\"Salary: \", pers1.salary)\n// \n    Access and print Pers2 info\nfmt.Println(\"Name: \", pers2.name)\nfmt.Println(\"Age: \", pers2.age)\nfmt.Println(\"Job: \", pers2.job)\nfmt.Println(\"Salary: \", pers2.salary)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n// Pers1 \n    specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = \n    6000\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = \n    4500\n// Print Pers1 info by calling a function\nprintPerson(pers1)\n// Print Pers2 info by calling a function\nprintPerson(pers2)\n}\nfunc printPerson(pers Person) {\nfmt.Println(\"Name: \", pers.name)\nfmt.Println(\"Age: \", pers.age)\nfmt.Println(\"Job: \", pers.job)\nfmt.Println(\"Salary: \", pers.salary)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type\nstruct_name\nstruct {\nmember1\ndatatype\n;\nmember2\ndatatype\n;\nmember3\ndatatype\n;\n# TODO: Complete this line\n}",
      "solution": "type\nstruct_name\nstruct {\nmember1\ndatatype\n;\nmember2\ndatatype\n;\nmember3\ndatatype\n;\n...\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "type Person struct {\nname string\nage int\n# TODO: Complete this line\nsalary int\n}",
      "solution": "type Person struct {\nname string\nage int\njob string\nsalary int\n}"
    }
  ],
  "related_topics": [
    {
      "id": "94f569d5-abea-42d6-8c1e-ecc715926dff",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0144e5a6-5fd7-45d1-95ed-c19a1ac9717d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "00e4a87f-4eef-44b7-ae5d-c7e4fa627e31",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is While arrays?",
      "options": [
        "None of the above.",
        "Not a While arrays.",
        "None of the above.",
        "used to store multiple values of the same data type into a \nsingle variable"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of While arrays is 'used to store multiple values of the same data type into a \nsingle variable'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Go Struct concepts and techniques. You'll learn how to use Go Struct effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Struct and how to apply it in your projects."
}