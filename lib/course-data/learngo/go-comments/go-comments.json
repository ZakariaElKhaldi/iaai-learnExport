{
  "id": "8d7b57a1-5de4-4e92-908d-04b3f57c3f90",
  "title": "Go Comments",
  "slug": "go-comments",
  "metadata": {
    "description": "Learn about Go Comments with clear explanations and practical examples.",
    "keywords": [
      "c",
      "comments",
      "line",
      "main",
      "code",
      "comment",
      "println",
      "hello",
      "world",
      "example",
      "package"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Comments"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Comments",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Comments\nA comment is a text that is ignored upon execution.\nComments can be used to explain the code, and to make it more readable.\nComments can also be used to prevent code execution when testing an alternative code.\nGo supports single-line or multi-line comments.\nGo Single-line Comments\nSingle-line comments start with two forward slashes (\n//\n).\nAny text between\n//\nand the end of the line is ignored by the compiler (will not be executed).\nExample\n// This is a comment\npackage main\nimport (\"fmt\")\nfunc main() {\n// This is a comment\nfmt.Println(\"Hello World!\")\n}\n\nThe following example uses a single-line comment at the end of a code line:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n// This is a comment\n}\n\nGo Multi-line Comments\nMulti-line comments start with\n/*\nand ends with\n*/\n.\nAny text between\n/*\nand\n*/\nwill be ignored by the compiler:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\n/* The code below will print Hello World\nto the screen, and it is amazing */\nfmt.Println(\"Hello World!\")\n}\n\nTip:\nIt is up to you which you want to use. Normally, we use\n//\nfor short comments, and\n/* */\nfor longer comments.\nComment to Prevent Code Execution\nYou can also use comments to prevent the code from being executed.\nThe commented code can be saved for later reference and troubleshooting.\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n// fmt.Println(\"This line does not execute\")\n}\n\nGo Exercises\nTest Yourself With Exercises\nExercise:\nComments in Go are written with a special character, which one?\npackage main   \nimport (\"fmt\")\nfunc main() {\nthis is a comment  \n  fmt.Println(\"Hello World!\")\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// This is a comment\npackage main\nimport (\"fmt\")\nfunc main() {\n// This is a comment\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n// This is a comment\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\n/* The code below will print Hello World\nto the screen, and it is amazing */\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n// fmt.Println(\"This line does not execute\")\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// This is a comment\npackage main\nimport (\"fmt\")\nfunc main() {\n// This is a comment\n# TODO: Complete this line\n}",
      "solution": "// This is a comment\npackage main\nimport (\"fmt\")\nfunc main() {\n// This is a comment\nfmt.Println(\"Hello World!\")\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n// This is a comment\n}"
    }
  ],
  "related_topics": [
    {
      "id": "572b51bb-6ec7-44d1-b6e1-d3ccf608faa6",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d13265c1-d889-4d95-b0ae-eb1728cfefdf",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0dc73914-0871-4e52-ac4b-7ff6b491e3ae",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Comments\n\nGo Comments\nA comment is a text that?",
      "options": [
        "None of the above.",
        "ignored by the compiler (will not be executed)",
        "None of the above.",
        "ignored upon execution"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Go Comments\n\nGo Comments\nA comment is a text that is 'ignored upon execution'."
    },
    {
      "question": "What is and the end of the line?",
      "options": [
        "ignored upon execution",
        "ignored by the compiler (will not be executed)",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and the end of the line is 'ignored by the compiler (will not be executed)'."
    }
  ],
  "summary": "This tutorial covers Go Comments concepts and techniques. You'll learn how to use Go Comments effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Comments and how to apply it in your projects."
}