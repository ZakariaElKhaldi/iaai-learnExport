{
  "id": "92f2792b-8f22-47ff-8876-da15cf8cb7a1",
  "title": "Go Arrays",
  "slug": "go-arrays",
  "metadata": {
    "description": "Learn about Go Arrays with clear explanations and practical examples.",
    "keywords": [
      "go",
      "array",
      "main",
      "example",
      "println",
      "length",
      "elements",
      "package",
      "import",
      "func",
      "result"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Arrays\nArrays are used to store multiple values of the same type in a single variable, instead of declaring separate variables for each value.\nDeclare an Array\nIn Go, there are two ways to declare an array:\n1. With the\nvar\nkeyword:\nSyntax\nvar\narray_name =\n[\nlength\n]\ndatatype\n{\nvalues\n} // here length is defined\nor\nvar\narray_name =\n[...]\ndatatype\n{\nvalues\n}\n// here length is inferred\n2. With the\n:=\nsign:\nSyntax\narray_name\n:= [\nlength\n]\ndatatype\n{\nvalues\n}\u00a0// here length \n        is defined\nor\narray_name\n:= [...]\ndatatype\n{\nvalues\n}\n// \n        here length is inferred\nNote:\nThe\nlength\nspecifies the number of elements \n  to store in the array. In Go, arrays have a fixed length. The length of the \n  array is either defined by a number or is inferred \n(means that the compiler decides the length of the array, based on the number of\nvalues\n).\nArray Examples\nExample\nThis example declares two arrays (arr1 and arr2) with defined lengths:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar arr1 =  [3]int{1,2,3}\narr2 := [5]int{4,5,6,7,8}\nfmt.Println(arr1)\nfmt.Println(arr2)\n}\nResult:\n[1 2 3]\n[4 5 6 7 8]\n\nExample\nThis example declares two arrays (arr1 and arr2) with inferred lengths:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar arr1 = [...]int{1,2,3}\narr2 := [...]int{4,5,6,7,8}\nfmt.Println(arr1)\nfmt.Println(arr2)\n}\nResult:\n[1 2 3]\n[4 5 6 7 8]\n\nExample\nThis example declares an array of strings:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar cars = [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\nfmt.Print(cars)\n}\nResult:\n[Volvo BMW Ford Mazda]\n\nAccess Elements of an Array\nYou can access a specific array element by referring to the index number.\nIn Go, array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.\nExample\nThis example shows how to access the first and third elements in the \n  prices array:\npackage main\nimport (\"fmt\")\nfunc main() {\nprices := [3]int{10,20,30}\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}\nResult:\n10\n30\n\nChange Elements of an Array\nYou can also change the value of a specific array element by referring to the index number.\nExample\nThis example shows how to change the value of the third element in the \n  prices array:\npackage main\nimport (\"fmt\")\nfunc main() {\nprices := [3]int{10,20,30}\nprices[2] = 50\nfmt.Println(prices)\n}\nResult:\n[10 20 50]\n\nArray Initialization\nIf an array or one of its elements has not been initialized in the code, it \nis assigned the default value of its type.\nTip:\nThe default value for int is 0, and the default value \nfor string is \"\".\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\narr1 := [5]int{} //not initialized\narr2 := [5]int{1,2} //partially initialized\narr3 := [5]int{1,2,3,4,5} //fully initialized\nfmt.Println(arr1)\nfmt.Println(arr2)\nfmt.Println(arr3)\n}\nResult:\n[0 0 0 0 0]\n[1 2 0 0 0]\n[1 2 3 4 5]\n\nInitialize Only Specific Elements\nIt is possible to initialize only specific elements in an array.\nExample\nThis example initializes only the second and third elements of the array:\npackage main\nimport (\"fmt\")\nfunc main() {\narr1 := [5]int{1:10,2:40}\nfmt.Println(arr1)\n}\nResult:\n[0 10 40 0 0]\n\nExample Explained\nThe array above has 5 elements.\n1:10\nmeans: assign\n10\nto array index\n1\n(second element).\n2:40\nmeans: assign\n40\nto \narray index\n2\n(third element).\nFind the Length of an Array\nThe\nlen()\nfunction is used to find the length of an array:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\narr1 := [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\narr2 := [...]int{1,2,3,4,5,6}\nfmt.Println(len(arr1))\nfmt.Println(len(arr2))\n}\nResult:\n4\n6\n\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate an array, named cars, of type string:\npackage main   \nimport (\"fmt\")\nfunc main() {\n  var\n= [4]\n{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\n  fmt.Print(\n)\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "var\narray_name =\n[\nlength\n]\ndatatype\n{\nvalues\n} // here length is defined\nor\nvar\narray_name =\n[...]\ndatatype\n{\nvalues\n}\n// here length is inferred",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 4,
      "code": "array_name\n:= [\nlength\n]\ndatatype\n{\nvalues\n}\u00a0// here length \n        is defined\nor\narray_name\n:= [...]\ndatatype\n{\nvalues\n}\n// \n        here length is inferred",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar arr1 =  [3]int{1,2,3}\narr2 := [5]int{4,5,6,7,8}\nfmt.Println(arr1)\nfmt.Println(arr2)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar arr1 = [...]int{1,2,3}\narr2 := [...]int{4,5,6,7,8}\nfmt.Println(arr1)\nfmt.Println(arr2)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar cars = [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\nfmt.Print(cars)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := [3]int{10,20,30}\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := [3]int{10,20,30}\nprices[2] = 50\nfmt.Println(prices)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\narr1 := [5]int{} //not initialized\narr2 := [5]int{1,2} //partially initialized\narr3 := [5]int{1,2,3,4,5} //fully initialized\nfmt.Println(arr1)\nfmt.Println(arr2)\nfmt.Println(arr3)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\narr1 := [5]int{1:10,2:40}\nfmt.Println(arr1)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\narr1 := [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\narr2 := [...]int{1,2,3,4,5,6}\nfmt.Println(len(arr1))\nfmt.Println(len(arr2))\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var\narray_name =\n[\nlength\n]\ndatatype\n{\nvalues\n} // here length is defined\nor\nvar\narray_name =\n[...]\ndatatype\n# TODO: Complete this line\nvalues\n}\n// here length is inferred",
      "solution": "var\narray_name =\n[\nlength\n]\ndatatype\n{\nvalues\n} // here length is defined\nor\nvar\narray_name =\n[...]\ndatatype\n{\nvalues\n}\n// here length is inferred"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "array_name\n:= [\nlength\n]\ndatatype\n{\nvalues\n}\u00a0// here length \n        is defined\nor\narray_name\n# TODO: Complete this line\ndatatype\n{\nvalues\n}\n// \n        here length is inferred",
      "solution": "array_name\n:= [\nlength\n]\ndatatype\n{\nvalues\n}\u00a0// here length \n        is defined\nor\narray_name\n:= [...]\ndatatype\n{\nvalues\n}\n// \n        here length is inferred"
    }
  ],
  "related_topics": [
    {
      "id": "253f669c-3e7b-4ecc-a3f0-5394f55dad46",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "251e61c9-9b92-4cdc-9ef4-bffaf05d9dd2",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e223803b-a814-47e9-8a1c-a28a4823885c",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Arrays\n\nGo Arrays\nArrays?",
      "options": [
        "None of the above.",
        "two ways to declare an array:\n1",
        "None of the above.",
        "used to store multiple values of the same type in a single variable"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Go Arrays\n\nGo Arrays\nArrays is 'used to store multiple values of the same type in a single variable'."
    },
    {
      "question": "What is there?",
      "options": [
        "two ways to declare an array:\n1",
        "None of the above.",
        "None of the above.",
        "used to store multiple values of the same type in a single variable"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of there is 'two ways to declare an array:\n1'."
    }
  ],
  "summary": "This tutorial covers Go Arrays concepts and techniques. You'll learn how to use Go Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Arrays and how to apply it in your projects."
}