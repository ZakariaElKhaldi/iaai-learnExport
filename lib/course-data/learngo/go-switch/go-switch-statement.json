{
  "id": "e5139838-8751-42c5-9a42-e3b169ebfd27",
  "title": "Go switch Statement",
  "slug": "go-switch-statement",
  "metadata": {
    "description": "Learn about Go switch Statement with clear explanations and practical examples.",
    "keywords": [
      "c",
      "case",
      "println",
      "switch",
      "main",
      "code",
      "statement",
      "default",
      "example",
      "expression",
      "block"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Switch"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go switch Statement",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The switch Statement\nUse the\nswitch\nstatement to select one of many code blocks to be executed.\nThe\nswitch\nstatement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a\nbreak\nstatement.\nSingle-Case switch Syntax\nSyntax\nswitch\nexpression\n{\ncase\nx\n:\n// code block\ncase\ny\n:\n// code block\ncase\nz\n:\n...\ndefault:\n// code block\n}\nThis is how it works:\nThe expression is evaluated once\nThe value of the\nswitch\nexpression is compared with the values of each\ncase\nIf there is a match, the associated block of code is executed\nThe\ndefault\nkeyword is optional. It \nspecifies some code to run if there is no\ncase\nmatch\nSingle-Case switch Example\nThe example below uses a weekday number to calculate the weekday name:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nday := 4\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\n}\n}\nResult:\nThursday\n\nThe default Keyword\nThe\ndefault\nkeyword specifies some code to run if there is no case match:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nday := 8\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\ndefault:\nfmt.Println(\"Not a weekday\")\n}\n}\nResult:\nNot a weekday\n\nAll the\ncase\nvalues should have the same type as the\nswitch\nexpression. Otherwise, the compiler will raise an error:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\na := 3\nswitch a {\ncase 1:\nfmt.Println(\"a is one\")\ncase \"b\":\nfmt.Println(\"a is b\")\n}\n}\nResult:\n./prog.go:11:2: cannot use \"b\" (type untyped string) as type int\n\nGo Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing parts to complete the following switch statement.\npackage main   \nimport (\"fmt\")\nfunc main() {\n  var day = 2\n  switch\n{\n(1):\n    fmt.Print(\"Saturday\")\n(2):\n    fmt.Print(\"Sunday\")    \n  }\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "switch\nexpression\n{\ncase\nx\n:\n// code block\ncase\ny\n:\n// code block\ncase\nz\n:\n...\ndefault:\n// code block\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nday := 4\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nday := 8\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\ndefault:\nfmt.Println(\"Not a weekday\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\na := 3\nswitch a {\ncase 1:\nfmt.Println(\"a is one\")\ncase \"b\":\nfmt.Println(\"a is b\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "switch\nexpression\n{\ncase\nx\n:\n// code block\ncase\ny\n:\n// code block\n# TODO: Complete this line\nz\n:\n...\ndefault:\n// code block\n}",
      "solution": "switch\nexpression\n{\ncase\nx\n:\n// code block\ncase\ny\n:\n// code block\ncase\nz\n:\n...\ndefault:\n// code block\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\n# TODO: Complete this line\nday := 4\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\n}\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nday := 4\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "634b0487-b2ee-4bba-b4d4-b03d7dbe2e92",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "aa425a0e-ffba-4ae4-9a6c-c3570a25b8e2",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8684e77c-2826-4280-9251-3ed45a751d21",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The\nswitch\nstatement in Go?",
      "options": [
        "None of the above.",
        "that it only runs the matched case so it does not need a\nbreak\nstatement",
        "None of the above.",
        "similar to the ones in C"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The\nswitch\nstatement in Go is 'similar to the ones in C'."
    },
    {
      "question": "What is The difference?",
      "options": [
        "None of the above.",
        "None of the above.",
        "similar to the ones in C",
        "that it only runs the matched case so it does not need a\nbreak\nstatement"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The difference is 'that it only runs the matched case so it does not need a\nbreak\nstatement'."
    }
  ],
  "summary": "This tutorial covers Go switch Statement concepts and techniques. You'll learn how to use Go switch Statement effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go switch Statement and how to apply it in your projects."
}