{
  "id": "95294f8a-0192-4ca8-8980-8f162df9ea72",
  "title": "Go if statement",
  "slug": "go-if-statement",
  "metadata": {
    "description": "Learn about Go if statement with clear explanations and practical examples.",
    "keywords": [
      "go",
      "greater",
      "main",
      "example",
      "condition",
      "test",
      "print",
      "statement",
      "true",
      "package",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "if Statement"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go if statement",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The if Statement\nUse the\nif\nstatement to specify a block of Go code to be executed if a condition is\ntrue\n.\nSyntax\nif\ncondition\n{\n// code to be executed if condition is true\n}\nNote that\nif\nis in lowercase letters. Uppercase letters (If or IF) will generate an error.\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is\ntrue\n, print some text:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nif 20 > 18 {\nfmt.Println(\"20 is greater than 18\")\n}\n}\n\nWe can also test variables:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nx:= 20\ny:= 18\nif x > y {\nfmt.Println(\"x is greater than y\")\n}\n}\n\nExample explained\nIn the example above we use two variables,\nx\nand\ny\n, \nto test whether x is greater than y (using the\n>\noperator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\nGo Exercises\nTest Yourself With Exercises\nExercise:\nPrint \"Hello World\" if x is greater than y.\npackage main   \nimport (\"fmt\")\nfunc main() {\n  var x = 50\n  var y = 10\nx\ny {\n  fmt.Print(\"Hello World\")\n  }\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "if\ncondition\n{\n// code to be executed if condition is true\n}",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nif 20 > 18 {\nfmt.Println(\"20 is greater than 18\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nx:= 20\ny:= 18\nif x > y {\nfmt.Println(\"x is greater than y\")\n}\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "if\ncondition\n{\n// code to be executed if condition is true\n# TODO: Complete this line",
      "solution": "if\ncondition\n{\n// code to be executed if condition is true\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\n# TODO: Complete this line\nif 20 > 18 {\nfmt.Println(\"20 is greater than 18\")\n}\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nif 20 > 18 {\nfmt.Println(\"20 is greater than 18\")\n}\n}"
    }
  ],
  "related_topics": [
    {
      "id": "4acf6d7a-de50-4ad8-b1cd-0b8fa0eaf467",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e2598b37-face-443d-8284-27f0161b6950",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e0833eee-ccae-45b0-9eb8-18ca8b6b33ac",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go if statement\n\nThe if Statement\nUse the\nif\nstatement to specify a block of Go code to be executed if a condition?",
      "options": [
        "true\n}\nNote that\nif\nis in lowercase letters",
        "None of the above.",
        "true",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Go if statement\n\nThe if Statement\nUse the\nif\nstatement to specify a block of Go code to be executed if a condition is 'true'."
    },
    {
      "question": "What is code to be executed if condition?",
      "options": [
        "true",
        "None of the above.",
        "true\n}\nNote that\nif\nis in lowercase letters",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of code to be executed if condition is 'true\n}\nNote that\nif\nis in lowercase letters'."
    }
  ],
  "summary": "This tutorial covers Go if statement concepts and techniques. You'll learn how to use Go if statement effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go if statement and how to apply it in your projects."
}