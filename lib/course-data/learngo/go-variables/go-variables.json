{
  "id": "f29a70a8-c56e-4ce5-a043-ba5a321e279e",
  "title": "Go Variables",
  "slug": "go-variables",
  "metadata": {
    "description": "Learn about Go Variables with clear explanations and practical examples.",
    "keywords": [
      "go",
      "value",
      "variable",
      "main",
      "println",
      "example",
      "type",
      "variables",
      "values",
      "types",
      "string"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Variables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Go Variables\n\nVariables are containers for storing data values",
      "content": ".\nGo Variable Types\nIn Go, there are different\ntypes\nof variables, for example:\nint\n- stores integers (whole numbers), such as 123 or -123\nfloat32\n- stores floating point numbers, with decimals, such as 19.99 or -19.99\nstring\n- stores text, such as \"Hello World\". String values are surrounded by double quotes\nbool\n- stores values with two states: true or false\nMore about different variable types, will be explained in the\nGo Data Types\nchapter.\nDeclaring (Creating) Variables\nIn Go, there are two ways to declare a variable:\n1. With the\nvar\nkeyword:\nUse the\nvar\nkeyword, followed by variable name and type:",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Syntax\nvar\nvariablename type",
      "content": "=\nvalue\nNote:\nYou always have to specify either\ntype\nor\nvalue\n(or both).\n2. With the\n:=\nsign:\nUse the\n:=\nsign, followed by the variable value:\nSyntax\nvariablename\n:=\nvalue\nNote:\nIn this case, the type of the variable is\ninferred\nfrom the value \n(means that the compiler decides the type of the variable, based on the value).\nNote:\nIt is not possible to declare a variable using\n:=\n, without assigning a value to it.\nVariable Declaration With Initial Value\nIf the value of a variable is known from the start, you can declare the variable and assign a value to it \non one line:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar student1 string = \"John\"\n//type is \n    string\nvar student2 = \"Jane\"\n//type is inferred\nx := 2\n//type is inferred\nfmt.Println(student1)\nfmt.Println(student2)\nfmt.Println(x)\n}\n\nNote:\nThe variable types of\nstudent2\nand\nx\nis\ninferred\nfrom \ntheir values.\nVariable Declaration Without Initial Value\nIn Go, all variables are initialized. So, if you declare a variable without an initial value, \nits value will be set to the default value of its type:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar a string\nvar b int\nvar c bool\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}\n\nExample explained\nIn this example there are 3 variables:\na\nb\nc\nThese variables are declared but they have not been assigned initial values.\nBy running the code, we can see that they already have the default values of their respective types:\na\nis\n\"\"\nb\nis\n0\nc\nis\nfalse\nValue Assignment After Declaration\nIt is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nvar student1 string\nstudent1 = \"John\"\nfmt.Println(student1)\n}\n\nNote:\nIt is not possible to declare a variable using \"\n:=\n\" without assigning a value to it.\nDifference Between var and :=\nThere are some small differences between the\nvar\nvar\n:=\n:\nvar\n:=\nCan be used\ninside\nand\noutside\nof functions\nCan only be used\ninside\nfunctions\nVariable declaration and value assignment\ncan be done separately\nVariable declaration and value assignment\ncannot be done separately\n(must be done in the same line)\nExample\nThis example shows declaring variables outside of a function, with the\nvar\nkeyword:\npackage main\nimport (\"fmt\")\nvar a int\nvar b int = 2\nvar c = 3\nfunc main() {\na = 1\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}\n\nExample\nSince\n:=\nis used outside of a function, running the program results in an error.\npackage main\nimport (\"fmt\")\na :=  1\nfunc main() {\nfmt.Println(a)\n}\nResult:\n./prog.go:5:1: syntax error: non-declaration statement outside function body\n\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate a variable named\nmyNum\nand assign the value\n50\nto it.\npackage main   \nimport (\"fmt\")\nfunc main() {\n  var\n=\nfmt.Println(\n)\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 4,
      "code": "var\nvariablename type\n=\nvalue",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 5,
      "code": "variablename\n:=\nvalue",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar student1 string = \"John\"\n//type is \n    string\nvar student2 = \"Jane\"\n//type is inferred\nx := 2\n//type is inferred\nfmt.Println(student1)\nfmt.Println(student2)\nfmt.Println(x)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar a string\nvar b int\nvar c bool\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar student1 string\nstudent1 = \"John\"\nfmt.Println(student1)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nvar a int\nvar b int = 2\nvar c = 3\nfunc main() {\na = 1\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "package main\nimport (\"fmt\")\na :=  1\nfunc main() {\nfmt.Println(a)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var\nvariablename type\n# TODO: Complete this line\nvalue",
      "solution": "var\nvariablename type\n=\nvalue"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "variablename\n# TODO: Complete this line\nvalue",
      "solution": "variablename\n:=\nvalue"
    }
  ],
  "related_topics": [
    {
      "id": "740291ef-2444-4904-a67f-bad0cdb57505",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4515b14e-5e03-4bee-a951-cc28113652c3",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f2d5e448-4585-4c9a-9595-e7508d257ca1",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Variables\n\nVariables?",
      "options": [
        "None of the above.",
        "different\ntypes\nof variables",
        "containers for storing data values",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Go Variables\n\nVariables is 'containers for storing data values'."
    },
    {
      "question": "What is there?",
      "options": [
        "containers for storing data values",
        "None of the above.",
        "different\ntypes\nof variables",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of there is 'different\ntypes\nof variables'."
    }
  ],
  "summary": "This tutorial covers Go Variables concepts and techniques. You'll learn how to use Go Variables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Variables and how to apply it in your projects."
}