{
  "id": "e081c6b0-2793-491f-87d0-8b965ff0afe8",
  "title": "Go Bitwise Operators",
  "slug": "go-bitwise-operators",
  "metadata": {
    "description": "Learn about Go Bitwise Operators with clear explanations and practical examples.",
    "keywords": [
      "bits",
      "shift",
      "bitwise",
      "operators",
      "sets",
      "left",
      "right",
      "pushing",
      "used",
      "binary"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Bitwise"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Bitwise Operators",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Bitwise Operators\nBitwise operators are used on (binary) numbers:\nOperator\nName\nDescription\nExample\nTry it\n&\nAND\nSets each bit to 1 if both bits are 1\nx & y\nTry it \u00bb\n|\nOR\nSets each bit to 1 if one of two bits is 1\nx | y\nTry it \u00bb\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\nx ^ b\nTry it \u00bb\n<<\nZero fill left shift\nShift left by pushing zeros in from the right\nx << 2\nTry it \u00bb\n>>\nSigned right shift\nShift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off\nx >> 2\nTry it \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "46cd54a9-e680-477a-ac99-f86a876007c5",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "731e3dd2-c6eb-4120-9b6c-9709665e992c",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c58af83f-a790-4310-9e90-fd003caf0b95",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Bitwise Operators\n\nBitwise Operators\nBitwise operators?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used on (binary) numbers:\nOperator\nName\nDescription\nExample\nTry it\n&\nAND\nSets each bit to 1 if both bits are 1\nx & y\nTry it \u00bb\n|\nOR\nSets each bit to 1 if one of two bits is 1\nx | y\nTry it \u00bb\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\nx ^ b\nTry it \u00bb\n<<\nZero fill left shift\nShift left by pushing zeros in from the right\nx << 2\nTry it \u00bb\n>>\nSigned right shift\nShift right by pushing copies of the leftmost bit in from the left",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Go Bitwise Operators\n\nBitwise Operators\nBitwise operators is 'used on (binary) numbers:\nOperator\nName\nDescription\nExample\nTry it\n&\nAND\nSets each bit to 1 if both bits are 1\nx & y\nTry it \u00bb\n|\nOR\nSets each bit to 1 if one of two bits is 1\nx | y\nTry it \u00bb\n^\nXOR\nSets each bit to 1 if only one of two bits is 1\nx ^ b\nTry it \u00bb\n<<\nZero fill left shift\nShift left by pushing zeros in from the right\nx << 2\nTry it \u00bb\n>>\nSigned right shift\nShift right by pushing copies of the leftmost bit in from the left'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Go Bitwise Operators concepts and techniques. You'll learn how to use Go Bitwise Operators effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Bitwise Operators and how to apply it in your projects."
}