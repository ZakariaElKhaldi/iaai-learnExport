{
  "id": "8c0efa54-ddc8-4e6e-bced-e66233a39ae4",
  "title": "Go Float Data Types",
  "slug": "go-float-data-types",
  "metadata": {
    "description": "Learn about Go Float Data Types with clear explanations and practical examples.",
    "keywords": [
      "go",
      "type",
      "float",
      "example",
      "main",
      "data",
      "value",
      "types",
      "store",
      "package",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Float"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Float Data Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Float Data Types\nThe float data types are used to store positive and negative numbers with a decimal point, \nlike 35.3, -2.34, or 3597.34987.\nThe float data type has two keywords:\nType\nSize\nRange\nfloat32\n32 bits\n-3.4e+38 to 3.4e+38.\nfloat64\n64 bits\n-1.7e+308 to +1.7e+308.\nTip:\nThe default type for float is\nfloat64\n. If you \ndo not specify a type, the type will be\nfloat64\n.\nThe float32 Keyword\nExample\nThis example shows how to declare some variables of type\nfloat32\n:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x float32 = 123.78\nvar \n    y float32 = 3.4e+38\nfmt.Printf(\"Type: %T, value: %v\\n\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}\n\nThe float64 Keyword\nThe\nfloat64\ndata type can store a larger set of numbers than\nfloat32\n.\nExample\nThis example shows how to declare a variable of type\nfloat64\n:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x float64 = 1.7e+308\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}\n\nWhich Float Type to Use?\nThe type of float to choose, depends on the value the variable has to store.\nExample\nThis example will result in an error because 3.4e+39 is out of range for float32:\npackage main\nimport (\"fmt\")\nfunc main() {\nvar x float32= 3.4e+39\nfmt.Println(x)\n}\nResult:\n./prog.go:5:7: constant 3.4e+39 overflows float32\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float32 = 123.78\nvar \n    y float32 = 3.4e+38\nfmt.Printf(\"Type: %T, value: %v\\n\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float64 = 1.7e+308\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float32= 3.4e+39\nfmt.Println(x)\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float32 = 123.78\nvar \n# TODO: Complete this line\nfmt.Printf(\"Type: %T, value: %v\\n\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float32 = 123.78\nvar \n    y float32 = 3.4e+38\nfmt.Printf(\"Type: %T, value: %v\\n\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", \n    y, y)\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float64 = 1.7e+308\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nvar x float64 = 1.7e+308\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}"
    }
  ],
  "related_topics": [
    {
      "id": "3c443b31-5433-4ce5-a63e-0f1257a0c972",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "56f40b6f-e966-4ab8-baea-680c581d5b47",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b0623123-704e-4859-9e9e-99b7a45e8a54",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go Float Data Types\n\nGo Float Data Types\nThe float data types?",
      "options": [
        "None of the above.",
        "used to store positive and negative numbers with a decimal point",
        "float64",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Go Float Data Types\n\nGo Float Data Types\nThe float data types is 'used to store positive and negative numbers with a decimal point'."
    },
    {
      "question": "What is The default type for float?",
      "options": [
        "used to store positive and negative numbers with a decimal point",
        "None of the above.",
        "None of the above.",
        "float64"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The default type for float is 'float64'."
    }
  ],
  "summary": "This tutorial covers Go Float Data Types concepts and techniques. You'll learn how to use Go Float Data Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Float Data Types and how to apply it in your projects."
}