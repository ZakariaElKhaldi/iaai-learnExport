{
  "id": "722dca64-30bb-47cb-bc1f-3e5aa5247358",
  "title": "GoGetting Started",
  "slug": "gogetting-started",
  "metadata": {
    "description": "Learn about GoGetting Started with clear explanations and practical examples.",
    "keywords": [
      "go",
      "code",
      "type",
      "hello",
      "file",
      "helloworld",
      "install",
      "command",
      "open",
      "main",
      "world"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Get Started"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go\nGetting Started",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Get Started\nTo start using Go, you need two things:\nA text editor, like VS Code, to write Go code\nA compiler, like GCC, to translate the Go code into a language that the computer will understand\nThere are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).\nGo Install\nYou can find the relevant installation files at\nhttps://golang.org/dl/\n.\nFollow the instructions related to your operating system. To check if Go was installed successfully, you can run the following command in a terminal window:\ngo version\nWhich should show the version of your Go installation.\nGo Install IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Visual Studio Code (VS Code), Vim, Eclipse, and Notepad. These are all free, and they can be used to both edit and debug Go code.\nNote:\nWeb-based IDE's can work as well, but functionality is limited.\nWe will use\nVS Code\nin our tutorial, which we believe is a good place to start.\nYou can find the latest version of VS Code at\nhttps://code.visualstudio.com/\n.\nGo Quickstart\nLet's create our first Go program.\nLaunch the VS Code editor\nOpen the extension manager or alternatively, press\nCtrl + Shift + x\nIn the search box, type \"go\" and hit enter\nFind the Go extension by the GO team at Google and install the extension\nAfter the installation is complete, open the command palette by pressing\nCtrl + Shift + p\nRun the\nGo: Install/Update Tools\ncommand\nSelect all the provided tools and click OK\nVS Code is now configured to use Go.\nOpen up a terminal window and type:\ngo mod init example.com/hello\nDo not worry if you do not understand why we type the above command. Just think of it as something that you always do, and that you will learn more about in a later chapter.\nCreate a new file (\nFile > New File\n). Copy and paste the following code and save the file as\nhelloworld.go\n(\nFile \n> Save As\n):\nhelloworld.go\npackage main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}\nNow, run the code: Open a terminal in VS Code and type:\ngo run .\\helloworld.go\nHello World!\nCongratulations\n! You have now written and executed your first Go program.\nIf you want to save the program as an executable, type and run:\ngo build .\\helloworld.go\nLearning Go At \nWhen learning Go at .com, you can use our \"\nyou to understand every part as we move forward:\nhelloworld.go\nCode:\npackage main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}\nResult:\nHello World!\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "helloworld.go",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of helloworld.go"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\n# TODO: Complete this line\nfmt.Println(\"Hello World!\")\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}"
    }
  ],
  "related_topics": [
    {
      "id": "ac33703d-9c3c-4f46-88f8-6492412be8b1",
      "title": "Go Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "b5e8eb8a-780a-4cee-8843-42d6ee842915",
      "title": "Go Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is to translate the Go code into a language that the computer will understand\nThere?",
      "options": [
        "None of the above.",
        "Not a to translate the Go code into a language that the computer will understand\nThere.",
        "None of the above.",
        "many text editors and compilers to choose from"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of to translate the Go code into a language that the computer will understand\nThere is 'many text editors and compilers to choose from'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers GoGetting Started concepts and techniques. You'll learn how to use GoGetting Started effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GoGetting Started and how to apply it in your projects."
}