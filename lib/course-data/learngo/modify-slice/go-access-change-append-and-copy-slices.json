{
  "id": "e98ba76a-d7bc-43a7-9760-0117a9a3c66b",
  "title": "Go Access, Change, Append and Copy Slices",
  "slug": "go-access-change-append-and-copy-slices",
  "metadata": {
    "description": "Learn about Go Access, Change, Append and Copy Slices with clear explanations and practical examples.",
    "keywords": [
      "c",
      "slice",
      "printf",
      "length",
      "capacity",
      "append",
      "elements",
      "example",
      "main",
      "change",
      "copy"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Modify Slice"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go Access, Change, Append and Copy Slices",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Access Elements of a Slice\nYou can access a specific slice element by referring to the index number.\nIn Go, indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.\nExample\nThis example shows how to access the first and third elements in the prices slice:\npackage main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}\nResult:\n10\n30\n\nChange Elements of a Slice\nYou can also change a specific slice element by referring to the index number.\nExample\nThis example shows how to change the third element in the prices slice:\npackage main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nprices[2] = 50\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}\nResult:\n10\n50\n\nAppend Elements To a Slice\nYou can append elements to the end of a slice using the\nappend()\nfunction:\nSyntax\nslice_name\n= append(\nslice_name\n,\nelement1\n,\nelement2\n, ...)\nExample\nThis example shows how to append elements to the end of a slice:\npackage main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{1, 2, 3, 4, 5, 6}\nfmt.Printf(\"myslice1 = \n    %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    append(myslice1, 20, 21)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = \n    %d\\n\", cap(myslice1))\n}\nResult:\nmyslice1 = [1 2 3 4 5 6]\nlength = 6\ncapacity = 6\nmyslice1 = [1 2 3 \n    4 5 6 20 21]\nlength = 8\ncapacity = 12\n\nAppend One Slice To Another Slice\nTo append all the elements of one slice to another slice, use the\nappend()\nfunction:\nSyntax\nslice3\n= append(\nslice1\n,\nslice2\n...)\nNote:\nThe\n'...'\nafter\nslice2\nis\nnecessary\nwhen appending the elements of one slice to another.\nExample\nThis example shows how to append one slice to another slice:\npackage main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{1,2,3}\nmyslice2 := []int{4,5,6}\nmyslice3 := append(myslice1, myslice2...)\nfmt.Printf(\"myslice3=%v\\n\", \n    myslice3)\nfmt.Printf(\"length=%d\\n\", len(myslice3))\nfmt.Printf(\"capacity=%d\\n\", cap(myslice3))\n}\nResult:\nmyslice3=[1 2 3 4 5 6]\nlength=6\ncapacity=6\n\nChange The Length of a Slice\nUnlike arrays, it is possible to change the length of a slice.\nExample\nThis example shows how to change the length of a slice:\npackage main\nimport (\"fmt\")\nfunc main() {\narr1 := [6]int{9, 10, 11, 12, 13, 14} // An array\nmyslice1 \n    := arr1[1:5] // Slice array\nfmt.Printf(\"myslice1 = %v\\n\", \n    myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    arr1[1:3] // Change length by re-slicing the array\nfmt.Printf(\"myslice1 \n    = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    append(myslice1, 20, 21, 22, 23) // Change length by appending items\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n}\nResult:\nmyslice1 = [10 11 12 13]\nlength = 4\ncapacity = 5\nmyslice1 = [10 11]\nlength = 2\ncapacity = 5\nmyslice1 = [10 11 20 21 22 23]\nlength = 6\ncapacity = 10\n\nMemory Efficiency\nWhen using slices, Go loads all the underlying elements \ninto the memory.\nIf the array is large and you need only a few elements, it is better to copy those elements using the\ncopy()\nfunction.\nThe\ncopy()\nfunction creates a new underlying array with only the required elements for the slice. This will reduce the memory used for the program.\nSyntax\ncopy(\ndest\n,\nsrc\n)\nThe\ncopy()\nfunction takes in two slices\ndest\nand\nsrc\n, and copies data from\nsrc\nto\ndest\n. \nIt returns the number of elements copied.\nExample\nThis example shows how to use the\ncopy()\nfunction:\npackage main\nimport (\"fmt\")\nfunc main() {\nnumbers := []int{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n// Original slice\nfmt.Printf(\"numbers = %v\\n\", numbers)\nfmt.Printf(\"length = %d\\n\", len(numbers))\nfmt.Printf(\"capacity = \n    %d\\n\", cap(numbers))\n// Create copy with only needed numbers\nneededNumbers := numbers[:len(numbers)-10]\nnumbersCopy := make([]int, \n    len(neededNumbers))\ncopy(numbersCopy, neededNumbers)\nfmt.Printf(\"numbersCopy = %v\\n\", numbersCopy)\nfmt.Printf(\"length = \n    %d\\n\", len(numbersCopy))\nfmt.Printf(\"capacity = %d\\n\", cap(numbersCopy))\n}\nResult:\n// Original slice\nnumbers = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]\nlength = 15\ncapacity = \n    15\n// New slice\nnumbersCopy = [1 2 3 4 5]\nlength = 5\ncapacity = 5\n\nThe capacity of the new slice is now less than the capacity of the original slice because the new underlying array is smaller.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nprices[2] = 50\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 5,
      "code": "slice_name\n= append(\nslice_name\n,\nelement1\n,\nelement2\n, ...)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{1, 2, 3, 4, 5, 6}\nfmt.Printf(\"myslice1 = \n    %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    append(myslice1, 20, 21)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = \n    %d\\n\", cap(myslice1))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 7,
      "code": "slice3\n= append(\nslice1\n,\nslice2\n...)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nmyslice1 := []int{1,2,3}\nmyslice2 := []int{4,5,6}\nmyslice3 := append(myslice1, myslice2...)\nfmt.Printf(\"myslice3=%v\\n\", \n    myslice3)\nfmt.Printf(\"length=%d\\n\", len(myslice3))\nfmt.Printf(\"capacity=%d\\n\", cap(myslice3))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\narr1 := [6]int{9, 10, 11, 12, 13, 14} // An array\nmyslice1 \n    := arr1[1:5] // Slice array\nfmt.Printf(\"myslice1 = %v\\n\", \n    myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    arr1[1:3] // Change length by re-slicing the array\nfmt.Printf(\"myslice1 \n    = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\nmyslice1 = \n    append(myslice1, 20, 21, 22, 23) // Change length by appending items\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = \n    %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 10,
      "code": "copy(\ndest\n,\nsrc\n)",
      "language": "java",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nnumbers := []int{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n// Original slice\nfmt.Printf(\"numbers = %v\\n\", numbers)\nfmt.Printf(\"length = %d\\n\", len(numbers))\nfmt.Printf(\"capacity = \n    %d\\n\", cap(numbers))\n// Create copy with only needed numbers\nneededNumbers := numbers[:len(numbers)-10]\nnumbersCopy := make([]int, \n    len(neededNumbers))\ncopy(numbersCopy, neededNumbers)\nfmt.Printf(\"numbersCopy = %v\\n\", numbersCopy)\nfmt.Printf(\"length = \n    %d\\n\", len(numbersCopy))\nfmt.Printf(\"capacity = %d\\n\", cap(numbersCopy))\n}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nfmt.Println(prices[0])\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\n# TODO: Complete this line\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nprices := []int{10,20,30}\nprices[2] = 50\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}"
    }
  ],
  "related_topics": [
    {
      "id": "e55cac72-ed79-4d16-9998-45bfd9a7d1b9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "39f2976e-206a-4dfc-9dc1-cd25d2fc9dcd",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b0c1b0a5-7b00-42e5-bae4-2b9fd9ec4452",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is That?",
      "options": [
        "None of the above.",
        "Not a That.",
        "that [0] is the first element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of That is 'that [0] is the first element'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Go Access, Change, Append and Copy Slices concepts and techniques. You'll learn how to use Go Access, Change, Append and Copy Slices effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Go Access, Change, Append and Copy Slices and how to apply it in your projects."
}