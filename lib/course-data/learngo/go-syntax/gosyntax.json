{
  "id": "986f4e9f-abe5-4dab-b7c0-a1797e856e3f",
  "title": "GoSyntax",
  "slug": "gosyntax",
  "metadata": {
    "description": "Learn about GoSyntax with clear explanations and practical examples.",
    "keywords": [
      "go",
      "package",
      "main",
      "code",
      "line",
      "import",
      "hello",
      "world",
      "example",
      "func",
      "println"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnGo",
    "subcategory": "Go Syntax"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Go\nSyntax",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Go Syntax\nA Go file consists of the following parts:\nPackage declaration\nImport packages\nFunctions\nStatements and expressions\nLook at the following code, to understand it better:\nExample\npackage main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}\n\nExample explained\nLine 1:\nIn Go, every program is part of a package. We define this using the\npackage\nkeyword. In this example, the program belongs to the\nmain\npackage.\nLine 2:\nimport (\"fmt\")\nlets us import files included in \nthe\nfmt\npackage.\nLine 3:\nA blank line. Go ignores white space. Having white spaces in code makes it more readable.\nLine 4:\nfunc main() {}\nis a function. Any code inside its curly brackets\n{}\nwill be executed.\nLine 5:\nfmt.Println()\nis a function made available from the\nfmt\npackage. It is used to output/print text. In our example it will output \"Hello World!\".\nNote:\nIn Go, any executable code belongs to the\nmain\npackage.\nGo Statements\nfmt.Println(\"Hello World!\")\nis a statement.\nIn Go, statements are separated by ending a line (hitting the Enter key) or by \na semicolon \"\n;\n\".\nHitting the Enter key adds \"\n;\n\" to the end of the line implicitly (does not show up in the source code).\nThe left curly bracket\n{\ncannot come at the start of a line.\nRun the following code and see what happens:\nExample\npackage main\nimport (\"fmt\")\nfunc main()\n{\nfmt.Println(\"Hello World!\")\n}\n\nGo Compact Code\nYou can write more compact code, like shown below (this is not recommended because it makes the code \nmore difficult to read):\nExample\npackage main; import (\"fmt\"); func main() { fmt.Println(\"Hello World!\");}\n\nGo Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing part of the code below to output \"Hello World\".\npackage main   \nimport (\"fmt\")\nfunc main() {\n(\"Hello World!\")\n}\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "package main\nimport (\"fmt\")\nfunc main()\n{\nfmt.Println(\"Hello World!\")\n}",
      "language": "java",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "package main; import (\"fmt\"); func main() { fmt.Println(\"Hello World!\");}",
      "language": "java",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\nfunc main() {\n# TODO: Complete this line\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main() {\nfmt.Println(\"Hello World!\")\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "package main\nimport (\"fmt\")\n# TODO: Complete this line\n{\nfmt.Println(\"Hello World!\")\n}",
      "solution": "package main\nimport (\"fmt\")\nfunc main()\n{\nfmt.Println(\"Hello World!\")\n}"
    }
  ],
  "related_topics": [
    {
      "id": "0679ad8f-6121-436b-beed-3f5b91ba4c04",
      "title": "Go Functions and Methods",
      "relationship": "next_topic"
    },
    {
      "id": "177d7570-17d2-4374-aeaa-238e289e61f6",
      "title": "Go Data Structures",
      "relationship": "suggested_next"
    }
  ],
  "quiz": [
    {
      "question": "What is every program?",
      "options": [
        "Not a every program.",
        "part of a package",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of every program is 'part of a package'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers GoSyntax concepts and techniques. You'll learn how to use GoSyntax effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of GoSyntax and how to apply it in your projects."
}