{
  "title": "TensorFlow Modelling",
  "url": "https://www.w3schools.com/ai/ai_tensorflow_modelling.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Example 1 Model",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Shuffle Data",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h4"
      },
      "text": "Always shuffle data before training.",
      "level": "h4"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When a model is trained, the data is divided into small sets (batches). Each batch is then fed to the model. Shuffling is important to prevent the model getting the same data over again. If using the same data twice, the model will not be able to generalize the data and give the right output. Shuffling gives a better variety of data in each batch.",
      "html": "<p>When a model is trained, the data is divided into small sets (batches).\nEach batch is then fed to the model.\nShuffling is important to prevent the model getting the same data over again.\nIf using the same data twice, the model will not be able to generalize the data\nand give the right output. Shuffling gives a better variety of data in each batch.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\ntf.util.shuffle(data);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "util",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "shuffle",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "tf.util.shuffle(data);",
      "syntax_highlighting": [
        {
          "text": "\ntf.util.shuffle(data);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "util",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "shuffle",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\ntf.<span class=\"jspropertycolor\" style=\"color:black\">util</span>.<span class=\"jspropertycolor\" style=\"color:black\">shuffle</span>(data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\ntf.util.shuffle(data);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "util",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "shuffle",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "TensorFlow Tensors",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To use TensorFlow, input data needs to be converted to tensor data:",
      "html": "<p>To use TensorFlow, input data needs to be converted to tensor data:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Map x values to Tensor inputs",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "x",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Map y values to Tensor labels",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "y",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Convert inputs and labels to 2d tensors",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "tensor2d",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "tensor2d",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
      "syntax_highlighting": [
        {
          "text": "\n// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Map x values to Tensor inputs",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "map",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "x",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Map y values to Tensor labels",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "map",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "y",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Convert inputs and labels to 2d tensors",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "tensor2d",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "tensor2d",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map x values to Tensor inputs<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputs = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">x</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map y values to Tensor labels<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labels = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">y</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Convert inputs and labels to 2d tensors<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(inputs, [inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(labels, [labels.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Map x values to Tensor inputs",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "x",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Map y values to Tensor labels",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "y",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Convert inputs and labels to 2d tensors",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "tensor2d",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "tensor2d",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Data Normalization",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Data should be normalized before being used in a neural network.",
      "html": "<p>Data should be normalized before being used in a neural network.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A range of 0 - 1 using min-max are often best for numerical data:",
      "html": "<p>A range of 0 - 1 using min-max are often best for numerical data:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "min",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "max",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "min",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "max",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "sub",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "div",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "sub",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "sub",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "div",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "sub",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
      "syntax_highlighting": [
        {
          "text": "\nconst inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "min",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "max",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "min",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "max",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "sub",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "div",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "sub",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "sub",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "div",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "sub",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMin = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMax = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMin = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMax = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmInputs = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(inputMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin));<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmLabels = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(labelMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "min",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "max",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "min",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "max",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "sub",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "div",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "sub",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "sub",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "div",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "sub",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Tensorflow Model",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Machine Learning Model is an algorithm that produces output from input.",
      "html": "<p>A <b>Machine Learning Model</b> is an algorithm that produces output from input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This example uses 3 lines to define a ML Model :",
      "html": "<p>This example uses 3 lines to define a <b>ML Model</b>:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "sequential",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "add",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "layers",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "dense",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "add",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "layers",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "dense",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
      "syntax_highlighting": [
        {
          "text": "\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "sequential",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "add",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "layers",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "dense",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "add",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "layers",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "dense",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> model = tf.<span class=\"jspropertycolor\" style=\"color:black\">sequential</span>();<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({inputShape: [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "sequential",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "add",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "layers",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "dense",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "add",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "layers",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "dense",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Sequential ML Model",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "const model = tf.sequential(); creates a Sequential ML Model .",
      "html": "<p><span>const model = tf.sequential();</span>\ncreates a <b>Sequential ML Model</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In a sequential model, the input flows directly to the output. Other models can have multiple inputs and multiple outputs. Sequential is the easiest ML model. It allows you to build a model layer by layer, with weights that correspond to the next layer.",
      "html": "<p>In a sequential model, the input flows directly to the output. \nOther models can have multiple inputs and multiple outputs.\nSequential is the easiest ML model.\nIt allows you to build a model layer by layer,\nwith weights that correspond to the next layer.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "TensorFlow Layers",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "model.add() is used to add two layers to the model.",
      "html": "<p><span>model.add()</span> is used to add two layers to the model.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "tf.layer.dense is a layer type that works in most cases. It multiplies its inputs by a weight-matrix and adds a number (bias) to the result.",
      "html": "<p><span>tf.layer.dense</span> is a layer type that works in most cases.\nIt multiplies its inputs by a weight-matrix and adds a number (bias) to the result.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Shapes and Units",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "inputShape: [1] because we have 1 input (x = horsepower).",
      "html": "<p><span>inputShape: [1]</span> because we have 1 input (x = horsepower).\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "units: 1 defines the size of the weight matrix: 1 weight for each input (x value).",
      "html": "<p><span>units: 1</span> defines the size of the weight matrix:\n1 weight for each input (x value).\n</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Compiling a Model",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Compile the model with a specified optimizer and loss function:",
      "html": "<p>Compile the model with a specified <b>optimizer</b> and <b>loss</b> function:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\nmodel.compile({loss: 'meanSquaredError', optimizer:'sgd'});\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "compile",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'meanSquaredError'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'sgd'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});",
      "syntax_highlighting": [
        {
          "text": "\nmodel.compile({loss: 'meanSquaredError', optimizer:'sgd'});\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "compile",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'meanSquaredError'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'sgd'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">compile</span>({loss: <span class=\"jsstringcolor\" style=\"color:green\">'meanSquaredError'</span>, optimizer:<span class=\"jsstringcolor\" style=\"color:green\">'sgd'</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\nmodel.compile({loss: 'meanSquaredError', optimizer:'sgd'});\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "compile",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'meanSquaredError'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'sgd'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The compiler is set to use the sgd optimizer. It is simple to use and quite effective.",
      "html": "<p>The compiler is set to use the <span>sgd</span> optimizer.\nIt is simple to use and quite effective.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "meanSquaredError is the function we want to use to compare model predictions and true values.",
      "html": "<p><span>meanSquaredError</span>\nis the function we want to use to compare model predictions and true values.</p>"
    }
  ]
}