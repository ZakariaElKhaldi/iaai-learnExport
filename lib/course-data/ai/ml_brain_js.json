{
  "title": "Brain.js",
  "url": "https://www.w3schools.com/ai/ai_brainjs.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Brain.js",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Brain.js is a JavaScript library that makes it easy to understand Neural Networks because it hides the complexity of the mathematics.",
      "html": "<p><b>Brain.js</b> is a JavaScript library that makes it easy to understand Neural Networks\nbecause it hides the complexity of the mathematics.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Building a Neural Network",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Building a neural network with Brain.js:",
      "html": "<p>Building a neural network with Brain.js:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_brain_xor",
        "syntaxHighlighting": [
          {
            "text": "\n// Create a Neural Networkconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n \u00a0{input:[0,0], output:{zero:1}},\n \u00a0{input:[0,1], output:{one:1}},\n \u00a0{input:[1,0], output:{one:1},\n \u00a0{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create a Neural Network",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "NeuralNetwork",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Train the Network with 4 input objects",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "train",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// What is the expected output of [1,0]?",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "run",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Display the probability for \"zero\" and \"one\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"one\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\" \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"zero\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Create a Neural Networkconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];",
      "syntax_highlighting": [
        {
          "text": "\n// Create a Neural Networkconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n \u00a0{input:[0,0], output:{zero:1}},\n \u00a0{input:[0,1], output:{one:1}},\n \u00a0{input:[1,0], output:{one:1},\n \u00a0{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create a Neural Network",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "NeuralNetwork",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Train the Network with 4 input objects",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "train",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// What is the expected output of [1,0]?",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "run",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Display the probability for \"zero\" and \"one\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"one\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\" \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"zero\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Neural Network<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> network = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> brain.<span class=\"jspropertycolor\" style=\"color:black\">NeuralNetwork</span>();<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Network with 4 input objects<br/></span>\nnetwork.<span class=\"jspropertycolor\" style=\"color:black\">train</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> \u00a0{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{zero:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> \u00a0{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], output:{one:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> \u00a0{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{one:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> \u00a0{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], output:{zero:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// What is the expected output of [1,0]?<br/></span>\nresult = network.<span class=\"jspropertycolor\" style=\"color:black\">run</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display the probability for \"zero\" and \"one\"<br/></span>\n.<span class=\"jspropertycolor\" style=\"color:black\"></span>.<span class=\"jspropertycolor\" style=\"color:black\"></span>.<span class=\"jspropertycolor\" style=\"color:black\"></span> result[<span class=\"jsstringcolor\" style=\"color:green\">\"one\"</span>] + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + result[<span class=\"jsstringcolor\" style=\"color:green\">\"zero\"</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_brain_xor",
      "syntax_highlighting_data": [
        {
          "text": "\n// Create a Neural Networkconst network = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnetwork.train([\n \u00a0{input:[0,0], output:{zero:1}},\n \u00a0{input:[0,1], output:{one:1}},\n \u00a0{input:[1,0], output:{one:1},\n \u00a0{input:[1,1], output:{zero:1},\n]);\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create a Neural Network",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "NeuralNetwork",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Train the Network with 4 input objects",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "train",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// What is the expected output of [1,0]?",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "run",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Display the probability for \"zero\" and \"one\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"one\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\" \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"zero\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Example Explained:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Neural Network is created with: new brain.NeuralNetwork()",
      "html": "<p>A Neural Network is created with: <code>new brain.NeuralNetwork()</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The network is trained with network.train([examples])",
      "html": "<p>The network is trained with <code>network.train([examples])</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The examples represent 4 input values with a corresponding output value.",
      "html": "<p>The examples represent 4 input values with a corresponding output value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With network.run([1,0]) , you ask \"What is the likely output of [1,0]?\"",
      "html": "<p>With <code>network.run([1,0])</code>, you ask \"What is the likely output of [1,0]?\"</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The answer from the network is:",
      "html": "<p>The answer from the network is:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "How to Predict a Contrast",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With CSS, colors can be set by RGB:",
      "html": "<p>With CSS, colors can be set by RGB:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_colornames",
        "syntaxHighlighting": [],
        "classList": [
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<div class=\"notranslate\">\n<div class=\"w3-responsive\">\n<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th style=\"width:50%\">Color</th>\n<th>RGB</th>\n</tr>\n<tr><td style=\"background-color:rgb(0,0,0);color:white\">Black</td><td>RGB(0,0,0)</td></tr>\n<tr><td style=\"background-color:rgb(255,255,0)\">Yellow</td><td>RGB(255,255,0)</td></tr>\n<tr><td style=\"background-color:rgb(255,0,0);color:white\">Red</td><td>RGB(255,0,0)</td></tr>\n<tr><td style=\"background-color:rgb(255,255,255)\">White</td><td>RGB(255,255,255)</td></tr>\n<tr><td style=\"background-color:rgb(192,192,192)\">Light Gray</td><td>RGB(192,192,192)</td></tr>\n<tr><td style=\"background-color:rgb(65,65,65);color:white\">Dark Gray</td><td>RGB(65,65,65)</td></tr>\n</tbody></table>\n</div>\n</div>",
      "code_classes": [
        "notranslate"
      ],
      "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_colornames",
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example below demonstrates how to predict the darkness of a color:",
      "html": "<p>The example below demonstrates how to predict the darkness of a color:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_brain_contrast",
        "syntaxHighlighting": [
          {
            "text": "\n// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0){ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Create a Neural Network",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "new",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "NeuralNetwork",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Train the Network with 4 input objects",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "train",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// White RGB(255, 255, 255)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Light grey (192,192,192)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "192",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "192",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "192",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Darkgrey (64, 64, 64)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "65",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "65",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "65",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Black (0, 0, 0)",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// What is the expected output of Dark Blue (0, 0, 128)?",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "run",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "128",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "255",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Display the probability of \"dark\" and \"light\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"dark\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\" \"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"light\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0){ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];",
      "syntax_highlighting": [
        {
          "text": "\n// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0){ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Create a Neural Network",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "new",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "NeuralNetwork",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Train the Network with 4 input objects",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "train",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// White RGB(255, 255, 255)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Light grey (192,192,192)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "192",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "192",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "192",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Darkgrey (64, 64, 64)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "65",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "65",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "65",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Black (0, 0, 0)",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// What is the expected output of Dark Blue (0, 0, 128)?",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "run",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "128",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "255",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Display the probability of \"dark\" and \"light\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"dark\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\" \"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"light\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Neural Network<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> net = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> brain.<span class=\"jspropertycolor\" style=\"color:black\">NeuralNetwork</span>();<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Network with 4 input objects<br/></span>\nnet.<span class=\"jspropertycolor\" style=\"color:black\">train</span>([<br/><span class=\"commentcolor\" style=\"color:slategray\">// White RGB(255, 255, 255)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{light:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Light grey (192,192,192)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{light:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Darkgrey (64, 64, 64)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{ input:[<span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{dark:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Black (0, 0, 0)<br/></span>{ input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{dark:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// What is the expected output of Dark Blue (0, 0, 128)?<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = net.<span class=\"jspropertycolor\" style=\"color:black\">run</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">128</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display the probability of \"dark\" and \"light\"<br/></span>\n.<span class=\"jspropertycolor\" style=\"color:black\"></span>.<span class=\"jspropertycolor\" style=\"color:black\"></span>.<span class=\"jspropertycolor\" style=\"color:black\"></span> result[<span class=\"jsstringcolor\" style=\"color:green\">\"dark\"</span>] + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + result[<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_brain_contrast",
      "syntax_highlighting_data": [
        {
          "text": "\n// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n// Train the Network with 4 input objects\nnet.train([// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0){ input:[0, 0, 0], output:{dark:1}},\n]);\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Create a Neural Network",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "new",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "NeuralNetwork",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Train the Network with 4 input objects",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "train",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// White RGB(255, 255, 255)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Light grey (192,192,192)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "192",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "192",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "192",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Darkgrey (64, 64, 64)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "65",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "65",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "65",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Black (0, 0, 0)",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// What is the expected output of Dark Blue (0, 0, 128)?",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "run",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "128",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "255",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Display the probability of \"dark\" and \"light\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"dark\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\" \"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"light\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "Example Explained:",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Neural Network is created with: new brain.NeuralNetwork()",
      "html": "<p>A Neural Network is created with: <code>new brain.NeuralNetwork()</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The network is trained with network.train([examples])",
      "html": "<p>The network is trained with <code>network.train([examples])</code></p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The examples represent 4 input values a corresponding output value.",
      "html": "<p>The examples represent 4 input values a corresponding output value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With network.run([0,0,128/255]) , you ask \"What is the likely output of dark blue?\"",
      "html": "<p>With <code>network.run([0,0,128/255])</code>, you ask \"What is the likely output of dark blue?\"</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The answer from the network is:",
      "html": "<p>The answer from the network is:\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Why not edit the example to test the likely output of yellow or red?",
      "html": "<p>Why not edit the example to test the likely output of yellow or red?</p>"
    }
  ]
}