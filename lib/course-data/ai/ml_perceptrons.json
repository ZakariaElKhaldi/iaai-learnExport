{
  "title": "Perceptrons",
  "url": "https://www.w3schools.com/ai/ai_perceptrons.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Perceptrons",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Perceptron is an Artificial Neuron .",
      "html": "<p>A <b>Perceptron</b> is an <b>Artificial Neuron</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is the simplest possible Neural Network .",
      "html": "<p>It is the simplest possible <b>Neural Network</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Neural Networks are the building blocks of Machine Learning .",
      "html": "<p><b>Neural Networks</b> are the building blocks of <b>Machine Learning</b>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Frank Rosenblatt",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Frank Rosenblatt (1928 \u2013 1971) was an American psychologist notable in the field of Artificial Intelligence.",
      "html": "<p><b>Frank Rosenblatt</b> (1928 \u2013 1971) was an American psychologist\nnotable in the field of Artificial Intelligence.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In 1957 he started something really big. He \"invented\" a Perceptron program, on an IBM 704 computer at Cornell Aeronautical Laboratory.",
      "html": "<p>In <b>1957</b> he started something really big. He \"invented\" a <b>Perceptron</b> program,\non an IBM 704 computer at Cornell Aeronautical Laboratory.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Scientists had discovered that brain cells ( Neurons ) receive input from our senses by electrical signals.",
      "html": "<p>Scientists had discovered that brain cells (<b>Neurons</b>)\nreceive input from our senses by electrical signals.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Neurons, then again, use electrical signals to store information, and to make decisions based on previous input.",
      "html": "<p>The Neurons, then again, use electrical signals to store information, and to make decisions based on previous input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Frank had the idea that Perceptrons could simulate brain principles, with the ability to learn and make decisions.",
      "html": "<p>Frank had the idea that <b>Perceptrons</b> could simulate brain principles, with the ability to learn and make decisions.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Perceptron",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The original Perceptron was designed to take a number of binary inputs, and produce one binary output (0 or 1).",
      "html": "<p>The original <b>Perceptron</b> was designed to take a number of <b>binary</b> inputs, and produce one <b>binary</b>\noutput (0 or 1).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The idea was to use different weights to represent the importance of each input , and that the sum of the values should be greater than a threshold value before making a decision like yes or no (true or false) (0 or 1).",
      "html": "<p>The idea was to use different <b>weights</b> to represent the importance of each <b>input</b>,\nand that the sum of the values should be greater than a <b>threshold</b> value before making a \ndecision like <b>yes</b> or <b>no</b> (true or false) (0 or 1).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "",
      "html": "<p><img alt=\"Perceptron\" src=\"img_perceptron.jpg\" style=\"width:100%;max-width:500px\"/></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Perceptron Example",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Imagine a perceptron (in your brain).",
      "html": "<p>Imagine a perceptron (in your brain).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The perceptron tries to decide if you should go to a concert.",
      "html": "<p>The perceptron tries to decide if you should go to a concert.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Is the artist good? Is the weather good?",
      "html": "<p>Is the artist good? Is the weather good?</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What weights should these facts have?",
      "html": "<p>What weights should these facts have?</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Perceptron Algorithm",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Frank Rosenblatt suggested this algorithm:",
      "html": "<p>Frank Rosenblatt suggested this algorithm:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "1. Set a threshold value :",
      "html": "<p><b>1. Set a threshold value</b>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "2. Multiply all inputs with its weights :",
      "html": "<p><b>2. Multiply all inputs with its weights</b>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "3. Sum all the results :",
      "html": "<p><b>3. Sum all the results</b>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "4. Activate the Output :",
      "html": "<p><b>4. Activate the Output</b>:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the weather weight is 0.6 for you, it might be different for someone else. A higher weight means that the weather is more important to them.",
      "html": "<p>If the weather weight is 0.6 for you, it might be different for someone else.\nA higher weight means that the weather is more important to them.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If the threshold value is 1.5 for you, it might be different for someone else. A lower threshold means they are more wanting to go to any concert.",
      "html": "<p>If the threshold value is 1.5 for you, it might be different for someone else.\nA lower threshold means they are more wanting to go to any concert.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_perceptron_1",
        "syntaxHighlighting": [
          {
            "text": "\nconst threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\n\u00a0\u00a0sum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);\n ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1.5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0.7",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0.6",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0.5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0.3",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0.4",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "for",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1.5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);",
      "syntax_highlighting": [
        {
          "text": "\nconst threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\n\u00a0\u00a0sum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1.5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0.7",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0.6",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0.5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0.3",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0.4",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "for",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1.5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> threshold = <span class=\"jsnumbercolor\" style=\"color:#905\">1.5</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputs = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> weights = [<span class=\"jsnumbercolor\" style=\"color:#905\">0.7</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.4</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>\u00a0\u00a0sum += inputs[i] * weights[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> activate = (sum &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">1.5</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/ai/tryit.asp?filename=tryai_perceptron_1",
      "syntax_highlighting_data": [
        {
          "text": "\nconst threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\n\u00a0\u00a0sum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);\n ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1.5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0.7",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0.6",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0.5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0.3",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0.4",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "for",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1.5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Perceptron in AI",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Perceptron is an Artificial Neuron .",
      "html": "<p>A <b>Perceptron</b> is an <b>Artificial Neuron</b>.\n</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is inspired by the function of a Biological Neuron .",
      "html": "<p>It is inspired by the function of a <b>Biological Neuron</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It plays a crucial role in Artificial Intelligence .",
      "html": "<p>It plays a crucial role in <b>Artificial Intelligence</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is an important building block in Neural Networks .",
      "html": "<p>It is an important building block in <b>Neural Networks</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To understand the theory behind it, we can break down its components:",
      "html": "<p>To understand the theory behind it, we can break down its components:</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "1. Perceptron Inputs",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A perceptron receives one or more input.",
      "html": "<p>A perceptron receives one or more input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Perceptron inputs are called nodes .",
      "html": "<p>Perceptron inputs are called <b>nodes</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The nodes have both a value and a weight .",
      "html": "<p>The nodes have both a <b>value</b> and a <b>weight</b>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "2. Node Values (Input Values)",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Input nodes have a binary value of 1 or 0 .",
      "html": "<p>Input nodes have a binary value of <b>1</b> or <b>0</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This can be interpreted as true or false / yes or no .",
      "html": "<p>This can be interpreted as <b>true</b> or <b>false</b> / <b>yes</b> or <b>no</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The values are: 1, 0, 1, 0, 1",
      "html": "<p>The values are: <span>1, 0, 1, 0, 1</span></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "3. Node Weights",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Weights are values assigned to each input.",
      "html": "<p>Weights are values assigned to each input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Weights shows the strength of each node.",
      "html": "<p>Weights shows the <b>strength</b> of each node.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A higher value means that the input has a stronger influence on the output.",
      "html": "<p>A higher value means that the input has a stronger influence on the output.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The weights are: 0.7, 0.6, 0.5, 0.3, 0.4",
      "html": "<p>The weights are: <span>0.7, 0.6, 0.5, 0.3, 0.4</span></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "4. Summation",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The perceptron calculates the weighted sum of its inputs.",
      "html": "<p>The perceptron calculates the weighted sum of its inputs.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It multiplies each input by its corresponding weight and sums up the results.",
      "html": "<p>It multiplies each input by its corresponding weight and sums up the results.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The sum is: 0.7*1 + 0.6*0 + 0.5*1 + 0.3*0 + 0.4*1 = 1.6",
      "html": "<p>The sum is: <span>0.7*1 + 0.6*0 + 0.5*1 + 0.3*0 + 0.4*1 = 1.6</span>\n</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "6. The Threshold",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Threshold is the value needed for the perceptron to fire (outputs 1), otherwise it remains inactive (outputs 0).",
      "html": "<p>The Threshold is the value needed for the perceptron to fire (outputs 1),\notherwise it remains inactive (outputs 0).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In the example, the treshold value is: 1.5",
      "html": "<p>In the example, the treshold value is: <span>1.5</span>\n</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "5. The Activation Function",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "After the summation, the perceptron applies the activation function.",
      "html": "<p>After the summation, the perceptron applies the activation function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The purpose is to introduce non-linearity into the output. It determines whether the perceptron should fire or not based on the aggregated input.",
      "html": "<p>The purpose is to introduce non-linearity into the output.\nIt determines whether the perceptron should fire or not based on the aggregated input.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The activation function is simple: (sum > treshold) == (1.6 > 1.5)",
      "html": "<p>The activation function is simple: <span>(sum &gt; treshold) == (1.6 &gt; 1.5)</span></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h3"
      },
      "text": "The Output",
      "level": "h3"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The final output of the perceptron is the result of the activation function.",
      "html": "<p>The final output of the perceptron is the result of the activation function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It represents the perceptron's decision or prediction based on the input and the weights.",
      "html": "<p>It represents the perceptron's decision or prediction based on the input and the weights.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The activation function maps the the weighted sum into a binary value.",
      "html": "<p>The activation function maps the the weighted sum into a binary value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The binary 1 or 0 can be interpreted as true or false / yes or no .",
      "html": "<p>The binary <b>1</b> or <b>0</b> can be interpreted as <b>true</b> or <b>false</b> / <b>yes</b> or <b>no</b>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The output is 1 because: (sum > treshold) == true .",
      "html": "<p>The output is <b>1</b> because: <span>(sum &gt; treshold) == true</span>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Perceptron Learning",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The perceptron can learn from examples through a process called training.",
      "html": "<p>The perceptron can learn from examples through a process called training.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "During training, the perceptron adjusts its weights based on observed errors. This is typically done using a learning algorithm such as the perceptron learning rule or a backpropagation algorithm.",
      "html": "<p>During training, the perceptron adjusts its weights based on observed errors.\nThis is typically done using a learning algorithm such as the perceptron learning rule or a backpropagation algorithm.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The learning process presents the perceptron with labeled examples, where the desired output is known. The perceptron compares its output with the desired output and adjusts its weights accordingly, aiming to minimize the error between the predicted and desired outputs.",
      "html": "<p>The learning process presents the perceptron with labeled examples, where the desired output is known.\nThe perceptron compares its output with the desired output and adjusts its weights accordingly,\naiming to minimize the error between the predicted and desired outputs.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The learning process allows the perceptron to learn the weights that enable it to make accurate predictions for new, unknown inputs.",
      "html": "<p>The learning process allows the perceptron to learn the weights that enable it\nto make accurate predictions for new, unknown inputs.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Note",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It is obvious a decisions can NOT be made by One Neuron alone.",
      "html": "<p>It is obvious a decisions can NOT be made by <b>One Neuron</b> alone.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Other neurons must provide more input:",
      "html": "<p>Other neurons must provide more input:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Multi-Layer Perceptrons can be used for more sophisticated decision making.",
      "html": "<p><b>Multi-Layer Perceptrons</b> can be used for more sophisticated decision making.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "It's important to note that while perceptrons were influential in the development of artificial neural networks, they are limited to learning linearly separable patterns.",
      "html": "<p>It's important to note that while perceptrons were influential in the development of artificial neural networks,\nthey are limited to learning linearly separable patterns.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "However, by stacking multiple perceptrons together in layers and incorporating non-linear activation functions, neural networks can overcome this limitation and learn more complex patterns.",
      "html": "<p>However, by stacking multiple perceptrons together in layers and incorporating non-linear activation functions,\nneural networks can overcome this limitation and learn more complex patterns.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Neural Networks",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The Perceptron defines the first step into Neural Networks :",
      "html": "<p>The <b>Perceptron</b> defines the first step into <b>Neural Networks</b>:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Perceptrons are often used as the building blocks for more complex neural networks, such as multi-layer perceptrons (MLPs) or deep neural networks (DNNs).",
      "html": "<p>Perceptrons are often used as the building blocks for more complex neural networks, such as multi-layer perceptrons\n(MLPs) or deep neural networks (DNNs).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By combining multiple perceptrons in layers and connecting them in a network structure, these models can learn and represent complex patterns and relationships in data, enabling tasks such as image recognition, natural language processing, and decision making.",
      "html": "<p> By combining multiple perceptrons in layers and connecting them in a\nnetwork structure, these models can learn and represent complex patterns and relationships in data,\nenabling tasks such as image recognition, natural language processing, and decision making.</p>"
    }
  ]
}