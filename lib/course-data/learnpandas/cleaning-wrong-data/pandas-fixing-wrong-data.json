{
  "id": "266df961-5133-4ad2-8a8f-873c95f88726",
  "title": "Pandas -Fixing Wrong Data",
  "slug": "pandas-fixing-wrong-data",
  "metadata": {
    "description": "Learn about Pandas -Fixing Wrong Data with clear explanations and practical examples.",
    "keywords": [
      "data",
      "wrong",
      "duration",
      "values",
      "replace",
      "rows",
      "example",
      "sets",
      "like",
      "someone"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnPandas",
    "subcategory": "Cleaning Wrong Data"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Pandas -\nFixing Wrong Data",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Wrong Data\n\"Wrong data\" does not have to be \"empty cells\" or \"wrong format\", it can  \njust be wrong, like if someone registered \"199\" instead of \"1.99\".\nSometimes you can spot wrong data by looking at the data set, because you have an expectation of what \nit should be.\nIf you take a look at our data set, you can see that in row 7, the duration is 450, but for all the other rows the duration is between 30 and 60.\nIt doesn't have to be wrong, but taking in consideration that this is the data set of someone's workout \nsessions,\nwe conclude with the fact that this person did not work out in 450 minutes.\nDuration          Date  Pulse  Maxpulse  Calories\n  0         60  '2020/12/01'    110       130     409.1\n  1         60  '2020/12/02'    117       145     479.0\n  2         60  '2020/12/03'    103       135     340.0\n  3         45  '2020/12/04'    109       175     282.4\n  4         45  '2020/12/05'    117       148     406.0\n  5         60  '2020/12/06'    102       127     300.0\n  6         60  '2020/12/07'    110       136     374.0\n7        450  '2020/12/08'    104       134     253.3\n8         30  '2020/12/09'    109       133     195.1\n  9         60  '2020/12/10'     98       124     269.0\n  10        60  '2020/12/11'    103       147     329.3\n  11        60  '2020/12/12'    100       120     250.7\n  12        60  '2020/12/12'    100       120     250.7\n  13        60  '2020/12/13'    106       128     345.3\n  14        60  '2020/12/14'    104       132     379.3\n  15        60  '2020/12/15'     98       123     275.0\n  16        60  '2020/12/16'     98       120     215.2\n  17        60  '2020/12/17'    100       120     300.0\n  18        45  '2020/12/18'     90       112       NaN\n  19        60  '2020/12/19'    103       123     323.0\n  20        45  '2020/12/20'     97       125     243.0\n  21        60  '2020/12/21'    108       131     364.2\n  22        45           NaN    100       119     282.0\n  23        60  '2020/12/23'    130       101     300.0\n  24        45  '2020/12/24'    105       132     246.0\n  25        60  '2020/12/25'    102       126     334.5\n  26        60      20201226    100       120     250.0\n  27        60  '2020/12/27'     92       118     241.0\n  28        60  '2020/12/28'    103       132       NaN\n  29        60  '2020/12/29'    100       132     280.0\n  30        60  '2020/12/30'    102       129     380.3\n  31        60  '2020/12/31'     92       115     243.0\nHow can we fix wrong values, like the one for \"Duration\" in row 7?\nReplacing Values\nOne way to fix wrong values is to replace them with something else.\nIn our example, it is most likely a typo, and the value should be \"45\" instead of \"450\", and \nwe \ncould just insert \"45\" in row 7:\nExample\nSet \"Duration\" = 45 in row 7:\ndf.loc[7, 'Duration'] = 45\n\nFor small data sets you might be able to replace the wrong data one by one, \nbut not for big data sets.\nTo replace wrong data for larger data sets you can create some rules, e.g. \nset some boundaries for legal values, and replace any values that are outside of the \nboundaries.\nExample\nLoop through all values in the \"Duration\" column.\nIf the value is higher than 120, set it to 120:\nfor x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.loc[x, \"Duration\"] = 120\n\nRemoving Rows\nAnother way of handling wrong data is to remove the rows that contains wrong data.\nThis way you do not have to find out what to replace them with, and there is \na good chance you do not need them to do your analyses.\nExample\nDelete rows where \"Duration\" is higher than 120:\nfor x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.drop(x, inplace = True)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "df.loc[7, 'Duration'] = 45",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "for x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.loc[x, \"Duration\"] = 120",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "for x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.drop(x, inplace = True)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "df.loc[7, 'Duration'] = 45"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "for x in df.index:\n# TODO: Complete this line\ndf.loc[x, \"Duration\"] = 120",
      "solution": "for x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.loc[x, \"Duration\"] = 120"
    }
  ],
  "related_topics": [
    {
      "id": "f864dcc3-578b-43a6-9dae-9c94f2a20927",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "041e3865-4d1e-42f4-80bc-d5a369a7601f",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7a6eb263-dff7-4853-a864-bc6d3d5e131c",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the duration?",
      "options": [
        "the data set of someone's workout \nsessions",
        "None of the above.",
        "450",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of the duration is '450'."
    },
    {
      "question": "What is but taking in consideration that this?",
      "options": [
        "None of the above.",
        "None of the above.",
        "450",
        "the data set of someone's workout \nsessions"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of but taking in consideration that this is 'the data set of someone's workout \nsessions'."
    }
  ],
  "summary": "This tutorial covers Pandas -Fixing Wrong Data concepts and techniques. You'll learn how to use Pandas -Fixing Wrong Data effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Pandas -Fixing Wrong Data and how to apply it in your projects."
}