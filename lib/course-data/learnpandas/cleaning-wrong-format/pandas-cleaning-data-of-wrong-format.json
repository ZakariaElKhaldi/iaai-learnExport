{
  "id": "9c203411-f4bc-43d5-aa3b-45947373057c",
  "title": "Pandas -Cleaning Data of Wrong Format",
  "slug": "pandas-cleaning-data-of-wrong-format",
  "metadata": {
    "description": "Learn about Pandas -Cleaning Data of Wrong Format with clear explanations and practical examples.",
    "keywords": [
      "c",
      "date",
      "format",
      "data",
      "value",
      "wrong",
      "cells",
      "convert",
      "pandas",
      "remove",
      "rows"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnPandas",
    "subcategory": "Cleaning Wrong Format"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Pandas -\nCleaning Data of Wrong Format",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data of Wrong Format\nCells with data of wrong format can make it difficult, or even impossible, to analyze data.\nTo fix it, you have two options: remove the rows, or convert all cells in the \ncolumns into the same format.\nConvert Into a Correct Format\nIn our Data Frame, we have two cells with the wrong format. Check out row 22 \nand 26, the 'Date' column should be a string that represents a date:\nDuration          Date  Pulse  Maxpulse  Calories\n  0         60  '2020/12/01'    110       130     409.1\n  1         60  '2020/12/02'    117       145     479.0\n  2         60  '2020/12/03'    103       135     340.0\n  3         45  '2020/12/04'    109       175     282.4\n  4         45  '2020/12/05'    117       148     406.0\n  5         60  '2020/12/06'    102       127     300.0\n  6         60  '2020/12/07'    110       136     374.0\n  7        450  '2020/12/08'    104       134     253.3\n  8         30  '2020/12/09'    109       133     195.1\n  9         60  '2020/12/10'     98       124     269.0\n  10        60  '2020/12/11'    103       147     329.3\n  11        60  '2020/12/12'    100       120     250.7\n  12        60  '2020/12/12'    100       120     250.7\n  13        60  '2020/12/13'    106       128     345.3\n  14        60  '2020/12/14'    104       132     379.3\n  15        60  '2020/12/15'     98       123     275.0\n  16        60  '2020/12/16'     98       120     215.2\n  17        60  '2020/12/17'    100       120     300.0\n  18        45  '2020/12/18'     90       112       NaN\n  19        60  '2020/12/19'    103       123     323.0\n  20        45  '2020/12/20'     97       125     243.0\n  21        60  '2020/12/21'    108       131     364.2\n22        45           NaN    100       119     282.0\n23        60  '2020/12/23'    130       101     300.0\n  24        45  '2020/12/24'    105       132     246.0\n  25        60  '2020/12/25'    102       126     334.5\n26        60      20201226    100       120     250.0\n27        60  '2020/12/27'     92       118     241.0\n  28        60  '2020/12/28'    103       132       NaN\n  29        60  '2020/12/29'    100       132     280.0\n  30        60  '2020/12/30'    102       129     380.3\n  31        60  '2020/12/31'     92       115     243.0\nLet's try to convert all cells in the 'Date' column into dates.\nPandas has a\nto_datetime()\nmethod for this:\nExample\nConvert to date:\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf['Date'] = pd.to_datetime(df['Date'], \n    format='mixed')\nprint(df.to_string())\n\nResult:\nDuration          Date  Pulse  Maxpulse  Calories\n  0         60  '2020/12/01'    110       130     409.1\n  1         60  '2020/12/02'    117       145     479.0\n  2         60  '2020/12/03'    103       135     340.0\n  3         45  '2020/12/04'    109       175     282.4\n  4         45  '2020/12/05'    117       148     406.0\n  5         60  '2020/12/06'    102       127     300.0\n  6         60  '2020/12/07'    110       136     374.0\n  7        450  '2020/12/08'    104       134     253.3\n  8         30  '2020/12/09'    109       133     195.1\n  9         60  '2020/12/10'     98       124     269.0\n  10        60  '2020/12/11'    103       147     329.3\n  11        60  '2020/12/12'    100       120     250.7\n  12        60  '2020/12/12'    100       120     250.7\n  13        60  '2020/12/13'    106       128     345.3\n  14        60  '2020/12/14'    104       132     379.3\n  15        60  '2020/12/15'     98       123     275.0\n  16        60  '2020/12/16'     98       120     215.2\n  17        60  '2020/12/17'    100       120     300.0\n  18        45  '2020/12/18'     90       112       NaN\n  19        60  '2020/12/19'    103       123     323.0\n  20        45  '2020/12/20'     97       125     243.0\n  21        60  '2020/12/21'    108       131     364.2\n22        45           NaT    100       119     282.0\n23        60  '2020/12/23'    130       101     300.0\n  24        45  '2020/12/24'    105       132     246.0\n  25        60  '2020/12/25'    102       126     334.5\n26        60  '2020/12/26'    100       120     250.0\n27        60  '2020/12/27'     92       118     241.0\n  28        60  '2020/12/28'    103       132       NaN\n  29        60  '2020/12/29'    100       132     280.0\n  30        60  '2020/12/30'    102       129     380.3\n  31        60  '2020/12/31'     92       115     243.0\nAs you can see from the result, the date in row 26 was fixed,\nbut the empty date in row 22 got a NaT (Not a Time) value, in other words an \nempty value. One way to deal with empty values is simply removing the entire row.\nRemoving Rows\nThe result from the converting in the example above gave us a NaT value, which can be handled as a NULL value, and we can remove the row by using the\ndropna()\nmethod.\nExample\nRemove rows with a NULL value in the \"Date\" column:\ndf.dropna(subset=['Date'], inplace = True)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import pandas as pd\ndf = pd.read_csv('data.csv')\ndf['Date'] = pd.to_datetime(df['Date'], \n    format='mixed')\nprint(df.to_string())",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "df.dropna(subset=['Date'], inplace = True)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pandas as pd\ndf = pd.read_csv('data.csv')\n# TODO: Complete this line\n    format='mixed')\nprint(df.to_string())",
      "solution": "import pandas as pd\ndf = pd.read_csv('data.csv')\ndf['Date'] = pd.to_datetime(df['Date'], \n    format='mixed')\nprint(df.to_string())"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "df.dropna(subset=['Date'], inplace = True)"
    }
  ],
  "related_topics": [
    {
      "id": "a473718c-e83f-4ea2-bc20-6e2eaef18565",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b670f45a-5f7e-4f75-80e8-a137ec1eb4b2",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "89ed0494-905a-4da1-9347-747c0f368ae4",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is One way to deal with empty values?",
      "options": [
        "simply removing the entire row",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of One way to deal with empty values is 'simply removing the entire row'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Pandas -Cleaning Data of Wrong Format concepts and techniques. You'll learn how to use Pandas -Cleaning Data of Wrong Format effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Pandas -Cleaning Data of Wrong Format and how to apply it in your projects."
}