{
  "id": "1b8ae86b-5a68-4d08-aa3f-24a0846a48ee",
  "title": "SciPyMatlab Arrays",
  "slug": "scipymatlab-arrays",
  "metadata": {
    "description": "Learn about SciPyMatlab Arrays with clear explanations and practical examples.",
    "keywords": [
      "c",
      "matlab",
      "data",
      "import",
      "file",
      "array",
      "scipy",
      "example",
      "name",
      "mydata",
      "format"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSciPy",
    "subcategory": "SciPy Matlab Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SciPy\nMatlab Arrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Working With Matlab Arrays\nWe know that NumPy provides us with methods to persist the data in readable formats for \nPython.\nBut SciPy provides us with interoperability with Matlab as well.\nSciPy provides us with the module\nscipy.io\n, which has functions for working with \nMatlab arrays.\nExporting Data in Matlab Format\nThe\nsavemat()\nfunction allows us to export data in \nMatlab format.\nThe method takes the following parameters:\nfilename\n- the file name for saving data.\nmdict\n- a dictionary containing the data.\ndo_compression\n- a boolean value that specifies whether to compress the \nresult or not. Default False.\nExample\nExport the following array as variable name \"vec\" to a mat file:\nfrom scipy import io\nimport numpy as np\narr = np.arange(10)\nio.savemat('arr.mat', {\"vec\": arr})\nNote:\nThe example above saves a file name \"arr.mat\" on your computer.\nTo open the file, check out the \"Import Data from Matlab Format\" example below:\nImport Data from Matlab Format\nThe\nloadmat()\nfunction allows us to import data from a \nMatlab file.\nThe function takes one required parameter:\nfilename\n- the file name of the saved data.\nIt will return a structured array whose keys are the variable names, and the corresponding values are the variable values.\nExample\nImport the array from following mat file.:\nfrom scipy import io\nimport numpy as np\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,])\n# Export:\nio.savemat('arr.mat', {\"vec\": arr})\n# Import:\nmydata = io.loadmat('arr.mat')\nprint(mydata)\nResult:\n{\n   '__header__': b'MATLAB 5.0 MAT-file Platform: nt, Created on: Tue Sep 22 13:12:32 2020',\n   '__version__': '1.0',\n   '__globals__': [],\n   'vec': array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])\n }\n\nUse the variable name \"vec\" to display only the array from the matlab data:\nExample\n...\nprint(mydata['vec'])\nResult:\n[[0 1 2 3 4 5 6 7 8 9]]\n\nNote:\nWe can see that the array originally was 1D,\nbut on extraction it has increased one dimension.\nIn order to resolve this we can pass an additional argument\nsqueeze_me=True\n:\nExample\n# Import:\nmydata = io.loadmat('arr.mat', squeeze_me=True)\nprint(mydata['vec'])\nResult:\n[0 1 2 3 4 5 6 7 8 9]\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "from scipy import io\nimport numpy as np\narr = np.arange(10)\nio.savemat('arr.mat', {\"vec\": arr})",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "from scipy import io\nimport numpy as np\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,])\n# Export:\nio.savemat('arr.mat', {\"vec\": arr})\n# Import:\nmydata = io.loadmat('arr.mat')\nprint(mydata)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "...\nprint(mydata['vec'])",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "# Import:\nmydata = io.loadmat('arr.mat', squeeze_me=True)\nprint(mydata['vec'])",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "from scipy import io\nimport numpy as np\n# TODO: Complete this line\nio.savemat('arr.mat', {\"vec\": arr})",
      "solution": "from scipy import io\nimport numpy as np\narr = np.arange(10)\nio.savemat('arr.mat', {\"vec\": arr})"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "from scipy import io\n# TODO: Complete this line\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,])\n# Export:\nio.savemat('arr.mat', {\"vec\": arr})\n# Import:\nmydata = io.loadmat('arr.mat')\nprint(mydata)",
      "solution": "from scipy import io\nimport numpy as np\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,])\n# Export:\nio.savemat('arr.mat', {\"vec\": arr})\n# Import:\nmydata = io.loadmat('arr.mat')\nprint(mydata)"
    }
  ],
  "related_topics": [
    {
      "id": "fa3dfac4-5a51-4b19-8d98-06cce6936151",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "fb267a9e-a24e-48f6-8db5-ec91ec0ddb67",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f81b8a8b-6e38-4768-a6d4-e078190f07e1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It will return a structured array whose keys?",
      "options": [
        "None of the above.",
        "the variable names",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of It will return a structured array whose keys is 'the variable names'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers SciPyMatlab Arrays concepts and techniques. You'll learn how to use SciPyMatlab Arrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SciPyMatlab Arrays and how to apply it in your projects."
}