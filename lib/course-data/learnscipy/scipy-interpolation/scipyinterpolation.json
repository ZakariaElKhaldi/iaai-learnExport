{
  "id": "b36c43b2-0139-49ad-8e68-75e3139068d9",
  "title": "SciPyInterpolation",
  "slug": "scipyinterpolation",
  "metadata": {
    "description": "Learn about SciPyInterpolation with clear explanations and practical examples.",
    "keywords": [
      "c",
      "interpolation",
      "function",
      "points",
      "interpolate",
      "scipy",
      "called",
      "import",
      "arange",
      "newarr",
      "values"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSciPy",
    "subcategory": "SciPy Interpolation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SciPy\nInterpolation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "What is Interpolation?\nInterpolation is a method for generating points between given points.\nFor example: for points 1 and 2, we may interpolate and find points 1.33 and 1.66.\nInterpolation has many usage, in Machine Learning we often deal with missing data in a dataset,\ninterpolation is often used to substitute those values.\nThis method of filling values is called\nimputation\n.\nApart from imputation, interpolation is often used where we need to smooth the discrete points in \na dataset.\nHow to Implement it in SciPy?\nSciPy provides us with a module called\nscipy.interpolate\nwhich has many functions to deal with interpolation:\n1D Interpolation\nThe function\ninterp1d()\nis used to interpolate a distribution with 1 variable.\nIt takes\nx\nand\ny\npoints and returns\na callable function that can be called with new\nx\nand returns corresponding\ny\n.\nExample\nFor given xs and ys interpolate values from 2.1, 2.2... to 2.9:\nfrom scipy.interpolate import interp1d\nimport numpy as np\nxs = np.arange(10)\nys = 2*xs + 1\ninterp_func = interp1d(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)\nResult:\n[5.2  5.4  5.6  5.8  6.   6.2  6.4  6.6  6.8]\n\nNote:\nthat new xs should be in same range as of the old xs, meaning that we can't call\ninterp_func()\nwith values higher than 10, or less than 0.\nSpline Interpolation\nIn 1D interpolation the points are fitted for a\nsingle curve\nwhereas in Spline interpolation\nthe points are fitted against a\npiecewise\nfunction defined with polynomials called splines.\nThe\nUnivariateSpline()\nfunction takes\nxs\nand\nys\nand produce a callable funciton that can be called with new\nxs\n.\nPiecewise function:\nA function that has different definition for different ranges.\nExample\nFind univariate spline interpolation for 2.1, 2.2... 2.9 for the following non linear points:\nfrom scipy.interpolate import UnivariateSpline\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\ninterp_func = UnivariateSpline(xs, ys)\nnewarr =\ninterp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)\nResult:\n[5.62826474 6.03987348 6.47131994 6.92265019 7.3939103  7.88514634\n   8.39640439 8.92773053 9.47917082]\n\nInterpolation with Radial Basis Function\nRadial basis function is a function that is defined corresponding to a fixed reference point.\nThe\nRbf()\nfunction also takes\nxs\nand\nys\nas arguments and produces a callable function that can be called with new\nxs\n.\nExample\nInterpolate following xs and ys using rbf and find values for 2.1, 2.2 ... 2.9:\nfrom scipy.interpolate import Rbf\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\ninterp_func = Rbf(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)\nResult:\n[6.25748981  6.62190817  7.00310702  7.40121814  7.8161443   8.24773402\n   8.69590519  9.16070828  9.64233874]\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "from scipy.interpolate import interp1d\nimport numpy as np\nxs = np.arange(10)\nys = 2*xs + 1\ninterp_func = interp1d(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "from scipy.interpolate import UnivariateSpline\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\ninterp_func = UnivariateSpline(xs, ys)\nnewarr =\ninterp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "from scipy.interpolate import Rbf\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\ninterp_func = Rbf(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "from scipy.interpolate import interp1d\n# TODO: Complete this line\nxs = np.arange(10)\nys = 2*xs + 1\ninterp_func = interp1d(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)",
      "solution": "from scipy.interpolate import interp1d\nimport numpy as np\nxs = np.arange(10)\nys = 2*xs + 1\ninterp_func = interp1d(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "from scipy.interpolate import UnivariateSpline\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\n# TODO: Complete this line\nnewarr =\ninterp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)",
      "solution": "from scipy.interpolate import UnivariateSpline\nimport numpy as np\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\ninterp_func = UnivariateSpline(xs, ys)\nnewarr =\ninterp_func(np.arange(2.1, 3, 0.1))\nprint(newarr)"
    }
  ],
  "related_topics": [
    {
      "id": "1237cffd-3523-46ba-b019-a59428e59a4f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "70675550-23f1-4878-a59b-2c6fb4abd9f5",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7b191bc9-29ba-4007-8d79-1a7ef4898478",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SciPy\nInterpolation\n\nWhat?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Interpolation",
        "a method for generating points between given points"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of SciPy\nInterpolation\n\nWhat is 'Interpolation'."
    },
    {
      "question": "What is Interpolation?",
      "options": [
        "Interpolation",
        "None of the above.",
        "None of the above.",
        "a method for generating points between given points"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Interpolation is 'a method for generating points between given points'."
    }
  ],
  "summary": "This tutorial covers SciPyInterpolation concepts and techniques. You'll learn how to use SciPyInterpolation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SciPyInterpolation and how to apply it in your projects."
}