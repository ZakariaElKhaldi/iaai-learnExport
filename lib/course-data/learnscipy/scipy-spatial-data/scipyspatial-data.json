{
  "id": "31e9547f-4198-4a0c-99a5-211f28091f12",
  "title": "SciPySpatial Data",
  "slug": "scipyspatial-data",
  "metadata": {
    "description": "Learn about SciPySpatial Data with clear explanations and practical examples.",
    "keywords": [
      "c",
      "points",
      "distance",
      "spatial",
      "import",
      "scipy",
      "data",
      "given",
      "example",
      "result",
      "hull"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnSciPy",
    "subcategory": "SciPy Spatial Data"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "SciPy\nSpatial Data",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Working with Spatial Data\nSpatial data refers to data that is represented in a geometric space.\nE.g. points on a coordinate system.\nWe deal with spatial data problems on many tasks.\nE.g. finding if a point is inside a boundary or not.\nSciPy provides us with the module\nscipy.spatial\n, which has \nfunctions for working with \nspatial data.\nTriangulation\nA Triangulation of a polygon is to divide the polygon into multiple\ntriangles with which we can compute an area of the polygon.\nA Triangulation\nwith points\nmeans creating surface composed triangles in which all\nof the given points are on at least one vertex of any triangle in the surface.\nOne method to generate these triangulations through points is the\nDelaunay()\nTriangulation.\nExample\nCreate a triangulation from following points:\nimport numpy as np\nfrom scipy.spatial import Delaunay\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1]\n])\nsimplices = Delaunay(points).simplices\nplt.triplot(points[:, 0], points[:, 1], simplices)\nplt.scatter(points[:, 0], points[:, 1], color='r')\nplt.show()\nResult:\n\nNote:\nThe\nsimplices\nproperty creates a generalization of the triangle notation.\nConvex Hull\nA convex hull is the smallest polygon that covers all of the given points.\nUse the\nConvexHull()\nmethod to create a Convex Hull.\nExample\nCreate a convex hull for following points:\nimport numpy as np\nfrom scipy.spatial import ConvexHull\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1],\n[1, 2],\n[5, 0],\n[3, 1],\n[1, 2],\n[0, 2]\n])\nhull = ConvexHull(points)\nhull_points = hull.simplices\nplt.scatter(points[:,0], points[:,1])\nfor simplex in hull_points:\nplt.plot(points[simplex,0], points[simplex,1], 'k-')\nplt.show()\nResult:\n\nKDTrees\nKDTrees are a datastructure optimized for nearest neighbor queries.\nE.g. in a set of points using KDTrees we can efficiently ask which points are nearest to a certain given point.\nThe\nKDTree()\nmethod returns a KDTree object.\nThe\nquery()\nmethod returns the distance to the nearest neighbor\nand\nthe location of the neighbors.\nExample\nFind the nearest neighbor to point (1,1):\nfrom scipy.spatial import KDTree\npoints = [(1, -1), (2, 3), (-2, 3), (2, -3)]\nkdtree = KDTree(points)\nres = kdtree.query((1, 1))\nprint(res)\nResult:\n(2.0, 0)\n\nDistance Matrix\nThere are many Distance Metrics used to find various types of distances between two points in data science, Euclidean distsance, cosine distsance etc.\nThe distance between two vectors may not only be the length of straight line between them,\nit can also be the angle between them from origin, or number of unit steps required etc.\nMany of the Machine Learning algorithm's performance depends greatly on distance metrices.\nE.g. \"K Nearest Neighbors\", or \"K Means\" etc.\nLet us look at some of the Distance Metrices:\nEuclidean Distance\nFind the euclidean distance between given points.\nExample\nfrom scipy.spatial.distance import euclidean\np1 = (1, 0)\np2 = (10, 2)\nres = euclidean(p1, p2)\nprint(res)\nResult:\n9.21954445729\n\nCityblock Distance (Manhattan Distance)\nIs the distance computed using 4 degrees of movement.\nE.g. we can only move: up, down, right, or left, not diagonally.\nExample\nFind the cityblock distance between given points:\nfrom scipy.spatial.distance import cityblock\np1 = (1, 0)\np2 = (10, 2)\nres = cityblock(p1, p2)\nprint(res)\nResult:\n11\n\nCosine Distance\nIs the value of cosine angle between the two points A and B.\nExample\nFind the cosine distsance between given points:\nfrom scipy.spatial.distance import cosine\np1 = (1, 0)\np2 = (10, 2)\nres = cosine(p1, p2)\nprint(res)\nResult:\n0.019419324309079777\n\nHamming Distance\nIs the proportion of bits where two bits are different.\nIt's a way to measure distance for binary sequences.\nExample\nFind the hamming distance between given points:\nfrom scipy.spatial.distance import hamming\np1 = (True, False, True)\np2 = (False, True, True)\nres = hamming(p1, p2)\nprint(res)\nResult:\n0.666666666667\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy as np\nfrom scipy.spatial import Delaunay\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1]\n])\nsimplices = Delaunay(points).simplices\nplt.triplot(points[:, 0], points[:, 1], simplices)\nplt.scatter(points[:, 0], points[:, 1], color='r')\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy as np\nfrom scipy.spatial import ConvexHull\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1],\n[1, 2],\n[5, 0],\n[3, 1],\n[1, 2],\n[0, 2]\n])\nhull = ConvexHull(points)\nhull_points = hull.simplices\nplt.scatter(points[:,0], points[:,1])\nfor simplex in hull_points:\nplt.plot(points[simplex,0], points[simplex,1], 'k-')\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "from scipy.spatial import KDTree\npoints = [(1, -1), (2, 3), (-2, 3), (2, -3)]\nkdtree = KDTree(points)\nres = kdtree.query((1, 1))\nprint(res)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "from scipy.spatial.distance import euclidean\np1 = (1, 0)\np2 = (10, 2)\nres = euclidean(p1, p2)\nprint(res)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "from scipy.spatial.distance import cityblock\np1 = (1, 0)\np2 = (10, 2)\nres = cityblock(p1, p2)\nprint(res)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "from scipy.spatial.distance import cosine\np1 = (1, 0)\np2 = (10, 2)\nres = cosine(p1, p2)\nprint(res)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "from scipy.spatial.distance import hamming\np1 = (True, False, True)\np2 = (False, True, True)\nres = hamming(p1, p2)\nprint(res)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\nfrom scipy.spatial import Delaunay\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1]\n])\nsimplices = Delaunay(points).simplices\nplt.triplot(points[:, 0], points[:, 1], simplices)\nplt.scatter(points[:, 0], points[:, 1], color='r')\n# TODO: Complete this line",
      "solution": "import numpy as np\nfrom scipy.spatial import Delaunay\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1]\n])\nsimplices = Delaunay(points).simplices\nplt.triplot(points[:, 0], points[:, 1], simplices)\nplt.scatter(points[:, 0], points[:, 1], color='r')\nplt.show()"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy as np\nfrom scipy.spatial import ConvexHull\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1],\n[1, 2],\n[5, 0],\n[3, 1],\n[1, 2],\n[0, 2]\n])\nhull = ConvexHull(points)\nhull_points = hull.simplices\nplt.scatter(points[:,0], points[:,1])\nfor simplex in hull_points:\nplt.plot(points[simplex,0], points[simplex,1], 'k-')\n# TODO: Complete this line",
      "solution": "import numpy as np\nfrom scipy.spatial import ConvexHull\nimport matplotlib.pyplot as plt\npoints = np.array([\n[2, 4],\n[3, 4],\n[3, 0],\n[2, 2],\n[4, 1],\n[1, 2],\n[5, 0],\n[3, 1],\n[1, 2],\n[0, 2]\n])\nhull = ConvexHull(points)\nhull_points = hull.simplices\nplt.scatter(points[:,0], points[:,1])\nfor simplex in hull_points:\nplt.plot(points[simplex,0], points[simplex,1], 'k-')\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "63bcfc7e-06a8-4508-8e16-ecc849c308f5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6bc13568-854e-4581-bd48-1b7eec332cba",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b6dbfea7-1788-41c6-842b-0f0f1d167fd4",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is SciPy\nSpatial Data\n\nWorking with Spatial Data\nSpatial data refers to data that?",
      "options": [
        "None of the above.",
        "represented in a geometric space",
        "None of the above.",
        "inside a boundary or not"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of SciPy\nSpatial Data\n\nWorking with Spatial Data\nSpatial data refers to data that is 'represented in a geometric space'."
    },
    {
      "question": "What is finding if a point?",
      "options": [
        "represented in a geometric space",
        "inside a boundary or not",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of finding if a point is 'inside a boundary or not'."
    }
  ],
  "summary": "This tutorial covers SciPySpatial Data concepts and techniques. You'll learn how to use SciPySpatial Data effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of SciPySpatial Data and how to apply it in your projects."
}