{
  "id": "902ae45c-5db1-4d41-b896-cbc5cbe5f12c",
  "title": "Vue <TransitionGroup> Component",
  "slug": "vue-transitiongroup-component",
  "metadata": {
    "description": "Learn about Vue <TransitionGroup> Component with clear explanations and practical examples.",
    "keywords": [
      "dice",
      "transitiongroup",
      "button",
      "adddie",
      "component",
      "math",
      "opacity",
      "leave",
      "example",
      "random"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "<TransitionGroup>"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue <TransitionGroup> Component",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Built-in Components Reference\n\nExample\nUsing the built-in\n<TransitionGroup>\ncomponent to create an\n<ol>\ntag with animated\n<li>\ntags inside.\n<TransitionGroup tag=\"ol\">\n  <li v-for=\"x in products\" :key=\"x\">\n    {{ x }}\n  </li>\n</TransitionGroup>\nRun Example \u00bb\nSee more examples below.\nDefinition and Usage\nThe built-in\n<TransitionGroup>\ncomponent is used around elements created with\nv-for\n, to give these elements individual animations when they are added or removed.\nTags created with\nv-for\ninside the\n<TransitionGroup>\ncomponent must be uniquely defined with the\nkey\nattribute.\nThe\n<TransitionGroup>\ncomponent is only rendered as an HTML tag if we define it to be a specific tag by using the\ntag\nprop.\nWhen tags are created inside the\n<TransitionGroup>\ncomponent with\nv-for\nbased on an array, these tags will be animated automatically when elements are added to, or removed from, the array.\nProps\nThe built-in\n<TransitionGroup>\ncomponent can be used with the same props as the built-in\n<Transition>\ncomponent, but accepts the\nname\nand the\nmoveClass\nprops in addition:\nProp\nDescription\nnone\nDefault.\nRun Example \u00bb\ntag\n<TransitionGroup>\nis rendered to be the tag specified. If the\ntag\nprop is not set,\n<TransitionGroup>\nwill not be rendered as a tag.\nRun Example \u00bb\nmoveClass\nCreates a custom name for the move class. The default name for the move class is\nv-move\n.\nRun Example \u00bb\nMore Examples\nExample 1\nDice can be added or removed, added dice are animated using\n<TransitionGroup>\n.\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.7s;\n}\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nExample 2\nDice can be added or removed, both added and removed dice are animated using\n<TransitionGroup>\n.\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>When an item is removed inside the <TransitionGroup> component, other items are animated as they fall into their new positions.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nExample 3\nDice can be added, removed shuffled or sorted, all animated using\n<TransitionGroup>\n.\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>Items inside the <TransitionGroup> component are animated when they are created or removed.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"addDie10\">Roll 10 dice</button>\n  <button @click=\"dice.sort(compareFunc)\">Sort</button>\n  <button @click=\"dice.sort(shuffleFunc)\">Shuffle</button><br>\n  <TransitionGroup>\n    <div \n    v-for=\"x in dice\" \n    :key=\"x.keyNmbr\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x.dieNmbr*60+',85%,85%)' }\"\n    @click=\"removeDie(x.keyNmbr)\">\n      {{ x.dieNmbr }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        keyNumber: 0\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = {\n          dieNmbr: Math.ceil(Math.random()*6),\n          keyNmbr: this.keyNumber\n        };\n        this.dice.splice(Math.floor(Math.random()*this.dice.length),0,newDie);\n        this.keyNumber++;\n      },\n      addDie10() {\n        for(let i=0; i<10; i++) {\n          this.addDie();\n        }\n      },\n      compareFunc(a,b){\n        return a.dieNmbr - b.dieNmbr;\n      },\n      shuffleFunc(a,b){\n        return Math.random()-0.5;\n      },\n      removeDie(key) {\n        const pos = this.dice.map(e => e.keyNmbr).indexOf(key);\n        this.dice.splice(pos, 1);\n      }\n    },\n    mounted() {\n      this.addDie10();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  scale: 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  scale: 1;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n.diceDiv:hover {\n  cursor: pointer;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#app {\n  position: relative;\n}\n</style>\nRun Example \u00bb\nExample 4\nThe move class is renamed using the\nmoveClass\nprop.\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>When an item is removed inside the <TransitionGroup> component, other items are animated as they fall into their new positions.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup moveClass=\"good-slide\">\n    <div \n    v-for=\"x in dice\" \n    :key=\"x\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\"\n    >\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.good-slide {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nVue Animations\nVue Tutorial:\nVue Animations with v-for\nVue Tutorial:\nVue v-for Directive\nVue Tutorial:\nVue v-for Components\nVue Reference:\nVue <Transition> Component\n\nVue Built-in Components Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "213fa1e8-cf52-4f72-93ef-157a55c8e6a4",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a25d7c01-6040-4846-b4e2-5889561e964f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b061b32e-535c-4283-a458-1c26b998e1f0",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is component?",
      "options": [
        "None of the above.",
        "used around elements created with\nv-for",
        "only rendered as an HTML tag if we define it to be a specific tag by using the\ntag\nprop",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of component is 'used around elements created with\nv-for'."
    },
    {
      "question": "What is component?",
      "options": [
        "only rendered as an HTML tag if we define it to be a specific tag by using the\ntag\nprop",
        "None of the above.",
        "None of the above.",
        "used around elements created with\nv-for"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of component is 'only rendered as an HTML tag if we define it to be a specific tag by using the\ntag\nprop'."
    }
  ],
  "summary": "This tutorial covers Vue <TransitionGroup> Component concepts and techniques. You'll learn how to use Vue <TransitionGroup> Component effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue <TransitionGroup> Component and how to apply it in your projects."
}