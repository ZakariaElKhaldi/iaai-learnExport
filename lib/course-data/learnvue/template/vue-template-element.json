{
  "id": "7703848c-e9aa-4a2c-8791-46938764886b",
  "title": "Vue <template> Element",
  "slug": "vue-template-element",
  "metadata": {
    "description": "Learn about Vue <template> Element with clear explanations and practical examples.",
    "keywords": [
      "template",
      "slot",
      "element",
      "built",
      "directive",
      "example",
      "html",
      "reference",
      "used",
      "else"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "<template>"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue <template> Element",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Built-in Elements Reference\n\nExample\nUsing the built-in\n<template>\nelement to toggle a section of HTML code with the\nv-if\ndirective.\n<ul>\n  <li>Trolltunga</li>\n  <template v-if=\"display\">\n    <li>Potato Point</li>\n    <li>The souks of Marrakech</li>\n    <li>Dry Tortugas</li>\n    <li>Halong Bay</li>\n  </template>\n  <li>...</li>\n</ul>\nRun Example \u00bb\nDefinition and Usage\nThe HTML\n<template>\ntag becomes a built-in Vue\n<template>\nelement when used with Vue directives\nv-if\n,\nv-else-if\n,\nv-else\n,\nv-for\n, or\nv-slot\n.\nWhen used with\nv-if\n,\nv-else-if\n,\nv-else\n, or\nv-for\n, the built-in\n<template>\nelement renders a section of HTML code.\nWhen used with\nv-slot\n, the built-in\n<template>\nelement directs a section of HTML code to a specified slot. See Example 1 below.\nThe built-in\n<template>\nelement itself is not rendered as a DOM element.\nNote:\nThe top-level\n<template>\nelement is a structural requirement when using SFCs (*.vue) files. For such top-level\n<template>\nelements, Vue directives cannot be used.\nMore examples\nExample 1\nUsing the built-in\n<template>\nelement to encapsulate more than one element and send them to a specific named slot with the\nv-slot\ndirective.\n<template>\n  <h1>App.vue</h1>\n  <p>The component has two div tags with one slot in each.</p>\n  <slot-comp>\n    <template v-slot:bottomSlot>\n      <h4>To the bottom slot!</h4>\n      <p>This p tag and the h4 tag above are directed to the bottom slot with the v-slot directive used on the template tag.</p>\n    </template>\n    <p>This goes into the default slot</p>\n  </slot-comp>\n</template>\nRun Example \u00bb\nExample 2\nUsing the\n<template>\nelement, more than one element can be rendered with the\nv-if\ndirective.\n<div id=\"app\">\n<template v-if=\"text.includes('pizza')\">\n<p>The text includes the word 'pizza'</p>\n<img src=\"img_pizza.svg\">\n</template>\n<p v-else>The word 'pizza' is not found in the text</p>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ntext: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'\n}\n}\n})\napp.mount('#app')\n</script>\n\nRelated Pages\nVue Tutorial:\nVue v-slot\nVue Tutorial:\nVue Templates\nVue Tutorial:\nVue v-if Directive\nVue Reference:\nVue v-if Directive\nVue Reference:\nVue v-slot Directive\nHTML Reference:\nHTML <template> tag\n\nVue Built-in Elements Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 3,
      "code": "<div id=\"app\">\n<template v-if=\"text.includes('pizza')\">\n<p>The text includes the word 'pizza'</p>\n<img src=\"img_pizza.svg\">\n</template>\n<p v-else>The word 'pizza' is not found in the text</p>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ntext: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'\n}\n}\n})\napp.mount('#app')\n</script>",
      "language": "html",
      "explanation": "Example of example 2"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div id=\"app\">\n<template v-if=\"text.includes('pizza')\">\n<p>The text includes the word 'pizza'</p>\n<img src=\"img_pizza.svg\">\n</template>\n<p v-else>The word 'pizza' is not found in the text</p>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ntext: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'\n}\n}\n# TODO: Complete this line\napp.mount('#app')\n</script>",
      "solution": "<div id=\"app\">\n<template v-if=\"text.includes('pizza')\">\n<p>The text includes the word 'pizza'</p>\n<img src=\"img_pizza.svg\">\n</template>\n<p v-else>The word 'pizza' is not found in the text</p>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ntext: 'I like taco, pizza, Thai beef salad, pho soup and tagine.'\n}\n}\n})\napp.mount('#app')\n</script>"
    },
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "676dde8e-3511-4e87-a769-b8e967e5aa53",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e277627e-a72e-4394-82f2-e0c7b47eeae7",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3843fe63-8214-4939-a4b8-28b1a988a6db",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is element itself?",
      "options": [
        "None of the above.",
        "a structural requirement when using SFCs (*",
        "not rendered as a DOM element",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of element itself is 'not rendered as a DOM element'."
    },
    {
      "question": "What is element?",
      "options": [
        "None of the above.",
        "a structural requirement when using SFCs (*",
        "not rendered as a DOM element",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of element is 'a structural requirement when using SFCs (*'."
    }
  ],
  "summary": "This tutorial covers Vue <template> Element concepts and techniques. You'll learn how to use Vue <template> Element effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue <template> Element and how to apply it in your projects."
}