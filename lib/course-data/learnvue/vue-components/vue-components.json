{
  "id": "13c8b50b-6c32-4fe9-a5c5-1a700545c2bb",
  "title": "Vue Components",
  "slug": "vue-components",
  "metadata": {
    "description": "Learn about Vue Components with clear explanations and practical examples.",
    "keywords": [
      "c",
      "components",
      "component",
      "template",
      "file",
      "style",
      "fooditem",
      "script",
      "food",
      "make",
      "like"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Components"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Components",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Components\nin Vue lets us decompose our web page into smaller pieces that are easy to work with.\nWe can work with a Vue component in isolation from the rest of the web page, with its own content and logic.\nA web page often consists of many Vue components.\nWhat are Components?\nComponents are reusable and self-contained pieces of code that encapsulates a specific part of the user interface, so that we can make Vue applications that are scalable and easier to maintain.\nWe can make components in Vue ourselves, or use built-in components that we will learn about later, like\n<Teleport>\nor\n<KeepAlive>\n. Here we will focus on components we make ourselves.\nCreating a Component\nComponents in Vue is a very powerful tool because it lets our web page become more scalable and bigger projects become easier to handle.\nLet's make a component and add it to our project.\nCreate a new folder\ncomponents\ninside the\nsrc\nfolder.\nInside the\ncomponents\nfolder, create a new file\nFoodItem.vue\n. It is common to name components with PascalCase naming convention, without spaces and where all new words starts with a capital letter, also the first word.\nMake sure the\nFoodItem.vue\nfile look like this:\nCode inside the\nFoodItem.vue\ncomponent:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>{{ name }}</h2>\n\u00a0 \u00a0 <p>{{ message }}</p>\n\u00a0 </div>\n</template>\n\n<script>\nexport default {\n\u00a0 data() {\n\u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 name: 'Apples',\n\u00a0 \u00a0 \u00a0 message: 'I like apples'\n\u00a0 \u00a0 }\n\u00a0 }\n};\n</script>\n\n<style></style>\nAs you can see in the example above, components also consist of\n<template>\n,\n<script>\nand\n<style>\ntags, just like our main\nApp.vue\nfile.\nAdding The Component\nNotice that the\n<script>\ntag in the example above start with\nexport default\n. This means that the object containing the data properties can be received, or imported, in another file. We will use this to implement the\nFoodItem.vue\ncomponent into our existing project by importing it with the\nmain.js\nfile.\nFirst, rewrite the last line into two lines in your original\nmain.js\nfile:\nmain.js\n:\nimport { createApp } from 'vue'\n\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.mount('#app')\nNow, add the\nFoodItem.vue\ncomponent by inserting lines 4 and 7 in your\nmain.js\nfile:\nmain.js\n:\nimport { createApp } from 'vue'\n\nimport App from './App.vue'\nimport FoodItem from './components/FoodItem.vue'\n\nconst app = createApp(App)\napp.component('food-item', FoodItem)\napp.mount('#app')\nOn line 7, the component is added so that we can use it as a custom tag\n<food-item/>\ninside the\n<template>\ntag in our\nApp.vue\nfile like this:\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <food-item/>\n\u00a0 <food-item/>\n\u00a0 <food-item/>\n</template>\n\n<script></script>\n\n<style></style>\nAnd, let's add some styling inside the\n<style>\ntag in the\nApp.vue\nfile. Make sure the development server is running, and check out the result.\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <food-item/>\n\u00a0 <food-item/>\n\u00a0 <food-item/>\n</template>\n\n<script></script>\n\n<style>\n\u00a0 #app > div {\n\u00a0 \u00a0 border: dashed black 1px;\n\u00a0 \u00a0 display: inline-block;\n\u00a0 \u00a0 margin: 10px;\n\u00a0 \u00a0 padding: 10px;\n\u00a0 \u00a0 background-color: lightgreen;\n\u00a0 }\n</style>\nRun Example \u00bb\nDevelopment mode:\nWhen working with your Vue projects, it is useful to always have your project in development mode by running the following code line in the terminal:\nnpm run dev\nIndividual Components\nA very useful and powerful property when working with components in Vue is that we can make them behave individually, without having to mark elements with unique IDs like we must do with plain JavaScript. Vue automatically takes care to treat each component individually.\nLet's make the\n<div>\nelements count when we click them.\nThe only thing added to our main application file\nApp.vue\nis in CSS to have the cursor look like a hand pointing during hover to imply that there is some sort of click functionality.\nCSS code added to the\n<style>\ntag in\nApp.vue\n:\n#app > div:hover {\n\u00a0 cursor: pointer;\n}\nIn our component file\nFoodItem.vue\nwe must add a data property\ncount\n, a click listener to the\n<div>\nelement, a method to run when click happens to increment the counter, and text interpolation\n{{}}\nto show the count.\nExample\nFoodItem.vue\n:\n<template>\n\u00a0 <div v-on:click=\"countClicks\">\n\u00a0 \u00a0 <h2>{{ name }}</h2>  \n\u00a0 \u00a0 <p>{{ message }}</p>\n\u00a0 \u00a0 <p id=\"red\">You have clicked me {{ clicks }} times.</p>\n\u00a0 </div>\n</template>\n\n<script>\nexport default {\n\u00a0 data() {\n\u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 name: 'Apples',\n\u00a0 \u00a0 \u00a0 message: 'I like apples',\n\u00a0 \u00a0 \u00a0 clicks: 0\n\u00a0 \u00a0 }\n\u00a0 },\n\u00a0 methods: {\n\u00a0 \u00a0 countClicks() {\n\u00a0 \u00a0 \u00a0 this.clicks++;\n\u00a0 \u00a0 }\n\u00a0 }\n}\n</script>\n\n<style>\n\u00a0 #red {\n\u00a0 \u00a0 font-weight: bold ;\n\u00a0 \u00a0 color: rgb(144, 12, 12);\n\u00a0 }\n</style>\nRun Example \u00bb\nWe don't have to define unique IDs or do any extra work for Vue to handle the counting individually for each\n<div>\nelement, Vue just does this automatically.\nBut except for the different counter values, the content of the\n<div>\nelements is still the same. In the \n<div>\nelement.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nThe line below in main.js adds a component to our Vue project:\napp.component('fish-type', FishType)\nHow can we add this component to App.vue?\n<template>\n  <h1>Fish</h1>\n</template>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "npm run dev",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "npm run dev"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "63dfd453-2f30-4c7b-b59c-8b1c4b125a9a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4278c2df-3b35-4328-bfec-83525acd5427",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "55d8937b-f974-4183-a141-99919c69575b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue Components\n\nComponents\nin Vue lets us decompose our web page into smaller pieces that?",
      "options": [
        "easy to work with",
        "Components",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Vue Components\n\nComponents\nin Vue lets us decompose our web page into smaller pieces that is 'easy to work with'."
    },
    {
      "question": "What is What?",
      "options": [
        "easy to work with",
        "None of the above.",
        "None of the above.",
        "Components"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of What is 'Components'."
    }
  ],
  "summary": "This tutorial covers Vue Components concepts and techniques. You'll learn how to use Vue Components effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Components and how to apply it in your projects."
}