{
  "id": "fe1d5467-bc2d-4852-9df2-5f80b5e6aa04",
  "title": "Vue v-for Components",
  "slug": "vue-v-for-components",
  "metadata": {
    "description": "Learn about Vue v-for Components with clear explanations and practical examples.",
    "keywords": [
      "elements",
      "food",
      "name",
      "favorite",
      "attribute",
      "desc",
      "array",
      "example",
      "template",
      "foods"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue v-for Components"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue v-for Components",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Components can be reused with\nv-for\nto generate many elements of the same kind.\nWhen generating elements with\nv-for\nfrom a component, it is also very helpful that props can be assigned dynamically based on values from an array.\nCreate Component Elements with v-for\nWe will now create component elements with\nv-for\nbased on an array with food item names.\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <p>Components created with v-for based on an array.</p>\n\u00a0 <div id=\"wrapper\">\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 v-for=\"x in foods\"\n\u00a0 \u00a0 \u00a0 v-bind:food-name=\"x\"/>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 data() {\n\u00a0 \u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 \u00a0 foods: ['Apples','Pizza','Rice','Fish','Cake']\n\u00a0 \u00a0 \u00a0 };\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>{{ foodName }}</h2>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: ['foodName']\n\u00a0 }\n</script>\nRun Example \u00bb\nv-bind Shorthand\nTo bind props dynamically we use\nv-bind\n, and because we will use\nv-bind\nmuch more now than before we will use the\nv-bind:\nshorthand\n:\nin the rest of this tutorial.\nThe 'key' Attribute\nIf we modify the array after the elements are created with\nv-for\n, errors can emerge because of the way Vue updates such elements created with\nv-for\n. Vue reuses elements to optimize performance, so if we remove an item, already existing elements are reused instead of recreating all elements, and element properties might not be correct anymore.\nThe reason for elements being reused incorrectly is that elements do not have a unique identifier, and that is exactly what we use the\nkey\nattribute for: to let Vue tell the elements apart.\nWe will generate faulty behavior without the\nkey\nattribute, but first let's build a web page with foods using\nv-for\nto display: food name, description, image for favorite food and button to change favorite status.\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <p>Food items are generated with v-for from the 'foods' array.</p>\n\u00a0 <div id=\"wrapper\">\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 v-for=\"x in foods\"\n\u00a0 \u00a0 \u00a0 :food-name=\"x.name\"\n\u00a0 \u00a0 \u00a0 :food-desc=\"x.desc\"\n\u00a0 \u00a0 \u00a0 :is-favorite=\"x.favorite\"/>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 data() {\n\u00a0 \u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 \u00a0 foods: [\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { name: 'Apples',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc: 'Apples are a type of fruit that grow on trees.',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favorite: true },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { name: 'Pizza',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc: 'Pizza has a bread base with tomato sauce, cheese, and toppings on top.',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favorite: false },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { name: 'Rice',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc: 'Rice is a type of grain that people like to eat.',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favorite: false }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { name: 'Fish',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc: 'Fish is an animal that lives in water.',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favorite: true }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { name: 'Cake',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc: 'Cake is something sweet that tastes good.',\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favorite: false }\n\u00a0 \u00a0 \u00a0 \u00a0 ]\n\u00a0 \u00a0 \u00a0 };\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\n\n<style>\n\u00a0 #wrapper {\n\u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 flex-wrap: wrap;\n\u00a0 }\n\u00a0 #wrapper > div {\n\u00a0 \u00a0 border: dashed black 1px;\n\u00a0 \u00a0 flex-basis: 120px;\n\u00a0 \u00a0 margin: 10px;\n\u00a0 \u00a0 padding: 10px;\n\u00a0 \u00a0 background-color: lightgreen;\n\u00a0 }\n</style>\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>\n\u00a0 \u00a0 \u00a0 {{ foodName }}\n\u00a0 \u00a0 \u00a0 <img src=\"/img_quality.svg\" v-show=\"foodIsFavorite\">\n\u00a0 \u00a0 </h2>\n\u00a0 \u00a0 <p>{{ foodDesc }}</p>\n\u00a0 \u00a0 <button v-on:click=\"toggleFavorite\">Favorite</button>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: ['foodName','foodDesc','isFavorite'],\n\u00a0 \u00a0 data() {\n\u00a0 \u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 \u00a0 foodIsFavorite: this.isFavorite\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 },\n\u00a0 \u00a0 methods: {\n\u00a0 \u00a0 \u00a0 toggleFavorite() {\n\u00a0 \u00a0 \u00a0 \u00a0 this.foodIsFavorite = !this.foodIsFavorite;\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\n\n<style>\n\u00a0 img {\n\u00a0 \u00a0 height: 1.5em;\n\u00a0 \u00a0 float: right;\n\u00a0 }\n</style>\nRun Example \u00bb\nTo see that we need the\nkey\nattribute, let's create a button that removes the second element in the array. When this happens, without the\nkey\nattribute, the favorite image is transferred from the 'Fish' element to the 'Cake' element, and that is NOT correct:\nExample\nThe only difference from the \n<button @click=\"removeItem\">Remove Item</button>\nand a method:\nmethods: {\n\u00a0 removeItem() {\n\u00a0 \u00a0 this.foods.splice(1,1);\n\u00a0 }\n}\nin\nApp.vue\n.\nRun Example \u00bb\nAs mentioned before: this fault, that the favorite image changes from 'fish' to 'cake' when an element is removed, has to do with Vue optimizing the page by reusing elements, and at the same time Vue cannot fully tell the elements apart. That is why we should always include the\nkey\nattribute to uniquely mark each element when generating elements with\nv-for\n. When we use the\nkey\nattribute, we no longer get this problem.\nWe do not use the array element index as the\nkey\nattribute value because that changes when array elements are removed and added. We could create a new data property to keep a unique value for each item, like an ID number, but because the food items already have unique names we can just use that:\nExample\nWe only need to add one line in\nApp.vue\nto uniquely identify each element created with\nv-for\nand fix the problem:\n<food-item\n\u00a0 v-for=\"x in foods\"\n\u00a0 :key=\"x.name\"\n\u00a0 :food-name=\"x.name\"\n\u00a0 :food-desc=\"x.desc\"\n\u00a0 :is-favorite=\"x.favorite\"\n/>\nRun Example \u00bb\nVue Exercises\nTest Yourself With Exercises\nExercise:\nWhen generating elements with v-for, which specific attribute is always recommended to use?\n<fish-type\n  v-for=\"x in fish\"\n  :\n=\"x.id\"\n  :fish-name=\"x.name\"\n  :img-url=\"x.url\"\n/>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "0659da52-db2a-4dc8-afda-1882da5c5be2",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e42d6bad-f345-40f5-8737-c2e12ca91feb",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c729b174-4408-49a8-b6cb-ec969a8e5ee1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "created with\nv-for",
        "also very helpful that props can be assigned dynamically based on values from an array",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of it is 'also very helpful that props can be assigned dynamically based on values from an array'."
    },
    {
      "question": "What is Attribute\nIf we modify the array after the elements?",
      "options": [
        "None of the above.",
        "created with\nv-for",
        "None of the above.",
        "also very helpful that props can be assigned dynamically based on values from an array"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Attribute\nIf we modify the array after the elements is 'created with\nv-for'."
    }
  ],
  "summary": "This tutorial covers Vue v-for Components concepts and techniques. You'll learn how to use Vue v-for Components effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue v-for Components and how to apply it in your projects."
}