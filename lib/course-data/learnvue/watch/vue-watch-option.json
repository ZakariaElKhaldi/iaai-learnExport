{
  "id": "57f98236-f69b-427a-8197-875076bf8a36",
  "title": "Vue 'watch' Option",
  "slug": "vue-watch-option",
  "metadata": {
    "description": "Learn about Vue 'watch' Option with clear explanations and practical examples.",
    "keywords": [
      "watcher",
      "rangeval",
      "watch",
      "option",
      "example",
      "using",
      "default",
      "object",
      "watchers",
      "property"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "watch"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue 'watch' Option",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Instance Options Reference\n\nExample\nUsing a watcher inside the\nwatch\noption to make it impossible to choose values between 20 and 70 with an\n<input type=\"range\">\n.\nexport default {\n  data() {\n    return {\n      rangeVal: 4\n    };\n  },\n  watch: {\n    rangeVal(val) {\n      if( val>20 && val<70) {\n        if(val<40){\n          this.rangeVal = 20;\n        }\n        else {\n          this.rangeVal = 70;\n        }\n      }\n    }\n  }\n};\nRun Example \u00bb\nDefinition and Usage\nThe\nwatch\noption is an object with all the watchers that are declared on the Vue instance.\nA watcher is a function with the same name as a data property or a computed property. The watcher is called automatically whenever that property with the same name gets changed.\nWhen a watcher is called, the new and the \nA watcher can also be a dot-delimited path, such as\ntiger.weight\n, so that the watcher is only called when the\nweight\nproperty of the\ntiger\nobject is changed.\nNote:\nArrow functions should be avoided when declaring watchers because the Vue instance cannot be reached from inside such a function using the\nthis\nkeyword.\nWhen writing watchers using the object syntax (see the example below), these options are available:\nOption\nDescription\nhandler\nThis is where the watch function is written.\n'method name'\nA watcher can be set up to call a method by providing the method name as a string.\ndeep\nDefault value is 'false'. If the watcher is deep, it also reacts to changes further down in the property the watcher is set up to watch.\nimmediate\nDefault value is 'false'. Triggers the watcher immediately after it is created. The old value will be 'undefined' the first time the watcher is triggered when 'immediate' is set to 'true'.\nflush\nDefault value is 'pre'. Specify when to run the callback function relative to when the component is rendered. Possible values are 'pre', 'post' and 'sync'. Use this flush option with caution.\nonTrigger/onTrack\nUsed for debugging. Only works in development mode.\nNote:\nWatchers can also be created using the\n$watch()\nmethod\n.\nMore Examples\nExample\nUsing a watcher with the object syntax.\n<template>\n  <h2>Example watch Option</h2>\n  <p>The 'rangeVal' watcher is written with the object syntax, with immediate: true, so that rangeVal is moved to '70' when the page first loads:</p>\n  <input type=\"range\" v-model=\"rangeVal\">\n  <p>rangeVal: <span>{{ rangeVal }}</span></p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      rangeVal: 40\n    };\n  },\n  watch: {\n    rangeVal: {\n      handler(val) {\n        if (val > 20 && val < 70) {\n          if (val < 40) {\n            this.rangeVal = 20;\n          }\n          else {\n            this.rangeVal = 70;\n          }\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<style>\nspan {\n  padding: 3px;\n  font-weight: bold;\n  font-family: 'Courier New', Courier, monospace;\n  background-color: lightgreen;\n}\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nVue Watchers\nVue Tutorial:\nVue v-model Directive\nVue Reference:\nVue $watch() Method\n\nVue Instance Options Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "18f60021-b4fe-4d39-92c5-764c9b3b5075",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5e55ada6-e8df-49dc-a7fa-a5af43b9895f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ac322f64-c971-4ef2-86d7-bb0cfbb9346d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Definition and Usage\nThe\nwatch\noption is an object with all the watchers that?",
      "options": [
        "declared on the Vue instance",
        "a function with the same name as a data property or a computed property",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Definition and Usage\nThe\nwatch\noption is an object with all the watchers that is 'declared on the Vue instance'."
    },
    {
      "question": "What is A watcher?",
      "options": [
        "None of the above.",
        "declared on the Vue instance",
        "a function with the same name as a data property or a computed property",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of A watcher is 'a function with the same name as a data property or a computed property'."
    }
  ],
  "summary": "This tutorial covers Vue 'watch' Option concepts and techniques. You'll learn how to use Vue 'watch' Option effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue 'watch' Option and how to apply it in your projects."
}