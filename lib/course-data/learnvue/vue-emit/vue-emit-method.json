{
  "id": "7fcec894-3ca8-4f7e-90d7-4ec06ffe6345",
  "title": "Vue $emit() Method",
  "slug": "vue-emit-method",
  "metadata": {
    "description": "Learn about Vue $emit() Method with clear explanations and practical examples.",
    "keywords": [
      "favorite",
      "component",
      "food",
      "event",
      "emit",
      "fooditem",
      "toggle",
      "item",
      "method",
      "parent"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue $emit()"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue $emit() Method",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "With the built-in\n$emit()\nmethod in Vue we can create a custom event in the child component that can be captured in the parent element.\nProps are used to send data from the parent element to the child component, and\n$emit()\nis used to do the \n  opposite: to pass information from the child component to the parent.\nThe purpose\nof the things we will do \nApp.vue\ninstead of in the the\nFoodItem.vue\nchild component where the change is currently happening.\nThe reason\nfor changing the favorite status in\nApp.vue\ninstead of in\nFoodItem.vue\nis that\nApp.vue\nis where the favorite status is stored in the first place, so that needs to be updated. In a larger project the data might come from a database we have connection to in\nApp.vue\n, and we want a change happening from the component to make a change in the database, so we need to communicate back to the parent from the child component.\nEmit a Custom Event\nThere is a need to send information from the component to the parent, and we use the built-in method\n$emit()\nto do that.\nWe already have the\ntoggleFavorite\nmethod inside the\nFoodItem.vue\ncomponent that runs when the toggle button is clicked. Now let's remove the existing line and add a line to emit our custom event 'toggle-favorite':\nFoodItem.vue\n:\nmethods: {\n\u00a0 toggleFavorite() {\nthis.foodIsFavorite = !this.foodIsFavorite;\nthis.$emit('toggle-Favorite');\n\u00a0 }\n}\nWe can choose the name of our custom event, but it is normal to use kebab-case for emit events.\nReceive an Emit Event\nThe custom emit event 'toggle-favorite' is now emitted from the\nFoodItem.vue\ncomponent, but we need to listen to the event in the\nApp.vue\nparent and call a method that does something so that we can see that the event happened.\nWe listen to the event with the shorthand\n@\ninstead of\nv-on:\nin\nApp.vue\nwhere the component is created:\nExample\nListen to the 'toggle-favorite' event in\nApp.vue\n:\n<food-item\n\u00a0 v-for=\"x in foods\"\n\u00a0 :key=\"x.name\"\n\u00a0 :food-name=\"x.name\"\n\u00a0 :food-desc=\"x.desc\"\n\u00a0 :is-favorite=\"x.favorite\"\n@toggle-favorite=\"receiveEmit\"\n/>\nWhen our custom 'toggle-favorite' event happens, we need to create the\nreceiveEmit\nmethod in\nApp.vue\nso that we can see that the event happened:\nmethods: {\n\u00a0 receiveEmit() {\n\u00a0 \u00a0 alert('Hello World!');\n\u00a0 }\n}\nRun Example \u00bb\nChange The Food Item 'favorite' Status in The Parent\nWe now have an event that notifies\nApp.vue\nwhen the 'Favorite' button is clicked from the child component.\nWe want to change the 'favorite' property in the 'foods' array in\nApp.vue\nfor the correct food item when a 'Favorite' button is clicked. To do that we send the food item name from\nFoodItem.vue\nto\nApp.vue\nbecause that is unique for each food item:\nFoodItem.vue\n:\nmethods: {\n\u00a0 toggleFavorite() {\n\u00a0 \u00a0 this.$emit('toggle-favorite'\n, this.foodName\n);\n\u00a0 }\n}\nWe can now receive the food item name in\nApp.vue\nas an argument to the method called when the 'toggle-favorite' event happens, like this:\nExample\nApp.vue\n:\nmethods: {\n\u00a0 receiveEmit(\nfoodId\n) {  \n\u00a0 \u00a0 alert( 'You clicked: ' +\nfoodId\n);\n\u00a0 }\n}\nRun Example \u00bb\nNow that we know what food item that was clicked we can update the 'favorite' status for the correct food item inside the 'foods' array:\nApp.vue\n:\nmethods: {\n\u00a0 receiveEmit(foodId) {\n\u00a0 \u00a0 const foundFood = this.foods.find(\n\u00a0 \u00a0 \u00a0 food => food.name === foodId\n\u00a0 \u00a0 );\n\u00a0 \u00a0 foundFood.favorite = !foundFood.favorite;\n\u00a0 }\n}\nIn the code above, the array method 'find' goes through the 'foods' array and looks for an object with name property equal to the food item we have clicked, and returns that object as 'foundFood'. After that we can set 'foundFood.health' to be \n  opposite to what it was before so that it toggles between\ntrue\nand\nfalse\n.\nLearn more about the JavaScript array method 'find'\nhere\n.\nLearn more about JavaScript arrow functions\nhere\n.\nThe correct food inside the 'foods' array now gets its 'favorite' status updated. The only thing remaining is to get the image indicating favorite food updated.\nBecause the food item components are already created with the 'favorite' status from the 'foods' array and sent as a prop 'is-favorite' from\nApp.vue\n, we just need to refer to this 'isFavorite' prop in\nFoodItem.vue\nfrom\nv-show\nwhere the\n<img>\nelement is to update the image:\n<img src=\"/img_quality.svg\" v-show=\"\nisFavorite\n\">\nWe can also delete the 'foodIsFavorite' data property in\nFoodItem.vue\nbecause it is no longer in use.\nExample\nIn this final example code the favorite status of the food items can be toggled in a similar way as before, but now the favorite status is modified in the correct place, inside\nApp.vue\n.\nRun Example \u00bb\nThe 'emits' Option\nIn the same way that we declare props inside the\nFoodItem.vue\ncomponent, we can also document what the component emits by using the Vue 'emits' option.\nProps must be declared in the component, while emits are just recommended to be documented.\nThis is how we can document our emit in the\nFoodItem.vue\ncomponent:\n<script>\nexport default {  \n\u00a0 props: ['foodName','foodDesc','isFavorite'],\nemits: ['toggle-favorite'],\nmethods: {\n\u00a0 \u00a0 toggleFavorite() {\n\u00a0 \u00a0 \u00a0 this.$emit('toggle-favorite', this.foodName);\n\u00a0 \u00a0 }\n\u00a0 }\n};\n</script>\nThe component becomes easier for others to use when the emits are documented.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nProps are used to send data \nfrom the parent element to the child component, \nand\nis used to to pass information \nfrom the child component to the parent.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "97398ba4-abb7-438d-a61b-526685d11961",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "69af788f-cd32-40d5-9af9-0f586972a1ff",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "852b9dbc-3925-4a5e-9ebd-f9dba4179bb4",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Props?",
      "options": [
        "None of the above.",
        "currently happening",
        "used to send data from the parent element to the child component",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Props is 'used to send data from the parent element to the child component'."
    },
    {
      "question": "What is vue\nchild component where the change?",
      "options": [
        "used to send data from the parent element to the child component",
        "None of the above.",
        "currently happening",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of vue\nchild component where the change is 'currently happening'."
    }
  ],
  "summary": "This tutorial covers Vue $emit() Method concepts and techniques. You'll learn how to use Vue $emit() Method effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue $emit() Method and how to apply it in your projects."
}