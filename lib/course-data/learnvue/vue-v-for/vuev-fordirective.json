{
  "id": "f98e9a0f-70a0-4475-adfd-2d9da85374c4",
  "title": "Vuev-forDirective",
  "slug": "vuev-fordirective",
  "metadata": {
    "description": "Learn about Vuev-forDirective with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "index",
      "elements",
      "element",
      "manyfoods",
      "loop",
      "based",
      "list",
      "example",
      "number"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue v-for"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue\nv-for\nDirective",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "With normal JavaScript\nyou might want to create HTML elements based on an array. You use a for-loop, and inside you need to create the elements, adjust them, and then add each element to your page. And these elements will not react to a change in the array.\nWith Vue\nyou start with the HTML element you want to create into a list, with\nv-for\nas an attribute, refer to the array inside the Vue instance, and let Vue take care of the rest. And the elements created with\nv-for\nwill automatically update when the array changes.\nList Rendering\nList rendering\nin Vue is done by using the\nv-for\ndirective, so that several HTML elements are created with a for-loop.\nBelow are three slightly different examples where\nv-for\nis used.\nExample\nDisplay a list based on the items of an array.\n<ol>\n<li v-for=\"x in manyFoods\">{{ x }}</li>\n</ol>\n\nLoop Through an Array\nLoop through an array to display different images:\nExample\nShow images of food, based on an array in the Vue instance.\n<div>\n<img v-for=\"x in manyFoods\" v-bind:src=\"x\">\n</div>\n\nLoop Through Array of Objects\nLoop through an array of objects and display the object properties:\nExample\nShow both images and names of different types of food, based on an array in the Vue instance.\n<div>\n<figure v-for=\"x in manyFoods\">\n<img v-bind:src=\"x.url\">\n<figcaption>{{ x.name }}</figcaption>\n</figure>\n</div>\n\nGet the index\nThe index number of an array element can be really useful in JavaScript for-loops. Luckily we can get the index number when using\nv-for\nin Vue as well.\nTo get the index number with\nv-for\nwe need to give two comma separated words in parentheses: the first word will be the array element, and the second word will be the index of that array element.\nExample\nShow index number and food name of elements in the 'manyFoods' array in the Vue instance.\n<p v-for=\"(x, index) in manyFoods\">\n{{ index }}: \"{{ x }}\" <br>\n</p>\n\nWe can also display both array element index and information from the array element itself, if the array elements are objects:\nExample\nShow both the array element index number, and text from the objects in the 'manyFoods' array.\n<p v-for=\"(x, index) in manyFoods\">\n{{ index }}: \"{{ x.name }}\", url: \"{{ x.url }}\" <br>\n</p>\n\nVue Exercises\nTest Yourself With Exercises\nExercise:\nList rendering in Vue can be done so that several HTML elements are created based on an array.\nWhat Vue directive makes this possible?\nv-\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<ol>\n<li v-for=\"x in manyFoods\">{{ x }}</li>\n</ol>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<div>\n<img v-for=\"x in manyFoods\" v-bind:src=\"x\">\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<div>\n<figure v-for=\"x in manyFoods\">\n<img v-bind:src=\"x.url\">\n<figcaption>{{ x.name }}</figcaption>\n</figure>\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<p v-for=\"(x, index) in manyFoods\">\n{{ index }}: \"{{ x }}\" <br>\n</p>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<p v-for=\"(x, index) in manyFoods\">\n{{ index }}: \"{{ x.name }}\", url: \"{{ x.url }}\" <br>\n</p>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<ol>\n# TODO: Complete this line\n</ol>",
      "solution": "<ol>\n<li v-for=\"x in manyFoods\">{{ x }}</li>\n</ol>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div>\n<img v-for=\"x in manyFoods\" v-bind:src=\"x\">\n# TODO: Complete this line",
      "solution": "<div>\n<img v-for=\"x in manyFoods\" v-bind:src=\"x\">\n</div>"
    }
  ],
  "related_topics": [
    {
      "id": "0b064b4f-fa71-4599-a030-9569bed64c4a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ee34e62e-65c8-4d66-b58d-31ac5e35d690",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3537d603-41a3-4bac-85f8-329bd1d2f26f",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is List Rendering\nList rendering\nin Vue?",
      "options": [
        "three slightly different examples where\nv-for\nis used",
        "done by using the\nv-for\ndirective",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of List Rendering\nList rendering\nin Vue is 'done by using the\nv-for\ndirective'."
    },
    {
      "question": "What is Below?",
      "options": [
        "None of the above.",
        "None of the above.",
        "three slightly different examples where\nv-for\nis used",
        "done by using the\nv-for\ndirective"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Below is 'three slightly different examples where\nv-for\nis used'."
    }
  ],
  "summary": "This tutorial covers Vuev-forDirective concepts and techniques. You'll learn how to use Vuev-forDirective effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vuev-forDirective and how to apply it in your projects."
}