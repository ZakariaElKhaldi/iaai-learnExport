{
  "id": "d0b1c8f7-6308-47d3-bd56-db8faed104d7",
  "title": "Vue HTTP Requests",
  "slug": "vue-http-requests",
  "metadata": {
    "description": "Learn about Vue HTTP Requests with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "data",
      "fetch",
      "http",
      "response",
      "example",
      "method",
      "button",
      "file",
      "json",
      "random"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 7,
    "category": "LearnVue",
    "subcategory": "Vue HTTP Request"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue HTTP Requests",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\nHTTP request\nis a part of the communication between a client and a server.\nThe client sends an\nHTTP request\nto the server, which handles the request and returns an HTTP response.\nHTTP\nHTTP\nstands for\nH\nyper\nT\next\nT\nransfer\nP\nrotocol.\nOur browser makes HTTP requests all the time in the background when we browse the Internet. When we access an Internet page, our browser (the client) sends several HTTP requests to make the server send us the page we want with all the relevant files and data as HTTP responses.\nThe most common kinds of HTTP requests are\nPOST\n,\nGET\n,\nPUT\n,\nPATCH\n, and\nDELETE\n. Learn more about the different kinds of HTTP requests on our\nHTTP Request Methods\npage.\nLearn more about what HTTP is on our\nWhat is HTTP\npage.\nThe 'fetch' Method\nTo get data from a server in Vue we can use the JavaScript\nfetch()\nmethod.\nWhen we use the\nfetch()\nmethod in this tutorial we will not specify the HTTP request method, and that means that the default request method\nGET\nis what is used in the background.\nThe\nfetch()\nmethod expects a URL address as an argument so that it knows where to get the data from.\nHere is a simple example that uses the\nfetch()\nmethod to send an HTTP\nGET\nrequest, and receive data as an HTTP response. The data requested in this case is the text inside the local file\nfile.txt\n:\nExample\nApp.vue\n:\n<template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    fetchData() {\n      const response = fetch(\"file.txt\");\n      this.data = response;\n    }\n  }\n};\n</script>\nRun Example \u00bb\nIn the example above, we only get \"[object Promise]\" as a result, but that is not what we want.\nWe get this result because\nfetch()\nis a promised-based method that returns a promise object. The first return the\nfetch()\nmethod gives is therefore just an object which means that the HTTP request has been sent. This is the \"pending\" state.\nWhen the\nfetch()\nmethod actually gets the data we want, the promise is fulfilled.\nTo wait for the response to be fulfilled, with the data we want, we need to use the\nawait\noperator in front of the\nfetch()\nmethod:\nconst response = await fetch(\"file.txt\");\nWhen the\nawait\noperator is used inside a method, the method is required to be declared with the\nasync\noperator:\nasync fetchData() {\n  const response = await fetch(\"file.txt\");\n  this.data = response;\n}\nThe\nasync\noperator tells the browser that the method is asynchronous, which means that it waits for something, and the browser can continue to do other tasks while it waits for the method to complete.\nNow what we get is a \"Response\", and no longer just a \"Promise\", which means we are one step closer to get the actual text inside the\nfile.txt\nfile:\nExample\nApp.vue\n:\n<template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"file.txt\");\n      this.data = response;\n    }\n  }\n};\n</script>\nRun Example \u00bb\nTo get the text inside the\nfile.txt\nfile we need to use the\ntext()\nmethod on the response. Because the\ntext()\nmethod is a promise based method, we need to use the\nawait\noperator in front of it.\nFinally!\nWe now have what we need to get the text from inside the\nfile.txt\nfile with the\nfetch()\nmethod:\nExample\nApp.vue\n:\n<template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <p v-if=\"data\">{{ data }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"file.txt\");\n      this.data = await response.text();\n    }\n  }\n};\n</script>\nRun Example \u00bb\nFetch Data from a JSON File\nIn the \n.txt\nfile. But there are many ways to store data, and now we will see how we can fetch information from a\n.json\nfile.\nJSON\nis a common file format that is easy to work with because data is stored as text so that it is easy to read for humans, and the\nJSON\nformat is also widely supported by programming languages, so that we can, for example, specify what data to extract from a\n.json\nfile.\nTo read data from a\n.json\nfile, the only change we need to do to the example above is to fetch a\n.json\nfile, and use the\njson()\nmethod instead of the\ntext()\nmethod on the response.\nThe\njson()\nmethod reads the response from the HTTP request and returns a JavaScript object.\nWe use the\n<pre>\ntag here to show the\nJSON\nformatted text because it preserves spaces and line breaks so that it is easier to read.\nExample\nApp.vue\n:\n<template>\n  <div>\n    <button @click=\"fetchData\">Fetch Data</button>\n    <pre v-if=\"data\">{{ data }}</pre>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: null,\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"bigLandMammals.json\");\n      this.data = await response.json();\n    }\n  }\n};\n</script>\nRun Example \u00bb\nBecause the result of the\njson()\nmethod is a JavaScript object, we can modify the example above to show a random animal from the\nbigLandMammals.json\nfile:\nExample\nApp.vue\n:\n<template>\n  <p>Try clicking the button more than once to see new animals picked randomly.</p>\n  <button @click=\"fetchData\">Fetch Data</button>\n  <div v-if=\"randomMammal\">\n    <h2>{{ randomMammal.name }}</h2>\n    <p>Max weight: {{ randomMammal.maxWeight }} kg</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      randomMammal: null\n    };\n  },\n  methods: {\n    async fetchData() {\n      const response = await fetch(\"bigLandMammals.json\");\n      const data = await response.json();\n      const randIndex = Math.floor(Math.random()*data.results.length);\n      this.randomMammal = data.results[randIndex];\n    }\n  }\n};\n</script>\nRun Example \u00bb\nData from an API\nAPI stands for\nA\npplication\nP\nrogramming\nI\nnterface. You can learn more about API\nhere\n.\nThere are a lot of interesting free APIs we can connect with and use, to get weather data, stock exchange data, etc.\nThe response we get when we call an API with an HTTP request can contain all kinds of data, but often contains data in the\nJSON\nformat.\nExample\nA button can be clicked to get a random user from the\nrandom-data-api.com\nAPI.\nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <pre v-if=\"data\">{{ data }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n        this.data = await response.json();\n      }   \n    }\n  };\n</script>\nRun Example \u00bb\nWe can modify our \nExample\nWe show the random user name in a\n<pre>\ntag, along with the job title and image when the button is clicked.\nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <div v-if=\"data\" id=\"dataDiv\">\n    <img :src=\"data.avatar\" alt=\"avatar\">\n    <pre>{{ data.first_name + \" \" + data.last_name }}</pre>\n    <p>\"{{ data.employment.title }}\"</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        const response = await fetch(\"https://random-data-api.com/api/v2/users\"); \n        this.data = await response.json();\n      },    \n    }\n  };\n</script>\n\n<style>\n#dataDiv {\n  width: 240px;\n  background-color: aquamarine;\n  border: solid black 1px;\n  margin-top: 10px;\n  padding: 10px;\n}\n#dataDiv > img {\n  width: 100%;\n}\npre {\n  font-size: larger;\n  font-weight: bold;\n}\n</style>\nRun Example \u00bb\nHTTP Request in Vue with The 'axios' Library\nThe 'axios' JavaScript library also allows us to make HTTP requests.\nTo create and run the example on your own machine you first need to install the 'axios' library using the terminal in your project folder, like this:\nnpm install axios\nThis is how we can use the 'axios' library in Vue to fetch a random user:\nExample\nOnly small changes are made to the \nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p>Click the button to fetch data with an HTTP request.</p>\n  <p>Each click generates an object with a random user from <a href=\"https://random-data-api.com/\" target=\"_blank\">https://random-data-api.com/</a>.</p>\n  <p>The robot avatars are lovingly delivered by <a href=\"http://Robohash.org\" target=\"_blank\">RoboHash</a>.</p>\n  <button @click=\"fetchData\">Fetch data</button>\n  <div v-if=\"data\" id=\"dataDiv\">\n    <img :src=\"data.data.avatar\" alt=\"avatar\">\n    <pre>{{ data.data.first_name + \" \" + data.data.last_name }}</pre>\n    <p>\"{{ data.data.employment.title }}\"</p>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios'\n\nexport default {\n    data() {\n      return {\n        data: null,\n      };\n    },\n    methods: {\n      async fetchData() {      \n        this.data = await axios.get(\"https://random-data-api.com/api/v2/users\");\n      }\n    }\n  };\n</script>\n\n<style>\n#dataDiv {\n  width: 240px;\n  background-color: aquamarine;\n  border: solid black 1px;\n  margin-top: 10px;\n  padding: 10px;\n}\n#dataDiv > img {\n  width: 100%;\n}\npre {\n  font-size: larger;\n  font-weight: bold;\n}\n</style>\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "npm install axios",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "npm install axios"
    },
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "018016be-7e42-4357-90c2-8bf860f172ae",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e785666c-5e4c-4d2c-9a2f-4204082dae09",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3c9d5e26-a4f2-4cdf-bd14-5c31d77f6854",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue HTTP Requests\n\nThe\nHTTP request?",
      "options": [
        "None of the above.",
        "None of the above.",
        "POST",
        "a part of the communication between a client and a server"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Vue HTTP Requests\n\nThe\nHTTP request is 'a part of the communication between a client and a server'."
    },
    {
      "question": "What is The most common kinds of HTTP requests?",
      "options": [
        "None of the above.",
        "a part of the communication between a client and a server",
        "POST",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The most common kinds of HTTP requests is 'POST'."
    }
  ],
  "summary": "This tutorial covers Vue HTTP Requests concepts and techniques. You'll learn how to use Vue HTTP Requests effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue HTTP Requests and how to apply it in your projects."
}