{
  "id": "93ce209e-27f9-4063-baa6-48d393a3c589",
  "title": "Vue <Transition> Component",
  "slug": "vue-transition-component",
  "metadata": {
    "description": "Learn about Vue <Transition> Component with clear explanations and practical examples.",
    "keywords": [
      "transition",
      "enter",
      "example",
      "style",
      "leave",
      "animation",
      "opacity",
      "active",
      "button",
      "template"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 11,
    "category": "LearnVue",
    "subcategory": "<Transition>"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue <Transition> Component",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Built-in Components Reference\n\nExample\nUsing the built-in\n<Transition>\ncomponent to animate a\n<p>\nelement as it is removed with\nv-if\n:\n<Transition>\n  <p v-if=\"exists\">Hello World!</p>\n</Transition>\nRun Example \u00bb\nSee more examples below.\nDefinition and Usage\nThe built-in\n<Transition>\ncomponent is used to animate elements as they are added or removed with\nv-if\n,\nv-show\n, or with dynamic components.\nThe rules for how elements are animated is written inside automatically generated classes or JavaScript transition hooks. See tables below.\nThere can only be one element at the root level of the\n<Transition>\ncomponent.\nProps\nProp\nDescription\nnone\nDefault.\nRun Example \u00bb\nappear\nIf set to\ntrue\n, the element is also animated as it is mounted for the first time. Default value is\nfalse\n.\nRun Example \u00bb\nmode\nmode=\"out-in\"\nmakes sure that the initial element leaves before the \nmode=\"in-out\"\nmakes sure that the new element enters before the old element leaves. Default is that the old element leaves at the same time as the new element enters.\nRun Example \u00bb\nname\nSpecify the name of a transition. If we have more than one transition we need to give them unique names to tell them apart.\nname=\"swirl\"\nmakes sure the CSS transition classes start with\nswirl-\ninstead of the default prefix\nv-\n.\nRun Example \u00bb\ncss\nBoolean.\n:css=\"false\"\ntells the Vue compiler that no transition classes are used for this transition, only JavaScript hooks. With this prop set, the\ndone()\ncallback must be used inside the enter and leave hooks.\nRun Example \u00bb\ntype\nSpecify whether to wait for 'animation' or 'transition' to finish a transition. If both a CSS animation and a CSS transition is set, and this\ntype\nprop is not set, Vue will detect the longest duration of these two and use that as the transition time.\nduration\nSpecify the length of the transition time for 'enter' and 'leave'. Default is to end when the CSS animation or CSS transition ends. Specific times can be defined like this\n:duration=\"{enter:2000, leave:1000 }\"\n, or like this\nduration=\"1000\"\n.\nenterFromClass\nenterActiveClass\nenterToClass\nappearFromClass\nappearActiveClass\nappearToClass\nleaveFromClass\nleaveActiveClass\nleaveToClass\nUse these props to rename transition classes.\nUsing one of these props like this\nenter-active-class=\"entering\"\nmeans that this transition class can be referred to as\n.entering\nin CSS, instead of the default\n.v-enter-active\n. The convention is to use kebab-case for props in template to be in line with how attributes are written in HTML.\nRun Example \u00bb\nCSS Transition Classes\nWhen we use the\n<Transition>\ncomponent, we automatically get six different CSS classes we can use to animate elements when they are added or removed.\nThese classes are active at different stages when elements are added (enter) or removed (leave):\nTransition Class\nDescription\nv-enter-from\nInitial style of the element when the entering phase starts\nRun Example \u00bb\nv-enter-active\nThe element's style during the entering phase\nRun Example \u00bb\nv-enter-to\nThe element's style right at the end of the entering phase\nRun Example \u00bb\nv-leave-from\nInitial style of the element when the leaving phase starts\nRun Example \u00bb\nv-leave-active\nThe element's style during the leaving phase\nRun Example \u00bb\nv-leave-to\nThe element's style right at the end of the leaving phase\nRun Example \u00bb\nJavaScript Transition Hooks\nThe transition classes above corresponds to events that we can hook into to run JavaScript code.\nJavaScript Event\nDescription\nbefore-enter\nCalled right at the start of the enter phase\nenter\nCalled after the 'before-enter' hook, during the enter phase\nRun Example \u00bb\nafter-enter\nCalled right at the end of the enter transition\nRun Example \u00bb\nenter-cancelled\nCalled if the enter transition is cancelled\nRun Example \u00bb\nbefore-leave\nCalled right at the start of the leave phase\nRun Example \u00bb\nleave\nCalled after the 'before-leave' hook, during the leave phase\nRun Example \u00bb\nafter-leave\nCalled right at the end of the leave transition\nleave-cancelled\nThis is only called if\nv-show\nis used and the leave phase is cancelled\nMore examples\nExample 1\nA\n<p>\nelement slides in and out when it is toggled.\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    translate: -100px 0;\n  }\n  .v-enter-to {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-from {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-to {\n    opacity: 0;\n    translate: 100px 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: all 0.5s;\n  }\n</style>\nRun Example \u00bb\nExample 2\nA\n<p>\nelement has separate background colors during 'enter' and 'leave'\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style>\nRun Example \u00bb\nExample 3\n<p>\nelements are animated differently, using the\nname\nprop to differentiate the\n<Transition>\ncomponents.\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <p>The second transition in this example has the name prop \"swirl\", so that we can keep the transitions apart with different class names.</p>\n  <hr>\n  <button @click=\"this.p1Exists = !this.p1Exists\">{{btn1Text}}</button><br>\n  <Transition>\n    <p v-if=\"p1Exists\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <hr>\n  <button @click=\"this.p2Exists = !this.p2Exists\">{{btn2Text}}</button><br>\n  <Transition name=\"swirl\">\n    <p v-if=\"p2Exists\" id=\"p2\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      p1Exists: false,\n      p2Exists: false\n    }\n  },\n  computed: {\n    btn1Text() {\n      if(this.p1Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    },\n    btn2Text() {\n      if(this.p2Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  .swirl-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .swirl-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, #p2 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p2 {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nExample 4\nThe\nafter-enter\nevent triggers a\n<div>\nelement to be displayed.\n<template>\n  <h1>JavaScript Transition Hooks</h1>\n  <p>This code hooks into \"after-enter\" so that after the initial animation is done, a method runs that displays a red div.</p>\n  <button @click=\"pVisible=true\">Create p-tag!</button><br>\n  <Transition @after-enter=\"onAfterEnter\">\n    <p v-show=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-show=\"divVisible\">This appears after the \"enter-active\" phase of the transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onAfterEnter() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nExample 5\nA toggle button triggers the\nenter-cancelled\nevent.\n<template>\n  <h1>The 'enter-cancelled' Event</h1>\n  <p>Click the toggle button again before the enter animation is finished to trigger the 'enter-cancelled' event.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button><br>\n  <Transition @enter-cancelled=\"onEnterCancelled\">\n    <p v-if=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-if=\"divVisible\">You interrupted the \"enter-active\" transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onEnterCancelled() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 2s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 720deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nExample 6\nThe\nappear\nprop starts the\n<p>\nelement animation right after the page is loaded.\n<template>\n  <h1>The 'appear' Prop</h1>\n  <p>The 'appear' prop starts the animation when the p tag below is rendered for the first time as the page opens. Without the 'appear' prop, this example would have had no animation.</p>\n  <Transition appear>\n    <p id=\"p1\">Hello World!</p>\n  </Transition>\n</template>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n</style>\nRun Example \u00bb\nExample 7\nFlip through images with animation on 'enter' and 'leave'. A new image is added before the old image is removed.\n<template>\n  <h1>Transition Between Elements</h1>\n  <p>Click the button to get a new image.</p>\n  <p>The new image is added before the \n  <button @click=\"newImg\">\n  <Transition>\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgActive: 'pizza',\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  methods: {\n    newImg() {\n      this.indexNbr++;\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      this.imgActive = this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style>\nRun Example \u00bb\nExample 8\nFlip through images with animation on 'enter' and 'leave'. The\nmode=\"out-in\"\nprevents new images to be added until the old image is removed.\n<template>\n  <h1>mode=\"out-in\"</h1>\n  <p>Click the button to get a new image.</p>\n  <p>With mode=\"out-in\", the \n  <button @click=\"indexNbr++\">\n  <Transition mode=\"out-in\">\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  computed: {\n    imgActive() {\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      return this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 0.7s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 0.7s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style>\nRun Example \u00bb\nExample 9\nSwitching between components is animated.\n<template>\n  <h1>Transition with Dynamic Components</h1>\n  <p>The Transition component wraps around the dynamic component so that the switching can be animated.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <Transition mode=\"out-in\">\n    <component :is=\"activeComp\"></component>\n  </Transition>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-active {\n    animation: slideIn 0.5s;\n  }\n  @keyframes slideIn {\n    from {\n      translate: -200px 0;\n      opacity: 0;\n    }\n    to {\n      translate: 0 0;\n      opacity: 1;\n    }\n  }\n  .v-leave-active {\n    animation: slideOut 0.5s;\n  }\n  @keyframes slideOut {\n    from {\n      translate: 0 0;\n      opacity: 1;\n    }\n    to {\n      translate: 200px 0;\n      opacity: 0;\n    }\n  }\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style>\nRun Example \u00bb\nExample 10\nSwitching between components is animated.\n<template>\n  <h1>The :css=\"false\" Prop</h1>\n  <p>With the 'css' prop set to 'false', we tell the compiler that JavaScript hooks are used instead of CSS transition classes.</p>\n  <p>When we use :css=\"false\", we must call done() inside the 'enter' and the 'leave' hooks, to tell the browser when those transitions are finished.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button>\n  <div>\n    <Transition\n      :css=\"false\" \n      @enter=\"onEnter\"\n      @after-enter=\"onAfterEnter\"\n      @before-leave=\"onBeforeLeave\"\n      @leave=\"onLeave\"\n    >\n      <p \n        v-if=\"pVisible\"\n        id=\"p1\">\n        Hello World!\n      </p>\n    </Transition>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false\n    }\n  },\n  methods: {\n    onEnter(el,done) {\n      let pos = 0;\n      window.requestAnimationFrame(frame);\n      function frame() {\n        if (pos > 150) {\n          done();\n        } else {\n          pos++; \n          el.style.left = pos + \"px\"; \n          window.requestAnimationFrame(frame);\n        }\n      }\n    },\n    onAfterEnter(el) {\n      el.style.backgroundColor = \"yellow\";\n    },\n    onBeforeLeave(el) {\n      el.style.backgroundColor = \"lightgreen\";\n    },\n    onLeave(el,done) {\n      let pos = 150;\n      window.requestAnimationFrame(frame);\n      function frame() {\n        if (pos < 0) {\n          done();\n        }\n        else {\n          pos--;\n          el.style.left = pos + \"px\"; \n          window.requestAnimationFrame(frame);\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  #p1 {\n    position: absolute;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n  #app > div {\n    position: relative;\n    background-color: coral;\n    width: 300px;\n    height: 300px;\n    border: dashed black 1px;\n    margin-top: 20px;\n  }\n</style>\nRun Example \u00bb\nExample 11\nUsing the\nenterActiveClass\nprop to rename the 'v-enter-active' CSS class to 'entering'.\n<template>\n  <h1>The 'enterActiveClass' Prop</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition enter-active-class=\"entering\">\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .entering {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nVue Animations\nVue Tutorial:\nVue Animations with v-for\nVue Reference:\nVue <TransitionGroup> Component\n\nVue Built-in Components Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d95ed368-456d-47cb-9777-2fa1e7d257a8",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b117997f-925f-4135-b6a4-dd79aa4e9489",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "06c1549c-0df8-48e5-9b78-a5578e42895d",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is element as it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "removed with\nv-if\n:\n<Transition>\n  <p v-if=\"exists\">Hello World",
        "added or removed with\nv-if"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of element as it is 'removed with\nv-if\n:\n<Transition>\n  <p v-if=\"exists\">Hello World'."
    },
    {
      "question": "What is component is used to animate elements as they?",
      "options": [
        "None of the above.",
        "removed with\nv-if\n:\n<Transition>\n  <p v-if=\"exists\">Hello World",
        "None of the above.",
        "added or removed with\nv-if"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of component is used to animate elements as they is 'added or removed with\nv-if'."
    }
  ],
  "summary": "This tutorial covers Vue <Transition> Component concepts and techniques. You'll learn how to use Vue <Transition> Component effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue <Transition> Component and how to apply it in your projects."
}