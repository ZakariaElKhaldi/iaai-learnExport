{
  "id": "3e0d2764-79f5-4bd4-b9c3-1a35815585ec",
  "title": "Vue <component> Element",
  "slug": "vue-component-element",
  "metadata": {
    "description": "Learn about Vue <component> Element with clear explanations and practical examples.",
    "keywords": [
      "component",
      "element",
      "example",
      "template",
      "built",
      "togglevalue",
      "dynamic",
      "style",
      "components",
      "return"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "<component>"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue <component> Element",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Built-in Elements Reference\n\nExample\nUsing the built-in\n<component>\nelement with the\nis\nattribute to create a dynamic component.\n<template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template>\nRun Example \u00bb\nSee more examples below.\nDefinition and Usage\nThe built-in\n<component>\nelement is used together with the built-in\nis\nattribute to create an HTML element, or a Vue component.\nHTML element:\nTo create an HTML element with the\n<component>\nelement, the\nis\nattribute is set equal to the name of the HTML element we want to create, either directly (Example 1), or dynamically by the use of\nv-bind\n(\nExample 2\n).\nVue component:\nTo render a Vue component with the\n<component>\nelement, the\nis\nattribute is set equal to the name of the Vue component we want to create, either directly (\nExample 3\n), or dynamically by the use of\nv-bind\nto create a dynamic component (\nExample 4\n).\nWhen creating a dynamic component, the built-in\n<KeepAlive>\ncomponent can be used around the\n<component>\nelement to remember the state of components that are not active. (\nExample 5\n)\nThe active component in a dynamic component can also be changed by using a ternary expression with the\nis\nattribute. (\nExample 6\n)\nNote:\nThe\nv-model\ndirective does not work with native HTML form input tags (such as\n<input>\nor\n<option>\n) created with the\n<component>\nelement. (\nExample 7\n)\nProps\nProp\nDescription\nis\nRequired. Is set equal to the component that should be active, or is set equal to the HTML element to be created.\nMore examples\nExample 1\nUsing the built-in\n<component>\nelement to create a\n<div>\nelement.\n<template>\n  <h2>Example Built-in 'component' Element</h2>\n  <p>The component element is rendered as a div element with is=\"div\":</p>\n  <component is=\"div\">This is a DIV element</component>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n}\n</style>\nRun Example \u00bb\nExample 2\nUsing the built-in\n<component>\nelement to toggle between an ordered list and an unordered list.\n<template>\n  <h2>Example Built-in 'component' Element</h2>\n  <p>Using the component element to toggle between an ordered list (ol), and an unordered list (ul):</p>\n  <button v-on:click=\"toggleValue = !toggleValue\">Toggle</button>\n  <p>Animals from around the world</p>\n  <component :is=\"tagType\">\n    <li>Kiwi</li>\n    <li>Jaguar</li>\n    <li>Bison</li>\n    <li>Snow Leopard</li>\n  </component>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      toggleValue: true\n    }\n  },\n  computed: {\n    tagType() {\n      if (this.toggleValue) {\n        return 'ol'\n      }\n      else {\n        return 'ul'\n      }\n    }\n  }\n}\n</script>\nRun Example \u00bb\nExample 3\nUsing the built-in\n<component>\nelement to render a component by providing the name of the component to the\nis\nattribute.\nApp.vue\n:\n<template>\n  <h2>Example Built-in 'is' Attribute</h2>\n  <p>The component element below is set to be a component by the use of 'is=\"child-comp\"'.</p>\n  <component is=\"child-comp\"></component>\n</template>\nChildComp.vue\n:\n<template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>This is the child component</p>\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n  padding: 10px;\n  max-width: 250px;\n  margin-top: 20px;\n}\n</style>\nRun Example \u00bb\nExample 4\nUsing the built-in\n<component>\nelement to create a dynamic component, where we can switch between two components.\n<template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style>\nRun Example \u00bb\nExample 5\nThe built-in\n<KeepAlive>\ncomponent is used around the\n<component>\nelement to remember the inputs when the components are switched between.\n<template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <p>With the <KeepAlive> tag the components now remember the user inputs.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <KeepAlive>\n    <component :is=\"activeComp\"></component>\n  </KeepAlive>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n  h2 {\n    text-decoration: underline;\n  }\n</style>\nRun Example \u00bb\nExample 6\nUsing the\n<component>\nelement with the\nis\nattribute and a ternary expression to toggle which component should be active.\n<template>\n  <h1>Dynamic Components</h1>\n  <p>Refresh the page and there is a chance the dynamic component will toggle.</p>\n  <component :is=\"Math.random() > 0.5 ? 'comp-one' : 'comp-two'\"></component>\n</template>\n\n<style>\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style>\nRun Example \u00bb\nExample 7\nDemonstrating that the\nv-model\ndirective does not work with\n<input>\nelements created using the\n<component>\nelement.\n<template>\n  <h1>Dynamic Components</h1>\n  <p><mark>The v-model directive does not work with input element created with the component element.</mark></p>\n  <hr>\n  <p>Does not work, not updating:</p>\n  <component is=\"input\" type=\"number\" v-model=\"inpVal1\"></component> (try to change value)\n  <p class=\"pResult1\">inpVal1: {{ inpVal1 }}</p>\n  <hr>\n  <p>How it should work, updates:</p>\n  <input type=\"number\" v-model=\"inpVal2\"> (try to change value)\n  <p class=\"pResult2\">inpVal2: {{ inpVal2 }}</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpVal1: 4,\n      inpVal2: 7,\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  width: 350px;\n  margin: 10px;\n}\n.pResult1 {\n  background-color: lightpink;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: bold;\n  padding: 5px;\n}\n.pResult2 {\n  background-color: lightgreen;\n  font-family: 'Courier New', Courier, monospace;\n  font-weight: bold;\n  padding: 5px;\n}\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nVue Components\nVue Tutorial:\nDynamic Components\nVue Tutorial:\nVue Form Inputs\nVue Tutorial:\nVue v-model Directive\nVue Reference:\nVue is Attribute\nVue Reference:\nVue v-bind Directive\nVue Reference:\nVue v-model Directive\n\nVue Built-in Elements Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "7aa63ed9-19d6-4a61-b490-b851185d9353",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "36bb0aa3-ed9c-4617-b459-db60eb5d9b4d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "55483d08-7fc7-4de1-a277-86d1d52498f6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is element with the?",
      "options": [
        "attribute to create a dynamic component",
        "Not a element with the.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of element with the is 'attribute to create a dynamic component'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Vue <component> Element concepts and techniques. You'll learn how to use Vue <component> Element effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue <component> Element and how to apply it in your projects."
}