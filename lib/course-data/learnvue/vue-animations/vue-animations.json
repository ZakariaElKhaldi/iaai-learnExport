{
  "id": "3f008bb4-e7e0-4724-bb27-fc187310bd74",
  "title": "Vue Animations",
  "slug": "vue-animations",
  "metadata": {
    "description": "Learn about Vue Animations with clear explanations and practical examples.",
    "keywords": [
      "transition",
      "enter",
      "example",
      "button",
      "animation",
      "return",
      "opacity",
      "template",
      "style",
      "leave"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 11,
    "category": "LearnVue",
    "subcategory": "Vue Animations"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Animations",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The built-in\n<Transition>\ncomponent in Vue helps us to do animations when elements are added or removed with\nv-if\n,\nv-show\nor with dynamic components.\nThere is nothing wrong with using plain CSS transitions and animations in other cases.\nA Short Introduction to CSS Transition and Animation\nThis part of the tutorial requires knowledge about basic CSS\nanimations\nand\ntransitions\n.\nBut before we use the Vue specific built-in\n<Transition>\ncomponent to create animations, let's look at two examples of how plain CSS animations and transitions can be used with Vue.\nExample\nApp.vue\n:\n<template>\n  <h1>Basic CSS Transition</h1>\n  <button @click=\"this.doesRotate = true\">Rotate</button>\n  <div :class=\"{ rotate: doesRotate }\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      doesRotate: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .rotate {\n    rotate: 160deg;\n    transition: rotate 1s;\n  }\n  div {\n    border: solid black 2px;\n    background-color: lightcoral;\n    width: 60px;\n    height: 60px;\n  }\n  h1, button, div {\n    margin: 10px;\n  }\n</style>\nRun Example \u00bb\nIn the example above, we use\nv-bind\nto give the\n<div>\ntag a class so that it rotates. The reason that the rotation takes 1 second, is that it is defined with the CSS\ntransition\nproperty.\nIn the example below, we see how we can move an object with the CSS\nanimation\nproperty.\nExample\nApp.vue\n:\n<template>\n  <h1>Basic CSS Animation</h1>\n  <button @click=\"this.doesMove = true\">Start</button>\n  <div :class=\"{ move: doesMove }\"></div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      doesMove: false\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .move {\n    animation: move .5s alternate 4 ease-in-out;\n  }\n  @keyframes move {\n    from {\n      translate: 0 0;\n    }\n    to {\n      translate: 70px 0;\n    }\n  }\n  div {\n    border: solid black 2px;\n    background-color: lightcoral;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n  }\n  h1, button, div {\n    margin: 10px;\n  }\n</style>\nRun Example \u00bb\nThe <Transition> Component\nThere is nothing wrong with using plain CSS transitions and animations like we did in the two examples above.\nBut luckily Vue provides us with the built-in\n<Transition>\ncomponent in cases where we want to animate an element as it is removed from, or added to, our application with\nv-if\nor\nv-show\n, because that would be hard to do with plain CSS animation.\nLet's first make an application where a button adds or removes a\n<p>\ntag:\nExample\nApp.vue\n:\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <p v-if=\"exists\">Hello World!</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n  }\n</style>\nRun Example \u00bb\nNow let's wrap the\n<Transition>\ncomponent around the\n<p>\ntag, and see how we can animate the removal of the\n<p>\ntag.\nWhen we use the\n<Transition>\ncomponent, we automatically get six different CSS classes we can use to animate when elements are added or removed.\nIn the example below we will use the automatically available classes\nv-leave-from\nand\nv-leave-to\nto make a fade out animation when the\n<p>\ntag is removed:\nExample\nApp.vue\n:\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-leave-from {\n    opacity: 1;\n  }\n  .v-leave-to {\n    opacity: 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: opacity 0.5s;\n  }\n</style>\nRun Example \u00bb\nThe Six <Transition> Classes\nThere are six classes automatically available to us when we use the\n<Transition>\ncomponent.\nAs an element inside the\n<Transition>\ncomponent is\nadded\n, we can use these first three classes to animate that transition:\nv-enter-from\nv-enter-active\nv-enter-to\nAnd as an element is\nremoved\ninside the\n<Transition>\ncomponent, we can use the \nv-leave-from\nv-leave-active\nv-leave-to\nNote:\nThere can only be one element on root level of the\n<Transition>\ncomponent.\nNow, let's use four of these classes so that we can animate both when the\n<p>\ntag is added, and when it is removed.\nExample\nApp.vue\n:\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    translate: -100px 0;\n  }\n  .v-enter-to {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-from {\n    opacity: 1;\n    translate: 0 0;\n  }\n  .v-leave-to {\n    opacity: 0;\n    translate: 100px 0;\n  }\n  p {\n    background-color: lightgreen;\n    display: inline-block;\n    padding: 10px;\n    transition: all 0.5s;\n  }\n</style>\nRun Example \u00bb\nWe can also use the\nv-enter-active\nand\nv-leave-active\nto set styling or animation\nduring adding\nor\nduring removal\nof an element:\nExample\nApp.vue\n:\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <button @click=\"this.exists = !this.exists\">{{btnText}}</button><br>\n  <Transition>\n    <p v-if=\"exists\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      exists: false\n    }\n  },\n  computed: {\n    btnText() {\n      if(this.exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  p {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n</style>\nRun Example \u00bb\nThe Transition 'name' Prop\nIn case you have several\n<Transition>\ncomponents, but you want at least one of the\n<Transition>\ncomponents to have a different animation, you need different names for the\n<Transition>\ncomponents to tell them apart.\nWe can choose the name of a\n<Transition>\ncomponent with the\nname\nprop, and that changes the name of the transition classes as well, so that we can set different CSS animation rules for that component.\n<Transition name=\"swirl\">\nIf the transition\nname\nprop value is set to\n'swirl'\n, the automatically available classes will now start with\n'swirl-'\ninstead of\n'v-'\n:\nswirl\n-enter-from\nswirl\n-enter-active\nswirl\n-enter-to\nswirl\n-leave-from\nswirl\n-leave-active\nswirl\n-leave-to\nIn the example below we use the\nname\nprop to give the\n<Transition>\ncomponents different animations. One\n<Transition>\ncomponent is not given a name, and is therefore given animations using the automatically generated CSS classes starting with 'v-'. The other\n<Transition>\ncomponent is given a name 'swirl' so that it can be given rules for animation with the automatically generated CSS classes starting with 'swirl-'.\nExample\nApp.vue\n:\n<template>\n  <h1>Add/Remove <p> Tag</h1>\n  <p>The second transition in this example has the name prop \"swirl\", so that we can keep the transitions apart with different class names.</p>\n  <hr>\n  <button @click=\"this.p1Exists = !this.p1Exists\">{{btn1Text}}</button><br>\n  <Transition>\n    <p v-if=\"p1Exists\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <hr>\n  <button @click=\"this.p2Exists = !this.p2Exists\">{{btn2Text}}</button><br>\n  <Transition name=\"swirl\">\n    <p v-if=\"p2Exists\" id=\"p2\">Hello World!</p>\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      p1Exists: false,\n      p2Exists: false\n    }\n  },\n  computed: {\n    btn1Text() {\n      if(this.p1Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    },\n    btn2Text() {\n      if(this.p2Exists) {\n        return 'Remove';\n      }\n      else {\n        return 'Add';\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    background-color: lightgreen;\n    animation: added 1s;\n  }\n  .v-leave-active {\n    background-color: lightcoral;\n    animation: added 1s reverse;\n  }\n  @keyframes added {\n    from {\n      opacity: 0;\n      translate: -100px 0;\n    }\n    to {\n      opacity: 1;\n      translate: 0 0;\n    }\n  }\n  .swirl-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .swirl-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, #p2 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p2 {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nJavaScript Transition Hooks\nEvery Transition class as just mentioned corresponds to an event that we can hook into to run some JavaScript code.\nTransition Class\nJavaScript Event\nv-enter-from\nbefore-enter\nv-enter-active\nenter\nv-enter-to\nafter-enter\nenter-cancelled\nv-leave-from\nbefore-leave\nv-leave-active\nleave\nv-leave-to\nafter-leave\nleave-cancelled\n(v-show only)\nWhen the\nafter-enter\nevent happens in the example below, a method runs that displays a red\n<div>\nelement.\nExample\nApp.vue\n:\n<template>\n  <h1>JavaScript Transition Hooks</h1>\n  <p>This code hooks into \"after-enter\" so that after the initial animation is done, a method runs that displays a red div.</p>\n  <button @click=\"pVisible=true\">Create p-tag!</button><br>\n  <Transition @after-enter=\"onAfterEnter\">\n    <p v-show=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-show=\"divVisible\">This appears after the \"enter-active\" phase of the transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onAfterEnter() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nYou can use the \"Toggle\" button in the example below to interrupt the enter transition phase of the\n<p>\nelement so that the\nenter-cancelled\nevent is triggered:\nExample\nApp.vue\n:\n<template>\n  <h1>The 'enter-cancelled' Event</h1>\n  <p>Click the toggle button again before the enter animation is finished to trigger the 'enter-cancelled' event.</p>\n  <button @click=\"pVisible=!pVisible\">Toggle</button><br>\n  <Transition @enter-cancelled=\"onEnterCancelled\">\n    <p v-if=\"pVisible\" id=\"p1\">Hello World!</p>\n  </Transition>\n  <br>\n  <div v-if=\"divVisible\">You interrupted the \"enter-active\" transition.</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      pVisible: false,\n      divVisible: false\n    }\n  },\n  methods: {\n    onEnterCancelled() {\n      this.divVisible = true;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .v-enter-active {\n    animation: swirlAdded 2s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 720deg;\n      scale: 1;\n    }\n  }\n  #p1, div {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n  }\n  #p1 {\n    background-color: lightgreen;\n  }\n  div {\n    background-color: lightcoral;\n  }\n</style>\nRun Example \u00bb\nThe 'appear' Prop\nIf we have an element that we want to animate when the page loads, we need to use the\nappear\nprop on the\n<Transition>\ncomponent.\n<Transition appear>\n  ...\n</Transition>\nIn this example, the\nappear\nprop starts an animation when the page load for the first time:\nExample\nApp.vue\n:\n<template>\n  <h1>The 'appear' Prop</h1>\n  <p>The 'appear' prop starts the animation when the p tag below is rendered for the first time as the page opens. Without the 'appear' prop, this example would have had no animation.</p>\n  <Transition appear>\n    <p id=\"p1\">Hello World!</p>\n  </Transition>\n</template>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  #p1 {\n    display: inline-block;\n    padding: 10px;\n    border: dashed black 1px;\n    background-color: lightgreen;\n  }\n</style>\nRun Example \u00bb\nTransition Between Elements\nThe\n<Transition>\ncomponent can also be used to switch between several elements, as long as we make sure that only one element is shown at a time with the use of\n<v-if>\nand\n<v-else-if>\n:\nExample\nApp.vue\n:\n<template>\n  <h1>Transition Between Elements</h1>\n  <p>Click the button to get a new image.</p>\n  <p>The new image is added before the \n  <button @click=\"newImg\">\n  <Transition>\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgActive: 'pizza',\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  methods: {\n    newImg() {\n      this.indexNbr++;\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      this.imgActive = this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 1s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 1s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style>\nRun Example \u00bb\nmode=\"out-in\"\nIn the example above, the \nWe use the\nmode=\"out-in\"\nprop and prop value on the\n<Transition>\ncomponent so that the removal of an element is finished before the \nExample\nIn addition to\nmode=\"out-in\"\n, this example also uses a computed value 'imgActive' instead of the 'newImg' method we used in the \nApp.vue\n:\n<template>\n  <h1>mode=\"out-in\"</h1>\n  <p>Click the button to get a new image.</p>\n  <p>With mode=\"out-in\", the \n  <button @click=\"indexNbr++\">\n  <Transition mode=\"out-in\">\n    <img src=\"/img_pizza.svg\" v-if=\"imgActive === 'pizza'\">\n    <img src=\"/img_apple.svg\" v-else-if=\"imgActive === 'apple'\">\n    <img src=\"/img_cake.svg\" v-else-if=\"imgActive === 'cake'\">\n    <img src=\"/img_fish.svg\" v-else-if=\"imgActive === 'fish'\">\n    <img src=\"/img_rice.svg\" v-else-if=\"imgActive === 'rice'\">\n  </Transition>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgs: ['pizza', 'apple', 'cake', 'fish', 'rice'],\n      indexNbr: 0\n    }\n  },\n  computed: {\n    imgActive() {\n      if(this.indexNbr >= this.imgs.length) {\n        this.indexNbr = 0;\n      }\n      return this.imgs[this.indexNbr];\n    }\n  }\n}\n</script>\n\n<style>\n  .v-enter-active {\n    animation: swirlAdded 0.7s;\n  }\n  .v-leave-active {\n    animation: swirlAdded 0.7s reverse;\n  }\n  @keyframes swirlAdded {\n    from {\n      opacity: 0;\n      rotate: 0;\n      scale: 0.1;\n    }\n    to {\n      opacity: 1;\n      rotate: 360deg;\n      scale: 1;\n    }\n  }\n  img {\n    width: 100px;\n    margin: 20px;\n  }\n  img:hover {\n    cursor: pointer;\n  }\n</style>\nRun Example \u00bb\nTransition with Dynamic Components\nWe can also use the\n<Transition>\ncomponent to animate switching between dynamic components:\nExample\nApp.vue\n:\n<template>\n  <h1>Transition with Dynamic Components</h1>\n  <p>The Transition component wraps around the dynamic component so that the switching can be animated.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <Transition mode=\"out-in\">\n    <component :is=\"activeComp\"></component>\n  </Transition>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        toggleValue: true\n      }\n    },\n    computed: {\n      activeComp() {\n        if(this.toggleValue) {\n          return 'comp-one'\n        }\n        else {\n          return 'comp-two'\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-active {\n    animation: slideIn 0.5s;\n  }\n  @keyframes slideIn {\n    from {\n      translate: -200px 0;\n      opacity: 0;\n    }\n    to {\n      translate: 0 0;\n      opacity: 1;\n    }\n  }\n  .v-leave-active {\n    animation: slideOut 0.5s;\n  }\n  @keyframes slideOut {\n    from {\n      translate: 0 0;\n      opacity: 1;\n    }\n    to {\n      translate: 200px 0;\n      opacity: 0;\n    }\n  }\n  #app {\n    width: 350px;\n    margin: 10px;\n  }\n  #app > div {\n    border: solid black 2px;\n    padding: 10px;\n    margin-top: 10px;\n  }\n</style>\nRun Example \u00bb\nVue Exercises\nTest Yourself With Exercises\nExercise:\nThe <Transition> component automatically gives us 6 different CSS classes we can use to animate an element.\nFill the blanks so that the 3 first class names are completed, in the correct order, for when an element becomes visible:\n1. v-enter-\n2. v-enter-\n3. v-enter-\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "17b67ea8-6176-4089-afed-c950b0153c2b",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "13b1ff6b-ad3e-46ef-9ae7-05b0cf5eea66",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c425ecb2-e610-4d33-bea5-3893e7e58b3f",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is component in Vue helps us to do animations when elements?",
      "options": [
        "None of the above.",
        "nothing wrong with using plain CSS transitions and animations in other cases",
        "None of the above.",
        "added or removed with\nv-if"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of component in Vue helps us to do animations when elements is 'added or removed with\nv-if'."
    },
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "added or removed with\nv-if",
        "None of the above.",
        "nothing wrong with using plain CSS transitions and animations in other cases"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of There is 'nothing wrong with using plain CSS transitions and animations in other cases'."
    }
  ],
  "summary": "This tutorial covers Vue Animations concepts and techniques. You'll learn how to use Vue Animations effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Animations and how to apply it in your projects."
}