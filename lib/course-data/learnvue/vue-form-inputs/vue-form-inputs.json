{
  "id": "ca994ba8-7a77-47a6-a1a8-f727edaf35d4",
  "title": "Vue Form Inputs",
  "slug": "vue-form-inputs",
  "metadata": {
    "description": "Learn about Vue Form Inputs with clear explanations and practical examples.",
    "keywords": [
      "type",
      "input",
      "label",
      "form",
      "submit",
      "option",
      "model",
      "button",
      "value",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 6,
    "category": "LearnVue",
    "subcategory": "Vue Form Inputs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Form Inputs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "We have seen a few examples of\nform inputs\nearlier in this tutorial, on the\nVue Forms\nand\nv-model\npages.\nThis page is a collection of more\nform input\nexamples in Vue, like radio buttons, checkboxes, drop-down list and normal text input field.\nRadio Buttons\nRadio buttons that belong to the same choice must have the same name so that only one radio button can be chosen.\nAs with all inputs in Vue, we capture the radio button input value with\nv-model\n, but the\nvalue\nattribute must also be set explicitly on the\n<input type=\"radio\">\ntag.\nThis is how we can use radio buttons in a Vue form:\nExample\nApp.vue\n:\n<template>\n  <h1>Radio Buttons in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <p>What is your favorite animal?</p>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Cat\"> Cat\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Dog\"> Dog\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Turtle\"> Turtle\n    </label>\n    <label>\n      <input type=\"radio\" name=\"favAnimal\" v-model=\"inpVal\" value=\"Moose\"> Moose\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted choice:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inpVal: '',\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.inpVal) {\n        this.inpValSubmitted = this.inpVal;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    display: block;\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style>\nRun Example \u00bb\nCheckboxes\nWhen checkbox inputs (\n<input type=\"checkbox\">\n) are connected to the same array with\nv-model\n, the values for the checked checkboxes are gathered in that array:\nExample\nApp.vue\n:\n<template>\n  <h1>Checkbox Inputs in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <p>What kinds of food do you like?</p>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Pizza\"> Pizza\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Rice\"> Rice\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Fish\"> Fish\n    </label>\n    <label>\n      <input type=\"checkbox\" v-model=\"likeFoods\" value=\"Salad\"> Salad\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      likeFoods: [],\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      this.inpValSubmitted = this.likeFoods;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    display: block;\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style>\nRun Example \u00bb\nDrop-down List\nA drop-down list consists of a\n<select>\ntag with\n<option>\ntags inside.\nWhen using a drop-down list in Vue we need to connect the\n<select>\ntag with\nv-model\n, and give values to the\n<option>\ntags:\nExample\nApp.vue\n:\n<template>\n  <h1>Drop-down List in Vue</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <label for=\"cars\">Choose a car:</label>\n    <select  v-model=\"carSelected\" id=\"cars\">\n      <option disabled value=\"\">Please select one</option>\n      <option>Volvo</option>\n      <option>Saab</option>\n      <option>Opel</option>\n      <option>Audi</option>\n    </select>\n    <br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      carSelected: '',\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.carSelected) {\n        this.inpValSubmitted = this.carSelected;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n  }\n  label {\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style>\nRun Example \u00bb\n<select multiple>\nWith the\nmultiple\nattribute in the\n<select>\ntag, the drop-down list becomes expanded, and we can choose more than one option.\nTo choose more than one option, windows users must press the 'ctrl' key, and macOS users must press the 'command' key.\nWhen using\n<select multiple>\nin Vue we need to connect the\n<select>\ntag with\nv-model\n, and give values to the\n<option>\ntags:\nExample\nApp.vue\n:\n<template>\n  <h1>Select Multiple in Vue</h1>\n  <p>Depending on your operating system, use the 'ctrl' or the 'command' key to select multiple options.</p>\n  <form @submit.prevent=\"registerAnswer\">\n    <label for=\"cars\">Choose one or more cars:</label><br>\n    <select  v-model=\"carsSelected\" id=\"cars\" multiple>\n      <option>Volvo</option>\n      <option>Saab</option>\n      <option>Opel</option>\n      <option>Audi</option>\n      <option>Kia</option>\n    </select>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      carsSelected: [],\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.carsSelected) {\n        this.inpValSubmitted = this.carsSelected;\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button, select {\n    margin: 10px;\n    display: block;\n  }\n  label {\n    width: 80px;\n    padding: 5px;\n  }\n  label:hover {\n    cursor: pointer;\n    background-color: rgb(211, 244, 211);\n    border-radius: 5px;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style>\nRun Example \u00bb\nRead Only Form Inputs\nUsing\nv-model\non form inputs creates a two-way binding, which means that if the Vue data instance changes, the input\nvalue\nattribute also changes.\nFor read-only form inputs, like\n<input type=\"file\">\n, the\nvalue\nattribute cannot be changed from the Vue data instance, and so we cannot use\nv-model\n.\nFor read-only form inputs, like\n<input type=\"file\">\n, we need to use\n@change\nto call a method that updates the Vue data instance:\nExample\nApp.vue\n:\n<template>\n  <h1>Input Type File</h1>\n  <form @submit.prevent=\"registerAnswer\">\n    <label>Choose a file:\n      <input @change=\"updateVal\" type=\"file\">\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <div>\n    <h3>Submitted answer:</h3>\n    <p id=\"pAnswer\">{{ inpValSubmitted }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      fileInp: null,\n      inpValSubmitted: 'Not submitted yet'\n    }\n  },\n  methods: {\n    registerAnswer() {\n      if(this.fileInp) {\n        this.inpValSubmitted = this.fileInp;\n      }\n    },\n    updateVal(e) {\n      this.fileInp = e.target.value;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  div {\n    border: dashed black 1px;\n    border-radius: 10px;\n    padding: 0 20px 20px 20px;\n    margin-top: 20px;\n    display: inline-block;\n  }\n  button {\n    margin: 10px;\n    display: block;\n  }\n  #pAnswer {\n    background-color: lightgreen;\n    padding: 5px;\n  }\n</style>\nRun Example \u00bb\nInfo:\nIn the example above, the submitted file name gets a file path\nC:\\fakepath\\\nin front of it. This is to prevent malicious software from guessing the user's file structure.\nOther Form Inputs\nWith the form inputs mentioned above we had to provide a value for the\nvalue\nattribute, but with the form inputs below, the user provides the value:\n<input type=\"color\">\n<input type=\"date\">\n<input type=\"datetime-local\">\n<input type=\"number\">\n<input type=\"password\">\n<input type=\"range\">\n<input type=\"search\">\n<input type=\"tel\">\n<input type=\"text\">\n<input type=\"time\">\n<textarea>\nBecause the user already gives the value for these kinds of form inputs, all we need to do in Vue is to connect the input to a data property with\nv-model\n.\nThis is how to use\n<input type=\"range\">\nin Vue:\nExample\nApp.vue\n:\n<form @submit.prevent=\"registerAnswer\">\n  <label>How tall are you?<br>\n    <input v-model=\"heightInp\" type=\"range\" min=\"50\" max=\"235\"> {{ heightInp }} cm\n  </label>\n  <button type=\"submit\">Submit</button>\n</form>\nRun Example \u00bb\nAnd this is how to use\n<input type=\"color\">\nin Vue:\nExample\nApp.vue\n:\n<form @submit.prevent=\"registerAnswer\">\n  <label>Choose a color: \n    <input v-model=\"colorInp\" type=\"color\">\n  </label>\n  <button type=\"submit\">Submit</button>\n</form>\nRun Example \u00bb\nAnd this is how to use\n<textarea>\nin Vue:\nExample\nApp.vue\n:\n<form @submit.prevent=\"registerAnswer\">\n  <label>\n    <p>What do you think about our product?</p> \n    <textarea v-model=\"txtInp\" placeholder=\"Write something..\" rows=\"4\" cols=\"35\"></textarea>\n  </label>\n  <button type=\"submit\">Submit</button>\n</form>\nRun Example \u00bb\nLearn more about how the different kinds of HTML form inputs work in\nour HTML Tutorial\n.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nFill in the missing code so that the input gets a two-way binding with the 'inpText' data property.\n<template>\n  <input type=\"text\"\n>\n  <p> {{ inpText }} </p>\n</template>\n\n<script>\n  const app = Vue.createApp({\n    data() {\n      return {\n        inpText: 'Initial text'\n      }\n    }\n  })\n  app.mount('#app')\n</script>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ea666608-3508-4d58-9c35-7347d5fd3351",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f42d7a14-b1c2-406d-a4d5-b700fede5e4d",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c72e41c4-aff3-48c7-b78f-e8115e99d718",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This page?",
      "options": [
        "how we can use radio buttons in a Vue form:\nExample\nApp",
        "None of the above.",
        "None of the above.",
        "a collection of more\nform input\nexamples in Vue"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This page is 'a collection of more\nform input\nexamples in Vue'."
    },
    {
      "question": "What is This?",
      "options": [
        "None of the above.",
        "a collection of more\nform input\nexamples in Vue",
        "None of the above.",
        "how we can use radio buttons in a Vue form:\nExample\nApp"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This is 'how we can use radio buttons in a Vue form:\nExample\nApp'."
    }
  ],
  "summary": "This tutorial covers Vue Form Inputs concepts and techniques. You'll learn how to use Vue Form Inputs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Form Inputs and how to apply it in your projects."
}