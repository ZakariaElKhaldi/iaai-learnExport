{
  "id": "0798e395-66fe-4f48-84e8-55f05772a81a",
  "title": "Vue CSS Binding",
  "slug": "vue-css-binding",
  "metadata": {
    "description": "Learn about Vue CSS Binding with clear explanations and practical examples.",
    "keywords": [
      "c",
      "class",
      "bind",
      "classes",
      "case",
      "style",
      "kebab",
      "impclass",
      "yelclass",
      "element",
      "property"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue CSS Binding"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue CSS Binding",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Vue CSS Binding\n\nLearn more about how to use\nv",
      "content": "-bind\nto modify CSS with the\nstyle\nand\nclass\nattributes.\nWhile the concept to change the\nstyle\nand\nclass\nattributes with\nv-bind\nis fairly straight forward, the syntax might need some getting used to.\nDynamic CSS in Vue\nYou have already seen how we can use Vue to modify CSS by using\nv-bind\non the\nstyle\nand\nclass\nattributes. It has been explained briefly in this tutorial under\nv-bind\nand several examples with Vue changing CSS has also been given.\nHere we will explain in more detail how CSS can be changed dynamically with Vue. But first lets look at two examples with techniques we have already seen in this tutorial: in-line styling with\nv-bind:style\nand assigning a class with\nv-bind:class\nInline Styling\nWe use\nv-bind:style\nto do in-line styling in Vue.\nExample\nAn\n<input type=\"range\">\nelement is used to change the opacity of a\n<div>\nelement with the use of in-line styling.\n<input type=\"range\" v-model=\"opacityVal\">\n<div v-bind:style=\"{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }\">\nDrag the range input above to change opacity here.\n</div>\n\nAssign a Class\nWe use\nv-bind:class\nto assign a class to an HTML tag in Vue.\nExample\nSelect images of food. Selected food is highlighted with the use of\nv-bind:class\nto show what you have selected.\n<div v-for=\"(img, index) in images\">\n<img v-bind:src=\"img.url\"\nv-on:click=\"select(index)\"\nv-bind:class=\"{ selClass: img.sel }\">\n</div>\n\nOther Ways to Assign Classes and Style\nHere are different aspects regarding the use of\nv-bind:class\nand\nv-bind:style\nthat we have not seen before in this tutorial:\nWhen CSS classes are assigned to an HTML tag with both\nclass=\"\"\nand\nv-bind:class=\"\"\nVue merges the classes.\nAn object containing one or more classes is assigned with\nv-bind:class=\"{}\"\n. Inside the object one or more classes might be toggled on or off.\nWith in-line styling (\nv-bind:style\n) camelCase is preferred when defining a CSS property, but 'kebab-case' can also be used if it is written inside quotes.\nCSS classes can be assigned with arrays / with array notation / syntax\nThese points are explained in more detail below.\n1. Vue Merges 'class' And 'v-bind:class'\nIn cases when an HTML tag belongs to a class assigned with\nclass=\"\"\n, and is also assigned to a class with\nv-bind:class=\"\"\n, Vue merges the classes for us.\nExample\nA\n<div>\nelement belongs to two classes: 'impClass' and 'yelClass'. The 'important' class is set the normal way with the\nclass\nattribute, and 'yellow' class is set with\nv-bind:class\n.\n<div class=\"impClass\" v-bind:class=\"{yelClass: isYellow}\">\nThis div belongs to both 'impClass' and 'yelClass'.\n</div>\n\n2. Assign More Than One Class With 'v-bind:class'\nWhen assigning an HTML element to a class with\nv-bind:class=\"{}\"\n, we can simply use comma to separate and assign multiple classes.\nExample\nA\n<div>\nelement can belong to both 'impClass' and 'yelClass' classes, depending on the boolean Vue data properties 'isYellow' and 'isImportant'.\n<div v-bind:class=\"{yelClass: isYellow, impClass: isImportant}\">\nThis tag can belong to both the 'impClass' and 'yelClass' classes.\n</div>\n\n3. Camel case vs kebab case notation with 'v-bind:style'\nWhen modifying CSS in Vue with in-line styling (\nv-bind:style\n), it is recommended to use \ncamel Case notation for the CSS property, but 'kebab-case' can also be used if the CSS property is inside quotes.\nExample\nHere, we set CSS properties\nbackground-color\nand\nfont-weight\nfor a\n<div>\nelement in two different ways: the recommended way with \n  camel Case\nbackgroundColor\n, and the not recommended way with 'kebab-case' in quotes\n'font-weight'\n. Both alternatives work.\n<div v-bind:style=\"{ backgroundColor: 'lightpink', 'font-weight': 'bolder' }\">\nThis div tag has pink background and bold text.\n</div>\n\n'Camel case' and 'kebab case' notation are ways of writing a series of words without space or punctuation.\nCamel case\nnotation is when the first word starts with a small letter, and every word after starts with a capital letter, like 'backgroundColor' or 'camelCaseNotation'. It is called camel case because we can imagine every capital letter resembling a hump on a camels back.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Kebab case\nnotation is when the words are separated with a dash",
      "content": "-\n, like 'background-color' or 'kebab-case-notation'. It is called kebab case because we can imagine the dashes resembling the skewer in a 'shish kebab'.\n4. Array Syntax with 'v-bind:class'\nWe can use array syntax with\nv-bind:class\nto add multiple classes. With array syntax we can use both classes that depend on a Vue property and classes that do not depend on a Vue property.\nExample\nHere, we set CSS classes 'impClass' and 'yelClass' with array syntax. The class 'impClass' depends on a Vue property\nisImportant\nand the class 'yelClass' is always attached to the\n<div>\nelement.\n<div v-bind:class=\"[{ impClass: isImportant }, 'yelClass' ]\">\nThis div tag belongs to one or two classes depending on the isImportant property.\n</div>\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<input type=\"range\" v-model=\"opacityVal\">\n<div v-bind:style=\"{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }\">\nDrag the range input above to change opacity here.\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<div v-for=\"(img, index) in images\">\n<img v-bind:src=\"img.url\"\nv-on:click=\"select(index)\"\nv-bind:class=\"{ selClass: img.sel }\">\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "<div class=\"impClass\" v-bind:class=\"{yelClass: isYellow}\">\nThis div belongs to both 'impClass' and 'yelClass'.\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "<div v-bind:class=\"{yelClass: isYellow, impClass: isImportant}\">\nThis tag can belong to both the 'impClass' and 'yelClass' classes.\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<div v-bind:style=\"{ backgroundColor: 'lightpink', 'font-weight': 'bolder' }\">\nThis div tag has pink background and bold text.\n</div>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "<div v-bind:class=\"[{ impClass: isImportant }, 'yelClass' ]\">\nThis div tag belongs to one or two classes depending on the isImportant property.\n</div>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<input type=\"range\" v-model=\"opacityVal\">\n# TODO: Complete this line\nDrag the range input above to change opacity here.\n</div>",
      "solution": "<input type=\"range\" v-model=\"opacityVal\">\n<div v-bind:style=\"{ backgroundColor: 'rgba(155,20,20,'+opacityVal+')' }\">\nDrag the range input above to change opacity here.\n</div>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div v-for=\"(img, index) in images\">\n# TODO: Complete this line\nv-on:click=\"select(index)\"\nv-bind:class=\"{ selClass: img.sel }\">\n</div>",
      "solution": "<div v-for=\"(img, index) in images\">\n<img v-bind:src=\"img.url\"\nv-on:click=\"select(index)\"\nv-bind:class=\"{ selClass: img.sel }\">\n</div>"
    }
  ],
  "related_topics": [
    {
      "id": "c90e76ca-0e4d-421e-9c7a-59ee2da45339",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "47a12f9d-2746-4c4b-ae88-129bddf198f8",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ad475d80-3633-4a3a-ba1e-5faedbe1ddfe",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is bind?",
      "options": [
        "used to change the opacity of a\n<div>\nelement with the use of in-line styling",
        "fairly straight forward",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of bind is 'fairly straight forward'."
    },
    {
      "question": "What is element?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to change the opacity of a\n<div>\nelement with the use of in-line styling",
        "fairly straight forward"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of element is 'used to change the opacity of a\n<div>\nelement with the use of in-line styling'."
    }
  ],
  "summary": "This tutorial covers Vue CSS Binding concepts and techniques. You'll learn how to use Vue CSS Binding effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue CSS Binding and how to apply it in your projects."
}