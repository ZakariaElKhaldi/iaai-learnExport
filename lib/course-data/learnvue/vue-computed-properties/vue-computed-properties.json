{
  "id": "73ef3ac2-3a57-4505-b1af-792b2e04b64d",
  "title": "Vue Computed Properties",
  "slug": "vue-computed-properties",
  "metadata": {
    "description": "Learn about Vue Computed Properties with clear explanations and practical examples.",
    "keywords": [
      "c",
      "computed",
      "properties",
      "data",
      "chbxval",
      "methods",
      "return",
      "false",
      "checkbox",
      "input",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Computed Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Computed Properties",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Computed properties\nare like data properties, except they depend on other properties.\nComputed properties\nare written like methods, but they do not accept any input arguments.\nComputed properties\nare updated automatically when a dependency changes, while methods are called on when something happens, like with event handling for example.\nComputed properties\nare used when outputting something that depends on something else.\nComputed Properties are Dynamic\nThe big advantage with a computed property is that it is dynamic, meaning it changes depending on for example the value of one or more data properties.\nComputed properties is the third configuration option in the Vue instance that we will learn. The first two configuration options we have already looked at are 'data' and 'methods'.\nAs with 'data' and 'methods' computed properties also has a reserved name in the Vue instance: '\ncomputed\n'.\nSyntax\nconst app = Vue.createApp({\ndata() {\n...\n},\ncomputed\n: {\n...\n},\nmethods: {\n...\n}\n})\nComputed Property 'yes' or 'no'\nLet's say we want a form to create items in a shopping list, and we want to mark if a new item is important or not. We could add a 'true' or 'false' feedback when the checkbox gets checked, like we have done in an example before:\nExample\nAn input element is made dynamic so that the text reflects the status.\n<input type=\"checkbox\" v-model=\"chbxVal\"> {{ chbxVal }}\ndata() {\nreturn {\nchbxVal: false\n}\n}\n\nHowever, if you you ask someone if something is important, they will most likely answer 'yes' or 'no' instead of 'true' or 'false'. So to make our form more fitting with normal language (more intuitive) we should have 'yes' or 'no' as feedback on the checkbox instead of 'true' or 'false'.\nAnd guess what, a computed property is a perfect tool to help us with that.\nExample\nWith a computed property 'isImportant' we can now customize the text feedback to the user when the checkbox is toggled on and off.\n<input type=\"checkbox\" v-model=\"chbxVal\"> {{ isImportant }}\ndata() {\nreturn {\nchbxVal: false\n}\n},\ncomputed: {\nisImportant() {\nif(this.chbxVal){\nreturn 'yes'\n}\nelse {\nreturn 'no'\n}\n}\n\nComputed Properties vs. Methods\nComputed properties and methods are both written as functions, but they are different:\nMethods\nruns when called from HTML, but\ncomputed properties\nupdates automatically when a dependency change.\nComputed properties\nare used the same way we use data properties, but they are dynamic.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nProvide the correct code so that the 'isImportant' computed property is shown on the screen.\n<div id=\"app\">\n  <form>\n    <p>\n      Important item?\n      <label>\n         <input type=\"checkbox\" v-model=\"chbxVal\">\n</label>\n    </p>\n  </form>\n</div>\n\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\n  const app = Vue.createApp({\n    data() {\n      return {\n        chbxVal: false\n      }\n    },\n: {\n      isImportant() {\n        if(this.chbxVal){\n          return 'yes'\n        }\n        else {\n          return 'no'\n        }\n      }\n    }\n  })\n app.mount('#app')\n</script>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Syntax",
      "content": "",
      "order": 3,
      "code": "const app = Vue.createApp({\ndata() {\n...\n},\ncomputed\n: {\n...\n},\nmethods: {\n...\n}\n})",
      "language": "javascript",
      "explanation": "Example of syntax"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<input type=\"checkbox\" v-model=\"chbxVal\"> {{ chbxVal }}",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<input type=\"checkbox\" v-model=\"chbxVal\"> {{ isImportant }}",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const app = Vue.createApp({\n# TODO: Complete this line\n...\n},\ncomputed\n: {\n...\n},\nmethods: {\n...\n}\n})",
      "solution": "const app = Vue.createApp({\ndata() {\n...\n},\ncomputed\n: {\n...\n},\nmethods: {\n...\n}\n})"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<input type=\"checkbox\" v-model=\"chbxVal\"> {{ chbxVal }}"
    }
  ],
  "related_topics": [
    {
      "id": "75c41059-82a3-4767-bb7c-d5d5804b48da",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4bce71e9-bf77-4c2b-a175-a98ae0fbd93d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "188b5f20-cb36-4bab-8f1d-ca82108ac841",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue Computed Properties\n\nComputed properties?",
      "options": [
        "written like methods",
        "None of the above.",
        "None of the above.",
        "like data properties"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Vue Computed Properties\n\nComputed properties is 'like data properties'."
    },
    {
      "question": "What is Computed properties?",
      "options": [
        "None of the above.",
        "None of the above.",
        "written like methods",
        "like data properties"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Computed properties is 'written like methods'."
    }
  ],
  "summary": "This tutorial covers Vue Computed Properties concepts and techniques. You'll learn how to use Vue Computed Properties effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Computed Properties and how to apply it in your projects."
}