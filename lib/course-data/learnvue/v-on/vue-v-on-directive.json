{
  "id": "2a500338-d93b-4efe-a23d-8f72e6dd1fab",
  "title": "Vue v-on Directive",
  "slug": "vue-v-on-directive",
  "metadata": {
    "description": "Learn about Vue v-on Directive with clear explanations and practical examples.",
    "keywords": [
      "event",
      "click",
      "example",
      "element",
      "parent",
      "modifier",
      "template",
      "button",
      "script",
      "style"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 6,
    "category": "LearnVue",
    "subcategory": "v-on"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue v-on Directive",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Directives Reference\n\nExample\nUsing the\nv-on\ndirective to change the background color of a\n<div>\nelement when when a button is clicked.\n<template>\n  <h1>v-on Example</h1>\n  <div v-bind:class=\"{ yelClass: bgColor }\">\n    <p>Click the button to change background color of this DIV box.</p>\n    <button v-on:click=\"bgColor = !bgColor\">Click</button>\n    <p>bgColor property: \"{{ bgColor }}\"</p>\n  </div>\n</template>\nRun Example \u00bb\nSee more examples below.\nDefinition and Usage\nThe\nv-on\ndirective is placed on an element to attach an event listener.\nTo attach an event listener with\nv-on\nwe need to provide the event type, and any modifier, and a method or expression that should run when that event occurs.\nIf\nv-on\nis placed on a regular HTML tag, the event types we can define to listen to are the regular events like\ninput\n,\nclick\nor\nmouseover\n.\nIf\nv-on\nis placed on a custom component, the event types we can define to listen to are the custom events that are emitted from that component.\nThe shorthand for\nv-on:\nis\n@\n.\nModifiers\nModifier\nDetails\n.capture\nA bubbling event is captured first where the\n.capture\nmodifier is set.\nRun Example \u00bb\n.once\nThe event can only fire one time after loading the page.\nRun Example \u00bb\n.passive\nMarks the event handler as passive by setting\npassive: true\non the DOM element. This means that the browser does not have to wait to see if\nevent.preventDefault()\nis called, and for events that happen very often, like scroll, setting the event handler as passive can enhance performance.\nRun Example \u00bb\n.prevent\nThe event is prevented from firing. Can be used to for example prevent the default form submit event. It is not possible to prevent all events.\nRun Example \u00bb\n.stop\nA bubbling event is stopped from propagating any further. The\nevent.stopPropagation()\nis called.\nRun Example \u00bb\n.self\nBy default, events propagates upwards to parent elements and one event can therefore trigger many event listeners. The\n.self\nmodifier only lets events from its own element trigger the event listener.\nRun Example \u00bb\n.{keyAlias}\nLimits the event handler to only react to certain event keys, for example\nv-on:click\n.right\nor\nv-on:keyup\n.s\n. We can even demand that more than one key need to happen simultaneously for the handler to react, like this:\nv-on:click\n.left.shift\n.\nRun Example \u00bb\n.left\nLeft button mouse click.\n.right\nRight button mouse click.\n.middle\nMiddle button mouse click.\nMore Examples\nExample 1\nUsing the\n.capture\nmodifier to capture the click event in the parent element first.\n<template>\n  <h1>v-on Example</h1>\n  <p>When the '.capture' modifier is used on the parent DIV element, the event is captured first in the parent element when the child element is clicked.</p>\n  <p>If the '.capture' modifier is removed from this code, the child element will capture the click event first. This is the default behavior, that the event bubbles up, first in child element, then to the parent.</p>\n  <div v-on:click.capture=\"this.msg.push('parent')\" id=\"parent\">\n    <p>This is the parent element.</p>\n    <div v-on:click=\"this.msg.push('child')\">\n      <p>This is the child element. CLICK HERE!</p>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n}\n#parent {\n  width: 250px;\n  background-color: lightpink;\n}\n#parent > div {\n  cursor: pointer;\n  background-color: lightgreen;\n}\n</style>\nRun Example \u00bb\nExample 2\nUsing the\n.stop\nmodifier to prevent the event from propagating any further.\n<template>\n  <h1>v-on Example</h1>\n  <p>The '.stop' modifier stops the click event from propagating any further.</p>\n  <p>If the '.stop' modifier is removed from this code, the parent element will also capture the click event on the child element.</p>\n  <div v-on:click=\"this.msg.push('parent')\" id=\"parent\">\n    <p>This is the parent element.</p>\n    <div v-on:click.stop=\"this.msg.push('child')\">\n      <p>This is the child element. CLICK HERE!</p>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n}\n#parent {\n  width: 250px;\n  background-color: lightpink;\n}\n#parent > div {\n  cursor: pointer;\n  background-color: lightgreen;\n}\n</style>\nRun Example \u00bb\nExample 3\nUsing the\n.passive\nmodifier to enhance performance during scrolling.\n<template>\n  <h1>v-on Example</h1>\n  <p>The '.passive' modifier sets the event handler as passive, and this can enhance performance.</p>\n  <div v-on:scroll.passive=\"this.scrollTimes++\" id=\"parent\">\n    <p>Scroll here.</p>\n    <p>Bladi-bladi-bladi</p>\n    <p>potato potato</p>\n    <p>Scroll-scroll-scroll</p>\n    <p>Scroll more...</p>\n  </div>\n  <p>Scroll happended {{ scrollTimes }} times.</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      scrollTimes: 0\n    };\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  width: 200px;\n  height: 50px;\n  overflow: scroll;\n  background-color: lightcoral;\n}\n</style>\nRun Example \u00bb\nExample 4\nUsing the\n.once\nmodifier to enhance performance during scrolling.\n<template>\n  <h1>v-on Example</h1>\n  <p>The '.once' modifier prevents the event from happening more than once.</p>\n  <button v-on:click.once=\"clickTimes++\">Click</button>\n  <p>Click event happened {{ clickTimes }} times.</p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      clickTimes: 0\n    };\n  }\n}\n</script>\nRun Example \u00bb\nExample 5\nUsing the\n.self\nmodifier so that the parent element only reacts to click events that happen to itself.\n<template>\n  <h1>v-on Example</h1>\n  <p>The '.self' modifier is set on the parent element. </p>\n  <p>Click on the child element and see how the event propagates past the parent element because the parent click event only reacts to click on the element itself.</p>\n  <div v-on:click=\"addMsg('grandParent')\" id=\"grandParent\">\n    Grandparent element\n    <div v-on:click.self=\"addMsg('parent')\">\n      Parent element.\n      <div v-on:click=\"addMsg('child')\">\n        Child element. CLICK HERE!\n      </div>\n    </div>\n  </div>\n  <p>The order of when and where the event is captured.</p>\n  <ol>\n    <li v-for=\"x in msg\">{{ x }}</li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: []\n    };\n  },\n  methods: {\n    addMsg(txt) {\n      this.msg.push(txt);\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  cursor: pointer;\n}\n#grandParent {\n  width: 250px;\n  background-color: lightpink;\n}\n#grandParent > div {\n  background-color: lightgreen;\n}\n#grandParent > div > div {\n  background-color: lightskyblue;\n}\n</style>\nRun Example \u00bb\nExample 6\nUsing the\n.prevent\nmodifier to prevent the default drop down list from appearing when right mouse button click.\n<template>\n  <h1>v-on Example</h1>\n  <p>The '.prevent' modifier is set to prevent the drop down menu to appear when the user does a right mouse button click.</p>\n  <div \n    v-on:click.right.prevent=\"changeColor\" \n    v-bind:style=\"{ backgroundColor: 'hsl(' + bgColor + ',80%,80%)' }\">\n    <p>Press right mouse button here.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      bgColor: 0\n    }\n  },\n  methods: {\n    changeColor() {\n      this.bgColor += 50\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: dashed black 1px;\n  width: 200px;\n}\n</style>\nRun Example \u00bb\nExample 7\nUsing the\n.left.shift\nmodifiers to change image when the user does a left mouse button click while holding down the shift key.\n<template>\n  <h1>v-on Example</h1>\n  <p>Hold 'Shift' key and press left mouse button on the image:</p>\n  <img v-on:click.left.shift=\"changeImg\" v-bind:src=\"imgUrl\">\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imgFish: true,\n      imgUrl: 'img_fish.svg'\n    }\n  },\n  methods: {\n    changeImg() {\n      this.imgFish = !this.imgFish;\n      if (this.imgFish) {\n        this.imgUrl = 'img_fish.svg'\n      }\n      else {\n        this.imgUrl = 'img_tiger.svg'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\nimg {\n  width: 200px;\n}\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nVue Events\nVue Tutorial:\nVue v-on Directive\nVue Tutorial:\nVue Methods\nVue Tutorial:\nVue Event Modifiers\nJavaScript Tutorial:\nJavaScript Events\n\nVue Directives Reference\n\n\u2605\n+1\n\nCOLOR PICKER",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1a4e984b-adf9-42b2-9241-457842d78417",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "42732268-e071-4b7c-99f6-4a20e373440e",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "caa97f37-106a-4534-99d5-d1c9dc667751",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is element when when a button?",
      "options": [
        "placed on an element to attach an event listener",
        "None of the above.",
        "clicked",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of element when when a button is 'clicked'."
    },
    {
      "question": "What is on\ndirective?",
      "options": [
        "clicked",
        "placed on an element to attach an event listener",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of on\ndirective is 'placed on an element to attach an event listener'."
    }
  ],
  "summary": "This tutorial covers Vue v-on Directive concepts and techniques. You'll learn how to use Vue v-on Directive effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue v-on Directive and how to apply it in your projects."
}