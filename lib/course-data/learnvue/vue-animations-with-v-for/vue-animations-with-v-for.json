{
  "id": "1562bde8-10f7-4b9e-a7a7-ac0fb53caa69",
  "title": "Vue Animations with v-for",
  "slug": "vue-animations-with-v-for",
  "metadata": {
    "description": "Learn about Vue Animations with v-for with clear explanations and practical examples.",
    "keywords": [
      "transitiongroup",
      "example",
      "opacity",
      "enter",
      "dice",
      "removed",
      "button",
      "component",
      "style",
      "leave"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Animations with v-for"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Animations with v-for",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The built-in\n<TransitionGroup>\ncomponent in Vue helps us to animate elements that are added to our page with\nv-for\n.\nThe <TransitionGroup> Component\nThe\n<TransitionGroup>\ncomponent is used around elements created with\nv-for\n, to give these elements individual animations when they are added or removed.\nTags created with\nv-for\ninside the\n<TransitionGroup>\ncomponent must be defined with the\nkey\nattribute.\nThe\n<TransitionGroup>\ncomponent is only rendered as an HTML tag if we define it to be a specific tag by using the\ntag\nprop, like this:\n<TransitionGroup tag=\"ol\">\n  <li v-for=\"x in products\" :key=\"x\">\n    {{ x }}\n  </li>\n</TransitionGroup>\nThis is the result from the code above, after it is rendered by Vue:\n<ol>\n  <li>Apple</li>\n  <li>Pizza</li>\n  <li>Rice</li>\n</ol>\nWe can now add CSS code to animate new items when they are added to the list:\n<style>\n  .v-enter-from {\n    opacity: 0;\n    rotate: 180deg;\n  }\n  .v-enter-to {\n    opacity: 1;\n    rotate: 0deg;\n  }\n  .v-enter-active {\n    transition: all 0.7s;\n  }\n</style>\nIn this example, new items will be animated simply by adding them to 'products' array:\nExample\nApp.vue\n:\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <input type=\"text\" v-model=\"inpName\"> \n  <button @click=\"addEl\">Add</button>\n  <TransitionGroup tag=\"ol\">\n    <li v-for=\"x in products\" :key=\"x\">\n      {{ x }}\n    </li>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        products: ['Apple','Pizza','Rice'],\n        inpName: ''\n      }\n    },\n    methods: {\n      addEl() {\n        const el = this.inpName;\n        this.products.push(el);\n        this.inpName = null;\n      }\n    }\n  }\n</script>\n\n<style>\n  .v-enter-from {\n    opacity: 0;\n    rotate: 180deg;\n  }\n  .v-enter-to {\n    opacity: 1;\n    rotate: 0deg;\n  }\n  .v-enter-active {\n    transition: all 0.7s;\n  }\n</style>\nRun Example \u00bb\nAdd and Remove Elements\nWhen removing elements in between other elements, the other elements will fall into place where removed element was. To animate how the rest of the list items fall into place when an element is removed, we will use the automatically generated\nv-move\nclass.\nBut first, let's look at an example where it is\nnot\nanimated how other items fall into place when an element is removed:\nExample\nApp.vue\n:\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>New products are given animations using the <TransitionGroup> component.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"removeDie\">Remove random</button><br>\n  <TransitionGroup>\n    <div v-for=\"x in dice\" :key=\"x\" class=\"diceDiv\" :style=\"{ backgroundColor: 'hsl('+x*40+',85%,85%)' }\">\n      {{ x }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        inpName: ''\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = Math.ceil(Math.random()*6);\n        this.dice.push(newDie);\n      },\n      removeDie() {\n        if(this.dice.length>0){\n          this.dice.splice(Math.floor(Math.random()*this.dice.length), 1);\n        }\n      }\n    },\n    mounted() {\n      this.addDie();\n      this.addDie();\n      this.addDie();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.7s;\n}\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nAs you can see in the example above, when an item is removed, the items after the removed item suddenly jumps into their new positions. To animate the rest of the items when an item is removed, we use the automatically generated\nv-move\nclass.\nThe\nv-move\nclass animates the other elements as the removed item leaves, but there is one problem: The removed item still exists and takes up place until it is removed, and so the\nv-move\nclass will not have any effect. To give the\nv-move\nclass something to animate we can set\nposition: absolute;\nto the\nv-leave-active\nclass. When\nposition: absolute;\nis set during the removal period, the removed item is still visible, but does not take up place.\nIn this example, the only difference from the \nExample\nApp.vue\n:\n<style>\n.v-enter-from {\n  opacity: 0;\n  translate: 200px 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  translate: 0 0;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nA Larger Example\nLet's use the example above as the basis for a new example.\nIn this example it becomes even more clear how the whole list is animated when a new item is added or removed, or when the whole array is sorted.\nIn this example we can:\nRemove items by clicking on them\nSort the items\nAdd new items at a random place in the list\nExample\nApp.vue\n:\n<template>\n  <h3>The <TransitionGroup> Component</h3>\n  <p>Items inside the <TransitionGroup> component are animated when they are created or removed.</p>\n  <button @click=\"addDie\">Roll</button>\n  <button @click=\"addDie10\">Roll 10 dice</button>\n  <button @click=\"dice.sort(compareFunc)\">Sort</button>\n  <button @click=\"dice.sort(shuffleFunc)\">Shuffle</button><br>\n  <TransitionGroup>\n    <div \n    v-for=\"x in dice\" \n    :key=\"x.keyNmbr\" \n    class=\"diceDiv\" \n    :style=\"{ backgroundColor: 'hsl('+x.dieNmbr*60+',85%,85%)' }\"\n    @click=\"removeDie(x.keyNmbr)\">\n      {{ x.dieNmbr }}\n    </div>\n  </TransitionGroup>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        dice: [],\n        keyNumber: 0\n      }\n    },\n    methods: {\n      addDie() {\n        const newDie = {\n          dieNmbr: Math.ceil(Math.random()*6),\n          keyNmbr: this.keyNumber\n        };\n        this.dice.splice(Math.floor(Math.random()*this.dice.length),0,newDie);\n        this.keyNumber++;\n      },\n      addDie10() {\n        for(let i=0; i<10; i++) {\n          this.addDie();\n        }\n      },\n      compareFunc(a,b){\n        return a.dieNmbr - b.dieNmbr;\n      },\n      shuffleFunc(a,b){\n        return Math.random()-0.5;\n      },\n      removeDie(key) {\n        const pos = this.dice.map(e => e.keyNmbr).indexOf(key);\n        this.dice.splice(pos, 1);\n      }\n    },\n    mounted() {\n      this.addDie10();\n    }\n  }\n</script>\n\n<style>\n.v-enter-from {\n  opacity: 0;\n  scale: 0;\n  rotate: 360deg;\n}\n.v-enter-to {\n  opacity: 1;\n  scale: 1;\n  rotate: 0deg;\n}\n.v-enter-active,\n.v-leave-active,\n.v-move {\n  transition: all 0.7s;\n}\n.v-leave-active { position: absolute; }\n.v-leave-from { opacity: 1; }\n.v-leave-to { opacity: 0; }\n.diceDiv {\n  margin: 10px;\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  vertical-align: middle;\n  text-align: center;\n  border: solid black 1px;\n  border-radius: 5px;\n  display: inline-block;\n}\n.diceDiv:hover {\n  cursor: pointer;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n#app {\n  position: relative;\n}\n</style>\nRun Example \u00bb\nVue Exercises\nTest Yourself With Exercises\nExercise:\nWhat is the name of the Vue specific component used to animate elements created or removed with v-for?\n<\ntag=\"ol\">\n  <li v-for=\"x in products\" :key=\"x\">\n    {{ x }}\n  </li>\n</\n>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "680b3659-df72-4c50-9b33-75f317e3887b",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5458a8b4-293d-41bb-81f8-f27a4a06e9ac",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7b380bbe-f106-4ef7-9e69-f3deb9f7f09e",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is component in Vue helps us to animate elements that?",
      "options": [
        "None of the above.",
        "used around elements created with\nv-for",
        "None of the above.",
        "added to our page with\nv-for"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of component in Vue helps us to animate elements that is 'added to our page with\nv-for'."
    },
    {
      "question": "What is component?",
      "options": [
        "None of the above.",
        "added to our page with\nv-for",
        "used around elements created with\nv-for",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of component is 'used around elements created with\nv-for'."
    }
  ],
  "summary": "This tutorial covers Vue Animations with v-for concepts and techniques. You'll learn how to use Vue Animations with v-for effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Animations with v-for and how to apply it in your projects."
}