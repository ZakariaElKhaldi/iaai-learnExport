{
  "id": "5e5de9a0-e745-4af1-b9c8-18ddb2132889",
  "title": "Vue Events",
  "slug": "vue-events",
  "metadata": {
    "description": "Learn about Vue Events with clear explanations and practical examples.",
    "keywords": [
      "typescript",
      "event",
      "events",
      "button",
      "click",
      "count",
      "moose",
      "code",
      "number",
      "directive",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Events"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Events",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Event handling in Vue is done with the\nv-on\ndirective, so that we can make something happen when for example a button is clicked.\nEvent handling is when HTML elements are set up to run a certain code when a certain event happens.\nEvents in Vue are easy to use and will make our page truly responsive.\nVue\nmethods\nare code that can be set up to run when an event happens.\nWith\nv-on\nmodifiers\nyou can describe in more detail how to react to an event.\nGet started with events\nLets start with an example to show how we can click a button to count moose in a forest.\nWe need:\nA button\nv-on\non the <button> tag to listen to the 'click' event\nCode to increase the number of moose\nA property (variable) in the Vue instance to hold the number of moose\nDouble curly braces\n{{}}\nto show the increased number of moose\nExample\nClick the button to count one more moose in the forest. The count property increases each time the button is clicked.\n<div id=\"app\">\n<img src=\"img_moose.jpg\">\n<p>{{ \"Moose count: \" + count }}</p>\n<button v-on:click=\"count++\">Count moose</button>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ncount: 0\n}\n}\n})\napp.mount('#app')\n</script>\n\nNote:\nA benefit that comes with Vue is that the number of moose in the <p> tag is updated automatically. With plain JavaScript we would need to update the number the user sees with an additional line of code.\nEvents\nThere are lots of events we can use as triggers for running code, among the most common ones are: 'click', 'mouseover', 'mouseout', 'keydown' and 'input'.\nFor a complete list of events to use you can visit our\nHTML DOM Events page\n.\n'v-on'\nThe\nv-on\ndirective allows us to create pages that respond to what the user does.\nThe Vue\nv-on\nworks by telling the browser what event to listen to, and what to do when that event occurs.\nMethods\nIf we want to run more complex code when an event occurs we can put the code in a Vue method and refer to this method from the HTML attribute, like this:\n<p v-on:click=\"changeColor\">Click me</p>\nEvent Modifiers\nIn addition to\nv-on\nand Vue methods we can use something called\nevent modifiers\nto modify an event so that it for example only happens once after a page is loaded, or modify an event like 'submit' to prevent a form from being submitted.\nLearn More\nAs we can see, there are three techniques we need to learn about to use events in Vue:\nThe Vue\nv-on\ndirective\nVue methods\nVue\nv-on\nmodifiers\nClick '\nVue Exercises\nTest Yourself With Exercises\nExercise:\nFill in the missing field.\nIn Vue, events are handled with the\ndirective.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<div id=\"app\">\n<img src=\"img_moose.jpg\">\n<p>{{ \"Moose count: \" + count }}</p>\n<button v-on:click=\"count++\">Count moose</button>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ncount: 0\n}\n}\n})\napp.mount('#app')\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<p v-on:click=\"changeColor\">Click me</p>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<div id=\"app\">\n<img src=\"img_moose.jpg\">\n<p>{{ \"Moose count: \" + count }}</p>\n<button v-on:click=\"count++\">Count moose</button>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ncount: 0\n# TODO: Complete this line\n}\n})\napp.mount('#app')\n</script>",
      "solution": "<div id=\"app\">\n<img src=\"img_moose.jpg\">\n<p>{{ \"Moose count: \" + count }}</p>\n<button v-on:click=\"count++\">Count moose</button>\n</div>\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<script>\nconst app = Vue.createApp({\ndata() {\nreturn {\ncount: 0\n}\n}\n})\napp.mount('#app')\n</script>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<p v-on:click=\"changeColor\">Click me</p>"
    }
  ],
  "related_topics": [
    {
      "id": "cab1ab46-a680-4e75-8768-fabadc08d21d",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "aa35b90e-0cba-4f3d-9154-6e76fa555f8f",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "85fb019d-90b9-4961-9eca-f95188ce08a2",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue Events\n\nEvent handling in Vue?",
      "options": [
        "set up to run a certain code when a certain event happens",
        "None of the above.",
        "done with the\nv-on\ndirective",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Vue Events\n\nEvent handling in Vue is 'done with the\nv-on\ndirective'."
    },
    {
      "question": "What is Event handling is when HTML elements?",
      "options": [
        "done with the\nv-on\ndirective",
        "set up to run a certain code when a certain event happens",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Event handling is when HTML elements is 'set up to run a certain code when a certain event happens'."
    }
  ],
  "summary": "This tutorial covers Vue Events concepts and techniques. You'll learn how to use Vue Events effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Events and how to apply it in your projects."
}