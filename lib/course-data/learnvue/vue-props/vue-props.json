{
  "id": "7cdfcbcb-99d7-4c0f-bc9c-b32af8574050",
  "title": "Vue Props",
  "slug": "vue-props",
  "metadata": {
    "description": "Learn about Vue Props with clear explanations and practical examples.",
    "keywords": [
      "food",
      "props",
      "prop",
      "script",
      "isfavorite",
      "item",
      "template",
      "default",
      "name",
      "type"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 8,
    "category": "LearnVue",
    "subcategory": "Vue Props"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Vue Props\n\nProps\nis a configuration option in Vue",
      "content": ".\nWith props we can pass data to the components via custom attributes to the component tag.\nPass Data To a Component\nDo you remember the example on the \nLet's make a simple page to show 'Apples', 'Pizza' and 'Rice'.\nIn the main application file\nApp.vue\nwe create our own attribute 'food-name' to pass a prop with the\n<food-item/>\ncomponent tags:\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <food-item food-name=\"Apples\"/>\n\u00a0 <food-item food-name=\"Pizza\"/>\n\u00a0 <food-item food-name=\"Rice\"/>\n</template>\n\n<script></script>\n\n<style>\n\u00a0 #app > div {\n\u00a0 \u00a0 border: dashed black 1px;\n\u00a0 \u00a0 display: inline-block;\n\u00a0 \u00a0 width: 120px;\n\u00a0 \u00a0 margin: 10px;\n\u00a0 \u00a0 padding: 10px;\n\u00a0 \u00a0 background-color: lightgreen;\n\u00a0 }\n</style>\nReceive Data Inside a Component\nTo receive the data sent via the 'food-item' attribute from\nApp.vue\nwe use this new 'props' configuration option. We list the attributes received so that our component *.vue file knows about them, and now we can use the props wherever we want in the same way as we use a data property.\nFoodItem.vue\n:\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: [\n\u00a0 \u00a0 \u00a0 'foodName'\n\u00a0 \u00a0 ]\n\u00a0 }\n</script>",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Props attributes are written with a dash",
      "content": "-\nto separate words (kebab-case) in the\n<template>\ntag, but kebab-case is not legal in JavaScript. So instead we need to write the attribute names as \n  camel Case in JavaScript, and Vue understands this automatically!\nFinally, our example with\n<div>\nelements for 'Apples', 'Pizza' and 'Rice' looks like this:\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <food-item food-name=\"Apples\"/>\n\u00a0 <food-item food-name=\"Pizza\"/>\n\u00a0 <food-item food-name=\"Rice\"/>\n</template>\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>{{\nfoodName\n}}</h2>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: [\n\u00a0 \u00a0 \u00a0 '\nfoodName\n'\n\u00a0 \u00a0 ]\n\u00a0 }\n</script>\n\n<style></style>\nRun Example \u00bb\nSoon we will see how to pass different data types as props attributes to components, but before we do that, let's expand our code with a description of each type of food, and put the food\n<div>\nelements inside a Flexbox wrapper.\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <div id=\"wrapper\">\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Apples\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Apples are a type of fruit that grow on trees.\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Pizza\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Rice\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Rice is a type of grain that people like to eat.\"/>\n\u00a0 </div>\n</template>\n\n<script></script>\n\n<style>\n\u00a0 #wrapper {\n\u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 flex-wrap: wrap;\n\u00a0 }\n\u00a0 #wrapper > div {\n\u00a0 \u00a0 border: dashed black 1px;\n\u00a0 \u00a0 margin: 10px;\n\u00a0 \u00a0 padding: 10px;\n\u00a0 \u00a0 background-color: lightgreen;\n\u00a0 }\n</style>\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>{{ foodName }}</h2>\n\u00a0 \u00a0 <p>{{ foodDesc }}</p>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: [\n\u00a0 \u00a0 \u00a0 'foodName',\n\u00a0 \u00a0 \u00a0 'foodDesc'\n\u00a0 \u00a0 ]\n\u00a0 }\n</script>\n\n<style></style>\nRun Example \u00bb\nBoolean Props\nWe can achieve different functionality by passing props of different data types, and we are able to define rules for how attributes are given when components are created from\nApp.vue\n.\nLet's add a new prop 'isFavorite'. This should be a boolean prop with value either\ntrue\nor\nfalse\nso that we can use it directly with\nv-show\nto display a favorite stamp\n<img>\ntag if the food is considered a favorite.\nTo pass props with a data type different to String, we must write\nv-bind:\nin front of the attribute we want to pass.\nThis is how we pass the boolean 'isFavorite' prop from\nApp.vue\nas an attribute 'is-favorite':\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <p>My favorite food has a diploma image attached to it.</p>\n\u00a0 <div id=\"wrapper\">\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Apples\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Apples are a type of fruit that grow on trees.\"\n\u00a0 \u00a0 \u00a0 v-bind:is-favorite=\"true\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Pizza\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"\n\u00a0 \u00a0 \u00a0 v-bind:is-favorite=\"false\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Rice\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Rice is a type of grain that people like to eat.\"\n\u00a0 \u00a0 \u00a0 v-bind:is-favorite=\"false\"/>\n\u00a0 </div>\n</template>\nWe receive the boolean 'isFavorite' prop inside\nFoodItem.vue\nand show a favorite stamp if the food is considered favorite:\nExample\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>\n\u00a0 \u00a0 \u00a0 {{ foodName }}\n\u00a0 \u00a0 \u00a0 <img src=\"/img_quality.svg\" v-show=\"isFavorite\">\n\u00a0 \u00a0 </h2>\n\u00a0 \u00a0 <p>{{ foodDesc }}</p>\n\u00a0 </div>\n</template>\n\n<script>\n\u00a0 export default {\n  \u00a0 \u00a0 props: ['foodName','foodDesc','isFavorite']\n\u00a0 }\n</script>\n\n<style>\n\u00a0 img {\n\u00a0 \u00a0 height: 1.5em;\n\u00a0 \u00a0 float: right;\n\u00a0 }\n</style>\nRun Example \u00bb\nImages:\nTo make the image in the example above work locally in the project on your machine, open the example above, right click the image, choose \"Save Image As...\" and save it in the \"public\" folder in your project.\nProps Interface\nIn the example above, based on the code inside\nFoodItem.vue\n, we cannot know for sure that we receive the 'isFavorite' prop, and we cannot know for sure if it is a boolean value. To help us with this we can define the data-type of props we receive, we can set props to be required, and we can even make validation functions to validate the props we receive.\nDefining props we receive serves as a documentation for other people if you work in a team, and it provides us with warnings in the console if the rules that we have defined are broken.\nProps as an Object\nIn\nFoodItem.vue\n, we comment out how we defined the props in an array to have it as reference, and instead define the props in an object. We can also define the data type of each prop in addition to the prop name, like this:\nFoodItem.vue\n:\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 // props: ['foodName','foodDesc','isFavorite']\n\u00a0 \u00a0 props: {\n\u00a0 \u00a0 \u00a0 foodName: String,\n\u00a0 \u00a0 \u00a0 foodDesc: String,\n\u00a0 \u00a0 \u00a0 isFavorite: Boolean\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nWith props defined in this way, other people can look inside\nFoodItem.vue\nand easily see what the component expects.\nIf a component is created from the parent element (in our case\nApp.vue\n) and given a prop with the wrong data type, you get a warning in the console, like this:\nSuch warnings are useful to let ourselves and others know that a component is not used how it is supposed to, and to tell what is wrong so that we can correct the mistake.\nRequired Props\nTo tell Vue that a prop is required we need to define the prop as an object. Let's make the prop 'foodName' required, like this:\nFoodItem.vue\n:\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 // props: ['foodName','foodDesc','isFavorite']\n\u00a0 \u00a0 props: {\n\u00a0 \u00a0 \u00a0 foodName: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: String,\n\u00a0 \u00a0 \u00a0 \u00a0 required: true\n\u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 foodDesc: String,\n\u00a0 \u00a0 \u00a0 isFavorite: Boolean\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nIf a component is created from the parent element (in our case\nApp.vue\n) and a required prop is not defined, you get a warning in the console, like this:\nSuch warnings are useful to let ourselves and others know that a component is not used how it is supposed to, and to tell what is wrong so that we can correct the mistake.\nDefault Value\nWe can set a default value for a prop.\nLet's create a default value for the 'foodDesc' prop in the 'FoodItem' component, and then create such an item for rice without defining the 'foodDesc' prop:\nExample\nApp.vue\n:\n<template>\n\u00a0 <h1>Food</h1>\n\u00a0 <p>My favorite food has a diploma image attached to it.</p>\n\u00a0 <div id=\"wrapper\">\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Apples\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Apples are a type of fruit that grow on trees.\"\n\u00a0 \u00a0 \u00a0 v-bind:is-favorite=\"true\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Pizza\"\n\u00a0 \u00a0 \u00a0 food-desc=\"Pizza has a bread base with tomato sauce, cheese, and toppings on top.\"\n\u00a0 \u00a0 \u00a0 v-bind:is-favorite=\"false\"/>\n\u00a0 \u00a0 <food-item\n\u00a0 \u00a0 \u00a0 food-name=\"Rice\"\nfood-desc=\"Rice is a type of grain that people like to eat.\"\nv-bind:is-favorite=\"false\"/>\n\u00a0 </div>\n</template>\nFoodItem.vue\n:\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: {\n\u00a0 \u00a0 \u00a0 foodName: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: String,\n\u00a0 \u00a0 \u00a0 \u00a0 required: true\n\u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 foodDesc: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: String,\n\u00a0 \u00a0 \u00a0 \u00a0 required: false,\n\u00a0 \u00a0 \u00a0 \u00a0 default: 'This is the default description.'\n\u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 isFavorite: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: Boolean,\n\u00a0 \u00a0 \u00a0 \u00a0 required: false,\n\u00a0 \u00a0 \u00a0 \u00a0 default: false\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nRun Example \u00bb\nProps Validator Function\nWe can also define a validator function that decides if the prop value is valid or not.\nSuch validator functions must return either true or false. When the validator returns false, it means the prop value is invalid. An invalid prop value generates a warning in the browser console when we run our page in developer mode, and the warning is a useful hint to make sure the components are used as intended.\nLet's say we want the food description to be a certain length, between 20 and 50 characters. We can add a validator function to make sure the food description provided has a valid length.\nFoodItem.vue\n:\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 props: {\n\u00a0 \u00a0 \u00a0 foodName: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: String,\n\u00a0 \u00a0 \u00a0 \u00a0 required: true\n\u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 foodDesc: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: String,\n\u00a0 \u00a0 \u00a0 \u00a0 required: false,\n\u00a0 \u00a0 \u00a0 \u00a0 default: 'This is the default description.',\n\u00a0 \u00a0 \u00a0 \u00a0 validator: function(value) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if( 20<value.length && value.length<50 ) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 isFavorite: {\n\u00a0 \u00a0 \u00a0 \u00a0 type: Boolean,\n\u00a0 \u00a0 \u00a0 \u00a0 required: false,\n\u00a0 \u00a0 \u00a0 \u00a0 default: false\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nNote:\nIf you add the validator code above to your local project, you will get a warning in development mode because the food description for pizza is 65 characters, which is 15 characters longer than the validator function allows.\nModify Props\nWhen a component is created in the parent element we are not allowed to change the value of the prop received in the child element. So inside\nFoodItem.vue\nwe cannot change the value of the 'isFavorite' prop we get from\nApp.vue\n. The prop is read-only from the parent, which is\nApp.vue\nin our case.\nBut let's say we want the user to be able to change what food is considered favorite by clicking a button. Now there is a need to change the 'isFavorite' prop, but we cannot do it because it is read only.\nWe are not allowed to change 'isFavorite'. This will generate an error.\nmethods: {\n\u00a0 toggleFavorite() { \n\u00a0 \u00a0 this.isFavorite = !this.isFavorite;\n\u00a0 }\n}\nTo get around this we can use the prop to initialize a new data value 'foodIsFavorite', inside\nFoodItem.vue\n, like this:\ndata() {\n\u00a0 return { \n\u00a0 \u00a0 foodIsFavorite: this.isFavorite\n\u00a0 }\n}\nAnd now we can add a method so the user can toggle this new data value:\nmethods: {\n\u00a0 toggleFavorite() { \n\u00a0 \u00a0 this.foodIsFavorite = !this.foodIsFavorite;\n\u00a0 }\n}\nWe must also add the toggle button to each food item, and change\nv-show\nin the\n<img>\ntag to depend on the new data property 'foodIsFavorite'. And to make our example simpler we also slim down the props declaration to just an array.\nExample\nFoodItem.vue\n:\n<template>\n\u00a0 <div>\n\u00a0 \u00a0 <h2>\n\u00a0 \u00a0 \u00a0 {{ foodName }}\n\u00a0 \u00a0 \u00a0 <img src=\"/img_quality.svg\" v-show=\"foodIsFavorite\">\n\u00a0 \u00a0 </h2>\n\u00a0 \u00a0 <p>{{ foodDesc }}</p>\n\u00a0 \u00a0 <button v-on:click=\"toggleFavorite\">Favorite</button>\n\u00a0 </div>\n</template>\n\n<script>\nexport default {\n\u00a0 props: ['foodName','foodDesc','isFavorite'],\n\u00a0 data() {\n\u00a0 \u00a0 return {\n\u00a0 \u00a0 \u00a0 foodIsFavorite: this.isFavorite\n\u00a0 \u00a0 }\n\u00a0 },\n\u00a0 methods: {\n\u00a0 \u00a0 toggleFavorite() {\n\u00a0 \u00a0 \u00a0 this.foodIsFavorite = !this.foodIsFavorite;\n\u00a0 \u00a0 }\n\u00a0 }\n};\n</script>\n\n<style>\n\u00a0 img {\n\u00a0 \u00a0 height: 1.5em;\n\u00a0 \u00a0 float: right;\n\u00a0 }\n</style>\nRun Example \u00bb\nVue Exercises\nTest Yourself With Exercises\nExercise:\nWhat must we write in a component so that it receives data sent via the 'fish-name' attribute from App.vue as a prop?\n<script>\n  export default {\n: [\n      '\n'\n    ]\n  }\n</script>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "4fd11aa5-4124-4807-bf92-b09233a688ae",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e66134e8-e94c-4c98-85be-b107a649a229",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3f646db3-1f69-41bc-b5ca-12f8681d29c9",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue Props\n\nProps?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a configuration option in Vue",
        "written with a dash\n-\nto separate words (kebab-case) in the\n<template>\ntag"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Vue Props\n\nProps is 'a configuration option in Vue'."
    },
    {
      "question": "What is Props attributes?",
      "options": [
        "None of the above.",
        "written with a dash\n-\nto separate words (kebab-case) in the\n<template>\ntag",
        "a configuration option in Vue",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Props attributes is 'written with a dash\n-\nto separate words (kebab-case) in the\n<template>\ntag'."
    }
  ],
  "summary": "This tutorial covers Vue Props concepts and techniques. You'll learn how to use Vue Props effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Props and how to apply it in your projects."
}