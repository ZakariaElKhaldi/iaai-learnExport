{
  "id": "229905de-4197-4fd7-9736-aedfcec73663",
  "title": "Vue 'is' Attribute",
  "slug": "vue-is-attribute",
  "metadata": {
    "description": "Learn about Vue 'is' Attribute with clear explanations and practical examples.",
    "keywords": [
      "component",
      "attribute",
      "built",
      "example",
      "element",
      "template",
      "reference",
      "bind",
      "comp",
      "dynamic"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue 'is' Attribute"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue 'is' Attribute",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue Built-in Attributes Reference\n\nExample\nThe\nis\nattribute is connected to the computed value 'activeComp' with\nv-bind\n(shorthand\n:\n) so that either the 'comp-one' component or the 'comp-two' component is displayed.\nApp.vue\n:\n<template>\n  <h1>Dynamic Components</h1>\n  <p>App.vue switches between which component to show.</p>\n  <button @click=\"toggleValue = !toggleValue\">Switch component</button>\n  <component :is=\"activeComp\"></component>\n</template>\nRun Example \u00bb\nSee more examples below.\nDefinition and Usage\nThe\nis\nattribute can be used for three things:\n1. Dynamic components:\nThe\nis\nattribute is set on the built-in\n<component>\nelement to create a dynamic component, where the\nis\nattribute defines which component should be the active one.\nIn more detail, the\nis\nattribute is bound to a property with\nv-bind\n, and the property holds the name of which component that should be the active one. (See the Example above)\n2. Replace a native element with a Vue component:\nis=\"vue:my-component\"\nis placed on a native HTML element to replace it with a Vue component. (See Example 1)\nIf we do not use the\nvue:\nprefix, it will be interpreted as a customized built-in element, as explained right below here, and the Vue component will not be inserted.\n3. Customized built-in element:\nCustomized built-in elements can be written in JavaScript, and the\nis\nattribute can be used on an HTML tag to define it as such a customized built-in element. This is not a Vue feature.\nMore Examples\nExample 1\nUsing the\nis\nattribute to replace an\n<img>\ntag with a Vue component.\nApp.vue\n:\n<template>\n  <h2>Example Built-in 'is' Attribute</h2>\n  <p>The IMG tag below is set to be replaced by a component by the use of 'is=\"vue:child-comp\"'.</p>\n  <img is=\"vue:child-comp\" />\n</template>\nChildComp.vue\n:\n<template>\n  <div>\n    <h3>ChildComp.vue</h3>\n    <p>This is the child component</p>\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  border: solid black 1px;\n  background-color: lightgreen;\n  padding: 10px;\n  max-width: 250px;\n  margin-top: 20px;\n}\n</style>\nRun Example \u00bb\nRelated Pages\nVue Tutorial:\nDynamic Components\nVue Tutorial:\nVue Components\nVue Tutorial:\nVue Computed Properties\nVue Tutorial:\nVue v-bind Directive\nVue Reference:\nVue v-bind Directive\nVue Reference:\nVue <component> Element\nVue Reference:\nVue $refs Object\n\nVue Built-in Attributes Reference\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "89b2c309-6df8-4f6e-99e7-cf33be7ac021",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e59ad4e0-a96d-4135-a32f-3123f8d24018",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "24786b94-331d-4c06-b680-2373998e056b",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is in Attributes Reference\n\nExample\nThe\nis\nattribute?",
      "options": [
        "None of the above.",
        "connected to the computed value 'activeComp' with\nv-bind\n(shorthand\n:\n) so that either the 'comp-one' component or the 'comp-two' component is displayed",
        "None of the above.",
        "Not a in Attributes Reference\n\nExample\nThe\nis\nattribute."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of in Attributes Reference\n\nExample\nThe\nis\nattribute is 'connected to the computed value 'activeComp' with\nv-bind\n(shorthand\n:\n) so that either the 'comp-one' component or the 'comp-two' component is displayed'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Vue 'is' Attribute concepts and techniques. You'll learn how to use Vue 'is' Attribute effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue 'is' Attribute and how to apply it in your projects."
}