{
  "id": "18d0156d-ff2a-4cf7-b9f1-a951bdbf8060",
  "title": "Scoped Styling",
  "slug": "scoped-styling",
  "metadata": {
    "description": "Learn about Scoped Styling with clear explanations and practical examples.",
    "keywords": [
      "style",
      "styling",
      "scoped",
      "example",
      "compone",
      "inside",
      "component",
      "template",
      "script",
      "components"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Scoped Styling"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Scoped Styling",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Styling defined inside the\n<style>\ntag in a component, or in\nApp.vue\n, is actually available globally in all components.\nTo keep the styling limited locally to just the component, we can use the\nscope\nattribute on that component:\n<style scoped>\nGlobal Styling\nCSS written inside the\n<style>\ntag in any\n*.vue\nfile works globally.\nThis means that if we for example set\n<p>\ntags to have pink background color inside the\n<style>\ntag in one\n*.vue\nfile, this will affect\n<p>\ntags in all of the\n*.vue\nfiles in that project.\nExample\nIn this application we have three\n*.vue\nfiles:\nApp.vue\n, and two components\nCompOne.vue\nand\nCompTwo.vue\n.\nThe CSS styling inside\nCompOne.vue\naffects\n<p>\ntags in all three\n*.vue\nfiles:\n<template>\n\u00a0 <p>This p-tag belongs to 'CompOne.vue'</p>\n</template>\n\n<script></script>\n\n<style>\n\u00a0 p {\n\u00a0 \u00a0 background-color: pink;\n\u00a0 \u00a0 width: 150px;\n\u00a0 }\n</style>\nRun Example \u00bb\nScoped Styling\nTo avoid that the styling in one component affects the styling of elements in other components we use the 'scoped' attribute on the\n<style>\ntag:\nExample\nThe\n<style>\ntag in\nCompOne.vue\nis given the\nscoped\nattribute:\n<template>\n\u00a0 <p>This p-tag belongs to 'CompOne.vue'</p>\n</template>\n\n<script></script>\n\n<style\nscoped\n>\n\u00a0 p {\n\u00a0 \u00a0 background-color: pink;\n\u00a0 \u00a0 width: 150px;\n\u00a0 }\n</style>\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "15f39d90-fb1c-4034-bbf5-d7a10528b04a",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2387bbb0-1020-4eda-a720-2701eb1256f6",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6dbcbaa-d2f4-4037-bd12-9de8069a33d1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This?",
      "options": [
        "Not a This.",
        "None of the above.",
        "that if we for example set\n<p>\ntags to have pink background color inside the\n<style>\ntag in one\n*",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of This is 'that if we for example set\n<p>\ntags to have pink background color inside the\n<style>\ntag in one\n*'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Scoped Styling concepts and techniques. You'll learn how to use Scoped Styling effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Scoped Styling and how to apply it in your projects."
}