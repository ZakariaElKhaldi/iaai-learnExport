{
  "id": "8dccae91-3b2e-4355-b255-aefb5d1117a7",
  "title": "Vue Template Refs",
  "slug": "vue-template-refs",
  "metadata": {
    "description": "Learn about Vue Template Refs with clear explanations and practical examples.",
    "keywords": [
      "refs",
      "example",
      "template",
      "element",
      "script",
      "object",
      "text",
      "button",
      "click",
      "innerhtml"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Template Refs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Vue Template Refs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Vue\nTemplate Refs\nare used to refer to specific DOM elements.\nWhen the\nref\nattribute is set on an HTML tag, the resulting DOM element is added to the\n$refs\nobject.\nWe can use the\nref\nattribute and the\n$refs\nobject in Vue as an alternative to methods in plain JavaScript like getElementById() or querySelector().\nThe 'ref' Attribute and The '$refs' Object\nHTML tags with the\nref\nattribute will be added to the\n$refs\nobject and can be reached later from inside the\n<script>\ntag.\nExample\nThe text inside a\n<p>\nelement is changed.\nApp.vue\n:\n<template>\n\u00a0 <h1>Example</h1>\n\u00a0 <p>Click the button to put \"Hello!\" as the text in the green p element.</p>\n\u00a0 <button @click=\"changeVal\">Change Text</button>\n\u00a0 <p ref=\"pEl\">This is the initial text</p>\n</template>\n\n<script>\n\u00a0 export default {\n\u00a0 \u00a0 methods: {\n\u00a0 \u00a0 \u00a0 changeVal() {\nthis.$refs.pEl.innerHTML = \"Hello!\";\n}\n\u00a0 \u00a0 }\n\u00a0 }\n</script>\nRun Example \u00bb\nBelow is another example where the\n$refs\nobject is used to copy the value of one tag into another tag.\nExample\nThe text from the first\n<p>\ntag is copied into the second\n<p>\ntag.\nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p ref=\"p1\">Click the button to copy this text into the paragraph below.</p>\n  <button @click=\"transferText\">Transfer text</button>\n  <p ref=\"p2\">...</p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      transferText() { \n        this.$refs.p2.innerHTML = this.$refs.p1.innerHTML;\n      }\n    }\n  };\n</script>\nRun Example \u00bb\nGet The Input Value from '$refs'\nWe can go further into an HTML element added to the\n$refs\nobject to access any property we want.\nExample\nA\n<p>\nelement gets the same content as what's being written in the input field.\nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p>Start writing inside the input element, and the text will be copied into the last paragraph by the use of the '$refs' object.</p>\n  <input ref=\"inputEl\" @input=\"getRefs\" placeholder=\"Write something..\">\n  <p ref=\"pEl\"></p>\n</template>\n\n<script>\n  export default {\n    methods: {\n      getRefs() { \n        this.$refs.pEl.innerHTML = this.$refs.inputEl.value;\n      }\n    }\n  };\n</script>\nRun Example \u00bb\n'ref' with v-for\nHTML elements created with\nv-for\n, with the\nref\nattribute, will be added to the\n$refs\nobject as an array.\nExample\nThe button reveals the the third list element stored as an array element inside the\n$refs\nobject.\nApp.vue\n:\n<template>\n  <h1>Example</h1>\n  <p>Click the button to reveal the 3rd list element stored as an array element in the $refs object.</p>\n  <button @click=\"getValue\">Get the 3rd list element</button><br>\n  <ul>\n    <li v-for=\"x in liTexts\" ref=\"liEl\">{{ x }}</li>\n  </ul>\n  <pre>{{ thirdEl }}</pre>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        thirdEl: ' ',\n        liTexts: ['Apple','Banana','Kiwi','Tomato','Lichi']\n      }\n    },\n    methods: {\n      getValue() { \n        this.thirdEl = this.$refs.liEl[2].innerHTML;\n        console.log(\"this.$refs.liEl = \",this.$refs.liEl);\n      }\n    }\n  };\n</script>\n\n<style>\npre {\n  background-color: lightgreen;\n  display: inline-block;\n}\n</style>\nRun Example \u00bb\nVue Exercises\nTest Yourself With Exercises\nExercise:\nRefs are used to refer to specific DOM elements.\nSupply the missing code so that 'Hello World' is displayed in the second <p> tag when the application is mounted.\n<template>\n  <p>This is just some text.</p>\n  <p\n>This is the initial text</p>\n</template>\n\n<script>\n  export default {\n    mounted() {\n      this.\n.pEl.innerHTML = \"Hello World!\";\n    }\n  };\n</script>\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Create a Layout",
      "description": "Build a simple layout using the techniques from this tutorial.",
      "difficulty": "easy",
      "starter_code": "<!-- Add your code here -->",
      "solution": "<!-- Example solution would go here -->"
    }
  ],
  "related_topics": [
    {
      "id": "a45bab86-f94c-47f2-8954-de8ed4a3b5cc",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9fc5654d-87aa-4d6b-9b38-b9c8848982fb",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "7d010295-c2d0-4ac7-8825-2c116e859857",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Vue Template Refs\n\nVue\nTemplate Refs?",
      "options": [
        "set on an HTML tag",
        "None of the above.",
        "used to refer to specific DOM elements",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Vue Template Refs\n\nVue\nTemplate Refs is 'used to refer to specific DOM elements'."
    },
    {
      "question": "What is When the\nref\nattribute?",
      "options": [
        "None of the above.",
        "used to refer to specific DOM elements",
        "None of the above.",
        "set on an HTML tag"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of When the\nref\nattribute is 'set on an HTML tag'."
    }
  ],
  "summary": "This tutorial covers Vue Template Refs concepts and techniques. You'll learn how to use Vue Template Refs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Vue Template Refs and how to apply it in your projects."
}