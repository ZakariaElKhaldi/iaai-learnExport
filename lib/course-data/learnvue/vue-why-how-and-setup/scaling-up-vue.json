{
  "id": "dc9c84e3-b657-4594-a93d-cc46321865d3",
  "title": "Scaling up Vue",
  "slug": "scaling-up-vue",
  "metadata": {
    "description": "Learn about Scaling up Vue with clear explanations and practical examples.",
    "keywords": [
      "c",
      "project",
      "files",
      "components",
      "code",
      "terminal",
      "folder",
      "example",
      "editor",
      "file",
      "install"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnVue",
    "subcategory": "Vue Why, How and Setup"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Scaling up Vue",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Using *.vue files for our Vue project makes sense because:\nit becomes easier to handle larger projects with the use of templates and components.\nwe can see and test our project through the https protocol, like the users will see the page.\nthe page updates immediately when changes are saved, without reloading.\nthis is how real web pages in Vue are built.\nit is how developers work.\nWhy?\nAs we saw on the \nhave larger projects\ngather all Vue related code in one place\nuse components in Vue (we will come to this soon)\nhave highlighting and auto-completion support in the editor\nauto-update the browser\nAnd to make all this possible we must switch to *.vue files.\nHow?\nSFCs (Single File Components), or *.vue files, are easier to work with but cannot run directly in the browser, so we need to set up our computer to compile our *.vue files to *.html, *.css and *.js files so that the browser can run our Vue application.\nTo build our web page based on SFCs we use a program called Vite as the build tool, and we write our code in the VS Code editor with the Volar extension for Vue 3 language features.\nSetup\nFollow the three steps below to install what you need to run Vue SFC applications on your computer.\nThe \"VS Code\" Editor\nThere are many different editors that can be used for Vue projects. We use the VS Code editor.\nDownload VS Code\nand install it.\nThe VS Code \"Volar\" Extension\nTo get highlighting and auto-completion with *.vue files in the editor, open VS Code, go to \"Extensions\" on the left hand side. Search for \"Volar\" and install the extension with the most downloads and the description \"Language support for Vue 3\".\nNode.js\nDownload and install the latest version of\nNode.js\n, as the Vue build tool \"Vite\" runs on top of this.\nNode.js is an open-source server-side JavaScript runtime environment.\nCreate The Default Example Project\nFollow the steps below to create the default Vue example project on your computer.\nCreate a folder for your Vue projects on your computer.\nIn VS Code, open a terminal by choosing Terminal -> New Terminal from the menu:\nUse the terminal to navigate to the Vue folder you just created by using commands like\ncd <folder-name>\n,\ncd ..\n,\nls\n(Mac/Linux) and\ndir\n(Windows). If you are not familiar with writing commands in the terminal, see our introduction to Command Line Interface (CLI)\nhere\n.\nAfter you have navigated to your Vue folder in the terminal, write:\nnpm init vue@latest\nCreate your first project, with project name \"firstsfc\":\nAnswer \"No\" to all options:\nNow you should be presented with this in your terminal:\nWe will now run the commands as suggested above.\nRun this command to change directory to your new project inside the 'firstsfc' folder:\ncd firstsfc\nInstall all required dependencies so that the Vue project works:\nnpm install\nStart the development server:\nnpm run dev\nThe terminal window should now look like this:\nAnd your browser should open the example project automatically:\nIf you cannot find the example project in the browser, use the link from the terminal. The link you find in your terminal window might have a different address than the address in the screenshot above.\nNow the example project is running on your machine in development mode by the Vite build tool.\nThe Project Files\nThe example project that has automatically been created contains many files, and we will take a quick look at a few of them.\nmain.js\nGo to your Vue project in the VS Code editor, find the \"main.js\" file in the \"src\" folder:\n\"main.js\" tells Vite how to build the Vue project based on the \"App.vue\" file. This is similar to how we \n<div id=\"app\">\ntag.\nApp.vue\nIn the same example project folder, find the \"App.vue\" file and open it. Like all other *.vue files, \"App.vue\" contains three parts: a\n<script>\npart, a\n<template>\npart and a\n<style>\npart.\nApp.vue\n:\n<script setup>\nimport HelloWorld from './components/HelloWorld.vue'\nimport TheWelcome from './components/TheWelcome.vue'\n</script>\n\n<template>\n  <header>\n    <img alt=\"Vue logo\" class=\"logo\" src=\"./assets/logo.svg\" width=\"125\" height=\"125\" />\n\n<div class=\"wrapper\">\n      <HelloWorld msg=\"You did it!\" />\n    </div>\n  </header>\n\n<main>\n    <TheWelcome />\n  </main>\n</template>\n\n<style scoped>\nheader {\n  line-height: 1.5;\n}\n\n.logo {\n  display: block;\n  margin: 0 auto 2rem;\n}\n\n@media (min-width: 1024px) {\n  header {\n    display: flex;\n    place-items: center;\n    padding-right: calc(var(--section-gap) / 2);\n  }\n\n.logo {\n    margin: 0 2rem 0 0;\n  }\n\nheader .wrapper {\n    display: flex;\n    place-items: flex-start;\n    flex-wrap: wrap;\n  }\n}\n</style>\nAs you can see in the script part of \"App.vue\", other *.vue files are referred to: those are 'components' and are located in the 'components' folder. If you take a look in the 'template' part of the 'App.vue' file, you can see tags that are not normal HTML tags:\n<HelloWorld>\nand\n<TheWelcome>\n. This is how the components are referred to. Components are like apps within the app. We will learn more about components soon.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nWhat is the name of the file?\nis responsible for telling the compiler \nwhich files the Vue project consists of.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "npm init vue@latest",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "cd firstsfc",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "npm install",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "npm run dev",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "npm init vue@latest"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your unknown code here",
      "solution": "cd firstsfc"
    }
  ],
  "related_topics": [
    {
      "id": "9efbdf3b-11a8-48f9-a66b-d6f88692a15b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3a8a0638-9c19-4179-9380-f7432f9110ba",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f2c6fe21-744a-42c8-a2cb-d6117dad52dc",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the page updates immediately when changes?",
      "options": [
        "None of the above.",
        "saved",
        "built",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the page updates immediately when changes is 'saved'."
    },
    {
      "question": "What is this is how real web pages in Vue?",
      "options": [
        "saved",
        "built",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of this is how real web pages in Vue is 'built'."
    }
  ],
  "summary": "This tutorial covers Scaling up Vue concepts and techniques. You'll learn how to use Scaling up Vue effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Scaling up Vue and how to apply it in your projects."
}