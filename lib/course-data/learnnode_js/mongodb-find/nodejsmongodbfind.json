{
  "id": "753f6400-cd94-4277-8623-5cd8b47ddf98",
  "title": "Node.jsMongoDBFind",
  "slug": "nodejsmongodbfind",
  "metadata": {
    "description": "Learn about Node.jsMongoDBFind with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "name",
      "address",
      "result",
      "example",
      "mongoclient",
      "find",
      "mongodb",
      "collection",
      "function",
      "throw"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNode.js",
    "subcategory": "MongoDB Find"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nMongoDB\nFind",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "In MongoDB we use the\nfind\nand\nfindOne\nmethods to find data in a collection.\nJust like the\nSELECT\nstatement is used to find data in a \n  table in a MySQL database.\nFind One\nTo select data from a collection in MongoDB, we can use the\nfindOne()\nmethod.\nThe\nfindOne()\nmethod returns the first \noccurrence in the selection.\nThe first parameter of the\nfindOne()\nmethod \nis a query object. In this example we use an empty query object, which selects \nall documents in a collection (but returns only the first document).\nExample\nFind the first document in the customers collection:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").findOne({}, function(err, result) {\nif (err) throw err;\nconsole.log(result.name);\ndb.close();\n});\n});\nRun example \u00bb\nSave the code above in a file called \"demo_mongodb_findone.js\" and run the file:\nRun \"demo_mongodb_findone.js\"\nC:\\Users\\\nYour Name\n>node demo_mongodb_findone.js\nWhich will give you this result:\nCompany Inc.\nFind All\nTo select data from a table in MongoDB, we can also use the\nfind()\nmethod.\nThe\nfind()\nmethod returns all \noccurrences in the selection.\nThe first parameter of the\nfind()\nmethod \nis a query object. In this example we use an empty query object, which selects \nall documents in the collection.\nNo parameters in the find() method gives you the same result as\nSELECT *\nin MySQL.\nExample\nFind all documents in the customers collection:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({}).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nSave the code above in a file called \"demo_mongodb_find.js\" and run the file:\nRun \"demo_mongodb_find.js\"\nC:\\Users\\\nYour Name\n>node demo_mongodb_find.js\nWhich will give you this result:\n[\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', \n  address: 'Apple st 652'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: \n  'Mountain 21'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', address: 'Valley 345'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a89 , name: 'Sandy', address: 'Ocean blvd 2'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a , \n  name: 'Betty', address: 'Green Grass 1'},\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8c , name: 'Susan', address: 'One way \n  98'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8d , name: 'Vicky', address: 'Yellow Garden 2'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f , name: 'William', \n  address: 'Central st 954'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a90 , name: 'Chuck', address: \n  'Main Road 989'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633'}\n]\nFind Some\nThe second parameter of the\nfind()\nmethod \nis the\nprojection\nobject that describes which fields to include in the result.\nThis parameter is optional, and if omitted, all fields will be included in \nthe result.\nExample\nReturn the fields \"name\" and \"address\" of all documents in the customers collection:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0, name: 1, address: \n  1 } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nSave the code above in a file called \"demo_mongodb_find_fields.js\" and run the file:\nRun \"demo_mongodb_find_fields.js\"\nC:\\Users\\\nYour Name\n>node demo_mongodb_find_fields.js\nWhich will give you this result:\n[\n{ name: 'John', address: 'Highway 71'},\n{ name: 'Peter', address: 'Lowstreet 4'},\n{ \n  name: 'Amy', \n  address: 'Apple st 652'},\n{ name: 'Hannah', address: \n  'Mountain 21'},\n{ name: 'Michael', address: 'Valley 345'},\n{ name: 'Sandy', address: 'Ocean blvd 2'},\n{ \n  name: 'Betty', address: 'Green Grass 1'},\n{ name: 'Richard', \n  address: 'Sky st 331'},\n{ name: 'Susan', address: 'One way \n  98'},\n{ name: 'Vicky', address: 'Yellow Garden 2'},\n{ name: 'Ben', address: 'Park Lane 38'},\n{ \n  name: 'William', \n  address: 'Central st 954'},\n{ name: 'Chuck', address: \n  'Main Road 989'},\n{\u00a0name: 'Viola', address: 'Sideway \n  1633'}\n]\nYou are not allowed to specify both 0 and 1 values in the same object (except \nif one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, \nand vice versa:\nExample\nThis example will exclude \"address\" from the result:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { address: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nTo exclude the _id field, you must set its value to 0:\nExample\nThis example will return only the \"name\" field:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0, name: 1 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nExample\nThis example will give you the same result as the first example; return all \nfields except the _id field:\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nExample\nYou get an error if you specify both 0 and 1 values in the same object \n(except if one of the fields is the _id field):\nvar MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { name: 1, address: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});\nRun example \u00bb\nThe Result Object\nAs you can see from the result of the example above, the result can be converted into an array containing each \ndocument as an object.\nTo return e.g. the address of the third document, just refer to the third array \nobject's address property:\nExample\nReturn the address of the third document:\nconsole.log(result[2].address);\nWhich will produce this result:\nApple st 652\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").findOne({}, function(err, result) {\nif (err) throw err;\nconsole.log(result.name);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "C:\\Users\\\nYour Name\n>node demo_mongodb_findone.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "Company Inc.",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({}).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "C:\\Users\\\nYour Name\n>node demo_mongodb_find.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "[\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', \n  address: 'Apple st 652'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: \n  'Mountain 21'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', address: 'Valley 345'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a89 , name: 'Sandy', address: 'Ocean blvd 2'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8a , \n  name: 'Betty', address: 'Green Grass 1'},\n{ _id: \n  58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', \n  address: 'Sky st 331'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8c , name: 'Susan', address: 'One way \n  98'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8d , name: 'Vicky', address: 'Yellow Garden 2'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38'},\n{ \n  _id: 58fdbf5c0ef8a50b4cdd9a8f , name: 'William', \n  address: 'Central st 954'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a90 , name: 'Chuck', address: \n  'Main Road 989'},\n{ _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway \n  1633'}\n]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0, name: 1, address: \n  1 } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "C:\\Users\\\nYour Name\n>node demo_mongodb_find_fields.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "[\n{ name: 'John', address: 'Highway 71'},\n{ name: 'Peter', address: 'Lowstreet 4'},\n{ \n  name: 'Amy', \n  address: 'Apple st 652'},\n{ name: 'Hannah', address: \n  'Mountain 21'},\n{ name: 'Michael', address: 'Valley 345'},\n{ name: 'Sandy', address: 'Ocean blvd 2'},\n{ \n  name: 'Betty', address: 'Green Grass 1'},\n{ name: 'Richard', \n  address: 'Sky st 331'},\n{ name: 'Susan', address: 'One way \n  98'},\n{ name: 'Vicky', address: 'Yellow Garden 2'},\n{ name: 'Ben', address: 'Park Lane 38'},\n{ \n  name: 'William', \n  address: 'Central st 954'},\n{ name: 'Chuck', address: \n  'Main Road 989'},\n{\u00a0name: 'Viola', address: 'Sideway \n  1633'}\n]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { address: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0, name: 1 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { _id: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").find({},\n{ projection: { name: 1, address: 0 \n  } }\n).toArray(function(err, result) {\nif (err) throw err;\nconsole.log(result);\ndb.close();\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "console.log(result[2].address);",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "Apple st 652",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\n# TODO: Complete this line\nif (err) throw err;\nconsole.log(result.name);\ndb.close();\n});\n});",
      "solution": "var MongoClient = require('mongodb').MongoClient;\nvar url = \"mongodb://localhost:27017/\";\nMongoClient.connect(url, function(err, db) {\nif (err) throw err;\nvar dbo = db.db(\"mydb\");\ndbo.collection(\"customers\").findOne({}, function(err, result) {\nif (err) throw err;\nconsole.log(result.name);\ndb.close();\n});\n});"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "C:\\Users\\\n# TODO: Complete this line\n>node demo_mongodb_findone.js",
      "solution": "C:\\Users\\\nYour Name\n>node demo_mongodb_findone.js"
    }
  ],
  "related_topics": [
    {
      "id": "7c4b4c45-e3bf-4927-b008-17dbc413ac68",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "da6a2cf2-417a-4227-aa57-7883d2c75ca0",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4bd6e748-ec90-4497-a56a-54df57cfb4c6",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Just like the\nSELECT\nstatement?",
      "options": [
        "used to find data in a \n  table in a MySQL database",
        "a query object",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Just like the\nSELECT\nstatement is 'used to find data in a \n  table in a MySQL database'."
    },
    {
      "question": "What is method?",
      "options": [
        "used to find data in a \n  table in a MySQL database",
        "a query object",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of method is 'a query object'."
    }
  ],
  "summary": "This tutorial covers Node.jsMongoDBFind concepts and techniques. You'll learn how to use Node.jsMongoDBFind effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsMongoDBFind and how to apply it in your projects."
}