{
  "id": "28d6a3d9-2fe3-4860-8ced-4d884ee4a873",
  "title": "Node.js andRaspberry Pi",
  "slug": "nodejs-andraspberry-pi",
  "metadata": {
    "description": "Learn about Node.js andRaspberry Pi with clear explanations and practical examples.",
    "keywords": [
      "raspberry",
      "node",
      "card",
      "computer",
      "memory",
      "need",
      "connect",
      "tutorial",
      "password",
      "sudo"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 6,
    "category": "LearnNode.js",
    "subcategory": "RasPi Get Started"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js and\nRaspberry Pi",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Raspberry Pi is a small, multi-use computer.\nWith Node.js you can do amazing things with your Raspberry Pi.\nWhat is the Raspberry Pi?\nThe Raspberry Pi is a small, affordable, and amazingly capable, credit card \nsize computer.\nIt is developed by the Raspberry Pi Foundation, and it might be the most \nversatile tech ever created.\nCreator Eben Upton's goal was to create a low-cost device that would improve \nprogramming skills and hardware understanding.\nDue to the small size and price of the device, it has become the center of a \nwide range of projects by tinkerers, makers, and electronics enthusiasts.\nRaspberry Pi and Node.js\nThe Raspberry Pi has a row of GPIO (General Purpose input/output) pins, and \nthese can be used to interact in amazing ways with the real world. This tutorial \nwill focus on how to use these with Node.js.\nWhat Do I Need?\nFor this tutorial you need a Raspberry Pi. In our examples we use a Raspberry Pi 3, \nbut this tutorial should work for most versions.\nHardware needed:\nRaspberry Pi computer\nMicroSD memory card (We recommend a class 10 with 16 GB or higher)\nMicroSD to SD memory card adapter (usually included with the MicroSD card)\nMicro USB power supply to power the Raspberry Pi (2.5A or greater \n  recommended)\nWiFi/Ethernet Cable connection for the Raspberry Pi (Not needed for \n  Raspberry Pi 3 as it has built in WiFi)\nA working computer with internet and SD memory card reader (used to get the OS \n  (Operating System) for the Raspberry Pi onto the memory card). In our tutorial \n  we use a Windows computer for this, but you can use a Mac or Linux computer if \n  you prefer\nHDMI monitor, USB keyboard (we need these only temporarily for the first \n  boot of the Raspberry Pi)\nFor later chapters in this tutorial we will use special sensors or devices \nthat we connect to the Raspberry Pi. We will specify these as special \nrequirements in the relevant chapters.\nIf you already have a Raspberry Pi set up with Raspbian, internet and enabled \nSSH, you can skip to the step \"Install Node.js on Raspberry Pi\".\nWrite Raspbian OS Image to MicroSD Card\nBefore we can start using our Raspberry Pi for anything, we need to get a OS \ninstalled.\nRaspbian is a free operating system based on Debian Linux, and it is \noptimized Raspberry Pi.\nDownload the latest Raspbian image from\n\nto your computer.\nWe use the \"LITE\" version in our tutorial, since we are setting the Raspberry \nPi up as a headless server (we will connect to it through SSH, without having a \nkeyboard/display connected to it). You can use whichever version you want, but \nthis tutorial is written with the \"LITE\" version as its focus.\nInsert the MicroSD memory card in your computer (via the SD adapter if \nneeded). \nOpen File Explorer to verify that it is operational.\nEtcher is a program for flashing images to memory cards. Download and \ninstall Etcher from:\n\nLaunch Etcher:\nClick \"Select image\" button and find the Raspbian zip file that \nyou downloaded.\nClick the \"Select drive\" button and specify the memory card as the target location.\nClick the \"Flash!\" button to write the image to the memory card.\nAfter Etcher is finished writing the image to the memory card, remove it from your computer.\nSet up Your Raspberry Pi\nTo get the Raspberry Pi ready to boot we need to:\nInsert the MicroSD memory card into the Raspberry Pi\nConnect the USB keyboard\nConnect the HDMI cable\nConnect the USB Wi-Fi adapter (or Ethernet cable). Skip this step if you \n  are using a Raspberry Pi 3\nConnect the micro USB power supply\nThe Raspberry Pi should now be booting up\nWhen the Raspberry Pi is finished booting up, \npi\nand password:\nraspberry\nSet Up Network on the Raspberry Pi\nIf you will use a Ethernet cable to connect your Raspberry Pi to the \ninternet, you can skip this step.\nFor this section we will assume you have a Raspberry Pi 3, with built in \nWiFi.\nStart by scanning for wireless networks:\npi@raspberrypi:~ $ \n  sudo iwlist wlan0 scan\nThis will list all of the available WiFi networks. (It also confirms that \nyour WiFi is working)\nNow we need to open the wpa-supplicant file, to add the network you want to \nconnect to:\npi@raspberrypi:~ $ sudo \n  nano /etc/wpa_supplicant/wpa_supplicant.conf\nThis will open the file in the Nano editor. Add the following to the bottom \nof the file (change\nwifiName\nand\nwifiPassword\nwith the actual network name and \npassword):\nnetwork={\nssid=\"wifiName\"\npsk=\"wifiPassword\"\n}\nPress \"\nCtrl+x\n\" to save the code. Confirm with \"\ny\n\", and confirm the name with \"\nEnter\n\".\nAnd reboot the Raspberry Pi:\npi@raspberrypi:~ $ sudo reboot\nAfter reboot, \npi@raspberrypi:~ $ ifconfig wlan0\nIf the WiFi is working propery, the information displayed should include an \nIP address, similar to this:\ninet addr:192.168.1.50\nWrite down that IP address, as we will use it to connect to the Raspberry Pi \nvia SSH.\nEnable SSH, Change Hostname and Password\nNow your Raspberry Pi is connected to the internet, it is time to enable SSH.\nSSH allows you up use the Raspberry Pi without having a monitor and keyboard \nconnected to it.\n(You will need a SSH client for this on your non-Raspberry Pi computer. We use\nPuTTY\nfor windows)\nOpen the Raspberry Pi Software Configuration Tool:\npi@raspberrypi:~ $ sudo raspi-config\nYou should see a menu like this:\nSelect option\n5 Interfacing Options\n:\nSelect option\nP2 SSH\n, to activate SSH:\nConfirm with\nYES\n, to activate SSH:\nSSH is now enabled, and you should be in the main menu again.\nSelect\n1 Change User Password\n, and follow the instructions to change the password. Choose a secure password, but something you will remember:\nAfter you have finished changing the password, you should be back in the main menu.\nSelect\n2 Hostname\n, and follow the instructions to change the hostname:\nAfter you have finished changing the hostname, you should be back in the main menu.\nNow we will close the menu and save the changes:\nWhen selecting\nFinish\n, you will get the option to reboot. Select\nYes\nto reboot the Raspberry Pi.\nYou can now unplug the monitor and keyboard from the Raspberry Pi, and we can \nOpen PuTTY, type in the IP address for your Raspberry Pi, and click\nOpen\n:\n\npi\nand the new password you specified.\nYou should now see a command line like this: (we used w3demopi as our hostname)\npi@w3demopi:~ $\nYou are now able to run your Raspberry Pi in \"Headless-mode\", meaning you do not need a monitor or keyboard. And if you have a WiFi connection, you do not need a ethernet cable either, just the power cable!\nInstall Node.js on Raspberry Pi\nWith the Raspberry Pi properly set up, login in via SSH, and update your Raspberry Pi system packages to their latest versions.\nUpdate your system package list:\npi@w3demopi:~ $ sudo apt-get update\nUpgrade all your installed packages to their latest version:\npi@w3demopi:~ $ sudo apt-get dist-upgrade\nDoing this regularly will keep your Raspberry Pi installation up to date.\nTo download and install newest version of Node.js, use the following command:\npi@w3demopi:~ $ curl -sL  | sudo -E bash -\nNow install it by running:\npi@w3demopi:~ $ sudo apt-get install -y nodejs\nCheck that the installation was successful, and the version number of \nNode.js with:\npi@w3demopi:~ $ node -v\nGet Started with Raspberry Pi and Node.js\nNow you have a Raspberry Pi with Node.js installed!\nIf you want to learn more about Node.js, follow our tutorial:\n\nIn the \nNode.js.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1045e743-bbf6-41a7-b1a1-3f4abf846c06",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4dc44229-8015-4766-a2ab-66af4fba8d87",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b74c90d2-5bc3-4976-9800-6dff9e31bed2",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is js and\nRaspberry Pi\n\nRaspberry Pi?",
      "options": [
        "None of the above.",
        "the Raspberry Pi",
        "None of the above.",
        "a small"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of js and\nRaspberry Pi\n\nRaspberry Pi is 'a small'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "the Raspberry Pi",
        "a small",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of What is 'the Raspberry Pi'."
    }
  ],
  "summary": "This tutorial covers Node.js andRaspberry Pi concepts and techniques. You'll learn how to use Node.js andRaspberry Pi effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.js andRaspberry Pi and how to apply it in your projects."
}