{
  "id": "72c9af5a-62e3-44f2-a5f2-27515ac6bcff",
  "title": "Node.jsFile System Module",
  "slug": "nodejsfile-system-module",
  "metadata": {
    "description": "Learn about Node.jsFile System Module with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "file",
      "example",
      "files",
      "method",
      "require",
      "content",
      "system",
      "function",
      "specified",
      "node"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNode.js",
    "subcategory": "Node.js File System"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nFile System Module",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Node.js as a File Server\nThe Node.js file system module allows you to work with the file system on your \ncomputer.\nTo include the File System module, use the\nrequire()\nmethod:\nvar fs = require('fs');\nCommon use for the File System module:\nRead files\nCreate files\nUpdate files\nDelete files\nRename files\nRead Files\nThe\nfs.readFile()\nmethod is used to read files on your computer.\nAssume we have the following HTML file (located in the same folder as \nNode.js):\ndemofile1.html\n<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>\nCreate a Node.js file that reads the HTML file, \nand return the content:\nExample\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function \n  (req, res) {\nfs.readFile('demofile1.html', function(err, data) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(data);\nreturn res.end();\n});\n}).listen(8080);\nRun example \u00bb\nSave the code above in a file called \"demo_readfile.js\", and initiate the \nfile:\nInitiate demo_readfile.js:\nC:\\Users\\\nYour Name\n>node demo_readfile.js\nIf you have followed the same steps on your computer, you will see the same \nresult as the example:\nhttp://localhost:8080\nCreate Files\nThe File System module has methods for creating new files:\nfs.appendFile()\nfs.open()\nfs.writeFile()\nThe\nfs.appendFile()\nmethod appends specified content to a file. If the \nfile does not exist, the file will be created:\nExample\nCreate a new file using the appendFile() method:\nvar fs = require('fs');\nfs.appendFile('mynewfile1.txt', 'Hello \n  content!', function (err) {\nif (err) throw err;\nconsole.log('Saved!');\n});\nRun example \u00bb\nThe\nfs.open()\nmethod takes a \"flag\" as the second argument, if the \nflag is \"w\" for \"writing\", the specified file is opened for writing. If the file \ndoes not exist, an empty file is created:\nExample\nCreate a new, empty file using the open() method:\nvar fs = require('fs');\nfs.open('mynewfile2.txt', 'w', function (err, \n  file) {\nif (err) throw err;\nconsole.log('Saved!');\n});\nRun example \u00bb\nThe\nfs.writeFile()\nmethod replaces the specified file and content if it exists. \nIf the file does not exist, a new file, containing the specified content, will \nbe created:\nExample\nCreate a new file using the writeFile() method:\nvar fs = require('fs');\nfs.writeFile('mynewfile3.txt', 'Hello \n  content!', function (err) {\nif (err) throw err;\nconsole.log('Saved!');\n});\nRun example \u00bb\nUpdate Files\nThe File System module has methods for updating files:\nfs.appendFile()\nfs.writeFile()\nThe\nfs.appendFile()\nmethod appends the specified content at the end of the specified file:\nExample\nAppend \"This is my text.\" to the end of the file \"mynewfile1.txt\":\nvar fs = require('fs');\nfs.appendFile('mynewfile1.txt', ' This is my \n  text.', function (err) {\nif (err) throw err;\nconsole.log('Updated!');\n});\nRun example \u00bb\nThe\nfs.writeFile()\nmethod replaces the specified file and content:\nExample\nReplace the content of the file \"mynewfile3.txt\":\nvar fs = require('fs');\nfs.writeFile('mynewfile3.txt', 'This is my text', function (err) {\nif (err) throw err;\nconsole.log('Replaced!');\n});\nRun example \u00bb\nDelete Files\nTo delete a file with the File System module,\u00a0 use the\nfs.unlink()\nmethod.\nThe\nfs.unlink()\nmethod deletes the specified file:\nExample\nDelete \"mynewfile2.txt\":\nvar fs = require('fs');\nfs.unlink('mynewfile2.txt', function (err) {\nif (err) throw err;\nconsole.log('File deleted!');\n});\nRun example \u00bb\nRename Files\nTo rename a file with the File System module,\u00a0 use the\nfs.rename()\nmethod.\nThe\nfs.rename()\nmethod renames the specified file:\nExample\nRename \"mynewfile1.txt\" to \"myrenamedfile.txt\":\nvar fs = require('fs');\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {\nif (err) throw err;\nconsole.log('File Renamed!');\n});\nRun example \u00bb\nUpload Files\nYou can also use Node.js to upload files to your computer.\nRead how in our\nNode.js Upload Files\nchapter.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "var fs = require('fs');",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "var http = require('http');\nvar fs = require('fs');\nhttp.createServer(function \n  (req, res) {\nfs.readFile('demofile1.html', function(err, data) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(data);\nreturn res.end();\n});\n}).listen(8080);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "C:\\Users\\\nYour Name\n>node demo_readfile.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "var fs = require('fs');\nfs.appendFile('mynewfile1.txt', 'Hello \n  content!', function (err) {\nif (err) throw err;\nconsole.log('Saved!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "var fs = require('fs');\nfs.open('mynewfile2.txt', 'w', function (err, \n  file) {\nif (err) throw err;\nconsole.log('Saved!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "var fs = require('fs');\nfs.writeFile('mynewfile3.txt', 'Hello \n  content!', function (err) {\nif (err) throw err;\nconsole.log('Saved!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "var fs = require('fs');\nfs.appendFile('mynewfile1.txt', ' This is my \n  text.', function (err) {\nif (err) throw err;\nconsole.log('Updated!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "var fs = require('fs');\nfs.writeFile('mynewfile3.txt', 'This is my text', function (err) {\nif (err) throw err;\nconsole.log('Replaced!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var fs = require('fs');\nfs.unlink('mynewfile2.txt', function (err) {\nif (err) throw err;\nconsole.log('File deleted!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "var fs = require('fs');\nfs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {\nif (err) throw err;\nconsole.log('File Renamed!');\n});",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "var fs = require('fs');"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<html>\n# TODO: Complete this line\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>",
      "solution": "<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "028b3692-f74b-4703-9dd3-668b5eb43943",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d199ed7e-b1b3-4c67-bb28-08e58cb5a3fc",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "311c447f-effe-4222-9fce-a39e67427eee",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is method?",
      "options": [
        "None of the above.",
        "\"w\" for \"writing\"",
        "None of the above.",
        "used to read files on your computer"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'used to read files on your computer'."
    },
    {
      "question": "What is if the \nflag?",
      "options": [
        "\"w\" for \"writing\"",
        "used to read files on your computer",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of if the \nflag is '\"w\" for \"writing\"'."
    }
  ],
  "summary": "This tutorial covers Node.jsFile System Module concepts and techniques. You'll learn how to use Node.jsFile System Module effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsFile System Module and how to apply it in your projects."
}