{
  "id": "4e2f0c65-5fd4-41cc-8bf0-9d106dc0f1d2",
  "title": "Node.jsMySQLJoin",
  "slug": "nodejsmysqljoin",
  "metadata": {
    "description": "Learn about Node.jsMySQLJoin with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "favorite",
      "user",
      "users",
      "name",
      "products",
      "join",
      "result",
      "chocolate",
      "heaven",
      "example"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNode.js",
    "subcategory": "MySQL Join"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nMySQL\nJoin",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Join Two or More Tables\nYou can combine rows from two or more tables, based on a related column \nbetween them, by using a JOIN statement.\nConsider you have a \"users\" table and a \"products\" table:\nusers\n[\n{ id: 1, name: 'John', \n  favorite_product: 154},\n{ id: \n  2, name: 'Peter', favorite_product: 154},\n{ id: 3, name: 'Amy', \n  favorite_product: 155},\n{ id: 4, name: 'Hannah', favorite_product:},\n{ id: 5, name: 'Michael', \n  favorite_product:}\n]\nproducts\n[\n{ id: 154, name: \n  'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ \n  id: 156, name: 'Vanilla Dreams' }\n]\nThese two tables can be combined by using users'\nfavorite_product\nfield and products'\nid\nfield.\nExample\nSelect records with a match in both tables:\nvar mysql = require('mysql');\nvar con = mysql.createConnection({\nhost: \"localhost\",\nuser: \"yourusername\",\npassword: \"yourpassword\",\ndatabase: \"mydb\"\n});\ncon.connect(function(err) {\nif (err) throw err;\nvar \n  sql = \"SELECT users.name AS user, products.name AS favorite FROM users\nJOIN products ON \n  users.favorite_product = products.id\n\";\ncon.query(sql, function (err, result) {\nif (err) throw err;\nconsole.log(result);\n});\n});\nRun example \u00bb\nNote:\nYou can use INNER JOIN instead of JOIN. They will \n  both give you the same result.\nSave the code above in a file called \"demo_db_join.js\" and run the file:\nRun \"demo_db_join.js\"\nC:\\Users\\\nYour Name\n>node demo_db_join.js\nWhich will give you this result:\n[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' }\n]\nAs you can see from the result above, only the records with a match in both \ntables are returned.\nLeft Join\nIf you want to return\nall\nusers, no matter if they have a favorite product or \nnot, use the LEFT JOIN statement:\nExample\nSelect all users and their favorite product:\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nLEFT\n  JOIN\nproducts ON users.favorite_product = products.id\nRun example \u00bb\nWhich will give you this result:\n[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' },\n{ \n  user: 'Hannah', favorite: null },\n{ user: 'Michael', favorite: null }\n]\nRight Join\nIf you want to return all products, and the users who have them as their \nfavorite, even if no user have them as their favorite, use the RIGHT JOIN \nstatement:\nExample\nSelect all products and the user who have them as their favorite:\nSELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nRIGHT\n  JOIN\nproducts ON users.favorite_product = products.id\nRun example \u00bb\nWhich will give you this result:\n[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' },\n{ \n  user: null, favorite: 'Vanilla Dreams' }\n]\nNote:\nHannah and Michael, who have no favorite product, are not included in the result.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "users",
      "content": "",
      "order": 3,
      "code": "[\n{ id: 1, name: 'John', \n  favorite_product: 154},\n{ id: \n  2, name: 'Peter', favorite_product: 154},\n{ id: 3, name: 'Amy', \n  favorite_product: 155},\n{ id: 4, name: 'Hannah', favorite_product:},\n{ id: 5, name: 'Michael', \n  favorite_product:}\n]",
      "language": "unknown",
      "explanation": "Example of users"
    },
    {
      "type": "code_example",
      "title": "products",
      "content": "",
      "order": 4,
      "code": "[\n{ id: 154, name: \n  'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ \n  id: 156, name: 'Vanilla Dreams' }\n]",
      "language": "unknown",
      "explanation": "Example of products"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "var mysql = require('mysql');\nvar con = mysql.createConnection({\nhost: \"localhost\",\nuser: \"yourusername\",\npassword: \"yourpassword\",\ndatabase: \"mydb\"\n});\ncon.connect(function(err) {\nif (err) throw err;\nvar \n  sql = \"SELECT users.name AS user, products.name AS favorite FROM users\nJOIN products ON \n  users.favorite_product = products.id\n\";\ncon.query(sql, function (err, result) {\nif (err) throw err;\nconsole.log(result);\n});\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "C:\\Users\\\nYour Name\n>node demo_db_join.js",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' }\n]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "SELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nLEFT\n  JOIN\nproducts ON users.favorite_product = products.id",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' },\n{ \n  user: 'Hannah', favorite: null },\n{ user: 'Michael', favorite: null }\n]",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "SELECT users.name AS user,\nproducts.name AS favorite\nFROM users\nRIGHT\n  JOIN\nproducts ON users.favorite_product = products.id",
      "language": "unknown",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "[\n{ user: 'John', favorite: \n  'Chocolate Heaven' },\n{ user: 'Peter', favorite: 'Chocolate Heaven' },\n{ \n  user: 'Amy', favorite: 'Tasty Lemons' },\n{ \n  user: null, favorite: 'Vanilla Dreams' }\n]",
      "language": "unknown",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "[\n{ id: 1, name: 'John', \n  favorite_product: 154},\n{ id: \n# TODO: Complete this line\n{ id: 3, name: 'Amy', \n  favorite_product: 155},\n{ id: 4, name: 'Hannah', favorite_product:},\n{ id: 5, name: 'Michael', \n  favorite_product:}\n]",
      "solution": "[\n{ id: 1, name: 'John', \n  favorite_product: 154},\n{ id: \n  2, name: 'Peter', favorite_product: 154},\n{ id: 3, name: 'Amy', \n  favorite_product: 155},\n{ id: 4, name: 'Hannah', favorite_product:},\n{ id: 5, name: 'Michael', \n  favorite_product:}\n]"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "[\n{ id: 154, name: \n  'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ \n  id: 156, name: 'Vanilla Dreams' }\n# TODO: Complete this line",
      "solution": "[\n{ id: 154, name: \n  'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ \n  id: 156, name: 'Vanilla Dreams' }\n]"
    }
  ],
  "related_topics": [
    {
      "id": "de974f2a-b986-4640-b352-8ccdf2914b3e",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a8af0872-7c17-40b6-868d-4d6afe87c5e1",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0a7edcb2-e7d1-4314-a463-f1343e2dc0db",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is only the records with a match in both \ntables?",
      "options": [
        "None of the above.",
        "Not a only the records with a match in both \ntables.",
        "returned",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of only the records with a match in both \ntables is 'returned'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Node.jsMySQLJoin concepts and techniques. You'll learn how to use Node.jsMySQLJoin effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsMySQLJoin and how to apply it in your projects."
}