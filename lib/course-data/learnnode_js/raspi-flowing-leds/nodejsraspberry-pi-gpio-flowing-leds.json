{
  "id": "90cf48a5-7553-4b01-9763-e8b99b2a58aa",
  "title": "Node.jsRaspberry Pi GPIO - Flowing LEDs",
  "slug": "nodejsraspberry-pi-gpio-flowing-leds",
  "metadata": {
    "description": "Learn about Node.jsRaspberry Pi GPIO - Flowing LEDs with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "column",
      "gpio",
      "leds",
      "point",
      "raspberry",
      "physical",
      "right",
      "rows",
      "cathode",
      "anode"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnNode.js",
    "subcategory": "RasPi Flowing LEDs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nRaspberry Pi GPIO - Flowing LEDs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Using Array With Output to Create Flowing LEDs\nIn this chapter we will use several GPIO pins to create a \"flowing\" effect by \nturning them on and off in sequence.\nWhat do we need?\nFor this you need:\nA Raspberry Pi with Raspian, internet, SSH, with Node.js installed\nThe\nonoff module\nfor Node.js\n1 x\nBreadboard\n8 x\n220 Ohm resistor\n8 x\nThrough Hole LED\n9 x\nFemale to male jumper wires\nNote:\nThe resistor you need can be different from what we use depending on the type of LEDs you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.\nClick the links in the list above for descriptions of the different \ncomponents.\nBuilding the Circuit\nNow it is time to build the circuit on our Breadboard.\nIf you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.\nShut down the Raspberry Pi properly with the command:\npi@w3demopi:~ $ sudo shutdown -h now\nAfter the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).\nJust pulling the plug without shutting down properly may cause corruption of the memory card.\nLook at the above illustration of the circuit.\nOn the Raspberry Pi, connect the female leg of a jumper wire to a\nGND\npin. In our example we used Physical Pin 6 (\nGND\n, \n    row 3, right column)\nOn the Breadboard, connect the male leg of the jumper wire connected to \n    the\nGND\npower, to the\nGround Bus\non the right side. That entire column \n    of your breadboard is connected, so it doesn't matter which row. In our example we attached it to row 1\nFor each LED: Connect the LED so that it connects to 2 Tie-Point rows. In our example \n    we connected:\nLED1 to rows 5 (cathode) & 6 (anode) column J\nLED2 to rows 8 (cathode) & 9 (anode) column J\nLED3 to rows 11 (cathode) & 12 (anode) column J\nLED4 to rows 14 (cathode) & 15 (anode) column J\nLED5 to rows 17 (cathode) & 18 (anode) column J\nLED6 to rows 20 (cathode) & 21 (anode) column J\nLED7 to rows 23 (cathode) & 24 (anode) column J\nLED8 to rows 26 (cathode) & 27 (anode) column J\nFor each LED: Connect one of the legs of a 220 ohm resistor from the the\nGround Bus\ncolumn on the right side, and the other leg to the right side Tie-Point row \n    where it connects to the cathode leg of the LED. In our example we \n    connected:\nLED1 to row 5 column I\nLED2 to row 8 column I\nLED3 to row 11 column I\nLED4 to row 14 column I\nLED5 to row 17 column I\nLED6 to row 20 column I\nLED7 to row 23 column I\nLED8 to row 26 column I\nFor each LED: Connect the female leg of a jumper wire to a\nGPIO\npin on the Raspberry Pi, and the male leg \n    of the jumper wire to the right side Tie-Point row \n    where it connects to the anode leg of the LED. In our example we connected:\nLED1 from Physical Pin \n    7 (\nGPIO 4\n, row 4, left \n    column) to Tie-point row 6 column F\nLED2 from Physical Pin \n      11 (\nGPIO 17\n, row 6, left \n    column) to Tie-point row 9 column F\nLED3 from Physical Pin \n      13 (\nGPIO 27\n, row 7, left \n    column) to Tie-point row 12 column F\nLED4 from Physical Pin \n      15 (\nGPIO 22\n, row 8, left \n    column) to Tie-point row 15 column F\nLED5 from Physical Pin \n      12 (\nGPIO 18\n, row 6, right \n    column) to Tie-point row 18 column F\nLED6 from Physical Pin \n      16 (\nGPIO 23\n, row 8, right column) to \n      Tie-point row 21 column F\nLED7 from Physical Pin \n      18 (\nGPIO 24\n, row 9, right column) to \n      Tie-point row 24 column F\nLED8 from Physical Pin \n      22 (\nGPIO 25\n, row 11, right column) to \n      Tie-point row 27 column F\nYour circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.\nNow it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.\nRaspberry Pi and Node.js Flowing LEDs Script\nGo to the \"nodetest\" directory, and create a new file called \"\nflowingleds.js\n\":\npi@w3demopi:~ $ nano \n  flowingleds.js\nThe file is now open and can be edited with the built in Nano Editor.\nWrite, or paste the following:\nflowingleds.js\nvar Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO\nvar LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pins\nLED17 = new Gpio(17, 'out'),\nLED27 = new Gpio(27, \n  'out'),\nLED22 = new Gpio(22, 'out'),\nLED18 = new Gpio(18, \n  'out'),\nLED23 = new Gpio(23, 'out'),\nLED24 = new Gpio(24, \n  'out'),\nLED25 = new Gpio(25, 'out');\n//Put all the LED \n  variables in an array\nvar leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];\nvar indexCount = 0; //a \n  counter\ndir = \"up\"; //variable for flowing direction\nvar \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100ms\nfunction flowingLeds() { //function for flowing Leds\nleds.forEach(function(currentValue) { //for each item in array\ncurrentValue.writeSync(0); //turn off LED\n});\nif (indexCount \n  == 0) dir = \"up\"; //set flow direction to \"up\" if the count reaches zero\nif (indexCount >= leds.length) dir = \"down\"; //set flow direction to \"down\" if \n  the count reaches 7\nif (dir == \"down\") indexCount--; //count \n  downwards if direction is down\nleds[indexCount].writeSync(1); \n  //turn on LED that where array index matches count\nif (dir == \n  \"up\") indexCount++ //count upwards if direction is up\n};\nfunction unexportOnClose() { \n  //function to run when exiting program\nclearInterval(flowInterval); \n  //stop flow interwal\nleds.forEach(function(currentValue) { //for \n  each LED\ncurrentValue.writeSync(0); //turn off LED\ncurrentValue.unexport(); //unexport GPIO\n});\n};\nprocess.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc\nPress \"\nCtrl+x\n\" to save the code. Confirm with \"\ny\n\", and confirm the name with \"\nEnter\n\".\nRun the code:\npi@w3demopi:~ $ node flowingleds.js\nNow the LEDs should turn on and off in sequence, creating a flowing effect.\nEnd the program with\nCtrl+c\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "flowingleds.js",
      "content": "",
      "order": 3,
      "code": "var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO\nvar LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pins\nLED17 = new Gpio(17, 'out'),\nLED27 = new Gpio(27, \n  'out'),\nLED22 = new Gpio(22, 'out'),\nLED18 = new Gpio(18, \n  'out'),\nLED23 = new Gpio(23, 'out'),\nLED24 = new Gpio(24, \n  'out'),\nLED25 = new Gpio(25, 'out');\n//Put all the LED \n  variables in an array\nvar leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];\nvar indexCount = 0; //a \n  counter\ndir = \"up\"; //variable for flowing direction\nvar \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100ms\nfunction flowingLeds() { //function for flowing Leds\nleds.forEach(function(currentValue) { //for each item in array\ncurrentValue.writeSync(0); //turn off LED\n});\nif (indexCount \n  == 0) dir = \"up\"; //set flow direction to \"up\" if the count reaches zero\nif (indexCount >= leds.length) dir = \"down\"; //set flow direction to \"down\" if \n  the count reaches 7\nif (dir == \"down\") indexCount--; //count \n  downwards if direction is down\nleds[indexCount].writeSync(1); \n  //turn on LED that where array index matches count\nif (dir == \n  \"up\") indexCount++ //count upwards if direction is up\n};\nfunction unexportOnClose() { \n  //function to run when exiting program\nclearInterval(flowInterval); \n  //stop flow interwal\nleds.forEach(function(currentValue) { //for \n  each LED\ncurrentValue.writeSync(0); //turn off LED\ncurrentValue.unexport(); //unexport GPIO\n});\n};\nprocess.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc",
      "language": "javascript",
      "explanation": "Example of flowingleds.js"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO\nvar LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pins\nLED17 = new Gpio(17, 'out'),\nLED27 = new Gpio(27, \n  'out'),\nLED22 = new Gpio(22, 'out'),\nLED18 = new Gpio(18, \n  'out'),\nLED23 = new Gpio(23, 'out'),\n# TODO: Complete this line\n  'out'),\nLED25 = new Gpio(25, 'out');\n//Put all the LED \n  variables in an array\nvar leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];\nvar indexCount = 0; //a \n  counter\ndir = \"up\"; //variable for flowing direction\nvar \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100ms\nfunction flowingLeds() { //function for flowing Leds\nleds.forEach(function(currentValue) { //for each item in array\ncurrentValue.writeSync(0); //turn off LED\n});\nif (indexCount \n  == 0) dir = \"up\"; //set flow direction to \"up\" if the count reaches zero\nif (indexCount >= leds.length) dir = \"down\"; //set flow direction to \"down\" if \n  the count reaches 7\nif (dir == \"down\") indexCount--; //count \n  downwards if direction is down\nleds[indexCount].writeSync(1); \n  //turn on LED that where array index matches count\nif (dir == \n  \"up\") indexCount++ //count upwards if direction is up\n};\nfunction unexportOnClose() { \n  //function to run when exiting program\nclearInterval(flowInterval); \n  //stop flow interwal\nleds.forEach(function(currentValue) { //for \n  each LED\ncurrentValue.writeSync(0); //turn off LED\ncurrentValue.unexport(); //unexport GPIO\n});\n};\nprocess.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc",
      "solution": "var Gpio = require('onoff').Gpio; //include onoff to interact with the GPIO\nvar LED04 = new Gpio(4, 'out'), //use declare variables for all the GPIO \n  output pins\nLED17 = new Gpio(17, 'out'),\nLED27 = new Gpio(27, \n  'out'),\nLED22 = new Gpio(22, 'out'),\nLED18 = new Gpio(18, \n  'out'),\nLED23 = new Gpio(23, 'out'),\nLED24 = new Gpio(24, \n  'out'),\nLED25 = new Gpio(25, 'out');\n//Put all the LED \n  variables in an array\nvar leds = [LED04, \n  LED17, LED27, LED22, LED18, LED23, LED24, LED25];\nvar indexCount = 0; //a \n  counter\ndir = \"up\"; //variable for flowing direction\nvar \n  flowInterval = setInterval(flowingLeds, 100); //run the flowingLeds function \n  every 100ms\nfunction flowingLeds() { //function for flowing Leds\nleds.forEach(function(currentValue) { //for each item in array\ncurrentValue.writeSync(0); //turn off LED\n});\nif (indexCount \n  == 0) dir = \"up\"; //set flow direction to \"up\" if the count reaches zero\nif (indexCount >= leds.length) dir = \"down\"; //set flow direction to \"down\" if \n  the count reaches 7\nif (dir == \"down\") indexCount--; //count \n  downwards if direction is down\nleds[indexCount].writeSync(1); \n  //turn on LED that where array index matches count\nif (dir == \n  \"up\") indexCount++ //count upwards if direction is up\n};\nfunction unexportOnClose() { \n  //function to run when exiting program\nclearInterval(flowInterval); \n  //stop flow interwal\nleds.forEach(function(currentValue) { //for \n  each LED\ncurrentValue.writeSync(0); //turn off LED\ncurrentValue.unexport(); //unexport GPIO\n});\n};\nprocess.on('SIGINT', unexportOnClose); //function to \n  run when user closes using ctrl+cc"
    },
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "8685f2da-7495-43de-bbee-6b999446e8dc",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ff4cdb67-abd8-4d71-9166-de6ef21d2b00",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "292cb08b-cbdd-4090-bf1f-ecda625cc130",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It?",
      "options": [
        "generally not critical what exact value you use",
        "time to build the circuit on our Breadboard",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of It is 'generally not critical what exact value you use'."
    },
    {
      "question": "What is Building the Circuit\nNow it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "time to build the circuit on our Breadboard",
        "generally not critical what exact value you use"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Building the Circuit\nNow it is 'time to build the circuit on our Breadboard'."
    }
  ],
  "summary": "This tutorial covers Node.jsRaspberry Pi GPIO - Flowing LEDs concepts and techniques. You'll learn how to use Node.jsRaspberry Pi GPIO - Flowing LEDs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsRaspberry Pi GPIO - Flowing LEDs and how to apply it in your projects."
}