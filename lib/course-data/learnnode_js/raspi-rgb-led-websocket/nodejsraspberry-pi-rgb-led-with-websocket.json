{
  "id": "e45809de-8d5d-4087-807e-495a4ca2e5f9",
  "title": "Node.jsRaspberry Pi RGB LED with WebSocket",
  "slug": "nodejsraspberry-pi-rgb-led-with-websocket",
  "metadata": {
    "description": "Learn about Node.jsRaspberry Pi RGB LED with WebSocket with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "gpio",
      "column",
      "green",
      "blue",
      "value",
      "connected",
      "connect",
      "color",
      "example",
      "common"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 16,
    "category": "LearnNode.js",
    "subcategory": "RasPi RGB LED WebSocket"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Node.js\nRaspberry Pi RGB LED with WebSocket",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Using Pulse-Width Modulation\nIn the \nuse GPIO to turn LEDs on and off.\nIn this we will use chapter we use a RGB LED, with PWM (Pulse-width \nmodulation) to display different colors based on user input via WebSocket.\nAn RGB LED is a LED with 3 different colors. It has a RED, GREEN and \nBLUE LED (RGB LED).\nAnd using PWM, we can set the individual strength of the 3 LEDs. This will allow us to \nmix them, to set a color.\nWhat do we need?\nIn this chapter we will create an example where \nwe control an RGB LED with a web page via WebSocket.\nFor this you need:\nA Raspberry Pi with Raspian, internet, SSH, with Node.js installed\nThe\npigpio module\nfor Node.js\nThe\nsocket.io module\nfor Node.js\n1 x\nBreadboard\n3 x\n220 \n  Ohm resistor\n1 x\nRGB LED\n(common anode or common cathode)\n4 x\nFemale to male jumper wires\nClick the links in the list above for descriptions of the different \ncomponents.\nNote:\nThe resistor you need can be different from what we use depending on the type of LED you use. Most small LEDs only need a small resistor, around 200-500 ohms. It is generally not critical what exact value you use, but the smaller the value of the resistor, the brighter the LED will\nshine.\nInstall the pigpio Module\nEarlier, we have used the \"onoff\" module, which works great for just turning \non and off. Now we want to set the set the strength of the LEDs, so we need a \nGPIO Module with a bit more functionality.\nWe will use the \"pigpio\" Node.js module, as this allows for PWM.\nWith PWM we \ncan set the strength of a LED from 0 to 255.\nThe \"pigpio\" Node.js module is based on the pigpio C library.\nIf you are using the \"Lite\" version of Raspbian, this is most likely not \nincluded and must be manually installed.\nUpdate your system package list:\npi@w3demopi:~ $ sudo apt-get update\nInstall the pigpio C library:\npi@w3demopi:~ $ sudo apt-get install pigpio\nNow we can install the \"pigpio\" Node.js module using npm:\npi@w3demopi:~ $ npm install pigpio\nNow the \"pigpio\" module should be installed and we can use it to \ninteract with the GPIO of the Raspberry Pi.\nNote:\nSince the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).\nBuilding the Circuit\nNow it is time to build the circuit on our Breadboard.\nIf you are new to electronics, we recommend you turn off the power for \nthe Raspberry Pi. And use an anti-static mat or a grounding strap to avoid \ndamaging it.\nShut down the Raspberry Pi properly with the command:\npi@w3demopi:~ $ sudo shutdown -h now\nAfter the LEDs stop blinking on the Raspberry Pi, then pull out the power \nplug from the Raspberry Pi (or turn of the power strip it is connected to).\nJust pulling the plug without shutting down properly may cause corruption of the memory card.\nIn building this Circuit it is important to know if you have a common \n  anode, or common cathode, RGB LED:\nYou can check with your provider, or test it yourself:\nConnect cables to GND and 3.3V pin. Connect GND to the longest leg of the \n  RGB LED and the 3.3 V to any other leg. If the it lights up, your RGB LED has \n  a common cathode. If not, it has a common anode.\nBuilding the Circuit - Common Cathode\nLook at the above illustration of the circuit.\nOn the Breadboard, connect the RGB LED to the right ground bus column, \n    and make sure that each leg connects to a different row. The longest leg is \n    the common cathode leg. In this example we have connected the LED to rows \n    1-4, with the common cathode leg connected to row 2 column I. The\nRED\nleg is \n    connected to row 1 column J, the\nGREEN\nleg is connected to row 3 column J, \n    and the\nBLUE\nleg is connected to row 4 column J\nOn the Raspberry Pi, connect the female leg of the first jumper wire to\nGround\n. You can use any\nGND\npin. In this example we used Physical Pin 9 (\nGND\n, \n    row 5, left column)\nOn the Breadboard, connect the male leg of the first jumper wire to \n    the same row of the right ground bus column that you connected the common \n    cathode to. In this example we connected it to row 2 column F\nOn the Raspberry Pi, connect the female leg of the second jumper cable \n    to a\nGPIO\npin. We will use this for the\nRED\nleg, In this example we used Physical Pin \n    7 (\nGPIO 4\n, row 4, left \n    column)\nOn the Breadboard, connect the male leg of the second jumper wire to the \n    left ground bus, same row as the\nRED\nleg of the LED is connected. In this example we connected it to row \n    1, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nRED\nleg of the LED. In this example we have attached \n    it to row 1, column E and F\nOn the Raspberry Pi, connect the female leg of the third jumper cable \n    to a\nGPIO\npin. We will use this for the\nGREEN\nleg, In this example we used Physical Pin \n    11 (\nGPIO 17\n, row 6, left \n    column)\nOn the Breadboard, connect the male leg of the third jumper wire to the \n    left ground bus, same row as the\nGREEN\nleg of the LED is connected. In this example we connected it to row \n    3, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nGREEN\nleg of the LED. In this example we have attached \n    it to row 3, column E and F\nOn the Raspberry Pi, connect the female leg of the forth jumper cable \n    to a\nGPIO\npin. We will use this for the\nBLUE\nleg, In this example we used Physical Pin \n    13 (\nGPIO 27\n, row 7, left \n    column)\nOn the Breadboard, connect the male leg of the forth jumper wire to the \n    left ground bus, same row as the\nBLUE\nleg of the LED is connected. In this example we connected it to row \n    4, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nBLUE\nleg of the LED. In this example we have attached \n    it to row 4, column E and F\nYour circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.\nNow it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.\nBuilding the Circuit - Common Anode\nLook at the above illustration of the circuit.\nOn the Breadboard, connect the RGB LED to the right ground bus column, \n    and make sure that each leg connects to a different row. The longest leg is \n    the common anode leg. In this example we have connected the LED to rows \n    1-4, with the common cathode leg connected to row 2 column I. The\nRED\nleg is \n    connected to row 1 column J, the\nGREEN\nleg is connected to row 3 column J, \n    and the\nBLUE\nleg is connected to row 4 column J\nOn the Raspberry Pi, connect the female leg of the first jumper cable \n    to a\nGPIO\npin. We will use this for the\nRED\nleg, In this example we used Physical Pin \n    7 (\nGPIO 4\n, row 4, left \n    column)\nOn the Breadboard, connect the male leg of the first jumper wire to the \n    left ground bus, same row as the\nRED\nleg of the LED is connected. In this example we connected it to row \n    1, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nRED\nleg of the LED. In this example we have attached \n    it to row 1, column E and F\nOn the Raspberry Pi, connect the female leg of the second jumper cable \n    to a\nGPIO\npin. We will use this for the\nGREEN\nleg, In this example we used Physical Pin \n    11 (\nGPIO 17\n, row 6, left \n    column)\nOn the Breadboard, connect the male leg of the second jumper wire to the \n    left ground bus, same row as the\nGREEN\nleg of the LED is connected. In this example we connected it to row \n    3, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nGREEN\nleg of the LED. In this example we have attached \n    it to row 3, column E and F\nOn the Raspberry Pi, connect the female leg of the third jumper cable \n    to a\nGPIO\npin. We will use this for the\nBLUE\nleg, In this example we used Physical Pin \n    13 (\nGPIO 27\n, row 7, left \n    column)\nOn the Breadboard, connect the male leg of the third jumper wire to the \n    left ground bus, same row as the\nBLUE\nleg of the LED is connected. In this example we connected it to row \n    4, \n    column A\nOn the Breadboard, connect a resistor between the left and right ground \n    bus columns for the row with the\nBLUE\nleg of the LED. In this example we have attached \n    it to row 4, column E and F\nOn the Raspberry Pi, connect the female leg of the forth jumper wire to\n3.3V\n. In this example we used Physical Pin 1 (\n3.3V\n, \n    row 1, left column)\nOn the Breadboard, connect the male leg of the forth jumper wire to \n    the same row of the right ground bus column that you connected the common \n    anode to. In this example we connected it to row 2 column F\nYour circuit should now be complete, and your connections should look \n  pretty similar to the illustration above.\nNow it is time to boot up the Raspberry Pi, and write the Node.js script to \n  interact with it.\nRaspberry Pi and Node.js RGB LED and WebSocket Script\nGo to the \"nodetest\" directory, and create a new file called \"\nrgbws.js\n\":\npi@w3demopi:~ $ nano rgbws.js\nThe file is now open and can be edited with the built in Nano Editor.\nUsing a Common Cathode RGB LED\nWrite, or paste the following:\nrgbws.js\nvar http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\ngreenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)\nblueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)\n//RESET RGB LED\nledRed.digitalWrite(0); // Turn RED \n  LED off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\nredRGB=parseInt(data.red);\ngreenRGB=parseInt(data.green);\nblueRGB=parseInt(data.blue);\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(0); // Turn RED LED \n  off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});\nPress \"\nCtrl+x\n\" to save the code. Confirm with \"\ny\n\", and confirm the name with \"\nEnter\n\".\nUsing a Common Anode RGB LED\nWrite, or paste the following:\nrgbws.js\nvar http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\ngreenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)\nblueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)\n//RESET RGB LED\nledRed.digitalWrite(1); // Turn RED \n  LED off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\nredRGB=255-parseInt(data.red);\ngreenRGB=255-parseInt(data.green);\nblueRGB=255-parseInt(data.blue);\nconsole.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(1); // Turn RED LED \n  off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});\nPress \"\nCtrl+x\n\" to save the code. Confirm with \"\ny\n\", and confirm the name with \"\nEnter\n\".\nRaspberry Pi and Node.js WebSocket UI\nNow it is time add the HTML that allows for user input via WebSocket.\nFor this we want:\n3 color sliders, one for each color (RGB)\nA color picker\nA div showing the current color\nGo to the folder \"public\":\npi@w3demopi:~/nodetest $ \n  cd public\nAnd create a HTML file, rgb.html:\npi@w3demopi:~/nodetest/public $ \n  nano rgb.html\nrgb.html:\n<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" \n    href=\"https://www..com/w3css/4/w3.css\">\n<style>\n.slider {\n-webkit-appearance: none;\nwidth: 100%;\nheight: 15px;\nborder-radius: 5px;\nbackground: #d3d3d3;\noutline: none;\nopacity: 0.7;\n-webkit-transition: .2s;\ntransition: \n    opacity .2s;\n}\n.slider:hover {opacity: 1;}\n.slider::-webkit-slider-thumb {\n-webkit-appearance: none;\nappearance: none;\nwidth: 25px;\nheight: 25px;\nborder-radius: 50%;\ncursor: pointer;\n}\n.slider::-moz-range-thumb {\nwidth: \n    25px;\nheight: 25px;\nborder-radius: 50%;\nbackground: #4CAF50;\ncursor: pointer;\n}\n#redSlider::-webkit-slider-thumb {background: red;}\n#redSlider::-moz-range-thumb \n    {background: red;}\n#greenSlider::-webkit-slider-thumb {background: \n    green;}\n#greenSlider::-moz-range-thumb {background: green;}\n#blueSlider::-webkit-slider-thumb \n    {background: blue;}\n#blueSlider::-moz-range-thumb {background: blue;}\n</style>\n<body>\n<div class=\"w3-container\">\n<h1>RGB Color</h1>\n<div class=\"w3-cell-row\">\n<div class=\"w3-container w3-cell w3-mobile\">\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"></p>\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"></p>\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"></p>\n</div>\n<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\">\n<div></div>\n</div>\n</div>\n<p>Or pick a color: \n    <input type=\"color\" id=\"pickColor\"></p>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script>\n<script src=\"https://www..com/lib/w3color.js\"></script>\n<script>\nvar socket = io(); //load socket.io-client and connect to the host that \n    serves the page\nvar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an object\nwindow.addEventListener(\"load\", \n    function(){ //when page loads\nvar rSlider = \n    document.getElementById(\"redSlider\");\nvar gSlider = \n    document.getElementById(\"greenSlider\");\nvar bSlider = \n    document.getElementById(\"blueSlider\");\nvar picker = \n    document.getElementById(\"pickColor\");\nrSlider.addEventListener(\"change\", \n    function() { //add event listener for when red slider changes\nrgb.red = this.value; //update the RED color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\ngSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changes\nrgb.green = this.value; \n    //update the GREEN color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\nbSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changes\nrgb.blue = this.value;\u00a0 \n    //update the BLUE color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\npicker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changes\nrgb.red = w3color(this.value).red; \n    //Update the RED color according to the picker\nrgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the picker\nrgb.blue = w3color(this.value).blue; \n    //Update the BLUE color according to the picker\ncolorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the \n    \"Current color\"\nrSlider.value = rgb.red;\u00a0 \n    //Update the RED slider position according to the picker\ngSlider.value = rgb.green;\u00a0 //Update the GREEN slider position \n    according to the picker\nbSlider.value = rgb.blue;\u00a0 \n    //Update the BLUE slider position according to the picker\nsocket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via \n    WebSocket\n});\n});\n</script>\n</body>\n</html>\nReturn to the \"nodetest\" folder:\npi@w3demopi:~/nodetest $ \n  cd ..\nRun the code:\npi@w3demopi:~ $ sudo node rgbws.js\nNote:\nSince the \"pigpio\" module uses the pigpio C library, \n  it requires root/sudo privileges to access hardware peripherals (like the \n  GPIO).\nOpen the website in a browser using http://[RaspberryPi_IP]:8080/\nNow the RGB LED should change color depending on the user input.\nEnd the program with\nCtrl+c\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "rgbws.js",
      "content": "",
      "order": 3,
      "code": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\ngreenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)\nblueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)\n//RESET RGB LED\nledRed.digitalWrite(0); // Turn RED \n  LED off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\nredRGB=parseInt(data.red);\ngreenRGB=parseInt(data.green);\nblueRGB=parseInt(data.blue);\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(0); // Turn RED LED \n  off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});",
      "language": "javascript",
      "explanation": "Example of rgbws.js"
    },
    {
      "type": "code_example",
      "title": "rgbws.js",
      "content": "",
      "order": 4,
      "code": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\ngreenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)\nblueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)\n//RESET RGB LED\nledRed.digitalWrite(1); // Turn RED \n  LED off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\nredRGB=255-parseInt(data.red);\ngreenRGB=255-parseInt(data.green);\nblueRGB=255-parseInt(data.blue);\nconsole.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(1); // Turn RED LED \n  off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});",
      "language": "javascript",
      "explanation": "Example of rgbws.js"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" \n    content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" \n    href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<style>\n.slider {\n-webkit-appearance: none;\nwidth: 100%;\nheight: 15px;\nborder-radius: 5px;\nbackground: #d3d3d3;\noutline: none;\nopacity: 0.7;\n-webkit-transition: .2s;\ntransition: \n    opacity .2s;\n}\n.slider:hover {opacity: 1;}\n.slider::-webkit-slider-thumb {\n-webkit-appearance: none;\nappearance: none;\nwidth: 25px;\nheight: 25px;\nborder-radius: 50%;\ncursor: pointer;\n}\n.slider::-moz-range-thumb {\nwidth: \n    25px;\nheight: 25px;\nborder-radius: 50%;\nbackground: #4CAF50;\ncursor: pointer;\n}\n#redSlider::-webkit-slider-thumb {background: red;}\n#redSlider::-moz-range-thumb \n    {background: red;}\n#greenSlider::-webkit-slider-thumb {background: \n    green;}\n#greenSlider::-moz-range-thumb {background: green;}\n#blueSlider::-webkit-slider-thumb \n    {background: blue;}\n#blueSlider::-moz-range-thumb {background: blue;}\n</style>\n<body>\n<div class=\"w3-container\">\n<h1>RGB Color</h1>\n<div class=\"w3-cell-row\">\n<div class=\"w3-container w3-cell w3-mobile\">\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"redSlider\"></p>\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"greenSlider\"></p>\n<p><input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider\" id=\"blueSlider\"></p>\n</div>\n<div class=\"w3-container w3-cell w3-mobile\" style=\"background-color:black\" \n    id=\"colorShow\">\n<div></div>\n</div>\n</div>\n<p>Or pick a color: \n    <input type=\"color\" id=\"pickColor\"></p>\n</div>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\"></script>\n<script src=\"https://www.w3schools.com/lib/w3color.js\"></script>\n<script>\nvar socket = io(); //load socket.io-client and connect to the host that \n    serves the page\nvar rgb = w3color(\"rgb(0,0,0)\"); //we use the w3color.js \n    library to keep the color as an object\nwindow.addEventListener(\"load\", \n    function(){ //when page loads\nvar rSlider = \n    document.getElementById(\"redSlider\");\nvar gSlider = \n    document.getElementById(\"greenSlider\");\nvar bSlider = \n    document.getElementById(\"blueSlider\");\nvar picker = \n    document.getElementById(\"pickColor\");\nrSlider.addEventListener(\"change\", \n    function() { //add event listener for when red slider changes\nrgb.red = this.value; //update the RED color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\ngSlider.addEventListener(\"change\", function() { //add event listener for \n    when green slider changes\nrgb.green = this.value; \n    //update the GREEN color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\nbSlider.addEventListener(\"change\", function() { //add event listener for \n    when blue slider changes\nrgb.blue = this.value;\u00a0 \n    //update the BLUE color according to the slider\ncolorShow.style.backgroundColor = rgb.toRgbString(); //update the \"Current \n    color\"\nsocket.emit(\"rgbLed\", rgb); //send the updated \n    color to RGB LED via WebSocket\n});\npicker.addEventListener(\"input\", function() { //add event listener for when \n    colorpicker changes\nrgb.red = w3color(this.value).red; \n    //Update the RED color according to the picker\nrgb.green = w3color(this.value).green; //Update the GREEN color according to \n    the picker\nrgb.blue = w3color(this.value).blue; \n    //Update the BLUE color according to the picker\ncolorShow.style.backgroundColor = rgb.toRgbString();\u00a0 //update the \n    \"Current color\"\nrSlider.value = rgb.red;\u00a0 \n    //Update the RED slider position according to the picker\ngSlider.value = rgb.green;\u00a0 //Update the GREEN slider position \n    according to the picker\nbSlider.value = rgb.blue;\u00a0 \n    //Update the BLUE slider position according to the picker\nsocket.emit(\"rgbLed\", rgb);\u00a0 //send the updated color to RGB LED via \n    WebSocket\n});\n});\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\ngreenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)\nblueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)\n//RESET RGB LED\nledRed.digitalWrite(0); // Turn RED \n  LED off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\n# TODO: Complete this line\n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\nredRGB=parseInt(data.red);\ngreenRGB=parseInt(data.green);\nblueRGB=parseInt(data.blue);\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(0); // Turn RED LED \n  off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});",
      "solution": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 0, //set starting value of RED variable to off (0 for common cathode)\ngreenRGB = 0, //set starting value of GREEN variable to off (0 for common \n  cathode)\nblueRGB = 0; //set starting value of BLUE variable to off (0 for \n  common cathode)\n//RESET RGB LED\nledRed.digitalWrite(0); // Turn RED \n  LED off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common cathode RGB LED\u00a00 is fully off, and 255 is fully on\nredRGB=parseInt(data.red);\ngreenRGB=parseInt(data.green);\nblueRGB=parseInt(data.blue);\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(0); // Turn RED LED \n  off\nledGreen.digitalWrite(0); // Turn GREEN LED off\nledBlue.digitalWrite(0); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\ngreenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)\nblueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)\n//RESET RGB LED\nledRed.digitalWrite(1); // Turn RED \n  LED off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\n# TODO: Complete this line\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\nredRGB=255-parseInt(data.red);\ngreenRGB=255-parseInt(data.green);\nblueRGB=255-parseInt(data.blue);\nconsole.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(1); // Turn RED LED \n  off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});",
      "solution": "var http = require('http').createServer(handler); //require http server, and \n  create server with function handler()\nvar fs = require('fs'); //require \n  filesystem module\nvar io = require('socket.io')(http) //require socket.io \n  module and pass the http object (server)\nvar Gpio = require('pigpio').Gpio, \n  //include pigpio to interact with the GPIO\nledRed = new Gpio(4, {mode: \n  Gpio.OUTPUT}), //use GPIO pin 4 as output for RED\nledGreen = new Gpio(17, \n  {mode: Gpio.OUTPUT}), //use GPIO pin 17 as output for GREEN\nledBlue = new \n  Gpio(27, {mode: Gpio.OUTPUT}), //use GPIO pin 27 as output for BLUE\nredRGB \n  = 255, //set starting value of RED variable to off (255 for common anode)\ngreenRGB = 255, //set starting value of GREEN variable to off (255 for common \n  anode)\nblueRGB = 255; //set starting value of BLUE variable to off (255 for \n  common anode)\n//RESET RGB LED\nledRed.digitalWrite(1); // Turn RED \n  LED off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nhttp.listen(8080); \n  //listen to port 8080\nfunction handler (req, res) { //what to do on \n  requests to port 8080\nfs.readFile(__dirname + '/public/rgb.html', \n  function(err, data) { //read file rgb.html in public folder\nif (err) {\nres.writeHead(404, \n  {'Content-Type': 'text/html'}); //display 404 on error\nreturn res.end(\"404 Not Found\");\n}\nres.writeHead(200, {'Content-Type': 'text/html'}); //write HTML\nres.write(data); //write data from rgb.html\nreturn \n  res.end();\n});\n}\nio.sockets.on('connection', function \n  (socket) {// Web Socket Connection\nsocket.on('rgbLed', \n  function(data) { //get light switch status from client\nconsole.log(data); //output data from WebSocket connection to console\n//for common anode RGB LED\u00a0 255 is fully off, and 0 is fully on, so we \n  have to change the value from the client\nredRGB=255-parseInt(data.red);\ngreenRGB=255-parseInt(data.green);\nblueRGB=255-parseInt(data.blue);\nconsole.log(\"rbg: \" \n  + redRGB + \", \" + greenRGB + \", \" + blueRGB); //output converted to console\nledRed.pwmWrite(redRGB); //set RED LED to specified \n  value\nledGreen.pwmWrite(greenRGB); //set GREEN LED to \n  specified value\nledBlue.pwmWrite(blueRGB); //set BLUE \n  LED to specified value\n});\n});\nprocess.on('SIGINT', \n  function () { //on ctrl+c\nledRed.digitalWrite(1); // Turn RED LED \n  off\nledGreen.digitalWrite(1); // Turn GREEN LED off\nledBlue.digitalWrite(1); // Turn BLUE LED off\nprocess.exit(); //exit \n  completely\n});"
    }
  ],
  "related_topics": [
    {
      "id": "b2fd94cf-e191-4513-8b01-f68c7a6ffc76",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c9e1bf55-fde2-4cc7-b4d3-d8b20d8ab142",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ff442e15-ed85-408e-a3f6-34327430702f",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is An RGB LED?",
      "options": [
        "a LED with 3 different colors",
        "None of the above.",
        "None of the above.",
        "generally not critical what exact value you use"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of An RGB LED is 'a LED with 3 different colors'."
    },
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "a LED with 3 different colors",
        "None of the above.",
        "generally not critical what exact value you use"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'generally not critical what exact value you use'."
    }
  ],
  "summary": "This tutorial covers Node.jsRaspberry Pi RGB LED with WebSocket concepts and techniques. You'll learn how to use Node.jsRaspberry Pi RGB LED with WebSocket effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Node.jsRaspberry Pi RGB LED with WebSocket and how to apply it in your projects."
}