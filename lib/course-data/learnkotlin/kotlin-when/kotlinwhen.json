{
  "id": "5b2109e4-c690-4831-9ec5-06d4b5b68347",
  "title": "KotlinWhen",
  "slug": "kotlinwhen",
  "metadata": {
    "description": "Learn about KotlinWhen with clear explanations and practical examples.",
    "keywords": [
      "else",
      "code",
      "result",
      "thursday",
      "value",
      "kotlin",
      "many",
      "expression",
      "used",
      "executed"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Kotlin Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin When"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nWhen",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Kotlin when\nInstead of writing many\nif..else\nexpressions, you can use the\nwhen\nexpression, which is much easier to read.\nIt is used to select one of many code blocks to be executed:\nExample\nUse the weekday number to calculate the weekday name:\nval day = 4\n\nval result = when (day) {\n  1 -> \"Monday\"\n  2 -> \"Tuesday\"\n  3 -> \"Wednesday\"\n  4 -> \"Thursday\"\n  5 -> \"Friday\"\n  6 -> \"Saturday\"\n  7 -> \"Sunday\"\n  else -> \"Invalid day.\"\n}\nprintln(result)\n\n// Outputs \"Thursday\" (day 4)\n\nThe\nwhen\nexpression is similar to the\nswitch\nstatement in Java.\nThis is how it works:\nThe\nwhen\nvariable (\nday\n) is evaluated once\nThe value of the\nday\nvariable is compared with the values of each \"branch\"\nEach branch starts with a value, followed by an arrow (->) and a result\nIf there is a match, the associated block of code is executed\nelse\nis used to specify some code to run if there is no match\nIn the example above, the value of\nday\nis\n4\n, meaning \"Thursday\" will be printed\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ec90b440-a8e8-4823-9bc5-de1e39162f62",
      "title": "Kotlin Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e52c17ae-45cb-4299-befb-6989e24d20b4",
      "title": "Kotlin Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "746f6238-d6f1-4757-adc6-7de226e878cd",
      "title": "Kotlin Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is which?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to select one of many code blocks to be executed:\nExample\nUse the weekday number to calculate the weekday name:\nval day = 4\n\nval result = when (day) {\n  1 -> \"Monday\"\n  2 -> \"Tuesday\"\n  3 -> \"Wednesday\"\n  4 -> \"Thursday\"\n  5 -> \"Friday\"\n  6 -> \"Saturday\"\n  7 -> \"Sunday\"\n  else -> \"Invalid day",
        "much easier to read"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of which is 'much easier to read'."
    },
    {
      "question": "What is It?",
      "options": [
        "used to select one of many code blocks to be executed:\nExample\nUse the weekday number to calculate the weekday name:\nval day = 4\n\nval result = when (day) {\n  1 -> \"Monday\"\n  2 -> \"Tuesday\"\n  3 -> \"Wednesday\"\n  4 -> \"Thursday\"\n  5 -> \"Friday\"\n  6 -> \"Saturday\"\n  7 -> \"Sunday\"\n  else -> \"Invalid day",
        "None of the above.",
        "much easier to read",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of It is 'used to select one of many code blocks to be executed:\nExample\nUse the weekday number to calculate the weekday name:\nval day = 4\n\nval result = when (day) {\n  1 -> \"Monday\"\n  2 -> \"Tuesday\"\n  3 -> \"Wednesday\"\n  4 -> \"Thursday\"\n  5 -> \"Friday\"\n  6 -> \"Saturday\"\n  7 -> \"Sunday\"\n  else -> \"Invalid day'."
    }
  ],
  "summary": "This tutorial covers KotlinWhen concepts and techniques. You'll learn how to use KotlinWhen effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinWhen and how to apply it in your projects."
}