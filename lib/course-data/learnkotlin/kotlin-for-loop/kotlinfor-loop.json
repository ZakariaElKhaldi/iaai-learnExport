{
  "id": "9497b813-94c2-4e25-9b5b-26be97339910",
  "title": "KotlinFor Loop",
  "slug": "kotlinfor-loop",
  "metadata": {
    "description": "Learn about KotlinFor Loop with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "kotlin",
      "array",
      "example",
      "arrays",
      "elements",
      "cars",
      "arrayof",
      "println",
      "used"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Kotlin Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin For Loop"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nFor Loop",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Kotlin For Loop\nOften when you work with arrays, you need to loop through all of the \nelements.\nTo loop through array elements, use the\nfor\nloop together with the\nin\noperator:\nExample\nOutput all elements in the cars array:\nval cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\")\nfor (x in cars) {\n  println(x)\n}\n\nYou can loop through all kinds of arrays. In the example above, we used an array of strings.\nIn the example below, we loop through an array of integers:\nExample\nval nums = arrayOf(1, 5, 10, 15, 20)\nfor (x in nums) {\n  println(x)\n}\n\nTraditional For Loop\nUnlike Java and other programming languages, there is no traditional\nfor\nloop \nin Kotlin.\nIn Kotlin, the\nfor\nloop is used to loop through arrays, ranges, and other \nthings that contains a \ncountable number of values.\nYou will learn more about\nranges\nin the \nwill create a range of values.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "34ba89ac-849f-47ef-974e-46ceddf23103",
      "title": "Kotlin Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b170bee8-ce34-4050-bbce-b3253b4e2d2e",
      "title": "Kotlin Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "84964a78-cebe-42d1-8f5b-7aa8ea6a406e",
      "title": "Kotlin Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is there?",
      "options": [
        "no traditional\nfor\nloop \nin Kotlin",
        "used to loop through arrays",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of there is 'no traditional\nfor\nloop \nin Kotlin'."
    },
    {
      "question": "What is the\nfor\nloop?",
      "options": [
        "None of the above.",
        "used to loop through arrays",
        "None of the above.",
        "no traditional\nfor\nloop \nin Kotlin"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the\nfor\nloop is 'used to loop through arrays'."
    }
  ],
  "summary": "This tutorial covers KotlinFor Loop concepts and techniques. You'll learn how to use KotlinFor Loop effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinFor Loop and how to apply it in your projects."
}