{
  "id": "e666b01a-d26c-40e7-97b7-953ec1cfb57c",
  "title": "KotlinInheritance",
  "slug": "kotlininheritance",
  "metadata": {
    "description": "Learn about KotlinInheritance with clear explanations and practical examples.",
    "keywords": [
      "class",
      "superclass",
      "subclass",
      "inheritance",
      "properties",
      "mychildclass",
      "kotlin",
      "inherit",
      "functions",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nInheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Kotlin Inheritance (Subclass and Superclass)\nIn Kotlin, it is possible to inherit class properties and functions from one class to another. We group the \"inheritance concept\" into two categories:\nsubclass\n(child) - the class that inherits from another class\nsuperclass\n(parent) - the class being inherited from\nIn the example below,\nMyChildClass\n(subclass) inherits the \nproperties from the\nMyParentClass\nclass \n(superclass):\nExample\n// Superclass\nopen class MyParentClass {\n  val x = 5\n}\n\n// Subclass\nclass MyChildClass: MyParentClass() {\n  fun myFunction() {\n    println(x) // x is now inherited from the superclass\n  }\n}\n\n// Create an object of MyChildClass and call myFunction\nfun main() {\n  val myObj = MyChildClass()\n  myObj.myFunction()\n}\n\nExample Explained\nUse the\nopen\nkeyword in front of the\nsuperclass\n/parent, \nto make this the class other classes should inherit properties and functions from.\nTo inherit from a class, specify the name of the\nsubclass\n, followed by a colon\n:\n, \nand then the name of the\nsuperclass\n.\nWhy And When To Use \"Inheritance\"?\n- It is useful for code reusability: reuse properties and functions of an existing class when you create a new class.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "03e35b30-ac33-4f77-beeb-e7372038525c",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c351ce45-add2-4dda-a21c-9a71ac43c564",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0ea577e4-6cd1-4abf-9175-f67cdba35b31",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is it?",
      "options": [
        "now inherited from the superclass\n  }\n}\n\n// Create an object of MyChildClass and call myFunction\nfun main() {\n  val myObj = MyChildClass()\n  myObj",
        "None of the above.",
        "possible to inherit class properties and functions from one class to another",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of it is 'possible to inherit class properties and functions from one class to another'."
    },
    {
      "question": "What is x?",
      "options": [
        "None of the above.",
        "None of the above.",
        "possible to inherit class properties and functions from one class to another",
        "now inherited from the superclass\n  }\n}\n\n// Create an object of MyChildClass and call myFunction\nfun main() {\n  val myObj = MyChildClass()\n  myObj"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of x is 'now inherited from the superclass\n  }\n}\n\n// Create an object of MyChildClass and call myFunction\nfun main() {\n  val myObj = MyChildClass()\n  myObj'."
    }
  ],
  "summary": "This tutorial covers KotlinInheritance concepts and techniques. You'll learn how to use KotlinInheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinInheritance and how to apply it in your projects."
}