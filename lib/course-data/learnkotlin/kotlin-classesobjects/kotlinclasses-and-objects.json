{
  "id": "9dad5687-5462-4b3b-94ca-06c21d689359",
  "title": "KotlinClasses and Objects",
  "slug": "kotlinclasses-and-objects",
  "metadata": {
    "description": "Learn about KotlinClasses and Objects with clear explanations and practical examples.",
    "keywords": [
      "class",
      "brand",
      "create",
      "objects",
      "properties",
      "model",
      "year",
      "example",
      "object",
      "println"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin Classes/Objects"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nClasses and Objects",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Kotlin Classes/Objects\nEverything in Kotlin is associated with classes and objects, along with its properties and \nfunctions. For example: in real life, a car is an\nobject\n. The car has\nproperties\n, such as \nbrand, weight and color, and\nfunctions\n, such as drive and brake.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the\nclass\nkeyword, and specify the name of the class:\nExample\nCreate a\nCar\nclass along with some\nproperties\n(brand, model and year)\nclass Car {\n  var brand = \"\"\n  var model = \"\"\n  var year = 0\n}\nA\nproperty\nis basically a\nvariable\nthat belongs to the class.\nGood to Know:\nIt is considered good practice to start the \n  name of a class with an upper case letter, for better organization.\nCreate an Object\nNow we can use the class named\nCar\nto create objects.\nIn the example below, we create an object of\nCar\ncalled\nc1\n, and then we access the properties of\nc1\nby \nusing the dot syntax (\n.\n), just like we did to \naccess array and string properties:\nExample\n// Create a c1 object of the Car class\nval c1 = Car()\n\n// Access the properties and add some values to it\nc1.brand = \"Ford\"\nc1.model = \"Mustang\"\nc1.year = 1969\n\nprintln(c1.brand)\u00a0\u00a0 // Outputs Ford\nprintln(c1.model)\u00a0\u00a0 // Outputs Mustang\nprintln(c1.year)\u00a0\u00a0\u00a0 // Outputs 1969\n\nMultiple Objects\nYou can create multiple objects of one class:\nExample\nval c1 = Car()\nc1.brand = \"Ford\"\nc1.model = \"Mustang\"\nc1.year = 1969\n\nval c2 = Car()\nc2.brand = \"BMW\"\nc2.model = \"X5\"\nc2.year = 1999\n\nprintln(c1.brand)\u00a0 // Ford\nprintln(c2.brand)\u00a0 // BMW\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "cc300fad-1127-434d-bbd8-aa7e7a289ea0",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "31982d0b-0470-4a76-8d15-0f84840881cf",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "47b41b48-6b12-43c0-bfb3-dc888d4290db",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Objects\nEverything in Kotlin?",
      "options": [
        "None of the above.",
        "associated with classes and objects",
        "an\nobject",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Objects\nEverything in Kotlin is 'associated with classes and objects'."
    },
    {
      "question": "What is a car?",
      "options": [
        "None of the above.",
        "None of the above.",
        "an\nobject",
        "associated with classes and objects"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of a car is 'an\nobject'."
    }
  ],
  "summary": "This tutorial covers KotlinClasses and Objects concepts and techniques. You'll learn how to use KotlinClasses and Objects effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinClasses and Objects and how to apply it in your projects."
}