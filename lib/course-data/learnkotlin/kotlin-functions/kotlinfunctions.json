{
  "id": "f0a1fed9-f5a8-46da-a219-c25338d72ad7",
  "title": "KotlinFunctions",
  "slug": "kotlinfunctions",
  "metadata": {
    "description": "Learn about KotlinFunctions with clear explanations and practical examples.",
    "keywords": [
      "function",
      "myfunction",
      "example",
      "return",
      "parameters",
      "println",
      "main",
      "functions",
      "called",
      "parameter"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin Functions"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nFunctions",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A\nfunction\nis a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nFunctions are used to perform certain actions, and they are also known as\nmethods\n.\nPredefined Functions\nSo it turns out you already know what a function is. You have been using it \nthe whole time through this tutorial!\nFor example,\nprintln()\nis a function. It is used to output/print text to the screen:\nExample\nfun main() {\n  println(\"Hello World\")\n}\n\nCreate Your Own Functions\nTo create your own function, use the\nfun\nkeyword, and write the name of the \nfunction, followed by parantheses\n()\n:\nExample\nCreate a function named \"myFunction\" that should output some text:\nfun myFunction() {\n  println(\"I just got executed!\")\n}\nCall a Function\nNow that you have created a function, you can execute it by\ncalling\nit.\nTo call a function in Kotlin, write the name of the function followed by two \nparantheses\n()\n.\nIn the following example,\nmyFunction()\nwill \nprint some text (the action), when it is called:\nExample\nfun main() {\n  myFunction() // Call myFunction\n}\n\n// Outputs \"I just got executed!\"\n\nA function can be called multiple times, if you want:\nExample\nfun main() {\n  myFunction()\n  myFunction()\n  myFunction()\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!\n\nFunction Parameters\nInformation can be passed to functions as parameter.\nParameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma. \nJust note that you must specify the type of each parameter (Int, String, etc).\nThe following example has a \nfunction that takes a\nString\ncalled\nfname\nas parameter.\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:\nExample\nfun myFunction(fname: String) {\n  println(fname + \" Doe\")\n}\n\nfun main() {\n  myFunction(\"John\")\n  myFunction(\"Jane\")\n  myFunction(\"George\")\n}\n\n// John Doe\n// Jane Doe\n// George Doe\n\nWhen a\nparameter\nis passed to the function, it is called an\nargument\n. So, from the example above:\nfname\nis a\nparameter\n, while\nJohn\n,\nJane\nand\nGeorge\nare\narguments\n.\nMultiple Parameters\nYou can have as many parameters as you like:\nExample\nfun myFunction(fname: String, age: Int) {\n  println(fname + \" is \" + age)\n}\n\nfun main() {\n  myFunction(\"John\", 35)\n  myFunction(\"Jane\", 32)\n  myFunction(\"George\", 15)\n}\n\n// John is 35\n// Jane is 32\n// George is 15\n\nNote:\nWhen working with multiple parameters, the function call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order.\nReturn Values\nIn the examples above, we used functions to output a value. In the following example, we will use a function to\nreturn\na value and assign it to a variable.\nTo return a value, use the\nreturn\nkeyword, and specify the\nreturn type\nafter \nthe function's parantheses (\nInt\nin this example):\nExample\nA function with one\nInt\nparameter, and\nInt\nreturn type:\nfun myFunction(x: Int): Int {\n  return (x + 5)\n}\n\nfun main() {\n  var result = myFunction(3)\n  println(result)\n}\n\n// 8 (3 + 5)\n\nUsing two parameters:\nExample\nA function with two\nInt\nparameters, and\nInt\nreturn type:\nfun myFunction(x: Int, y: Int): Int {\n  return (x + y)\n}\n\nfun main() {\n  var result = myFunction(3, 5)\n  println(result)\n}\n\n// 8 (3 + 5)\n\nShorter Syntax for Return Values\nThere is also a shorter syntax for returning values. You can use the\n=\noperator instead of\nreturn\nwithout specifying the return type. Kotlin is smart enough to automatically find out what it is:\nExample\nfun myFunction(x: Int, y: Int) = x + y\n\nfun main() {\n  var result = myFunction(3, 5)\n  println(result)\n}\n\n// 8 (3 + 5)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "ccf76650-28c5-4026-8265-0595c10e6e71",
      "title": "Advanced C Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "5613f04a-2bad-4deb-9b6e-4be911513596",
      "title": "C Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "ea18bf1e-d8c7-4b7e-b30d-a10ace8c21d8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Kotlin\nFunctions\n\nA\nfunction\nis a block of code which only runs when it?",
      "options": [
        "None of the above.",
        "called",
        "used to perform certain actions",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Kotlin\nFunctions\n\nA\nfunction\nis a block of code which only runs when it is 'called'."
    },
    {
      "question": "What is Functions?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used to perform certain actions",
        "called"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Functions is 'used to perform certain actions'."
    }
  ],
  "summary": "This tutorial covers KotlinFunctions concepts and techniques. You'll learn how to use KotlinFunctions effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinFunctions and how to apply it in your projects."
}