{
  "id": "199d205f-a0ce-4276-8620-235cffef7108",
  "title": "KotlinData Types",
  "slug": "kotlindata-types",
  "metadata": {
    "description": "Learn about KotlinData Types with clear explanations and practical examples.",
    "keywords": [
      "type",
      "example",
      "println",
      "types",
      "mynum",
      "data",
      "double",
      "numbers",
      "value",
      "long"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Kotlin Basics"
    ],
    "estimated_time": 5,
    "category": "LearnKotlin",
    "subcategory": "Kotlin Data Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Kotlin\nData Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Kotlin Data Types\nIn Kotlin, the\ntype\nof a variable is decided by its value:\nExample\nval myNum = 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Int\nval myDoubleNum = 5.99\u00a0\u00a0\u00a0\u00a0// Double\nval myLetter = 'D' \u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0// Char\nval myBoolean = true\u00a0\u00a0\u00a0\u00a0\u00a0 // Boolean\nval myText = \"Hello\" \u00a0\u00a0\u00a0\u00a0 // String\n\nHowever, you learned from the \nExample\nval myNum: Int = 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 // Int\nval myDoubleNum: Double = 5.99\u00a0\u00a0\u00a0\u00a0// Double\nval myLetter: Char = 'D' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0// Char\nval myBoolean: Boolean = true\u00a0 \u00a0\u00a0 // Boolean\nval myText: String = \"Hello\" \u00a0\u00a0\u00a0\u00a0 // String\n\nSometimes you have to specify the type, and often you don't. Anyhow, it is \ngood to know what the different types represent.\nYou will learn more about\nwhen you need\nto specify the type later.\nData types are divided into different groups:\nNumbers\nCharacters\nBooleans\nStrings\nArrays\nNumbers\nNumber types are divided into two groups:\nInteger types\nstore whole numbers, positive or negative (such as 123 or -456), without decimals. \nValid types are\nByte\n,\nShort\n,\nInt\nand\nLong\n.\nFloating point types\nrepresent numbers with a fractional part, \ncontaining one or more decimals. There are two types:\nFloat\nand\nDouble\n.\nIf you don't specify the type for a numeric variable, it is most often \nreturned as\nInt\nfor whole numbers and\nDouble\nfor floating point numbers.\nInteger Types\nByte\nThe\nByte\ndata type can store whole numbers \nfrom -128 to 127. This can be used instead of\nInt\nor other integer types to \nsave memory when you are certain that the value will be within -128 and 127:\nExample\nval myNum: Byte = 100\nprintln(myNum)\n\nShort\nThe\nShort\ndata type can store whole numbers from -32768 to 32767:\nExample\nval myNum: Short = 5000\nprintln(myNum)\n\nInt\nThe\nInt\ndata type can store whole numbers \nfrom -2147483648 to 2147483647:\nExample\nval myNum: Int = 100000\nprintln(myNum)\n\nLong\nThe\nLong\ndata type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when\nInt\nis not large enough to store the value. \nOptionally, you can end the value with an \"L\":\nExample\nval myNum: Long = 15000000000L\nprintln(myNum)\n\nDifference Between Int and Long\nA whole number is an\nInt\nas long as it is up to 2147483647. If it goes beyond \nthat, it is defined as\nLong\n:\nExample\nval myNum1 = 2147483647\u00a0 // Int\nval myNum2 = 2147483648\u00a0 // Long\nFloating Point Types\nFloating point types represent numbers with a decimal, such as 9.99 or 3.14515.\nThe\nFloat\nand\nDouble\ndata types can store fractional numbers:\nFloat Example\nval myNum: Float = 5.75F\nprintln(myNum)\n\nDouble Example\nval myNum: Double = 19.99\nprintln(myNum)\n\nUse\nFloat\nor\nDouble\n?\nThe\nprecision\nof a floating point value indicates how many digits the value can have \nafter the decimal point.\nThe precision of\nFloat\nis only six or seven \ndecimal digits, while\nDouble\nvariables have a precision \nof about 15 digits. Therefore it is safer to use\nDouble\nfor most calculations.\nAlso note that you should end the value of a\nFloat\ntype with an \"F\".\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" or \"E\" to indicate the power of 10:\nExample\nval myNum1: Float = 35E3F\nval myNum2: Double = 12E4\nprintln(myNum1)\nprintln(myNum2)\n\nBooleans\nThe\nBoolean\ndata type can only take the values\ntrue\nor\nfalse\n:\nExample\nval isKotlinFun: Boolean = true\nval isFishTasty: Boolean = false\nprintln(isKotlinFun)\u00a0\u00a0\u00a0// Outputs true\nprintln(isFishTasty)\u00a0\u00a0 // Outputs false\n\nBoolean values are mostly used for conditional testing, which you will learn more about in a later chapter.\nCharacters\nThe\nChar\ndata type is used to store a\nsingle\ncharacter. A char value must be \nsurrounded by\nsingle\nquotes, like 'A' or 'c':\nExample\nval myGrade: Char = 'B'\nprintln(myGrade)\n\nUnlike Java, you cannot use ASCII values to display certain characters. The \nvalue 66 would output a \"B\" in Java, but will generate an error in Kotlin:\nExample\nval myLetter: Char = 66\nprintln(myLetter) // Error\nStrings\nThe\nString\ndata type is used to store a sequence of characters (text). String values must be surrounded by\ndouble\nquotes:\nExample\nval myText: String = \"Hello World\"\nprintln(myText)\n\nYou will learn more about strings in\nthe Strings chapter\n.\nArrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nYou will learn more about arrays in\nthe Arrays chapter\n.\nType Conversion\nType conversion is when you convert the value of one data type to another type.\nIn Kotlin, numeric type conversion is different from\nJava\n. For example, it is not possible to convert an\nInt\ntype to a\nLong\ntype with the following code:\nExample\nval x: Int = 5\nval y: Long = x\nprintln(y) // Error: Type mismatch\n\nTo convert a numeric data type to another type, you must use one of the following functions:\ntoByte()\n,\ntoShort()\n,\ntoInt()\n,\ntoLong()\n,\ntoFloat()\n,\ntoDouble()\nor\ntoChar()\n:\nExample\nval x: Int = 5\nval y: Long = x.toLong()\nprintln(y)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "986a3caa-a9b2-4e47-a652-c8dc66cf0646",
      "title": "Kotlin Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2b146987-71f6-4960-8add-59c92dd9c39f",
      "title": "Kotlin Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "91b45a23-bfad-4269-89dd-519b7f635207",
      "title": "Kotlin Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the\ntype\nof a variable?",
      "options": [
        "decided by its value:\nExample\nval myNum = 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Int\nval myDoubleNum = 5",
        "None of the above.",
        "None of the above.",
        "good to know what the different types represent"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of the\ntype\nof a variable is 'decided by its value:\nExample\nval myNum = 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Int\nval myDoubleNum = 5'."
    },
    {
      "question": "What is it?",
      "options": [
        "None of the above.",
        "decided by its value:\nExample\nval myNum = 5\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Int\nval myDoubleNum = 5",
        "None of the above.",
        "good to know what the different types represent"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of it is 'good to know what the different types represent'."
    }
  ],
  "summary": "This tutorial covers KotlinData Types concepts and techniques. You'll learn how to use KotlinData Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of KotlinData Types and how to apply it in your projects."
}