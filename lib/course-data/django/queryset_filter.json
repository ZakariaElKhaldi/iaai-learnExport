{
  "title": "Django QuerySet - Filter",
  "url": "https://www.w3schools.com/django/django_queryset_filter.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Django QuerySet - Filter",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "QuerySet Filter",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The filter() method is used to filter your search, and allows you to return only the rows that matches the search term.",
      "html": "<p>The <code>filter()</code> method is used to filter your search, and allows you to return only the rows that matches the \nsearch term.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As we learned in the previous chapter, we can filter on field names like this:",
      "html": "<p>As we learned in the previous chapter, we can filter on field names like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "mydata\n=\nMember\n.\nobjects\n.\nfilter\n(\nfirstname\n=\n'Emil'\n)\n.\nvalues\n(\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\">mydata <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">=</span><span class=\"token string\">'Emil'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In SQL, the above statement would be written like this:",
      "html": "<p>In SQL, the above statement would be written like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "sql",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-sql"
        ],
        "isNotranslate": true
      },
      "code": "SELECT\n\n*\n\nFROM\nmembers\nWHERE\nfirstname\n=\n\n'Emil'\n;",
      "language": "sql",
      "code_html": "<pre class=\"notranslate w3-white language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword keyword-SELECT\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword keyword-FROM\">FROM</span> members <span class=\"token keyword keyword-WHERE\">WHERE</span> firstname <span class=\"token operator\">=</span> <span class=\"token string\">'Emil'</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "AND",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The filter() method takes the arguments as **kwargs (keyword arguments), so you can filter on more than one field by separating them by a comma.",
      "html": "<p>The <code>filter()</code> method takes the arguments as \n**kwargs (keyword arguments), so you \ncan filter on more than one field by separating them by a comma.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "mydata\n=\nMember\n.\nobjects\n.\nfilter\n(\nlastname\n=\n'Refsnes'\n,\nid\n=\n2\n)\n.\nvalues\n(\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\">mydata <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lastname<span class=\"token operator\">=</span><span class=\"token string\">'Refsnes'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In SQL, the above statement would be written like this:",
      "html": "<p>In SQL, the above statement would be written like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "sql",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-sql"
        ],
        "isNotranslate": true
      },
      "code": "SELECT\n\n*\n\nFROM\nmembers\nWHERE\nlastname\n=\n\n'Refsnes'\n\nAND\nid\n=\n\n2\n;",
      "language": "sql",
      "code_html": "<pre class=\"notranslate w3-white language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword keyword-SELECT\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword keyword-FROM\">FROM</span> members <span class=\"token keyword keyword-WHERE\">WHERE</span> lastname <span class=\"token operator\">=</span> <span class=\"token string\">'Refsnes'</span> <span class=\"token operator\">AND</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "OR",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To return records where firstname is Emil or firstname is Tobias (meaning: returning records that matches either query, not necessarily both) is not as easy as the AND example above.",
      "html": "<p>To return records where firstname is Emil or firstname is Tobias (meaning: \nreturning records that matches either query, not necessarily both) is not as \neasy as the AND example above.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We can use multiple filter() methods, separated by a pipe | character. The results will merge into one model.",
      "html": "<p>We can use multiple <code>filter()</code> methods, \nseparated by a pipe <code>|</code> character. The results will \nmerge into one model.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "mydata\n=\nMember\n.\nobjects\n.\nfilter\n(\nfirstname\n=\n'Emil'\n)\n.\nvalues\n(\n)\n\n|\nMember\n.\nobjects\n.\nfilter\n(\nfirstname\n=\n'Tobias'\n)\n.\nvalues\n(\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\">mydata <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">=</span><span class=\"token string\">'Emil'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">=</span><span class=\"token string\">'Tobias'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Another common method is to import and use Q expressions:",
      "html": "<p>Another common method is to import and use Q expressions:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "from\ndjango\n.\nhttp\nimport\nHttpResponse\n\nfrom\ndjango\n.\ntemplate\nimport\nloader\n\nfrom\n\n.\nmodels\nimport\nMember\n\nfrom\ndjango\n.\ndb\n.\nmodels\nimport\n\nQ\n\n\ndef\ntesting\n(\nrequest\n)\n:\n\nmydata\n=\nMember\n.\nobjects\n.\nfilter\n(\nQ\n(\nfirstname\n=\n'Emil'\n)\n\n|\n\nQ\n(\nfirstname\n=\n'Tobias'\n)\n)\n.\nvalues\n(\n)\n\ntemplate\n=\nloader\n.\nget_template\n(\n'template.html'\n)\n\ncontext\n=\n\n{\n\n\n'mymembers'\n:\nmydata\n,\n\n\n}\n\n\nreturn\n\nHttpResponse\n(\ntemplate\n.\nrender\n(\ncontext\n,\nrequest\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword keyword-import\">import</span> HttpResponse\n<span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>template <span class=\"token keyword keyword-import\">import</span> loader\n<span class=\"token keyword keyword-from\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword keyword-import\">import</span> Member\n<span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword keyword-import\">import</span> <span class=\"token constant\">Q</span>\n\ndef <span class=\"token function\">testing</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  mydata <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">=</span><span class=\"token string\">'Emil'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Q</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">=</span><span class=\"token string\">'Tobias'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  template <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.html'</span><span class=\"token punctuation\">)</span>\n  context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'mymembers'</span><span class=\"token operator\">:</span> mydata<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">HttpResponse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In SQL, the above statement would be written like this:",
      "html": "<p>In SQL, the above statement would be written like this:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "sql",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-sql"
        ],
        "isNotranslate": true
      },
      "code": "SELECT\n\n*\n\nFROM\nmembers\nWHERE\nfirstname\n=\n\n'Emil'\n\nOR\nfirstname\n=\n\n'Tobias'\n;",
      "language": "sql",
      "code_html": "<pre class=\"notranslate w3-white language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token keyword keyword-SELECT\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword keyword-FROM\">FROM</span> members <span class=\"token keyword keyword-WHERE\">WHERE</span> firstname <span class=\"token operator\">=</span> <span class=\"token string\">'Emil'</span> <span class=\"token operator\">OR</span> firstname <span class=\"token operator\">=</span> <span class=\"token string\">'Tobias'</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-sql"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Field Lookups",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Django has its own way of specifying SQL statements and WHERE clauses.",
      "html": "<p>Django has its own way of specifying SQL statements and WHERE clauses.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To make specific where clauses in Django, use \"Field lookups\".",
      "html": "<p>To make specific where clauses in Django, use \"Field lookups\".</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Field lookups are keywords that represents specific SQL keywords.",
      "html": "<p>Field lookups are keywords that represents specific SQL keywords.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": ".\nfilter\n(\nfirstname__startswith\n=\n'L'\n)\n;",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>firstname__startswith<span class=\"token operator\">=</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The above statement will return records where firstname starts with 'L'.",
      "html": "<p>The above statement will return records where firstname starts with 'L'.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Field Lookups Syntax",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "All Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.",
      "html": "<p>All Field lookup keywords must be specified with the fieldname, followed by two(!) underscore characters, and the keyword.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In our Member model, the statement would be written like this:",
      "html": "<p>In our <code>Member</code> model, the statement would be written like this:\n\n</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "mydata\n=\nMember\n.\nobjects\n.\nfilter\n(\nfirstname__startswith\n=\n'L'\n)\n.\nvalues\n(\n)",
      "language": "unknown",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\">mydata <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>firstname__startswith<span class=\"token operator\">=</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Field Lookups Reference",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A list of all field look up keywords:",
      "html": "<p>A list of all field look up keywords:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "ws-table-all",
          "notranslate"
        ],
        "isNotranslate": true
      },
      "code": "",
      "language": "unknown",
      "code_html": "<table class=\"ws-table-all notranslate\">\n<tbody><tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_contains.php\">contains</a></td>\n<td>Contains the phrase</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_icontains.php\">icontains</a></td>\n<td>Same as contains, but case-insensitive</td>\n</tr>\n<tr>\n<td>date</td>\n<td>Matches a date</td>\n</tr>\n<tr>\n<td>day</td>\n<td>Matches a date (day of month, 1-31) (for dates)</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_endswith.php\">endswith</a></td>\n<td>Ends with</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_iendswith.php\">iendswith</a></td>\n<td>Same as endswidth, but case-insensitive</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_exact.php\">exact</a></td>\n<td>An exact match</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_iexact.php\">iexact</a></td>\n<td>Same as exact, but case-insensitive</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_in.php\">in</a></td>\n<td>Matches one of the values</td>\n</tr>\n<tr>\n<td>isnull</td>\n<td>Matches NULL values</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_gt.php\">gt</a></td>\n<td>Greater than</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_gte.php\">gte</a></td>\n<td>Greater than, or equal to</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>Matches an hour (for datetimes)</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_lt.php\">lt</a></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_lte.php\">lte</a></td>\n<td>Less than, or equal to</td>\n</tr>\n<tr>\n<td>minute</td>\n<td>Matches a minute (for datetimes)</td>\n</tr>\n<tr>\n<td>month</td>\n<td>Matches a month (for dates)</td>\n</tr>\n<tr>\n<td>quarter</td>\n<td>Matches a quarter of the year (1-4) (for dates)</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_range.php\">range</a></td>\n<td>Match between</td>\n</tr>\n<tr>\n<td>regex</td>\n<td>Matches a regular expression</td>\n</tr>\n<tr>\n<td>iregex</td>\n<td>Same as regex, but case-insensitive</td>\n</tr>\n<tr>\n<td>second</td>\n<td>Matches a second (for datetimes)</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_startswith.php\">startswith</a></td>\n<td>Starts with</td>\n</tr>\n<tr>\n<td><a href=\"ref_lookups_istartswith.php\">istartswith</a></td>\n<td>Same as startswith, but case-insensitive</td>\n</tr>\n<tr>\n<td>time</td>\n<td>Matches a time (for datetimes)</td>\n</tr>\n<tr>\n<td>week</td>\n<td>Matches a week number (1-53) (for dates)</td>\n</tr>\n<tr>\n<td>week_day</td>\n<td>Matches a day of week (1-7) 1 is sunday</td>\n</tr>\n<tr>\n<td>iso_week_day</td>\n<td>Matches a ISO 8601 day of week (1-7) 1 is monday</td>\n</tr>\n<tr>\n<td>year</td>\n<td>Matches a year (for dates)</td>\n</tr>\n<tr>\n<td>iso_year</td>\n<td>Matches an ISO 8601 year (for dates)</td>\n</tr>\n</tbody></table>",
      "code_classes": [
        "ws-table-all",
        "notranslate"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "ws-table-all",
        "notranslate"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is a correct Django method for filtering the result?",
      "html": "<p>What is a correct Django method for filtering the result?</p>"
    }
  ]
}