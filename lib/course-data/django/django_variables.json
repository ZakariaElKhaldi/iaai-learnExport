{
  "title": "Django Template Variables",
  "url": "https://www.w3schools.com/django/django_template_variables.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Django Template Variables",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Template Variables",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In Django templates, you can render variables by putting them inside {{ }} brackets:",
      "html": "<p>In Django templates, you can render variables by putting them inside\n<code>{{ }}</code> brackets:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-django"
        ],
        "isNotranslate": true
      },
      "code": "<\nh1\n>\nHello\n{{\n\nfirstname\n\n}}\n, how are you?\n</\nh1\n>",
      "language": "html",
      "code_html": "<pre class=\"notranslate w3-white language-django\" tabindex=\"0\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">firstname</span> <span class=\"token delimiter punctuation\">}}</span></span>, how are you?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create Variable in View",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The variable firstname in the example above was sent to the template via a view:",
      "html": "<p>The variable <code>firstname</code> in the example above was sent to the template via a view:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "from\ndjango\n.\nhttp\nimport\nHttpResponse\n\nfrom\ndjango\n.\ntemplate\nimport\nloader\n\ndef\ntesting\n(\nrequest\n)\n:\n\ntemplate\n=\nloader\n.\nget_template\n(\n'template.html'\n)\n\ncontext\n=\n\n{\n\n\n'firstname'\n:\n\n'Linus'\n,\n\n\n}\n\n\nreturn\n\nHttpResponse\n(\ntemplate\n.\nrender\n(\ncontext\n,\nrequest\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword keyword-import\">import</span> HttpResponse\n<span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>template <span class=\"token keyword keyword-import\">import</span> loader\n\ndef <span class=\"token function\">testing</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  template <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.html'</span><span class=\"token punctuation\">)</span>\n  context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'firstname'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Linus'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">HttpResponse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see in the view above, we create an object named context and fill it with data, and send it as the first parameter in the template.render() function.",
      "html": "<p>As you can see in the view above, we create an object named context and fill it with data, and send it as the first parameter in the \n<code>template.render()</code> function.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Create Variables in Template",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You can also create variables directly in the template, by using the {% with %} template tag.",
      "html": "<p>You can also create variables directly in the template, by using the\n<code>{% with %}</code> template tag.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The variable is available until the {% endwith %} tag appears:",
      "html": "<p>The variable is available until the\n<code>{% endwith %}</code> tag appears:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-django"
        ],
        "isNotranslate": true
      },
      "code": "{%\n\nwith\n\nfirstname\n=\n\"Tobias\"\n\n%}\n\n\n<\nh1\n>\nHello\n{{\n\nfirstname\n\n}}\n, how are you?\n</\nh1\n>\n\n\n{%\n\nendwith\n\n%}",
      "language": "html",
      "code_html": "<pre class=\"notranslate w3-white language-django\" tabindex=\"0\"><code class=\"language-django\"><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">with</span> <span class=\"token variable\">firstname</span><span class=\"token operator\">=</span><span class=\"token string\">\"Tobias\"</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">firstname</span> <span class=\"token delimiter punctuation\">}}</span></span>, how are you?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endwith</span> <span class=\"token delimiter punctuation\">%}</span></span>\n</code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "template tags",
          "href": "https://www.w3schools.com/django_template_tags.php",
          "title": ""
        }
      ],
      "text": "You will learn more about template tags in the next chapter.",
      "html": "<p>You will learn more about <a href=\"django_template_tags.php\">template tags</a> in \nthe next chapter.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Data From a Model",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example above showed a easy approach on how to create and use variables in a template.",
      "html": "<p>The example above showed a easy approach on how to create and use variables in a template.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Normally, most of the external data you want to use in a template, comes from a model.",
      "html": "<p>Normally, most of the external data you want to use in a template, comes from a model.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We have created a model in the previous chapters, called Member , which we will use in many examples in the next chapters of this tutorial.",
      "html": "<p>We have created a model in the previous chapters, called <code>Member</code>,\nwhich we will use in many examples in the next chapters of this tutorial.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To get data from the Member model, we will have to import it in the views.py file, and extract data from it in the view:",
      "html": "<p>To get data from the <code>Member</code> model,\nwe will have to import it in the <code>views.py</code> file,\nand extract data from it in the view:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-jsx"
        ],
        "isNotranslate": true
      },
      "code": "from\ndjango\n.\nhttp\nimport\nHttpResponse\n,\nHttpResponseRedirect\n\nfrom\ndjango\n.\ntemplate\nimport\nloader\n\nfrom\n\n.\nmodels\nimport\nMember\n\ndef\ntesting\n(\nrequest\n)\n:\n\nmymembers\n=\nMember\n.\nobjects\n.\nall\n(\n)\n.\nvalues\n(\n)\n\ntemplate\n=\nloader\n.\nget_template\n(\n'template.html'\n)\n\ncontext\n=\n\n{\n\n\n'mymembers'\n:\nmymembers\n,\n\n\n}\n\n\nreturn\n\nHttpResponse\n(\ntemplate\n.\nrender\n(\ncontext\n,\nrequest\n)\n)",
      "language": "python",
      "code_html": "<pre class=\"notranslate w3-white language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword keyword-import\">import</span> HttpResponse<span class=\"token punctuation\">,</span> HttpResponseRedirect\n<span class=\"token keyword keyword-from\">from</span> django<span class=\"token punctuation\">.</span>template <span class=\"token keyword keyword-import\">import</span> loader\n<span class=\"token keyword keyword-from\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword keyword-import\">import</span> Member\n\ndef <span class=\"token function\">testing</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  mymembers <span class=\"token operator\">=</span> Member<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  template <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">get_template</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.html'</span><span class=\"token punctuation\">)</span>\n  context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'mymembers'</span><span class=\"token operator\">:</span> mymembers<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">HttpResponse</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-jsx"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Now we can use the data in the template:",
      "html": "<p>Now we can use the data in the template:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [
          "notranslate",
          "w3-white",
          "language-django"
        ],
        "isNotranslate": true
      },
      "code": "<\nul\n>\n\n\n{%\n\nfor\n\nx\n\nin\n\nmymembers\n\n%}\n\n\n<\nli\n>\n{{\n\nx\n.\nfirstname\n\n}}\n</\nli\n>\n\n\n{%\n\nendfor\n\n%}\n\n\n</\nul\n>",
      "language": "html",
      "code_html": "<pre class=\"notranslate w3-white language-django\" tabindex=\"0\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">for</span> <span class=\"token variable\">x</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token variable\">mymembers</span> <span class=\"token delimiter punctuation\">%}</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{{</span> <span class=\"token variable\">x</span><span class=\"token punctuation\">.</span><span class=\"token variable\">firstname</span> <span class=\"token delimiter punctuation\">}}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">endfor</span> <span class=\"token delimiter punctuation\">%}</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre>",
      "code_classes": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [
        "notranslate",
        "w3-white",
        "language-django"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "We use the Django template tag {% for %} to loop through the members.",
      "html": "<p>We use the Django template tag <code>{% for %}</code> to loop through the \nmembers.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise ? What is this? Test your skills by answering a few questions about the topics of this page",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "What is a correct syntax for creating a variable in a template?",
      "html": "<p>What is a correct syntax for creating a variable in a template?</p>"
    }
  ]
}