{
  "title": "Data Science Tutorial",
  "url": "https://www.w3schools.com/datascience/default.asp",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, Python, PHP, Bootstrap, Java, XML and more.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "Data Science Tutorial",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Learn Data Science",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Today, Data rules the world. This has resulted in a huge demand for Data Scientists.",
      "html": "<p>Today, Data rules the world. This has resulted in a huge demand for Data Scientists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A Data Scientist helps companies with data-driven decisions, to make their business better.",
      "html": "<p>A Data Scientist helps companies with data-driven decisions, to make their business better.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Learning by Examples",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "With our \"Try it Yourself\" editor, you can edit Python code and view the result.",
      "html": "<p>With our \"Try it Yourself\" editor, you can edit Python code and view the result.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "python",
        "tryItLink": "https://www.w3schools.com/datascience/trypython_multi_csv.asp?filename=demo_lr_least_square&multi=demo_data_full_multi",
        "syntaxHighlighting": [
          {
            "text": "\n  import pandas as pdimport matplotlib.pyplot as pltfrom scipy \n  import statsfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n  x = full_health_data[\"Average_Pulse\"]y = full_health_data[\"Calorie_Burnage\"]\n  slope, intercept, r, p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0return \n  slope * x + interceptmymodel = list(map(myfunc, x))\n  plt.scatter(x, y)plt.plot(x, mymodel)plt.ylim(ymin=0, ymax=2000)\n  plt.xlim(xmin=0, xmax=200)plt.xlabel(\"Average_Pulse\")plt.ylabel (\"Calorie_Burnage\")\n  plt.show() ",
            "color": "rgb(0, 0, 0)",
            "class": "pythoncolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "as",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "from",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "import",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\"data.csv\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\",\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"Average_Pulse\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"Calorie_Burnage\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "def",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "list",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "map",
            "color": "rgb(0, 92, 197)",
            "class": "pythonkeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "2000",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "200",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          },
          {
            "text": "\"Average_Pulse\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\"Calorie_Burnage\"",
            "color": "rgb(0, 128, 0)",
            "class": "pythonstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "pythonnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "pythonHigh"
        ],
        "isNotranslate": true
      },
      "code": "import pandas as pdimport matplotlib.pyplot as pltfrom scipy\nimport statsfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\nx = full_health_data[\"Average_Pulse\"]y = full_health_data[\"Calorie_Burnage\"]\nslope, intercept, r, p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0return\nslope * x + interceptmymodel = list(map(myfunc, x))\nplt.scatter(x, y)plt.plot(x, mymodel)plt.ylim(ymin=0, ymax=2000)\nplt.xlim(xmin=0, xmax=200)plt.xlabel(\"Average_Pulse\")plt.ylabel (\"Calorie_Burnage\")\nplt.show()",
      "syntax_highlighting": [
        {
          "text": "\n import pandas as pdimport matplotlib.pyplot as pltfrom scipy \n import statsfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n x = full_health_data[\"Average_Pulse\"]y = full_health_data[\"Calorie_Burnage\"]\n slope, intercept, r, p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0return \n  slope * x + interceptmymodel = list(map(myfunc, x))\n plt.scatter(x, y)plt.plot(x, mymodel)plt.ylim(ymin=0, ymax=2000)\n  plt.xlim(xmin=0, xmax=200)plt.xlabel(\"Average_Pulse\")plt.ylabel (\"Calorie_Burnage\")\n  plt.show() ",
          "color": "black",
          "class": [
            "pythoncolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "as",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "from",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "import",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\"data.csv\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\",\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"Average_Pulse\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"Calorie_Burnage\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "def",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "list",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "map",
          "color": "#005cc5",
          "class": [
            "pythonkeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "2000",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "200",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        },
        {
          "text": "\"Average_Pulse\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\"Calorie_Burnage\"",
          "color": "green",
          "class": [
            "pythonstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "pythonnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate pythonHigh\"><span class=\"pythoncolor\" style=\"color:black\"><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> pandas as pd<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> matplotlib.pyplot <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">as</span> plt<br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">from</span> scipy <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">import</span> stats<br/><br/>full_health_data = pd.read_csv(<span class=\"pythonstringcolor\" style=\"color:green\">\"data.csv\"</span>, header=<span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, sep=<span class=\"pythonstringcolor\" style=\"color:green\">\",\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>x = full_health_data[<span class=\"pythonstringcolor\" style=\"color:green\">\"Average_Pulse\"</span>]<br/>y = full_health_data[<span class=\"pythonstringcolor\" style=\"color:green\">\"Calorie_Burnage\"</span>]<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>slope, intercept, r, p, std_err = stats.linregress(x, y)<br/><br/><span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">def</span> myfunc(x):<br/>\u00a0<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  slope * x + intercept<br/><br/>mymodel = <span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">list</span>(<span class=\"pythonkeywordcolor\" style=\"color:#005cc5\">map</span>(myfunc, x))<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span> <br/>plt.scatter(x, y)<br/>plt.plot(x, mymodel)<br/>plt.ylim(ymin=<span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, ymax=<span class=\"pythonnumbercolor\" style=\"color:#905\">2000</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  plt.xlim(xmin=<span class=\"pythonnumbercolor\" style=\"color:#905\">0</span>, xmax=<span class=\"pythonnumbercolor\" style=\"color:#905\">200</span>)<br/>plt.xlabel(<span class=\"pythonstringcolor\" style=\"color:green\">\"Average_Pulse\"</span>)<br/>plt.ylabel (<span class=\"pythonstringcolor\" style=\"color:green\">\"Calorie_Burnage\"</span>)<br/><span class=\"pythonnumbercolor\" style=\"color:#905\">\n</span>  plt.show() </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "tryItLink": "https://www.w3schools.com/datascience/trypython_multi_csv.asp?filename=demo_lr_least_square&multi=demo_data_full_multi",
      "syntax_highlighting_data": [
        {
          "text": "\n  import pandas as pdimport matplotlib.pyplot as pltfrom scipy \n  import statsfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n  x = full_health_data[\"Average_Pulse\"]y = full_health_data[\"Calorie_Burnage\"]\n  slope, intercept, r, p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0return \n  slope * x + interceptmymodel = list(map(myfunc, x))\n  plt.scatter(x, y)plt.plot(x, mymodel)plt.ylim(ymin=0, ymax=2000)\n  plt.xlim(xmin=0, xmax=200)plt.xlabel(\"Average_Pulse\")plt.ylabel (\"Calorie_Burnage\")\n  plt.show() ",
          "color": "rgb(0, 0, 0)",
          "class": "pythoncolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "as",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "from",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "import",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\"data.csv\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\",\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"Average_Pulse\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"Calorie_Burnage\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "def",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "list",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "map",
          "color": "rgb(0, 92, 197)",
          "class": "pythonkeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "2000",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "200",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        },
        {
          "text": "\"Average_Pulse\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\"Calorie_Burnage\"",
          "color": "rgb(0, 128, 0)",
          "class": "pythonstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "pythonnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "pythonHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Click on the \"Try it Yourself\" button to see how it works.",
      "html": "<p><b>Click on the \"Try it Yourself\" button to see how it works.</b></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "The Python Language",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Python is a programming language widely used by Data Scientists.",
      "html": "<p>Python is a programming language widely used by Data Scientists.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Python has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis.",
      "html": "<p>Python has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In this tutorial, we will use Python to provide practical examples.",
      "html": "<p>In this tutorial, we will use Python to provide practical examples.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Python Tutorial",
          "href": "https://www.w3schools.com/python/default.asp",
          "title": ""
        }
      ],
      "text": "To learn more about Python, please visit our Python Tutorial .",
      "html": "<p>To learn more about Python, please visit our <a href=\"/python/default.asp\">Python Tutorial</a>.</p>"
    }
  ]
}