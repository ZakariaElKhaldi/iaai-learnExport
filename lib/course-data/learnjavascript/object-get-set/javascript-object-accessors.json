{
  "id": "a29d1842-efa1-460f-baa9-4a8474c9870c",
  "title": "JavaScript Object Accessors",
  "slug": "javascript-object-accessors",
  "metadata": {
    "description": "Learn about JavaScript Object Accessors with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "object",
      "lang",
      "person",
      "example",
      "language",
      "property",
      "using",
      "data",
      "value",
      "firstname"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "Object Get / Set"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Object Accessors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Accessors (Getters and Setters)\nECMAScript 5 (ES5 2009) introduced Getter and Setters.\nGetters and setters allow you to define Object Accessors (Computed \nProperties).\nJavaScript Getter (The get Keyword)\nThis example uses a\nlang\nproperty to\nget\nthe value of the\nlanguage\nproperty.\nExample\n// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;\n\nJavaScript Setter (The set Keyword)\nThis example uses a\nlang\nproperty to\nset\nthe value of the\nlanguage\nproperty.\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang;\n}\n};\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;\n\nJavaScript Function or Getter?\nWhat is the differences between these two examples?\nExample 1\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nfullName: function() {\nreturn this.firstName + \" \" + \nthis.lastName;\n}\n};\n// Display data from the object using a method:\ndocument.getElementById(\"demo\").innerHTML = person.fullName();\n\nExample 2\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nget fullName() {\nreturn this.firstName + \" \" + \nthis.lastName;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.fullName;\n\nExample 1 access fullName as a function: person.fullName().\nExample 2 access fullName as a property: person.fullName.\nThe second example provides a simpler syntax.\nData Quality\nJavaScript can secure better data quality when using getters and setters.\nUsing the\nlang\nproperty, in this example, returns the value \nof the\nlanguage\nproperty in upper case:\nExample\n// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language.toUpperCase();\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;\n\nUsing the\nlang\nproperty, in this example, stores an upper case \nvalue in the\nlanguage\nproperty:\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang.toUpperCase();\n}\n};\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;\n\nWhy Using Getters and Setters?\nIt gives simpler syntax\nIt allows equal syntax for properties and methods\nIt can secure better data quality\nIt is useful for doing things behind-the-scenes\nObject.defineProperty()\nThe\nObject.defineProperty()\nmethod can also be used to add Getters and \nSetters:\nA Counter Example\n// Define object\nconst obj = {counter : 0};\n// Define setters and getters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (value) {this.counter -= value;}\n});\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;\n\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang;\n}\n};\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 5,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nfullName: function() {\nreturn this.firstName + \" \" + \nthis.lastName;\n}\n};\n// Display data from the object using a method:\ndocument.getElementById(\"demo\").innerHTML = person.fullName();",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 6,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nget fullName() {\nreturn this.firstName + \" \" + \nthis.lastName;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.fullName;",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language.toUpperCase();\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang.toUpperCase();\n}\n};\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "A Counter Example",
      "content": "",
      "order": 9,
      "code": "// Define object\nconst obj = {counter : 0};\n// Define setters and getters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (value) {this.counter -= value;}\n});\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;",
      "language": "javascript",
      "explanation": "Example of a counter example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create an object:\nconst person = {\nfirstName: \"John\",\n# TODO: Complete this line\nlanguage: \"en\",\nget lang() {\nreturn this.language;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;",
      "solution": "// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language;\n}\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang;\n}\n# TODO: Complete this line\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;",
      "solution": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang;\n}\n};\n// Set an object \nproperty using a setter:\nperson.lang = \"en\";\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;"
    }
  ],
  "related_topics": [
    {
      "id": "2bc1f179-5ed0-4216-ab41-b30501a63bd7",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0b080911-4bd1-4eb0-bed4-b6a302b0eaac",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b780c697-a23d-4178-b68c-6d021028a1b3",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is What?",
      "options": [
        "useful for doing things behind-the-scenes\nObject",
        "the differences between these two examples",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of What is 'the differences between these two examples'."
    },
    {
      "question": "What is It gives simpler syntax\nIt allows equal syntax for properties and methods\nIt can secure better data quality\nIt?",
      "options": [
        "None of the above.",
        "the differences between these two examples",
        "None of the above.",
        "useful for doing things behind-the-scenes\nObject"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It gives simpler syntax\nIt allows equal syntax for properties and methods\nIt can secure better data quality\nIt is 'useful for doing things behind-the-scenes\nObject'."
    }
  ],
  "summary": "This tutorial covers JavaScript Object Accessors concepts and techniques. You'll learn how to use JavaScript Object Accessors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Object Accessors and how to apply it in your projects."
}