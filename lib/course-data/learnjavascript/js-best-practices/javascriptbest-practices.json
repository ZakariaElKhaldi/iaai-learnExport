{
  "id": "f1cf0401-0f92-49c8-b50f-e149464bff03",
  "title": "JavaScriptBest Practices",
  "slug": "javascriptbest-practices",
  "metadata": {
    "description": "Learn about JavaScriptBest Practices with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "variables",
      "function",
      "const",
      "string",
      "number",
      "example",
      "avoid",
      "typeof",
      "instead",
      "type"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Best Practices"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nBest Practices",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "JavaScript\nBest Practices\n\nAvoid global variables",
      "content": ", avoid\nnew\n, avoid\n==\n, avoid\neval()\nAvoid Global Variables\nMinimize the use of global variables.\nThis includes all data types, objects, and functions.\nGlobal variables and functions can be overwritten by other scripts.\nUse local variables instead, and learn how to use\nclosures\n.\nAlways Declare Local Variables\nAll variables used in a function should be declared as\nlocal\nvariables.\nLocal variables\nmust\nbe declared with the\nvar\n, \nthe\nlet\n, or the\nconst\nkeyword,\notherwise they will become global variables.\nStrict mode does not allow undeclared variables.\nDeclarations on Top\nIt is a good coding practice to put all declarations at the top of each script \nor function.\nThis will:\nGive cleaner code\nProvide a single place to look for local variables\nMake it easier to avoid unwanted (implied) global variables\nReduce the possibility of unwanted re-declarations\n// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n// Use later\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ndiscount = 0.10;\nfullPrice = price - discount;\nThis also goes for loop variables:\nfor (let i = 0; i < 5; i++) \n {\nInitialize Variables\nIt is a good coding practice to initialize variables when you declare them.\nThis will:\nGive cleaner code\nProvide a single place to initialize variables\nAvoid undefined values\n// Declare and initiate at the beginning\nlet firstName = \"\";\nlet lastName = \"\";\nlet price = 0;\nlet discount = 0;\nlet fullPrice = 0,\nconst myArray = [];\nconst myObject = {};\nInitializing variables provides an idea of the intended use (and intended data type).\nDeclare Objects with\nconst\nDeclaring objects with const will prevent any accidental change of type:\nExample\nlet car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = \"Fiat\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Changes object to string\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = \"Fiat\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not possible\nDeclare Arrays with\nconst\nDeclaring arrays with const will prevent any accidential change of type:\nExample\nlet cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = 3;\u00a0\u00a0\u00a0\u00a0// Changes array to number\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = 3;\u00a0\u00a0\u00a0\u00a0// Not possible\nDon't Use new Object()\nUse\n\"\"\ninstead of\nnew String()\nUse\n0\ninstead of\nnew Number()\nUse\nfalse\ninstead of\nnew Boolean()\nUse\n{}\ninstead of\nnew Object()\nUse\n[]\ninstead of\nnew Array()\nUse\n/()/\ninstead of\nnew RegExp()\nUse\nfunction (){}\ninstead of\nnew Function()\nExample\nlet x1 = \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive string\nlet x2 = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive number\nlet x3 = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive boolean\nconst x4 = {};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new object\nconst x5 = [];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new array object\nconst x6 = /()/;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new regexp object\nconst x7 = function(){};\u00a0// new function object\n\nBeware of Automatic Type Conversions\nJavaScript is loosely typed.\nA variable can contain all data types.\nA variable can change its data type:\nExample\nlet x = \"Hello\";\u00a0\u00a0\u00a0\u00a0\u00a0// typeof x is a string\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// changes typeof x to a number\n\nBeware that numbers can accidentally be converted to strings or\nNaN\n(Not a \nNumber).\nWhen doing mathematical operations, JavaScript can convert numbers to strings:\nExample\nlet x = 5 + 7;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 12,\u00a0 typeof x is a number\nlet x = 5 + \"7\";\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 57,\u00a0 typeof x is a string\nlet x = \"5\" + 7;\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 57,\u00a0 typeof x is a string\nlet x = 5 - 7; \u00a0\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = 5 - \"7\"; \u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = \"5\" - 7; \u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = 5 - \"x\";\u00a0 \u00a0\u00a0 // x.valueOf() is NaN, typeof x is a number\n\nSubtracting a string from a string, does not \ngenerate an error but returns\nNaN\n(Not a Number):\nExample\n\"Hello\" - \"Dolly\" \u00a0\u00a0 // returns NaN\n\nUse === Comparison",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "==\ncomparison operator always converts (to matching types) before \ncomparison.",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "The",
      "content": "===\noperator forces comparison of values and type:\nExample\n0 == \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // true\n1 == \"1\"; \u00a0\u00a0\u00a0\u00a0\u00a0 // true\n1 == true;\u00a0\u00a0\u00a0\u00a0\u00a0 // true\n0 === \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // false\n1 === \"1\"; \u00a0\u00a0 \u00a0 // false\n1 === true;\u00a0\u00a0\u00a0\u00a0 \n// false\n\nUse Parameter Defaults\nIf a function is called with a missing argument, the value of the missing \nargument is set to\nundefined\n.\nUndefined values can break your code. It is a good habit to assign default \nvalues to arguments.\nExample\nfunction myFunction(x, y) {\nif (y === undefined) {\ny = 0;\n}\n}\n\nECMAScript 2015\nallows default parameters in the function definition:\nfunction (a=1, b=1) {\u00a0/*function code*/  }\nRead more about function parameters and arguments at\nFunction Parameters\nEnd Your Switches with Defaults\nAlways end your\nswitch\nstatements with a\ndefault\n. Even if you think there is \nno need for it.\nExample\nswitch (new Date().getDay()) {\ncase 0:\nday = \"Sunday\";\nbreak;\ncase 1:\nday = \"Monday\";\nbreak;\ncase 2:\nday = \"Tuesday\";\nbreak;\ncase 3:\nday = \"Wednesday\";\nbreak;\ncase 4:\nday = \"Thursday\";\nbreak;\ncase 5:\nday = \"Friday\";\nbreak;\ncase 6:\nday = \"Saturday\";\nbreak;\ndefault:\nday = \n \"Unknown\";\n}\n\nAvoid Number, String, and Boolean as Objects\nAlways treat numbers, strings, or booleans as primitive values. Not as \nobjects.\nDeclaring these types as objects, slows down execution speed, \nand produces nasty side effects:\nExample\nlet x = \"John\";\nlet y = new String(\"John\");\n(x === y) // is false because x is a string and y is an object.\n\nOr even worse:\nExample\nlet x = new String(\"John\");\nlet y = new String(\"John\");\n(x == y) // is false because you cannot compare objects.\n\nAvoid Using eval()\nThe\neval()\nfunction is used to run text as code. In almost all cases, it \nshould not be necessary to use it.\nBecause it allows arbitrary code to be run, it also represents a security \nproblem.\n\n\u2605\n+1",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n// Use later\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ndiscount = 0.10;\nfullPrice = price - discount;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "for (let i = 0; i < 5; i++) \n {",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "// Declare and initiate at the beginning\nlet firstName = \"\";\nlet lastName = \"\";\nlet price = 0;\nlet discount = 0;\nlet fullPrice = 0,\nconst myArray = [];\nconst myObject = {};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = \"Fiat\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Changes object to string",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = 3;\u00a0\u00a0\u00a0\u00a0// Changes array to number",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x1 = \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive string\nlet x2 = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive number\nlet x3 = false;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new primitive boolean\nconst x4 = {};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new object\nconst x5 = [];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new array object\nconst x6 = /()/;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // new regexp object\nconst x7 = function(){};\u00a0// new function object",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = \"Hello\";\u00a0\u00a0\u00a0\u00a0\u00a0// typeof x is a string\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// changes typeof x to a number",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let x = 5 + 7;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 12,\u00a0 typeof x is a number\nlet x = 5 + \"7\";\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 57,\u00a0 typeof x is a string\nlet x = \"5\" + 7;\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is 57,\u00a0 typeof x is a string\nlet x = 5 - 7; \u00a0\u00a0\u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = 5 - \"7\"; \u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = \"5\" - 7; \u00a0\u00a0\u00a0 // x.valueOf() is -2,\u00a0 typeof x is a number\nlet x = 5 - \"x\";\u00a0 \u00a0\u00a0 // x.valueOf() is NaN, typeof x is a number",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "\"Hello\" - \"Dolly\" \u00a0\u00a0 // returns NaN",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "0 == \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // true\n1 == \"1\"; \u00a0\u00a0\u00a0\u00a0\u00a0 // true\n1 == true;\u00a0\u00a0\u00a0\u00a0\u00a0 // true\n0 === \"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // false\n1 === \"1\"; \u00a0\u00a0 \u00a0 // false\n1 === true;\u00a0\u00a0\u00a0\u00a0 \n// false",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "function myFunction(x, y) {\nif (y === undefined) {\ny = 0;\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "function (a=1, b=1) {\u00a0/*function code*/  }",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "switch (new Date().getDay()) {\ncase 0:\nday = \"Sunday\";\nbreak;\ncase 1:\nday = \"Monday\";\nbreak;\ncase 2:\nday = \"Tuesday\";\nbreak;\ncase 3:\nday = \"Wednesday\";\nbreak;\ncase 4:\nday = \"Thursday\";\nbreak;\ncase 5:\nday = \"Friday\";\nbreak;\ncase 6:\nday = \"Saturday\";\nbreak;\ndefault:\nday = \n \"Unknown\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "let x = \"John\";\nlet y = new String(\"John\");\n(x === y) // is false because x is a string and y is an object.",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "let x = new String(\"John\");\nlet y = new String(\"John\");\n(x == y) // is false because you cannot compare objects.",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n// Use later\nfirstName = \"John\";\n# TODO: Complete this line\nprice = 19.90;\ndiscount = 0.10;\nfullPrice = price - discount;",
      "solution": "// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n// Use later\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\ndiscount = 0.10;\nfullPrice = price - discount;"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "for (let i = 0; i < 5; i++) \n {"
    }
  ],
  "related_topics": [
    {
      "id": "ac0bf663-fb22-4927-b2d4-ad075998374d",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2ed321d2-d3db-42e7-a532-28f606cb53da",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a68ae2ed-606b-4f80-b920-c652d380b502",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Declarations on Top\nIt?",
      "options": [
        "a good coding practice to put all declarations at the top of each script \nor function",
        "None of the above.",
        "a good coding practice to initialize variables when you declare them",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Declarations on Top\nIt is 'a good coding practice to put all declarations at the top of each script \nor function'."
    },
    {
      "question": "What is Initialize Variables\nIt?",
      "options": [
        "a good coding practice to put all declarations at the top of each script \nor function",
        "a good coding practice to initialize variables when you declare them",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Initialize Variables\nIt is 'a good coding practice to initialize variables when you declare them'."
    }
  ],
  "summary": "This tutorial covers JavaScriptBest Practices concepts and techniques. You'll learn how to use JavaScriptBest Practices effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptBest Practices and how to apply it in your projects."
}