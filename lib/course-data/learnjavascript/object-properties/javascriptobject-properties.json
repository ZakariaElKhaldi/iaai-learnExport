{
  "id": "01d09dc9-d700-4aad-93e9-d6b55f792c3e",
  "title": "JavaScriptObject Properties",
  "slug": "javascriptobject-properties",
  "metadata": {
    "description": "Learn about JavaScriptObject Properties with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "object",
      "property",
      "properties",
      "defineproperty",
      "person",
      "language",
      "example",
      "enumerable",
      "value",
      "getownpropertynames"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "Object Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObject Properties",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Property Management Methods\n// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)\nJavaScript Object.defineProperty()\nThe\nObject.defineProperty()\nmethod can be used to:\nAdding a new property to an object\nChanging property values\nChanging property metadata\nChanging object getters and setters\nSyntax:\nObject.defineProperty(\nobject, property, descriptor\n)\nAdding a new Property\nThis example adds a new property to an object:\nExample\n// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"EN\"\n};\n// Add a Property\nObject.defineProperty(person, \"year\", \n  {value:\"2008\"});\n\nChanging a Property Value\nThis example changes a property value:\nExample\n// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Change a Property\nObject.defineProperty(person, \"language\", \n  {value : \"NO\"});\n\nProperty Attributes\nAll properties have a name. In addition they also have a value.\nThe value is one of the property's attributes.\nOther attributes are: enumerable, configurable, and writable.\nThese attributes define how the property can be accessed (is it readable?, is \nit writable?)\nIn JavaScript, all attributes can be read, but only the value attribute can \nbe changed (and only if the property is writable).\n( ECMAScript 5 has methods for both getting and setting all property \nattributes)\nChanging Meta Data\nThe following property meta data can be changed:\nwritable : true\u00a0 \u00a0\u00a0\u00a0\u00a0// Property value can be changed\nenumerable : true\u00a0 \u00a0 // Property can be enumerated\nconfigurable : true\u00a0 // Property can be reconfigured\nwritable : false\u00a0\u00a0\u00a0\u00a0 // Property value can not be changed\nenumerable : false\u00a0\u00a0 // Property can be not enumerated\nconfigurable : false // Property can be not reconfigured\nGetters and setters can also be changed:\n// Defining a getter\nget: function() { return language }\n// Defining a setter\nset: function(value) { language = value }\nThis example makes language read-only:\nObject.defineProperty(person, \"language\", {writable:false});\nThis example makes language not enumerable:\nObject.defineProperty(person, \"language\", {enumerable:false});\nJavaScript getOwnPropertyNames()\nThe\nObject.getOwnPropertyNames()\nmethod can:\nList object properties\nSyntax\nObject.getOwnPropertyNames(\nobject\n)\nList all Object Properties\nThis example gets all properties of an object:\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Get all Properties\nObject.getOwnPropertyNames(person);\n\nObject.getOwnPropertyNames()\nwill also list properties that is not enumerable:\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Set the language Property not enumerable\nObject.defineProperty(person, \"language\", {enumerable:false});\n// Get all Properties\nObject.getOwnPropertyNames(person);\n\nJavaScript Object.keys()\nThe\nObject.keys()\nmethod can:\nList enumerable object properties\nSyntax\nObject.keys(\nobject\n)\nList Enumerable Object Properties\nThis example uses\nObject.keys()\ninsted of\nObject.getOwnPropertyNames()\n:\nExample\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Change the \"language\" Property\nObject.defineProperty(person, \"language\", {enumerable:false});\n// Get all Enumerable Properties\nObject.keys(person);\n\nNote\nThe getOwnPropertyNames() method returns all properties.\nThe Object.keys() method returns all enumerable properties.\nIf you define object properties without\nenumerable:false\n,\nthe two methods will return the same.\nAdding Getters and Setters\nThe\nObject.defineProperty()\nmethod can also be used to add Getters and \nSetters:\nExample\n//Create an object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Define a getter\nObject.defineProperty(person, \"fullName\", {\nget: \nfunction () {return this.firstName + \" \" + this.lastName;}\n});\n\nA Counter Example\nExample\n// Define object\nconst obj = {counter:0};\n// Define setters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (i) {this.counter -= i;}\n});\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;\n\nPrototype Properties\nJavaScript objects inherit the properties of their prototype.\nThe\ndelete\nkeyword does not delete inherited properties, but if you delete a \nprototype property, it will affect all objects \ninherited from the prototype.\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"EN\"\n};\n// Add a Property\nObject.defineProperty(person, \"year\", \n  {value:\"2008\"});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Change a Property\nObject.defineProperty(person, \"language\", \n  {value : \"NO\"});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "writable : true\u00a0 \u00a0\u00a0\u00a0\u00a0// Property value can be changed\nenumerable : true\u00a0 \u00a0 // Property can be enumerated\nconfigurable : true\u00a0 // Property can be reconfigured",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "writable : false\u00a0\u00a0\u00a0\u00a0 // Property value can not be changed\nenumerable : false\u00a0\u00a0 // Property can be not enumerated\nconfigurable : false // Property can be not reconfigured",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Defining a getter\nget: function() { return language }\n// Defining a setter\nset: function(value) { language = value }",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "Object.defineProperty(person, \"language\", {writable:false});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "Object.defineProperty(person, \"language\", {enumerable:false});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Get all Properties\nObject.getOwnPropertyNames(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Set the language Property not enumerable\nObject.defineProperty(person, \"language\", {enumerable:false});\n// Get all Properties\nObject.getOwnPropertyNames(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n// Change the \"language\" Property\nObject.defineProperty(person, \"language\", {enumerable:false});\n// Get all Enumerable Properties\nObject.keys(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "//Create an object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n// Define a getter\nObject.defineProperty(person, \"fullName\", {\nget: \nfunction () {return this.firstName + \" \" + this.lastName;}\n});",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "// Define object\nconst obj = {counter:0};\n// Define setters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (i) {this.counter -= i;}\n});\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n# TODO: Complete this line\nObject.getPrototypeOf(object)",
      "solution": "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n// Accessing the prototype\nObject.getPrototypeOf(object)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"EN\"\n};\n# TODO: Complete this line\nObject.defineProperty(person, \"year\", \n  {value:\"2008\"});",
      "solution": "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \n  \"Doe\",\nlanguage : \"EN\"\n};\n// Add a Property\nObject.defineProperty(person, \"year\", \n  {value:\"2008\"});"
    }
  ],
  "related_topics": [
    {
      "id": "cbb254e8-cde0-489a-9cdf-a2eccdf974d0",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4e4ffaae-b24d-46f7-85d0-4f3d0c21b1cd",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "44b7c909-6bb2-44ce-8c5d-4c1b4484f255",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The value?",
      "options": [
        "Not a The value.",
        "None of the above.",
        "None of the above.",
        "one of the property's attributes"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The value is 'one of the property's attributes'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptObject Properties concepts and techniques. You'll learn how to use JavaScriptObject Properties effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObject Properties and how to apply it in your projects."
}