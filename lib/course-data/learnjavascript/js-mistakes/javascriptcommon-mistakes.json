{
  "id": "a6ec6737-eb34-40e3-bebf-9da2f91d8e16",
  "title": "JavaScriptCommon Mistakes",
  "slug": "javascriptcommon-mistakes",
  "metadata": {
    "description": "Learn about JavaScriptCommon Mistakes with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "statement",
      "return",
      "person",
      "example",
      "undefined",
      "power",
      "object",
      "null",
      "returns"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Mistakes"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nCommon Mistakes",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This chapter points out some common JavaScript mistakes.\nAccidentally Using the Assignment Operator\nJavaScript programs may generate unexpected results if a programmer \naccidentally uses an assignment operator (\n=\n), instead of a comparison operator \n(\n==\n) in an if statement.\nThis\nif\nstatement returns\nfalse\n(as \nexpected) because x is \nnot equal to 10:\nlet x = 0;\nif (x == 10)\n\nThis\nif\nstatement returns\ntrue\n(maybe not \nas expected), because 10 is  \ntrue:\nlet x = 0;\nif (x = 10)\n\nThis\nif\nstatement returns\nfalse\n(maybe not \nas expected), because 0 is  \nfalse:\nlet x = 0;\nif (x = 0)\n\nAn assignment always returns the value of the assignment.\nExpecting Loose Comparison\nIn regular comparison, data type does not matter. This\nif\nstatement returns \ntrue:\nlet x = 10;\nlet y = \"10\";\nif (x == y)\n\nIn strict comparison, data type does matter. This\nif\nstatement returns false:\nlet x = 10;\nlet y = \"10\";\nif (x === y)\n\nIt is a common mistake to forget that\nswitch\nstatements use strict \ncomparison:\nThis\ncase switch\nwill display an alert:\nlet x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}\n\nThis\ncase switch\nwill not display an alert:\nlet x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}\n\nConfusing Addition & Concatenation\nAddition\nis about adding\nnumbers\n.\nConcatenation\nis about adding\nstrings\n.\nIn JavaScript both operations use the same\n+\noperator.\nBecause of this, adding a number as a number will produce a different \nresult from adding a number as a string:\nlet x = 10;\nx = 10 + 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n    Now x is 15\nlet y = 10;\ny += \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    // Now y is \"105\"\n\nWhen adding two variables, it can be difficult to anticipate the result:\nlet x = 10;\nlet y = 5;\nlet z = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0// Now z is 15\nlet x = 10;\nlet y = \"5\";\nlet z = x + y;\u00a0\u00a0\u00a0 \u00a0// Now z is \"105\"\n\nMisunderstanding Floats\nAll numbers in JavaScript are stored as 64-bits\nFloating point numbers\n(Floats).\nAll programming languages, including JavaScript, have difficulties with \nprecise floating point values:\nlet x = 0.1;\nlet y = 0.2;\nlet z = x + y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    // the result in z will not be 0.3\n\nTo solve the problem above, it helps to multiply and divide:\nExample\nlet z = (x * 10 + y * 10) / 10;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // z will be 0.3\n\nBreaking a JavaScript String\nJavaScript will allow you to break a statement into two lines:\nExample 1\nlet x =\n\"Hello World!\";\n\nBut, breaking a statement in the middle of a string will not work:\nExample 2\nlet x = \"Hello\nWorld!\";\n\nYou must use a \"backslash\" if you must break a statement in a string:\nExample 3\nlet x = \"Hello \\\nWorld!\";\n\nMisplacing Semicolon\nBecause of a misplaced semicolon, this code block will execute regardless of \nthe value of x:\nif (x == 19);\n{\n// code block\n}\n\nBreaking a Return Statement\nIt is a default JavaScript behavior to close a statement automatically at the \nend of a line.\nBecause of this, these two examples will return the same result:\nExample 1\nfunction myFunction(a) {\nlet power = 10\nreturn a * power\n}\n\nExample 2\nfunction myFunction(a) {\nlet power = 10;\nreturn a * power;\n}\n\nJavaScript will also allow you to break a statement into two lines.\nBecause of this, example 3 will also return the same result:\nExample 3\nfunction myFunction(a) {\nlet\npower = 10;\nreturn a * power;\n}\n\nBut, what will happen if you break the return statement in two lines like \nthis:\nExample 4\nfunction myFunction(a) {\nlet\npower = 10;\nreturn\na * power;\n}\n\nThe function will return\nundefined\n!\nWhy? Because JavaScript thought you meant:\nExample 5\nfunction myFunction(a) {\nlet\npower = 10;\nreturn;\na * power;\n}\n\nExplanation\nIf a statement is incomplete like:\nlet\nJavaScript will try to complete the statement by reading the \npower = 10;\nBut since this statement is complete:\nreturn\nJavaScript will automatically close it like this:\nreturn;\nThis happens because closing (ending) statements with semicolon is optional in \nJavaScript.\nJavaScript will close the return statement at the end of the line, because \nit is a complete statement.\nNever break a return statement.\nAccessing Arrays with Named Indexes\nMany programming languages support arrays with named indexes.\nArrays with named indexes are called associative \narrays (or hashes).\nJavaScript does\nnot\nsupport arrays with named indexes.\nIn JavaScript,\narrays\nuse\nnumbered indexes\n:\nExample\nconst person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person.length will return 3\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person[0] will return \"John\"\n\nIn JavaScript,\nobjects\nuse\nnamed indexes\n.\nIf you use a named index, when accessing an array, JavaScript will redefine \nthe array to a standard object.\nAfter the automatic redefinition, array methods and properties will produce undefined or \nincorrect results:\nExample:\nconst person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0 // person.length will \n return 0\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person[0] will return undefined\n\nEnding Definitions with a Comma\nTrailing commas in object and array definition are legal in ECMAScript 5.\nObject Example:\nperson = {firstName:\"John\", lastName:\"Doe\", age:46,}\nArray Example:\npoints = [40, 100, 1, 5, 25, 10,];\nWARNING !!\nInternet Explorer 8 will crash.\nJSON does not allow trailing commas.\nJSON:\nperson = {\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}\nJSON:\npoints = [40, 100, 1, 5, 25, 10];\nUndefined is Not Null\nJavaScript objects, variables, properties, and methods can be\nundefined\n.\nIn addition, empty JavaScript objects can have the value\nnull\n.\nThis can make it a little bit difficult to test if an object is empty.\nYou can test if an object exists by testing if the type is\nundefined\n:\nExample:\nif (typeof myObj === \"undefined\")\n\nBut you cannot test if an object is\nnull\n, because this will throw an error if the \nobject is\nundefined\n:\nIncorrect:\nif (myObj === null)\nTo solve this problem, you must test if an object is not\nnull\n, \nand not\nundefined\n.\nBut this can still throw an error:\nIncorrect:\nif (myObj !== null && typeof myObj \n  !== \"undefined\")\nBecause of this, you must test for not\nundefined\nbefore you can \ntest for not\nnull\n:\nCorrect:\nif (typeof myObj !== \"undefined\" && myObj !== null)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let x = 0;\nif (x == 10)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "let x = 0;\nif (x = 10)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = 0;\nif (x = 0)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let x = 10;\nlet y = \"10\";\nif (x == y)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let x = 10;\nlet y = \"10\";\nif (x === y)",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let x = 10;\nx = 10 + 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n    Now x is 15\nlet y = 10;\ny += \"5\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    // Now y is \"105\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "let x = 10;\nlet y = 5;\nlet z = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0// Now z is 15\nlet x = 10;\nlet y = \"5\";\nlet z = x + y;\u00a0\u00a0\u00a0 \u00a0// Now z is \"105\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let x = 0.1;\nlet y = 0.2;\nlet z = x + y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    // the result in z will not be 0.3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "let z = (x * 10 + y * 10) / 10;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // z will be 0.3",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 14,
      "code": "let x =\n\"Hello World!\";",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 15,
      "code": "let x = \"Hello\nWorld!\";",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example 3",
      "content": "",
      "order": 16,
      "code": "let x = \"Hello \\\nWorld!\";",
      "language": "javascript",
      "explanation": "Example of example 3"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "if (x == 19);\n{\n// code block\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 18,
      "code": "function myFunction(a) {\nlet power = 10\nreturn a * power\n}",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 19,
      "code": "function myFunction(a) {\nlet power = 10;\nreturn a * power;\n}",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example 3",
      "content": "",
      "order": 20,
      "code": "function myFunction(a) {\nlet\npower = 10;\nreturn a * power;\n}",
      "language": "javascript",
      "explanation": "Example of example 3"
    },
    {
      "type": "code_example",
      "title": "Example 4",
      "content": "",
      "order": 21,
      "code": "function myFunction(a) {\nlet\npower = 10;\nreturn\na * power;\n}",
      "language": "javascript",
      "explanation": "Example of example 4"
    },
    {
      "type": "code_example",
      "title": "Example 5",
      "content": "",
      "order": 22,
      "code": "function myFunction(a) {\nlet\npower = 10;\nreturn;\na * power;\n}",
      "language": "javascript",
      "explanation": "Example of example 5"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "power = 10;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "return",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "return;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "const person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person.length will return 3\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person[0] will return \"John\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example:",
      "content": "",
      "order": 28,
      "code": "const person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0 // person.length will \n return 0\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n // person[0] will return undefined",
      "language": "javascript",
      "explanation": "Example of example:"
    },
    {
      "type": "code_example",
      "title": "Object Example:",
      "content": "",
      "order": 29,
      "code": "person = {firstName:\"John\", lastName:\"Doe\", age:46,}",
      "language": "javascript",
      "explanation": "Example of object example:"
    },
    {
      "type": "code_example",
      "title": "Array Example:",
      "content": "",
      "order": 30,
      "code": "points = [40, 100, 1, 5, 25, 10,];",
      "language": "javascript",
      "explanation": "Example of array example:"
    },
    {
      "type": "code_example",
      "title": "JSON:",
      "content": "",
      "order": 31,
      "code": "person = {\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}",
      "language": "javascript",
      "explanation": "Example of json:"
    },
    {
      "type": "code_example",
      "title": "JSON:",
      "content": "",
      "order": 32,
      "code": "points = [40, 100, 1, 5, 25, 10];",
      "language": "javascript",
      "explanation": "Example of json:"
    },
    {
      "type": "code_example",
      "title": "Example:",
      "content": "",
      "order": 33,
      "code": "if (typeof myObj === \"undefined\")",
      "language": "javascript",
      "explanation": "Example of example:"
    },
    {
      "type": "code_example",
      "title": "Incorrect:",
      "content": "",
      "order": 34,
      "code": "if (myObj === null)",
      "language": "javascript",
      "explanation": "Example of incorrect:"
    },
    {
      "type": "code_example",
      "title": "Incorrect:",
      "content": "",
      "order": 35,
      "code": "if (myObj !== null && typeof myObj \n  !== \"undefined\")",
      "language": "javascript",
      "explanation": "Example of incorrect:"
    },
    {
      "type": "code_example",
      "title": "Correct:",
      "content": "",
      "order": 36,
      "code": "if (typeof myObj !== \"undefined\" && myObj !== null)",
      "language": "javascript",
      "explanation": "Example of correct:"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 0;\nif (x == 10)"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let x = 0;\nif (x = 10)"
    }
  ],
  "related_topics": [
    {
      "id": "9ea476f6-7551-4092-b0dd-d7eb0652fe53",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "6066e443-0757-415f-b145-8dedc2d13511",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "de7ffe3a-5fba-45ff-b2d3-d37d85643c37",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is because x?",
      "options": [
        "a common mistake to forget that\nswitch\nstatements use strict \ncomparison:\nThis\ncase switch\nwill display an alert:\nlet x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}\n\nThis\ncase switch\nwill not display an alert:\nlet x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}\n\nConfusing Addition & Concatenation\nAddition\nis about adding\nnumbers",
        "None of the above.",
        "not equal to 10:\nlet x = 0;\nif (x == 10)\n\nThis\nif\nstatement returns\ntrue\n(maybe not \nas expected)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of because x is 'not equal to 10:\nlet x = 0;\nif (x == 10)\n\nThis\nif\nstatement returns\ntrue\n(maybe not \nas expected)'."
    },
    {
      "question": "What is It?",
      "options": [
        "not equal to 10:\nlet x = 0;\nif (x == 10)\n\nThis\nif\nstatement returns\ntrue\n(maybe not \nas expected)",
        "None of the above.",
        "None of the above.",
        "a common mistake to forget that\nswitch\nstatements use strict \ncomparison:\nThis\ncase switch\nwill display an alert:\nlet x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}\n\nThis\ncase switch\nwill not display an alert:\nlet x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}\n\nConfusing Addition & Concatenation\nAddition\nis about adding\nnumbers"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'a common mistake to forget that\nswitch\nstatements use strict \ncomparison:\nThis\ncase switch\nwill display an alert:\nlet x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}\n\nThis\ncase switch\nwill not display an alert:\nlet x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}\n\nConfusing Addition & Concatenation\nAddition\nis about adding\nnumbers'."
    }
  ],
  "summary": "This tutorial covers JavaScriptCommon Mistakes concepts and techniques. You'll learn how to use JavaScriptCommon Mistakes effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptCommon Mistakes and how to apply it in your projects."
}