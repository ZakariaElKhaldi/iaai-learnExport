{
  "id": "225ce54e-cdac-41c5-bbdc-0e1712b9adf2",
  "title": "JavaScriptHTML DOM Document",
  "slug": "javascripthtml-dom-document",
  "metadata": {
    "description": "Learn about JavaScriptHTML DOM Document with clear explanations and practical examples.",
    "keywords": [
      "document",
      "html",
      "element",
      "returns",
      "elements",
      "object",
      "description",
      "attribute",
      "objects",
      "method"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "DOM Document"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nHTML DOM Document",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The HTML DOM document object is the owner of all other objects in your web page.\nThe HTML DOM Document Object\nThe document object represents your web page.\nIf you want to access any element in an HTML page, you always start with accessing the \ndocument object.\nBelow are some examples of how you can use the document object to access and \nmanipulate HTML.\nFinding HTML Elements\nMethod\nDescription\ndocument.getElementById(\nid\n)\nFind an element by element id\ndocument.getElementsByTagName(\nname\n)\nFind elements by tag name\ndocument.getElementsByClassName(\nname\n)\nFind elements by class name\nChanging HTML Elements\nProperty\nDescription\nelement\n.innerHTML =\nnew html content\nChange the inner HTML of an element\nelement\n.\nattribute = new value\nChange the attribute value of an HTML element\nelement\n.style.\nproperty = new style\nChange the style of an HTML element\nMethod\nDescription\nelement\n.setAttribute\n(attribute, value)\nChange the attribute value of an HTML element\nAdding and Deleting Elements\nMethod\nDescription\ndocument.createElement(\nelement\n)\nCreate an HTML element\ndocument.removeChild(\nelement\n)\nRemove an HTML element\ndocument.appendChild(\nelement\n)\nAdd an HTML element\ndocument.replaceChild(\nnew, old\n)\nReplace an HTML element\ndocument.write(\ntext\n)\nWrite into the HTML output stream\nAdding Events Handlers\nMethod\nDescription\ndocument.getElementById(\nid\n).onclick = function(){\ncode\n}\nAdding event handler code to an onclick event\nFinding HTML Objects\nThe first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.\nLater, in HTML DOM Level 3, more objects, collections, and properties were added.\nProperty\nDescription\nDOM\ndocument.anchors\nDeprecated. Do not use it.\n1\ndocument.applets\nDeprecated. Do not use it.\n1\ndocument.baseURI\nReturns the absolute base URI of the document\n3\ndocument.body\nReturns the <body> element\n1\ndocument.cookie\nReturns the document's cookie\n1\ndocument.doctype\nReturns the document's doctype\n3\ndocument.documentElement\nReturns the <html> element\n3\ndocument.documentMode\nReturns the mode used by the browser\n3\ndocument.documentURI\nReturns the URI of the document\n3\ndocument.domain\nDeprecated. Do not use it.\n1\ndocument.domConfig\nDeprecated. Do not use it.\n3\ndocument.embeds\nReturns all <embed> elements\n3\ndocument.forms\nReturns all <form> elements\n1\ndocument.head\nReturns the <head> element\n3\ndocument.images\nReturns all <img> elements\n1\ndocument.implementation\nReturns the DOM implementation\n3\ndocument.inputEncoding\nReturns the document's encoding (character set)\n3\ndocument.lastModified\nReturns the date and time the document was updated\n3\ndocument.links\nReturns all <area> and <a> elements that have a href attribute\n1\ndocument.readyState\nReturns the (loading) status of the document\n3\ndocument.referrer\nReturns the URI of the referrer (the linking document)\n1\ndocument.scripts\nReturns all <script> elements\n3\ndocument.strictErrorChecking\nReturns if error checking is enforced\n3\ndocument.title\nReturns the <title> element\n1\ndocument.URL\nReturns the complete URL of the document\n1\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "3cd275c6-3519-47a4-b539-716653291544",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4689a1b8-5eb4-4bec-a89e-ea9010918a15",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3a3a7bf7-3def-4721-8421-d55a2b075e8b",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nHTML DOM Document\n\nThe HTML DOM document object?",
      "options": [
        "None of the above.",
        "some examples of how you can use the document object to access and \nmanipulate HTML",
        "the owner of all other objects in your web page",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript\nHTML DOM Document\n\nThe HTML DOM document object is 'the owner of all other objects in your web page'."
    },
    {
      "question": "What is Below?",
      "options": [
        "the owner of all other objects in your web page",
        "None of the above.",
        "None of the above.",
        "some examples of how you can use the document object to access and \nmanipulate HTML"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Below is 'some examples of how you can use the document object to access and \nmanipulate HTML'."
    }
  ],
  "summary": "This tutorial covers JavaScriptHTML DOM Document concepts and techniques. You'll learn how to use JavaScriptHTML DOM Document effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptHTML DOM Document and how to apply it in your projects."
}