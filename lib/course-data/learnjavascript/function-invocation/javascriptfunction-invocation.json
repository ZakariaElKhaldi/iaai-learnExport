{
  "id": "f6e2afe7-7008-4476-9b79-feb78c29c245",
  "title": "JavaScriptFunction Invocation",
  "slug": "javascriptfunction-invocation",
  "metadata": {
    "description": "Learn about JavaScriptFunction Invocation with clear explanations and practical examples.",
    "keywords": [
      "function",
      "object",
      "javascript",
      "return",
      "global",
      "myfunction",
      "value",
      "example",
      "window",
      "myobject"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "Function Invocation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nFunction Invocation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The code inside a JavaScript\nfunction\nwill execute when \"something\" invokes it.\nInvoking a JavaScript Function\nThe code inside a function is not executed when the function is\ndefined\n.\nThe code inside a function is executed when the function is\ninvoked\n.\nIt is common to use the term \"\ncall a function\n\" instead of \"\ninvoke \na function\n\".\nIt is also common to say \"call upon a function\", \"start a function\", or \n\"execute a function\".\nIn this tutorial, we will use\ninvoke\n, because a \nJavaScript function can be invoked without being called.\nInvoking a Function as a Function\nExample\nfunction myFunction(a, b) {\nreturn a * b;\n}\nmyFunction(10, 2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Will return 20\n\nThe function above does not belong to any object. But in JavaScript there \nis always a default global object.\nIn HTML the default global object is the HTML page itself, so the function above \"belongs\" to the \nHTML page.\nIn a browser the page object is the browser window. The function above \nautomatically becomes a window function.\nNote\nThis is a common way to invoke a JavaScript function, but not a very good practice.\nGlobal variables, methods, or functions can easily create name conflicts and bugs in the global object.\nmyFunction() and window.myFunction() is the same function:\nExample\nfunction myFunction(a, b) {\nreturn a * b;\n}\nwindow.myFunction(10, 2);\u00a0\u00a0\u00a0  // Will also return 20\n\nWhat is\nthis\n?\nIn JavaScript, the\nthis\nkeyword refers to an\nobject\n.\nThe\nthis\nkeyword refers to\ndifferent objects\ndepending on how it is used:\nIn an object method,\nthis\nrefers to the\nobject\n.\nAlone,\nthis\nrefers to the\nglobal object\n.\nIn a function,\nthis\nrefers to the\nglobal object\n.\nIn a function, in strict mode,\nthis\nis\nundefined\n.\nIn an event,\nthis\nrefers to the\nelement\nthat received the event.\nMethods like\ncall()\n,\napply()\n,\nand\nbind()\ncan refer\nthis\nto\nany object\n.\nNote\nthis\nis not a variable. It is a keyword.\nYou cannot change the value of\nthis\n.\nSee Also:\nThe JavaScript\nthis\nTutorial\nThe Global Object\nWhen a function is called without an owner object, the value of\nthis\nbecomes the global object.\nIn a web browser the global object is the browser window.\nThis example returns the window object as the value of\nthis\n:\nExample\nlet x = myFunction();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x will be the window object\nfunction myFunction() {\nreturn this;\n}\n\nInvoking a function as a global function, causes the value of\nthis\nto be the global object.\nUsing the window object as a variable can easily crash your program.\nInvoking a Function as a Method\nIn JavaScript you can define functions as object methods.\nThe following example creates an object (\nmyObject\n), with two \nproperties (\nfirstName\nand\nlastName\n), and a \nmethod (\nfullName\n):\nExample\nconst myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nmyObject.fullName();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Will return \"John Doe\"\n\nThe\nfullName\nmethod is a function. The function belongs to \nthe object.\nmyObject\nis the owner of the function.\nThe thing called\nthis\n, is the object that \n\"owns\" the JavaScript code. In this case the value of\nthis\nis\nmyObject\n.\nTest it! Change the\nfullName\nmethod to return the value of\nthis\n:\nExample\nconst myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this;\n}\n}\n// This will return [object Object] (the owner object)\nmyObject.fullName();\n\nInvoking a function as an object method, causes the value of\nthis\nto be the object itself.\nInvoking a Function with the Constructor\nIf a function invocation is preceded with the\nnew\nkeyword, \nit is a constructor invocation.\nIt looks like you create a new function, but since JavaScript functions are \nobjects you actually create a new object:\nExample\n// This is a function constructor:\nfunction myFunction(arg1, arg2) {\nthis.firstName = arg1;\nthis.lastName\u00a0 = arg2;\n}\n// This creates a new object\nconst myObj = new myFunction(\"John\", \"Doe\");\n// This will return \"John\"\nmyObj.firstName;\n\nA constructor invocation creates a new object. The new object inherits the \nproperties and methods from its constructor.\nThe\nthis\nkeyword in the constructor does not have a value.\nThe value of\nthis\nwill be the new object created when the function is invoked.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function myFunction(a, b) {\nreturn a * b;\n}\nmyFunction(10, 2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Will return 20",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function myFunction(a, b) {\nreturn a * b;\n}\nwindow.myFunction(10, 2);\u00a0\u00a0\u00a0  // Will also return 20",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "let x = myFunction();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // x will be the window object\nfunction myFunction() {\nreturn this;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nmyObject.fullName();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Will return \"John Doe\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this;\n}\n}\n// This will return [object Object] (the owner object)\nmyObject.fullName();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// This is a function constructor:\nfunction myFunction(arg1, arg2) {\nthis.firstName = arg1;\nthis.lastName\u00a0 = arg2;\n}\n// This creates a new object\nconst myObj = new myFunction(\"John\", \"Doe\");\n// This will return \"John\"\nmyObj.firstName;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFunction(a, b) {\nreturn a * b;\n# TODO: Complete this line\nmyFunction(10, 2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Will return 20",
      "solution": "function myFunction(a, b) {\nreturn a * b;\n}\nmyFunction(10, 2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \n  Will return 20"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFunction(a, b) {\nreturn a * b;\n# TODO: Complete this line\nwindow.myFunction(10, 2);\u00a0\u00a0\u00a0  // Will also return 20",
      "solution": "function myFunction(a, b) {\nreturn a * b;\n}\nwindow.myFunction(10, 2);\u00a0\u00a0\u00a0  // Will also return 20"
    }
  ],
  "related_topics": [
    {
      "id": "54c9ae43-ca73-41ca-bc08-4e741d0e6590",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8eb494a8-af22-4e2b-a0ed-c1035542b1fc",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "14e78740-9541-48c5-85e3-6b9b8dfe9ce5",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Invoking a JavaScript Function\nThe code inside a function is not executed when the function?",
      "options": [
        "None of the above.",
        "None of the above.",
        "invoked",
        "defined"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Invoking a JavaScript Function\nThe code inside a function is not executed when the function is 'defined'."
    },
    {
      "question": "What is The code inside a function is executed when the function?",
      "options": [
        "None of the above.",
        "None of the above.",
        "invoked",
        "defined"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The code inside a function is executed when the function is 'invoked'."
    }
  ],
  "summary": "This tutorial covers JavaScriptFunction Invocation concepts and techniques. You'll learn how to use JavaScriptFunction Invocation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptFunction Invocation and how to apply it in your projects."
}