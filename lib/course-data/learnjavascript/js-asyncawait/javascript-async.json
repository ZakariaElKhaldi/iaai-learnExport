{
  "id": "0be80a82-ae43-4346-9c42-824325cbc955",
  "title": "JavaScript Async",
  "slug": "javascript-async",
  "metadata": {
    "description": "Learn about JavaScript Async with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "function",
      "async",
      "await",
      "promise",
      "resolve",
      "mypromise",
      "myfunction",
      "value",
      "return",
      "mydisplay"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Async/Await"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Async",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "\"async and await make promises easier to write\"\nasync\nmakes a function return a Promise\nawait\nmakes a function wait for a Promise\nAsync Syntax\nThe keyword\nasync\nbefore a function makes the function return a promise:\nExample\nasync function myFunction() {\nreturn \"Hello\";\n}\nIs the same as:\nfunction myFunction() {\nreturn Promise.resolve(\"Hello\");\n}\nHere is how to use the Promise:\nmyFunction().then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);\nExample\nasync function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);},\nfunction(error) {myDisplayer(error);}\n);\n\nOr simpler, since you expect a normal value (a normal response, not an error):\nExample\nasync function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);}\n);\n\nAwait Syntax\nThe\nawait\nkeyword can only be used inside an\nasync\nfunction.\nThe\nawait\nkeyword makes the function pause the execution \nand wait for a resolved promise before it continues:\nlet value = await promise;\nExample\nLet's go slowly and learn how to use it.\nBasic Syntax\nasync function myDisplay() {\nlet myPromise = new Promise(function(resolve,  reject) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();\n\nThe two arguments (resolve and reject) are pre-defined by JavaScript.\nWe will not create them, but call one of them when the executor function is ready.\nVery often we will not need a reject function.\nExample without reject\nasync function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();\n\nWaiting for a Timeout\nasync function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nsetTimeout(function() {resolve(\"I love You !!\");}, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();\n\nWaiting for a File\nasync function getFile() {\nlet myPromise = new Promise(function(resolve) {\nlet req = new XMLHttpRequest();\nreq.open('GET', \"mycar.html\");\nreq.onload = function() {\nif (req.status == 200) {\nresolve(req.response);\n} else {\nresolve(\"File not Found\");\n}\n};\nreq.send();\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\ngetFile();\n\nBrowser Support\nECMAScript 2017 introduced the JavaScript keywords\nasync\nand\nawait\n.\nThe following table defines the first browser version with full support for both:\nChrome 55\nEdge 15\nFirefox 52\nSafari 11\nOpera 42\nDec, 2016\nApr, 2017\nMar, 2017\nSep, 2017\nDec, 2016\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "async function myFunction() {\nreturn \"Hello\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "myFunction().then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "async function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);},\nfunction(error) {myDisplayer(error);}\n);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "async function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);}\n);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let value = await promise;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Basic Syntax",
      "content": "",
      "order": 8,
      "code": "async function myDisplay() {\nlet myPromise = new Promise(function(resolve,  reject) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();",
      "language": "javascript",
      "explanation": "Example of basic syntax"
    },
    {
      "type": "code_example",
      "title": "Example without reject",
      "content": "",
      "order": 9,
      "code": "async function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();",
      "language": "javascript",
      "explanation": "Example of example without reject"
    },
    {
      "type": "code_example",
      "title": "Waiting for a Timeout",
      "content": "",
      "order": 10,
      "code": "async function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nsetTimeout(function() {resolve(\"I love You !!\");}, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();",
      "language": "javascript",
      "explanation": "Example of waiting for a timeout"
    },
    {
      "type": "code_example",
      "title": "Waiting for a File",
      "content": "",
      "order": 11,
      "code": "async function getFile() {\nlet myPromise = new Promise(function(resolve) {\nlet req = new XMLHttpRequest();\nreq.open('GET', \"mycar.html\");\nreq.onload = function() {\nif (req.status == 200) {\nresolve(req.response);\n} else {\nresolve(\"File not Found\");\n}\n};\nreq.send();\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\ngetFile();",
      "language": "javascript",
      "explanation": "Example of waiting for a file"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "async function myFunction() {\n# TODO: Complete this line\n}",
      "solution": "async function myFunction() {\nreturn \"Hello\";\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "myFunction().then(\nfunction(value) { /* code if successful */ },\n# TODO: Complete this line\n);",
      "solution": "myFunction().then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);"
    }
  ],
  "related_topics": [
    {
      "id": "016aecbf-e1da-40b4-93f4-8431e48d42e6",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "326c3d80-ab5c-4788-8872-22233cdc7b86",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e1d56b0a-05cd-49ac-a928-628f050d9797",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "Not a Here.",
        "how to use the Promise:\nmyFunction()",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Here is 'how to use the Promise:\nmyFunction()'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript Async concepts and techniques. You'll learn how to use JavaScript Async effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Async and how to apply it in your projects."
}