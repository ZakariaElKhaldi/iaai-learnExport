{
  "id": "a2464d68-6673-4780-8115-580e6308ba1a",
  "title": "JavaScriptPerformance",
  "slug": "javascriptperformance",
  "metadata": {
    "description": "Learn about JavaScriptPerformance with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "page",
      "script",
      "code",
      "javascript",
      "document",
      "length",
      "element",
      "speed",
      "reduce"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Performance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nPerformance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "How to speed up your JavaScript code.\nReduce Activity in Loops\nLoops are often used in programming.\nEach statement in a loop, including the for statement, is executed for each iteration of the \nloop.\nStatements or assignments that can be placed outside the loop will make the \nloop run faster.\nBad:\nfor (let i = 0; i < arr.length; i++) {\nBetter Code:\nlet l = arr.length;\nfor (let i = 0; i < l; i++) {\nThe bad code accesses the length property of an array each time the loop is \niterated.\nThe better code accesses the length property outside the loop and makes the \nloop run faster.\nReduce DOM Access\nAccessing the HTML DOM is very slow, compared to other JavaScript statements.\nIf you expect to access a DOM element several times, access it once, and use \nit as a local variable:\nExample\nconst obj = document.getElementById(\"demo\");\nobj.innerHTML = \"Hello\";\n\nReduce DOM Size\nKeep the number of elements in the HTML DOM small.\nThis will always \nimprove page loading, and speed up rendering (page display), especially on smaller devices.\nEvery attempt to search the DOM (like getElementsByTagName) will benefit \nfrom a smaller DOM.\nAvoid Unnecessary Variables\nDon't create new variables if you don't plan to save values.\nOften you can replace code like this:\nlet fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;\nWith this:\ndocument.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;\nDelay JavaScript Loading\nPutting your scripts at the bottom of the page body lets the browser load the \npage first.\nWhile a script is downloading, the browser will not start any other \ndownloads. In addition all parsing and rendering activity might be blocked.\nThe HTTP specification defines that browsers should not download more than \ntwo components in parallel.\nAn alternative is to use\ndefer=\"true\"\nin the script tag. The \ndefer attribute specifies that the script should be executed after the page has \nfinished parsing, but it only works for external scripts.\nIf possible, you can add your script to the page by code, after the page has loaded:\nExample\n<script>\nwindow.onload = function() {\nconst element = document.createElement(\"script\");\nelement.src = \"myScript.js\";\ndocument.body.appendChild(element);\n};\n</script>\nAvoid Using with\nAvoid using the\nwith\nkeyword. It has a negative effect on \nspeed. It also clutters up JavaScript scopes.\nThe\nwith\nkeyword is\nnot allowed\nin strict mode.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Bad:",
      "content": "",
      "order": 3,
      "code": "for (let i = 0; i < arr.length; i++) {",
      "language": "javascript",
      "explanation": "Example of bad:"
    },
    {
      "type": "code_example",
      "title": "Better Code:",
      "content": "",
      "order": 4,
      "code": "let l = arr.length;\nfor (let i = 0; i < l; i++) {",
      "language": "javascript",
      "explanation": "Example of better code:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const obj = document.getElementById(\"demo\");\nobj.innerHTML = \"Hello\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "let fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "document.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "<script>\nwindow.onload = function() {\nconst element = document.createElement(\"script\");\nelement.src = \"myScript.js\";\ndocument.body.appendChild(element);\n};\n</script>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "for (let i = 0; i < arr.length; i++) {"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let l = arr.length;\nfor (let i = 0; i < l; i++) {"
    }
  ],
  "related_topics": [
    {
      "id": "021b9756-0d81-4ff1-b1d8-17dbbfc78053",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ad3d2a91-de47-4e16-b302-e489bce503aa",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fa080631-eff5-460f-b100-6f14dadf2745",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Reduce Activity in Loops\nLoops?",
      "options": [
        "None of the above.",
        "Not a Reduce Activity in Loops\nLoops.",
        "None of the above.",
        "often used in programming"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Reduce Activity in Loops\nLoops is 'often used in programming'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScriptPerformance concepts and techniques. You'll learn how to use JavaScriptPerformance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptPerformance and how to apply it in your projects."
}