{
  "id": "6065a34f-5209-47d9-a463-a09cf20d3a65",
  "title": "ECMAScript 2017",
  "slug": "ecmascript-2017",
  "metadata": {
    "description": "Learn about ECMAScript 2017 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "object",
      "javascript",
      "entries",
      "text",
      "values",
      "const",
      "ecmascript",
      "supported",
      "modern",
      "browsers"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS 2017"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2017",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nNew Features in ECMAScript 2017\nThis chapter introduces the new features in ECMAScript 2017:\nJavaScript String padding\nJavaScript Object entries()\nJavaScript Object values()\nJavaScript async and await\nTrailing Commas in Functions\nJavaScript Object.getOwnPropertyDescriptors\nES 2017 is fully supported in all modern browsers since September 2017:\nChrome 57\nEdge 15\nFirefox 48\nSafari 11\nOpera 44\nMar 2017\nApr 2017\nAug 2016\nSep 2017\nMar 2017\nJavaScript String Padding\nECMAScript 2017 added two string methods to JavaScript:\npadStart()\nand\npadEnd()\nto support padding at the beginning and at the end of a string.\nExamples\nlet text = \"5\";\ntext = text.padStart(4,0);\n\nlet text = \"5\";\ntext = text.padEnd(4,0);\n\nJavaScript string padding is supported in all modern browsers since April 2017:\nChrome 57\nEdge 15\nFirefox 48\nSafari 10\nOpera 44\nMar 2017\nApr 2017\nAug 2016\nSep 2016\nMar 2017\nJavaScript Object Entries\nECMAScript 2017 added the\nObject.entries()\nmethod to objects.\nObject.entries()\nreturns an array of the key/value pairs in an object:\nExample\nconst person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.entries(person);\n\nObject.entries()\nmakes it simple to use objects in loops:\nExample\nconst fruits = {Bananas:300, Oranges:200, Apples:500};\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}\n\nObject.entries()\nalso makes it simple to convert objects to maps:\nExample\nconst fruits = {Bananas:300, Oranges:200, Apples:500};\nconst myMap = new Map(Object.entries(fruits));\n\nObject.entries()\nis supported in all modern browsers since March 2017:\nChrome 47\nEdge 14\nFirefox 47\nSafari 10.1\nOpera 41\nJun 2016\nAug 2016\nJun 2016\nMar 2017\nOct 2016\nJavaScript Object Values\nObject.values()\nis similar to\nObject.entries()\n,\nbut returns a single dimension array of the object values:\nExample\nconst person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.values(person);\n\nObject.values()\nis supported in all modern browsers since March 2017:\nChrome 54\nEdge 14\nFirefox 47\nSafari 10.1\nOpera 41\nOct 2016\nAug 2016\nJun 2016\nMar 2017\nOct 2016\nJavaScript Async Functions\nWaiting for a Timeout\nasync function myDisplay() {\nlet myPromise = new Promise(function(myResolve,  myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();\n\nAsync functions are supported in all modern browsers since September 2017:\nChrome 55\nEdge 15\nFirefox 52\nSafari 11\nOpera 42\nDec 2016\nApr 2017\nMar 2017\nSep 2017\nDec 2016\nJavaScript Trailing Commas\nJavaScript allows trailing commas wherever a comma-separated list of values is accepted.\nIn Array and Object Literals, Function Calls, Parameters, Imports and Exports.\nExample\nfunction myFunc(x,,,) {};\nconst myArr = [1,2,3,4,,,];\nconst myObj = {fname: John, age:50,,,};\nTrailing commas are supported in all modern browsers since May 2017:\nChrome 58\nEdge 14\nFirefox 52\nSafari 10\nOpera 45\nApr 2017\nAug 2016\nMar 2017\nSep 2016\nMay 2017\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "let text = \"5\";\ntext = text.padStart(4,0);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.entries(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const fruits = {Bananas:300, Oranges:200, Apples:500};\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const fruits = {Bananas:300, Oranges:200, Apples:500};\nconst myMap = new Map(Object.entries(fruits));",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.values(person);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Waiting for a Timeout",
      "content": "",
      "order": 8,
      "code": "async function myDisplay() {\nlet myPromise = new Promise(function(myResolve,  myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\nmyDisplay();",
      "language": "javascript",
      "explanation": "Example of waiting for a timeout"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "function myFunc(x,,,) {};\nconst myArr = [1,2,3,4,,,];\nconst myObj = {fname: John, age:50,,,};",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let text = \"5\";\ntext = text.padStart(4,0);"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n# TODO: Complete this line\nlet text = Object.entries(person);",
      "solution": "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\nlet text = Object.entries(person);"
    }
  ],
  "related_topics": [
    {
      "id": "f735ef5c-3a3f-44d2-bb5c-ad297babd011",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0378908b-6a86-4f21-a5c9-dc30bc517a87",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "dee771af-03fe-4f7f-8f15-2377b2459a54",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "None of the above.",
        "Not a versions.",
        "None of the above.",
        "named by year: ES2016"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2017 concepts and techniques. You'll learn how to use ECMAScript 2017 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2017 and how to apply it in your projects."
}