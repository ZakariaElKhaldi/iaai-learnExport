{
  "id": "5bfac3f0-b082-440c-a547-e659e069e383",
  "title": "ECMAScript 2023",
  "slug": "ecmascript-2023",
  "metadata": {
    "description": "Learn about ECMAScript 2023 with clear explanations and practical examples.",
    "keywords": [
      "c",
      "array",
      "method",
      "const",
      "original",
      "javascript",
      "months",
      "example",
      "toreversed",
      "tosorted",
      "tospliced"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS 2023"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "ECMAScript 2023",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "JavaScript Version Numbers\nOld ECMAScript versions was named by numbers: ES5 and ES6.\nFrom 2016, versions are named by year: ES2016, 2018, 2020 ...\nThe 14th edition, ECMAScript 2023, was published in June 2023.\nNew Features in ES2023\nArray findLast()\nArray findLastIndex()\nArray toReversed()\nArray toSorted()\nArray toSpliced()\nArray with()\n#! (Shebang)\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nJavaScript Array findLast() Method\nES2023 added the findLast() method that will start from the end of an array and return\nthe value of the first element that satisfies a condition.\nExample\nconst temp = [27, 28, 30, 40, 42, 35, 30];\nlet high = temp.findLast(x => x > 40);\n\nJavaScript Array findLastIndex() Method\nThe findLastIndex() method finds the index of the last element that satisfies a condition.\nExample\nconst temp = [27, 28, 30, 40, 42, 35, 30];\nlet pos = temp.findLastIndex(x => x > 40);\n\nJavaScript Array toReversed() Method\nES2023 added the Array toReversed() method as a safe way to reverse an array without altering the original array.\nThe difference between the new\ntoReversed()\nmethod and the old\nreverse()\nmethod is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst reversed = months.toReversed();\n\nJavaScript Array toSorted() Method\nES2023 added the Array toSorted() method as a safe way to sort an array without altering the original array.\nThe difference between the new\ntoSorted()\nmethod and the old\nsort()\nmethod is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst sorted = months.toSorted();\n\nJavaScript Array toSpliced() Method\nES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.\nThe difference between the new\ntoSpliced()\nmethod and the old\nsplice()\nmethod is that the new method\ncreates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);\n\nJavaScript Array with() Method\nES2023 added the Array with() method as a safe way to update elements in an array without altering the original array.\nExample\nconst months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst new = months.with(2, \"March\");\n\n#!\nJavaScript Shebang\nA Shebang is a number sign and an exclamation mark (#!) at the beginning of a script:\n#!/usr/bin/env node\nThe example above tells the operating system to use the node program to run the script.\nNow, you can run JavaScript code with\n./fileName.js\ninstead \nof\nnode fileName.js\n.\n#! is also called sharp-exclamation, hashbang, pound-bang, or hash-pling.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet high = temp.findLast(x => x > 40);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet pos = temp.findLastIndex(x => x > 40);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst reversed = months.toReversed();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst sorted = months.toSorted();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst new = months.with(2, \"March\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "#!/usr/bin/env node",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet high = temp.findLast(x => x > 40);"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet pos = temp.findLastIndex(x => x > 40);"
    }
  ],
  "related_topics": [
    {
      "id": "34a8239b-06ca-439d-8290-82ad2385eed8",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "0ba5cf7c-0381-475e-ab3c-65bd33ee252c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "bdb2aae9-5c19-4fe3-96ee-b37ac1719ff8",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is versions?",
      "options": [
        "relatively new",
        "None of the above.",
        "named by year: ES2016",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of versions is 'named by year: ES2016'."
    },
    {
      "question": "What is Warning\nThese features?",
      "options": [
        "None of the above.",
        "named by year: ES2016",
        "relatively new",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Warning\nThese features is 'relatively new'."
    }
  ],
  "summary": "This tutorial covers ECMAScript 2023 concepts and techniques. You'll learn how to use ECMAScript 2023 effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of ECMAScript 2023 and how to apply it in your projects."
}