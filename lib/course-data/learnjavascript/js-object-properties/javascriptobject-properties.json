{
  "id": "de95af92-4d48-48da-9ca3-b5fec31a72d4",
  "title": "JavaScriptObject Properties",
  "slug": "javascriptobject-properties",
  "metadata": {
    "description": "Learn about JavaScriptObject Properties with clear explanations and practical examples.",
    "keywords": [
      "person",
      "object",
      "properties",
      "property",
      "firstname",
      "delete",
      "myobj",
      "mycars",
      "javascript",
      "objects"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Object Properties"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObject Properties",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "An Object is an Unordered Collection of Properties\nProperties are the most important part of JavaScript objects.\nProperties can be changed, added, deleted, and some are read only.\nAccessing JavaScript Properties\nThe syntax for accessing the property of an object is:\n//\nobjectName.property\nlet age = person.age;\nor\n//\nobjectName\n[\"\nproperty\n\"]\nlet age = person[\"age\"];\nor\n//\nobjectName\n[\nexpression\n]\nlet age = person[x];\nExamples\nperson.firstname + \" is \" + person.age + \" years old.\";\n\nperson[\"firstname\"] + \" is \" + person[\"age\"] + \" years old.\";\n\nlet x = \"firstname\";\nlet y = \"age\";\nperson[x] + \" is \" + person[y] + \" years old.\";\n\nAdding New Properties\nYou can add new properties to an existing object by simply giving it a value:\nExample\nperson.nationality = \"English\";\n\nDeleting Properties\nThe\ndelete\nkeyword deletes a property from an object:\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\ndelete person.age;\n\nor delete person[\"age\"];\nExample\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\ndelete person[\"age\"];\n\nNote:\nThe\ndelete\nkeyword deletes both the value of the property and the property itself.\nAfter deletion, the property cannot be used before it is added back again.\nNested Objects\nProperty values in an object can be other objects:\nExample\nmyObj = {\nname:\"John\",\nage:30,\nmyCars: {\ncar1:\"Ford\",\ncar2:\"BMW\",\ncar3:\"Fiat\"\n}\n}\nYou can access nested objects using the dot notation or the bracket notation:\nExamples\nmyObj.myCars.car2;\n\nmyObj.myCars[\"car2\"];\n\nmyObj[\"myCars\"][\"car2\"];\n\nlet p1 = \"myCars\";\nlet p2 = \"car2\";\nmyObj[p1][p2];\n\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "person.firstname + \" is \" + person.age + \" years old.\";",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "person.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\ndelete person.age;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\ndelete person[\"age\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "myObj = {\nname:\"John\",\nage:30,\nmyCars: {\ncar1:\"Ford\",\ncar2:\"BMW\",\ncar3:\"Fiat\"\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 8,
      "code": "myObj.myCars.car2;",
      "language": "javascript",
      "explanation": "Example of examples"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "person.firstname + \" is \" + person.age + \" years old.\";"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "person.nationality = \"English\";"
    }
  ],
  "related_topics": [
    {
      "id": "37a1c62a-53d7-4487-bad0-2567a3e92586",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d40d91e8-95f4-4c90-b894-4da4410d13fe",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ed367d68-f948-4c28-ba19-21944eb3e479",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nObject Properties\n\nAn Object is an Unordered Collection of Properties\nProperties?",
      "options": [
        "None of the above.",
        "read only",
        "None of the above.",
        "the most important part of JavaScript objects"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript\nObject Properties\n\nAn Object is an Unordered Collection of Properties\nProperties is 'the most important part of JavaScript objects'."
    },
    {
      "question": "What is and some?",
      "options": [
        "None of the above.",
        "the most important part of JavaScript objects",
        "None of the above.",
        "read only"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of and some is 'read only'."
    }
  ],
  "summary": "This tutorial covers JavaScriptObject Properties concepts and techniques. You'll learn how to use JavaScriptObject Properties effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObject Properties and how to apply it in your projects."
}