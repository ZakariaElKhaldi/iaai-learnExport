{
  "id": "17818e82-97f0-48c6-b9e8-6ddfc55a7cc7",
  "title": "JavaScriptHoisting",
  "slug": "javascripthoisting",
  "metadata": {
    "description": "Learn about JavaScriptHoisting with clear explanations and practical examples.",
    "keywords": [
      "example",
      "javascript",
      "elem",
      "declared",
      "hoisting",
      "element",
      "variable",
      "const",
      "hoisted",
      "used"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Hoisting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nHoisting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Hoisting is JavaScript's default behavior of moving declarations to the \ntop.\nJavaScript Declarations are Hoisted\nIn JavaScript, a variable can be declared after it has been used.\nIn other words; a variable can be used before it has been declared.\nExample 1\ngives the same result as\nExample 2\n:\nExample 1\nx = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element\nvar x; // Declare x\n\nExample 2\nvar x; // Declare x\nx = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element\n\nTo understand this, you have to understand the term \"hoisting\".\nHoisting is JavaScript's default behavior of moving all declarations to the \ntop of the current scope (to the top of the current script or the current function).\nThe let and const Keywords\nVariables defined with\nlet\nand\nconst\nare hoisted to the top \nof the block, but not\ninitialized\n.\nMeaning: The block of code is aware of the \nvariable, but it cannot be used until it has been declared.\nUsing a\nlet\nvariable before it is declared will result in a\nReferenceError\n.\nThe variable is in a \"temporal dead zone\" from the start \nof the block until it is declared:\nExample\nThis will result in a\nReferenceError\n:\ncarName = \"Volvo\";\nlet carName;\n\nUsing a\nconst\nvariable before it is declared, is a syntax error,\nso the code will simply not run.\nExample\nThis code will not run.\ncarName = \"Volvo\";\nconst carName;\n\nRead more about let and const in\nJS Let / Const\n.\nJavaScript Initializations are Not Hoisted\nJavaScript only hoists declarations, not initializations.\nExample 1\ndoes\nnot\ngive the same result as\nExample 2\n:\nExample 1\nvar x = 5; // Initialize x\nvar y = 7; // Initialize y\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y\n\nExample 2\nvar x = 5; // Initialize x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y\nvar y = 7; // Initialize y\n\nDoes it make sense that y is undefined in the last example?\nThis is because only the declaration (var y), not the initialization (=7) is hoisted to the top.\nBecause of hoisting, y has been declared before it is used, but because \ninitializations are not hoisted, the value of y is undefined.\nExample 2 is the same as writing:\nExample\nvar x = 5; // Initialize x\nvar y;\u00a0\u00a0\u00a0\u00a0 // Declare y\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y\ny = 7;\u00a0\u00a0\u00a0 // Assign 7 to y\n\nDeclare Your Variables At the Top !\nHoisting is (to many developers) an unknown or overlooked behavior of  \nJavaScript.\nIf a developer doesn't understand hoisting, programs may contain bugs (errors).\nTo avoid bugs, always declare all variables at the beginning of \nevery scope.\nSince this is how JavaScript interprets the \ncode, it is always a good rule.\nJavaScript in strict mode does not allow variables to be used if they are \nnot declared.\nStudy\n\"use strict\"\nin the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 3,
      "code": "x = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element\nvar x; // Declare x",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 4,
      "code": "var x; // Declare x\nx = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "carName = \"Volvo\";\nlet carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "carName = \"Volvo\";\nconst carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example 1",
      "content": "",
      "order": 7,
      "code": "var x = 5; // Initialize x\nvar y = 7; // Initialize y\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y",
      "language": "javascript",
      "explanation": "Example of example 1"
    },
    {
      "type": "code_example",
      "title": "Example 2",
      "content": "",
      "order": 8,
      "code": "var x = 5; // Initialize x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y\nvar y = 7; // Initialize y",
      "language": "javascript",
      "explanation": "Example of example 2"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "var x = 5; // Initialize x\nvar y;\u00a0\u00a0\u00a0\u00a0 // Declare y\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Display x and y\ny = 7;\u00a0\u00a0\u00a0 // Assign 7 to y",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\n# TODO: Complete this line\n// Display x in the element\nvar x; // Declare x",
      "solution": "x = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element\nvar x; // Declare x"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var x; // Declare x\nx = 5; // Assign 5 to x\n# TODO: Complete this line\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element",
      "solution": "var x; // Declare x\nx = 5; // Assign 5 to x\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Display x in the element"
    }
  ],
  "related_topics": [
    {
      "id": "4094bcd9-5cfe-4a62-99d7-446d4e1477d1",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3e6d4c60-0878-4cc6-9f03-b1829cfdfdc1",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d1cfae40-e893-4d51-9e19-e7e3860f4fc3",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nHoisting\n\nHoisting?",
      "options": [
        "None of the above.",
        "None of the above.",
        "JavaScript's default behavior of moving declarations to the \ntop",
        "Hoisted\nIn JavaScript"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript\nHoisting\n\nHoisting is 'JavaScript's default behavior of moving declarations to the \ntop'."
    },
    {
      "question": "What is JavaScript Declarations?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Hoisted\nIn JavaScript",
        "JavaScript's default behavior of moving declarations to the \ntop"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript Declarations is 'Hoisted\nIn JavaScript'."
    }
  ],
  "summary": "This tutorial covers JavaScriptHoisting concepts and techniques. You'll learn how to use JavaScriptHoisting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptHoisting and how to apply it in your projects."
}