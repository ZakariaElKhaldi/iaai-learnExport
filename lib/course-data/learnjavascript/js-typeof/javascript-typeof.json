{
  "id": "c524455b-2361-425e-bbef-c268d68fdec3",
  "title": "JavaScript typeof",
  "slug": "javascript-typeof",
  "metadata": {
    "description": "Learn about JavaScript typeof with clear explanations and practical examples.",
    "keywords": [
      "typeof",
      "returns",
      "object",
      "undefined",
      "null",
      "function",
      "javascript",
      "value",
      "constructor",
      "type"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Typeof"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript typeof",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The typeof Operator\nThe\ntypeof\noperator returns the\ndata type\nof a JavaScript variable.\nPrimitive Data Types\nIn JavaScript, a primitive value is a single value with no properties or methods.\nJavaScript has 7 primitive data types:\nstring\nnumber\nboolean\nbigint\nsymbol\nnull\nundefined\nThe\ntypeof\noperator returns the type of a variable or an expression.\nExamples\ntypeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns string\ntypeof (\"John\"+\"Doe\")\n// Returns string\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof 33\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns bigint\ntypeof Symbol()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns symbol\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns undefined\n\ntypeof null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\n\nNote:\nIn JavaScript,\nnull\nis  a primitive value.\nHowever,\ntypeof\nreturns \"object\".\nThis is a well-known bug in JavaScript and has historical reasons.\nComplex Data Types\nA complex data type can store multiple values\nand/or different data types together.\nJavaScript has one complex data type:\nobject\nAll other complex types like arrays, functions, sets, and maps are just different types of objects.\nThe\ntypeof\noperator returns only two types:\nobject\nfunction\nExample\ntypeof {name:'John'}\u00a0\u00a0\u00a0// Returns object\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof function (){} \u00a0\u00a0// Returns function\n\nNote:\nThe\ntypeof\noperator returns object for all types of objects:\nobjects\narrays\nsets\nmaps\nYou cannot use\ntypeof\nto determine if a JavaScript object is an array or a date.\nHow to Recognize an Array\nHow to know if a variable is an array?\nECMAScript 5 (2009) defined a new method for this:\nArray.isArray()\n:\nExample\n// Create an Array\nconst fruits = [\"apples\", \"bananas\", \"oranges\"];\nArray.isArray(fruits);\n\nThe instanceof Operator\nThe\ninstanceof\noperator returns\ntrue\nif an object is an instance of a specified object type:\nExamples\n// Create a Date\nconst time = new Date();\n(time instanceof Date);\n\n// Create an Array\nconst fruits = [\"apples\", \"bananas\", \"oranges\"];\n(fruits instanceof Array);\n\n// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n(fruits instanceof Map);\n\n// Create a Set\nconst fruits = new Set([\"apples\", \"bananas\", \"oranges\"]);\n(fruits instanceof Set);\n\nUndefined Variables\nThe\ntypeof\nof an undefined variable is\nundefined\n.\nExample\ntypeof car;\n\nThe\ntypeof\nof a variable with no value is\nundefined\n. The value is also\nundefined\n.\nExample\nlet car;\ntypeof car;\n\nAny variable can be emptied, by setting the value to\nundefined\n.\nThe type will also be\nundefined\n.\nExample\nlet car = \"Volvo\";\ncar = undefined;\n\nEmpty Values\nAn empty value has nothing to do with\nundefined\n.\nAn empty string has both a legal value and a type.\nExample\nlet car = \"\";\ntypeof car;\n\nNull\nIn JavaScript\nnull\nis \"nothing\". It is supposed to be something that doesn't exist.\nUnfortunately, in JavaScript, the data type of\nnull\nis an object.\nYou can empty an object by setting it to\nnull\n:\nExample\n// Create an Object\nlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = null;\n// Now value is null, but type is still an object\n\nYou can also empty an object by setting it to\nundefined\n:\nExample\nlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = undefined;\n// Now both value and type is undefined\n\nDifference Between Undefined and Null\nundefined\nand\nnull\nare equal in value but different in type:\ntypeof undefined\u00a0\u00a0\u00a0\u00a0\u00a0\n    // undefined\ntypeof null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    // object\nnull === undefined\u00a0\u00a0\u00a0\n    // false\nnull == undefined\u00a0\u00a0\u00a0\u00a0\n    // true\n\nThe constructor Property\nThe\nconstructor\nproperty returns the constructor \nfunction for all JavaScript variables.\nExample\n// Returns function Object() {[native code]}:\n{name:'John',age:34}.constructor\n// Returns function Array() {[native code]}:\n[1,2,3,4].constructor\n// Returns function Date() {[native code]}:\nnew Date().constructor\n// Returns function Set() {[native code]}:\nnew Set().constructor\n// Returns function Map() {[native code]}:\nnew Map().constructor\n// Returns function Function() {[native code]}:\nfunction () {}.constructor\n\nWith the constructor, you can check if an object is an\nArray\n:\nExample\n(myArray.constructor === Array);\n\nWith the constructor, you can check if an object is a\nDate\n:\nExample\n(myDate.constructor === Date);\n\nAll Together\ntypeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"string\"\ntypeof (\"John\"+\"Doe\")\u00a0 \n// Returns \"string\"\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"bigint\"\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"boolean\"\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"boolean\"\ntypeof {name:'John'}\u00a0\u00a0\n// Returns \"object\"\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof {}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof new Object()\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Array()\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Date()\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof function () {}\u00a0\n// Returns \"function\"\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"undefined\"\ntypeof null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\n\nNote:\nThe data type of\nNaN\n(Not a Number) is\nnumber\n!\nThe void Operator\nThe\nvoid\noperator evaluates an expression and returns\nundefined\n. This operator is often used to obtain the undefined \nprimitive value, using \"void(0)\" (useful when evaluating an expression without \nusing the return value).\nExample\n<a href=\"javascript:void(0);\">\nUseless link\n</a>\n<a href=\"javascript:void(document.body.style.backgroundColor='red');\">\nClick me to change the background color of body to red\n</a>\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 3,
      "code": "typeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns string\ntypeof (\"John\"+\"Doe\")\n// Returns string\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof 33\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns bigint\ntypeof Symbol()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns symbol\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns undefined",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "typeof {name:'John'}\u00a0\u00a0\u00a0// Returns object\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof function (){} \u00a0\u00a0// Returns function",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// Create an Array\nconst fruits = [\"apples\", \"bananas\", \"oranges\"];\nArray.isArray(fruits);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 6,
      "code": "// Create a Date\nconst time = new Date();\n(time instanceof Date);",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "typeof car;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let car;\ntypeof car;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let car = \"Volvo\";\ncar = undefined;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "let car = \"\";\ntypeof car;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "// Create an Object\nlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = null;\n// Now value is null, but type is still an object",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "let person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = undefined;\n// Now both value and type is undefined",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "typeof undefined\u00a0\u00a0\u00a0\u00a0\u00a0\n    // undefined\ntypeof null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    // object\nnull === undefined\u00a0\u00a0\u00a0\n    // false\nnull == undefined\u00a0\u00a0\u00a0\u00a0\n    // true",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "// Returns function Object() {[native code]}:\n{name:'John',age:34}.constructor\n// Returns function Array() {[native code]}:\n[1,2,3,4].constructor\n// Returns function Date() {[native code]}:\nnew Date().constructor\n// Returns function Set() {[native code]}:\nnew Set().constructor\n// Returns function Map() {[native code]}:\nnew Map().constructor\n// Returns function Function() {[native code]}:\nfunction () {}.constructor",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "(myArray.constructor === Array);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "(myDate.constructor === Date);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "All Together",
      "content": "",
      "order": 17,
      "code": "typeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"string\"\ntypeof (\"John\"+\"Doe\")\u00a0 \n// Returns \"string\"\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof NaN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"number\"\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"bigint\"\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"boolean\"\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"boolean\"\ntypeof {name:'John'}\u00a0\u00a0\n// Returns \"object\"\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof {}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof []\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns \"object\"\ntypeof new Object()\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Array()\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Date()\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"\ntypeof function () {}\u00a0\n// Returns \"function\"\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"undefined\"\ntypeof null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n// Returns \"object\"",
      "language": "javascript",
      "explanation": "Example of all together"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "<a href=\"javascript:void(0);\">\nUseless link\n</a>\n<a href=\"javascript:void(document.body.style.backgroundColor='red');\">\nClick me to change the background color of body to red\n</a>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "typeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns string\ntypeof (\"John\"+\"Doe\")\n// Returns string\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# TODO: Complete this line\ntypeof 33\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns bigint\ntypeof Symbol()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns symbol\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns undefined",
      "solution": "typeof \"John\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns string\ntypeof (\"John\"+\"Doe\")\n// Returns string\ntypeof 3.14\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof 33\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof (33 + 66)\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns number\ntypeof true\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns boolean\ntypeof 1234n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns bigint\ntypeof Symbol()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns symbol\ntypeof x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns undefined"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "typeof {name:'John'}\u00a0\u00a0\u00a0// Returns object\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n# TODO: Complete this line\ntypeof function (){} \u00a0\u00a0// Returns function",
      "solution": "typeof {name:'John'}\u00a0\u00a0\u00a0// Returns object\ntypeof [1,2,3,4]\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Map()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof new Set()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n// Returns object\ntypeof function (){} \u00a0\u00a0// Returns function"
    }
  ],
  "related_topics": [
    {
      "id": "5c9ce375-dca9-4597-9b11-1bd711cce3ce",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "bbb4f220-933a-4b96-a523-6039c80901f3",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "32653e0b-601a-4409-ab1b-7bb22152501a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is a primitive value?",
      "options": [
        "a single value with no properties or methods",
        "None of the above.",
        "a primitive value",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of a primitive value is 'a single value with no properties or methods'."
    },
    {
      "question": "What is null?",
      "options": [
        "None of the above.",
        "a single value with no properties or methods",
        "None of the above.",
        "a primitive value"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of null is 'a primitive value'."
    }
  ],
  "summary": "This tutorial covers JavaScript typeof concepts and techniques. You'll learn how to use JavaScript typeof effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript typeof and how to apply it in your projects."
}