{
  "id": "92b42baa-dd66-4a3b-b41e-f8908760a5ae",
  "title": "JavaScriptArrays",
  "slug": "javascriptarrays",
  "metadata": {
    "description": "Learn about JavaScriptArrays with clear explanations and practical examples.",
    "keywords": [
      "array",
      "const",
      "arrays",
      "fruits",
      "cars",
      "example",
      "javascript",
      "person",
      "objects",
      "element"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 6,
    "category": "LearnJavaScript",
    "subcategory": "JS Arrays"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nArrays",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "An array is a special variable, which can hold more than one value:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\nWhy Use Arrays?\nIf you have a list of items (a list of car names, for example), storing the \ncars in single variables could look like this:\nlet car1 = \"Saab\";\nlet car2 = \"Volvo\";\nlet car3 = \"BMW\";\nHowever, what if you want to loop through the cars and find a specific one? \nAnd what if you had not 3 cars, but 300?\nThe solution is an array!\nAn array can hold many values under a single name, and you can \naccess the values by referring to an index number.\nCreating an Array\nUsing an array literal is the easiest way to create a JavaScript Array.\nSyntax:\nconst\narray_name\n= [\nitem1\n,\nitem2\n, ...];\nIt is a common practice to declare arrays with the\nconst\nkeyword.\nLearn more about\nconst\nwith arrays in the chapter:\nJS Array Const\n.\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\nSpaces and line breaks are not important. A declaration can span multiple lines:\nExample\nconst cars = [\n\"Saab\",\n\"Volvo\",\n\"BMW\"\n];\n\nYou can also create an array, and then provide the elements:\nExample\nconst cars = [];\ncars[0]= \"Saab\";\ncars[1]= \"Volvo\";\ncars[2]= \"BMW\";\n\nUsing the JavaScript Keyword new\nThe following example also creates an Array, and assigns values to it:\nExample\nconst cars = new Array(\"Saab\", \"Volvo\", \"BMW\");\n\nThe two examples above do exactly the same.\nThere is no need to use\nnew Array()\n.\nFor simplicity, readability and execution speed, use the array literal method.\nAccessing Array Elements\nYou access an array element by referring to the\nindex number\n:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\nlet car = cars[0];\n\nNote:\nArray indexes start with 0.\n[0] is the first element.\n[1] is the second element.\nChanging an Array Element\nThis statement changes the value of the first element in\ncars\n:\ncars[0] = \"Opel\";\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars[0] = \"Opel\";\n\nConverting an Array to a String\nThe JavaScript method\ntoString()\nconverts an array to a \nstring of (comma separated) array values.\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();\nResult:\nBanana,Orange,Apple,Mango\n\nAccess the Full Array\nWith JavaScript, the full array can be accessed by referring to the array \nname:\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ndocument.getElementById(\"demo\").innerHTML = cars;\n\nArrays are Objects\nArrays are a special type of objects. The\ntypeof\noperator in JavaScript returns \"object\" for \narrays.\nBut, JavaScript arrays are best described as arrays.\nArrays use\nnumbers\nto access its \"elements\". In this \nexample,\nperson[0]\nreturns John:\nArray:\nconst person = [\"John\", \"Doe\", 46];\n\nObjects use\nnames\nto access its \"members\". In this example,\nperson.firstName\nreturns John:\nObject:\nconst person = {firstName:\"John\", lastName:\"Doe\", age:46};\n\nArray Elements Can Be Objects\nJavaScript variables can be objects. Arrays are special kinds of objects.\nBecause of this, you can have variables of different types in the \nsame Array.\nYou can have objects in an Array. You can have functions in an Array. You can \nhave arrays in an Array:\nmyArray[0] = Date.now;\nmyArray[1] = myFunction;\nmyArray[2] = myCars;\nArray Properties and Methods\nThe real strength of JavaScript arrays are the built-in array properties and \nmethods:\ncars.length\u00a0\u00a0\u00a0// Returns the number of elements\ncars.sort()\u00a0\u00a0\u00a0// Sorts the array\nArray methods are covered in the \nThe length Property\nThe\nlength\nproperty of an array returns the length of an array (the number of array \nelements).\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.length;\n\nThe\nlength\nproperty is always one more than the highest array index.\nAccessing the First Array Element\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[0];\n\nAccessing the Last Array Element\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[fruits.length - 1];\n\nLooping Array Elements\nOne way to loop through an array, is using a\nfor\nloop:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fLen = fruits.length;\nlet text = \"<ul>\";\nfor (let i = 0; i < fLen; i++) {\ntext += \"<li>\" + fruits[i] + \"</li>\";\n}\ntext \n  += \"</ul>\";\n\nYou can also use the\nArray.forEach()\nfunction:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet text = \"<ul>\";\nfruits.forEach(myFunction);\ntext += \"</ul>\";\nfunction \n  myFunction(value) {\ntext += \"<li>\" + value + \"</li>\";\n}\n\nAdding Array Elements\nThe easiest way to add a new element to an array is using the\npush()\nmethod:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits.push(\"Lemon\");\u00a0\u00a0// Adds a new element (Lemon) to fruits\n\nNew element can also be added to an array using the\nlength\nproperty:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[fruits.length] = \"Lemon\";\u00a0\u00a0// Adds \"Lemon\" to fruits\n\nWARNING !\nAdding elements with high indexes can create undefined \"holes\" in an array:\nExample\nconst fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[6] = \"Lemon\";\u00a0\u00a0// Creates undefined \"holes\" in fruits\n\nAssociative Arrays\nMany programming languages support arrays with named indexes.\nArrays with named indexes are called associative \narrays (or hashes).\nJavaScript does\nnot\nsupport arrays with named indexes.\nIn JavaScript,\narrays\nalways use\nnumbered indexes\n.\nExample\nconst person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0// Will return 3\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Will return \"John\"\n\nWARNING !!\nIf you use named indexes, JavaScript will redefine the array to an object.\nAfter that, some array methods and properties will produce\nincorrect \nresults\n.\nExample:\nconst person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0// Will return 0\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Will return undefined\n\nThe Difference Between Arrays and Objects\nIn JavaScript,\narrays\nuse\nnumbered indexes\n.\nIn JavaScript,\nobjects\nuse\nnamed indexes\n.\nArrays are a special kind of objects, with numbered indexes.\nWhen to Use Arrays. When to use Objects.\nJavaScript does not support associative arrays.\nYou should use\nobjects\nwhen you want the element names to be\nstrings (text)\n.\nYou should use\narrays\nwhen you want the element names to be\nnumbers\n.\nJavaScript new Array()\nJavaScript has a built-in array constructor\nnew Array()\n.\nBut you can safely use\n[]\ninstead.\nThese two different statements both create a new empty array named points:\nconst points = new Array();\nconst points = [];\nThese two different statements both create a new array containing 6 numbers:\nconst points = new Array(40, 100, 1, 5, 25, 10);\nconst points = [40, 100, 1, 5, 25, 10];\n\nThe\nnew\nkeyword can produce some unexpected results:\n// Create an array with three elements:\nconst points = new Array(40, 100, 1);\n\n// Create an array with two elements:\nconst points = new Array(40, 100);\n\n// Create an array with one element ???\nconst points = new Array(40);\n\nA Common Error\nconst points = [40];\nis not the same as:\nconst points = new Array(40);\n// Create an array with one element:\nconst points = [40];\n\n// Create an array with 40 undefined elements:\nconst points = new Array(40);\n\nHow to Recognize an Array\nA common question is: How do I know if a variable is an array?\nThe problem is that the JavaScript operator\ntypeof\nreturns \n\"\nobject\n\":\nconst fruits = [\"Banana\", \"Orange\", \"Apple\"];\nlet type = typeof fruits;\n\nThe typeof operator returns object because a JavaScript array is an \nobject.\nSolution 1:\nTo solve this problem ECMAScript 5 (JavaScript 2009) defined a new method\nArray.isArray()\n:\nArray.isArray(fruits);\n\nSolution 2:\nThe\ninstanceof\noperator returns true if an object is created \nby a given constructor:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\"];\n(fruits instanceof Array);\n\nNested Arrays and Objects\nValues in objects can be arrays, and values in arrays can be objects:\nExample\nconst myObj =\n  {\nname: \"John\",\nage: 30,\ncars: [\n{name:\"Ford\", \n  models:[\"Fiesta\", \"Focus\", \"Mustang\"]},\n{name:\"BMW\", models:[\"320\", \"X3\", \"X5\"]},\n{name:\"Fiat\", models:[\"500\", \"Panda\"]}\n]\n}\nTo access arrays inside arrays, use a for-in loop for each array:\nExample\nfor (let i in myObj.cars) {\nx += \"<h1>\" + myObj.cars[i].name \n  + \"</h1>\";\nfor (let j in myObj.cars[i].models) {\nx += myObj.cars[i].models[j];\n}\n}\n\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference\n.\nThe reference contains descriptions and examples of all Array \nproperties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const cars = [\n\"Saab\",\n\"Volvo\",\n\"BMW\"\n];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const cars = [];\ncars[0]= \"Saab\";\ncars[1]= \"Volvo\";\ncars[2]= \"BMW\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const cars = new Array(\"Saab\", \"Volvo\", \"BMW\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\nlet car = cars[0];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "cars[0] = \"Opel\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars[0] = \"Opel\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ndocument.getElementById(\"demo\").innerHTML = cars;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Array:",
      "content": "",
      "order": 12,
      "code": "const person = [\"John\", \"Doe\", 46];",
      "language": "javascript",
      "explanation": "Example of array:"
    },
    {
      "type": "code_example",
      "title": "Object:",
      "content": "",
      "order": 13,
      "code": "const person = {firstName:\"John\", lastName:\"Doe\", age:46};",
      "language": "javascript",
      "explanation": "Example of object:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "myArray[0] = Date.now;\nmyArray[1] = myFunction;\nmyArray[2] = myCars;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "cars.length\u00a0\u00a0\u00a0// Returns the number of elements\ncars.sort()\u00a0\u00a0\u00a0// Sorts the array",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.length;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[0];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[fruits.length - 1];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fLen = fruits.length;\nlet text = \"<ul>\";\nfor (let i = 0; i < fLen; i++) {\ntext += \"<li>\" + fruits[i] + \"</li>\";\n}\ntext \n  += \"</ul>\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet text = \"<ul>\";\nfruits.forEach(myFunction);\ntext += \"</ul>\";\nfunction \n  myFunction(value) {\ntext += \"<li>\" + value + \"</li>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits.push(\"Lemon\");\u00a0\u00a0// Adds a new element (Lemon) to fruits",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[fruits.length] = \"Lemon\";\u00a0\u00a0// Adds \"Lemon\" to fruits",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[6] = \"Lemon\";\u00a0\u00a0// Creates undefined \"holes\" in fruits",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "const person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0// Will return 3\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Will return \"John\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example:",
      "content": "",
      "order": 25,
      "code": "const person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;\u00a0\u00a0\u00a0\u00a0\u00a0// Will return 0\nperson[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Will return undefined",
      "language": "javascript",
      "explanation": "Example of example:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 26,
      "code": "const points = new Array();\nconst points = [];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 27,
      "code": "const points = new Array(40, 100, 1, 5, 25, 10);\nconst points = [40, 100, 1, 5, 25, 10];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 28,
      "code": "// Create an array with three elements:\nconst points = new Array(40, 100, 1);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 29,
      "code": "// Create an array with two elements:\nconst points = new Array(40, 100);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 30,
      "code": "// Create an array with one element ???\nconst points = new Array(40);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "A Common Error",
      "content": "",
      "order": 31,
      "code": "const points = [40];",
      "language": "javascript",
      "explanation": "Example of a common error"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 32,
      "code": "// Create an array with one element:\nconst points = [40];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 33,
      "code": "// Create an array with 40 undefined elements:\nconst points = new Array(40);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 34,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nlet type = typeof fruits;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 35,
      "code": "Array.isArray(fruits);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 36,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\n(fruits instanceof Array);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 37,
      "code": "const myObj =\n  {\nname: \"John\",\nage: 30,\ncars: [\n{name:\"Ford\", \n  models:[\"Fiesta\", \"Focus\", \"Mustang\"]},\n{name:\"BMW\", models:[\"320\", \"X3\", \"X5\"]},\n{name:\"Fiat\", models:[\"500\", \"Panda\"]}\n]\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 38,
      "code": "for (let i in myObj.cars) {\nx += \"<h1>\" + myObj.cars[i].name \n  + \"</h1>\";\nfor (let j in myObj.cars[i].models) {\nx += myObj.cars[i].models[j];\n}\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const cars = [\n\"Saab\",\n\"Volvo\",\n# TODO: Complete this line\n];",
      "solution": "const cars = [\n\"Saab\",\n\"Volvo\",\n\"BMW\"\n];"
    }
  ],
  "related_topics": [
    {
      "id": "77642663-6a59-4f2c-aaed-4c02abe0d4d5",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "32d827cb-aa15-497a-a70a-08ca9c8e60da",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5f26f945-5f80-46b7-9b92-65d3dc09fa5f",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nArrays\n\nAn array?",
      "options": [
        "None of the above.",
        "None of the above.",
        "an array",
        "a special variable"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of JavaScript\nArrays\n\nAn array is 'a special variable'."
    },
    {
      "question": "What is The solution?",
      "options": [
        "an array",
        "None of the above.",
        "None of the above.",
        "a special variable"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The solution is 'an array'."
    }
  ],
  "summary": "This tutorial covers JavaScriptArrays concepts and techniques. You'll learn how to use JavaScriptArrays effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptArrays and how to apply it in your projects."
}