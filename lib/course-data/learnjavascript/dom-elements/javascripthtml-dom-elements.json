{
  "id": "ef28d9c7-30cf-42cc-be88-6e9e7ad877a6",
  "title": "JavaScriptHTML DOM Elements",
  "slug": "javascripthtml-dom-elements",
  "metadata": {
    "description": "Learn about JavaScriptHTML DOM Elements with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "html",
      "elements",
      "document",
      "element",
      "example",
      "finding",
      "const",
      "class",
      "intro",
      "find"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "DOM Elements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nHTML DOM Elements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "This page teaches you how to find and access HTML elements in \nan HTML page.\nFinding HTML Elements\nOften, with JavaScript, you want to manipulate HTML elements.\nTo do so, you have to find the elements first. There are several ways to do this:\nFinding HTML elements by id\nFinding HTML elements by tag name\nFinding HTML elements by class name\nFinding HTML elements by CSS selectors\nFinding HTML elements by HTML object collections\nFinding HTML Element by Id\nThe easiest way to find an HTML element in the DOM, is by using the element id.\nThis example finds the element with\nid=\"intro\"\n:\nExample\nconst element = document.getElementById(\"intro\");\n\nIf the element is found, the method will return the element as an object (in element).\nIf the element is not found, element will contain\nnull\n.\nFinding HTML Elements by Tag Name\nThis example finds all\n<p>\nelements:\nExample\nconst element = document.getElementsByTagName(\"p\");\n\nThis example finds the element with\nid=\"main\"\n, and then finds all\n<p>\nelements \ninside\n\"main\"\n:\nExample\nconst x = document.getElementById(\"main\");\nconst y = x.getElementsByTagName(\"p\");\n\nFinding HTML Elements by Class Name\nIf you want to find all HTML elements with the same class name, use\ngetElementsByClassName()\n.\nThis example returns a list of all elements with\nclass=\"intro\"\n.\nExample\nconst x = document.getElementsByClassName(\"intro\");\n\nFinding HTML Elements by CSS Selectors\nIf you want to find all HTML elements that match a specified CSS selector \n(id, class names, types, attributes, values of attributes, etc), use the\nquerySelectorAll()\nmethod.\nThis example returns a list of all\n<p>\nelements with\nclass=\"intro\"\n.\nExample\nconst x = document.querySelectorAll(\"p.intro\");\n\nFinding HTML Elements by HTML Object Collections\nThis example finds the form element with\nid=\"frm1\"\n, in the forms \ncollection, and displays all element \nvalues:\nExample\nconst x = document.forms[\"frm1\"];\nlet text = \"\";\nfor (let i = 0; i < x.length; i++) {\ntext += x.elements[i].value + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;\n\nThe following HTML objects (and object collections) are also accessible:\ndocument.anchors\ndocument.body\ndocument.documentElement\ndocument.embeds\ndocument.forms\ndocument.head\ndocument.images\ndocument.links\ndocument.scripts\ndocument.title\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const element = document.getElementById(\"intro\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const element = document.getElementsByTagName(\"p\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const x = document.getElementById(\"main\");\nconst y = x.getElementsByTagName(\"p\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const x = document.getElementsByClassName(\"intro\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const x = document.querySelectorAll(\"p.intro\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const x = document.forms[\"frm1\"];\nlet text = \"\";\nfor (let i = 0; i < x.length; i++) {\ntext += x.elements[i].value + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const element = document.getElementById(\"intro\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const element = document.getElementsByTagName(\"p\");"
    }
  ],
  "related_topics": [
    {
      "id": "d8124461-fed8-421b-8196-4ba707f096c0",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b27d5b27-f8db-4bbb-aa32-63475e1cf1ee",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "12dc1eec-49b9-4268-90dd-69226bf7eb9b",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is There?",
      "options": [
        "None of the above.",
        "None of the above.",
        "several ways to do this:\nFinding HTML elements by id\nFinding HTML elements by tag name\nFinding HTML elements by class name\nFinding HTML elements by CSS selectors\nFinding HTML elements by HTML object collections\nFinding HTML Element by Id\nThe easiest way to find an HTML element in the DOM",
        "found"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of There is 'several ways to do this:\nFinding HTML elements by id\nFinding HTML elements by tag name\nFinding HTML elements by class name\nFinding HTML elements by CSS selectors\nFinding HTML elements by HTML object collections\nFinding HTML Element by Id\nThe easiest way to find an HTML element in the DOM'."
    },
    {
      "question": "What is If the element?",
      "options": [
        "found",
        "None of the above.",
        "several ways to do this:\nFinding HTML elements by id\nFinding HTML elements by tag name\nFinding HTML elements by class name\nFinding HTML elements by CSS selectors\nFinding HTML elements by HTML object collections\nFinding HTML Element by Id\nThe easiest way to find an HTML element in the DOM",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of If the element is 'found'."
    }
  ],
  "summary": "This tutorial covers JavaScriptHTML DOM Elements concepts and techniques. You'll learn how to use JavaScriptHTML DOM Elements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptHTML DOM Elements and how to apply it in your projects."
}