{
  "id": "09351563-3a03-4815-b6b9-874343bf2eb7",
  "title": "AJAX - ServerResponse",
  "slug": "ajax-serverresponse",
  "metadata": {
    "description": "Learn about AJAX - ServerResponse with clear explanations and practical examples.",
    "keywords": [
      "xhttp",
      "response",
      "server",
      "property",
      "returns",
      "method",
      "responsetext",
      "responsexml",
      "example",
      "document"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "AJAX Response"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "AJAX - Server\nResponse",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Server Response Properties\nProperty\nDescription\nresponseText\nget the response data as a string\nresponseXML\nget the response data as XML data\nThe responseText Property\nThe\nresponseText\nproperty returns the server response as a \nJavaScript string, and you can use it accordingly:\nExample\ndocument.getElementById(\"demo\").innerHTML = xhttp.responseText;\n\nThe responseXML Property\nThe XMLHttpRequest object has an in-built XML parser.\nThe\nresponseXML\nproperty returns the server response as an XML DOM object.\nUsing this property you can parse the response as an XML DOM object:\nExample\nRequest the file\ncd_catalog.xml\nand parse the response:\nconst xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"ARTIST\");\nlet txt = \"\";\nfor (let i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\nxhttp.open(\"GET\", \n \"cd_catalog.xml\");\nxhttp.send();\n\nServer Response Methods\nMethod\nDescription\ngetResponseHeader()\nReturns specific header information from the server resource\ngetAllResponseHeaders()\nReturns all the header information from the server resource\nThe getAllResponseHeaders() Method\nThe\ngetAllResponseHeaders()\nmethod returns all header information from the server response.\nExample\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getAllResponseHeaders();\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();\n\nThe getResponseHeader() Method\nThe\ngetResponseHeader()\nmethod returns specific header information from the server response.\nExample\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getResponseHeader(\"Last-Modified\");\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "document.getElementById(\"demo\").innerHTML = xhttp.responseText;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"ARTIST\");\nlet txt = \"\";\nfor (let i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\nxhttp.open(\"GET\", \n \"cd_catalog.xml\");\nxhttp.send();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getAllResponseHeaders();\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getResponseHeader(\"Last-Modified\");\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "document.getElementById(\"demo\").innerHTML = xhttp.responseText;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"ARTIST\");\nlet txt = \"\";\nfor (let i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\nxhttp.open(\"GET\", \n \"cd_catalog.xml\");\n# TODO: Complete this line",
      "solution": "const xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"ARTIST\");\nlet txt = \"\";\nfor (let i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\nxhttp.open(\"GET\", \n \"cd_catalog.xml\");\nxhttp.send();"
    }
  ],
  "related_topics": [
    {
      "id": "aca311d2-af17-42a7-94b9-6829dc7f663e",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "c5e4d39c-9a0d-42f9-ba66-56f35cdb039b",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e485575d-ebc0-43b4-8141-5714f3859e4a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers AJAX - ServerResponse concepts and techniques. You'll learn how to use AJAX - ServerResponse effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of AJAX - ServerResponse and how to apply it in your projects."
}