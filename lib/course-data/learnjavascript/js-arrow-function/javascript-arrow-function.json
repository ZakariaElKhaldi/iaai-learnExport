{
  "id": "3cb44f6c-e9e9-4950-801e-f0e5ebbc2ff5",
  "title": "JavaScript Arrow Function",
  "slug": "javascript-arrow-function",
  "metadata": {
    "description": "Learn about JavaScript Arrow Function with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "function",
      "arrow",
      "hello",
      "functions",
      "object",
      "window",
      "regular",
      "example",
      "document",
      "button"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Arrow Function"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Arrow Function",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Arrow functions were introduced in ES6.\nArrow functions allow us to write shorter function syntax:\nlet myFunction = (a, b) => a * b;\n\nBefore Arrow:\nhello = function() {\nreturn \"Hello World!\";\n}\n\nWith Arrow Function:\nhello = () => {\nreturn \"Hello World!\";\n}\n\nIt gets shorter! If the function has only one statement, and the statement \nreturns a value, you can remove the brackets\nand\nthe\nreturn\nkeyword:\nArrow Functions Return Value by Default:\nhello = () => \"Hello World!\";\n\nNote:\nThis works only if the function has only one \nstatement.\nIf you have parameters, you pass them inside the parentheses:\nArrow Function With Parameters:\nhello = (val) => \"Hello \" + val;\n\nIn fact, if you have only one parameter, you can skip the parentheses as well:\nArrow Function Without Parentheses:\nhello = val => \"Hello \" + val;\nthis\n\nWhat About\nthis\n?\nThe handling of\nthis\nis also different in arrow functions compared to regular \nfunctions.\nIn short, with arrow functions there are no binding of\nthis\n.\nIn regular functions the\nthis\nkeyword represented the object that called the \nfunction, which could be the window, the document, a button or whatever.\nWith arrow functions the\nthis\nkeyword\nalways\nrepresents the \nobject that \ndefined the arrow function.\nLet us take a look at two examples to understand the difference.\nBoth examples call a method twice, first when the page loads, and once again \nwhen the user clicks a button.\nThe first example uses a regular function, and the second example uses an \narrow function.\nThe result shows that the first example returns two different objects (window and button), \nand the \nsecond example returns the window object twice, because the window object is the \n\"owner\" of the function.\nExample\nWith a regular function\nthis\nrepresents the \nobject that\ncalls\nthe function:\n// Regular Function:\nhello = function() {\ndocument.getElementById(\"demo\").innerHTML \n  += this;\n}\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n// A button object calls the \n  function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);\n\nExample\nWith an arrow function\nthis\nrepresents the\nowner\nof the function:\n// Arrow Function:\nhello = () => {\ndocument.getElementById(\"demo\").innerHTML \n  += this;\n}\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n// A button object calls the \n  function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);\n\nRemember these differences when you are working with functions. Sometimes the \nbehavior of regular functions is what you want, if not, use arrow functions.\nBrowser Support\nThe following table defines the first browser versions with full support for \nArrow Functions in JavaScript:\nChrome 45\nEdge 12\nFirefox 22\nSafari 10\nOpera 32\nSep, 2015\nJul, 2015\nMay, 2013\nSep, 2016\nSep, 2015\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Before Arrow:",
      "content": "",
      "order": 3,
      "code": "hello = function() {\nreturn \"Hello World!\";\n}",
      "language": "javascript",
      "explanation": "Example of before arrow:"
    },
    {
      "type": "code_example",
      "title": "With Arrow Function:",
      "content": "",
      "order": 4,
      "code": "hello = () => {\nreturn \"Hello World!\";\n}",
      "language": "javascript",
      "explanation": "Example of with arrow function:"
    },
    {
      "type": "code_example",
      "title": "Arrow Functions Return Value by Default:",
      "content": "",
      "order": 5,
      "code": "hello = () => \"Hello World!\";",
      "language": "javascript",
      "explanation": "Example of arrow functions return value by default:"
    },
    {
      "type": "code_example",
      "title": "Arrow Function With Parameters:",
      "content": "",
      "order": 6,
      "code": "hello = (val) => \"Hello \" + val;",
      "language": "javascript",
      "explanation": "Example of arrow function with parameters:"
    },
    {
      "type": "code_example",
      "title": "Arrow Function Without Parentheses:",
      "content": "",
      "order": 7,
      "code": "hello = val => \"Hello \" + val;",
      "language": "javascript",
      "explanation": "Example of arrow function without parentheses:"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Regular Function:\nhello = function() {\ndocument.getElementById(\"demo\").innerHTML \n  += this;\n}\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n// A button object calls the \n  function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "// Arrow Function:\nhello = () => {\ndocument.getElementById(\"demo\").innerHTML \n  += this;\n}\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n// A button object calls the \n  function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "hello = function() {\n# TODO: Complete this line\n}",
      "solution": "hello = function() {\nreturn \"Hello World!\";\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "hello = () => {\n# TODO: Complete this line\n}",
      "solution": "hello = () => {\nreturn \"Hello World!\";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "0541a0dd-1fd9-4582-a937-c9553655eefb",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "788b7556-b430-4777-8af5-433d4368e0b2",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "de29d6e5-2421-4150-b29f-184c2fd99f7d",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The handling of\nthis?",
      "options": [
        "also different in arrow functions compared to regular \nfunctions",
        "None of the above.",
        "no binding of\nthis",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The handling of\nthis is 'also different in arrow functions compared to regular \nfunctions'."
    },
    {
      "question": "What is with arrow functions there?",
      "options": [
        "also different in arrow functions compared to regular \nfunctions",
        "no binding of\nthis",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of with arrow functions there is 'no binding of\nthis'."
    }
  ],
  "summary": "This tutorial covers JavaScript Arrow Function concepts and techniques. You'll learn how to use JavaScript Arrow Function effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Arrow Function and how to apply it in your projects."
}