{
  "id": "2f8e6676-9d23-4457-b292-f70ffa7c1fe0",
  "title": "JavaScript Callbacks",
  "slug": "javascript-callbacks",
  "metadata": {
    "description": "Learn about JavaScript Callbacks with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "function",
      "mydisplayer",
      "callback",
      "example",
      "mycalculator",
      "call",
      "result",
      "another",
      "calculator",
      "argument"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Callbacks"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Callbacks",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "\"I will call back later!\"\nA callback is a function passed as an argument to another function\nThis technique allows a function to call another function\nA callback function can run after another function has finished\nFunction Sequence\nJavaScript functions are executed in the sequence they are called.\nNot in the sequence they are defined.\nThis example will end up displaying \"Goodbye\":\nExample\nfunction myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmyFirst();\nmySecond();\n\nThis example will end up displaying \"Hello\":\nExample\nfunction myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmySecond();\nmyFirst();\n\nSequence Control\nSometimes you would like to have better control over when to execute a function.\nSuppose you want to do a calculation, and then display the result.\nYou could call a calculator function (\nmyCalculator\n), save the result,\nand then call another function (\nmyDisplayer\n) to display the result:\nExample\nfunction myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nreturn sum;\n}\nlet result = myCalculator(5, 5);\nmyDisplayer(result);\n\nOr, you could call a calculator function (\nmyCalculator\n),\nand let the calculator function call the display function (\nmyDisplayer\n):\nExample\nfunction myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML \n  = some;\n}\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nmyDisplayer(sum);\n}\nmyCalculator(5, 5);\n\nThe problem with the first example above, is that you have to call two functions to display the result.\nThe problem with the second example, is that you cannot prevent the calculator function from \ndisplaying the result.\nNow it is time to bring in a callback.\nJavaScript Callbacks\nA callback is a function passed as an argument to another function.\nUsing a callback, you could call the calculator function (\nmyCalculator\n)\nwith a callback (\nmyCallback\n), and let the calculator function run the callback after the calculation is finished:\nExample\nfunction myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML \n  = some;\n}\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);\n\nIn the example above,\nmyDisplayer\nis a called a\ncallback function\n.\nIt is passed to\nmyCalculator()\nas an\nargument\n.\nNote\nWhen you pass a function as an argument, remember not to use parenthesis.\nRight: myCalculator(5, 5, myDisplayer);\nWrong:\nmyCalculator(5, 5, myDisplayer())\n;\nExample\n// Create an Array\nconst myNumbers = [4, 1, -20, -7, 5, 9, -6];\n// Call removeNeg with a callback\nconst posNumbers = removeNeg(myNumbers, (x) => x >= 0);\n// Display Result\ndocument.getElementById(\"demo\").innerHTML = posNumbers;\n// Keep only positive numbers\nfunction removeNeg(numbers, callback) {\nconst myArray = [];\nfor (const x of numbers) {\nif (callback(x)) {\nmyArray.push(x);\n}\n}\nreturn myArray;\n}\n\nIn the example above,\n(x) => x >= 0\nis a\ncallback function\n.\nIt is passed to\nremoveNeg()\nas an\nargument\n.\nWhen to Use a Callback?\nThe examples above are not very exciting.\nThey are simplified to teach you the callback syntax.\nWhere callbacks really shine are in asynchronous functions, \nwhere one function has to wait for another function (like waiting for a file to load).\nAsynchronous functions are covered in the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "function myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmyFirst();\nmySecond();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "function myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmySecond();\nmyFirst();",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nreturn sum;\n}\nlet result = myCalculator(5, 5);\nmyDisplayer(result);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML \n  = some;\n}\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nmyDisplayer(sum);\n}\nmyCalculator(5, 5);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML \n  = some;\n}\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\nmyCalculator(5, 5, myDisplayer);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "// Create an Array\nconst myNumbers = [4, 1, -20, -7, 5, 9, -6];\n// Call removeNeg with a callback\nconst posNumbers = removeNeg(myNumbers, (x) => x >= 0);\n// Display Result\ndocument.getElementById(\"demo\").innerHTML = posNumbers;\n// Keep only positive numbers\nfunction removeNeg(numbers, callback) {\nconst myArray = [];\nfor (const x of numbers) {\nif (callback(x)) {\nmyArray.push(x);\n}\n}\nreturn myArray;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n# TODO: Complete this line\nmyFirst();\nmySecond();",
      "solution": "function myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmyFirst();\nmySecond();"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function myFirst() {\nmyDisplayer(\"Hello\");\n# TODO: Complete this line\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmySecond();\nmyFirst();",
      "solution": "function myFirst() {\nmyDisplayer(\"Hello\");\n}\nfunction \n  mySecond() {\nmyDisplayer(\"Goodbye\");\n}\nmySecond();\nmyFirst();"
    }
  ],
  "related_topics": [
    {
      "id": "df78e070-74f5-4a6d-bc94-ccc26af9c9a1",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f3900ff0-2472-439f-a341-efdf004798dd",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "e6c7ee5c-6695-487a-89a4-00d5f33b321e",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is A callback is a function passed as an argument to another function\nThis technique allows a function to call another function\nA callback function can run after another function has finished\nFunction Sequence\nJavaScript functions are executed in the sequence they?",
      "options": [
        "defined",
        "None of the above.",
        "None of the above.",
        "called"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A callback is a function passed as an argument to another function\nThis technique allows a function to call another function\nA callback function can run after another function has finished\nFunction Sequence\nJavaScript functions are executed in the sequence they is 'called'."
    },
    {
      "question": "What is Not in the sequence they?",
      "options": [
        "None of the above.",
        "called",
        "None of the above.",
        "defined"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Not in the sequence they is 'defined'."
    }
  ],
  "summary": "This tutorial covers JavaScript Callbacks concepts and techniques. You'll learn how to use JavaScript Callbacks effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Callbacks and how to apply it in your projects."
}