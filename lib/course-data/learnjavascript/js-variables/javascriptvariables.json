{
  "id": "d7679ba0-337d-44b3-94ec-d6059b4f59bf",
  "title": "JavaScriptVariables",
  "slug": "javascriptvariables",
  "metadata": {
    "description": "Learn about JavaScriptVariables with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "variables",
      "value",
      "example",
      "variable",
      "carname",
      "const",
      "names",
      "like",
      "using"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Variables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nVariables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Variables are Containers for Storing Data\nJavaScript Variables can be declared in 4 ways:\nAutomatically\nUsing\nvar\nUsing\nlet\nUsing\nconst\nIn this first example,\nx\n,\ny\n, and\nz\nare undeclared variables.\nThey are automatically declared when first used:\nExample\nx = 5;\ny = 6;\nz = x + y;\n\nNote\nIt is considered good programming practice to always declare variables before use.\nFrom the examples you can guess:\nx stores the value 5\ny stores the value 6\nz stores the value 11\nExample using var\nvar x = 5;\nvar y = 6;\nvar z = x + y;\n\nNote\nThe\nvar\nkeyword was used in all JavaScript code from 1995 to 2015.\nThe\nlet\nand\nconst\nkeywords were added to JavaScript in 2015.\nThe\nvar\nkeyword should only be used in code written for older browsers.\nExample using let\nlet x = 5;\nlet y = 6;\nlet z = x + y;\n\nExample using const\nconst x = 5;\nconst y = 6;\nconst z = x + y;\n\nMixed Example\nconst price1 = 5;\nconst price2 = 6;\nlet total = price1 + price2;\n\nThe two variables\nprice1\nand\nprice2\nare declared with the\nconst\nkeyword.\nThese are constant values and cannot be changed.\nThe variable\ntotal\nis declared with the\nlet\nkeyword.\nThe value\ntotal\ncan be changed.\nWhen to Use var, let, or const?\n1. Always declare variables\n2. Always use\nconst\nif the value should not be changed\n3. Always use\nconst\nif the type should not be changed (Arrays and Objects)\n4. Only use\nlet\nif you can't use\nconst\n5. Only use\nvar\nif you MUST support old browsers.\nJust Like Algebra\nJust like in algebra, variables hold values:\nlet x = 5;\nlet y = 6;\nJust like in algebra, variables are used in expressions:\nlet z = x + y;\nFrom the example above, you can guess that the total is calculated to be 11.\nNote\nVariables are containers for storing values.\nJavaScript Identifiers\nAll JavaScript\nvariables\nmust be\nidentified\nwith\nunique names\n.\nThese unique names are called\nidentifiers\n.\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\nThe general rules for constructing names for variables (unique identifiers) are:\nNames can contain letters, digits, underscores, and dollar signs.\nNames must begin with a letter.\nNames can also begin with $ and _ (but we will not use it in this tutorial).\nNames are case sensitive (y and Y are different variables).\nReserved words (like JavaScript keywords) cannot be used as names.\nNote\nJavaScript identifiers are case-sensitive.\nThe Assignment Operator\nIn JavaScript, the equal sign (\n=\n) is an \"assignment\" operator, not an \n\"equal to\" operator.\nThis is different from algebra. The following does not make sense in \nalgebra:\nx = x + 5\nIn JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to \nx.\n(It calculates the value of x + 5 and puts the result into x. The value of x \nis incremented by 5.)\nNote\nThe \"equal to\" operator is written like\n==\nin JavaScript.\nJavaScript Data Types\nJavaScript variables can hold numbers like 100 and text values like \"John \nDoe\".\nIn programming, text values are called text strings.\nJavaScript can handle many types of data, but for now, just think of numbers and strings.\nStrings are written inside double or single quotes. Numbers are written \nwithout quotes.\nIf you put a number in quotes, it will be treated as a text string.\nExample\nconst pi = 3.14;\nlet person = \"John Doe\";\nlet answer = 'Yes I am!';\n\nDeclaring a JavaScript Variable\nCreating a variable in JavaScript is called \"declaring\" a variable.\nYou declare a JavaScript variable with the\nvar\nor the\nlet\nkeyword:\nvar carName;\nor:\nlet carName;\nAfter the declaration, the variable has no value (technically it is\nundefined\n).\nTo\nassign\na value to the variable, use the equal sign:\ncarName = \"Volvo\";\nYou can also assign a value to the variable when you declare it:\nlet carName = \"Volvo\";\nIn the example below, we create a variable called\ncarName\nand assign the value \n\"Volvo\" to it.\nThen we \"output\" the value inside an HTML paragraph with id=\"demo\":\nExample\n<p id=\"demo\"></p>\n<script>\nlet carName = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = carName;\n</script>\n\nNote\nIt's a good programming practice to declare all variables at the beginning of a script.\nOne Statement, Many Variables\nYou can declare many variables in one statement.\nStart the statement \nwith\nlet\nand separate the variables by\ncomma\n:\nExample\nlet person = \"John Doe\", carName = \"Volvo\", price = 200;\n\nA declaration can span multiple lines:\nExample\nlet person = \"John Doe\",\ncarName = \"Volvo\",\nprice = 200;\n\nValue = undefined\nIn computer programs, variables are often declared without a value. The value \ncan be something that has to be calculated, or something that will be provided \nlater, like user input.\nA variable declared without a value will have the value\nundefined\n.\nThe variable carName will have the value\nundefined\nafter the execution of this statement:\nExample\nlet carName;\n\nRe-Declaring JavaScript Variables\nIf you re-declare a JavaScript variable declared with\nvar\n, it will not lose its value.\nThe variable\ncarName\nwill still have the value \"Volvo\" after the execution of these statements:\nExample\nvar carName = \"Volvo\";\nvar carName;\n\nNote\nYou cannot re-declare a variable declared with\nlet\nor\nconst\n.\nThis will not work:\nlet carName = \"Volvo\";\nlet carName;\nJavaScript Arithmetic\nAs with algebra, you can do arithmetic with JavaScript variables, using \noperators like\n=\nand\n+\n:\nExample\nlet x = 5 + 2 + 3;\n\nYou can also add strings, but strings will be concatenated:\nExample\nlet x = \"John\" + \" \" + \"Doe\";\n\nAlso try this:\nExample\nlet x = \"5\" + 2 + 3;\n\nNote\nIf you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.\nNow try this:\nExample\nlet x = 2 + 3 + \"5\";\n\nJavaScript Dollar Sign $\nSince JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:\nExample\nlet $ = \"Hello World\";\nlet $$$ = 2;\nlet $myMoney = 5;\n\nUsing the dollar sign is not very common in JavaScript,\nbut professional programmers often use it \nas an alias for the main function in a JavaScript library.\nIn the JavaScript library jQuery, for instance, the main function\n$\nis used to select HTML elements.\nIn jQuery\n$(\"p\");\nmeans \"select all p elements\".\nJavaScript Underscore (_)\nSince JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:\nExample\nlet _lastName = \"Johnson\";\nlet _x = 2;\nlet _100 = 5;\n\nUsing the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n\"private (hidden)\" variables.\nVideo: JavaScript Variables\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = 5;\ny = 6;\nz = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example using var",
      "content": "",
      "order": 4,
      "code": "var x = 5;\nvar y = 6;\nvar z = x + y;",
      "language": "javascript",
      "explanation": "Example of example using var"
    },
    {
      "type": "code_example",
      "title": "Example using let",
      "content": "",
      "order": 5,
      "code": "let x = 5;\nlet y = 6;\nlet z = x + y;",
      "language": "javascript",
      "explanation": "Example of example using let"
    },
    {
      "type": "code_example",
      "title": "Example using const",
      "content": "",
      "order": 6,
      "code": "const x = 5;\nconst y = 6;\nconst z = x + y;",
      "language": "javascript",
      "explanation": "Example of example using const"
    },
    {
      "type": "code_example",
      "title": "Mixed Example",
      "content": "",
      "order": 7,
      "code": "const price1 = 5;\nconst price2 = 6;\nlet total = price1 + price2;",
      "language": "javascript",
      "explanation": "Example of mixed example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = 5;\nlet y = 6;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "let z = x + y;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "x = x + 5",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const pi = 3.14;\nlet person = \"John Doe\";\nlet answer = 'Yes I am!';",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "var carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "carName = \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "let carName = \"Volvo\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "<p id=\"demo\"></p>\n<script>\nlet carName = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = carName;\n</script>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "let person = \"John Doe\", carName = \"Volvo\", price = 200;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "let person = \"John Doe\",\ncarName = \"Volvo\",\nprice = 200;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "let carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "var carName = \"Volvo\";\nvar carName;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "let x = 5 + 2 + 3;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "let x = \"John\" + \" \" + \"Doe\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "let x = \"5\" + 2 + 3;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 23,
      "code": "let x = 2 + 3 + \"5\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 24,
      "code": "let $ = \"Hello World\";\nlet $$$ = 2;\nlet $myMoney = 5;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 25,
      "code": "let _lastName = \"Johnson\";\nlet _x = 2;\nlet _100 = 5;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = 5;\n# TODO: Complete this line\nz = x + y;",
      "solution": "x = 5;\ny = 6;\nz = x + y;"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "var x = 5;\nvar y = 6;\n# TODO: Complete this line",
      "solution": "var x = 5;\nvar y = 6;\nvar z = x + y;"
    }
  ],
  "related_topics": [
    {
      "id": "0ac4f4b9-38d6-455f-84ce-fd9173e88353",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "29d0c539-0714-4d2c-a0bc-ab8053793087",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3eb1905c-303d-4ceb-9dbd-b8f35e2a27cc",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nVariables\n\nVariables?",
      "options": [
        "None of the above.",
        "None of the above.",
        "Containers for Storing Data\nJavaScript Variables can be declared in 4 ways:\nAutomatically\nUsing\nvar\nUsing\nlet\nUsing\nconst\nIn this first example",
        "automatically declared when first used:\nExample\nx = 5;\ny = 6;\nz = x + y;\n\nNote\nIt is considered good programming practice to always declare variables before use"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript\nVariables\n\nVariables is 'Containers for Storing Data\nJavaScript Variables can be declared in 4 ways:\nAutomatically\nUsing\nvar\nUsing\nlet\nUsing\nconst\nIn this first example'."
    },
    {
      "question": "What is They?",
      "options": [
        "automatically declared when first used:\nExample\nx = 5;\ny = 6;\nz = x + y;\n\nNote\nIt is considered good programming practice to always declare variables before use",
        "Containers for Storing Data\nJavaScript Variables can be declared in 4 ways:\nAutomatically\nUsing\nvar\nUsing\nlet\nUsing\nconst\nIn this first example",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of They is 'automatically declared when first used:\nExample\nx = 5;\ny = 6;\nz = x + y;\n\nNote\nIt is considered good programming practice to always declare variables before use'."
    }
  ],
  "summary": "This tutorial covers JavaScriptVariables concepts and techniques. You'll learn how to use JavaScriptVariables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptVariables and how to apply it in your projects."
}