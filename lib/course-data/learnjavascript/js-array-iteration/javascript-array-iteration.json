{
  "id": "72e62244-4408-43e5-9fe0-1e7408cb801f",
  "title": "JavaScript Array Iteration",
  "slug": "javascript-array-iteration",
  "metadata": {
    "description": "Learn about JavaScript Array Iteration with clear explanations and practical examples.",
    "keywords": [
      "array",
      "value",
      "example",
      "const",
      "function",
      "myfunction",
      "numbers",
      "javascript",
      "method",
      "index"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 6,
    "category": "LearnJavaScript",
    "subcategory": "JS Array Iteration"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript Array Iteration",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Array Iteration Methods\nArray iteration methods operate on every array item:\nArray forEach\nArray map()\nArray flatMap()\nArray filter()\nArray reduce()\nArray reduceRight()\nSee Also:\nBasic Array Methods\nArray Search Methods\nArray Sort Methods\nArray every()\nArray some()\nArray from()\nArray keys()\nArray entries()\nArray with()\nArray Spread (...)\nJavaScript Array forEach()\nThe\nforEach()\nmethod calls a function (a callback function) once for each array element.\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value, index, array) {\ntxt += value + \"<br>\";\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nThe example above uses only the value parameter. The example can be rewritten \nto:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt += value + \"<br>\";\n}\n\nJavaScript Array map()\nThe\nmap()\nmethod creates a new array by performing a function on each array element.\nThe\nmap()\nmethod does not execute the function for array \nelements without values.\nThe\nmap()\nmethod does not change the original array.\nThis example multiplies each array value by 2:\nExample\nconst numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\nfunction myFunction(value, index, array) {\nreturn value * 2;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nWhen a callback function uses only the value parameter, the index and array \nparameters can be omitted:\nExample\nconst numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\nfunction myFunction(value) {\nreturn value * 2;\n}\n\nJavaScript Array flatMap()\nES2019\nadded the Array\nflatMap()\nmethod to JavaScript.\nThe\nflatMap()\nmethod first maps all elements of an array\nand then creates a new array by flattening the array.\nExample\nconst myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap((x) => x * 2);\n\nBrowser Support\nJavaScript Array\nflatMap()\nis supported in all modern browsers since January 2020:\nChrome 69\nEdge 79\nFirefox 62\nSafari 12\nOpera 56\nSep 2018\nJan 2020\nSep 2018\nSep 2018\nSep 2018\nJavaScript Array filter()\nThe\nfilter()\nmethod creates a new array with array elements that pass a test.\nThis example creates a new array from elements with a value larger than 18:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nIn the example above, the callback function does not use the index and array \nparameters, so they can be omitted:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nconst over18 = \n  numbers.filter(myFunction);\nfunction myFunction(value) {\nreturn value > 18;\n}\n\nJavaScript Array reduce()\nThe\nreduce()\nmethod runs a function on each array element to produce (reduce it to) a single value.\nThe\nreduce()\nmethod works from left-to-right in the array. See also\nreduceRight()\n.\nThe\nreduce()\nmethod does not reduce the original array.\nThis example finds the sum of all numbers in an array:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}\n\nNote that the function takes 4 arguments:\nThe total (the initial value / \nThe item value\nThe item index\nThe array itself\nThe example above does not use the index and array parameters. It can be \nrewritten to:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}\n\nThe\nreduce()\nmethod can accept an initial value:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction, \n  100);\nfunction myFunction(total, value) {\nreturn total + value;\n}\n\nJavaScript Array reduceRight()\nThe\nreduceRight()\nmethod runs a function on each array element to produce (reduce it to) a single value.\nThe\nreduceRight()\nworks from right-to-left in the array. See also\nreduce()\n.\nThe\nreduceRight()\nmethod does not reduce the original array.\nThis example finds the sum of all numbers in an array:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}\n\nNote that the function takes 4 arguments:\nThe total (the initial value / \nThe item value\nThe item index\nThe array itself\nThe example above does not use the index and array parameters. It can be \nrewritten to:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}\n\nJavaScript Array every()\nThe\nevery()\nmethod checks if all array values pass a test.\nThis example checks if all array values are larger than 18:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nWhen a callback function uses the first parameter only (value), the other \nparameters can be omitted:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}\n\nJavaScript Array some()\nThe\nsome()\nmethod checks if some array values pass a test.\nThis example checks if some array values are larger than 18:\nExample\nconst numbers = [45, 4, 9, 16, 25];\nlet someOver18 = numbers.some(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}\n\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nJavaScript Array.from()\nThe\nArray.from()\nmethod returns an Array object from any object with a length \nproperty or any iterable object.\nExample\nCreate an Array from a String:\nArray.from(\"ABCDEFG\");\n\nBrowser Support\nfrom()\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nfrom()\nis not supported in Internet Explorer.\nJavaScript Array keys()\nThe\nArray.keys()\nmethod returns an Array Iterator object with the keys of an array.\nExample\nCreate an Array Iterator object, containing the keys of the array:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\nfor (let x of keys) {\ntext += x + \"<br>\";\n}\n\nBrowser Support\nkeys()\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nkeys()\nis not supported in Internet Explorer.\nJavaScript Array entries()\nExample\nCreate an Array Iterator, and then iterate over the key/value pairs:\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}\n\nThe\nentries()\nmethod returns an Array Iterator object with key/value pairs:\n[0, \"Banana\"]\n[1, \"Orange\"]\n[2, \"Apple\"]\n[3, \"Mango\"]\nThe\nentries()\nmethod does not change the original array.\nBrowser Support\nentries()\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\nentries()\nis not supported in Internet Explorer.\nJavaScript Array with() Method\nES2023\nadded the Array with() method as a safe way to update elements in an array without altering the original array.\nExample\nconst months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst myMonths = months.with(2, \"March\");\n\nJavaScript Array Spread (...)\nThe ... operator expands an iterable (like an array) into more elements:\nExample\nconst q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"Des\"];\nconst year = [...q1, ...q2, ...q3, ...q4];\n\nBrowser Support\n...\nis an\nES6  feature\n(JavaScript 2015).\nES6 is fully supported in all modern browsers since June 2017:\nChrome 51\nEdge 15\nFirefox 54\nSafari 10\nOpera 38\nMay 2016\nApr 2017\nJun 2017\nSep 2016\nJun 2016\n...\nis not supported in Internet Explorer.\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference\n.\nThe reference contains descriptions and examples of all Array \nproperties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value, index, array) {\ntxt += value + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt += value + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\nfunction myFunction(value, index, array) {\nreturn value * 2;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\nfunction myFunction(value) {\nreturn value * 2;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap((x) => x * 2);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const numbers = [45, 4, 9, 16, 25];\nconst over18 = \n  numbers.filter(myFunction);\nfunction myFunction(value) {\nreturn value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction, \n  100);\nfunction myFunction(total, value) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\nfunction myFunction(total, value) {\nreturn total + value;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = \n  numbers.every(myFunction);\nfunction myFunction(value) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "const numbers = [45, 4, 9, 16, 25];\nlet someOver18 = numbers.some(myFunction);\nfunction myFunction(value, index, array) {\nreturn \n  value > 18;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "Array.from(\"ABCDEFG\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\nfor (let x of keys) {\ntext += x + \"<br>\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 20,
      "code": "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 21,
      "code": "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst myMonths = months.with(2, \"March\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 22,
      "code": "const q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"Des\"];\nconst year = [...q1, ...q2, ...q3, ...q4];",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value, index, array) {\ntxt += value + \"<br>\";\n# TODO: Complete this line",
      "solution": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value, index, array) {\ntxt += value + \"<br>\";\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt += value + \"<br>\";\n# TODO: Complete this line",
      "solution": "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\nfunction myFunction(value) {\ntxt += value + \"<br>\";\n}"
    }
  ],
  "related_topics": [
    {
      "id": "2bf0f144-4e83-4a8c-b331-696de4cd44eb",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "45798fe2-3667-4cd8-ac05-8b5746d496c6",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "1e43a545-ddec-410e-9a13-86a64c7683d1",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is This example checks if all array values?",
      "options": [
        "Not a This example checks if all array values.",
        "None of the above.",
        "None of the above.",
        "larger than 18:\nExample\nconst numbers = [45"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of This example checks if all array values is 'larger than 18:\nExample\nconst numbers = [45'."
    },
    {
      "question": "Which best describes the main purpose of this javascript feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers JavaScript Array Iteration concepts and techniques. You'll learn how to use JavaScript Array Iteration effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScript Array Iteration and how to apply it in your projects."
}