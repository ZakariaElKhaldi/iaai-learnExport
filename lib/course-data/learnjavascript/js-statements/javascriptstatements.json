{
  "id": "9e5635df-4f5c-4ddb-bb2d-c8fc30031537",
  "title": "JavaScriptStatements",
  "slug": "javascriptstatements",
  "metadata": {
    "description": "Learn about JavaScriptStatements with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "statements",
      "statement",
      "executed",
      "code",
      "block",
      "keywords",
      "blocks",
      "example",
      "programs"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Statements"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nStatements",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Statements\nExample\nlet x, y, z;\u00a0\u00a0\u00a0 // Statement 1\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 2\ny = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 3\nz = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0 //  Statement 4\n\nJavaScript Programs\nA\ncomputer program\nis a list of \"instructions\" to be \n\"executed\" by a computer.\nIn a programming language, these programming instructions are called\nstatements\n.\nA\nJavaScript program\nis a list of programming\nstatements\n.\nIn HTML, JavaScript programs are executed by the web browser.\nJavaScript Statements\nJavaScript statements are composed of:\nValues, Operators, Expressions,\u00a0Keywords, \nand Comments.\nThis statement tells the browser to write \"Hello Dolly.\" \ninside an HTML element with id=\"demo\":\nExample\ndocument.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";\n\nMost JavaScript \nprograms contain many JavaScript statements.\nThe statements are executed, one by one, in the \nsame order as they are written.\nJavaScript programs (and JavaScript statements) are often called JavaScript code.\nSemicolons ;\nSemicolons separate JavaScript statements.\nAdd a semicolon at the end of each executable statement:\nExamples\nlet a, b, c;\u00a0 // Declare 3 variables\na = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Assign the value 5 to a\nb = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Assign the \n  value 6 to b\nc = a + b;\u00a0\u00a0\u00a0 // Assign the sum of a and b to c\n\nWhen separated by semicolons, multiple statements on one line are allowed:\na = 5; b = 6; c = a + b;\n\nOn the web, you might see examples without semicolons.\nEnding statements with semicolon is not required, but highly recommended.\nJavaScript White Space\nJavaScript ignores multiple spaces. You can add white space to your script to make it more readable.\nThe following lines are equivalent:\nlet person = \"Hege\";\nlet person=\"Hege\";\nA good practice is to put spaces around operators ( = + - * / ):\nlet x = y + z;\nJavaScript Line Length and Line Breaks\nFor best readability, programmers often like to avoid code lines longer than 80 \ncharacters.\nIf a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:\nExample\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";\n\nJavaScript Code Blocks\nJavaScript statements can be grouped together in code blocks, inside curly \nbrackets {...}.\nThe purpose of code blocks is to define statements to be executed together.\nOne place you will find statements grouped together in blocks, is in \nJavaScript functions:\nExample\nfunction myFunction() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hello Dolly!\";\ndocument.getElementById(\"demo2\").innerHTML = \"How are you?\";\n}\n\nIn this tutorial we use 2 spaces of indentation for code blocks.\nYou will learn more about functions later in this tutorial.\nJavaScript Keywords\nJavaScript statements often start with a\nkeyword\nto identify the JavaScript action to be performed.\nOur\nReserved Words Reference\nlists all JavaScript keywords.\nHere is a list of some of the keywords you will learn about in \nthis tutorial:\nKeyword\nDescription\nvar\nDeclares a variable\nlet\nDeclares a block variable\nconst\nDeclares a block constant\nif\nMarks a block of statements to be executed on a condition\nswitch\nMarks a block of statements to be executed in different cases\nfor\nMarks a block of statements to be executed in a loop\nfunction\nDeclares a function\nreturn\nExits a function\ntry\nImplements error handling to a block of statements\nJavaScript keywords are reserved words. Reserved words cannot be used as names for variables.\nVideo: JavaScript Statements\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let x, y, z;\u00a0\u00a0\u00a0 // Statement 1\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 2\ny = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 3\nz = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0 //  Statement 4",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "document.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 5,
      "code": "let a, b, c;\u00a0 // Declare 3 variables\na = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Assign the value 5 to a\nb = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Assign the \n  value 6 to b\nc = a + b;\u00a0\u00a0\u00a0 // Assign the sum of a and b to c",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "a = 5; b = 6; c = a + b;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "let person = \"Hege\";\nlet person=\"Hege\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "let x = y + z;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "function myFunction() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hello Dolly!\";\ndocument.getElementById(\"demo2\").innerHTML = \"How are you?\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "let x, y, z;\u00a0\u00a0\u00a0 // Statement 1\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 2\n# TODO: Complete this line\nz = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0 //  Statement 4",
      "solution": "let x, y, z;\u00a0\u00a0\u00a0 // Statement 1\nx = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 2\ny = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Statement 3\nz = x + y;\u00a0\u00a0\u00a0\u00a0\u00a0 //  Statement 4"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "document.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";"
    }
  ],
  "related_topics": [
    {
      "id": "3051e8e9-c2a6-4d9c-a1e5-f348c8e5e38f",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "8d57aa34-6f38-4204-adeb-bfddea55a270",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d270aec5-e77d-4be5-86dc-59cfeb4432af",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript Programs\nA\ncomputer program?",
      "options": [
        "None of the above.",
        "called\nstatements",
        "a list of \"instructions\" to be \n\"executed\" by a computer",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of JavaScript Programs\nA\ncomputer program is 'a list of \"instructions\" to be \n\"executed\" by a computer'."
    },
    {
      "question": "What is these programming instructions?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a list of \"instructions\" to be \n\"executed\" by a computer",
        "called\nstatements"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of these programming instructions is 'called\nstatements'."
    }
  ],
  "summary": "This tutorial covers JavaScriptStatements concepts and techniques. You'll learn how to use JavaScriptStatements effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptStatements and how to apply it in your projects."
}