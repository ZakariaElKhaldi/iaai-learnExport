{
  "id": "d551b094-a513-4ec8-8d2e-fff1f24ca3be",
  "title": "JavaScriptArray Const",
  "slug": "javascriptarray-const",
  "metadata": {
    "description": "Learn about JavaScriptArray Const with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "cars",
      "const",
      "volvo",
      "array",
      "allowed",
      "declared",
      "example",
      "saab",
      "block",
      "toyota"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Array Const"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nArray Const",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "ECMAScript 2015 (ES6)\nIn 2015, JavaScript introduced an important new keyword:\nconst\n.\nIt has become a common practice to declare arrays using\nconst\n:\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\nCannot be Reassigned\nAn array declared with\nconst\ncannot be reassigned:\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];\u00a0\u00a0\u00a0 // ERROR\n\nArrays are Not Constants\nThe keyword\nconst\nis a little misleading.\nIt does NOT define a constant array. It defines a constant reference to an array.\nBecause of this, we can still change the elements of a constant array.\nElements Can be Reassigned\nYou can change the elements of a constant array:\nExample\n// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// You can change an element:\ncars[0] = \"Toyota\";\n// You can add an element:\ncars.push(\"Audi\");\n\nBrowser Support\nThe\nconst\nkeyword is not supported in Internet Explorer 10 or earlier.\nThe following table defines the first browser versions with full support for the\nconst\nkeyword:\nChrome 49\nIE 11 / Edge\nFirefox 36\nSafari 10\nOpera 36\nMar, 2016\nOct, 2013\nFeb, 2015\nSep, 2016\nMar, 2016\nAssigned when Declared\nJavaScript\nconst\nvariables must be assigned a value when they are declared:\nMeaning: An array declared with\nconst\nmust be initialized when it is declared.\nUsing\nconst\nwithout initializing the array is a syntax \nerror:\nExample\nThis will not work:\nconst cars;\ncars = [\"Saab\", \"Volvo\", \"BMW\"];\nArrays declared with\nvar\ncan be initialized at any time.\nYou can even use the array before it is declared:\nExample\nThis is OK:\ncars = [\"Saab\", \"Volvo\", \"BMW\"];\nvar cars;\n\nConst Block Scope\nAn array declared with\nconst\nhas\nBlock Scope\n.\nAn array declared in a block is not the same as an array declared outside the block:\nExample\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nconst cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is\n\"Saab\"\n\nAn array declared with\nvar\ndoes not have block scope:\nExample\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nvar cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is\n\"Toyota\"\n\nYou can learn more about Block Scope in the chapter:\nJavaScript Scope\n.\nRedeclaring Arrays\nRedeclaring an array declared with\nvar\nis allowed anywhere in a program:\nExample\nvar cars = [\"Volvo\", \"BMW\"]; \u00a0\u00a0// Allowed\nvar cars = [\"Toyota\", \"BMW\"]; \u00a0// Allowed\ncars = [\"Volvo\", \"Saab\"]; \u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nRedeclaring or reassigning an array to\nconst\n, in the same scope, or in \nthe same block, is not allowed:\nExample\nvar cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\n{\nvar cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Not allowed\n}\nRedeclaring or reassigning an existing\nconst\narray, in the same scope, or in \nthe same block, is not allowed:\nExample\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\nvar cars = [\"Volvo\", \"BMW\"];\u00a0 \u00a0\u00a0\u00a0// Not allowed\ncars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Not allowed\nvar cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\ncars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n}\nRedeclaring an array with\nconst\n, in another scope, or in another block, is allowed:\nExample\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\n}\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\n}\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference\n.\nThe reference contains descriptions and examples of all Array \nproperties and methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];\u00a0\u00a0\u00a0 // ERROR",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// You can change an element:\ncars[0] = \"Toyota\";\n// You can add an element:\ncars.push(\"Audi\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const cars;\ncars = [\"Saab\", \"Volvo\", \"BMW\"];",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "cars = [\"Saab\", \"Volvo\", \"BMW\"];\nvar cars;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nconst cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is\n\"Saab\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "var cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nvar cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is\n\"Toyota\"",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "var cars = [\"Volvo\", \"BMW\"]; \u00a0\u00a0// Allowed\nvar cars = [\"Toyota\", \"BMW\"]; \u00a0// Allowed\ncars = [\"Volvo\", \"Saab\"]; \u00a0\u00a0\u00a0\u00a0\u00a0// Allowed",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "var cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\n{\nvar cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Not allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "const cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\nvar cars = [\"Volvo\", \"BMW\"];\u00a0 \u00a0\u00a0\u00a0// Not allowed\ncars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Not allowed\nvar cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Not allowed\ncars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Not allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "const cars = [\"Volvo\", \"BMW\"];\u00a0\u00a0\u00a0// Allowed\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\n}\n{\nconst cars = [\"Volvo\", \"BMW\"];\u00a0// Allowed\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];\u00a0\u00a0\u00a0 // ERROR"
    }
  ],
  "related_topics": [
    {
      "id": "e9e3865d-80e9-4941-9a90-54506e1fdf81",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "69114123-d7d1-4387-b8b3-4b90998c1356",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cea16628-ad72-4168-98f9-51a820023595",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is ERROR\n\nArrays are Not Constants\nThe keyword\nconst?",
      "options": [
        "not supported in Internet Explorer 10 or earlier",
        "None of the above.",
        "a little misleading",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of ERROR\n\nArrays are Not Constants\nThe keyword\nconst is 'a little misleading'."
    },
    {
      "question": "What is Browser Support\nThe\nconst\nkeyword?",
      "options": [
        "None of the above.",
        "not supported in Internet Explorer 10 or earlier",
        "None of the above.",
        "a little misleading"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Browser Support\nThe\nconst\nkeyword is 'not supported in Internet Explorer 10 or earlier'."
    }
  ],
  "summary": "This tutorial covers JavaScriptArray Const concepts and techniques. You'll learn how to use JavaScriptArray Const effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptArray Const and how to apply it in your projects."
}