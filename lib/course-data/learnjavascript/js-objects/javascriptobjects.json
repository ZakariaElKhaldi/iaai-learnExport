{
  "id": "15a8a136-70ff-43b2-839f-4478fe0359c7",
  "title": "JavaScriptObjects",
  "slug": "javascriptobjects",
  "metadata": {
    "description": "Learn about JavaScriptObjects with clear explanations and practical examples.",
    "keywords": [
      "object",
      "objects",
      "person",
      "javascript",
      "properties",
      "value",
      "lastname",
      "firstname",
      "const",
      "methods"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Objects"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObjects",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Real Life Objects\nIn real life,\nobjects\nare things like:\nhouses, cars, people, animals, or any other subjects.\nHere is a\ncar object\nexample:\nCar Object\nProperties\nMethods\ncar.name = Fiat\ncar.model = 500\ncar.weight = 850kg\ncar.color = white\ncar.start()\ncar.drive()\ncar.brake()\ncar.stop()\nObject Properties\nA real life car has\nproperties\nlike weight and color:\ncar.name = Fiat, car.model = 500, car.weight = 850kg, car.color = white.\nCar objects have the same\nproperties\n, but the\nvalues\ndiffer from car to car.\nObject Methods\nA real life car has\nmethods\nlike start and stop:\ncar.start(), car.drive(), car.brake(), car.stop().\nCar objects have the same\nmethods\n, but the methods are performed\nat different times\n.\nJavaScript Variables\nJavaScript variables are containers for data values.\nThis code assigns a\nsimple value\n(Fiat) to a\nvariable\nnamed car:\nExample\nlet car = \"Fiat\";\n\nJavaScript Objects\nObjects are variables too. But objects can contain many \nvalues.\nThis code assigns\nmany values\n(Fiat, 500, white) to an\nobject\nnamed car:\nExample\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\nNote:\nIt is a common practice to declare objects with the\nconst\nkeyword.\nLearn more about using\nconst\nwith objects in the chapter:\nJS Const\n.\nJavaScript Object Definition\nHow to Define a JavaScript Object\nUsing an Object Literal\nUsing the\nnew\nKeyword\nUsing an Object Constructor\nJavaScript Object Literal\nAn object literal is a list of\nname:value\npairs inside curly braces\n{}\n.\n{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}\nNote:\nname:value pairs\nare also called\nkey:value pairs\n.\nobject literals\nare also called\nobject initializers\n.\nCreating a JavaScript Object\nThese examples create a JavaScript object with 4 properties:\nExamples\n// Create an Object\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\n\nSpaces and line breaks are not important. An object initializer can span multiple lines:\n// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\nThis example creates an empty JavaScript object, \nand then adds 4 properties:\n// Create an Object\nconst person = {};\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";\n\nUsing the new Keyword\nThis example create a new JavaScript object using\nnew Object()\n, \nand then adds 4 properties:\nExample\n// Create an Object\nconst person = new Object();\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";\n\nNote:\nThe examples above do exactly the same.\nBut, there is no need to use\nnew Object()\n.\nFor readability, simplicity and execution speed, use the\nobject literal\nmethod.\nObject Properties\nThe\nnamed values\n, in JavaScript objects, are called\nproperties\n.\nProperty\nValue\nfirstName\nJohn\nlastName\nDoe\nage\n50\neyeColor\nblue\nObjects written as name value pairs are similar to:\nAssociative arrays in PHP\nDictionaries in Python\nHash tables in C\nHash maps in Java\nHashes in Ruby and Perl\nAccessing Object Properties\nYou can access object properties in two ways:\nobjectName.propertyName\nobjectName[\"propertyName\"]\nExamples\nperson.lastName;\n\nperson[\"lastName\"];\n\nJavaScript Object Methods\nMethods are\nactions\nthat can be performed on objects.\nMethods are\nfunction definitions\nstored as\nproperty values\n.\nProperty\nProperty Value\nfirstName\nJohn\nlastName\nDoe\nage\n50\neyeColor\nblue\nfullName\nfunction() {return this.firstName + \" \" + this.lastName;}\nExample\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nid\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 :\u00a05566,\nfullName : function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n\nIn the example above,\nthis\nrefers to the\nperson object\n:\nthis.firstName\nmeans the\nfirstName\nproperty of\nperson\n.\nthis.lastName\nmeans the\nlastName\nproperty of\nperson\n.\nIn JavaScript, Objects are King.\nIf you Understand Objects, you Understand JavaScript.\nObjects\nare containers for\nProperties\nand\nMethods\n.\nProperties\nare named\nValues\n.\nMethods\nare\nFunctions\nstored as\nProperties\n.\nProperties\ncan be primitive values, functions, or even other objects.\nIn JavaScript, almost \"everything\" is an object.\nObjects are objects\nMaths are objects\nFunctions are objects\nDates are objects\nArrays are objects\nMaps are objects\nSets are objects\nAll JavaScript values, except primitives, are objects.\nJavaScript Primitives\nA\nprimitive value\nis a value that has no properties or methods.\n3.14\nis a primitive value\nA\nprimitive data type\nis data that has a primitive value.\nJavaScript defines 7 types of primitive data types:\nstring\nnumber\nboolean\nnull\nundefined\nsymbol\nbigint\nImmutable\nPrimitive values are immutable (they are hardcoded and cannot be changed).\nif x = 3.14, you can change the value of x, but you cannot change the value of 3.14.\nValue\nType\nComment\n\"Hello\"\nstring\n\"Hello\" is always \"Hello\"\n3.14\nnumber\n3.14 is always 3.14\ntrue\nboolean\ntrue is always true\nfalse\nboolean\nfalse is always false\nnull\nnull (object)\nnull is always null\nundefined\nundefined\nundefined is always undefined\nJavaScript Objects are Mutable\nObjects are mutable: They are addressed by reference, not by value.\nIf person is an object, the following statement will not create a copy of person:\nconst x = person;\nThe object x is\nnot a copy\nof person. The object x\nis\nperson.\nThe object x and the object person share the same memory address.\nAny changes to x will also change person:\nExample\n//Create an Object\nconst person = {\nfirstName:\"John\",\nlastName:\"Doe\",\nage:50, eyeColor:\"blue\"\n}\n// Try to create a copy\nconst x = person;\n// This will change age in person:\nx.age = 10;\n\nNote:\nYou will learn a lot more about objects in the following chapters.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "let car = \"Fiat\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 5,
      "code": "// Create an Object\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "// Create an Object\nconst person = new Object();\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "objectName.propertyName",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Examples",
      "content": "",
      "order": 8,
      "code": "person.lastName;",
      "language": "javascript",
      "explanation": "Example of examples"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "const person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nid\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 :\u00a05566,\nfullName : function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "const x = person;",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "//Create an Object\nconst person = {\nfirstName:\"John\",\nlastName:\"Doe\",\nage:50, eyeColor:\"blue\"\n}\n// Try to create a copy\nconst x = person;\n// This will change age in person:\nx.age = 10;",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "let car = \"Fiat\";"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};"
    }
  ],
  "related_topics": [
    {
      "id": "2d1fedad-82e2-4f14-b2c4-baf0e1e4d40d",
      "title": "Advanced Javascript Techniques",
      "relationship": "next_topic"
    },
    {
      "id": "69088d8c-c3be-4898-a6e6-1a0fce398f2c",
      "title": "Javascript Project: Build a Real-World Application",
      "relationship": "suggested_next"
    },
    {
      "id": "8fcc14f4-0e61-4640-a8df-6fd939fcd089",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is objects?",
      "options": [
        "a\ncar object\nexample:\nCar Object\nProperties\nMethods\ncar",
        "None of the above.",
        "None of the above.",
        "things like:\nhouses"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of objects is 'things like:\nhouses'."
    },
    {
      "question": "What is Here?",
      "options": [
        "None of the above.",
        "things like:\nhouses",
        "None of the above.",
        "a\ncar object\nexample:\nCar Object\nProperties\nMethods\ncar"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Here is 'a\ncar object\nexample:\nCar Object\nProperties\nMethods\ncar'."
    }
  ],
  "summary": "This tutorial covers JavaScriptObjects concepts and techniques. You'll learn how to use JavaScriptObjects effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObjects and how to apply it in your projects."
}