{
  "id": "cc7a9bc5-e69c-4859-8979-1f94a3fcd1d7",
  "title": "JavaScriptObject Constructors",
  "slug": "javascriptobject-constructors",
  "metadata": {
    "description": "Learn about JavaScriptObject Constructors with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "object",
      "function",
      "person",
      "constructor",
      "example",
      "property",
      "name",
      "lastname",
      "first",
      "eyecolor"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "JS Object Constructors"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nObject Constructors",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Object Constructor Functions\nSometimes we need to create many objects of the same\ntype\n.\nTo create an\nobject type\nwe use an\nobject constructor function\n.\nIt is considered good practice to name constructor functions with an upper-case first letter.\nObject Type Person\nfunction Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}\nTry \nit yourself \u00bb\nNote:\nIn the constructor function,\nthis\nhas no value.\nThe value of\nthis\nwill become the new object when \na new object is created.\nSee Also:\nThe JavaScript\nthis\nTutorial\nNow we can use\nnew Person()\nto create many new Person objects:\nExample\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");\nTry \nit yourself \u00bb\nProperty Default Values\nA\nvalue\ngiven to a property will be a\ndefault value\nfor all objects\ncreated by the constructor:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}\n\nAdding a Property to an Object\nAdding a property to a created object is easy:\nExample\nmyFather.nationality = \"English\";\n\nNote:\nThe new property will be added to\nmyFather\n. Not to any other\nPerson Objects\n.\nAdding a Property to a Constructor\nYou can\nNOT\nadd a new property to an object constructor:\nExample\nPerson.nationality = \"English\";\n\nTo add a new property, you must add it to the constructor function prototype:\nExample\nPerson.prototype.nationality = \"English\";\n\nConstructor Function Methods\nA constructor function can also have\nmethods\n:\nExample\nfunction Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.fullName = function() {\nreturn this.firstName + \" \" + this.lastName;\n};\n}\n\nAdding a Method to an Object\nAdding a method to a created object is easy:\nExample\nmyMother.changeName = function (name) {\nthis.lastName = name;\n}\n\nNote:\nThe new method will be added to\nmyMother\n. Not to any other\nPerson Objects\n.\nAdding a Method to a Constructor\nYou cannot add a new method to an object constructor function.\nThis code will produce a TypeError:\nExample\nPerson.changeName = function (name) {\nthis.lastName = name;\n}\nmyMother.changeName(\"Doe\");\nTypeError: myMother.changeName is not a function\nAdding a new method must be done to the constructor function prototype:\nExample\nPerson.prototype.changeName = function (name) {\nthis.lastName = name;\n}\nmyMother.changeName(\"Doe\");\n\nNote:\nThe changeName() function assigns the value of\nname\nto the person's\nlastName\nproperty, substituting\nthis\nwith\nmyMother\n.\nBuilt-in JavaScript Constructors\nJavaScript has built-in constructors for all native objects:\nnew Object()\u00a0\u00a0\u00a0// A new Object object\nnew Array()\u00a0\u00a0\u00a0\u00a0// A new Array object\nnew Map()\u00a0\u00a0\u00a0\u00a0\u00a0 // A new Map object\nnew Set()\u00a0\u00a0\u00a0\u00a0\u00a0 // A new Set object\nnew Date()\u00a0\u00a0\u00a0\u00a0\u00a0// A new Date object\nnew RegExp()\u00a0\u00a0\u00a0// A new RegExp object\nnew Function()\u00a0// A new Function object\n\nNote:\nThe\nMath()\nobject is not in the list.\nMath\nis a global object. The\nnew\nkeyword cannot be used on\nMath\n.\nDid You Know?\nUse object literals\n{}\ninstead of\nnew Object()\n.\nUse array literals\n[]\ninstead of\nnew Array()\n.\nUse pattern literals\n/()/\ninstead of\nnew RegExp()\n.\nUse function expressions\n() {}\ninstead of\nnew Function()\n.\nExample\n\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive string\n0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive number\nfalse;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive boolean\n{};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // object object\n[];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // array object\n/()/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // regexp object\nfunction(){};\u00a0// function\n\nComplete Object Reference\nFor a complete reference, go to our:\nComplete JavaScript Object Reference\n.\nThe reference contains descriptions and examples of all Object Properties and Methods.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Object Type Person",
      "content": "",
      "order": 3,
      "code": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}",
      "language": "javascript",
      "explanation": "Example of object type person"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "myFather.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "Person.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "Person.prototype.nationality = \"English\";",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.fullName = function() {\nreturn this.firstName + \" \" + this.lastName;\n};\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "myMother.changeName = function (name) {\nthis.lastName = name;\n}",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "Person.changeName = function (name) {\nthis.lastName = name;\n}\nmyMother.changeName(\"Doe\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "Person.prototype.changeName = function (name) {\nthis.lastName = name;\n}\nmyMother.changeName(\"Doe\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "new Object()\u00a0\u00a0\u00a0// A new Object object\nnew Array()\u00a0\u00a0\u00a0\u00a0// A new Array object\nnew Map()\u00a0\u00a0\u00a0\u00a0\u00a0 // A new Map object\nnew Set()\u00a0\u00a0\u00a0\u00a0\u00a0 // A new Set object\nnew Date()\u00a0\u00a0\u00a0\u00a0\u00a0// A new Date object\nnew RegExp()\u00a0\u00a0\u00a0// A new RegExp object\nnew Function()\u00a0// A new Function object",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "\"\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive string\n0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive number\nfalse;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // primitive boolean\n{};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // object object\n[];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // array object\n/()/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // regexp object\nfunction(){};\u00a0// function",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n# TODO: Complete this line",
      "solution": "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\n# TODO: Complete this line\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
      "solution": "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");"
    }
  ],
  "related_topics": [
    {
      "id": "d14502c1-6871-43a4-a186-d264678f2eae",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "18b5e801-f9e3-4fa7-82ea-30af0d7fde1a",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2b6673ed-c9be-45f8-8dcd-31a0f815149a",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is It?",
      "options": [
        "None of the above.",
        "created",
        "None of the above.",
        "considered good practice to name constructor functions with an upper-case first letter"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of It is 'considered good practice to name constructor functions with an upper-case first letter'."
    },
    {
      "question": "What is The value of\nthis\nwill become the new object when \na new object?",
      "options": [
        "considered good practice to name constructor functions with an upper-case first letter",
        "created",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The value of\nthis\nwill become the new object when \na new object is 'created'."
    }
  ],
  "summary": "This tutorial covers JavaScriptObject Constructors concepts and techniques. You'll learn how to use JavaScriptObject Constructors effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptObject Constructors and how to apply it in your projects."
}