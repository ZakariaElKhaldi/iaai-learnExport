{
  "id": "94b314bf-cf54-4492-ab93-4c7e8baa41f3",
  "title": "JavaScriptHTML DOM Node Lists",
  "slug": "javascripthtml-dom-node-lists",
  "metadata": {
    "description": "Learn about JavaScriptHTML DOM Node Lists with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "nodelist",
      "nodes",
      "list",
      "htmlcollection",
      "object",
      "document",
      "index",
      "node",
      "collection",
      "mynodelist"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnJavaScript",
    "subcategory": "DOM Node Lists"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "JavaScript\nHTML DOM Node Lists",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The HTML DOM NodeList Object\nA\nNodeList\nobject is a list (collection) of nodes extracted from a \ndocument.\nA\nNodeList\nobject is almost the same as an\nHTMLCollection\nobject.\nSome (older) browsers return a NodeList object instead of an HTMLCollection \nfor methods like\ngetElementsByClassName()\n.\nAll browsers return a NodeList object for the property\nchildNodes\n.\nMost browsers return a NodeList object for the method\nquerySelectorAll()\n.\nThe following code selects all\n<p>\nnodes in a document:\nExample\nconst myNodeList = document.querySelectorAll(\"p\");\nThe elements in the NodeList can be accessed by an index number.\nTo access the \nsecond <p> node you can write:\nmyNodeList[1]\n\nNote:\nThe index starts at 0.\nHTML DOM Node List Length\nThe\nlength\nproperty defines the number of nodes in a node list:\nExample\nmyNodelist.length\n\nThe\nlength\nproperty is useful when you want to loop through the nodes in a node \nlist:\nExample\nChange the color of all <p> elements in a node \nlist:\nconst myNodelist = document.querySelectorAll(\"p\");\nfor (let i = 0; i < myNodelist.length; i++) {\nmyNodelist[i].style.color = \"red\";\n}\n\nThe Difference Between an HTMLCollection and a NodeList\nA\nNodeList\nand an\nHTMLcollection\nis very much the same thing.\nBoth are array-like collections (lists) of nodes (elements) extracted from a \ndocument. The nodes can be accessed by index numbers. The index starts at 0.\nBoth have a\nlength\nproperty that returns the number of elements in the list (collection).\nAn HTMLCollection is a collection of\ndocument elements\n.\nA NodeList is a collection of\ndocument nodes\n(element nodes, attribute nodes, and text nodes).\nHTMLCollection items can be accessed by their name, id, or index number.\nNodeList items can only be accessed by their index number.\nAn HTMLCollection is always a\nlive\ncollection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.\nA NodeList is most often a\nstatic\ncollection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.\nThe\ngetElementsByClassName()\nand\ngetElementsByTagName()\nmethods return a live HTMLCollection.\nThe\nquerySelectorAll()\nmethod returns a static NodeList.\nThe\nchildNodes\nproperty returns a live NodeList.\nNot an Array!\nA NodeList may look like an array, but it is not.\nYou can loop through a NodeList and refer to its nodes by index.\nBut, you cannot use Array methods like push(), pop(), or join() on a NodeList.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "const myNodeList = document.querySelectorAll(\"p\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "myNodelist.length",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const myNodelist = document.querySelectorAll(\"p\");\nfor (let i = 0; i < myNodelist.length; i++) {\nmyNodelist[i].style.color = \"red\";\n}",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const myNodeList = document.querySelectorAll(\"p\");"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "myNodelist.length"
    }
  ],
  "related_topics": [
    {
      "id": "8ff516a8-58c2-438b-808b-c77a6bde43c8",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "25ef101a-1d3c-4981-adfe-b948357be5d8",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ec649fa1-385b-4a52-af89-ba728b633023",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript\nHTML DOM Node Lists\n\nThe HTML DOM NodeList Object\nA\nNodeList\nobject?",
      "options": [
        "a list (collection) of nodes extracted from a \ndocument",
        "None of the above.",
        "almost the same as an\nHTMLCollection\nobject",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript\nHTML DOM Node Lists\n\nThe HTML DOM NodeList Object\nA\nNodeList\nobject is 'a list (collection) of nodes extracted from a \ndocument'."
    },
    {
      "question": "What is A\nNodeList\nobject?",
      "options": [
        "almost the same as an\nHTMLCollection\nobject",
        "None of the above.",
        "None of the above.",
        "a list (collection) of nodes extracted from a \ndocument"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of A\nNodeList\nobject is 'almost the same as an\nHTMLCollection\nobject'."
    }
  ],
  "summary": "This tutorial covers JavaScriptHTML DOM Node Lists concepts and techniques. You'll learn how to use JavaScriptHTML DOM Node Lists effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptHTML DOM Node Lists and how to apply it in your projects."
}