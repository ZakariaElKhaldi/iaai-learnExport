{
  "id": "b9352623-195e-4efd-9676-02739e58be54",
  "title": "JavaScriptExamples",
  "slug": "javascriptexamples",
  "metadata": {
    "description": "Learn about JavaScriptExamples with clear explanations and practical examples.",
    "keywords": [
      "javascript",
      "array",
      "number",
      "explained",
      "using",
      "value",
      "string",
      "numbers",
      "json",
      "strings"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Javascript Basics"
    ],
    "estimated_time": 11,
    "category": "LearnJavaScript",
    "subcategory": "JS Examples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "JavaScript\nExamples\n\nWhat can JavaScript do",
      "content": "?\nJavaScript can change HTML content\nJavaScript can change HTML attributes\nJavaScript can change CSS style\nJavaScript can hide HTML elements\nJavaScript can show hidden HTML elements\nExamples Explained\nWhere to Insert JavaScript\nJavaScript in <head>\nJavaScript in <body>\nJavaScript in an external file\nJavaScript in an external url\nJavaScript in an external folder\nWhere to Explained\nJavaScript Output\nWriting into the HTML output\nWriting into an HTML element\nWriting into an window alert box\nWriting into the browser console\nOutput Explained\nJavaScript Syntax\nJavaScript statements\nJavaScript numbers\nJavaScript strings\nJavaScript variables\nJavaScript operators\nJavaScript assignment\nJavaScript expressions (using constants)\nJavaScript expressions (using strings)\nJavaScript expressions (using variables)\nJavaScript keywords\nJavaScript comments\nJavaScript is case sensitive\nSyntax Explained\nJavaScript Statements\nJavaScript statements are commands to the browser\nJavaScript code is a sequence of statements\nJavaScript statements are separated with semicolon\nMultiple statement on one line is allowed\nJavaScript statements can be grouped together in code blocks\nYou can break a code line after an operator or a comma.\nStatements Explained\nJavaScript Comments\nSingle line comments\nSingle line comments at the end of a line\nMultiple lines comments\nSingle line comment to prevent execution\nMultiple lines comment to prevent execution\nComments Explained\nJavaScript Variables\nJavaScript variables\nJavaScript variables as algebra\nJavaScript numbers and strings\nJavaScript var keyword.\nDeclaring many variables in one statement\nDeclaring many variables multiline\nA variable without a value returns the value undefined\nRe-declaring a variable will not destroy the value\nAdding JavaScript numbers\nAdding JavaScript strings\nAdding strings and numbers\nVariables Explained\nJavaScript Arithmetic\nThe addition (+) operator\nThe subtraction (-) operator\nThe multiplication (*) operator\nThe division (/) operator\nThe modulus (%) operator\nThe increment (++) operator\nThe decrement (--) operator\nArithmetic Explained\nJavaScript Assignment\nThe = assignment operator\nThe += assignment operator\nThe -= assignment operator\nThe *= assignment operator\nThe /= assignment operator\nThe %= assignment operator\nAssignment Explained\nJavaScript String Concatenation\nAdding two strings together using the concatenating (+) operator\nAdding two strings together with a space in the first string\nAdding two strings together with a space in between\nAdding two strings together using using the += operator\nAdding strings and numbers\nConcatenation Explained\nJavaScript Data Types\nDeclare (create) strings\nDeclare (create) numbers\nDeclare (create) an array\nDeclare (create) an object\nFind the type of a variable\nAdding two numbers and a string\nAdding a string and two numbers\nAn undefined variable\nAn empty variable\nData types Explained\nJavaScript Objects\nCreate a JavaScript variable\nCreate a JavaScript object\nCreate a person object (single line)\nCreate a person object (multiple lines)\nAccess object properties using .property\nAccess object properties using [property]\nAccess a function property as a method\nAccess a function property as a property\nObjects Explained\nJavaScript Functions\nA simple function\nA function with an argument\nA function with an argument 2\nA function that returns a value\nA function that converts Fahrenheit to Celsius\nA function call without ()\nFunctions Explained\nJavaScript Events\nAn onclick event changes an HTML element\nAn onclick event changes its own element\nAn onclick event calls a function\nEvents Explained\nJavaScript Strings\nStrings can be written with single or double quotes.\nShow some string examples\nBackslash before quotes accepts quotes as quotes.\nFind the length of a string\nYou can break text string with a backslash.\nYou cannot break code with a backslash.\nFind the position of the first occurrence of a text\nin a string - indexOf()",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Search for a text in a string and return the text if found",
      "content": "- match()\nReplace characters in a string - replace()\nConvert string to upper case - toUpperCase()\nConvert string to lower case - toLowerCase()\nSplit a string into an array - split()\nStrings Explained\nJavaScript Numbers\nNumbers can be written with or without decimals\nExtra large or extra small numbers can be written with exponent notation\nNumber are considered accurate only up to 15 digits\nFloating point arithmetic is not always 100% accurate\nBut it helps to multiply and divide by 10\nAdding two numbers results in a new number\nAdding two numeric strings results in a concatenated string\nAdding a number and a numeric string also results in a concatenated string\nAdding a numeric string and a number also results in a concatenated string\nCommon mistake when adding strings and numbers 1\nCommon mistake when adding strings and numbers 2\nJavaScript will try to convert strings to numbers when dividing\nJavaScript will try to convert strings to numbers when multiplying\nJavaScript will try to convert strings to numbers when subtracting\nJavaScript will NOT convert strings to numbers when adding\nA number divided by a string is NaN (Not a Number)\nA number divided by a numeric string is a number\nThe global JavaScript function isNaN() returns if a value is a number\nUsing NaN in a mathematical operation will always return NaN\nUsing NaN in a mathematical string operation will concatenate NaN\nNaN (Not a Number) is a number (Yes! typeof NaN returns number)\nInfinity is returned if you calculate a number outside the largest possible number\nDivision by zero also generates Infinity\nInfinity is a number (typeof Infinity returns number)\nConstants, preceded by 0x, are interpreted as hexadecimal\nThe toString() method can output numbers as hex, octal, and binary\nNumbers can be objects\nNumbers and objects cannot be safely compared\nObjects and objects cannot be safely compared\nNumbers Explained\nJavaScript Number Methods\nThe toString() method converts a number to a string\nThe valueOf() method returns a number as a number\nThe toExponential() returns a number with exponential notation\nThe toFixed() method rounds a number to a number of digits\nThe toPrecision() method a number written with a specified length\nThe global method Number() converts variables to numbers\nThe global method Number() can even convert dates to numbers\nThe global method parseInt() converts strings to numbers\nThe global method parseFloat() converts strings to numbers\nMAX_VALUE returns the largest possible number in JavaScript\nMIN_VALUE returns the smallest possible number in JavaScript\nPOSITIVE_INFINITY represents infinity\nPOSITIVE_INFINITY is returned on overflow\nNEGATIVE_INFINITY represents negative infinity\nNEGATIVE_INFINITY is returned on overflow\nNaN Represents \"Not-a-Number\"\nArithmetic performed on a string will result in NaN\nUsing a Number property on a variable will return undefined\nNumbers Methods Explained\nJavaScript Maths\nMath.PI returns the value of PI\nMath.round(x) returns the rounded value of x\nMath.pow(x, y) returns the value of x to the power of y\nMath.sqrt(x) returns the square root of x\nMath.abs(x) returns the absolute (positive) value of x\nMath.ceil(x) returns the value of x rounded up\nMath.floor(x) returns the value of x rounded down\nMath.sin(x) returns the sin of the angle x (given in radians)\nMath.cos(x) returns the cosin of the angle x (given in radians)\nMath.max() return the number with the highest value from a list of arguments\nMath.min() to return the number with the lowest value from a list of arguments\nConverting Celsius to Fahrenheit\nMaths Explained\nJavaScript Random\nMath.random() returns a random number between 0 (included) and 1 (excluded)\nHow to return a random integer between 0 and 9 (both included)\nHow to return a random integer between 0 and 10 (both included)\nHow to return a random integer between 0 and 99 (both included)\nHow to return a random integer between 0 and 100 (both included)\nHow to return a random integer between 1 and 10 (both included)\nHow to return a random integer between 1 and 100 (both included)\nHow to return a random integer between x (included) and y (excluded)\nHow to return a random integer between x and y (both included)\nRandom Explained\nJavaScript Dates\nUse Date() to display today's date and time\nUse getFullYear() display the year\nUse getTime() to calculate the number of milliseconds since 1970\nUse setFullYear() to set a specific date\nUse toUTCString() to convert today's date (according to UTC) to a string\nUse getDay() to display the weekday as a number\nUse getDay() and an array to display the weekday as a name\nDisplay a clock\nDates Explained\nJavaScript Arrays\nCreate an array I\nCreate an array II\nAccess an array element\nChange an array element\nAccess a full array\nFind the length of an array\nLoop through an array\nAdd an element to an array\nAdd undefined \"holes\" to an array\nHow to \nrecognize an array I\nHow to \nrecognize an array II\nArrays Explained\nJavaScript Array Methods\nAdd an element to an array\nRemove the last element of an array - pop()\nJoin all elements of an array into a string - join()\nJoin two arrays - concat()\nJoin three arrays - concat()\nAdd an element to position 2 in an array - splice()\nConvert an array to a string - toString()\nAdd new elements to the beginning of an array - unshift()\nRemove the first element of an array - shift()\nSelect elements from an array - slice()\nArray Methods Explained\nJavaScript Array Sort\nSort an array in ascending order\nSort an array in descending order\nSort an array of numbers ascending\nSort an array of numbers descending\nSort numbers (alphabetically or numerically)\nSort array numbers in random order\nFind the lowest number in an array\nFind the highest number in an array\nFind the lowest number in an array using Math.min()\nFind the highest number in an array using Math.max()\nUsing a \"homemade\" myArrayMin method\nUsing a \"homemade\" myArrayMax method\nSort objects by numeric properties\nSort objects by string properties\nArray Sort Explained\nJavaScript Array Iteration\nArray.forEach()\nArray.map()\nArray.filter()\nArray.reduce()\nArray.reduceRight()\nArray.every()\nArray.some()\nArray.indexOf()\nArray.lastIndexOf()\nArray.find()\nArray.findIndex()\nArray Iteration Explained\nJavaScript Type Conversion\nDisplay the typeof all variable types\nDisplay the constructor of all variable types\nConvert a number to a string using String()\nConvert a number to a string using toString()\nFind out if a variable is an array\nFind out if a variable is a date\nType Conversion Explained\nJavaScript Booleans\nDisplay the value of Boolean(10 > 9)\nDisplay the value of 10 > 9\nEverything with a real value is true\nThe Boolean value of zero is false\nThe Boolean value of minus zero is false\nThe Boolean value of an empty string is false\nThe Boolean value of undefined is false\nThe Boolean value of null is false\nThe Boolean value of false is false\nThe Boolean value of NaN is false\nBooleans Explained\nJavaScript Comparisons\nAssign 5 to x, and display the value of (x == 8)\nAssign 5 to x, and display the value of (x == 5)\nAssign 5 to x, and display the value of (x === 5)\nAssign 5 to x, and display the value of (x === \"5\")\nAssign 5 to x, and display the value of (x != 8)\nAssign 5 to x, and display the value of (x !== 5)\nAssign 5 to x, and display the value of (x !== \"5\")\nAssign 5 to x, and display the value of (x > 8)\nAssign 5 to x, and display the value of (x < 8)\nAssign 5 to x, and display the value of (x >= 8)\nAssign 5 to x, and display the value of (x <= 8)\nComparisons Explained\nJavaScript Conditionals\nThe if statement\nThe else statement\nThe else if statement\nRandom link\nSwitch statement\nConditionals Explained\nJavaScript Loops\nFor loop\nLooping an Array\nLooping through HTML headers\nWhile loop\nDo While loop\nBreak a loop\nBreak and continue a loop\nUse a for...in statement to loop through the elements of an \nobject\nLoops Explained\nJavaScript Error Handling\nThe try...catch statement\nThe try...catch statement with a confirm box\nThe onerror event\nErrors Explained\nJavaScript Regular Expressions\nSearch for an expression in a string\nSearch for an expression and replace it\nRegular Expressions Explained\nJavaScript Objects\nCreating a JavaScript variable\nCreating a JavaScript object\nCreating a JavaScript object (single line)\nCreating a JavaScript object (multiple lines)\nCreating a JavaScript object using new\nCreating JavaScript objects using a constructor\nCreating built-in JavaScript objects\nThe best way to create JavaScript variables\nJavaScript objects are mutable\nObjects Explained\nJavaScript Object Properties\nAccessing properties using .property\nAccessing properties using [property]\nAccessing properties using for in\nAdding new properties to existing objects\nDeleting properties from objects\nObject Properties Explained\nJSON Objects\nAccessing properties using .property\nAccessing properties using [property]\nLooping through properties\nLooping through property values\nAccess nested JSON objects\nModify values using the dot notation\nModify values using the bracket notation\nDelete object properties\nJSON Object Properties Explained\nJSON Arrays\nAccessing array values\nLooping through an array using for-in\nLooping through an array using for\nAccess nested JSON arrays\nModify array values\nDelete array items\nJSON Arrays Explained\nJSON Parse\nUse JSON parse\nUsing JSON parse in an AJAX example\nUsing JSON parse on an array\nParsing dates\nParsing dates using the reviver function\nParsing functions\nJSON Parse Explained\nJSON Stringify\nUse JSON stringify\nUsing JSON stringify on an array\nStringify dates\nStringify functions\nStringify functions using the toString() method\nJSON Stringify Explained\nJSON PHP\nGet JSON from a php file\nGet JSON array from php\nGet JSON from a database\nLoop through the result from a database\nSend JSON using POST method\nJSON PHP Explained\nJSON HTML\nMake an HTML table based on JSON data\nMake a dynamic HTML Table\nMake an HTML drop down list based on JSON data\nJSON HTML Explained\nJSON JSONP\nSimple JSONP example\nCreate a dynamic script tag\nJSONP example with dynamic result\nJSONP example with a callback function\nJSON JSONP Explained\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your javascript function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "2f4d9893-6de0-44db-9e76-26992fc534e7",
      "title": "Javascript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f6661d99-1845-4f59-ac55-0acc3406e866",
      "title": "Javascript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "91da9d7a-0f31-47c4-bfd5-55ac2647b4c0",
      "title": "Javascript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is JavaScript keywords\nJavaScript comments\nJavaScript is case sensitive\nSyntax Explained\nJavaScript Statements\nJavaScript statements are commands to the browser\nJavaScript code is a sequence of statements\nJavaScript statements are separated with semicolon\nMultiple statement on one line?",
      "options": [
        "allowed\nJavaScript statements can be grouped together in code blocks\nYou can break a code line after an operator or a comma",
        "considered accurate only up to 15 digits\nFloating point arithmetic is not always 100% accurate\nBut it helps to multiply and divide by 10\nAdding two numbers results in a new number\nAdding two numeric strings results in a concatenated string\nAdding a number and a numeric string also results in a concatenated string\nAdding a numeric string and a number also results in a concatenated string\nCommon mistake when adding strings and numbers 1\nCommon mistake when adding strings and numbers 2\nJavaScript will try to convert strings to numbers when dividing\nJavaScript will try to convert strings to numbers when multiplying\nJavaScript will try to convert strings to numbers when subtracting\nJavaScript will NOT convert strings to numbers when adding\nA number divided by a string is NaN (Not a Number)\nA number divided by a numeric string is a number\nThe global JavaScript function isNaN() returns if a value is a number\nUsing NaN in a mathematical operation will always return NaN\nUsing NaN in a mathematical string operation will concatenate NaN\nNaN (Not a Number) is a number (Yes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of JavaScript keywords\nJavaScript comments\nJavaScript is case sensitive\nSyntax Explained\nJavaScript Statements\nJavaScript statements are commands to the browser\nJavaScript code is a sequence of statements\nJavaScript statements are separated with semicolon\nMultiple statement on one line is 'allowed\nJavaScript statements can be grouped together in code blocks\nYou can break a code line after an operator or a comma'."
    },
    {
      "question": "What is Strings Explained\nJavaScript Numbers\nNumbers can be written with or without decimals\nExtra large or extra small numbers can be written with exponent notation\nNumber?",
      "options": [
        "None of the above.",
        "None of the above.",
        "allowed\nJavaScript statements can be grouped together in code blocks\nYou can break a code line after an operator or a comma",
        "considered accurate only up to 15 digits\nFloating point arithmetic is not always 100% accurate\nBut it helps to multiply and divide by 10\nAdding two numbers results in a new number\nAdding two numeric strings results in a concatenated string\nAdding a number and a numeric string also results in a concatenated string\nAdding a numeric string and a number also results in a concatenated string\nCommon mistake when adding strings and numbers 1\nCommon mistake when adding strings and numbers 2\nJavaScript will try to convert strings to numbers when dividing\nJavaScript will try to convert strings to numbers when multiplying\nJavaScript will try to convert strings to numbers when subtracting\nJavaScript will NOT convert strings to numbers when adding\nA number divided by a string is NaN (Not a Number)\nA number divided by a numeric string is a number\nThe global JavaScript function isNaN() returns if a value is a number\nUsing NaN in a mathematical operation will always return NaN\nUsing NaN in a mathematical string operation will concatenate NaN\nNaN (Not a Number) is a number (Yes"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Strings Explained\nJavaScript Numbers\nNumbers can be written with or without decimals\nExtra large or extra small numbers can be written with exponent notation\nNumber is 'considered accurate only up to 15 digits\nFloating point arithmetic is not always 100% accurate\nBut it helps to multiply and divide by 10\nAdding two numbers results in a new number\nAdding two numeric strings results in a concatenated string\nAdding a number and a numeric string also results in a concatenated string\nAdding a numeric string and a number also results in a concatenated string\nCommon mistake when adding strings and numbers 1\nCommon mistake when adding strings and numbers 2\nJavaScript will try to convert strings to numbers when dividing\nJavaScript will try to convert strings to numbers when multiplying\nJavaScript will try to convert strings to numbers when subtracting\nJavaScript will NOT convert strings to numbers when adding\nA number divided by a string is NaN (Not a Number)\nA number divided by a numeric string is a number\nThe global JavaScript function isNaN() returns if a value is a number\nUsing NaN in a mathematical operation will always return NaN\nUsing NaN in a mathematical string operation will concatenate NaN\nNaN (Not a Number) is a number (Yes'."
    }
  ],
  "summary": "This tutorial covers JavaScriptExamples concepts and techniques. You'll learn how to use JavaScriptExamples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of JavaScriptExamples and how to apply it in your projects."
}