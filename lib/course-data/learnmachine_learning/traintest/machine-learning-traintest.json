{
  "id": "cbbb217e-675a-4d01-af56-ddb73dbb3859",
  "title": "Machine Learning - Train/Test",
  "slug": "machine-learning-traintest",
  "metadata": {
    "description": "Learn about Machine Learning - Train/Test with clear explanations and practical examples.",
    "keywords": [
      "c",
      "numpy",
      "data",
      "model",
      "example",
      "random",
      "testing",
      "test",
      "train",
      "training",
      "import"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Train/Test"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Machine Learning - Train/Test",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Evaluate Your Model\nIn Machine Learning we create models to predict the outcome of certain events,\nlike in the \nthe weight and engine size.\nTo measure if the model is good enough, we can use a method called Train/Test.\nWhat is Train/Test\nTrain/Test is a method to measure the accuracy of your model.\nIt is called Train/Test because you split the data set into two sets: a training set and a testing set.\n80% for training, and 20% for testing.\nYou\ntrain\nthe model using the training set.\nYou\ntest\nthe model using the testing set.\nTrain\nthe model means\ncreate\nthe model.\nTest\nthe model means test the accuracy of the model.\nStart With a Data Set\nStart with a data set you want to test.\nOur data set illustrates 100 customers in a shop, and their shopping habits.\nExample\nimport numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\nplt.scatter(x, y)\nplt.show()\nResult:\nThe x axis represents the number of minutes before making a purchase.\nThe y axis represents the amount of money spent on the purchase.\nRun example \u00bb\nSplit Into Train/Test\nThe\ntraining\nset should be a random selection of 80% of the original data.\nThe\ntesting\nset should be the remaining 20%.\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nDisplay the Training Set\nDisplay the same scatter plot with the training set:\nExample\nplt.scatter(train_x, \n  train_y)\nplt.show()\nResult:\nIt looks like the original data set, so it seems to be a fair \nselection:\nRun example \u00bb\nDisplay the Testing Set\nTo make sure the testing set is not completely different, we will take a look at the testing set as well.\nExample\nplt.scatter(test_x, \n  test_y)\nplt.show()\nResult:\nThe testing set also looks like the original data set:\nRun example \u00bb\nFit the Data Set\nWhat does the data set look like? In my opinion I think the best fit would be \na\npolynomial regression\n, so let us draw a line of polynomial regression.\nTo draw a line through the data points, we use the\nplot()\nmethod of the matplotlib module:\nExample\nDraw a polynomial regression line through the data points:\nimport numpy\nimport \n  matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = \n  numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = \n  y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)\nplt.scatter(train_x, train_y)\nplt.plot(myline, mymodel(myline))\nplt.show()\nResult:\nRun example \u00bb\nThe result can back my suggestion of the data set fitting a polynomial \nregression, even though it would give us some weird results if we try to predict \nvalues outside of the data set. Example: the line indicates that a customer \nspending 6 minutes in the shop would make a purchase worth 200. That is probably \na sign of overfitting.\nBut what about the R-squared score? The R-squared score is a good indicator \nof how well my data set is fitting the model.\nR2\nRemember R2, also known as R-squared?\nIt measures the relationship between the x axis and the y \naxis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans totally related.\nThe sklearn module has a method called\nr2_score()\nthat will help us find this relationship.\nIn this case we would like to measure the relationship  \nbetween the minutes a customer stays in the shop and how much money they spend.\nExample\nHow well does my training data fit in a polynomial regression?\nimport numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))\nr2 = r2_score(train_y, mymodel(train_x))\nprint(r2)\n\nNote:\nThe result 0.799 shows that there is a OK relationship.\nBring in the Testing Set\nNow we have made a model that is OK, at least when it comes to training data.\nNow we want to test the model with the testing data as well, to see if gives us the \nsame result.\nExample\nLet us find the R2 score when using testing data:\nimport numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))\nr2 = r2_score(test_y, mymodel(test_x))\nprint(r2)\n\nNote:\nThe result 0.809 shows that the model fits the \n  testing set as well, and we are confident that we can use the model to predict \n  future values.\nPredict Values\nNow that we have established that our model is OK, we can start predicting \nnew values.\nExample\nHow much money will a buying customer spend, if she or he stays in the shop \n  for 5 minutes?\nprint(mymodel(5))\nRun example \u00bb\nThe example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\nplt.scatter(x, y)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "plt.scatter(train_x, \n  train_y)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "plt.scatter(test_x, \n  test_y)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy\nimport \n  matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = \n  numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = \n  y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)\nplt.scatter(train_x, train_y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))\nr2 = r2_score(train_y, mymodel(train_x))\nprint(r2)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))\nr2 = r2_score(test_y, mymodel(test_x))\nprint(r2)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "print(mymodel(5))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\n# TODO: Complete this line\nplt.show()",
      "solution": "import numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, \n  100) / x\nplt.scatter(x, y)\nplt.show()"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "plt.scatter(train_x, \n  train_y)\n# TODO: Complete this line",
      "solution": "plt.scatter(train_x, \n  train_y)\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "54433404-9e34-4304-b818-47bb590f185f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d8a51c5c-c48a-4cdd-bd4e-74784b8de61f",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "71e069f3-c3cc-44b8-ada6-a7056421f34b",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is To measure if the model?",
      "options": [
        "Train/Test\nTrain/Test is a method to measure the accuracy of your model",
        "None of the above.",
        "None of the above.",
        "good enough"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of To measure if the model is 'good enough'."
    },
    {
      "question": "What is What?",
      "options": [
        "None of the above.",
        "good enough",
        "Train/Test\nTrain/Test is a method to measure the accuracy of your model",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of What is 'Train/Test\nTrain/Test is a method to measure the accuracy of your model'."
    }
  ],
  "summary": "This tutorial covers Machine Learning - Train/Test concepts and techniques. You'll learn how to use Machine Learning - Train/Test effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Machine Learning - Train/Test and how to apply it in your projects."
}