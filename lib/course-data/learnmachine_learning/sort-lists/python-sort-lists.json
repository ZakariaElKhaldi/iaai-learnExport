{
  "id": "99fe57b6-a2b1-46de-b103-8eca4439dabe",
  "title": "Python -Sort Lists",
  "slug": "python-sort-lists",
  "metadata": {
    "description": "Learn about Python -Sort Lists with clear explanations and practical examples.",
    "keywords": [
      "python",
      "sort",
      "thislist",
      "list",
      "example",
      "print",
      "reverse",
      "function",
      "case",
      "orange",
      "kiwi"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Sort Lists"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python -\nSort Lists",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Sort List Alphanumerically\nList objects have a\nsort()\nmethod that will sort the list alphanumerically, ascending, by default:\nExample\nSort the list alphabetically:\nthislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\nthislist.sort()\nprint(thislist)\n\nExample\nSort the list numerically:\nthislist = [100, 50, 65, 82, 23]\nthislist.sort()\nprint(thislist)\n\nSort Descending\nTo sort descending, use the keyword argument\nreverse = True\n:\nExample\nSort the list descending:\nthislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\nthislist.sort(reverse = True)\nprint(thislist)\n\nExample\nSort the list descending:\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(reverse = True)\nprint(thislist)\n\nCustomize Sort Function\nYou can also customize your own function by using the keyword argument\nkey =\nfunction\n.\nThe function will return a number that will be used to sort the list (the \nlowest number first):\nExample\nSort the list based on how close the number is to 50:\ndef myfunc(n):\nreturn abs(n - 50)\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(key = \n  myfunc)\nprint(thislist)\n\nCase Insensitive Sort\nBy default the\nsort()\nmethod is case sensitive,\nresulting in all capital letters being sorted before lower case letters:\nExample\nCase sensitive sorting can give an unexpected result:\nthislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort()\nprint(thislist)\n\nLuckily we can use built-in functions as key functions when sorting a list.\nSo if you want a case-insensitive sort function, use str.lower as a key function:\nExample\nPerform a case-insensitive sort of the list:\nthislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort(key \n  = str.lower)\nprint(thislist)\n\nReverse Order\nWhat if you want to reverse the order of a list, regardless of the alphabet?\nThe\nreverse()\nmethod reverses the current sorting order of the elements.\nExample\nReverse the order of the list items:\nthislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.reverse()\nprint(thislist)\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\nthislist.sort()\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "thislist = [100, 50, 65, 82, 23]\nthislist.sort()\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\nthislist.sort(reverse = True)\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "thislist = [100, 50, 65, 82, 23]\nthislist.sort(reverse = True)\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "def myfunc(n):\nreturn abs(n - 50)\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(key = \n  myfunc)\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort()\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort(key \n  = str.lower)\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.reverse()\nprint(thislist)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\n# TODO: Complete this line\nprint(thislist)",
      "solution": "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]\nthislist.sort()\nprint(thislist)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "thislist = [100, 50, 65, 82, 23]\n# TODO: Complete this line\nprint(thislist)",
      "solution": "thislist = [100, 50, 65, 82, 23]\nthislist.sort()\nprint(thislist)"
    }
  ],
  "related_topics": [
    {
      "id": "cdab32a1-3e4c-46cd-9ea7-ac508693be72",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "33cd4ae2-7e79-42ea-901d-0b7da96bb4ee",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f20119c9-4ddf-4500-beea-b14d9d9f2628",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Example\nSort the list based on how close the number?",
      "options": [
        "case sensitive",
        "None of the above.",
        "to 50:\ndef myfunc(n):\nreturn abs(n - 50)\nthislist = [100",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Example\nSort the list based on how close the number is 'to 50:\ndef myfunc(n):\nreturn abs(n - 50)\nthislist = [100'."
    },
    {
      "question": "What is method?",
      "options": [
        "None of the above.",
        "None of the above.",
        "to 50:\ndef myfunc(n):\nreturn abs(n - 50)\nthislist = [100",
        "case sensitive"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of method is 'case sensitive'."
    }
  ],
  "summary": "This tutorial covers Python -Sort Lists concepts and techniques. You'll learn how to use Python -Sort Lists effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python -Sort Lists and how to apply it in your projects."
}