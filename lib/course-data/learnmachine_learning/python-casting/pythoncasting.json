{
  "id": "3579587f-8ebf-4886-8ba5-71d705941d32",
  "title": "PythonCasting",
  "slug": "pythoncasting",
  "metadata": {
    "description": "Learn about PythonCasting with clear explanations and practical examples.",
    "keywords": [
      "float",
      "literal",
      "integer",
      "string",
      "python",
      "casting",
      "types",
      "constructs",
      "number",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python Casting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nCasting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Specify a Variable Type\nThere may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.\nCasting in python is therefore done using constructor functions:\nint()\n- constructs an integer number from an integer literal, a float literal (by removing \n    all decimals), or a string literal (providing the string represents a whole number)\nfloat()\n- constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)\nstr()\n- constructs a string from a wide variety of data types, including strings, integer literals and float literals\nExample\nIntegers:\nx = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n\nExample\nFloats:\nx = float(1)\u00a0\u00a0\u00a0\u00a0 # x will be 1.0\ny = float(2.8)\u00a0\u00a0 # y will be 2.8\nz = float(\"3\")\u00a0\u00a0 # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n\nExample\nStrings:\nx = str(\"s1\") # x will be 's1'\ny = str(2)\u00a0\u00a0\u00a0 # y will be '2'\nz = str(3.0)\u00a0 # z will be '3.0'\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "x = float(1)\u00a0\u00a0\u00a0\u00a0 # x will be 1.0\ny = float(2.8)\u00a0\u00a0 # y will be 2.8\nz = float(\"3\")\u00a0\u00a0 # z will be 3.0\nw = float(\"4.2\") # w will be 4.2",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = str(\"s1\") # x will be 's1'\ny = str(2)\u00a0\u00a0\u00a0 # y will be '2'\nz = str(3.0)\u00a0 # z will be '3.0'",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\n# TODO: Complete this line",
      "solution": "x = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = float(1)\u00a0\u00a0\u00a0\u00a0 # x will be 1.0\ny = float(2.8)\u00a0\u00a0 # y will be 2.8\n# TODO: Complete this line\nw = float(\"4.2\") # w will be 4.2",
      "solution": "x = float(1)\u00a0\u00a0\u00a0\u00a0 # x will be 1.0\ny = float(2.8)\u00a0\u00a0 # y will be 2.8\nz = float(\"3\")\u00a0\u00a0 # z will be 3.0\nw = float(\"4.2\") # w will be 4.2"
    }
  ],
  "related_topics": [
    {
      "id": "da8d00c9-baa7-4d70-b5da-37838e16e62a",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1c5a8465-0e60-4f4f-9d56-ee407eeb8659",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f1eebcf7-653a-4629-8f11-76c231190cd2",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python?",
      "options": [
        "None of the above.",
        "therefore done using constructor functions:\nint()\n- constructs an integer number from an integer literal",
        "an object-orientated language",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Python is 'an object-orientated language'."
    },
    {
      "question": "What is Casting in python?",
      "options": [
        "therefore done using constructor functions:\nint()\n- constructs an integer number from an integer literal",
        "None of the above.",
        "None of the above.",
        "an object-orientated language"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Casting in python is 'therefore done using constructor functions:\nint()\n- constructs an integer number from an integer literal'."
    }
  ],
  "summary": "This tutorial covers PythonCasting concepts and techniques. You'll learn how to use PythonCasting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonCasting and how to apply it in your projects."
}