{
  "id": "8ec185a1-b7dd-4c94-b33c-d79eb83e04ce",
  "title": "Machine Learning - Data Distribution",
  "slug": "machine-learning-data-distribution",
  "metadata": {
    "description": "Learn about Machine Learning - Data Distribution with clear explanations and practical examples.",
    "keywords": [
      "c",
      "data",
      "values",
      "random",
      "numpy",
      "histogram",
      "create",
      "example",
      "array",
      "import",
      "matplotlib"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Data Distribution"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Machine Learning - Data Distribution",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Data Distribution\nEarlier in this tutorial we have worked with very small amounts of data in our examples, just to \nunderstand the different concepts.\nIn the real world, the data sets are much bigger, but it can be difficult to \ngather real world data, at least at an early stage of a project.\nHow Can we Get Big Data Sets?\nTo create big data sets for testing, we use the Python module NumPy, which \ncomes with a number of methods to create random data sets, of any size.\nExample\nCreate an array containing 250 random floats between 0 and 5:\nimport numpy\nx = numpy.random.uniform(0.0, 5.0, 250)\nprint(x)\n\nHistogram\nTo visualize the data set we can draw a histogram with the data we collected.\nWe will use the Python module Matplotlib to draw a histogram.\nLearn about the Matplotlib module in our\nMatplotlib Tutorial\n.\nExample\nDraw a histogram:\nimport numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 250)\nplt.hist(x, 5)\nplt.show()\nResult:\nRun example \u00bb\nHistogram Explained\nWe use the array from the example above to draw a histogram with 5 bars.\nThe first bar represents how many values in the array are between 0 and 1.\nThe second bar represents how many values are between 1 and 2.\nEtc.\nWhich gives us this result:\n52 values are between 0 and 1\n48 values are between 1 and 2\n49 values are between 2 and 3\n51 values are between 3 and 4\n50 values are between 4 and 5\nNote:\nThe array values are random numbers and will not \n  show the exact same result on your computer.\nBig Data Distributions\nAn array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set \nas big as you want.\nExample\nCreate an array with 100000 random numbers, and display them using a \n  histogram with 100 bars:\nimport numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 100000)\nplt.hist(x, 100)\nplt.show()\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import numpy\nx = numpy.random.uniform(0.0, 5.0, 250)\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 250)\nplt.hist(x, 5)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 100000)\nplt.hist(x, 100)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy\nx = numpy.random.uniform(0.0, 5.0, 250)\n# TODO: Complete this line",
      "solution": "import numpy\nx = numpy.random.uniform(0.0, 5.0, 250)\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 250)\n# TODO: Complete this line\nplt.show()",
      "solution": "import numpy\nimport matplotlib.pyplot as plt\nx = \n  numpy.random.uniform(0.0, 5.0, 250)\nplt.hist(x, 5)\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "a38450db-5fa3-42d8-91ec-9fac083b16c7",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a90e8aa2-bd39-4e42-a0db-e1c7b341ad2c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "20cbbee3-df67-4f41-ac88-5bbd5fc8bc36",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is the data sets?",
      "options": [
        "None of the above.",
        "much bigger",
        "between 0 and 1",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of the data sets is 'much bigger'."
    },
    {
      "question": "What is The first bar represents how many values in the array?",
      "options": [
        "None of the above.",
        "between 0 and 1",
        "much bigger",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The first bar represents how many values in the array is 'between 0 and 1'."
    }
  ],
  "summary": "This tutorial covers Machine Learning - Data Distribution concepts and techniques. You'll learn how to use Machine Learning - Data Distribution effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Machine Learning - Data Distribution and how to apply it in your projects."
}