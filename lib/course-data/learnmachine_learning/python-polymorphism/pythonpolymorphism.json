{
  "id": "0e11696c-f434-431e-aa16-44d39805485e",
  "title": "PythonPolymorphism",
  "slug": "pythonpolymorphism",
  "metadata": {
    "description": "Learn about PythonPolymorphism with clear explanations and practical examples.",
    "keywords": [
      "python",
      "self",
      "brand",
      "model",
      "class",
      "classes",
      "move",
      "print",
      "vehicle",
      "boat",
      "plane"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python Polymorphism"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nPolymorphism",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The word \"polymorphism\" means \"many forms\", and in programming it refers to\nmethods/functions/operators with the same name that can be executed on many \nobjects or classes.\nFunction Polymorphism\nAn example of a Python function that can be used on different objects is the\nlen()\nfunction.\nString\nFor strings\nlen()\nreturns the number of characters:\nExample\nx = \"Hello World!\"\nprint(len(x))\n\nTuple\nFor tuples\nlen()\nreturns the number of items \nin the tuple:\nExample\nmytuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(mytuple))\n\nDictionary\nFor dictionaries\nlen()\nreturns the number of key/value pairs \nin the dictionary:\nExample\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(len(thisdict))\n\nClass Polymorphism\nPolymorphism is often used in Class methods, where we can have multiple \nclasses with the same method name.\nFor example, say we have three classes:\nCar\n,\nBoat\n, and\nPlane\n, and they all have \na method called\nmove()\n:\nExample\nDifferent classes with the same method:\nclass Car:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Drive!\")\nclass Boat:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Sail!\")\nclass Plane:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Fly!\")\ncar1 = Car(\"Ford\", \"Mustang\")  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\") \u00a0\u00a0\u00a0\u00a0#Create a Plane object\nfor x in (car1, boat1, plane1):\nx.move()\n\nLook at the for loop at the end.\nBecause of polymorphism we can execute the same method for all three classes.\nInheritance Class Polymorphism\nWhat about classes with child classes with the same name? Can we use polymorphism there?\nYes. If we use the example above and make a parent class called\nVehicle\n, and make\nCar\n,\nBoat\n,\nPlane\nchild classes of\nVehicle\n, the child classes \ninherits the\nVehicle\nmethods, but can override \nthem:\nExample\nCreate a class called\nVehicle\nand make\nCar\n,\nBoat\n,\nPlane\nchild classes of\nVehicle\n:\nclass Vehicle:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Move!\")\nclass \n    Car(Vehicle):\npass\nclass Boat(Vehicle):\ndef \n    move(self):\nprint(\"Sail!\")\nclass \n    Plane(Vehicle):\ndef move(self):\nprint(\"Fly!\")\ncar1 = Car(\"Ford\", \"Mustang\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = \n    Plane(\"Boeing\", \"747\")\u00a0\u00a0\u00a0\u00a0 #Create a Plane object\nfor x in (car1, boat1, \n    plane1):\nprint(x.brand)\nprint(x.model)\nx.move()\n\nChild classes inherits the properties and methods from the parent class.\nIn the example above you can see that the\nCar\nclass is empty, but \nit inherits\nbrand\n,\nmodel\n, and\nmove()\nfrom\nVehicle\n.\nThe\nBoat\nand\nPlane\nclasses also \ninherit\nbrand\n,\nmodel\n, \nand\nmove()\nfrom\nVehicle\n, but they both override the\nmove()\nmethod.\nBecause of polymorphism we can execute the same method for all classes.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = \"Hello World!\"\nprint(len(x))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(mytuple))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "thisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(len(thisdict))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "class Car:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Drive!\")\nclass Boat:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Sail!\")\nclass Plane:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Fly!\")\ncar1 = Car(\"Ford\", \"Mustang\")  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\") \u00a0\u00a0\u00a0\u00a0#Create a Plane object\nfor x in (car1, boat1, plane1):\nx.move()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "class Vehicle:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\ndef move(self):\nprint(\"Move!\")\nclass \n    Car(Vehicle):\npass\nclass Boat(Vehicle):\ndef \n    move(self):\nprint(\"Sail!\")\nclass \n    Plane(Vehicle):\ndef move(self):\nprint(\"Fly!\")\ncar1 = Car(\"Ford\", \"Mustang\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = \n    Plane(\"Boeing\", \"747\")\u00a0\u00a0\u00a0\u00a0 #Create a Plane object\nfor x in (car1, boat1, \n    plane1):\nprint(x.brand)\nprint(x.model)\nx.move()",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "x = \"Hello World!\"\nprint(len(x))"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(mytuple))"
    }
  ],
  "related_topics": [
    {
      "id": "d7d24f65-0ac5-4342-a6f4-1a60b287d63a",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e9c6528f-b24e-4054-bdc4-505da28e6fef",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "91d09f81-5264-4caf-ad8e-e9aad78adaa8",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Function Polymorphism\nAn example of a Python function that can be used on different objects?",
      "options": [
        "None of the above.",
        "Not a Function Polymorphism\nAn example of a Python function that can be used on different objects.",
        "None of the above.",
        "the\nlen()\nfunction"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Function Polymorphism\nAn example of a Python function that can be used on different objects is 'the\nlen()\nfunction'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonPolymorphism concepts and techniques. You'll learn how to use PythonPolymorphism effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonPolymorphism and how to apply it in your projects."
}