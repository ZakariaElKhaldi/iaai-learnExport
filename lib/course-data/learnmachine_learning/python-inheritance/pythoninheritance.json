{
  "id": "106072f2-373a-4a8c-abf3-fad6328a2035",
  "title": "PythonInheritance",
  "slug": "pythoninheritance",
  "metadata": {
    "description": "Learn about PythonInheritance with clear explanations and practical examples.",
    "keywords": [
      "python",
      "class",
      "self",
      "student",
      "function",
      "parent",
      "person",
      "fname",
      "lname",
      "properties",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python Inheritance"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nInheritance",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Inheritance\nInheritance allows us to define a class that inherits all the methods and properties from another class.\nParent class\nis the class being inherited from, also called \nbase class.\nChild class\nis the class that inherits from another class, \nalso called derived class.\nCreate a Parent Class\nAny class can be a parent class, so the syntax is the same as creating any \nother class:\nExample\nCreate a class named\nPerson\n, with\nfirstname\nand\nlastname\nproperties, \nand a\nprintname\nmethod:\nclass Person:\ndef __init__(self, fname, lname):\nself.firstname = fname\nself.lastname = lname\ndef printname(self):\nprint(self.firstname, \n  self.lastname)\n#Use the Person class to create an object, and then \n  execute the printname method:\nx = Person(\"John\", \"Doe\")\nx.printname()\n\nCreate a Child Class\nTo create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child \nclass:\nExample\nCreate a class named\nStudent\n, which will inherit the properties \nand methods from \nthe\nPerson\nclass:\nclass Student(Person):\npass\nNote:\nUse the\npass\nkeyword when you do not want to add any other properties or methods to the \n  class.\nNow the Student class has the same properties and methods as the Person \nclass.\nExample\nUse the\nStudent\nclass to create an object, \nand then execute the\nprintname\nmethod:\nx = Student(\"Mike\", \"Olsen\")\nx.printname()\n\nAdd the __init__() Function\nSo far we have created a child class that inherits the properties and methods \nfrom its parent.\nWe want to add the\n__init__()\nfunction to the child class (instead of the\npass\nkeyword).\nNote:\nThe\n__init__()\nfunction is called automatically every time the class is being used to create a new object.\nExample\nAdd the\n__init__()\nfunction to the\nStudent\nclass:\nclass Student(Person):\ndef __init__(self, fname, lname):\n#add properties etc.\nWhen you add the\n__init__()\nfunction, the child class will no longer inherit \nthe parent's\n__init__()\nfunction.\nNote:\nThe child's\n__init__()\nfunction\noverrides\nthe inheritance of the parent's\n__init__()\nfunction.\nTo keep the inheritance of the parent's\n__init__()\nfunction, add a call to the \nparent's\n__init__()\nfunction:\nExample\nclass Student(Person):\ndef __init__(self, fname, lname):\nPerson.__init__(self, fname, lname)\n\nNow we have successfully added the\n__init__()\nfunction, and kept the \ninheritance of the parent class, and we are ready to add functionality in the\n__init__()\nfunction.\nUse the super() Function\nPython also has a\nsuper()\nfunction that \nwill make the child class inherit all the methods and properties from its \nparent:\nExample\nclass Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)\n\nBy using the\nsuper()\nfunction, you do not \nhave to use the name of the parent element, it will automatically inherit the \nmethods and properties from its parent.\nAdd Properties\nExample\nAdd a property called\ngraduationyear\nto the\nStudent\nclass:\nclass Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = 2019\n\nIn the example below, the year\n2019\nshould be a variable, and passed into the\nStudent\nclass when creating student objects.\nTo do so, add another parameter in the\n__init__()\nfunction:\nExample\nAdd a\nyear\nparameter, and pass the correct \nyear when creating objects:\nclass Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = year\nx = Student(\"Mike\", \"Olsen\", 2019)\n\nAdd Methods\nExample\nAdd a method called\nwelcome\nto the\nStudent\nclass:\nclass Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = year\ndef welcome(self):\nprint(\"Welcome\", \n  self.firstname, self.lastname, \"to the class of\", self.graduationyear)\n\nIf you add a method in the child class with the same name as a function in \nthe parent class, the inheritance of the parent method will be overridden.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "class Person:\ndef __init__(self, fname, lname):\nself.firstname = fname\nself.lastname = lname\ndef printname(self):\nprint(self.firstname, \n  self.lastname)\n#Use the Person class to create an object, and then \n  execute the printname method:\nx = Person(\"John\", \"Doe\")\nx.printname()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "class Student(Person):\npass",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = Student(\"Mike\", \"Olsen\")\nx.printname()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "class Student(Person):\ndef __init__(self, fname, lname):\n#add properties etc.",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "class Student(Person):\ndef __init__(self, fname, lname):\nPerson.__init__(self, fname, lname)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "class Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "class Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = 2019",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "class Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = year\nx = Student(\"Mike\", \"Olsen\", 2019)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "class Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear \n  = year\ndef welcome(self):\nprint(\"Welcome\", \n  self.firstname, self.lastname, \"to the class of\", self.graduationyear)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "class Person:\ndef __init__(self, fname, lname):\nself.firstname = fname\nself.lastname = lname\ndef printname(self):\nprint(self.firstname, \n  self.lastname)\n#Use the Person class to create an object, and then \n# TODO: Complete this line\nx = Person(\"John\", \"Doe\")\nx.printname()",
      "solution": "class Person:\ndef __init__(self, fname, lname):\nself.firstname = fname\nself.lastname = lname\ndef printname(self):\nprint(self.firstname, \n  self.lastname)\n#Use the Person class to create an object, and then \n  execute the printname method:\nx = Person(\"John\", \"Doe\")\nx.printname()"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "class Student(Person):\npass"
    }
  ],
  "related_topics": [
    {
      "id": "82cd0d3d-6491-4aff-8bf5-67460ba5a1b6",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b1e991be-d04c-49a1-847c-bfa7d23ba240",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "584b97b8-efcd-4a8d-8871-232e471595e1",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Parent class?",
      "options": [
        "None of the above.",
        "None of the above.",
        "the class being inherited from",
        "the class that inherits from another class"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Parent class is 'the class being inherited from'."
    },
    {
      "question": "What is Child class?",
      "options": [
        "None of the above.",
        "the class being inherited from",
        "the class that inherits from another class",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Child class is 'the class that inherits from another class'."
    }
  ],
  "summary": "This tutorial covers PythonInheritance concepts and techniques. You'll learn how to use PythonInheritance effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonInheritance and how to apply it in your projects."
}