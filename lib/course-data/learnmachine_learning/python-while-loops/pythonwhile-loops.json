{
  "id": "56ef21d7-4df4-481e-9c83-112c9c74bf0a",
  "title": "PythonWhile Loops",
  "slug": "pythonwhile-loops",
  "metadata": {
    "description": "Learn about PythonWhile Loops with clear explanations and practical examples.",
    "keywords": [
      "loop",
      "print",
      "continue",
      "statement",
      "example",
      "loops",
      "condition",
      "else",
      "python",
      "true"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python While Loops"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nWhile Loops",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Loops\nPython has two primitive loop commands:\nwhile\nloops\nfor\nloops\nThe while Loop\nWith the\nwhile\nloop we can execute a set of statements as long as a condition is true.\nExample\nPrint i as long as i is less than 6:\ni = 1\nwhile i < 6:\nprint(i)\ni += 1\n\nNote:\nremember to increment i, or else the loop will continue forever.\nThe\nwhile\nloop requires relevant variables to be ready, in this example we need to define an indexing variable,\ni\n, \nwhich we set to 1.\nThe break Statement\nWith the\nbreak\nstatement we can stop the loop even if the \nwhile condition is true:\nExample\nExit the loop when i is 3:\ni = 1\nwhile i < 6:\nprint(i)\nif i == 3:\nbreak\ni += 1\n\nThe continue Statement\nWith the\ncontinue\nstatement we can stop the \ncurrent iteration, and continue with the \nExample\nContinue to the \ni = 0\nwhile i < 6:\ni += 1\nif i == 3:\ncontinue\nprint(i)\n\nThe else Statement\nWith the\nelse\nstatement we can run a block of code once when the \ncondition no longer is true:\nExample\nPrint a message once the condition is false:\ni = 1\nwhile i < 6:\nprint(i)\ni += 1\nelse:\nprint(\"i is no longer less than 6\")\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "i = 1\nwhile i < 6:\nprint(i)\ni += 1",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "i = 1\nwhile i < 6:\nprint(i)\nif i == 3:\nbreak\ni += 1",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "i = 0\nwhile i < 6:\ni += 1\nif i == 3:\ncontinue\nprint(i)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "i = 1\nwhile i < 6:\nprint(i)\ni += 1\nelse:\nprint(\"i is no longer less than 6\")",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "i = 1\n# TODO: Complete this line\nprint(i)\ni += 1",
      "solution": "i = 1\nwhile i < 6:\nprint(i)\ni += 1"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "i = 1\nwhile i < 6:\nprint(i)\n# TODO: Complete this line\nbreak\ni += 1",
      "solution": "i = 1\nwhile i < 6:\nprint(i)\nif i == 3:\nbreak\ni += 1"
    }
  ],
  "related_topics": [
    {
      "id": "d3d9e828-d673-4313-989e-f2a04f8c5610",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d2ac472b-ffca-4127-ada7-09422f19a540",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "f6f95400-eccd-4a34-b2b3-b4e7ef84f729",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is while\nloops\nfor\nloops\nThe while Loop\nWith the\nwhile\nloop we can execute a set of statements as long as a condition?",
      "options": [
        "None of the above.",
        "None of the above.",
        "less than 6:\ni = 1\nwhile i < 6:\nprint(i)\ni += 1\n\nNote:\nremember to increment i",
        "true"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of while\nloops\nfor\nloops\nThe while Loop\nWith the\nwhile\nloop we can execute a set of statements as long as a condition is 'true'."
    },
    {
      "question": "What is Example\nPrint i as long as i?",
      "options": [
        "true",
        "None of the above.",
        "None of the above.",
        "less than 6:\ni = 1\nwhile i < 6:\nprint(i)\ni += 1\n\nNote:\nremember to increment i"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Example\nPrint i as long as i is 'less than 6:\ni = 1\nwhile i < 6:\nprint(i)\ni += 1\n\nNote:\nremember to increment i'."
    }
  ],
  "summary": "This tutorial covers PythonWhile Loops concepts and techniques. You'll learn how to use PythonWhile Loops effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonWhile Loops and how to apply it in your projects."
}