{
  "id": "645f22b8-9ce0-4bc9-a3c7-c026e4e78476",
  "title": "PythonExamples",
  "slug": "pythonexamples",
  "metadata": {
    "description": "Learn about PythonExamples with clear explanations and practical examples.",
    "keywords": [
      "python",
      "explained",
      "create",
      "loop",
      "using",
      "item",
      "function",
      "table",
      "string",
      "return"
    ],
    "difficulty": "advanced",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 6,
    "category": "LearnMachine Learning",
    "subcategory": "Python Examples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nExamples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Syntax\nPrint \"Hello World\"\nComments in Python\nDocstrings\nSyntax Explained\nPython Variables\nCreate a variable\nOutput both text and a variable\nAdd a variable to another variable\nVariables Explained\nPython Numbers\nVerify the type of an object\nCreate integers\nCreate floating point numbers\nCreate scientific numbers with an \"e\" to indicate the power of 10\nCreate complex numbers\nNumbers Explained\nPython Casting\nCasting - Integers\nCasting - Floats\nCasting - Strings\nCasting Explained\nPython Strings\nGet the character at position 1 of a string\nSubstring. Get the characters from position 2 to position 5 (not included)\nRemove whitespace from the beginning or at the end of a string\nReturn the length of a string\nConvert a string to lower case\nConvert a string to upper case\nReplace a string with another string\nSplit a string into substrings\nStrings Explained\nPython Operators\nAddition operator\nSubtraction operator\nMultiplication operator\nDivision operator\nModulus operator\nAssignment operator\nOperators Explained\nPython Lists\nCreate a list\nAccess list items\nChange the value of a list item\nLoop through a list\nCheck if a list item exists\nGet the length of a list\nAdd an item to the end of a list\nAdd an item at a specified index\nRemove an item\nRemove the last item\nRemove an item at a specified index\nEmpty a list\nUsing the list() constructor to make a list\nLists Explained\nPython Tuples\nCreate a tuple\nAccess tuple items\nChange tuple values\nLoop through a tuple\nCheck if a tuple item exists\nGet the length of a tuple\nDelete a tuple\nUsing the tuple() constructor to create a tuple\nTuples Explained\nPython Sets\nCreate a set\nLoop through a set\nCheck if an item exists\nAdd an item to a set\nAdd multiple items to a set\nGet the length of a set\nRemove an item in a set\nRemove an item in a set by using the discard() method\nRemove the last item in a set by using the pop() method\nEmpty a set\nDelete a set\nUsing the set() constructor to create a set\nSets Explained\nPython Dictionaries\nCreate a dictionary\nAccess the items of a dictionary\nChange the value of a specific item in a dictionary\nPrint all key names in a dictionary, one by one\nPrint all values in a dictionary, one by one\nUsing the values() function to return values of a dictionary\nLoop through both keys an values, by using the items() function\nCheck if a key exists\nGet the length of a dictionary\nAdd an item to a dictionary\nRemove an item from a dictionary\nEmpty a dictionary\nUsing the dict() constructor to create a dictionary\nDictionaries Explained\nPython If ... Else\nThe if statement\nThe elif statement\nThe else statement\nShort hand if\nShort hand if ... else\nThe and keyword\nThe or keyword\nIf ... Else Explained\nPython While Loop\nThe while loop\nUsing the break statement in a while loop\nUsing the continue statement in a while loop\nWhile Loop Explained\nPython For Loop\nThe for loop\nLoop through a string\nUsing the break statement in a for loop\nUsing the continue statement in a for loop\nUsing the range() function in a for loop\nElse in for loop\nNested for loop\nFor Loop Explained\nPython Functions\nCreate and call a function\nFunction parameters\nDefault parameter value\nLet a function return a value\nRecursion\nFunctions Explained\nPython Lambda\nA lambda function that adds 10 to the number passed in as an argument\nA lambda function that multiplies argument a with argument b\nA lambda function that sums argument a, b, and c\nLambda Explained\nPython Arrays\nCreate an array\nAccess the elements of an array\nChange the value of an array element\nGet the length of an array\nLoop through all elements of an array\nAdd an element to an array\nRemove an element from an array\nArrays Explained\nPython Classes and Objects\nCreate a class\nCreate an object\nThe __init__() Function\nCreate object methods\nThe self parameter\nModify object properties\nDelete object properties\nDelete an object\nClasses/Objects Explained\nPython Iterators\nReturn an iterator from a tuple\nReturn an iterator from a string\nLoop through an iterator\nCreate an iterator\nStop iteration\nIterators Explained\nPython Modules\nUse a module\nVariables in module\nRe-naming a module\nBuilt-in modules\nUsing the dir() function\nImport from module\nModules Explained\nPython Dates\nImport the datetime module and display the current date\nReturn the year and name of weekday\nCreate a date object\nThe strftime() Method\nDates Explained\nPython Math\nFind the lowest and highest value in an iterable\nReturn the absolute value of a number\nReturn the value of x to the power of y (x\ny\n)\nReturn the square root of a number\nRound a number upwards and downwards to its nearest integer\nReturn the value of PI\nMath Explained\nPython JSON\nConvert from JSON to Python\nConvert from Python to JSON\nConvert Python objects into JSON strings\nConvert a Python object containing all the legal data types\nUse the indent parameter to define the numbers of indents\nUse the separators parameter to change the default separator\nUse the sort_keys parameter to specify if the result should be sorted or not\nJSON Explained\nPython RegEx\nSearch a string to see if it starts with \"The\" and ends with \"Spain\"\nUsing the findall() function\nUsing the search() function\nUsing the split() function\nUsing the sub() function\nRegEx Explained\nPython PIP\nUsing a package\nPIP Explained\nPython Try Except\nWhen an error occurs, print a message\nMany exceptions\nUse the else keyword to define a block of code to be executed if no errors were raised\nUse the finally block to execute code regardless if the try block raises an error or not\nTry Except Explained\nPython File Handling\nRead a file\nRead only parts of a file\nRead one line of a file\nLoop through the lines of a file to read the whole file, line by line\nFile Handling Explained\nPython MySQL\nCreate a connection to a database\nCreate a database in MySQL\nCheck if a database exist\nCreate a table\nCheck if a table exist\nCreate primary key when creating a table\nInsert a record in a table\nInsert multiple rows\nGet inserted ID\nSelect all records from a table\nSelect only some of the columns in a table\nUse the fetchone() method to fetch only one row in a table\nSelect with a filter\nWildcards characters\nPrevent SQL injection\nSort the result of a table alphabetically\nSort the result in a descending order (reverse alphabetically)\nDelete records from an existing table\nPrevent SQL injection\nDelete an existing table\nDelete a table if it exist\nUpdate existing records in a table\nPrevent SQL injection\nLimit the number of records returned from a query\nCombine rows from two or more tables, based on a related column between them\nLEFT JOIN\nRIGHT JOIN\nMySQL Explained\nPython MongoDB\nCreate a database\nCheck if a database exist\nCreate a collection\nCheck if a collection exist\nInsert into collection\nReturn the id field\nInsert multiple documents\nInsert multiple documents with specified IDs\nFind the first document in the selection\nFind all documents in the selection\nFind only some fields\nFilter the result\nAdvanced query\nFilter with regular expressions\nSort the result alphabetically\nSort the result descending (reverse alphabetically)\nDelete document\nDelete many documents\nDelete all documents in a collection\nDelete a collection\nUpdate a document\nUpdate many/all documents\nLimit the result\nMongoDB Explained\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6689a7df-3b91-49b7-90b0-1ed1696aa255",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "f761d20f-9fde-4494-beca-fe5b1ef9a7e7",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "deb634f7-5fae-4c1b-b73e-8da54202f2b9",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonExamples concepts and techniques. You'll learn how to use PythonExamples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonExamples and how to apply it in your projects."
}