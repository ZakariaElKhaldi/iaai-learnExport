{
  "id": "6112f978-c855-4b7f-aa1e-d4e7df1a6ed2",
  "title": "Python MongoDBSort",
  "slug": "python-mongodbsort",
  "metadata": {
    "description": "Learn about Python MongoDBSort with clear explanations and practical examples.",
    "keywords": [
      "python",
      "sort",
      "name",
      "result",
      "descending",
      "example",
      "pymongo",
      "myclient",
      "mydb",
      "mycol",
      "mydoc"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "MongoDB Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python MongoDB\nSort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Sort the Result\nUse the\nsort()\nmethod to sort the result in \nascending or descending order.\nThe\nsort()\nmethod takes one parameter for \n\"fieldname\" and one parameter for \"direction\" (ascending is the default \ndirection).\nExample\nSort the result alphabetically by name:\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\")\nfor x in mydoc:\nprint(x)\nRun example \u00bb\nSort Descending\nUse the value -1 as the second parameter to sort descending.\nsort(\"name\", 1) #ascending\nsort(\"name\", -1) #descending\nExample\nSort the result reverse alphabetically by name:\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\", -1)\nfor x in mydoc:\nprint(x)\nRun example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\")\nfor x in mydoc:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\", -1)\nfor x in mydoc:\nprint(x)",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\n# TODO: Complete this line\nmydoc = mycol.find().sort(\"name\")\nfor x in mydoc:\nprint(x)",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\")\nfor x in mydoc:\nprint(x)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\", -1)\nfor x in mydoc:\n# TODO: Complete this line",
      "solution": "import pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\", -1)\nfor x in mydoc:\nprint(x)"
    }
  ],
  "related_topics": [
    {
      "id": "28e41271-6484-42bc-820d-327c48237229",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b670a4d9-7c7b-41e1-b0db-2282de8bbfd5",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "262a4d54-0937-4288-ba4c-89fd5a67075d",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is ascending?",
      "options": [
        "the default \ndirection)",
        "None of the above.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of ascending is 'the default \ndirection)'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers Python MongoDBSort concepts and techniques. You'll learn how to use Python MongoDBSort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Python MongoDBSort and how to apply it in your projects."
}