{
  "id": "ea0bc80b-1b65-44da-acc1-9a03f14b00c4",
  "title": "PythonString Formatting",
  "slug": "pythonstring-formatting",
  "metadata": {
    "description": "Learn about PythonString Formatting with clear explanations and practical examples.",
    "keywords": [
      "python",
      "format",
      "price",
      "example",
      "print",
      "string",
      "dollars",
      "number",
      "method",
      "values",
      "value"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python String Formatting"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nString Formatting",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "F-String was introduced in Python 3.6,\nand is now the preferred way of formatting strings.\nBefore Python 3.6 we had to use the\nformat()\nmethod.\nF-Strings\nF-string allows you to format selected parts of a string.\nTo specify a string as an f-string, simply put an\nf\nin front of the string \nliteral, like this:\nExample\nCreate an f-string:\ntxt = f\"The price is 49 dollars\"\nprint(txt)\n\nPlaceholders and Modifiers\nTo format values in an f-string, add placeholders\n{}\n, \na placeholder can contain variables,\noperations, functions, and modifiers to format the value.\nExample\nAdd a placeholder for the\nprice\nvariable:\nprice = 59\ntxt = f\"The price is {price} dollars\"\nprint(txt)\n\nA placeholder can also include a\nmodifier\nto format the value.\nA modifier is included by adding a colon\n:\nfollowed by a legal formatting type, like\n.2f\nwhich means fixed point number with 2 decimals:\nExample\nDisplay the price with 2 decimals:\nprice = 59\ntxt = f\"The price is {price:.2f} dollars\"\nprint(txt)\n\nYou can also format a value directly without keeping it in a variable:\nExample\nDisplay the value\n95\nwith 2 decimals:\ntxt = f\"The price is {95:.2f} dollars\"\nprint(txt)\n\nPerform Operations in F-Strings\nYou can perform Python operations inside the placeholders.\nYou can do math operations:\nExample\nPerform a math operation in the placeholder, and return the result:\ntxt = f\"The price is {20 * 59} dollars\"\nprint(txt)\n\nYou can perform math operations on variables:\nExample\nAdd taxes before displaying the price:\nprice = 59\ntax = 0.25\ntxt = f\"The price is {price + (price * tax)} dollars\"\nprint(txt)\n\nYou can perform\nif...else\nstatements inside the placeholders:\nExample\nReturn \"Expensive\" if the price is over 50, otherwise return \"Cheap\":\nprice = 49\ntxt = f\"It is very {'Expensive' if price>50 else 'Cheap'}\"\nprint(txt)\n\nExecute Functions in F-Strings\nYou can execute functions inside the placeholder:\nExample\nUse the string method\nupper()\nto convert a \nvalue into upper case letters:\nfruit = \"apples\"\ntxt = f\"I love {fruit.upper()}\"\nprint(txt)\n\nThe function does not have to be a built-in Python method, you can create your own functions and use them:\nExample\nCreate a function that converts feet into meters:\ndef myconverter(x):\nreturn x * 0.3048\ntxt = f\"The plane is flying at a {myconverter(30000)} meter altitude\"\nprint(txt)\n\nMore Modifiers\nAt the beginning of this chapter we explained how to use the\n.2f\nmodifier to \nformat a number into a fixed point number with 2 decimals.\nThere are several other modifiers that can be used to format values:\nExample\nUse a comma as a thousand separator:\nprice = 59000\ntxt = f\"The price is {price:,} dollars\"\nprint(txt)\n\nHere is a list of all the formatting types.\nFormatting Types\n:<\nTry it\nLeft aligns the result (within the available space)\n:>\nTry it\nRight aligns the result (within the available space)\n:^\nTry it\nCenter aligns the result (within the available space)\n:=\nTry it\nPlaces the sign to the left most position\n:+\nTry it\nUse a plus sign to indicate if the result is positive or negative\n:-\nTry it\nUse a minus sign for negative values only\n:\nTry it\nUse a space to insert an extra space before positive numbers (and a minus sign \n  before negative numbers)\n:,\nTry it\nUse a comma as a thousand separator\n:_\nTry it\nUse a underscore as a thousand separator\n:b\nTry it\nBinary format\n:c\nConverts the value into the corresponding Unicode character\n:d\nTry it\nDecimal format\n:e\nTry it\nScientific format, with a lower case e\n:E\nTry it\nScientific format, with an upper case E\n:f\nTry it\nFix point number format\n:F\nTry it\nFix point number format, in uppercase format (show\ninf\nand\nnan\nas\nINF\nand\nNAN\n)\n:g\nGeneral format\n:G\nGeneral format (using a upper case E for scientific notations)\n:o\nTry it\nOctal format\n:x\nTry it\nHex format, lower case\n:X\nTry it\nHex format, upper case\n:n\nNumber format\n:%\nTry it\nPercentage format\nString format()\nBefore Python 3.6 we used the\nformat()\nmethod to format strings.\nThe\nformat()\nmethod can still be used,\nbut f-strings are faster and the preferred way to format strings.\nThe \nformat()\nmethod.\nThe\nformat()\nmethod also uses curly brackets as placeholders\n{}\n, but the syntax is slightly different:\nExample\nAdd a placeholder where you want to display the price:\nprice = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))\n\nYou can add parameters inside the curly brackets to specify how to convert \nthe value:\nExample\nFormat the price to be displayed as a number with two decimals:\ntxt = \"The price is {:.2f} dollars\"\n\nCheck out all formatting types in our\nString format() Reference\n.\nMultiple Values\nIf you want to use more values, just add more values to the format() method:\nprint(txt.format(price, itemno, count))\nAnd add more placeholders:\nExample\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of \n  item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n\nIndex Numbers\nYou can use index numbers (a number inside the curly brackets\n{0}\n) to be sure the \nvalues are placed \nin the correct placeholders:\nExample\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of \n  item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n\nAlso, if you want to refer to the same value more than once, use the index number:\nExample\nage = 36\nname = \"John\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, \n  name))\n\nNamed Indexes\nYou can also use named indexes by entering a name inside the curly brackets\n{carname}\n, \nbut then you must use names when you pass the parameter values\ntxt.format(carname = \"Ford\")\n:\nExample\nmyorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname \n  = \"Ford\", model = \"Mustang\"))\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "txt = f\"The price is 49 dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "price = 59\ntxt = f\"The price is {price} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "price = 59\ntxt = f\"The price is {price:.2f} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "txt = f\"The price is {95:.2f} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "txt = f\"The price is {20 * 59} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "price = 59\ntax = 0.25\ntxt = f\"The price is {price + (price * tax)} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "price = 49\ntxt = f\"It is very {'Expensive' if price>50 else 'Cheap'}\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "fruit = \"apples\"\ntxt = f\"I love {fruit.upper()}\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 11,
      "code": "def myconverter(x):\nreturn x * 0.3048\ntxt = f\"The plane is flying at a {myconverter(30000)} meter altitude\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 12,
      "code": "price = 59000\ntxt = f\"The price is {price:,} dollars\"\nprint(txt)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 13,
      "code": "price = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 14,
      "code": "txt = \"The price is {:.2f} dollars\"",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 15,
      "code": "print(txt.format(price, itemno, count))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 16,
      "code": "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of \n  item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 17,
      "code": "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of \n  item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 18,
      "code": "age = 36\nname = \"John\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, \n  name))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 19,
      "code": "myorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname \n  = \"Ford\", model = \"Mustang\"))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your python code here",
      "solution": "txt = f\"The price is 49 dollars\"\nprint(txt)"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "price = 59\n# TODO: Complete this line\nprint(txt)",
      "solution": "price = 59\ntxt = f\"The price is {price} dollars\"\nprint(txt)"
    }
  ],
  "related_topics": [
    {
      "id": "c66576d5-9393-418a-88a0-bd2514410ae2",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "1b622cf9-f5e0-4d82-8d36-873b8cae5179",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a3451e2b-39ec-4e80-b1f8-245641f7d72e",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and?",
      "options": [
        "now the preferred way of formatting strings",
        "None of the above.",
        "49 dollars\"\nprint(txt)\n\nPlaceholders and Modifiers\nTo format values in an f-string",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of and is 'now the preferred way of formatting strings'."
    },
    {
      "question": "What is The price?",
      "options": [
        "None of the above.",
        "49 dollars\"\nprint(txt)\n\nPlaceholders and Modifiers\nTo format values in an f-string",
        "None of the above.",
        "now the preferred way of formatting strings"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The price is '49 dollars\"\nprint(txt)\n\nPlaceholders and Modifiers\nTo format values in an f-string'."
    }
  ],
  "summary": "This tutorial covers PythonString Formatting concepts and techniques. You'll learn how to use PythonString Formatting effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonString Formatting and how to apply it in your projects."
}