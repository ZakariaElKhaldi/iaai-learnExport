{
  "id": "8304844e-ff6c-410c-bc29-62568d727f45",
  "title": "Machine Learning - Polynomial Regression",
  "slug": "machine-learning-polynomial-regression",
  "metadata": {
    "description": "Learn about Machine Learning - Polynomial Regression with clear explanations and practical examples.",
    "keywords": [
      "c",
      "numpy",
      "example",
      "regression",
      "import",
      "polynomial",
      "mymodel",
      "myline",
      "relationship",
      "speed",
      "polyfit"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Polynomial Regression"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Machine Learning - Polynomial Regression",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Polynomial Regression\nIf your data points clearly will not fit a linear regression (a straight line \nthrough all data points), it might be ideal for polynomial regression.\nPolynomial regression, like linear regression, uses the relationship between the \nvariables x and y to find the best way to draw a line through the data points.\nHow Does it Work?\nPython has methods for finding a relationship between data-points and to draw \na line of polynomial regression. We will show you how to use these methods \ninstead of going through the mathematic formula.\nIn the example below, we have registered 18 cars as they were passing a \ncertain tollbooth.\nWe have registered the car's speed, and the time of day (hour) the passing \noccurred.\nThe x-axis represents the hours of the day and the y-axis represents the \nspeed:\nExample\nStart by drawing a scatter plot:\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nplt.scatter(x, y)\nplt.show()\nResult:\nRun example \u00bb\nExample\nImport\nnumpy\nand\nmatplotlib\nthen draw the line of \n  Polynomial Regression:\nimport numpy\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(1, 22, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()\nResult:\nRun example \u00bb\nExample Explained\nImport the modules you need.\nYou can learn about the NumPy module in our\nNumPy Tutorial\n.\nYou can learn about the SciPy module in our\nSciPy Tutorial\n.\nimport numpy\nimport matplotlib.pyplot as plt\nCreate the arrays that represent the values of the x and y axis:\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nNumPy has a method that lets us make a polynomial model:\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nThen specify how the line will display, we start at position 1, and end at \nposition 22:\nmyline = numpy.linspace(1, 22, 100)\nDraw the original scatter plot:\nplt.scatter(x, y)\nDraw the line of polynomial regression:\nplt.plot(myline, mymodel(myline))\nDisplay the diagram:\nplt.show()\nR-Squared\nIt is important to know how well the relationship between the values of the \nx- and y-axis is, if there are no relationship the \npolynomial \nregression can not be used to predict anything.\nThe relationship is measured with a value called the r-squared.\nThe r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans 100% related.\nPython and the Sklearn module will compute this value for you, all you have to \ndo is feed it with the x and y arrays:\nExample\nHow well does my data fit in a polynomial regression?\nimport numpy\nfrom sklearn.metrics import r2_score\nx = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))\nTry if Yourself \u00bb\nNote:\nThe result 0.94 shows that there is a very good relationship, \n  and we can use polynomial regression in future \n  predictions.\nPredict Future Values\nNow we can use the information we have gathered to predict future values.\nExample: Let us try to predict the speed of a car that passes the tollbooth \nat around the time 17:00:\nTo do so, we need the same\nmymodel\narray \nfrom the example above:\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nExample\nPredict the speed of a car passing at 17:00:\nimport numpy\nfrom sklearn.metrics import r2_score\nx = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nspeed = mymodel(17)\nprint(speed)\nRun example \u00bb\nThe example predicted a speed to be 88.87, which we also could read from the diagram:\nBad Fit?\nLet us create an example where polynomial regression would not be the best method \nto predict future values.\nExample\nThese values for the x- and y-axis should result in a very bad fit for \n  polynomial \n  regression:\nimport numpy\nimport matplotlib.pyplot as plt\nx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(2, 95, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()\nResult:\nRun example \u00bb\nAnd the r-squared value?\nExample\nYou should get a very low r-squared value.\nimport numpy\nfrom sklearn.metrics import r2_score\nx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))\nTry if Yourself \u00bb\nThe result: 0.00995 indicates a very bad relationship, and tells us that this data set is not suitable for polynomial regression.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "import matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nplt.scatter(x, y)\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "import numpy\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(1, 22, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "import numpy\nfrom sklearn.metrics import r2_score\nx = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "import numpy\nfrom sklearn.metrics import r2_score\nx = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nspeed = mymodel(17)\nprint(speed)",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "import numpy\nimport matplotlib.pyplot as plt\nx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(2, 95, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "import numpy\nfrom sklearn.metrics import r2_score\nx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n# TODO: Complete this line\nplt.show()",
      "solution": "import matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nplt.scatter(x, y)\nplt.show()"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "import numpy\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n# TODO: Complete this line\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(1, 22, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
      "solution": "import numpy\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(1, 22, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()"
    }
  ],
  "related_topics": [
    {
      "id": "feb75b85-fa63-4b1f-8b54-3443d55c7852",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e4ccb744-1578-4ce4-9861-ca3d5437a2f5",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "0f92dd5c-ab34-4bc3-84de-fb00f794e5fe",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Squared\nIt?",
      "options": [
        "None of the above.",
        "measured with a value called the r-squared",
        "important to know how well the relationship between the values of the \nx- and y-axis is",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Squared\nIt is 'important to know how well the relationship between the values of the \nx- and y-axis is'."
    },
    {
      "question": "What is The relationship?",
      "options": [
        "None of the above.",
        "important to know how well the relationship between the values of the \nx- and y-axis is",
        "None of the above.",
        "measured with a value called the r-squared"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The relationship is 'measured with a value called the r-squared'."
    }
  ],
  "summary": "This tutorial covers Machine Learning - Polynomial Regression concepts and techniques. You'll learn how to use Machine Learning - Polynomial Regression effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Machine Learning - Polynomial Regression and how to apply it in your projects."
}