{
  "id": "505a3547-0a23-4d5d-ae67-0713d76749cb",
  "title": "PythonNumbers",
  "slug": "pythonnumbers",
  "metadata": {
    "description": "Learn about PythonNumbers with clear explanations and practical examples.",
    "keywords": [
      "type",
      "print",
      "random",
      "float",
      "complex",
      "example",
      "number",
      "python",
      "numbers",
      "convert"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Python Basics"
    ],
    "estimated_time": 5,
    "category": "LearnMachine Learning",
    "subcategory": "Python Numbers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Python\nNumbers",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Python Numbers\nThere are three numeric types in Python:\nint\nfloat\ncomplex\nVariables of numeric types are created when you assign a value to them:\nExample\nx = 1\u00a0\u00a0\u00a0 \n  # int\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex\nTo verify the type of any object in Python, use the\ntype()\nfunction:\nExample\nprint(type(x))\nprint(type(y))\nprint(type(z))\n\nInt\nInt, or integer, is a whole number, \npositive or negative, without decimals, of unlimited length.\nExample\nIntegers:\nx = 1\ny = 35656222554887711\nz = \n  -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))\n\nFloat\nFloat, or \"floating point number\" is a number, positive or negative, containing one or more decimals.\nExample\nFloats:\nx = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n\nFloat can also be scientific numbers with an \"e\" to indicate the power of 10.\nExample\nFloats:\nx = 35e3\ny = 12E4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))\n\nComplex\nComplex numbers are written with a \"j\" as the imaginary part:\nExample\nComplex:\nx = 3+5j\ny = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))\n\nType Conversion\nYou can convert from one type to another with the\nint()\n,\nfloat()\n, and\ncomplex()\nmethods:\nExample\nConvert from one type to another:\nx = 1\u00a0\u00a0\u00a0 # int\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex\n#convert from int to float:\na = float(x)\n#convert from float to int:\nb = int(y)\n#convert from int to complex:\nc = complex(x)\nprint(a)\nprint(b)\nprint(c)\nprint(type(a))\nprint(type(b))\nprint(type(c))\n\nNote:\nYou cannot convert complex numbers into another number type.\nRandom Number\nPython does not have a\nrandom()\nfunction to \nmake a random number, but Python has a built-in module called\nrandom\nthat can be used to make random numbers:\nExample\nImport the random module, and display a random number from 1 to 9:\nimport random\nprint(random.randrange(1, 10))\n\nIn our\nRandom Module Reference\nyou will learn more about the Random module.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "x = 1\u00a0\u00a0\u00a0 \n  # int\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "print(type(x))\nprint(type(y))\nprint(type(z))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "x = 1\ny = 35656222554887711\nz = \n  -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "x = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "x = 35e3\ny = 12E4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "x = 3+5j\ny = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 9,
      "code": "x = 1\u00a0\u00a0\u00a0 # int\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex\n#convert from int to float:\na = float(x)\n#convert from float to int:\nb = int(y)\n#convert from int to complex:\nc = complex(x)\nprint(a)\nprint(b)\nprint(c)\nprint(type(a))\nprint(type(b))\nprint(type(c))",
      "language": "python",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 10,
      "code": "import random\nprint(random.randrange(1, 10))",
      "language": "python",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "x = 1\u00a0\u00a0\u00a0 \n# TODO: Complete this line\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex",
      "solution": "x = 1\u00a0\u00a0\u00a0 \n  # int\ny = 2.8\u00a0 # float\nz = 1j\u00a0\u00a0 # complex"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "print(type(x))\nprint(type(y))\n# TODO: Complete this line",
      "solution": "print(type(x))\nprint(type(y))\nprint(type(z))"
    }
  ],
  "related_topics": [
    {
      "id": "97a33782-7cbe-45b0-b394-7c9f0a514f34",
      "title": "Python Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "4a2dc710-2696-4d31-865d-1d95d4bc7d3b",
      "title": "Python Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "8c4db806-6644-4f1a-9b3e-fd00d71225aa",
      "title": "Python Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Python\nNumbers\n\nPython Numbers\nThere?",
      "options": [
        "three numeric types in Python:\nint\nfloat\ncomplex\nVariables of numeric types are created when you assign a value to them:\nExample\nx = 1\u00a0\u00a0\u00a0 \n  # int\ny = 2",
        "None of the above.",
        "None of the above.",
        "Not a Python\nNumbers\n\nPython Numbers\nThere."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Python\nNumbers\n\nPython Numbers\nThere is 'three numeric types in Python:\nint\nfloat\ncomplex\nVariables of numeric types are created when you assign a value to them:\nExample\nx = 1\u00a0\u00a0\u00a0 \n  # int\ny = 2'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers PythonNumbers concepts and techniques. You'll learn how to use PythonNumbers effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of PythonNumbers and how to apply it in your projects."
}