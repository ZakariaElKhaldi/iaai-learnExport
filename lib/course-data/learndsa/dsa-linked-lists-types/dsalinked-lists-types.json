{
  "id": "31fd9d62-589a-47f9-b452-8f80bcf14126",
  "title": "DSALinked Lists Types",
  "slug": "dsalinked-lists-types",
  "metadata": {
    "description": "Learn about DSALinked Lists Types with clear explanations and practical examples.",
    "keywords": [
      "currentnode",
      "linked",
      "list",
      "node",
      "data",
      "print",
      "circular",
      "singly",
      "doubly",
      "self"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Linked Lists Types"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nLinked Lists Types",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Types of Linked Lists\nThere are three basic forms of linked lists:\nSingly linked lists\nDoubly linked lists\nCircular linked lists\nA\nsingly linked list\nis the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the \nA\ndoubly linked list\nhas nodes with addresses to both the \nA\ncircular linked list\nis like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.\nIn singly or doubly linked lists, we can find the start and end of a list by just checking if the links are\nnull\n. But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.\nCircular linked lists are good for lists you need to cycle through continuously.\nThe image below is an example of a singly circular linked list:\nThe image below is an example of a doubly circular linked list:\nNote:\nWhat kind of linked list you need depends on the problem you are trying to solve.\nLinked List Implementations\nBelow are basic implementations of:\nSingly linked list\nDoubly linked list\nCircular singly linked list\nCircular doubly linked list\nThe \n1. Singly Linked List Implementation\nBelow is an implementation of this singly linked list:\nExample\nA basic singly linked list in Python:\n(This is the same example as on the bottom of the \nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.\nnode2.\nnode3.\n\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.\nprint(\"null\")\nRun Example \u00bb\n2. Doubly Linked List Implementation\nBelow is an implementation of this doubly linked list:\nExample\nA basic doubly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n        self.prev = None\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.\n\nnode2.prev = node1\nnode2.\n\nnode3.prev = node2\nnode3.\n\nnode4.prev = node3\n\nprint(\"\\nTraversing forward:\")\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.\nprint(\"null\")\n\nprint(\"\\nTraversing backward:\")\ncurrentNode = node4\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.prev\nprint(\"null\")\nRun Example \u00bb\n3. Circular Singly Linked List Implementation\nBelow is an implementation of this circular singly linked list:\nExample\nA basic circular singly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.\nnode2.\nnode3.\nnode4.\n\ncurrentNode = node1\nstartNode = node1\nprint(currentNode.data, end=\" -> \") \ncurrentNode = currentNode.\n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.\n\nprint(\"...\")\nRun Example \u00bb\nLine 14:\nThis makes the singly list circular.\nLine 17:\nThis is how the program knows when to stop so that it only goes through the list one time.\n4. Circular Doubly Linked List Implementation\nBelow is an implementation of this circular doubly linked list:\nExample\nA basic circular doubly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n        self.prev = None\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.\nnode1.prev = node4\n\nnode2.prev = node1\nnode2.\n\nnode3.prev = node2\nnode3.\n\nnode4.prev = node3\nnode4.\n\nprint(\"\\nTraversing forward:\")\ncurrentNode = node1\nstartNode = node1\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.\n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.\nprint(\"...\")\n\nprint(\"\\nTraversing backward:\")\ncurrentNode = node4\nstartNode = node4\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.prev\n\nwhile currentNode != startNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.prev\nprint(\"...\")\nRun Example \u00bb\nLines 13 and 22:\nThese links makes the doubly linked list circular.\nLines 26:\nThis is how the program knows when to stop so that it only goes through the list one time.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nTake a look at this singly Linked List:\nHow can we make this Linked List circular?\nThe list can be made circular \nby connecting the \nin the last node, to the\nnode.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "0adfba47-f50a-40d3-b1c6-28992dbe8bed",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ae08fcf0-8120-468b-84dd-a729ae691898",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "42627ce3-69b3-486f-becc-c43bd9a0ed46",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nLinked Lists Types\n\nTypes of Linked Lists\nThere?",
      "options": [
        "three basic forms of linked lists:\nSingly linked lists\nDoubly linked lists\nCircular linked lists\nA\nsingly linked list\nis the simplest kind of linked lists",
        "None of the above.",
        "like a singly or doubly linked list with the first node",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of DSA\nLinked Lists Types\n\nTypes of Linked Lists\nThere is 'three basic forms of linked lists:\nSingly linked lists\nDoubly linked lists\nCircular linked lists\nA\nsingly linked list\nis the simplest kind of linked lists'."
    },
    {
      "question": "What is It takes up less space in memory because each node has only one address to the \nA\ndoubly linked list\nhas nodes with addresses to both the \nA\ncircular linked list?",
      "options": [
        "None of the above.",
        "three basic forms of linked lists:\nSingly linked lists\nDoubly linked lists\nCircular linked lists\nA\nsingly linked list\nis the simplest kind of linked lists",
        "like a singly or doubly linked list with the first node",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of It takes up less space in memory because each node has only one address to the \nA\ndoubly linked list\nhas nodes with addresses to both the \nA\ncircular linked list is 'like a singly or doubly linked list with the first node'."
    }
  ],
  "summary": "This tutorial covers DSALinked Lists Types concepts and techniques. You'll learn how to use DSALinked Lists Types effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSALinked Lists Types and how to apply it in your projects."
}