{
  "id": "8c6e9c5b-a96d-43c7-9e9d-9ecd465b8ec4",
  "title": "DSA Greedy Algorithms",
  "slug": "dsa-greedy-algorithms",
  "metadata": {
    "description": "Learn about DSA Greedy Algorithms with clear explanations and practical examples.",
    "keywords": [
      "greedy",
      "problem",
      "algorithm",
      "optimal",
      "traveling",
      "salesman",
      "choice",
      "algorithms",
      "step",
      "solution"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Greedy Algorithms"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA Greedy Algorithms",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Greedy Algorithms\nA greedy algorithm decides what to do in each step, only based on the current situation, without a thought of how the total problem looks like.\nIn other words, a greedy algorithm makes the locally optimal choice in each step, hoping to find the global optimum solution in the end.\nIn\nDijkstra's algorithm\nfor example, the \n{{ buttonText }}\n{{ msgDone }}\nSo Dijkstra's algorithm is greedy because the choice of which vertex to visit \nChoosing a greedy algorithm is a design choice, just like\nDynamic Programming\nis another algorithm design choice.\nTwo properties must be true for a problem for a greedy algorithm to work:\nGreedy Choice Property:\nMeans that the problem is so that the solution (the global optimum) can be reached by making greedy choices in each step (locally optimal choices).\nOptimal Substructure:\nMeans that the optimal solution to a problem, is a collection of optimal solutions to sub-problems. So solving smaller parts of the problem locally (by making greedy choices) contributes to the overall solution.\nMost of the problems in this tutorial, like sorting an array, or\nfinding the shortest paths\nin a graph, have these properties, and those problems can therefore be solved by greedy algorithms like\nSelection sort\nor\nDijkstra's algorithm\n.\nBut problems like\nThe Traveling Salesman\n, or the\n0/1 Knapsack Problem\n, do not have these properties, and so a greedy algorithm can not be used to solve them. These problems are discussed further down.\nIn addition, even if a problem can be solved by a greedy algorithm, it can also be solved by non-greedy algorithms.\nAlgorithms That Are Not Greedy\nBelow are algorithms that are not greedy, meaning they do not only rely on doing locally optimal choices in each step:\nMerge Sort\n:\nSplits the array in halves over and over again, and then merges the array parts together again in a way that results in a sorted array. These operations are not a series of locally optimal choices like greedy algorithms are.\nQuick Sort\n:\nThe choice of pivot element, the arranging of elements around the pivot element, and the recursive calls to do the same with the left and right side of the pivot element \u2014 those actions do not rely on making greedy choices.\nBFS\nand\nDFS\nTraversal:\nThese algorithms traverse a graph without making a choice locally in each step on how to continue with the traversal, and so they are not greedy algorithms.\nFinding the nth Fibonacci number using memoization\n:\nThis algorithm belongs to a way of solving problems called\nDynamic Programming\n, which solves overlapping sub-problems, and then pieces them back together. Memoization is used in each step to optimize the overall algorithm, which means that at each step, this algorithm does not only consider what is the locally optimal solution, but it also takes into account that a result computed in this step, might be used in later steps.\nThe 0/1 Knapsack Problem\nThe\n0/1 Knapsack Problem\ncannot be solved by a greedy algorithm because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.\nThe 0/1 Knapsack Problem\nRules\n:\nEvery item has a weight and value.\nYour knapsack has a weight limit.\nChoose which items you want to bring with you in the knapsack.\nYou can either take an item or not, you cannot take half of an item for example.\nGoal\n:\nMaximize the total value of the items in the knapsack.\nThis problem cannot be solved by a greedy algorithm, because choosing the item with the highest value, the lowest weight, or the highest value to weight ratio, in each step (local optimal solution, greedy), does not guarantee the optimal solution (global optimum).\nLet's say your backpack's limit is 10 kg, and you have these three treasures in front of you:\nTreasure\nWeight\nValue\nAn old shield\n5 kg\n$300\nA nicely painted clay pot\n4 kg\n$500\nA metal horse figure\n7 kg\n$600\nMaking the greedy choice by taking the most valuable thing first, the horse figure with value $600, means that you can not bring any of the other things without breaking the weight limit.\nSo by trying to solve this problem in a greedy way you end up with a metal horse with value $600.\nBut the best solution in this case is taking the shield and the pot, maximizing the total value in the backpack to be $800, while still being under the weight limit.\nWhat about always taking the treasure with the lowest weight? Or always taking the treasure with the highest value to weight ratio?\nWhile following those principles would actually lead us to the best solution in this specific case, we could not guarantee that those principles would work if the values and weights in this example were changed.\nThis means that The 0/1 Knapsack Problem cannot be solved with a greedy algorithm.\nRead more about The 0/1 Knapsack Problem\nhere\n.\nThe Traveling Salesman\nThe Traveling Salesman Problem\nis a famous problem that also cannot be solved by a greedy algorithm, because it does not fulfill the greedy choice property, and the optimal substructure property, as mentioned earlier.\nThe Traveling Salesman Problem states that you are a salesperson with a number of cities or towns you must visit to sell your things.\nThe Traveling Salesman Problem\nRules\n: Visit every city only once, then return back to the city you started in.\nGoal\n: Find the shortest possible route.\nUsing a greedy algorithm here, you would always go to the \nThe simulation below shows how it looks like when a greedy algorithm tries to solve The Traveling Salesman Problem.\nRunning the simulation, it might not always be obvious that the algorithm is flawed, but you might notice how sometimes the lines are crossing, creating a longer total distance, when that is clearly not necessary.\nA greedy algorithm trying to solve The Traveling Salesman Problem.\n{{ buttonText }}\nWhile running a greedy approach to The Traveling Salesman Problem sometimes gives us a pretty good approximation to the shortest possible route, a greedy algorithm will not be able to solve The Traveling Salesman Problem in general.\nThe Traveling Salesman Problem does not fulfill the properties needed so that it can be solved by a greedy algorithm.\nNote:\nThere is actually no algorithm that finds the shortest route in The Traveling Salesman Problem efficiently. We just have to check all possible routes! This gives us a time complexity of \\(O(n!)\\), which means the number of calculations explodes when the number of cities (\\(n\\)) is increased.\nRead more about the Traveling Salesman Problem\nhere\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "94839a52-2b06-4474-b7b8-56701581b3dc",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d26d9530-4ff2-496c-9c52-e1c1dc2b12d6",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c63e8390-6e00-4aa2-b09a-41e7a7da998b",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is s algorithm is greedy because the choice of which vertex to visit \nChoosing a greedy algorithm?",
      "options": [
        "None of the above.",
        "a design choice",
        "None of the above.",
        "so that the solution (the global optimum) can be reached by making greedy choices in each step (locally optimal choices)"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of s algorithm is greedy because the choice of which vertex to visit \nChoosing a greedy algorithm is 'a design choice'."
    },
    {
      "question": "What is Means that the problem?",
      "options": [
        "so that the solution (the global optimum) can be reached by making greedy choices in each step (locally optimal choices)",
        "None of the above.",
        "None of the above.",
        "a design choice"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Means that the problem is 'so that the solution (the global optimum) can be reached by making greedy choices in each step (locally optimal choices)'."
    }
  ],
  "summary": "This tutorial covers DSA Greedy Algorithms concepts and techniques. You'll learn how to use DSA Greedy Algorithms effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSA Greedy Algorithms and how to apply it in your projects."
}