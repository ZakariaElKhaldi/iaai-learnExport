{
  "id": "0f466d4f-198d-4679-9774-fcde5b44d557",
  "title": "DSARadix Sort",
  "slug": "dsaradix-sort",
  "metadata": {
    "description": "Learn about DSARadix Sort with clear explanations and practical examples.",
    "keywords": [
      "sort",
      "radix",
      "array",
      "values",
      "myarray",
      "sorting",
      "radixarray",
      "digit",
      "digits",
      "time"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 8,
    "category": "LearnDSA",
    "subcategory": "DSA Radix Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nRadix Sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Radix Sort\nThe Radix Sort algorithm sorts an array by individual digits, starting with the least significant digit (the rightmost one).\nClick the button to do Radix Sort, one step (digit) at a time.\n{{ buttonText }}\n{{ msgDone }}\n{{ digit }}\nThe radix (or base) is the number of unique digits in a number system. In the decimal system we normally use, there are 10 different digits from 0 till 9.\nRadix Sort uses the radix so that decimal values are put into 10 different buckets (or containers) corresponding to the digit that is in focus, then put back into the array before moving on to the \nRadix Sort is a non comparative algorithm that only works with non negative integers.\nThe Radix Sort algorithm can be described like this:\nHow it works:\nStart with the least significant digit (rightmost digit).\nSort the values based on the digit in focus by first putting the values in the correct bucket based on the digit in focus, and then put them back into array in the correct order.\nMove to the \nStable Sorting\nRadix Sort must sort the elements in a stable way for the result to be sorted correctly.\nA stable sorting algorithm is an algorithm that keeps the order of elements with the same value before and after the sorting. Let's say we have two elements \"K\" and \"L\", where \"K\" comes before \"L\", and they both have value \"3\". A sorting algorithm is considered stable if element \"K\" still comes before \"L\" after the array is sorted.\nIt makes little sense to talk about stable sorting algorithms for the \nSo after sorting the elements on the least significant digit and moving to the \nIn the simulation below it is revealed how the underlying sorting into buckets is done. And to get a better understanding of how stable sorting works, you can also choose to sort in an unstable way, that will lead to an incorrect result. The sorting is made unstable by simply putting elements into buckets from the end of the array instead of from the start of the array.\nSpeed:\nStable sort?\n{{ isStable }}\n{{ buttonText }}\n{{ msgDone }}\n{{ index }}\n{{ digit }}\n{{ digit }}\nManual Run Through\nLet's try to do the sorting manually, just to get an even better understanding of how Radix Sort works before actually implementing it in a programming language.\nStep 1:\nWe start with an unsorted array, and an empty array to fit values with corresponding radices 0 till 9.\nmyArray = [ 33, 45, 40, 25, 17, 24]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]\nStep 2:\nWe start sorting by focusing on the least significant digit.\nmyArray = [ 3\n3\n, 4\n5\n, 4\n0\n, 2\n5\n, 1\n7\n, 2\n4\n]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]\nStep 3:\nNow we move the elements into the correct positions in the radix array according to the digit in focus. Elements are taken from the start of myArray and pushed into the correct position in the radixArray.\nmyArray = [ ]\nradixArray = [ [4\n0\n], [], [], [3\n3\n], [2\n4\n], [4\n5\n, 2\n5\n], [], [1\n7\n], [], [] ]\nStep 4:\nWe move the elements back into the initial array, and the sorting is now done for the least significant digit. Elements are taken from the end radixArray, and put into the start of myArray.\nmyArray = [ 4\n0\n, 3\n3\n, 2\n4\n, 4\n5\n, 2\n5\n, 1\n7\n]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]\nStep 5:\nWe move focus to the \nmyArray = [\n4\n0,\n3\n3,\n2\n4,\n4\n5,\n2\n5,\n1\n7 ]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]\nStep 6:\nWe move elements into the radix array according to the focused digit.\nmyArray = [ ]\nradixArray = [ [], [\n1\n7], [\n2\n4,\n2\n5], [\n3\n3], [\n4\n0,\n4\n5], [], [], [], [], [] ]\nStep 7:\nWe move elements back into the start of myArray, from the back of radixArray.\nmyArray = [\n1\n7,\n2\n4,\n2\n5,\n3\n3,\n4\n0,\n4\n5 ]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]\nThe sorting is finished!\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\nmyArray = \n    [\n{{ digit }}\n]\nradixArray = \n    [\n[ ]\n]\nManual Run Through: What Happened?\nWe see that values are moved from the array and placed in the radix array according to the current radix in focus. And then the values are moved back into the array we want to sort.\nThis moving of values from the array we want to sort and back again must be done as many times as the maximum number of digits in a value. So for example if 437 is the highest number in the array that needs to be sorted, we know we must sort three times, once for each digit.\nWe also see that the radix array needs to be two-dimensional so that more than one value on a specific radix, or index.\nAnd, as mentioned earlier, we must move values between the two arrays in a way that keeps the order of values with the same radix in focus, so the the sorting is stable.\nRadix Sort Implementation\nTo implement the Radix Sort algorithm we need:\nAn array with non negative integers that needs to be sorted.\nA two dimensional array with index 0 to 9 to hold values with the current radix in focus.\nA loop that takes values from the unsorted array and places them in the correct position in the two dimensional radix array.\nA loop that puts values back into the initial array from the radix array.\nAn outer loop that runs as many times as there are digits in the highest value.\nThe resulting code looks like this:\nExample\nmyArray = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(\"Original array:\", myArray)\nradixArray = [[], [], [], [], [], [], [], [], [], []]\nmaxVal = max(myArray)\nexp = 1\n\nwhile maxVal // exp > 0:\n\nwhile len(myArray) > 0:\n        val = myArray.pop()\n        radixIndex = (val // exp) % 10\n        radixArray[radixIndex].append(val)\n\nfor bucket in radixArray:\n        while len(bucket) > 0:\n            val = bucket.pop()\n            myArray.append(val)\n\nexp *= 10\n\nprint(\"Sorted array:\", myArray)\nRun Example \u00bb\nOn line 7\n, we use floor division (\"//\") to divide the maximum value 802 by 1 the first time the while loop runs, the \nOn line 11\n, it is decided where to put a value in the radixArray based on its radix, or digit in focus. For example, the second time the outer while loop runs exp will be 10. Value 170 divided by 10 will be 17. The \"%10\" operation divides by 10 and returns what is left. In this case 17 is divided by 10 one time, and 7 is left. So value 170 is placed in index 7 in the radixArray.\nRadix Sort Using Other Sorting Algorithms\nRadix Sort can actually be implemented together with any other sorting algorithm as long as it is stable. This means that when it comes down to sorting on a specific digit, any stable sorting algorithm will work, such as counting sort or bubble sort.\nThis is an implementation of Radix Sort that uses Bubble Sort to sort on the individual digits:\nExample\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\ndef radixSortWithBubbleSort(arr):\n    max_val = max(arr)\n    exp = 1\n\nwhile max_val // exp > 0:\n        radixArray = [[],[],[],[],[],[],[],[],[],[]]\n\nfor num in arr:\n            radixIndex = (num // exp) % 10\n            radixArray[radixIndex].append(num)\n\nfor bucket in radixArray:\n            bubbleSort(bucket)\n\ni = 0\n        for bucket in radixArray:\n            for num in bucket:\n                arr[i] = num\n                i += 1\n\nexp *= 10\n\nmyArray = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(\"Original array:\", myArray)\nradixSortWithBubbleSort(myArray)\nprint(\"Sorted array:\", myArray)\nRun Example \u00bb\nRadix Sort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Radix Sort time complexity, visit\nthis page\n.\nThe time complexity for Radix Sort is:\n\\[ \\underline{\\underline{O(n \\cdot k)}} \\]\nThis means that Radix Sort depends both on the values that need to be sorted \\(n\\), and the number of digits in the highest value \\(k\\).\nA best case scenario for Radix Sort is if there are lots of values to sort, but the values have few digits. For example if there are more than a million values to sort, and the highest value is 999, with just three digits. In such a case the time complexity \\(O(n \\cdot k)\\) can be simplified to just \\(O(n)\\).\nA worst case scenario for Radix Sort would be if there are as many digits in the highest value as there are values to sort. This is perhaps not a common scenario, but the time complexity would be \\(O(n^2)\\)in this case.\nThe most average or common case is perhaps if the number of digits \\(k\\) is something like \\(k(n)= \\log n\\). If so, Radix Sort gets time complexity \\(O(n \\cdot \\log n )\\). An example of such a case would be if there are 1000000 values to sort, and the values have 6 digits.\nSee different possible time complexities for Radix Sort in the image below.\nRun different simulations of Radix Sort to see how the number of operations falls between the worst case scenario \\(O(n^2)\\) (red line) and best case scenario \\(O(n)\\) (green line).\nSet values (n):\n{{ this.userX }}\nDigits (k):\n{{ this.userK }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nThe bars representing the different values are scaled to fit the window, so that it looks ok. This means that values with 7 digits look like they are just 5 times bigger than values with 2 digits, but in reality, values with 7 digits are actually 5000 times bigger than values with 2 digits!\nIf we hold \\(n\\) and \\(k\\) fixed, the \"Random\", \"Descending\" and \"Ascending\" alternatives in the simulation above results in the same number of operations. This is because the same thing happens in all three cases.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nTo sort an array with Radix Sort, what property must the sorting have for the sorting to be done properly?\nRadix Sort must use a\nsorting algorithm.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b28e0947-e8bc-45b9-afd8-57d4e4fa1d4d",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e3f22521-345a-4327-84fa-3f5217247bda",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "3f100f17-5d1e-408e-8616-655cda4a62a7",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is there?",
      "options": [
        "10 different digits from 0 till 9",
        "None of the above.",
        "None of the above.",
        "Not a there."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of there is '10 different digits from 0 till 9'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSARadix Sort concepts and techniques. You'll learn how to use DSARadix Sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSARadix Sort and how to apply it in your projects."
}