{
  "id": "aaeb8cc2-e200-4750-99b3-b719e57987ea",
  "title": "DSAMerge Sort",
  "slug": "dsamerge-sort",
  "metadata": {
    "description": "Learn about DSAMerge Sort with clear explanations and practical examples.",
    "keywords": [
      "array",
      "merge",
      "sort",
      "step",
      "arrays",
      "merged",
      "right",
      "left",
      "result",
      "sorted"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 8,
    "category": "LearnDSA",
    "subcategory": "DSA Merge Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nMerge Sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Merge Sort\nThe Merge Sort algorithm is a divide-and-conquer algorithm that sorts an array by first breaking it down into smaller arrays, and then building the array back together the correct way so that it is sorted.\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\nDivide:\nThe algorithm starts with breaking up the array into smaller and smaller pieces until one such sub-array only consists of one element.\nConquer:\nThe algorithm merges the small pieces of the array back together by putting the lowest values first, resulting in a sorted array.\nThe breaking down and building up of the array to sort the array is done recursively.\nIn the animation above, each time the bars are pushed down represents a recursive call, splitting the array into smaller pieces. When the bars are lifted up, it means that two sub-arrays have been merged together.\nThe Merge Sort algorithm can be described like this:\nHow it works:\nDivide the unsorted array into two sub-arrays, half the size of the original.\nContinue to divide the sub-arrays as long as the current piece of the array has more than one element.\nMerge two sub-arrays together by always putting the lowest value first.\nKeep merging until there are no sub-arrays left.\nTake a look at the drawing below to see how Merge Sort works from a different perspective. As you can see, the array is split into smaller and smaller pieces until it is merged back together. And as the merging happens, values from each sub-array are compared so that the lowest value comes first.\nManual Run Through\nLet's try to do the sorting manually, just to get an even better understanding of how Merge Sort works before actually implementing it in a programming language.\nStep 1:\nWe start with an unsorted array, and we know that it splits in half until the sub-arrays only consist of one element. The Merge Sort function calls itself two times, once for each half of the array. That means that the first sub-array will split into the smallest pieces first.\n[ 12, 8, 9, 3, 11, 5, 4]\n[ 12, 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8] [ 9] [ 3, 11, 5, 4]\nStep 2:\nThe splitting of the first sub-array is finished, and now it is time to merge. 8 and 9 are the first two elements to be merged. 8 is the lowest value, so that comes before 9 in the first merged sub-array.\n[ 12] [\n8\n,\n9\n] [ 3, 11, 5, 4]\nStep 3:\nThe \n[\n8\n,\n9\n,\n12\n] [ 3, 11, 5, 4]\nStep 4:\nNow the second big sub-array is split recursively.\n[ 8, 9, 12] [ 3, 11, 5, 4]\n[ 8, 9, 12] [ 3, 11] [ 5, 4]\n[ 8, 9, 12] [ 3] [ 11] [ 5, 4]\nStep 5:\n3 and 11 are merged back together in the same order as they are shown because 3 is lower than 11.\n[ 8, 9, 12] [\n3\n,\n11\n] [ 5, 4]\nStep 6:\nSub-array with values 5 and 4 is split, then merged so that 4 comes before 5.\n[ 8, 9, 12] [ 3, 11] [\n5\n] [\n4\n]\n[ 8, 9, 12] [ 3, 11] [\n4\n,\n5\n]\nStep 7:\nThe two sub-arrays on the right are merged. Comparisons are done to create elements in the new merged array:\n3 is lower than 4\n4 is lower than 11\n5 is lower than 11\n11 is the last remaining value\n[ 8, 9, 12] [\n3\n,\n4\n,\n5\n,\n11\n]\nStep 8:\nThe two last remaining sub-arrays are merged. Let's look at how the comparisons are done in more detail to create the new merged and finished sorted array:\n3 is lower than 8:\nBefore [\n8\n, 9, 12] [\n3\n, 4, 5, 11]\nAfter: [\n3\n,\n8\n, 9, 12] [ 4, 5, 11]\nStep 9:\n4 is lower than 8:\nBefore [ 3,\n8\n, 9, 12] [\n4\n, 5, 11]\nAfter: [ 3,\n4\n,\n8\n, 9, 12] [ 5, 11]\nStep 10:\n5 is lower than 8:\nBefore [ 3, 4,\n8\n, 9, 12] [\n5\n, 11]\nAfter: [ 3, 4,\n5\n,\n8\n, 9, 12] [ 11]\nStep 11:\n8 and 9 are lower than 11:\nBefore [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]\nAfter: [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]\nStep 12:\n11 is lower than 12:\nBefore [ 3, 4, 5, 8, 9,\n12\n] [\n11\n]\nAfter: [ 3, 4, 5, 8, 9,\n11\n,\n12\n]\nThe sorting is finished!\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\n{{ x.dieNmbr }}\nManual Run Through: What Happened?\nWe see that the algorithm has two stages: first splitting, then merging.\nAlthough it is possible to implement the Merge Sort algorithm without recursion, we will use recursion because that is the most common approach.\nWe cannot see it in the steps above, but to split an array in two, the length of the array is divided by two, and then rounded down to get a value we call \"mid\". This \"mid\" value is used as an index for where to split the array.\nAfter the array is split, the sorting function calls itself with each half, so that the array can be split again recursively. The splitting stops when a sub-array only consists of one element.\nAt the end of the Merge Sort function the sub-arrays are merged so that the sub-arrays are always sorted as the array is built back up. To merge two sub-arrays so that the result is sorted, the values of each sub-array are compared, and the lowest value is put into the merged array. After that the \nMerge Sort Implementation\nTo implement the Merge Sort algorithm we need:\nAn array with values that needs to be sorted.\nA function that takes an array, splits it in two, and calls itself with each half of that array so that the arrays are split again and again recursively, until a sub-array only consist of one value.\nAnother function that merges the sub-arrays back together in a sorted way.\nThe resulting code looks like this:\nExample\ndef mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n\nmid = len(arr) // 2\n    leftHalf = arr[:mid]\n    rightHalf = arr[mid:]\n\nsortedLeft = mergeSort(leftHalf)\n    sortedRight = mergeSort(rightHalf)\n\nreturn merge(sortedLeft, sortedRight)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\nwhile i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\nresult.extend(left[i:])\n    result.extend(right[j:])\n\nreturn result\n\nunsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13]\nsortedArr = mergeSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr)\nRun Example \u00bb\nOn line 6\n, arr[:mid] takes all values from the array up until, but not including, the value on index \"mid\".\nOn line 7\n, arr[mid:] takes all values from the array, starting at the value on index \"mid\" and all the \nOn lines 26-27\n, the first part of the merging is done. At this this point the values of the two sub-arrays are compared, and either the left sub-array or the right sub-array is empty, so the result array can just be filled with the remaining values from either the left or the right sub-array. These lines can be swapped, and the result will be the same.\nMerge Sort without Recursion\nSince Merge Sort is a divide and conquer algorithm, recursion is the most intuitive code to use for implementation. The recursive implementation of Merge Sort is also perhaps easier to understand, and uses less code lines in general.\nBut Merge Sort can also be implemented without the use of recursion, so that there is no function calling itself.\nTake a look at the Merge Sort implementation below, that does not use recursion:\nExample\ndef merge(left, right):\n    result = []\n    i = j = 0\n\nwhile i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\nresult.extend(left[i:])\n    result.extend(right[j:])\n\nreturn result\n\ndef mergeSort(arr):\n    step = 1  # Starting with sub-arrays of length 1\n    length = len(arr)\n\nwhile step < length:\n        for i in range(0, length, 2 * step):\n            left = arr[i:i + step]\n            right = arr[i + step:i + 2 * step]\n\nmerged = merge(left, right)\n\n# Place the merged array back into the original array\n            for j, val in enumerate(merged):\n                arr[i + j] = val\n\nstep *= 2  # Double the sub-array length for the\n\nreturn arr\n\nunsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13]\nsortedArr = mergeSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr)\nRun Example \u00bb\nYou might notice that the merge functions are exactly the same in the two Merge Sort implementations above, but in the implementation right above here the while loop inside the mergeSort function is used to replace the recursion. The while loop does the splitting and merging of the array in place, and that makes the code a bit harder to understand.\nTo put it simply, the while loop inside the mergeSort function uses short step lengths to sort tiny pieces (sub-arrays) of the initial array using the merge function. Then the step length is increased to merge and sort larger pieces of the array until the whole array is sorted.\nMerge Sort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Merge Sort time complexity, visit\nthis page\n.\nThe time complexity for Merge Sort is\n\\[ O( n \\cdot \\log n ) \\]\nAnd the time complexity is pretty much the same for different kinds of arrays. The algorithm needs to split the array and merge it back together whether it is already sorted or completely shuffled.\nThe image below shows the time complexity for Merge Sort.\nRun the simulation below for different number of values in an array, and see how the number of operations Merge Sort needs on an array of \\(n\\) elements is \\(O(n \\log n)\\):\nSet values:\n{{ this.userX }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nIf we hold the number of values \\(n\\) fixed, the number of operations needed for the \"Random\", \"Descending\" and \"Ascending\" is almost the same.\nMerge Sort performs almost the same every time because the array is split, and merged using comparison, both if the array is already sorted or not.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6079bf26-1e78-42d5-9b6b-d8f248030f5b",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9eefe680-b36c-4c80-a426-26edced5c2c5",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "384639d5-1124-4afe-b569-6ea59504799f",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nMerge Sort\n\nMerge Sort\nThe Merge Sort algorithm?",
      "options": [
        "done recursively",
        "None of the above.",
        "a divide-and-conquer algorithm that sorts an array by first breaking it down into smaller arrays",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of DSA\nMerge Sort\n\nMerge Sort\nThe Merge Sort algorithm is 'a divide-and-conquer algorithm that sorts an array by first breaking it down into smaller arrays'."
    },
    {
      "question": "What is The breaking down and building up of the array to sort the array?",
      "options": [
        "None of the above.",
        "None of the above.",
        "done recursively",
        "a divide-and-conquer algorithm that sorts an array by first breaking it down into smaller arrays"
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of The breaking down and building up of the array to sort the array is 'done recursively'."
    }
  ],
  "summary": "This tutorial covers DSAMerge Sort concepts and techniques. You'll learn how to use DSAMerge Sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAMerge Sort and how to apply it in your projects."
}