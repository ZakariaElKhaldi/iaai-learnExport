{
  "id": "b5c9a9c2-3fcb-49a8-8386-3c693672293a",
  "title": "DSABinary Search Trees",
  "slug": "dsabinary-search-trees",
  "metadata": {
    "description": "Learn about DSABinary Search Trees with clear explanations and practical examples.",
    "keywords": [
      "node",
      "right",
      "search",
      "left",
      "tree",
      "value",
      "data",
      "binary",
      "nodes",
      "child"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 11,
    "category": "LearnDSA",
    "subcategory": "DSA Binary Search Trees"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nBinary Search Trees\n\nA\nBinary Search Tree\nis a Binary Tree where every node",
      "content": "'s left child has a lower value, and every node's right child has a higher value.\nA clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.\nBinary Search Trees\nA Binary Search Tree (BST) is a type of\nBinary Tree data structure\n, where the following properties must be true for any node \"X\" in the tree:\nThe X node's left child and all of its descendants (children, children's children, and so on) have lower values than X's value.\nThe right child, and all its descendants have higher values than X's value.\nLeft and right subtrees must also be Binary Search Trees.\nThese properties makes it faster to search, add and delete values than a regular binary tree.\nTo make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.\nUse the Binary Search Tree below to better understand these concepts and relevant terminology.\nBinary Search Tree (BST)\nTree size (n=8)\nRoot node\n7's left child\n7's right child\nTree height (h=3)\n15's height (h=2)\n13's right subtree\n13's in-order successor\nChild nodes\nParent/Internal nodes\nLeaf nodes\n13\n7\n15\n3\n8\n14\n19\n18\nThe\nsize\nof a tree is the number of nodes in it (\\(n\\)).\nA\nsubtree\nstarts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.\nThe\ndescendants\nof a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.\nThe\nnode's height\nis the maximum number of edges between that node and a leaf node.\nA\nnode's in-order successor\nis the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.\nTraversal of a Binary Search Tree\nJust to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.\nAnother way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the \nThe code below is an implementation of the Binary Search Tree in the figure above, with traversal.\nExample\nPython:\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(node):\n    if node is None:\n        return\n    inOrderTraversal(node.left)\n    print(node.data, end=\", \")\n    inOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Traverse\ninOrderTraversal(root)\nRun Example \u00bb\nAs we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.\nSearch for a Value in a BST\nSearching for a value in a BST is very similar to how we found a value using\nBinary Search\non an array.\nFor Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.\nSimilarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.\nHow it works:\nStart at the root node.\nIf this is the value we are looking for, return.\nIf the value we are looking for is higher, continue searching in the right subtree.\nIf the value we are looking for is lower, continue searching in the left subtree.\nIf the subtree we want to search does not exist, depending on the programming language, return\nNone\n, or\nNULL\n, or something similar, to indicate that the value is not inside the BST.\nUse the animation below to see how we search for a value in a Binary Search Tree.\nClick Search.\n13\n7\n15\n3\n8\n14\n19\n18\n8\n18\n51\nSearch\nThe algorithm above can be implemented like this:\nExample\nPython:\ndef search(node, target):\n    if node is None:\n        return None \n    elif node.data == target:\n        return node\n    elif target < node.data:\n        return search(node.left, target)\n    else:\n        return search(node.right, target)\nRun Example \u00bb\nThe time complexity for searching a BST for a value is \\(O(h)\\), where \\(h\\) is the height of the tree.\nFor a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.\n13\n7\n15\n3\n8\n14\n19\n18\nBalanced BST\n7\n13\n3\n15\n8\n19\n14\n18\nUnbalanced BST\nBoth Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.\nWe will use the \nInsert a Node in a BST\nInserting a node in a BST is similar to searching for a value.\nHow it works:\nStart at the root node.\nCompare each node:\nIs the value lower? Go left.\nIs the value higher? Go right.\nContinue to compare nodes with the new value until there is no right or left to compare with. That is where the new node is inserted.\nInserting nodes as described above means that an inserted node will always become a new leaf node.\nUse the simulation below to see how new nodes are inserted.\nClick Insert.\n13\n7\n15\n3\n8\n14\n19\n18\n10\n10\n17\n51\nInsert\nAll nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.\nThis is how node insertion in BST can be implemented:\nExample\nPython:\ndef insert(node, data):\n    if node is None:\n        return TreeNode(data)\n    else:\n        if data < node.data:\n            node.left = insert(node.left, data)\n        elif data > node.data:\n            node.right = insert(node.right, data)\n    return node\nRun Example \u00bb\nFind The Lowest Value in a BST Subtree\nThe \nHow it works:\nStart at the root node of the subtree.\nGo left as far as possible.\nThe node you end up in is the node with the lowest value in that BST subtree.\nIn the figure below, if we start at node 13 and keep going left, we end up in node 3, which is the lowest value, right?\nAnd if we start at node 15 and keep going left, we end up in node 14, which is the lowest value in node 15's subtree.\n13\n7\n15\n3\n8\n14\n19\n18\n13\n15\nFind lowest\nThis is how the function for finding the lowest value in the subtree of a BST node looks like:\nExample\nPython:\ndef minValueNode(node):\n    current = node\n    while current.left is not None:\n        current = current.left\n    return current\nRun Example \u00bb\nWe will use this\nminValueNode()\nfunction in the section below, to find a node's in-order successor, and use that to delete a node.\nDelete a Node in a BST\nTo delete a node, our function must first search the BST to find it.\nAfter the node is found there are three different cases where deleting a node must be done differently.\nHow it works:\nIf the node is a leaf node, remove it by removing the link to it.\nIf the node only has one child node, connect the parent node of the node you want to remove to that child node.\nIf the node has both right and left child nodes: Find the node's in-order successor, change values with that node, then delete it.\nIn step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.\nUse the animation below to see how different nodes are deleted.\n13\n7\n15\n3\n8\n14\n14\n19\n18\n8\n19\n13\nDelete\nNode 8\nis a leaf node (case 1), so after we find it, we can just delete it.\nNode 19\nhas only one child node (case 2). To delete node 19, the parent node 15 is connected directly to node 18, and then node 19 can be removed.\nNode 13\nhas two child nodes (case 3). We find the successor, the node that comes right after during in-order traversal, by finding the lowest node in node 13's right subtree, which is node 14. Value 14 is put into node 13, and then we can delete node 14.\nThis is how a BST can be implemented with functionality for deleting a node:\nExample\nPython:\ndef delete(node, data):\n    if not node:\n        return None\n\n    if data < node.data:\n        node.left = delete(node.left, data)\n    elif data > node.data:\n        node.right = delete(node.right, data)\n    else:\n        # Node with only one child or no child\n        if not node.left:\n            temp = node.right\n            node = None\n            return temp\n        elif not node.right:\n            temp = node.left\n            node = None\n            return temp\n\n        # Node with two children, get the in-order successor\n        node.data = minValueNode(node.right).data\n        node.right = delete(node.right, node.data)\n\n    return node\nRun Example \u00bb\nLine 1\n: The\nnode\nargument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the\ndata\nwe want to delete.\nLine 2-8\n: This is searching for the node with correct\ndata\nthat we want to delete.\nLine 9-22\n: The node we want to delete has been found. There are three such cases:\nCase 1\n: Node with no child nodes (leaf node).\nNone\nis returned, and that becomes the parent node's new left or right value by recursion (line 6 or 8).\nCase 2\n: Node with either left or right child node. That left or right child node becomes the parent's new left or right child through recursion (line 7 or 9).\nCase 3\n: Node has both left and right child nodes. The in-order successor is found using the\nminValueNode()\nfunction. We keep the successor's value by setting it as the value of the node we want to delete, and then we can delete the successor node.\nLine 24\n:\nnode\nis returned to maintain the recursive functionality.\nBST Compared to Other Data Structures\nBinary Search Trees take the best from two other data structures: Arrays and Linked Lists.\nData Structure\nSearching for a value\nDelete / Insert leads to shifting in memory\nSorted Array\n\\(\\boldsymbol{O(\\log n)}\\)\nYes\nLinked List\n\\(O(n)\\)\nNo\nBinary Search Tree\n\\(\\boldsymbol{O(\\log n)}\\)\nNo\nSearching a BST is just as fast as\nBinary Search\non an array, with the same time complexity \\(O(\\log n)\\).\nAnd deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.\nBST Balance and Time Complexity\nOn a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually \\(O(h)\\). That means that the higher the tree is (\\(h\\)), the longer the operation will take.\nThe reason why we wrote that searching for a value is \\(O(\\log n)\\) in the table above is because that is true if the tree is \"balanced\", like in the image below.\n13\n7\n15\n3\n8\n14\n19\n18\nBalanced BST\nWe call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.\nThe exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one. In the image above, the left subtree of the root node has height \\(h=2\\), and the right subtree has height \\(h=3\\).\nFor a balanced BST, with a large number of nodes (big \\(n\\)), we get height \\(h \\approx \\log_2 n\\), and therefore the time complexity for searching, deleting, or inserting a node can be written as \\(O(h) = O(\\log n)\\).\nBut, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes, \\(h \\approx n\\), and we get time complexity \\(O(h) = O(n)\\) for searching, deleting, or inserting a node.\n7\n13\n3\n15\n8\n19\n14\n18\nUnbalanced BST\nSo, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.\nAnd keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the \nDSA Exercises\nTest Yourself With Exercises\nExercise:\nInserting a node with value 6 in this Binary Search Tree:\nWhere is the new node inserted?\nThe node with value 6 \nbecomes the right child node\nof the node with value\n.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "a7542986-5797-4154-8b8f-50d91157f446",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b5573ad6-8b5c-4096-bb5f-fd546c0da29c",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d988a317-9e45-42c9-a2b4-ab0f51f36826",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nBinary Search Trees\n\nA\nBinary Search Tree?",
      "options": [
        "None of the above.",
        "that operations like search",
        "a Binary Tree where every node's left child has a lower value",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of DSA\nBinary Search Trees\n\nA\nBinary Search Tree is 'a Binary Tree where every node's left child has a lower value'."
    },
    {
      "question": "What is A clear advantage with Binary Search Trees?",
      "options": [
        "None of the above.",
        "that operations like search",
        "None of the above.",
        "a Binary Tree where every node's left child has a lower value"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of A clear advantage with Binary Search Trees is 'that operations like search'."
    }
  ],
  "summary": "This tutorial covers DSABinary Search Trees concepts and techniques. You'll learn how to use DSABinary Search Trees effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSABinary Search Trees and how to apply it in your projects."
}