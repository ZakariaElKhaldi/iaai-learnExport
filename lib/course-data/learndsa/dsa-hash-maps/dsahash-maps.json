{
  "id": "87ce4bff-9d2c-47e2-ab4e-391c9787be52",
  "title": "DSAHash Maps",
  "slug": "dsahash-maps",
  "metadata": {
    "description": "Learn about DSAHash Maps with clear explanations and practical examples.",
    "keywords": [
      "hash",
      "bucket",
      "self",
      "value",
      "buckets",
      "index",
      "name",
      "number",
      "person",
      "entries"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 7,
    "category": "LearnDSA",
    "subcategory": "DSA Hash Maps"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nHash Maps\n\nHash Maps\nA Hash Map is a form of\nHash Table\ndata structure that usually holds a large number of entries",
      "content": ".\nUsing a Hash Map we can search, add, modify, and remove entries really fast.\nHash Maps are used to find detailed information about something.\nIn the simulation below, people are stored in a Hash Map. A person can be looked up using a person's unique social security number (the Hash Map key), and then we can see that person's name (the Hash Map value).\nHash Map\n0\n:\n{{ el.ssn }}\n{{ el.name }}\n1\n:\n{{ el.ssn }}\n{{ el.name }}\n2\n:\n{{ el.ssn }}\n{{ el.name }}\n3\n:\n{{ el.ssn }}\n{{ el.name }}\n4\n:\n{{ el.ssn }}\n{{ el.name }}\n5\n:\n{{ el.ssn }}\n{{ el.name }}\n6\n:\n{{ el.ssn }}\n{{ el.name }}\n7\n:\n{{ el.ssn }}\n{{ el.name }}\n8\n:\n{{ el.ssn }}\n{{ el.name }}\n9\n:\n{{ el.ssn }}\n{{ el.name }}\nHash Code\n{{ sumOfAscii }} % 10 =\n{{ currHashCode }}\n{{ resultText }}\n0\n-\nput()\nremove()\nget()\nsize()\nNote:\nThe Hash Map would be more useful if more information about each person was attached to the corresponding social security number, like last name, birth date, and address, and maybe other things as well. But the Hash Map simulation above is made to be as simple as possible.\nIt is easier to understand how Hash Maps work if you first have a look at the two \nHash Tables\nand\nHash Sets\n. It is also important to understand the meaning of the words below.\nEntry:\nConsists of a key and a value, forming a key-value pair.\nKey:\nUnique for each entry in the Hash Map. Used to generate a hash code determining the entry's bucket in the Hash Map. This ensures that every entry can be efficiently located.\nHash Code:\nA number generated from an entry's key, to determine what bucket that Hash Map entry belongs to.\nBucket:\nA Hash Map consists of many such buckets, or containers, to store entries.\nValue:\nCan be nearly any kind of information, like name, birth date, and address of a person. The value can be many different kinds of information combined.\nFinding The Hash Code\nA hash code is generated by a\nhash function\n.\nThe hash function in the simulation above takes the numbers in the social security number (not the dash), add them together, and does a modulo 10 operation (\n% 10\n) on the sum of characters to get the hash code as a number from 0 to 9.\nThis means that a person is stored in one of ten possible buckets in the Hash Map, according to the hash code of that person's social security number. The same hash code is generated and used when we want to search for or remove a person from the Hash Map.\nThe Hash Code gives us instant access as long as there is just one person in the corresponding bucket.\nIn the simulation above,\nCharlotte\nhas social security number\n123-4567\n. Adding the numbers together gives us a sum\n28\n, and modulo 10 of that is\n8\n. That is why she belongs to bucket\n8\n.\nModulo:\nA mathematical operation, written as\n%\nin most programming languages (or \\(mod\\) in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example,\n7 % 3\nwill give us the remainder\n1\n. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)\nDirect Access in Hash Maps\nSearching for\nCharlotte\nin the Hash Map, we must use the social security number\n123-4567\n(the Hash Map key), which generates the hash code\n8\n, as explained above.\nThis means we can go straight to bucket\n8\nto get her name (the Hash Map value), without searching through other entries in the Hash Map.\nIn cases like this we say that the Hash Map has constant time \\(O(1)\\) for searching, adding, and removing entries, which is really fast compared to using an array or a linked list.\nBut, in a worst case scenario, all the people are stored in the same bucket, and if the person we are trying to find is last person in this bucket, we need to compare with all the other social security numbers in that bucket before we find the person we are looking for.\nIn such a worst case scenario the Hash Map has time complexity \\(O(n)\\), which is the same time complexity as arrays and linked lists.\nTo keep Hash Maps fast, it is therefore important to have a hash function that will distribute the entries evenly between the buckets, and to have around as many buckets as Hash Map entries.\nHaving a lot more buckets than Hash Map entries is a waste of memory, and having a lot less buckets than Hash Map entries is a waste of time.\nNote:\nA social security number can be really long, like 11 digits, which means it is possible to store 100 billion people with unique social security numbers. This is a lot more than in any country's population, and even a lot more than there are people on Earth.\nUsing an array where each person's social security number is the index in the array where this person is stored is therefore a huge waste of space (mostly empty buckets).\nUsing a Hash Map (or a database with similar properties) makes more sense as the number of buckets can be adjusted to the number of people.\nHash Map Implementation\nHash Maps in Python are typically done by using Python's own\ndictionary\ndata type\n, but to get a better understanding of how Hash Maps work we will not use that here.\nTo implement a Hash Map in Python we create a class\nSimpleHashMap\n.\nInside the\nSimpleHashMap\nclass we have a method\n__init__\nto initialize the Hash Map, a method\nhash_function\nfor the hash function, and methods for the basic Hash Map operations:\nput\n,\nget\n, and\nremove\n.\nWe also create a method\nprint_map\nto better see how the Hash Map looks like.\nExample\nclass SimpleHashMap:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, key):\n        # Sum only the numerical values of the key, ignoring non-numeric characters\n        numeric_sum = sum(int(char) for char in key if char.isdigit())\n        return numeric_sum % 10  # Perform modulo 10 on the sum\n\n    def put(self, key, value):\n        # Add or update a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                bucket[i] = (key, value)  # Update existing key\n                return\n        bucket.append((key, value))  # Add new key-value pair if not found\n\n    def get(self, key):\n        # Retrieve a value by key\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for k, v in bucket:\n            if k == key:\n                return v\n        return None  # Key not found\n\n    def remove(self, key):\n        # Remove a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                del bucket[i]  # Remove the key-value pair\n                return\n\n    def print_map(self):\n        # Print all key-value pairs in the hash map\n        print(\"Hash Map Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")\nUsing the\nSimpleHashMap\nclass we can create the same Hash Map as in the top of this page:\nExample\nclass SimpleHashMap:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, key):\n        # Sum only the numerical values of the key, ignoring non-numeric characters\n        numeric_sum = sum(int(char) for char in key if char.isdigit())\n        return numeric_sum % 10  # Perform modulo 10 on the sum\n\n    def put(self, key, value):\n        # Add or update a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                bucket[i] = (key, value)  # Update existing key\n                return\n        bucket.append((key, value))  # Add new key-value pair if not found\n\n    def get(self, key):\n        # Retrieve a value by key\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for k, v in bucket:\n            if k == key:\n                return v\n        return None  # Key not found\n\n    def remove(self, key):\n        # Remove a key-value pair\n        index = self.hash_function(key)\n        bucket = self.buckets[index]\n        for i, (k, v) in enumerate(bucket):\n            if k == key:\n                del bucket[i]  # Remove the key-value pair\n                return\n\n    def print_map(self):\n        # Print all key-value pairs in the hash map\n        print(\"Hash Map Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Creating the Hash Map from the simulation\nhash_map = SimpleHashMap(size=10)",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 3",
      "content": "# Adding some entries\nhash_map.put(\"123-4567\", \"Charlotte\")\nhash_map.put(\"123-4568\", \"Thomas\")\nhash_map.put(\"123-4569\", \"Jens\")\nhash_map.put(\"123-4570\", \"Peter\")\nhash_map.put(\"123-4571\", \"Lisa\")\nhash_map.put(\"123-4672\", \"Adele\")\nhash_map.put(\"123-4573\", \"Michaela\")\nhash_map.put(\"123-6574\", \"Bob\")\n\nhash_map.print_map()",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 4",
      "content": "# Demonstrating retrieval\nprint(\"\\nName associated with '123-4570':\", hash_map.get(\"123-4570\"))\n\nprint(\"Updating the name for '123-4570' to 'James'\")\nhash_map.put(\"123-4570\",\"James\")",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 5",
      "content": "# Checking if Peter is still there\nprint(\"Name associated with '123-4570':\", hash_map.get(\"123-4570\"))\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "31cde47f-9866-4de6-ab89-9fd5055dd95a",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "565629c6-752c-4934-8abd-6a0474975633",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "32faff3f-59b8-4d14-b843-cd08d1cdbe50",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nHash Maps\n\nHash Maps\nA Hash Map?",
      "options": [
        "None of the above.",
        "used to find detailed information about something",
        "None of the above.",
        "a form of\nHash Table\ndata structure that usually holds a large number of entries"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of DSA\nHash Maps\n\nHash Maps\nA Hash Map is 'a form of\nHash Table\ndata structure that usually holds a large number of entries'."
    },
    {
      "question": "What is Hash Maps?",
      "options": [
        "None of the above.",
        "None of the above.",
        "a form of\nHash Table\ndata structure that usually holds a large number of entries",
        "used to find detailed information about something"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Hash Maps is 'used to find detailed information about something'."
    }
  ],
  "summary": "This tutorial covers DSAHash Maps concepts and techniques. You'll learn how to use DSAHash Maps effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAHash Maps and how to apply it in your projects."
}