{
  "id": "bf2907a1-ed57-4394-a231-dc25bd618c47",
  "title": "DSABinary Trees",
  "slug": "dsabinary-trees",
  "metadata": {
    "description": "Learn about DSABinary Trees with clear explanations and practical examples.",
    "keywords": [
      "binary",
      "tree",
      "node",
      "child",
      "trees",
      "nodes",
      "left",
      "right",
      "data",
      "treenode"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Binary Trees"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nBinary Trees\n\nBinary Trees\nA Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes",
      "content": ", a left child node and a right child node.\nThis restriction, that a node can have a maximum of two child nodes, gives us many benefits:\nAlgorithms like traversing, searching, insertion and deletion become easier to understand, to implement, and run faster.\nKeeping data sorted in a Binary Search Tree (BST) makes searching very efficient.\nBalancing trees is easier to do with a limited number of child nodes, using an AVL Binary Tree for example.\nBinary Trees can be represented as arrays, making the tree more memory efficient.\nUse the animation below to see how a Binary Tree looks, and what words we use to describe it.\nThe Binary Tree\nRoot node\nA's left child\nA's right child\nB's subtree\nTree size (n=8)\nTree height (h=3)\nChild nodes\nParent/internal nodes\nR\nA\nB\nC\nD\nE\nF\nG\nA\nparent\nnode, or\ninternal\nnode, in a Binary Tree is a node with one or two\nchild\nnodes.\nThe\nleft child node\nis the child node to the left.\nThe\nright child node\nis the child node to the right.\nThe\ntree height\nis the maximum number of edges from the root node to a leaf node.\nBinary Trees vs Arrays and Linked Lists\nBenefits of Binary Trees over Arrays and Linked Lists:\nArrays\nare fast when you want to access an element directly, like element number 700 in an array of 1000 elements for example. But inserting and deleting elements require other elements to shift in memory to make place for the new element, or to take the deleted elements place, and that is time consuming.\nLinked Lists\nare fast when inserting or deleting nodes, no memory shifting needed, but to access an element inside the list, the list must be traversed, and that takes time.\nBinary Trees\n, such as Binary Search Trees and AVL Trees, are great compared to Arrays and Linked Lists because they are BOTH fast at accessing a node, AND fast when it comes to deleting or inserting a node, with no shifts in memory needed.\nWe will take a closer look at how Binary Search Trees (BSTs) and AVL Trees work on the \nTypes of Binary Trees\nThere are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.\nThe different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.\nBelow are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.\nA\nbalanced\nBinary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.\nA\ncomplete\nBinary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.\nA\nfull\nBinary Tree is a kind of tree where each node has either 0 or 2 child nodes.\nA\nperfect\nBinary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.\n11\n7\n15\n3\n9\n13\n19\n18\nBalanced\n11\n7\n15\n3\n9\n13\n19\n2\n4\n8\nComplete and balanced\n11\n7\n15\n13\n19\n12\n14\nFull\n11\n7\n15\n3\n13\n19\n9\nPerfect, full, balanced and complete\nBinary Tree Implementation\nLet's implement this Binary Tree:\nR\nA\nB\nC\nD\nE\nF\nG\nThe Binary Tree above can be implemented much like we implemented a\nSingly Linked List\n, except that instead of linking each node to one \nThis is how a Binary Tree can be implemented:\nExample\nPython:\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Test\nprint(\"root.right.left.data:\", root.right.left.data)\nRun Example \u00bb\nBinary Tree Traversal\nGoing through a Tree by visiting every node, one node at a time, is called traversal.\nSince Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the \nBut since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.\nThere are two main categories of Tree traversal methods:\nBreadth First Search (BFS)\nis when the nodes on the same level are visited before going to the \nDepth First Search (DFS)\nis when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.\nThere are three different types of DFS traversals:\npre-order\nin-order\npost-order\nThese three Depth First Search traversals are described in detail on the \nDSA Exercises\nTest Yourself With Exercises\nExercise:\nIn a Binary Tree data structure, like the one below:\nWhat is the relationship between node B and nodes E and F?\nNode E is B's\nchild node, \nand node F is B's\nchild node.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "66396e8d-5a43-45e9-ba97-5bd4c0113403",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "920e90c2-d319-484e-b3ba-c7c8bc366e30",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "ce8d0753-2a1d-42c7-a784-8d15915eb0e7",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nBinary Trees\n\nBinary Trees\nA Binary Tree?",
      "options": [
        "easier to do with a limited number of child nodes",
        "a type of tree data structure where each node can have a maximum of two child nodes",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of DSA\nBinary Trees\n\nBinary Trees\nA Binary Tree is 'a type of tree data structure where each node can have a maximum of two child nodes'."
    },
    {
      "question": "What is Balancing trees?",
      "options": [
        "None of the above.",
        "easier to do with a limited number of child nodes",
        "a type of tree data structure where each node can have a maximum of two child nodes",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Balancing trees is 'easier to do with a limited number of child nodes'."
    }
  ],
  "summary": "This tutorial covers DSABinary Trees concepts and techniques. You'll learn how to use DSABinary Trees effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSABinary Trees and how to apply it in your projects."
}