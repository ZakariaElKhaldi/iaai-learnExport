{
  "id": "202e0ea6-c68e-4c70-9260-a72963f51dfe",
  "title": "A Simple Algorithm",
  "slug": "a-simple-algorithm",
  "metadata": {
    "description": "Learn about A Simple Algorithm with clear explanations and practical examples.",
    "keywords": [
      "fibonacci",
      "number",
      "numbers",
      "recursion",
      "print",
      "code",
      "function",
      "algorithm",
      "newfibo",
      "using"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Simple Algorithm"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "A Simple Algorithm",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Fibonacci Numbers\nThe Fibonacci numbers are very useful for introducing algorithms, so before we continue, here is a short introduction to Fibonacci numbers.\nThe Fibonacci numbers are named after a 13th century Italian mathematician known as Fibonacci.\nThe two first Fibonacci numbers are 0 and 1, and the \nCreate fibonacci numbers.\n{{ buttonText }}\n{{ msgDone }}\n{{ x.dieNmbr }}\nThis tutorial will use loops and recursion a lot. So before we continue, let's implement three different versions of the algorithm to create Fibonacci numbers, just to see the difference between programming with loops and programming with recursion in a simple way.\nThe Fibonacci Number Algorithm\nTo generate a Fibonacci number, all we need to do is to add the two \nThe Fibonacci numbers is a good way of demonstrating what an algorithm is. We know the principle of how to find the \nBelow is the algorithm to create the 20 first Fibonacci numbers.\nHow it works:\nStart with the two first Fibonacci numbers 0 and 1.\nAdd the two \nUpdate the value of the two \nDo point a and b above 18 times.\nLoops vs Recursion\nTo show the difference between loops and recursion, we will implement solutions to find Fibonacci numbers in three different ways:\nAn implementation of the Fibonacci algorithm above using a\nfor\nloop.\nAn implementation of the Fibonacci algorithm above using recursion.\nFinding the \\(n\\)th Fibonacci number using recursion.\n1. Implementation Using a For Loop\nIt can be a good idea to list what the code must contain or do before programming it:\nTwo variables to hold the \nA for loop that runs 18 times\nCreate new Fibonacci numbers by adding the two \nPrint the new Fibonacci number\nUpdate the variables that hold the \nUsing the list above, it is easier to write the program:\nExample\nprev2 = 0\nprev1 = 1\n\nprint(prev2)\nprint(prev1)\nfor fibo in range(18):\n    newFibo = prev1 + prev2\n    print(newFibo)\n    prev2 = prev1\n    prev1 = newFibo\nRun Example \u00bb\n2. Implementation Using Recursion\nRecursion is when a function calls itself.\nTo implement the Fibonacci algorithm we need most of the same things as in the code example above, but we need to replace the for loop with recursion.\nTo replace the for loop with recursion, we need to encapsulate much of the code in a function, and we need the function to call itself to create a new Fibonacci number as long as the produced number of Fibonacci numbers is below, or equal to, 19.\nOur code looks like this:\nExample\nprint(0)\nprint(1)\ncount = 2\n\ndef fibonacci(prev1, prev2):\n    global count\n    if count <= 19:\n        newFibo = prev1 + prev2\n        print(newFibo)\n        prev2 = prev1\n        prev1 = newFibo\n        count += 1\n        fibonacci(prev1, prev2)\n    else:\n        return\n\nfibonacci(1,0)\nRun Example \u00bb\n3. Finding The \\(n\\)th Fibonacci Number Using Recursion\nTo find the \\(n\\)th Fibonacci number we can write code based on the mathematic formula for Fibonacci number \\(n\\):\n\\[F(n) = F(n-1) + F(n-2) \\]\nThis just means that for example the 10th Fibonacci number is the sum of the 9th and 8th Fibonacci numbers.\nNote:\nThis formula uses a 0-based index. This means that to generate the 20th Fibonacci number, we must write \\(F(19)\\).\nWhen using this concept with recursion, we can let the function call itself as long as \\(n\\) is less than, or equal to, 1. If \\(n \\le 1\\) it means that the code execution has reached one of the first two Fibonacci numbers 1 or 0.\nThe code looks like this:\nExample\ndef F(n):\n    if n <= 1:\n        return n\n    else:\n        return F(n - 1) + F(n - 2)\n\nprint(F(19))\nRun Example \u00bb\nNotice that this recursive method calls itself two times, not just one. This makes a huge difference in how the program will actually run on our computer. The number of calculations will explode when we increase the number of the Fibonacci number we want. To be more precise, the number of function calls will double every time we increase the Fibonacci number we want by one.\nJust take a look at the number of function calls for \\(F(5)\\):\nTo better understand the code, here is how the recursive function calls return values so that \\(F(5)\\) returns the correct value in the end:\nThere are two important things to notice here: The amount of function calls, and the amount of times the function is called with the same arguments.\nSo even though the code is fascinating and shows how recursion work, the actual code execution is too slow and ineffective to use for creating large Fibonacci numbers.\nSummary\nBefore we continue, let's look at what we have seen so far:\nAn algorithm can be implemented in different ways and in different programming languages.\nRecursion and loops are two different programming techniques that can be used to implement algorithms.\nIt is time to move on to the first data structure we will look at, the array.\nClick the \"\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nHow can we make this fibonacci() function recursive?\nprint(0)\nprint(1)\ncount = 2\n\ndef fibonacci(prev1, prev2):\n    global count\n    if count <= 19:\n        newFibo = prev1 + prev2\n        print(newFibo)\n        prev2 = prev1\n        prev1 = newFibo\n        count += 1\n(prev1, prev2)\n    else:\n        return\n\nfibonacci(1,0)\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "61e2c00a-010c-411f-9e53-29ca7c94d4a3",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5d3fdc86-84d7-434b-ad63-d4039964e147",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5e6b8d46-1d71-4a36-ae0b-5b90ebe80f0f",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is A Simple Algorithm\n\nFibonacci Numbers\nThe Fibonacci numbers?",
      "options": [
        "named after a 13th century Italian mathematician known as Fibonacci",
        "None of the above.",
        "None of the above.",
        "very useful for introducing algorithms"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of A Simple Algorithm\n\nFibonacci Numbers\nThe Fibonacci numbers is 'very useful for introducing algorithms'."
    },
    {
      "question": "What is The Fibonacci numbers?",
      "options": [
        "None of the above.",
        "named after a 13th century Italian mathematician known as Fibonacci",
        "very useful for introducing algorithms",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of The Fibonacci numbers is 'named after a 13th century Italian mathematician known as Fibonacci'."
    }
  ],
  "summary": "This tutorial covers A Simple Algorithm concepts and techniques. You'll learn how to use A Simple Algorithm effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of A Simple Algorithm and how to apply it in your projects."
}