{
  "id": "4d6f103c-db90-4946-b18f-677c00c6d8cc",
  "title": "DSAQuicksort",
  "slug": "dsaquicksort",
  "metadata": {
    "description": "Learn about DSAQuicksort with clear explanations and practical examples.",
    "keywords": [
      "array",
      "quicksort",
      "pivot",
      "element",
      "values",
      "high",
      "algorithm",
      "right",
      "left",
      "side"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 6,
    "category": "LearnDSA",
    "subcategory": "DSA Quick Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nQuicksort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Quicksort\nAs the name suggests, Quicksort is one of the fastest sorting algorithms.\nThe Quicksort algorithm takes an array of values, chooses one of the values as the 'pivot' element, and moves the other values so that lower values are on the left of the pivot element, and higher values are on the right of it.\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\nIn this tutorial the last element of the array is chosen to be the pivot element, but we could also have chosen the first element of the array, or any element in the array really.\nThen, the Quicksort algorithm does the same operation recursively on the sub-arrays to the left and right side of the pivot element. This continues until the array is sorted.\nRecursion\nis when a function calls itself.\nAfter the Quicksort algorithm has put the pivot element in between a sub-array with lower values on the left side, and a sub-array with higher values on the right side, the algorithm calls itself twice, so that Quicksort runs again for the sub-array on the left side, and for the sub-array on the right side. The Quicksort algorithm continues to call itself until the sub-arrays are too small to be sorted.\nThe algorithm can be described like this:\nHow it works:\nChoose a value in the array to be the pivot element.\nOrder the rest of the array so that lower values than the pivot element are on the left, and higher values are on the right.\nSwap the pivot element with the first element of the higher values so that the pivot element lands in between the lower and higher values.\nDo the same operations (recursively) for the sub-arrays on the left and right side of the pivot element.\nContinue reading to fully understand the Quicksort algorithm and how to implement it yourself.\nManual Run Through\nBefore we implement the Quicksort algorithm in a programming language, let's manually run through a short array, just to get the idea.\nStep 1:\nWe start with an unsorted array.\n[ 11, 9, 12, 7, 3]\nStep 2:\nWe choose the last value 3 as the pivot element.\n[ 11, 9, 12, 7,\n3\n]\nStep 3:\nThe rest of the values in the array are all greater than 3, and must be on the right side of 3. Swap 3 with 11.\n[\n3\n, 9, 12, 7,\n11\n]\nStep 4:\nValue 3 is now in the correct position. We need to sort the values to the right of 3. We choose the last value 11 as the new pivot element.\n[ 3, 9, 12, 7,\n11\n]\nStep 5:\nThe value 7 must be to the left of pivot value 11, and 12 must be to the right of it. Move 7 and 12.\n[ 3, 9,\n7, 12\n, 11]\nStep 6:\nSwap 11 with 12 so that lower values 9 and 7 are on the left side of 11, and 12 is on the right side.\n[ 3, 9, 7,\n11, 12\n]\nStep 7:\n11 and 12 are in the correct positions. We choose 7 as the pivot element in sub-array [ 9, 7], to the left of 11.\n[ 3, 9,\n7\n, 11, 12]\nStep 8:\nWe must swap 9 with 7.\n[ 3,\n7, 9\n, 11, 12]\nAnd now, the array is sorted.\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\n[\n{{ x.dieNmbr }}\n]\nManual Run Through: What Happened?\nBefore we implement the algorithm in a programming language we need to go through what happened above in more detail.\nWe have already seen that last value of the array is chosen as the pivot element, and the rest of the values are arranged so that the values lower than the pivot value are to the left, and the higher values are to the right.\nAfter that, the pivot element is swapped with the first of the higher values. This splits the original array in two, with the pivot element in between the lower and the higher values.\nNow we need to do the same as above with the sub-arrays on the left and right side of the old pivot element. And if a sub-array has length 0 or 1, we consider it finished sorted.\nTo sum up, the Quicksort algorithm makes the sub-arrays become shorter and shorter until array is sorted.\nQuicksort Implementation\nTo write a 'quickSort' method that splits the array into shorter and shorter sub-arrays we use recursion. This means that the 'quickSort' method must call itself with the new sub-arrays to the left and right of the pivot element. Read more about recursion\nhere\n.\nTo implement the Quicksort algorithm in a programming language, we need:\nAn array with values to sort.\nA\nquickSort\nmethod that calls itself (recursion) if the sub-array has a size larger than 1.\nA\npartition\nmethod that receives a sub-array, moves values around, swaps the pivot element into the sub-array and returns the index where the \nThe resulting code looks like this:\nExample\ndef partition(array, low, high):\n    pivot = array[high]\n    i = low - 1\n\nfor j in range(low, high):\n        if array[j] <= pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n\narray[i+1], array[high] = array[high], array[i+1]\n    return i+1\n\ndef quicksort(array, low=0, high=None):\n    if high is None:\n        high = len(array) - 1\n\nif low < high:\n        pivot_index = partition(array, low, high)\n        quicksort(array, low, pivot_index-1)\n        quicksort(array, pivot_index+1, high)\n\nmy_array = [64, 34, 25, 12, 22, 11, 90, 5]\nquicksort(my_array)\nprint(\"Sorted array:\", my_array)\nRun Example \u00bb\nQuicksort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Quicksort time complexity, visit\nthis page\n.\nThe worst case scenario for Quicksort is \\(O(n^2) \\). This is when the pivot element is either the highest or lowest value in every sub-array, which leads to a lot of recursive calls. With our implementation above, this happens when the array is already sorted.\nBut on average, the time complexity for Quicksort is actually just \\(O(n \\log n) \\), which is a lot better than for the \nBelow you can see the significant improvement in time complexity for Quicksort in an average scenario \\(O(n \\log n) \\), compared to the \nThe recursion part of the Quicksort algorithm is actually a reason why the average sorting scenario is so fast, because for good picks of the pivot element, the array will be split in half somewhat evenly each time the algorithm calls itself. So the number of recursive calls do not double, even if the number of values \\(n \\) double.\nRun Quicksort on different kinds of arrays with different number of values in the simulation below:\nSet values:\n{{ this.userX }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nComplete the code for the Quicksort algorithm.\ndef partition(array, low, high):\n    pivot = array[high]\n    i = low - 1\n\nfor j in range(low, high):\n        if array[j] <= pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n\narray[i+1], array[high] = array[high], array[i+1]\n    return i+1\n\ndef quicksort(array, low=0, high=None):\n    if high is None:\n        high = len(array) - 1\n\nif low < high:\n        pivot_index = partition(array, low, high)\n(array, low, pivot_index-1)\n(array, pivot_index+1, high)\n\nmy_array = [64, 34, 25, 12, 22, 11, 90, 5]\nquicksort(my_array)\nprint(\"Sorted array:\", my_array)\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9009821f-d1c5-4d02-9829-486096bbddba",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "dedd23cd-2b73-4d97-88d0-bae77a284c68",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "323ca4f0-89da-4734-af88-8ffe4226e6a6",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Quicksort?",
      "options": [
        "on the left of the pivot element",
        "None of the above.",
        "one of the fastest sorting algorithms",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Quicksort is 'one of the fastest sorting algorithms'."
    },
    {
      "question": "What is and moves the other values so that lower values?",
      "options": [
        "one of the fastest sorting algorithms",
        "on the left of the pivot element",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and moves the other values so that lower values is 'on the left of the pivot element'."
    }
  ],
  "summary": "This tutorial covers DSAQuicksort concepts and techniques. You'll learn how to use DSAQuicksort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAQuicksort and how to apply it in your projects."
}