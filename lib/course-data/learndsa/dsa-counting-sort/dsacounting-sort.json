{
  "id": "15cc333d-b8a1-4d5e-9d17-21dadce01cfa",
  "title": "DSACounting Sort",
  "slug": "dsacounting-sort",
  "metadata": {
    "description": "Learn about DSACounting Sort with clear explanations and practical examples.",
    "keywords": [
      "counting",
      "array",
      "values",
      "sort",
      "value",
      "number",
      "count",
      "index",
      "elements",
      "myarray"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 6,
    "category": "LearnDSA",
    "subcategory": "DSA Counting Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nCounting Sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Counting Sort\nThe Counting Sort algorithm sorts an array by counting the number of times each value occurs.\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\n{{ x.countValue }}\n{{ index + 1 }}\nRun the simulation to see how 17 integer values from 1 till 5 are sorted using Counting Sort.\nCounting Sort does not compare values like the \nFurthermore, Counting Sort is fast when the range of possible values \\(k\\) is smaller than the number of values \\(n\\).\nHow it works:\nCreate a new array for counting how many there are of the different values.\nGo through the array that needs to be sorted.\nFor each value, count it by increasing the counting array at the corresponding index.\nAfter counting the values, go through the counting array to create the sorted array.\nFor each count in the counting array, create the correct number of elements, with values that correspond to the counting array index.\nConditions for Counting Sort\nThese are the reasons why Counting Sort is said to only work for a limited range of non-negative integer values:\nInteger values:\nCounting Sort relies on counting occurrences of distinct values, so they must be integers. With integers, each value fits with an index (for non negative values), and there is a limited number of different values, so that the number of possible different values \\(k\\) is not too big compared to the number of values \\(n\\).\nNon negative values:\nCounting Sort is usually implemented by creating an array for counting. When the algorithm goes through the values to be sorted, value x is counted by increasing the counting array value at index x. If we tried sorting negative values, we would get in trouble with sorting value -3, because index -3 would be outside the counting array.\nLimited range of values:\nIf the number of possible different values to be sorted \\(k\\) is larger than the number of values to be sorted \\(n\\), the counting array we need for sorting will be larger than the original array we have that needs sorting, and the algorithm becomes ineffective.\nManual Run Through\nBefore we implement the Counting Sort algorithm in a programming language, let's manually run through a short array, just to get the idea.\nStep 1:\nWe start with an unsorted array.\nmyArray = [ 2, 3, 0, 2, 3, 2]\nStep 2:\nWe create another array for counting how many there are of each value. The array has 4 elements, to hold values 0 through 3.\nmyArray = [ 2, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0, 0, 0]\nStep 3:\nNow let's start counting. The first element is 2, so we must increment the counting array element at index 2.\nmyArray = [\n2\n, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0,\n1\n, 0]\nStep 4:\nAfter counting a value, we can remove it, and count the \nmyArray = [\n3\n, 0, 2, 3, 2]\ncountArray = [ 0, 0, 1,\n1\n]\nStep 5:\nThe \nmyArray = [\n0\n, 2, 3, 2]\ncountArray = [\n1\n, 0, 1, 1]\nStep 6:\nWe continue like this until all values are counted.\nmyArray = [ ]\ncountArray = [\n1, 0, 3, 2\n]\nStep 7:\nNow we will recreate the elements from the initial array, and we will do it so that the elements are ordered lowest to highest.\nThe first element in the counting array tells us that we have 1 element with value 0. So we push 1 element with value 0 into the array, and we decrease the element at index 0 in the counting array with 1.\nmyArray = [\n0\n]\ncountArray = [\n0\n, 0, 3, 2]\nStep 8:\nFrom the counting array we see that we do not need to create any elements with value 1.\nmyArray = [ 0]\ncountArray = [ 0,\n0\n, 3, 2]\nStep 9:\nWe push 3 elements with value 2 into the end of the array. And as we create these elements we also decrease the counting array at index 2.\nmyArray = [ 0,\n2, 2, 2\n]\ncountArray = [ 0, 0,\n0\n, 2]\nStep 10:\nAt last we must add 2 elements with value 3 at the end of the array.\nmyArray = [0, 2, 2, 2,\n3, 3\n]\ncountArray = [ 0, 0, 0,\n0\n]\nFinally! The array is sorted.\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\nmyArray = \n    [\n{{ x.dieNmbr }}\n]\ncountArray = \n    [\n{{ x.dieNmbr }}\n]\nManual Run Through: What Happened?\nBefore we implement the algorithm in a programming language we need to go through what happened above in more detail.\nWe have seen that the Counting Sort algorithm works in two steps:\nEach value gets counted by incrementing at the correct index in the counting array. After a value is counted, it is removed.\nThe values are recreated in the right order by using the count, and the index of the count, from the counting array.\nWith this in mind, we can start implementing the algorithm using Python.\nCounting Sort Implementation\nTo implement the Counting Sort algorithm in a programming language, we need:\nAn array with values to sort.\nA 'countingSort' method that receives an array of integers.\nAn array inside the method to keep count of the values.\nA loop inside the method that counts and removes values, by incrementing elements in the counting array.\nA loop inside the method that recreates the array by using the counting array, so that the elements appear in the right order.\nOne more thing:\nWe need to find out what the highest value in the array is, so that the counting array can be created with the correct size. For example, if the highest value is 5, the counting array must be 6 elements in total, to be able count all possible non negative integers 0, 1, 2, 3, 4 and 5.\nThe resulting code looks like this:\nExample\ndef countingSort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\nwhile len(arr) > 0:\n        num = arr.pop(0)\n        count[num] += 1\n\nfor i in range(len(count)):\n        while count[i] > 0:\n            arr.append(i)\n            count[i] -= 1\n\nreturn arr\n\nunsortedArr = [4, 2, 2, 6, 3, 3, 1, 6, 5, 2, 3]\nsortedArr = countingSort(unsortedArr)\nprint(\"Sorted array:\", sortedArr)\nRun Example \u00bb\nCounting Sort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Insertion Sort time complexity, visit\nthis page\n.\nHow fast the Counting Sort algorithm runs depends on both the range of possible values \\(k\\) and the number of values \\(n\\).\nIn general, time complexity for Counting Sort is \\(O(n+k)\\).\nIn a best case scenario, the range of possible different values \\(k\\) is very small compared to the number of values \\(n\\) and Counting Sort has time complexity \\(O(n)\\).\nBut in a worst case scenario, the range of possible different values \\(k\\) is very big compared to the number of values \\(n\\) and Counting Sort can have time complexity \\(O(n^2)\\) or even worse.\nThe plot below shows how much the time complexity for Counting Sort can vary.\nAs you can see, it is important to consider the range of values compared to the number of values to be sorted before choosing Counting Sort as your algorithm. Also, as mentioned at the top of the page, keep in mind that Counting Sort only works for non negative integer values.\nRun different simulations of Counting Sort to see how the number of operations falls between the worst case scenario \\(O(n^2)\\) (red line) and best case scenario \\(O(n)\\) (green line).\nSet values (n):\n{{ this.userX }}\nRange (k), from 0 to:\n{{ this.userK }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nAs mentioned \nIf we hold \\(n\\) and \\(k\\) fixed, the \"Random\", \"Descending\" and \"Ascending\" alternatives in the simulation above results in the same number of operations. This is because the same thing happens in all three cases: A counting array is set up, the numbers are counted, and the new sorted array is created.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nUsing Counting Sort on this array:\n[1,0,5,3,3,1,3,3,4,4]\nHow does the counting array look like?\n[\n,\n,\n,4,2,1]\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "8ebd19a2-1d15-4433-9e4f-a53fcd507cd9",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a94fa364-bd2d-4d24-9d32-5c1be7f55d5b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2d57f0a0-4924-47b0-a81b-f5725cdfa584",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Counting Sort?",
      "options": [
        "Not a Counting Sort.",
        "None of the above.",
        "fast when the range of possible values \\(k\\) is smaller than the number of values \\(n\\)",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Counting Sort is 'fast when the range of possible values \\(k\\) is smaller than the number of values \\(n\\)'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSACounting Sort concepts and techniques. You'll learn how to use DSACounting Sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSACounting Sort and how to apply it in your projects."
}