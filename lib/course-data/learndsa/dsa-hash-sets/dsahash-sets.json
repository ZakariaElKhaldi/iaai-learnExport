{
  "id": "b7e04fde-54d5-463e-a1f6-751593712b0b",
  "title": "DSAHash Sets",
  "slug": "dsahash-sets",
  "metadata": {
    "description": "Learn about DSAHash Sets with clear explanations and practical examples.",
    "keywords": [
      "hash",
      "value",
      "self",
      "bucket",
      "buckets",
      "name",
      "code",
      "index",
      "elements",
      "size"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Hash Sets"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nHash Sets\n\nHash Sets\nA Hash Set is a form of\nHash Table\ndata structure that usually holds a large number of elements",
      "content": ".\nUsing a Hash Set we can search, add, and remove elements really fast.\nHash Sets are used for lookup, to check if an element is part of a set.\nHash Set\n0\n:\n{{ el.name }}\n1\n:\n{{ el.name }}\n2\n:\n{{ el.name }}\n3\n:\n{{ el.name }}\n4\n:\n{{ el.name }}\n5\n:\n{{ el.name }}\n6\n:\n{{ el.name }}\n7\n:\n{{ el.name }}\n8\n:\n{{ el.name }}\n9\n:\n{{ el.name }}\nHash Code\n{{ sumOfAscii }} % 10 =\n{{ currHashCode }}\n{{ resultText }}\n0\ncontains()\nadd()\nremove()\nsize()\nA Hash Set stores unique elements in buckets according to the element's hash code.\nHash code:\nA number generated from an element's unique value (key), to determine what bucket that Hash Set element belongs to.\nUnique elements:\nA Hash Set cannot have more than one element with the same value.\nBucket:\nA Hash Set consists of many such buckets, or containers, to store elements. If two elements have the same hash code, they belong to the same bucket. The buckets are therefore often implemented as arrays or linked lists, because a bucket needs to be able to hold more than one element.\nFinding The Hash Code\nA hash code is generated by a\nhash function\n.\nThe hash function in the animation above takes the name written in the input, and sums up the Unicode code points for every character in that name.\nAfter that, the hash function does a modulo 10 operation (\n% 10\n) on the sum of characters to get the hash code as a number from 0 to 9.\nThis means that a name is put into one of ten possible buckets in the Hash Set, according to the hash code of that name. The same hash code is generated and used when we want to search for or remove a name from the Hash Set.\nThe Hash Code gives us instant access as long as there is just one name in the corresponding bucket.\nUnicode code point:\nEverything in our computers are stored as numbers, and the Unicode code point is a unique number that exist for every character. For example, the character\nA\nhas Unicode code point\n65\n. Just try it in the simulation above. See\nthis page\nfor more information about how characters are represented as numbers.\nModulo:\nA mathematical operation, written as\n%\nin most programming languages (or \\(mod\\) in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example,\n7 % 3\nwill give us the remainder\n1\n. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)\nDirect Access in Hash Sets\nSearching for\nPeter\nin the Hash Set above, means that the hash code\n2\nis generated (\n512 % 10\n), and that directs us right to the bucket\nPeter\nis in. If that is the only name in that bucket, we will find\nPeter\nright away.\nIn cases like this we say that the Hash Set has constant time \\(O(1)\\) for searching, adding, and removing elements, which is really fast.\nBut, if we search for\nJens\n, we need to search through the other names in that bucket before we find\nJens\n. In a worst case scenario, all names end up in the same bucket, and the name we are searching for is the last one. In such a worst case scenario the Hash Set has time complexity \\(O(n)\\), which is the same time complexity as arrays and linked lists.\nTo keep Hash Sets fast, it is therefore important to have a hash function that will distribute the elements evenly between the buckets, and to have around as many buckets as Hash Set elements.\nHaving a lot more buckets than Hash Set elements is a waste of memory, and having a lot less buckets than Hash Set elements is a waste of time.\nHash Set Implementation\nHash Sets in Python are typically done by using Python's own\nset\ndata type\n, but to get a better understanding of how Hash Sets work we will not use that here.\nTo implement a Hash Set in Python we create a class\nSimpleHashSet\n.\nInside the\nSimpleHashSet\nclass we have a method\n__init__\nto initialize the Hash Set, a method\nhash_function\nfor the hash function, and methods for the basic Hash Set operations:\nadd\n,\ncontains\n, and\nremove\n.\nWe also create a method\nprint_set\nto better see how the Hash Set looks like.\nExample\nclass SimpleHashSet:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, value):\n        # Simple hash function: sum of character codes modulo the number of buckets\n        return sum(ord(char) for char in value) % self.size\n\n    def add(self, value):\n        # Add a value if it's not already present\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value not in bucket:\n            bucket.append(value)\n\n    def contains(self, value):\n        # Check if a value exists in the set\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        return value in bucket\n\n    def remove(self, value):\n        # Remove a value\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value in bucket:\n            bucket.remove(value)\n\n    def print_set(self):\n        # Print all elements in the hash set\n        print(\"Hash Set Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")\nUsing the\nSimpleHashSet\nclass we can create the same Hash Set as in the top of this page:\nExample\nclass SimpleHashSet:\n    def __init__(self, size=100):\n        self.size = size\n        self.buckets = [[] for _ in range(size)]  # A list of buckets, each is a list (to handle collisions)\n\n    def hash_function(self, value):\n        # Simple hash function: sum of character codes modulo the number of buckets\n        return sum(ord(char) for char in value) % self.size\n\n    def add(self, value):\n        # Add a value if it's not already present\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value not in bucket:\n            bucket.append(value)\n\n    def contains(self, value):\n        # Check if a value exists in the set\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        return value in bucket\n\n    def remove(self, value):\n        # Remove a value\n        index = self.hash_function(value)\n        bucket = self.buckets[index]\n        if value in bucket:\n            bucket.remove(value)\n\n    def print_set(self):\n        # Print all elements in the hash set\n        print(\"Hash Set Contents:\")\n        for index, bucket in enumerate(self.buckets):\n            print(f\"Bucket {index}: {bucket}\")",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Creating the Hash Set from the simulation\nhash_set = SimpleHashSet(size=10)\n\nhash_set.add(\"Charlotte\")\nhash_set.add(\"Thomas\")\nhash_set.add(\"Jens\")\nhash_set.add(\"Peter\")\nhash_set.add(\"Lisa\")\nhash_set.add(\"Adele\")\nhash_set.add(\"Michaela\")\nhash_set.add(\"Bob\")\n\nhash_set.print_set()\n\nprint(\"\\n'Peter' is in the set:\",hash_set.contains('Peter'))\nprint(\"Removing 'Peter'\")\nhash_set.remove('Peter')\nprint(\"'Peter' is in the set:\",hash_set.contains('Peter'))\nprint(\"'Adele' has hash code:\",hash_set.hash_function('Adele'))\nRun Example \u00bb\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6ee2bd22-c864-44d4-8824-d2be9dc8d6ec",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "a0e773cc-8882-40aa-aa13-abffce9ff3de",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "5109b6ca-7245-43a7-bf94-de0b48fe3432",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nHash Sets\n\nHash Sets\nA Hash Set?",
      "options": [
        "None of the above.",
        "None of the above.",
        "used for lookup",
        "a form of\nHash Table\ndata structure that usually holds a large number of elements"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of DSA\nHash Sets\n\nHash Sets\nA Hash Set is 'a form of\nHash Table\ndata structure that usually holds a large number of elements'."
    },
    {
      "question": "What is Hash Sets?",
      "options": [
        "a form of\nHash Table\ndata structure that usually holds a large number of elements",
        "None of the above.",
        "None of the above.",
        "used for lookup"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Hash Sets is 'used for lookup'."
    }
  ],
  "summary": "This tutorial covers DSAHash Sets concepts and techniques. You'll learn how to use DSAHash Sets effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAHash Sets and how to apply it in your projects."
}