{
  "id": "af57eb46-a50f-48c6-91f7-f771f420c4b6",
  "title": "DSAQueues",
  "slug": "dsaqueues",
  "metadata": {
    "description": "Learn about DSAQueues with clear explanations and practical examples.",
    "keywords": [
      "queue",
      "self",
      "myqueue",
      "isempty",
      "print",
      "queues",
      "enqueue",
      "using",
      "data",
      "dequeue"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Queues"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nQueues\n\nQueues\nA queue is a data structure that can hold many elements",
      "content": ".\n{{ x.dieNmbr }}\n{{ resultText }}: {{ currVal }}\nenqueue()\ndequeue()\npeek()\nisEmpty()\nsize()\nThink of a queue as people standing in line in a supermarket.\nThe first person to stand in line is also the first who can pay and leave the supermarket. This way of organizing elements is called FIFO: First In First Out.\nBasic operations we can do on a queue are:\nEnqueue:\nAdds a new element to the queue.\nDequeue:\nRemoves and returns the first (front) element from the queue.\nPeek:\nReturns the first element in the queue.\nisEmpty:\nChecks if the queue is empty.\nSize:\nFinds the number of elements in the queue.\nExperiment with these basic operations in the queue animation above.\nQueues can be implemented by using arrays or linked lists.\nQueues can be used to implement job scheduling for an office printer, order processing for e-tickets, or to create algorithms for breadth-first search in graphs.\nQueues are often mentioned together with Stacks, which is a similar data structure described on the\n\n.\nQueue Implementation using Arrays\nTo better understand the benefits with using arrays or linked lists to implement queues, you should check out\nthis page\nthat explains how arrays and linked lists are stored in memory.\nThis is how it looks like when we use an array as a queue:\n[\n{{ x.dieNmbr }}\n]\n{{ resultText }}: {{ currVal }}\nenqueue()\ndequeue()\npeek()\nisEmpty()\nsize()\nReasons to implement queues using arrays:\nMemory Efficient:\nArray elements do not hold the \nEasier to implement and understand:\nUsing arrays to implement queues require less code than using linked lists, and for this reason it is typically easier to understand as well.\nReasons for\nnot\nusing arrays to implement queues:\nFixed size:\nAn array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements. And resizing an array can be costly.\nShifting cost:\nDequeue causes the first element in a queue to be removed, and the other elements must be shifted to take the removed elements' place. This is inefficient and can cause problems, especially if the queue is long.\nAlternatives:\nSome programming languages have built-in data structures optimized for queue operations that are better than using arrays.\nNote:\nWhen using arrays in Python for this tutorial, we are really using the Python 'list' data type, but for the scope of this tutorial the 'list' data type can be used in the same way as an array. Learn more about Python lists\nhere\n.\nSince Python lists has good support for functionality needed to implement queues, we start with creating a queue and do queue operations with just a few lines:\nExample\nPython:\nqueue = []",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Enqueue\nqueue.append('A')\nqueue.append('B')\nqueue.append('C')\nprint(\"Queue: \", queue)",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 3",
      "content": "# Dequeue\nelement = queue.pop(0)\nprint(\"Dequeue: \", element)",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 4",
      "content": "# Peek\nfrontElement = queue[0]\nprint(\"Peek: \", frontElement)",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 5",
      "content": "# isEmpty\nisEmpty = not bool(queue)\nprint(\"isEmpty: \", isEmpty)",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 6",
      "content": "# Size\nprint(\"Size: \", len(queue))\nRun Example \u00bb\nBut to explicitly create a data structure for queues, with basic operations, we should create a queue class instead. This way of creating queues in Python is also more similar to how queues can be created in other programming languages like C and Java.\nExample\nPython:\nclass Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, element):\n        self.queue.append(element)\n    \n    def dequeue(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.queue.pop(0)\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.queue[0]\n    \n    def isEmpty(self):\n        return len(self.queue) == 0\n    \n    def size(self):\n        return len(self.queue)",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 7",
      "content": "# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\nprint(\"Queue: \", myQueue.queue)\n\nprint(\"Dequeue: \", myQueue.dequeue())\n\nprint(\"Peek: \", myQueue.peek())\n\nprint(\"isEmpty: \", myQueue.isEmpty())\n\nprint(\"Size: \", myQueue.size())\nRun Example \u00bb\nQueue Implementation using Linked Lists\nReasons for using linked lists to implement queues:\nDynamic size:\nThe queue can grow and shrink dynamically, unlike with arrays.\nNo shifting:\nThe front element of the queue can be removed (enqueue) without having to shift other elements in the memory.\nReasons for\nnot\nusing linked lists to implement queues:\nExtra memory:\nEach queue element must contain the address to the \nReadability:\nThe code might be harder to read and write for some because it is longer and more complex.\nThis is how a queue can be implemented using a linked list.\nExample\nPython:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n        self.length = 0\n    \n    def enqueue(self, element):\n        new_node = Node(element)\n        if self.rear is None:\n            self.front = self.rear = new_node\n            self.length += 1\n            return\n        self.rear.\n        self.rear = new_node\n        self.length += 1\n    \n    def dequeue(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        temp = self.front\n        self.front = temp.\n        self.length -= 1\n        if self.front is None:\n            self.rear = None\n        return temp.data\n    \n    def peek(self):\n        if self.isEmpty():\n            return \"Queue is empty\"\n        return self.front.data\n    \n    def isEmpty(self):\n        return self.length == 0\n    \n    def size(self):\n        return self.length\n\n    def printQueue(self):\n        temp = self.front\n        while temp:\n            print(temp.data, end=\" \")\n            temp = temp.\n        print()",
      "order": 7,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 8",
      "content": "# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\nprint(\"Queue: \", end=\"\")\nmyQueue.printQueue()\n\nprint(\"Dequeue: \", myQueue.dequeue())\n\nprint(\"Peek: \", myQueue.peek())\n\nprint(\"isEmpty: \", myQueue.isEmpty())\n\nprint(\"Size: \", myQueue.size())\nRun Example \u00bb\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nThe Array below is used as a Queue data structure:\n[5,11,8,3]\nWhich indexes and values are affected by the\nendueue\nand\ndedueue\noperations?\nenqueue(7): \n    value 7 is placed on \n    index\nin the array.\n\ndequeue(): \n    value\nis taken \n    out of the queue.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 8,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "caac4997-0916-4f27-b570-db5d0f152ddc",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "65d7554a-1f2b-4627-87e9-feaa687c1fb5",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "b6f19ce8-420a-466f-b722-36015bcf1425",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nQueues\n\nQueues\nA queue?",
      "options": [
        "also the first who can pay and leave the supermarket",
        "None of the above.",
        "a data structure that can hold many elements",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of DSA\nQueues\n\nQueues\nA queue is 'a data structure that can hold many elements'."
    },
    {
      "question": "What is The first person to stand in line?",
      "options": [
        "a data structure that can hold many elements",
        "None of the above.",
        "None of the above.",
        "also the first who can pay and leave the supermarket"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of The first person to stand in line is 'also the first who can pay and leave the supermarket'."
    }
  ],
  "summary": "This tutorial covers DSAQueues concepts and techniques. You'll learn how to use DSAQueues effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAQueues and how to apply it in your projects."
}