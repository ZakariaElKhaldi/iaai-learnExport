{
  "id": "f8cdcec4-e27a-4dde-93fb-05c55abe4efe",
  "title": "DSAPre-order Traversal",
  "slug": "dsapre-order-traversal",
  "metadata": {
    "description": "Learn about DSAPre-order Traversal with clear explanations and practical examples.",
    "keywords": [
      "order",
      "node",
      "traversal",
      "left",
      "right",
      "first",
      "child",
      "subtree",
      "tree",
      "preordertraversal"
    ],
    "difficulty": "beginner",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Pre-order Traversal"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nPre-order Traversal",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Pre-order Traversal of Binary Trees\nPre-order Traversal is a type of Depth First Search, where each node is visited in a certain order. Read more about Binary Tree traversals in general\nhere\n.\nPre-order traversal of a Binary Tree looks like this:\nR\nA\nB\nC\nD\nE\nF\nG\nResult:\nPre-order Traverse\nPre-order Traversal is done by visiting the root node first, then recursively do a pre-order traversal of the left subtree, followed by a recursive pre-order traversal of the right subtree. It's used for creating a copy of the tree, prefix notation of an expression tree, etc.\nThis traversal is \"pre\" order because the node is visited \"before\" the recursive pre-order traversal of the left and right subtrees.\nThis is how the code for pre-order traversal looks like:\nExample\nPython:\ndef preOrderTraversal(node):\n    if node is None:\n        return\n    print(node.data, end=\", \")\n    preOrderTraversal(node.left)\n    preOrderTraversal(node.right)\nRun Example \u00bb\nThe first node to be printed is node R, as the Pre-order Traversal works by first visiting, or printing, the current node (line 4), before calling the left and right child nodes recursively (line 5 and 6).\nThe\npreOrderTraversal()\nfunction keeps traversing the left subtree recursively (line 5), before going on to traversing the right subtree (line 6). So the \nThe first time the argument\nnode\nis\nNone\nis when the left child of node C is given as an argument (C has no left child).\nAfter\nNone\nis returned the first time when calling C's left child, C's right child also returns\nNone\n, and then the recursive calls continue to propagate back so that A's right child D is the \nThe code continues to propagate back so that the rest of the nodes in R's right subtree gets printed.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "538cf839-6848-4d08-ae55-d968d0d480d7",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "7a912416-faca-4266-a30c-b808313bf0ba",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "9bb3282b-4cae-4f0f-bb98-14c0d4956200",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is order Traversal?",
      "options": [
        "None of the above.",
        "done by visiting the root node first",
        "a type of Depth First Search",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of order Traversal is 'a type of Depth First Search'."
    },
    {
      "question": "What is order Traversal?",
      "options": [
        "None of the above.",
        "a type of Depth First Search",
        "None of the above.",
        "done by visiting the root node first"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of order Traversal is 'done by visiting the root node first'."
    }
  ],
  "summary": "This tutorial covers DSAPre-order Traversal concepts and techniques. You'll learn how to use DSAPre-order Traversal effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAPre-order Traversal and how to apply it in your projects."
}