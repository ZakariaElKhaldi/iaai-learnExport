{
  "id": "34984f18-fd37-4626-990e-3bf2ce2c9b5f",
  "title": "DSALinked Lists in Memory",
  "slug": "dsalinked-lists-in-memory",
  "metadata": {
    "description": "Learn about DSALinked Lists in Memory with clear explanations and practical examples.",
    "keywords": [
      "node",
      "memory",
      "linked",
      "lists",
      "list",
      "stored",
      "data",
      "bytes",
      "nodes",
      "example"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 7,
    "category": "LearnDSA",
    "subcategory": "DSA Linked Listsin Memory"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nLinked Lists in Memory",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Computer Memory\nTo explain what linked lists are, and how linked lists are different from arrays, we need to understand some basics about how computer memory works.\nComputer memory is the storage your program uses when it is running. This is where your variables, arrays and linked lists are stored.\nVariables in Memory\nLet's imagine that we want to store the integer \"17\" in a variable\nmyNumber\n. For simplicity, let's assume the integer is stored as two bytes (16 bits), and the address in memory to\nmyNumber\nis\n0x7F25\n.\n0x7F25\nis actually the address to the first of the two bytes of memory where the\nmyNumber\ninteger value is stored. When the computer goes to\n0x7F25\nto read an integer value, it knows that it must read both the first and the second byte, since integers are two bytes on this specific computer.\nThe image below shows how the variable\nmyNumber = 17\nis stored in memory.\nThe example above shows how an integer value is stored on the simple, but popular, Arduino Uno microcontroller. This microcontroller has an 8 bit architecture with 16 bit address bus and uses two bytes for integers and two bytes for memory addresses. For comparison, personal computers and smart phones use 32 or 64 bits for integers and addresses, but the memory works basically in the same way.\nArrays in Memory\nTo understand linked lists, it is useful to first know how arrays are stored in memory.\nElements in an array are stored contiguously in memory. That means that each element is stored right after the \nThe image below shows how an array of integers\nmyArray = [3,5,13,2]\nis stored in memory. We use a simple kind of memory here with two bytes for each integer, like in the \nThe computer has only got the address of the first byte of\nmyArray\n, so to access the 3rd element with code\nmyArray[2]\nthe computer starts at\n0x7F23\nand jumps over the two first integers. The computer knows that an integer is stored in two bytes, so it jumps 2x2 bytes forward from\n0x7F23\nand reads value 13 starting at address\n0x7F27\n.\nWhen removing or inserting elements in an array, every element that comes after must be either shifted up to make place for the new element, or shifted down to take the removed element's place. Such shifting operations are time consuming and can cause problems in real-time systems for example.\nThe image below shows how elements are shifted when an array element is removed.\nManipulating arrays is also something you must think about if you are programming in C, where you have to explicitly move other elements when inserting or removing an element. In C this does not happen in the background.\nIn C you also need to make sure that you have allocated enough space for the array to start with, so that you can add more elements later.\nYou can read more about arrays on\nthis \n.\nLinked Lists in Memory\nInstead of storing a collection of data as an array, we can create a linked list.\nLinked lists are used in many scenarios, like dynamic data storage, stack and queue implementation or graph representation, to mention some of them.\nA linked list consists of nodes with some sort of data, and at least one pointer, or link, to other nodes.\nA big benefit with using linked lists is that nodes are stored wherever there is free space in memory, the nodes do not have to be stored contiguously right after each other like elements are stored in arrays. Another nice thing with linked lists is that when adding or removing nodes, the rest of the nodes in the list do not have to be shifted.\nThe image below shows how a linked list can be stored in memory. The linked list has four nodes with values 3, 5, 13 and 2, and each node has a pointer to the \nEach node takes up four bytes. Two bytes are used to store an integer value, and two bytes are used to store the address to the \nTo make it easier to see how the nodes relate to each other, we will display nodes in a linked list in a simpler way, less related to their memory location, like in the image below:\nIf we put the same four nodes from the \nAs you can see, the first node in a linked list is called the \"Head\", and the last node is called the \"Tail\".\nUnlike with arrays, the nodes in a linked list are not placed right after each other in memory. This means that when inserting or removing a node, shifting of other nodes is not necessary, so that is a good thing.\nSomething not so good with linked lists is that we cannot access a node directly like we can with an array by just writing\nmyArray[5]\nfor example. To get to node number 5 in a linked list, we must start with the first node called \"head\", use that node's pointer to get to the \nLearning about linked lists helps us to better understand concepts like memory allocation and pointers.\nLinked lists are also important to understand before learning about more complex data structures such as trees and graphs, that can be implemented using linked lists.\nMemory in Modern Computers\nSo far on this page we have used the memory in an 8 bit microcontroller as an example to keep it simple and easier to understand.\nMemory in modern computers work in the same way in principle as memory in an 8 bit microcontroller, but more memory is used to store integers, and more memory is used to store memory addresses.\nThe code below gives us the size of an integer and the size of a memory address on the server we are running these examples on.\nExample\nCode written in C:\n#include <stdio.h>\n\nint main() {\n\nint myVal = 13;\n\nprintf(\"Value of integer 'myVal': %d\\n\", myVal);\n    printf(\"Size of integer 'myVal': %lu bytes\\n\", sizeof(myVal)); // 4 bytes\n    printf(\"Address to 'myVal': %p\\n\", &myVal);\n    printf(\"Size of the address to 'myVal': %lu bytes\\n\", sizeof(&myVal)); // 8 bytes\n\nreturn 0;\n}\nRun Example \u00bb\nThe code example above only runs in C because Java and Python runs on an abstraction level above specific/direct memory allocation.\nLinked List Implementation in C\nLet's implement this linked list from earlier:\nLet's implement this linked list in C to see a concrete example of how linked lists are stored in memory.\nIn the code below, after including the libraries, we create a node struct which is like a class that represents what a node is: the node contains data and a pointer to the \nThe\ncreateNode()\nfunction allocates memory for a new node, fills in the data part of the node with an integer given as an argument to the function, and returns the pointer (memory address) to the new node.\nThe\nprintList()\nfunction is just for going through the linked list and printing each node's value.\nInside the\nmain()\nfunction, four nodes are created, linked together, printed, and then the memory is freed. It is good practice to free memory after we are done using it to avoid memory leaks. Memory leak is when memory is not freed after use, gradually taking up more and more memory.\nExample\nA basic linked list in C:\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* \n} Node;\n\nNode* createNode(int data) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    if (!newNode) {\n        printf(\"Memory allocation failed!\\n\");\n        exit(1);\n    }\n    newNode->data = data;\n    newNode->\n    return newNode;\n}\n\nvoid printList(Node* node) {\n    while (node) {\n        printf(\"%d -> \", node->data);\n        node = node->\n    }\n    printf(\"null\\n\");\n}\n\nint main() {\n    Node* node1 = createNode(3);\n    Node* node2 = createNode(5);\n    Node* node3 = createNode(13);\n    Node* node4 = createNode(2);\n\nnode1->\n    node2->\n    node3->\n\nprintList(node1);\n\n// Free the memory\n    free(node1);\n    free(node2);\n    free(node3);\n    free(node4);\n\nreturn 0;\n}\nRun Example \u00bb\nTo print the linked list in the code above, the\nprintList()\nfunction goes from one node to the \nLinked Lists Oprations page\n.\nLinked List Implementation in Python and Java\nWe will now implement this same linked list using Python and Java instead.\nIn the Python code below, the\nNode\nclass represents what a node is: the node contains data and a link to the \nThe\nNode\nclass is used to to create four nodes, the nodes are then linked together, and printed at the end.\nAs you can see, the Python code is a lot shorter than the C code, and perhaps better if you just want to understand the concept of linked lists, and not how linked lists are stored in memory.\nThe Java code is very similar to the Python code. Click the \"Run Example\" button below and choose the \"Java\" tab to see the Java code.\nExample\nA basic linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\nnode1 = Node(3)\nnode2 = Node(5)\nnode3 = Node(13)\nnode4 = Node(2)\n\nnode1.\nnode2.\nnode3.\n\ncurrentNode = node1\nwhile currentNode:\n    print(currentNode.data, end=\" -> \")\n    currentNode = currentNode.\nprint(\"null\")\nRun Example \u00bb\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nWhat is a benefit of using Linked Lists?\nA good thing about Linked Lists \nis that when inserting or \nremoving a node, other elements \ndo not have to be\nin memory.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "c6af36a6-9b80-4d7a-9135-89137f43dee4",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "646188e5-6760-452d-9823-15ed28783bd1",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fb173353-76a5-42ec-bc21-6764c741a2a9",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and how linked lists?",
      "options": [
        "running",
        "None of the above.",
        "None of the above.",
        "different from arrays"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of and how linked lists is 'different from arrays'."
    },
    {
      "question": "What is Computer memory is the storage your program uses when it?",
      "options": [
        "running",
        "None of the above.",
        "None of the above.",
        "different from arrays"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Computer memory is the storage your program uses when it is 'running'."
    }
  ],
  "summary": "This tutorial covers DSALinked Lists in Memory concepts and techniques. You'll learn how to use DSALinked Lists in Memory effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSALinked Lists in Memory and how to apply it in your projects."
}