{
  "id": "6f2e9e7c-64b2-4386-8136-b05da8821d6c",
  "title": "DSALinear Search",
  "slug": "dsalinear-search",
  "metadata": {
    "description": "Learn about DSALinear Search with clear explanations and practical examples.",
    "keywords": [
      "value",
      "search",
      "array",
      "linear",
      "found",
      "index",
      "values",
      "targetval",
      "algorithm",
      "return"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Linear Search"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nLinear Search",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Linear Search\nThe Linear Search algorithm searches through an array and returns the index of the value it searches for.\nSpeed:\nFind value:\nCurrent value: {{ currVal }}\n{{ buttonText }}\n{{ msgDone }}\n{{ index }}\nRun the simulation above to see how the Linear Search algorithm works.\nToo see what happens when a value is not found, try to find value 5.\nThis algorithm is very simple and easy to understand and implement.\nIf the array is already sorted, it is better to use the much faster Binary Search algorithm that we will explore on the \nA big difference between\nsorting\nalgorithms and\nsearching\nalgorithms is that sorting algorithms modify the array, but searching algorithms leave the array unchanged.\nHow it works:\nGo through the array value by value from the start.\nCompare each value to check if it is equal to the value we are looking for.\nIf the value is found, return the index of that value.\nIf the end of the array is reached and the value is not found, return -1 to indicate that the value was not found.\nManual Run Through\nLet's try to do the searching manually, just to get an even better understanding of how Linear Search works before actually implementing it in a programming language. We will search for value 11.\nStep 1:\nWe start with an array of random values.\n[ 12, 8, 9, 11, 5, 11]\nStep 2:\nWe look at the first value in the array, is it equal to 11?\n[\n12\n, 8, 9, 11, 5, 11]\nStep 3:\nWe move on to the \n[ 12,\n8\n, 9, 11, 5, 11]\nStep 4:\nWe check the \n[ 12, 8,\n9\n, 11, 5, 11]\nStep 5:\nWe move on to the \n[ 12, 8, 9,\n11\n, 5, 11]\nWe have found it!\nValue 11 is found at index 3.\nReturning index position 3.\nLinear Search is finished.\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\n[\n{{ x.dieNmbr }}\n]\nManual Run Through: What Happened?\nThis algorithm is really straight forward.\nEvery value is checked from the start of the array to see if the value is equal to 11, the value we are trying to find.\nWhen the value is found, the searching is stopped, and the index where the value is found is returned.\nIf the array is searched through without finding the value, -1 is returned.\nLinear Search Implementation\nTo implement the Linear Search algorithm we need:\nAn array with values to search through.\nA target value to search for.\nA loop that goes through the array from start to end.\nAn if-statement that compares the current value with the target value, and returns the current index if the target value is found.\nAfter the loop, return -1, because at this point we know the target value has not been found.\nThe resulting code for Linear Search looks like this:\nExample\ndef linearSearch(arr, targetVal):\n    for i in range(len(arr)):\n        if arr[i] == targetVal:\n            return i\n    return -1\n\narr = [3, 7, 2, 9, 5]\ntargetVal = 9\n\nresult = linearSearch(arr, targetVal)\n\nif result != -1:\n    print(\"Value\",targetVal,\"found at index\",result)\nelse:\n    print(\"Value\",targetVal,\"not found\")\nRun Example \u00bb\nLinear Search Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Insertion Sort time complexity, visit\nthis page\n.\nIf Linear Search runs and finds the target value as the first array value in an array with \\(n\\) values, only one compare is needed.\nBut if Linear Search runs through the whole array of \\(n\\) values, without finding the target value, \\(n\\) compares are needed.\nThis means that time complexity for Linear Search is\n\\[ O(n) \\]\nIf we draw how much time Linear Search needs to find a value in an array of \\(n\\) values, we get this graph:\nRun the simulation below for different number of values in an array, and see how many compares are needed for Linear Search to find a value in an array of \\(n\\) values:\nSet values:\n{{ this.userX }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\nNot found!\n{{runBtnText}}\nClear\nChoosing \"Random\", \"Descending\" or \"Ascending\" in the simulation above has no effect on how fast Linear Search is.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nComplete the code.\ndef linearSearch(arr, targetVal):\n    for i in range(len(arr)):\n        if arr[i] == targetVal:\nreturn -1\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "3289856f-b200-49de-ba1f-0046c5366729",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "64e1895c-65e9-413a-88d6-173b496ebe4d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "562fc06f-72ab-44d8-b907-2888638adce1",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Too see what happens when a value?",
      "options": [
        "not found",
        "None of the above.",
        "None of the above.",
        "very simple and easy to understand and implement"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Too see what happens when a value is 'not found'."
    },
    {
      "question": "What is This algorithm?",
      "options": [
        "very simple and easy to understand and implement",
        "None of the above.",
        "not found",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of This algorithm is 'very simple and easy to understand and implement'."
    }
  ],
  "summary": "This tutorial covers DSALinear Search concepts and techniques. You'll learn how to use DSALinear Search effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSALinear Search and how to apply it in your projects."
}