{
  "id": "44eaa464-cf79-418d-8485-aa077618f303",
  "title": "DSAExamples",
  "slug": "dsaexamples",
  "metadata": {
    "description": "Learn about DSAExamples with clear explanations and practical examples.",
    "keywords": [
      "explained",
      "algorithm",
      "sort",
      "binary",
      "linked",
      "using",
      "traversal",
      "search",
      "tree",
      "finds"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Examples"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nExamples",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "A Simple Algorithm\nFinds the 20 first Fibonacci numbers using a for-loop\nFinds the 20 first Fibonacci numbers using recursion\nFinds the nth Fibonacci number using recursion\nA Simple Algorithm Explained\nArrays\nPrints the value of an array element\nFinds the lowest value in an array\nArrays Explained\nBubble Sort\nBubble Sort\nImproved Bubble Sort\nBubble Sort Explained\nSelection Sort\nSelection Sort\nImproved Selection Sort\nSelection Sort Explained\nInsertion Sort\nInsertion Sort\nImproved Insertion Sort\nInsertion Sort Explained\nQuick Sort\nQuick Sort\nQuick Sort Explained\nCounting Sort\nCounting Sort\nCounting Sort Explained\nRadix Sort\nRadix Sort\nRadix Sort using Bubble Sort\nRadix Sort Explained\nMerge Sort\nMerge Sort\nMerge Sort without recursion\nMerge Sort Explained\nLinear Search\nLinear Search\nLinear Search Explained\nBinary Search\nBinary Search\nBinary Search Explained\nLinked Lists in Memory\nC Example prints memory information\nBasic linked list example in C\nBasic linked list example in Python and Java\nLinked Lists in Memory Explained\nLinked Lists Types\nSingly linked list\nDoubly linked list\nCircular singly linked list\nCircular doubly linked list\nLinked Lists Types Explained\nLinked Lists Operations\nTraversal of a linked list\nFind the lowest value in a linked list\nDelete a node in a linked list\nInsert a node in a linked list\nLinked Lists Operations Explained\nStacks\nA very basic Python stack example, only using built-in array operations\nStack data structure\nStack implementation using linked lists\nStacks Explained\nQueues\nA very basic Python queue example, only using built-in array operations\nQueue data structure\nQueue implementation using linked lists\nQueues Explained\nHash Tables\nHash function\nCheck if hash set contains a name\nA very basic Hash Set\nHash Tables Explained\nHash Sets\nA simple Hash Set\nHash Sets Explained\nHash Maps\nA simple Hash Map\nHash Maps Explained\nBinary Trees\nA binary tree\nBinary Trees Explained\nPre-order Traversal\nPre-order traversal of a binary tree\nPre-order Traversal Explained\nIn-order Traversal\nIn-order traversal of a binary tree\nIn-order Traversal Explained\nPost-order Traversal\nPost-order traversal of a binary tree\nPost-order Traversal Explained\nArray Implementation of Binary Trees\nArray implementation of a binary tree\nArray implementation of a binary tree, with traversals\nArray Implementation of Binary Trees Explained\nBinary Search Trees\nBinary search tree traversal\nSearching for a value in a binary search tree\nInserting a node in a binary search tree\nFinding the lowest value in a binary search tree\nDeleting a node in a binary search tree\nBinary Search Trees Explained\nAVL Trees\nInserting a node in an AVL tree\nDeleting a node in an AVL tree\nAVL Trees Explained\nGraphs Implementation\nA basic undirected graph\nPrinting the edges in a basic undirected graph\nA graph implementation using classes\nA directed and weighted graph\nGraphs Implementation Explained\nGraphs Traversal\nDepth First Search Traversal\nBreadth First Search Traversal\nDFS and BFT traversal of a directed graph\nGraphs Traversal Explained\nCycle Detection in Graphs\nDFS Cycle Detection for undirected graphs\nDFS Cycle Detection for directed graphs\nUnion Find Cycle Detection\nCycle Detection in Graphs Explained\nDijkstra's Algorithm\nDijkstra's algorithm on an undirected graph\nDijkstra's algorithm on a directed graph\nDijkstra's algorithm, with the shortest paths returned\nDijkstra's algorithm, with a single destination vertex\nDijkstra's Algorithm Explained\nThe Bellman-Ford Algorithm\nThe Bellman-Ford algorithm on an undirected graph\nThe Bellman-Ford algorithm with negative cycle detection\nThe Bellman-Ford, with the shortest paths returned\nThe Bellman-Ford Algorithm Explained\nPrim's Algorithm\nPrim's algorithm. Finds the Minimum Spanning Tree.\nPrim's Algorithm Explained\nKruskal's Algorithm\nKruskal's algorithm. Finds the Minimum Spanning Tree.\nKruskal's Algorithm Explained\nThe Ford-Fulkerson Algorithm\nThe Ford-Fulkerson algorithm. Finds the Maximum Flow.\nThe Ford-Fulkerson Algorithm Explained\nThe Edmonds-Karp Algorithm\nThe Edmonds-Karp algorithm. Finds the Maximum Flow.\nThe Edmond-Karp Algorithm Explained\nThe Eucledian Algorithm\nThe Eucledian algorithm. Finds the greatest common divisor using division.\nThe original Eucledian algorithm. Finds the greatest common divisor using subtraction.\nThe Eucledian Algorithm Explained\nHuffman Coding\nHuffman Coding.\nHuffman Coding and Decoding.\nHuffman Coding Explained\nThe Traveling Salesman Problem\nSolving The Traveling Salesman Problem by checking all possible routes (brute force).\nFinding a near-optimal solution to the Traveling Salesman Problem using the nearest-neighbor algorithm (greedy).\nThe Traveling Salesman Explained\nThe 0/1 Knapsack Problem\nSolving the 0/1 Knapsack Problem using recursion and brute force.\nSolving the 0/1 Knapsack Problem using memoization.\nSolving the 0/1 Knapsack Problem using tabulation.\nSolution to the 0/1 Knapsack Problem that also returns the included items.\nThe 0/1 Knapsack Problem Explained\nMemoization\nFinding the 6th Fibonacci number with recursion.\nFinding the 6th Fibonacci number with recursion together with memoization.\nFinding the 30th Fibonacci number, with and without memoization.\nMemoization in AVL Trees.\nMemoization Explained\nTabulation\nFinding the 10th Fibonacci number using tabulation.\nTabulation Explained\nDynamic Programming\nAlgorithm created with Dynamic Programming: Finds the 6th Fibonacci number.\nDynamic Programming Explained\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "d1bf4bdd-e596-4f6b-a35a-d382bc687ef3",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3fa7aa39-6da3-463b-9387-96f18a4e1f1f",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "aaf39550-7cad-4fab-844c-d0884f5e89a4",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSAExamples concepts and techniques. You'll learn how to use DSAExamples effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAExamples and how to apply it in your projects."
}