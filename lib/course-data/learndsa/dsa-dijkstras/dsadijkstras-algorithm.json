{
  "id": "b1f9811e-17b8-4a13-a7b7-74d30cc484ee",
  "title": "DSADijkstra's Algorithm",
  "slug": "dsadijkstras-algorithm",
  "metadata": {
    "description": "Learn about DSADijkstra's Algorithm with clear explanations and practical examples.",
    "keywords": [
      "vertex",
      "self",
      "distances",
      "dijkstra",
      "size",
      "algorithm",
      "distance",
      "visited",
      "graph",
      "path"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 18,
    "category": "LearnDSA",
    "subcategory": "DSA Dijkstra's"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nDijkstra",
      "content": "'s Algorithm\n\nDijkstra's shortest path algorithm was invented in 1956 by the Dutch computer scientist Edsger W. Dijkstra during a twenty minutes coffee break, while out shopping with his fianc\u00e9e in Amsterdam.\nThe reason for inventing the algorithm was to test a new computer called ARMAC.\nDijkstra's Algorithm\nDijkstra's algorithm finds the shortest path from one vertex to all other vertices.\nIt does so by repeatedly selecting the nearest unvisited vertex and calculating the distance to all the unvisited neighboring vertices.\n{{ buttonText }}\n{{ msgDone }}\nDijkstra's algorithm is often considered to be the most straightforward algorithm for solving the shortest path problem.\nDijkstra's algorithm is used for solving single-source shortest path problems for directed or undirected paths. Single-source means that one vertex is chosen to be the start, and the algorithm will find the shortest path from that vertex to all other vertices.\nDijkstra's algorithm does not work for graphs with negative edges. For graphs with negative edges, the Bellman-Ford algorithm that is described on the \nTo find the shortest path, Dijkstra's algorithm needs to know which vertex is the source, it needs a way to mark vertices as visited, and it needs an overview of the current shortest distance to each vertex as it works its way through the graph, updating these distances when a shorter distance is found.\nHow it works:\nSet initial distances for all vertices: 0 for the source vertex, and infinity for all the other.\nChoose the unvisited vertex with the shortest distance from the start to be the current vertex. So the algorithm will always start with the source as the current vertex.\nFor each of the current vertex's unvisited neighbor vertices, calculate the distance from the source and update the distance if the new, calculated, distance is lower.\nWe are now done with the current vertex, so we mark it as visited. A visited vertex is not checked again.\nGo back to step 2 to choose a new current vertex, and keep repeating these steps until all vertices are visited.\nIn the end we are left with the shortest path from the source vertex to every other vertex in the graph.\nIn the animation above, when a vertex is marked as visited, the vertex and its edges become faded to indicate that Dijkstra's algorithm is now done with that vertex, and will not visit it again.\nNote:\nThis basic version of Dijkstra's algorithm gives us the value of the shortest path cost to every vertex, but not what the actual path is. So for example, in the animation above, we get the shortest path cost value 10 to vertex F, but the algorithm does not give us which vertices (D->E->C->D->F) that make up this shortest path. We will add this functionality further down here on this page.\nA Detailed Dijkstra Simulation\nRun the simulation below to get a more detailed understanding of how Dijkstra's algorithm runs on a specific graph, finding the shortest distances from vertex D.\ninf\nF\n2\n5\n5\n3\ninf\nB\ninf\nC\n5\n5\n2\n2\ninf\nA\n4\n4\n4\ninf\nE\n0\nD\ninf\nG\n2\n2\n5\n5\n4\n4\n2\n2\n6\n6\n8\n2\nPlay\nReset\nThis simulation shows how distances are calculated from vertex D to all other vertices, by always choosing the \nFollow the step-by-step description below to get all the details of how Dijkstra's algorithm calculates the shortest distances.\nManual Run Through\nConsider the Graph below.\nF\n2\n5\n3\n4\n5\n2\nB\nC\n5\n5\n2\nA\n4\n4\nE\nD\nG\nWe want to find the shortest path from the source vertex D to all other vertices, so that for example the shortest path to C is D->E->C, with path weight 2+4=6.\nTo find the shortest path, Dijkstra's algorithm uses an array with the distances to all other vertices, and initially sets these distances to infinite, or a very big number. And the distance to the vertex we start from (the source) is set to 0.\ndistances = [inf, inf, inf, 0, inf, inf, inf]\n#vertices   [ A ,  B ,  C , D,  E ,  F ,  G ]\nThe image below shows the initial infinite distances to other vertices from the starting vertex D. The distance value for vertex D is 0 because that is the starting point.\ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\ninf\nC\n5\n5\n2\ninf\nA\n4\n4\ninf\nE\n0\nD\ninf\nG\nDijkstra's algorithm then sets vertex D as the current vertex, and looks at the distance to the adjacent vertices. Since the initial distance to vertices A and E is infinite, the new distance to these are updated with the edge weights. So vertex A gets the distance changed from inf to 4, and vertex E gets the distance changed to 2. As mentioned on the \ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\ninf\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\ninf\nG\nAfter relaxing vertices A and E, vertex D is considered visited, and will not be visited again.\nThe \ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nThe distance to all adjacent and not \nThe calculated distance from D to vertex A, via E, is 2+4=6. But the current distance to vertex A is already 4, which is lower, so the distance to vertex A is not updated.\nThe distance to vertex C is calculated to be 2+4=6, which is less than infinity, so the distance to vertex C is updated.\nSimilarly, the distance to node G is calculated and updated to be 2+5=7.\nThe \ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nThe calculated distance to vertex C, via A, is 4+3=7, which is higher than the already set distance to vertex C, so the distance to vertex C is not updated.\nVertex A is now marked as visited, and the \n11\nF\n2\n5\n3\n4\n5\n2\n8\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nVertex F gets updated distance 6+5=11, and vertex B gets updated distance 6+2=8.\nCalculated distance to vertex G via vertex C is 6+5=11 which is higher than the already set distance of 7, so distance to vertex G is not updated.\nVertex C is marked as visited, and the \n11\nF\n2\n5\n3\n4\n5\n2\n8\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nVertex F already has a distance of 11. This is lower than the calculated distance from G, which is 7+5=12, so the distance to vertex F is not updated.\nVertex G is marked as visited, and B becomes the current vertex because it has the lowest distance of the remaining unvisited vertices.\n10\nF\n2\n5\n3\n4\n5\n2\n8\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nThe new distance to F via B is 8+2=10, because it is lower than F's existing distance of 11.\nVertex B is marked as visited, and there is nothing to check for the last unvisited vertex F, so Dijkstra's algorithm is finished.\nEvery vertex has been visited only once, and the result is the lowest distance from the source vertex D to every other vertex in the graph.\nImplementation of Dijkstra's Algorithm\nTo implement Dijkstra's algorithm, we create a\nGraph\nclass. The\nGraph\nrepresents the graph with its vertices and edges:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\nLine 3:\nWe create the\nadj_matrix\nto hold all the edges and edge weights. Initial values are set to\n0\n.\nLine 4:\nsize\nis the number of vertices in the graph.\nLine 5:\nThe\nvertex_data\nholds the names of all the vertices.\nLine 7-10:\nThe\nadd_edge\nmethod is used to add an edge from vertex\nu\nto vertex\nv\n, with edge weight\nweight\n.\nLine 12-14:\nThe\nadd_vertex_data\nmethod is used to add a vertex to the graph. The index where the vertex should belong is given with the\nvertex\nargument, and\ndata\nis the name of the vertex.\nThe\nGraph\nclass also contains the method that runs Dijkstra's algorithm:\ndef dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances\nLine 18-19:\nThe initial distance is set to infinity for all vertices in the\ndistances\narray, except for the start vertex, where the distance is 0.\nLine 20:\nAll vertices are initially set to\nFalse\nto mark them as not visited in the\nvisited\narray.\nLine 23-28:\nThe \nLine 30-31:\nIf the \nLine 33:\nThe current vertex is set as visited before relaxing adjacent vertices. This is more effective because we avoid checking the distance to the current vertex itself.\nLine 35-39:\nDistances are calculated for not visited adjacent vertices, and updated if the new calculated distance is lower.\nAfter defining the\nGraph\nclass, the vertices and edges must be defined to initialize the specific graph, and the complete code for this Dijkstra's algorithm example looks like this:\nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0, 4)  # D - A, weight 5\ng.add_edge(3, 4, 2)  # D - E, weight 2\ng.add_edge(0, 2, 3)  # A - C, weight 3\ng.add_edge(0, 4, 4)  # A - E, weight 4\ng.add_edge(4, 2, 4)  # E - C, weight 4\ng.add_edge(4, 6, 5)  # E - G, weight 5\ng.add_edge(2, 5, 5)  # C - F, weight 5\ng.add_edge(2, 1, 2)  # C - B, weight 2\ng.add_edge(1, 5, 2)  # B - F, weight 2\ng.add_edge(6, 5, 5)  # G - F, weight 5",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Dijkstra's algorithm from D to all vertices\nprint(\"\\nDijkstra's Algorithm starting from vertex D:\")\ndistances = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    print(f\"Distance from D to {g.vertex_data[i]}: {d}\")\nRun Example \u00bb\nDijkstra's Algorithm on Directed Graphs\nTo run Dijkstra's algorithm on directed graphs, very few changes are needed.\nSimilarly to the change we needed for\ncycle detection for directed graphs\n, we just need to remove one line of code so that the adjacency matrix is not symmetric anymore.\nLet's implement this directed graph and run Dijkstra's algorithm from vertex D.\ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\ninf\nC\n5\n5\n2\ninf\nA\n4\n4\ninf\nE\n0\nD\ninf\nG\nHere is the implementation of Dijkstra's algorithm on the directed graph, with D as the source vertex:\nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight   For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n\n        return distances\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 5\ng.add_edge(3, 4, 2)  # D -> E, weight 2\ng.add_edge(0, 2, 3)  # A -> C, weight 3\ng.add_edge(0, 4, 4)  # A -> E, weight 4\ng.add_edge(4, 2, 4)  # E -> C, weight 4\ng.add_edge(4, 6, 5)  # E -> G, weight 5\ng.add_edge(2, 5, 5)  # C -> F, weight 5\ng.add_edge(1, 2, 2)  # B -> C, weight 2\ng.add_edge(1, 5, 2)  # B -> F, weight 2\ng.add_edge(6, 5, 5)  # G -> F, weight 5",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 3",
      "content": "# Dijkstra's algorithm from D to all vertices\nprint(\"Dijkstra's Algorithm starting from vertex D:\\n\")\ndistances = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    print(f\"Shortest distance from D to {g.vertex_data[i]}: {d}\")\nRun Example \u00bb\nThe image below shows us the shortest distances from vertex D as calculated by Dijkstra's algorithm.\n11\nF\n2\n5\n3\n4\n5\n2\ninf\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nThis result is similar to the \nReturning The Paths from Dijkstra's Algorithm\nWith a few adjustments, the actual shortest paths can also be returned by Dijkstra's algorithm, in addition to the shortest path values. So for example, instead of just returning that the shortest path value is 10 from vertex D to F, the algorithm can also return that the shortest path is \"D->E->C->B->F\".\n10\nF\n2\n5\n3\n4\n5\n2\n8\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\nTo return the path, we create a\npredecessors\narray to keep the \npredecessors\narray can be used to backtrack to find the shortest path for every vertex.\nExample\nPython:\nclass Graph:\n    # ... (rest of the Graph class)\n\n    def dijkstra(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None:\n                break\n\n            visited[u] = True\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n                        predecessors[v] = u\n\n        return distances, predecessors\n\n    def get_path(self, predecessors, start_vertex, end_vertex):\n        path = []\n        current = self.vertex_data.index(end_vertex)\n        while current is not None:\n            path.insert(0, self.vertex_data[current])\n            current = predecessors[current]\n            if current == self.vertex_data.index(start_vertex):\n                path.insert(0, start_vertex)\n                break\n        return '->'.join(path)  # Join the vertices with '->'\n\ng = Graph(7)",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 4",
      "content": "# ... (rest of the graph setup)",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 5",
      "content": "# Dijkstra's algorithm from D to all vertices\nprint(\"Dijkstra's Algorithm starting from vertex D:\\n\")\ndistances, predecessors = g.dijkstra('D')\nfor i, d in enumerate(distances):\n    path = g.get_path(predecessors, 'D', g.vertex_data[i])\n    print(f\"{path}, Distance: {d}\")\nRun Example \u00bb\nLine 7 and 29:\nThe\npredecessors\narray is first initialized with\nNone\nvalues, then it is updated with the correct predecessor for each vertex as the shortest path values are updated.\nLine 33-42:\nThe\nget_path\nmethod uses the\npredecessors\narray and returns a string with the shortest path from start to end vertex.\nDijkstra's Algorithm with a Single Destination Vertex\nLet's say we are only interested in finding the shortest path between two vertices, like finding the shortest distance between vertex D and vertex F in the graph below.\ninf\nF\n2\n5\n3\n4\n5\n2\ninf\nB\ninf\nC\n5\n5\n2\ninf\nA\n4\n4\ninf\nE\n0\nD\ninf\nG\n5\ninf\nH\n4\ninf\nI\n2\ninf\nJ\nDijkstra's algorithm is normally used for finding the shortest path from one source vertex to all other vertices in the graph, but it can also be modified to only find the shortest path from the source to a single destination vertex, by just stopping the algorithm when the destination is reached (visited).\nThis means that for the specific graph in the image above, Dijkstra's algorithm will stop after visiting F (the destination vertex), before visiting vertices H, I and J because they are farther away from D than F is.\nBelow we can see the status of the calculated distances when Dijkstra's algorithm has found the shortest distance from D to F, and stops running.\n10\nF\n2\n5\n3\n4\n5\n2\n8\nB\n6\nC\n5\n5\n2\n4\nA\n4\n4\n2\nE\n0\nD\n7\nG\n5\n12\nH\n4\n11\nI\n2\ninf\nJ\nIn the image above, vertex F has just got updated with distance 10 from vertex B. Since F is the unvisited vertex with the lowest distance from D, it would normally be the \nThe code below is Dijkstra's algorithm implemented to find the shortest path to a single destination vertex:\nExample\nPython:\nclass Graph:\n    # ... (existing methods)\n\n    def dijkstra(self, start_vertex_data, end_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        end_vertex = self.vertex_data.index(end_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n        visited = [False] * self.size\n\n        for _ in range(self.size):\n            min_distance = float('inf')\n            u = None\n            for i in range(self.size):\n                if not visited[i] and distances[i] < min_distance:\n                    min_distance = distances[i]\n                    u = i\n\n            if u is None or u == end_vertex:\n                print(f\"Breaking out of loop. Current vertex: {self.vertex_data[u]}\")\n                print(f\"Distances: {distances}\")\n                break\n\n            visited[u] = True\n            print(f\"Visited vertex: {self.vertex_data[u]}\")\n\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0 and not visited[v]:\n                    alt = distances[u] + self.adj_matrix[u][v]\n                    if alt < distances[v]:\n                        distances[v] = alt\n                        predecessors[v] = u\n\n        return distances[end_vertex], self.get_path(predecessors, start_vertex_data, end_vertex_data)",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 6",
      "content": "# Example usage\ng = Graph(7)\n# ... (rest of the graph setup)\ndistance, path = g.dijkstra('D', 'F')\nprint(f\"Path: {path}, Distance: {distance}\")\nRun Example \u00bb\nLine 20-23:\nIf we are about to choose the destination vertex as the current vertex and mark it as visited, it means we have already calculated the shortest distance to the destination vertex, and Dijkstra's algorithm can be stopped in this single destination case.\nTime Complexity for Dijkstra's Algorithm\nWith \\(V\\) as the number of vertices in our graph, the time complexity for Dijkstra's algorithm is\n\\[ O( V^2 ) \\]\nThe reason why we get this time complexity is that the vertex with the lowest distance must to be search for to choose the \nBy using a Min-heap or Fibonacci-heap data structure for the distances instead (not yet explained in this tutorial), the time needed to search for the minimum distance vertex is reduced from \\(O(V)\\) to \\(O( \\log{V})\\), which results in an improved time complexity for Dijkstra's algorithm\n\\[ O( V \\cdot \\log{V} + E ) \\]\nWhere \\(V\\) is the number of vertices in the graph, and \\(E\\) is the number of edges.\nThe improvement we get from using a Min-heap data structure for Dijkstra's algorithm is especially good if we have a large and sparse graph, which means a graph with a large number of vertices, but not as many edges.\nThe implementation of Dijkstra's algorithm with the Fibonacci-heap data structure is better for dense graphs, where each vertex has an edge to almost every other vertex.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nUsing Dijkstra's algorithm to find the shortest paths from vertex C in this graph:\nWhat is the \nUsing Dijkstra's algorithm,\nthe \nafter vertex C is vertex\n.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "aaaf561b-371f-48aa-9890-06a5f88a8907",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ea159d7c-f49b-4126-a06c-3cbb7a04e271",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "13570777-0271-46df-babe-88934ec254f3",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is s algorithm?",
      "options": [
        "None of the above.",
        "often considered to be the most straightforward algorithm for solving the shortest path problem",
        "used for solving single-source shortest path problems for directed or undirected paths",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of s algorithm is 'often considered to be the most straightforward algorithm for solving the shortest path problem'."
    },
    {
      "question": "What is s algorithm?",
      "options": [
        "None of the above.",
        "used for solving single-source shortest path problems for directed or undirected paths",
        "None of the above.",
        "often considered to be the most straightforward algorithm for solving the shortest path problem"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of s algorithm is 'used for solving single-source shortest path problems for directed or undirected paths'."
    }
  ],
  "summary": "This tutorial covers DSADijkstra's Algorithm concepts and techniques. You'll learn how to use DSADijkstra's Algorithm effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSADijkstra's Algorithm and how to apply it in your projects."
}