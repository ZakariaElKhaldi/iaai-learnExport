{
  "id": "2fc0e1fd-1853-4ef1-9242-ac53e3ceab42",
  "title": "DSAMerge Sort Time Complexity",
  "slug": "dsamerge-sort-time-complexity",
  "metadata": {
    "description": "Learn about DSAMerge Sort Time Complexity with clear explanations and practical examples.",
    "keywords": [
      "array",
      "merge",
      "values",
      "number",
      "sort",
      "operations",
      "needed",
      "time",
      "arrays",
      "comparing"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "Merge Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nMerge Sort Time Complexity",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "See\nthis page\nfor a general explanation of what time complexity is.\nMerge Sort Time Complexity\nThe\nMerge Sort algorithm\nbreaks the array down into smaller and smaller pieces.\nThe array becomes sorted when the sub-arrays are merged back together so that the lowest values come first.\nThe array that needs to be sorted has \\(n\\) values, and we can find the time complexity by start looking at the number of operations needed by the algorithm.\nThe main operations Merge Sort does is to split, and then merge by comparing elements.\nTo split an array from start until the sub-arrays only consists of one value, Merge Sort does a total of \\(n-1\\) splits. Just imaging an array with 16 values. It is split one time into sub-arrays of length 8, split again and again, and the size of the sub-arrays reduces to 4, 2 and finally 1. The number of splits for an array of 16 elements is \\(1+2+4+8=15\\).\nThe image below shows that 15 splits are needed for an array of 16 numbers.\nThe number of merges is actually also \\(n-1\\), the same as the number of splits, because every split needs a merge to build the array back together. And for each merge there is a comparison between values in the sub-arrays so that the merged result is sorted.\nDuring merging of two sub-arrays, the worst case scenario that generates the most comparisons, is if the sub-arrays are equally big. Just consider merging [1,4,6,9] and [2,3,7,8]. In this case the following comparisons are needed:\nComparing 1 and 2, result: [1]\nComparing 4 and 2, result: [1,2]\nComparing 4 and 3, result: [1,2,3]\nComparing 4 and 7, result: [1,2,3,4]\nComparing 6 and 7, result: [1,2,3,4,6]\nComparing 9 and 7, result: [1,2,3,4,6,7]\nComparing 9 and 8, result: [1,2,3,4,6,7,8]\nAt the end of the merge, only the value 9 is left in one array, the other array is empty, so no comparison is needed to put the last value in, and the resulting merged array is [1,2,3,4,6,7,8,9]. We see that we need 7 comparisons to merge 8 values (4 values in each of the initial sub-arrays). In general, in a worst case scenario, \\(n-1\\) comparisons are needed to get a merged array of \\(n\\) values.\nFor simplicity, let's say that we need \\(n\\) comparisons instead of \\(n-1\\) when merging \\(n\\) values. This is an ok assumption when \\(n\\) is large and we want to calculate an upper bound using Big O notation.\nSo, at each level merging happens, \\(n\\) comparisons are needed, but how many levels are there? Well, for \\(n=16\\) we have \\(n=16=2^4\\), so 4 levels of merging. For \\(n=32=2^5\\) there are 5 levels of merging, and at each level, \\(n\\) comparisons are needed. For \\(n=1024=2^{10}\\) 10 levels of merging is needed. To find out what power of 2 gives us 1024, we use a base-2 logarithm. The answer is 10. Mathematically it looks like this: \\( \\log_{2}1024=10\\).\nAs we can see from the figure above, \\(n\\) comparisons are needed on each level, and there are \\( \\log_{2}n\\) levels, so there are \\( n \\cdot \\log_{2}n\\) comparison operations in total.\nTime complexity can be calculated based on the number of split operations and the number of merge operations:\n\\[\n\\begin{equation}\n\\begin{aligned}\nO( (n-1) + n \\cdot \\log_{2}n) {} & = O( n \\cdot \\log_{2}n )\n\\end{aligned}\n\\end{equation}\n\\]\nThe number of splitting operations \\((n-1)\\) can be removed from the Big O calculation above because \\( n \\cdot \\log_{2}n\\) will dominate for large \\( n\\), and because of how we calculate time complexity for algorithms.\nThe figure below shows how the time increases when running Merge Sort on an array with \\(n\\) values.\nThe difference between best and worst case scenarios for Merge Sort is not as big as for many other sorting algorithms.\nMerge Sort Simulation\nRun the simulation for different number of values in an array, and see how the number of operations Merge Sort needs on an array of \\(n\\) elements is \\(O(n \\log n)\\):\nSet values:\n{{ this.userX }}\nRandom\nDescending\nAscending\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nIf we hold the number of values \\(n\\) fixed, the number of operations needed for the \"Random\", \"Descending\" and \"Ascending\" is almost the same.\nMerge Sort performs almost the same every time because the array is split, and merged using comparison, both if the array is already sorted or not.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "9b82862c-406b-435a-96ff-1696bc1a9f8d",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "5bc7c049-f30d-4718-9e18-f44e2764d746",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "4e3d7445-010b-49ed-9fd7-35e706adc49c",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is arrays?",
      "options": [
        "None of the above.",
        "merged back together so that the lowest values come first",
        "None of the above.",
        "Not a arrays."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of arrays is 'merged back together so that the lowest values come first'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSAMerge Sort Time Complexity concepts and techniques. You'll learn how to use DSAMerge Sort Time Complexity effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAMerge Sort Time Complexity and how to apply it in your projects."
}