{
  "id": "3bea0ee9-9aba-441b-9484-ab8e2bc1452b",
  "title": "DSASelection Sort",
  "slug": "dsaselection-sort",
  "metadata": {
    "description": "Learn about DSASelection Sort with clear explanations and practical examples.",
    "keywords": [
      "array",
      "sort",
      "selection",
      "value",
      "lowest",
      "time",
      "algorithm",
      "values",
      "step",
      "front"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Selection Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nSelection Sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Selection Sort\nThe Selection Sort algorithm finds the lowest value in an array and moves it to the front of the array.\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\nThe algorithm looks through the array again and again, moving the \nHow it works:\nGo through the array to find the lowest value.\nMove the lowest value to the front of the unsorted part of the array.\nGo through the array again as many times as there are values in the array.\nContinue reading to fully understand the Selection Sort algorithm and how to implement it yourself.\nManual Run Through\nBefore we implement the Selection Sort algorithm in a programming language, let's manually run through a short array only one time, just to get the idea.\nStep 1:\nWe start with an unsorted array.\n[ 7, 12, 9, 11, 3]\nStep 2:\nGo through the array, one value at a time. Which value is the lowest? 3, right?\n[ 7, 12, 9, 11,\n3\n]\nStep 3:\nMove the lowest value 3 to the front of the array.\n[\n3\n, 7, 12, 9, 11]\nStep 4:\nLook through the rest of the values, starting with 7. 7 is the lowest value, and already at the front of the array, so we don't need to move it.\n[ 3,\n7\n, 12, 9, 11]\nStep 5:\nLook through the rest of the array: 12, 9 and 11. 9 is the lowest value.\n[ 3, 7, 12,\n9\n, 11]\nStep 6:\nMove 9 to the front.\n[ 3, 7,\n9\n, 12, 11]\nStep 7:\nLooking at 12 and 11, 11 is the lowest.\n[ 3, 7, 9, 12,\n11\n]\nStep 8:\nMove it to the front.\n[ 3, 7, 9,\n11\n, 12]\nFinally, the array is sorted.\nRun the simulation below to see the steps above animated:\n{{ buttonText }}\n{{ msgDone }}\n[\n{{ x.dieNmbr }}\n]\nManual Run Through: What Happened?\nWe must understand what happened above to fully understand the algorithm, so that we can implement the algorithm in a programming language.\nCan you see what happened to the lowest value 3? In step 3, it has been moved to the start of the array, where it belongs, but at that step the rest of the array remains unsorted.\nSo the Selection Sort algorithm must run through the array again and again, each time the \nAnd each time the algorithm runs through the array, the remaining unsorted part of the array becomes shorter.\nWe will now use what we have learned to implement the Selection Sort algorithm in a programming language.\nSelection Sort Implementation\nTo implement the Selection Sort algorithm in a programming language, we need:\nAn array with values to sort.\nAn inner loop that goes through the array, finds the lowest value, and moves it to the front of the array. This loop must loop through one less value each time it runs.\nAn outer loop that controls how many times the inner loop must run. For an array with \\(n\\) values, this outer loop must run \\(n-1\\) times.\nThe resulting code looks like this:\nExample\nmy_array = [64, 34, 25, 5, 22, 11, 90, 12]\n\nn = len(my_array)\nfor i in range(n-1):\n    min_index = i\n    for j in range(i+1, n):\n        if my_array[j] < my_array[min_index]:\n            min_index = j\n    min_value = my_array.pop(min_index)\n    my_array.insert(i, min_value)\n\nprint(\"Sorted array:\", my_array)\nRun Example \u00bb\nSelection Sort Shifting Problem\nThe Selection Sort algorithm can be improved a little bit more.\nIn the code above, the lowest value element is removed, and then inserted in front of the array.\nEach time the \nThese shifting operation takes a lot of time, and we are not even done yet! After the lowest value (5) is found and removed, it is inserted at the start of the array, causing all following values to shift one position up to make space for the new value, like the image below shows.\nNote:\nYou will not see these shifting operations happening in the code if you are using a high level programming language such as Python or Java, but the shifting operations are still happening in the background. Such shifting operations require extra time for the computer to do, which can be a problem.\nSolution: Swap Values!\nInstead of all the shifting, swap the lowest value (5) with the first value (64) like below.\nWe can swap values like the image above shows because the lowest value ends up in the correct position, and it does not matter where we put the other value we are swapping with, because it is not sorted yet.\nHere is a simulation that shows how this improved Selection Sort with swapping works:\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\nHere is an implementation of the improved Selection Sort, using swapping:\nExample\nmy_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(n):\n    min_index = i\n    for j in range(i+1, n):\n        if my_array[j] < my_array[min_index]:\n            min_index = j   \n    my_array[i], my_array[min_index] = my_array[min_index], my_array[i]\n\nprint(\"Sorted array:\", my_array)\nRun Example \u00bb\nSelection Sort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Selection Sort time complexity, visit\nthis page\n.\nSelection Sort sorts an array of \\(n\\) values.\nOn average, about \\(\\frac{n}{2}\\) elements are compared to find the lowest value in each loop.\nAnd Selection Sort must run the loop to find the lowest value approximately \\(n\\) times.\nWe get time complexity:\n\\[ O( \\frac{n}{2} \\cdot n) = \\underline{\\underline{O(n^2)}} \\]\nThe time complexity for the Selection Sort algorithm can be displayed in a graph like this:\nAs you can see, the run time is the same as for Bubble Sort: The run time increases really fast when the size of the array is increased.\nRun the simulation below for different sized arrays.\nThe red dashed line represents the theoretical time complexity \\(O(n^2)\\).\nBlue crosses appear when you run the simulation. The blue crosses show how many operations are needed to sort an array of a certain size.\nSet values:\n{{ this.userX }}\nRandom\nWorst Case\nBest Case\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nThe most significant difference from Bubble sort that we can notice in this simulation is that best and worst case is actually almost the same for Selection Sort (\\(O(n^2)\\)), but for Bubble Sort the best case runtime is only \\(O(n)\\).\nThe difference in best and worst case for Selection Sort is mainly the number of swaps. In the best case scenario Selection Sort does not have to swap any of the values because the array is already sorted. And in the worst case scenario, where the array already sorted, but in the wrong order, so Selection Sort must do as many swaps as there are values in array.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nUsing Selection Sort on this array:\n[7,12,9,11,3]\nTo sort the values from left to right in an increasing (ascending) order.\nWhat is the value of the LAST element after the first run through?\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "6ea9790e-2b58-4518-a20b-b0f36246d50f",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "339c0212-ec88-4957-837b-c7446681768b",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "83561a7c-ae94-475a-bd11-bbb95b5cfc96",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Go through the array again as many times as there?",
      "options": [
        "the lowest",
        "values in the array",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Go through the array again as many times as there is 'values in the array'."
    },
    {
      "question": "What is Which value?",
      "options": [
        "None of the above.",
        "the lowest",
        "values in the array",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Which value is 'the lowest'."
    }
  ],
  "summary": "This tutorial covers DSASelection Sort concepts and techniques. You'll learn how to use DSASelection Sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSASelection Sort and how to apply it in your projects."
}