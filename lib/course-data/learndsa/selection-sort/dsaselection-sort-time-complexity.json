{
  "id": "1443e1d6-7dc9-46ea-b27b-992609b8f03a",
  "title": "DSASelection Sort Time Complexity",
  "slug": "dsaselection-sort-time-complexity",
  "metadata": {
    "description": "Learn about DSASelection Sort Time Complexity with clear explanations and practical examples.",
    "keywords": [
      "sort",
      "array",
      "frac",
      "selection",
      "time",
      "algorithm",
      "number",
      "case",
      "value",
      "values"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "Selection Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nSelection Sort Time Complexity",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "See\nthis page\nfor a general explanation of what time complexity is.\nSelection Sort Time Complexity\nThe\nSelection Sort algorithm\ngoes through all elements in an array, finds the lowest value, and moves it to the front of the array, and does this over and over until the array is sorted.\nSelection Sort goes through an array of \\(n\\) values \\(n-1\\) times. This is because when the algorithm has sorted all values except the last, the last value must also be in its correct place.\nThe first time the algorithm runs through the array, every value is compared to find out which one is the lowest.\nThe second time the algorithm runs through the array, every value\nexcept the first value\nis compared to find out which is the lowest.\nAnd in this way the unsorted part of the array becomes shorter and shorter until the sorting is done. So on average, \\(\\frac{n}{2}\\) elements are considered when the algorithm goes through the array finding the lowest value and moving it to the front of the array.\nIn addition to all the compares needed, the number of swaps needed is \\(n \\).\nWe can start calculating the number of operations for the Selection Sort algorithm:\n\\[\n  \\begin{equation}\n  \\begin{aligned}\n  Operations {} & = (n-1)\\cdot \\frac{n}{2} + n \\\\\n                & = \\frac{n^2}{2} - \\frac{n}{2} + n \\\\\n                & = \\frac{n^2}{2} + \\frac{n}{2} \n\\end{aligned}\n\\end{equation}\n\\]\nWhen looking at the run time for algorithms, we look at very large data sets, meaning \\(n\\) is a very big number. And for a very big number \\(n\\), the term \\(\\frac{n^2}{2}\\) becomes so much bigger than the term \\(\\frac{n}{2}\\) that we can approximate by simply removing that second term \\(\\frac{n}{2}\\).\n\\[Operations = \\frac{n^2}{2} + \\frac{n}{2} \\approx \\frac{n^2}{2} = \\frac{1}{2} \\cdot n^2 \\]\nUsing Big O notation to describe the time complexity for the Selection Sort algorithm, we get:\n\\[ O( \\frac{1}{2} \\cdot n^2) = \\underline{\\underline{O(n^2)}} \\]\nAnd time complexity for the Selection Sort algorithm can be displayed in a graph like this:\nAs you can see, the run time is the same as for Bubble Sort: The run time increases really fast when the size of the array is increased.\nSelection Sort Simulation\nRun the simulation for different number of values in an array, and see how the number of operations Selection Sort needs on an array of \\(n\\) elements is \\(O(n^2)\\):\nSet values:\n{{ this.userX }}\nRandom\nWorst Case\nBest Case\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nThe most significant difference from Bubble sort that we can notice in this simulation is that best and worst case is actually almost the same for Selection Sort (\\(O(n^2)\\)), but for Bubble Sort the best case runtime is only \\(O(n)\\).\nThe difference in best and worst case for Selection Sort is mainly the number of swaps. In the best case scenario Selection Sort does not have to swap any of the values because the array is already sorted. And in the worst case scenario, where the array already sorted, but in the wrong order, so Selection Sort must do as many swaps as there are values in the array.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "17a87f65-33a9-41ae-b7fc-e10e90a6fe1b",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "577f9510-d798-4c9d-af19-993bfc8d3d2a",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "a0f43e21-e7aa-4753-8c49-a5772aea0713",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is and does this over and over until the array?",
      "options": [
        "sorted",
        "Not a and does this over and over until the array.",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of and does this over and over until the array is 'sorted'."
    },
    {
      "question": "Which best describes the main purpose of this c feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSASelection Sort Time Complexity concepts and techniques. You'll learn how to use DSASelection Sort Time Complexity effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSASelection Sort Time Complexity and how to apply it in your projects."
}