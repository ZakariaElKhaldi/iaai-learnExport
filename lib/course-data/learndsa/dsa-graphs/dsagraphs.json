{
  "id": "b83c73f7-b4cc-45e7-a2db-5b8a6bed2373",
  "title": "DSAGraphs",
  "slug": "dsagraphs",
  "metadata": {
    "description": "Learn about DSAGraphs with clear explanations and practical examples.",
    "keywords": [
      "graph",
      "adjacency",
      "vertex",
      "matrix",
      "edges",
      "edge",
      "vertices",
      "directed",
      "list",
      "weighted"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 6,
    "category": "LearnDSA",
    "subcategory": "DSA Graphs"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nGraphs",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Graphs\nA Graph is a non-linear data structure that consists of vertices (nodes) and edges.\nF\n2\n4\nB\nC\nA\nE\nD\nG\nA vertex, also called a node, is a point or an object in the Graph, and an edge is used to connect two vertices with each other.\nGraphs are non-linear because the data structure allows us to have different paths to get from one vertex to another, unlike with linear data structures like Arrays or Linked Lists.\nGraphs are used to represent and solve problems where the data consists of objects and relationships between them, such as:\nSocial Networks:  Each person is a vertex, and relationships (like friendships) are the edges. Algorithms can suggest potential friends.\nMaps and Navigation:  Locations, like a town or bus stops, are stored as vertices, and roads are stored as edges. Algorithms can find the shortest route between two locations when stored as a Graph.\nInternet: Can be represented as a Graph, with web pages as vertices and hyperlinks as edges.\nBiology: Graphs can model systems like neural networks or the spread of diseases.\nGraph Properties\nUse the animation below to get an understanding of the different Graph properties, and how these properties can be combined.\nWeighted\nConnected\nDirected\nCyclic\nLoop\n4\nF\n2\n4\n3\n4\nB\nC\n5\n5\n3\nA\n3\n3\nE\nD\nG\nA\nweighted\nGraph is a Graph where the edges have values. The weight value of an edge can represent things like distance, capacity, time, or probability.\nA\nconnected\nGraph is when all the vertices are connected through edges somehow. A Graph that is not connected, is a Graph with isolated (disjoint) subgraphs, or single isolated vertices.\nA\ndirected\nGraph, also known as a digraph, is when the edges between the vertex pairs have a direction. The direction of an edge can represent things like hierarchy or flow.\nA cyclic Graph is defined differently depending on whether it is directed or not:\nA\ndirected cyclic\nGraph is when you can follow a path along the directed edges that goes in circles. Removing the directed edge from F to G in the animation above makes the directed Graph not cyclic anymore.\nAn\nundirected cyclic\nGraph is when you can come back to the same vertex you started at without using the same edge more than once. The undirected Graph above is cyclic because we can start and end up in vertes C without using the same edge twice.\nA\nloop\n, also called a self-loop, is an edge that begins and ends on the same vertex. A loop is a cycle that only consists of one edge. By adding the loop on vertex A in the animation above, the Graph becomes cyclic.\nGraph Representations\nA Graph representation tells us how a Graph is stored in memory.\nDifferent Graph representations can:\ntake up more or less space.\nbe faster or slower to search or manipulate.\nbe better suited depending on what type of Graph we have (weighted, directed, etc.), and what we want to do with the Graph.\nbe easier to understand and implement than others.\nBelow are short introductions of the different Graph representations, but Adjacency Matrix is the representation we will use for Graphs moving forward in this tutorial, as it is easy to understand and implement, and works in all cases relevant for this tutorial.\nGraph representations store information about which vertices are adjacent, and how the edges between the vertices are. Graph representations are slightly different if the edges are directed or weighted.\nTwo vertices are adjacent, or neighbors, if there is an edge between them.\nAdjacency Matrix Graph Representation\nAdjacency Matrix is the Graph representation (structure) we will use for this tutorial.\nHow to implement an Adjacency Matrix is shown on the \nThe Adjacency Matrix is a 2D array (matrix) where each cell on index\n(i,j)\nstores information about the edge from vertex\ni\nto vertex\nj\n.\nBelow is a Graph with the Adjacency Matrix representation \nA\nB\nC\nD\nA\nB\nC\nD\nA\nB\nC\nD\n1\n1\n1\n1\n1\n1\n1\n1\nAn undirected Graph\nand the adjacency matrix\nThe adjacency matrix above represents an undirected Graph, so the values '1' only tells us where the edges are. Also, the values in the adjacency matrix is symmetrical because the edges go both ways (undirected Graph).\nTo create a directed Graph with an adjacency matrix, we must decide which vertices the edges go from and to, by inserting the value at the correct indexes\n(i,j)\n. To represent a weighted Graph we can put other values than '1' inside the adjacency matrix.\nBelow is a directed and weighted Graph with the Adjacency Matrix representation \nA\nB\n1\n3\nC\n4\n2\nD\nA\nB\nC\nD\nA\nB\nC\nD\n3\n2\n1\n4\nA directed and weighted Graph,\nand its adjacency matrix.\nIn the adjacency matrix above, the value\n3\non index\n(0,1)\ntells us there is an edge from vertex A to vertex B, and the weight for that edge is\n3\n.\nAs you can see, the weights are placed directly into the adjacency matrix for the correct edge, and for a directed Graph, the adjacency matrix does not have to be symmetric.\nAdjacency List Graph Representation\nIn case we have a 'sparse' Graph with many vertices, we can save space by using an Adjacency List compared to using an Adjacency Matrix, because an Adjacency Matrix would reserve a lot of memory on empty Array elements for edges that don't exist.\nA 'sparse' Graph is a Graph where each vertex only has edges to a small portion of the other vertices in the Graph.\nAn Adjacency List has an array that contains all the vertices in the Graph, and each vertex has a Linked List (or Array) with the vertex's edges.\nA\nB\nC\nD\n0\n1\n2\n3\nA\nB\nC\nD\n3\n1\n2\nnull\n0\n2\nnull\n1\n0\nnull\n0\nnull\nAn undirected Graph\nand its adjacency list.\nIn the adjacency list above, the vertices A to D are placed in an Array, and each vertex in the array has its index written right \nEach vertex in the Array has a pointer to a Linked List that represents that vertex's edges. More specifically, the Linked List contains the indexes to the adjacent (neighbor) vertices.\nSo for example, vertex A has a link to a Linked List with values 3, 1, and 2. These values are the indexes to A's adjacent vertices D, B, and C.\nAn Adjacency List can also represent a directed and weighted Graph, like this:\nA\nB\n1\n3\nC\n4\n2\nD\n0\n1\n2\n3\nA\nB\nC\nD\n1,3\n2,2\nnull\nnull\n1,1\nnull\n0,4\nnull\nA directed and weighted Graph\nand its adjacency list.\nIn the Adjacency List above, vertices are stored in an Array. Each vertex has a pointer to a Linked List with edges stored as\ni,w\n, where\ni\nis the index of the vertex the edge goes to, and\nw\nis the weight of that edge.\nNode D for example, has a pointer to a Linked List with an edge to vertex A. The values\n0,4\nmeans that vertex D has an edge to vertex on index\n0\n(vertex A), and the weight of that edge is\n4\n.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nHow can the Graph below be described?\nThe Graph is cyclic, \nconnected, and\n.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "e59aba38-d297-40ec-b0a7-7c64c2e188cf",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "e765a173-ac0f-4d6a-a6d0-77b116c6ec99",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "59d3373f-9e2d-4c70-a09a-aad33bd0f4ef",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nGraphs\n\nGraphs\nA Graph?",
      "options": [
        "a non-linear data structure that consists of vertices (nodes) and edges",
        "None of the above.",
        "None of the above.",
        "used to connect two vertices with each other"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of DSA\nGraphs\n\nGraphs\nA Graph is 'a non-linear data structure that consists of vertices (nodes) and edges'."
    },
    {
      "question": "What is and an edge?",
      "options": [
        "None of the above.",
        "used to connect two vertices with each other",
        "None of the above.",
        "a non-linear data structure that consists of vertices (nodes) and edges"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of and an edge is 'used to connect two vertices with each other'."
    }
  ],
  "summary": "This tutorial covers DSAGraphs concepts and techniques. You'll learn how to use DSAGraphs effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAGraphs and how to apply it in your projects."
}