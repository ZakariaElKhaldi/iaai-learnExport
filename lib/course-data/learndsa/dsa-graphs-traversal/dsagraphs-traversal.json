{
  "id": "1610c6e0-3028-4b54-9f8e-f82ad8fe289a",
  "title": "DSAGraphs Traversal",
  "slug": "dsagraphs-traversal",
  "metadata": {
    "description": "Learn about DSAGraphs Traversal with clear explanations and practical examples.",
    "keywords": [
      "self",
      "vertex",
      "visited",
      "size",
      "queue",
      "vertices",
      "traversal",
      "first",
      "graph",
      "print"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 7,
    "category": "LearnDSA",
    "subcategory": "DSA Graphs Traversal"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nGraphs Traversal",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Graphs Traversal\nTo traverse a Graph means to start in one vertex, and go along the edges to visit other vertices until all vertices, or as many as possible, have been visited.\nF\nB\nC\nA\nE\nD\nG\nResult:\nDFS Traverse from D\nUnderstanding how a Graph can be traversed is important for understanding how algorithms that run on Graphs work.\nThe two most common ways a Graph can be traversed are:\nDepth First Search (DFS)\nBreadth First Search (BFS)\nDFS is usually implemented using a\nStack\nor by the use of recursion (which utilizes the call stack), while BFS is usually implemented using a\nQueue\n.\nThe\nCall Stack\nkeeps functions running in the correct order.\nIf for example FunctionA calls FunctionB, FunctionB is placed on top of the call stack and starts running. Once FunctionB is finished, it is removed from the stack, and then FunctionA resumes its work.\nDepth First Search Traversal\nDepth First Search is said to go \"deep\" because it visits a vertex, then an adjacent vertex, and then that vertex' adjacent vertex, and so on, and in this way the distance from the starting vertex increases for each recursive iteration.\nHow it works:\nStart DFS traversal on a vertex.\nDo a recursive DFS traversal on each of the adjacent vertices as long as they are not already visited.\nRun the animation below to see how Depth First Search (DFS) traversal runs on a specific Graph, starting in vertex D (it is the same as the \nF\nB\nC\nA\nE\nD\nG\nResult:\nDFS Traverse from D\nThe DFS traversal starts in vertex D, marks vertex D as visited. Then, for every new vertex visited, the traversal method is called recursively on all adjacent vertices that have not been visited yet. So when vertex A is visited in the animation above, vertex C or vertex E (depending on the implementation) is the \nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\ndef add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            self.adj_matrix[v][u] = 1\n\ndef add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\ndef print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n\ndef dfs_util(self, v, visited):\n        visited[v] = True\n        print(self.vertex_data[v], end=' ')\n\nfor i in range(self.size):\n            if self.adj_matrix[v][i] == 1 and not visited[i]:\n                self.dfs_util(i, visited)\n\ndef dfs(self, start_vertex_data):\n        visited = [False] * self.size\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        self.dfs_util(start_vertex, visited)\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0)  # D - A\ng.add_edge(0, 2)  # A - C\ng.add_edge(0, 3)  # A - D\ng.add_edge(0, 4)  # A - E\ng.add_edge(4, 2)  # E - C\ng.add_edge(2, 5)  # C - F\ng.add_edge(2, 1)  # C - B\ng.add_edge(2, 6)  # C - G\ng.add_edge(1, 5)  # B - F\n\ng.print_graph()\n\nprint(\"\\nDepth First Search starting from vertex D:\")\ng.dfs('D')\nRun Example \u00bb\nLine 60:\nThe DFS traversal starts when the\ndfs()\nmethod is called.\nLine 33:\nThe\nvisited\narray is first set to\nfalse\nfor all vertices, because no vertices are visited yet at this point.\nLine 35:\nThe\nvisited\narray is sent as an argument to the\ndfs_util()\nmethod. When the\nvisited\narray is sent as an argument like this, it is actually just a reference to the\nvisited\narray that is sent to the\ndfs_util()\nmethod, and not the actual array with the values inside. So there is always just one\nvisited\narray in our program, and the\ndfs_util()\nmethod can make changes to it as nodes are visited (line 25).\nLine 28-30:\nFor the current vertex\nv\n, all adjacent nodes are called recursively if they are not already visited.\nBreadth First Search Traversal\nBreadth First Search visits all adjacent vertices of a vertex before visiting neighboring vertices to the adjacent vertices. This means that vertices with the same distance from the starting vertex are visited before vertices further away from the starting vertex are visited.\nHow it works:\nPut the starting vertex into the queue.\nFor each vertex taken from the queue, visit the vertex, then put all unvisited adjacent vertices into the queue.\nContinue as long as there are vertices in the queue.\nRun the animation below to see how Breadth First Search (BFS) traversal runs on a specific Graph, starting in vertex D.\nF\nB\nC\nA\nE\nD\nG\nResult:\nBFS Traverse from D\nAs you can see in the animation above, BFS traversal visits vertices the same distance from the starting vertex, before visiting vertices further away. So for example, after visiting vertex A, vertex E and C are visited before visiting B, F and G because those vertices are further away.\nBreadth First Search traversal works this way by putting all adjacent vertices in a queue (if they are not already visited), and then using the queue to visit the \nThis code example for Breadth First Search traversal is the same as for the Depth First Search code example above, except for the\nbfs()\nmethod:\nExample\nPython:\ndef bfs(self, start_vertex_data):\n    queue = [self.vertex_data.index(start_vertex_data)]\n    visited = [False] * self.size\n    visited[queue[0]] = True\n\nwhile queue:\n        current_vertex = queue.pop(0)\n        print(self.vertex_data[current_vertex], end=' ')\n\nfor i in range(self.size):\n            if self.adj_matrix[current_vertex][i] == 1 and not visited[i]:\n                queue.append(i)\n                visited[i] = True\nRun Example \u00bb\nLine 2-4:\nThe\nbfs()\nmethod starts by creating a queue with the start vertex inside, creating a\nvisited\narray, and setting the start vertex as visited.\nLine 6-13:\nThe BFS traversal works by taking a vertex from the queue, printing it, and adding adjacent vertices to the queue if they are not visited yet, and then continue to take vertices from the queue in this way. The traversal finishes when the last element in the queue has no unvisited adjacent vertices.\nDFS and BFS Traversal of a Directed Graph\nDepth first and breadth first traversals can actually be implemented to work on directed Graphs (instead of undirected) with just very few changes.\nRun the animation below to see how a directed Graph can be traversed using DFS or BFS.\nF\nB\nC\nA\nE\nD\nG\nResult:\nBFS\nDFS\nTraverse from D\nTo go from traversing a directed Graph instead of an undirected Graph, we just need to remove the last line in the\nadd_edge()\nmethod:\ndef add_edge(self, u, v):\n    if 0 <= u < self.size and 0 <= v < self.size:\n        self.adj_matrix[u][v] = 1\nself.adj_matrix[v][u] = 1\nWe must also take care when we build our Graph because the edges are now directed.\nThe code example below contains both BFS and DFS traversal of the directed Graph from the animation above:\nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\ndef add_edge(self, u, v):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = 1\n            #self.adj_matrix[v][u] = 1\n\ndef add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\ndef print_graph(self):\n        print(\"Adjacency Matrix:\")\n        for row in self.adj_matrix:\n            print(' '.join(map(str, row)))\n        print(\"\\nVertex Data:\")\n        for vertex, data in enumerate(self.vertex_data):\n            print(f\"Vertex {vertex}: {data}\")\n\ndef dfs_util(self, v, visited):\n        visited[v] = True\n        print(self.vertex_data[v], end=' ')\n\nfor i in range(self.size):\n            if self.adj_matrix[v][i] == 1 and not visited[i]:\n                self.dfs_util(i, visited)\n\ndef dfs(self, start_vertex_data):\n        visited = [False] * self.size\n\nstart_vertex = self.vertex_data.index(start_vertex_data)\n        self.dfs_util(start_vertex, visited)\n\ndef bfs(self, start_vertex_data):\n        queue = [self.vertex_data.index(start_vertex_data)]\n        visited = [False] * self.size\n        visited[queue[0]] = True\n\nwhile queue:\n            current_vertex = queue.pop(0)\n            print(self.vertex_data[current_vertex], end=' ')\n\nfor i in range(self.size):\n                if self.adj_matrix[current_vertex][i] == 1 and not visited[i]:\n                    queue.append(i)\n                    visited[i] = True\n\ng = Graph(7)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\ng.add_vertex_data(5, 'F')\ng.add_vertex_data(6, 'G')\n\ng.add_edge(3, 0)  # D -> A\ng.add_edge(3, 4)  # D -> E\ng.add_edge(4, 0)  # E -> A\ng.add_edge(0, 2)  # A -> C\ng.add_edge(2, 5)  # C -> F\ng.add_edge(2, 6)  # C -> G\ng.add_edge(5, 1)  # F -> B\ng.add_edge(1, 2)  # B -> C\n\ng.print_graph()\n\nprint(\"\\nDepth First Search starting from vertex D:\")\ng.dfs('D')\n\nprint(\"\\n\\nBreadth First Search starting from vertex D:\")\ng.bfs('D')\nRun Example \u00bb\nNow that we have looked at two basic algorithms for how to traverse Graphs, we will use the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Implement a Function",
      "description": "Create a function that demonstrates the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Write your python function here\n",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b40c33ac-a612-4a0e-8a5b-acafc3f8c571",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "13a9b10a-e743-4a49-8eb8-6ff6bb0baab5",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "6d6c65b1-86df-4e87-8d67-5910c048f784",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nGraphs Traversal\n\nGraphs Traversal\nTo traverse a Graph?",
      "options": [
        "None of the above.",
        "important for understanding how algorithms that run on Graphs work",
        "None of the above.",
        "to start in one vertex"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of DSA\nGraphs Traversal\n\nGraphs Traversal\nTo traverse a Graph is 'to start in one vertex'."
    },
    {
      "question": "What is DFS Traverse from D\nUnderstanding how a Graph can be traversed?",
      "options": [
        "None of the above.",
        "to start in one vertex",
        "important for understanding how algorithms that run on Graphs work",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of DFS Traverse from D\nUnderstanding how a Graph can be traversed is 'important for understanding how algorithms that run on Graphs work'."
    }
  ],
  "summary": "This tutorial covers DSAGraphs Traversal concepts and techniques. You'll learn how to use DSAGraphs Traversal effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAGraphs Traversal and how to apply it in your projects."
}