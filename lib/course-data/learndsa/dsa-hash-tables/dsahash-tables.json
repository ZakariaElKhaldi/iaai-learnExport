{
  "id": "ce8a686e-0784-429c-8acb-fce32108bb34",
  "title": "DSAHash Tables",
  "slug": "dsahash-tables",
  "metadata": {
    "description": "Learn about DSAHash Tables with clear explanations and practical examples.",
    "keywords": [
      "hash",
      "none",
      "name",
      "element",
      "bucket",
      "array",
      "function",
      "code",
      "value",
      "index"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 8,
    "category": "LearnDSA",
    "subcategory": "DSA Hash Tables"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nHash Tables",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Hash Table\nA Hash Table is a data structure designed to be fast to work with.\nThe reason Hash Tables are sometimes preferred instead of arrays or linked lists is because searching for, adding, and deleting data can be done really quickly, even for large amounts of data.\nIn a\nLinked List\n, finding a person \"Bob\" takes time because we would have to go from one node to the \nAnd finding \"Bob\" in an\nArray\ncould be fast if we knew the index, but when we only know the name \"Bob\", we need to compare each element (like with Linked Lists), and that takes time.\nWith a Hash Table however, finding \"Bob\" is done really fast because there is a way to go directly to where \"Bob\" is stored, using something called a hash function.\nBuilding A Hash Table from Scratch\nTo get the idea of what a Hash Table is, let's try to build one from scratch, to store unique first names inside it.\nWe will build the Hash Set in 5 steps:\nStarting with an array.\nStoring names using a hash function.\nLooking up an element using a hash function.\nHandling collisions.\nThe basic Hash Set code example and simulation.\nStep 1: Starting with an array\nUsing an array, we could store names like this:\nmy_array = ['Pete', 'Jones', 'Lisa', 'Bob', 'Siri']\nTo find \"Bob\" in this array, we need to compare each name, element by element, until we find \"Bob\".\nIf the array was sorted alphabetically, we could use Binary Search to find a name quickly, but inserting or deleting names in the array would mean a big operation of shifting elements in memory.\nTo make interacting with the list of names really fast, let's use a Hash Table for this instead, or a Hash Set, which is a simplified version of a Hash Table.\nTo keep it simple, let's assume there is at most 10 names in the list, so the array must be a fixed size of 10 elements. When talking about Hash Tables, each of these elements is called a\nbucket\n.\nmy_hash_set = [None,None,None,None,None,None,None,None,None,None]\nStep 2: Storing names using a hash function\nNow comes the special way we interact with the Hash Set we are making.\nWe want to store a name directly into its right place in the array, and this is where the\nhash function\ncomes in.\nA hash function can be made in many ways, it is up to the creator of the Hash Table. A common way is to find a way to convert the value into a number that equals one of the Hash Set's index numbers, in this case a number from 0 to 9. In our example we will use the Unicode number of each character, summarize them and do a modulo 10 operation to get index numbers 0-9.\nExample\ndef hash_function(value):\n    sum_of_chars = 0\n    for char in value:\n        sum_of_chars += ord(char)\n\nreturn sum_of_chars % 10\n\nprint(\"'Bob' has hash code:\",hash_function('Bob'))\nRun Example \u00bb\nThe character \"B\" has Unicode code point 66, \"o\" has 111, and \"b\" has 98. Adding those together we get 275. Modulo 10 of 275 is 5, so \"Bob\" should be stored as an array element at index 5.\nThe number returned by the hash function is called the\nhash code\n.\nUnicode number:\nEverything in our computers are stored as numbers, and the Unicode code point is a unique number that exist for every character. For example, the character\nA\nhas Unicode number (also called Unicode code point)\n65\n. Just try it in the simulation below. See\nthis page\nfor more information about how characters are represented as numbers.\nModulo:\nA mathematical operation, written as\n%\nin most programming languages (or \\(mod\\) in mathematics). A modulo operation divides a number with another number, and gives us the resulting remainder. So for example,\n7 % 3\nwill give us the remainder\n1\n. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)\nAfter storing \"Bob\" where the hash code tells us (index 5), our array now looks like this:\nmy_hash_set = [None,None,None,None,None,'Bob',None,None,None,None]\nWe can use the hash function to find out where to store the other names \"Pete\", \"Jones\", \"Lisa\", and \"Siri\" as well.\nAfter using the hash function to store those names in the correct position, our array looks like this:\nmy_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None]\nStep 3: Looking up a name using a hash function\nWe have now established a super basic Hash Set, because we do not have to check the array element by element anymore to find out if \"Pete\" is in there, we can just use the hash function to go straight to the right element!\nTo find out if \"Pete\" is stored in the array, we give the name \"Pete\" to our hash function, we get back hash code 8, we go directly to the element at index 8, and there he is. We found \"Pete\" without checking any other elements.\nExample\nmy_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None]\n\ndef hash_function(value):\n    sum_of_chars = 0\n    for char in value:\n        sum_of_chars += ord(char)\n\nreturn sum_of_chars % 10\n\ndef contains(name):\n    index = hash_function(name)\n    return my_hash_set[index] == name\n\nprint(\"'Pete' is in the Hash Set:\",contains('Pete'))\nRun Example \u00bb\nWhen deleting a name from our Hash Set, we can also use the hash function to go straight to where the name is, and set that element value to\nNone\n.\nStep 4: Handling collisions\nLet's also add \"Stuart\" to our Hash Set.\nWe give \"Stuart\" to our hash function, and we get the hash code 3, meaning \"Stuart\" should be stored at index 3.\nTrying to store \"Stuart\" creates what is called a\ncollision\n, because \"Lisa\" is already stored at index 3.\nTo fix the collision, we can make room for more elements in the same bucket, and solving the collision problem in this way is called chaining. We can give room for more elements in the same bucket by implementing each bucket as a linked list, or as an array.\nAfter implementing each bucket as an array, to give room for potentially more than one name in each bucket, \"Stuart\" can also be stored at index 3, and our Hash Set now looks like this:\nmy_hash_set = [\n    [None],\n    ['Jones'],\n    [None],\n    ['Lisa', 'Stuart'],\n    [None],\n    ['Bob'],\n    [None],\n    ['Siri'],\n    ['Pete'],\n    [None]\n]\nSearching for \"Stuart\" in our Hash Set now means that using the hash function we end up directly in bucket 3, but then be must first check \"Lisa\" in that bucket, before we find \"Stuart\" as the second element in bucket 3.\nStep 5: Hash Set code example and simulation\nTo complete our very basic Hash Set code, let's have functions for adding and searching for names in the Hash Set, which is now a two dimensional array.\nRun the code example below, and try it with different values to get a better understanding of how a Hash Set works.\nExample\nmy_hash_set = [\n    [None],\n    ['Jones'],\n    [None],\n    ['Lisa'],\n    [None],\n    ['Bob'],\n    [None],\n    ['Siri'],\n    ['Pete'],\n    [None]\n]\n\ndef hash_function(value):\n    return sum(ord(char) for char in value) % 10\n\ndef add(value):\n    index = hash_function(value)\n    bucket = my_hash_set[index]\n    if value not in bucket:\n        bucket.append(value)\n\ndef contains(value):\n    index = hash_function(value)\n    bucket = my_hash_set[index]\n    return value in bucket\n\nadd('Stuart')\n\nprint(my_hash_set)\nprint('Contains Stuart:',contains('Stuart'))\nRun Example \u00bb\nThe \nTry the Hash Set simulation below to get a better ide of how a Hash Set works in principle.\nHash Set\n0\n:\n{{ el.name }}\n1\n:\n{{ el.name }}\n2\n:\n{{ el.name }}\n3\n:\n{{ el.name }}\n4\n:\n{{ el.name }}\n5\n:\n{{ el.name }}\n6\n:\n{{ el.name }}\n7\n:\n{{ el.name }}\n8\n:\n{{ el.name }}\n9\n:\n{{ el.name }}\nHash Code\n{{ sumOfAscii }} % 10 =\n{{ currHashCode }}\n{{ resultText }}\n0\ncontains()\nadd()\nremove()\nsize()\nUses of Hash Tables\nHash Tables are great for:\nChecking if something is in a collection (like finding a book in a library).\nStoring unique items and quickly finding them (like storing phone numbers).\nConnecting values to keys (like linking names to phone numbers).\nThe most important reason why Hash Tables are great for these things is that Hash Tables are very fast compared Arrays and Linked Lists, especially for large sets. Arrays and Linked Lists have time complexity \\(O(n)\\) for search and delete, while Hash Tables have just \\(O(1)\\) on average! Read more about time complexity\nhere\n.\nHash Set vs. Hash Map\nA Hash Table can be a Hash Set or a Hash Map. The \nHere's how Hash Sets and Hash Maps are different and similar:\nHash Set\nHash Map\nUniqueness and storage\nEvery element is a unique key.\nEvery entry is a key-value-pair, with a key that is unique, and a value connected it.\nUse case\nChecking if an element is in the set, like checking if a name is on a guest list.\nFinding information based on a key, like looking up who owns a certain telephone number.\nIs it fast to search, add and delete elements?\nYes, average \\(O(1)\\).\nYes, average \\(O(1)\\).\nIs there a hash function that takes the key, generates a hash code, and that is the bucket where the element is stored?\nYes\nYes\nHash Tables Summarized\nHash Table elements are stored in storage containers called\nbuckets\n.\nEvery Hash Table element has a part that is unique that is called the\nkey\n.\nA\nhash function\ntakes the key of an element to generate a\nhash code\n.\nThe hash code says what bucket the element belongs to, so now we can go directly to that Hash Table element: to modify it, or to delete it, or just to check if it exists. Specific hash functions are explained in detail on the \nA\ncollision\nhappens when two Hash Table elements have the same hash code, because that means they belong to the same\nbucket\n. A collision can be solved in two ways.\nChaining\nis the way collisions are solved in this tutorial, by using arrays or linked lists to allow more than one element in the same bucket.\nOpen Addressing\nis another way to solve collisions. With open addressing, if we want to store an element but there is already an element in that bucket, the element is stored in the \nConclusion\nHash Tables are powerful tools in programming, helping you to manage and access data efficiently.\nWhether you use a Hash Set or a Hash Map depends on what you need: just to know if something is there, or to find detailed information about it.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "1eee2c60-9707-4edc-a103-50caea5b21fb",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "d082ddad-1434-4818-9842-5fbd14086c28",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "237f86a9-b116-417e-bf90-e6269b27be48",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nHash Tables\n\nHash Table\nA Hash Table?",
      "options": [
        "because searching for",
        "a data structure designed to be fast to work with",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of DSA\nHash Tables\n\nHash Table\nA Hash Table is 'a data structure designed to be fast to work with'."
    },
    {
      "question": "What is The reason Hash Tables are sometimes preferred instead of arrays or linked lists?",
      "options": [
        "because searching for",
        "a data structure designed to be fast to work with",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The reason Hash Tables are sometimes preferred instead of arrays or linked lists is 'because searching for'."
    }
  ],
  "summary": "This tutorial covers DSAHash Tables concepts and techniques. You'll learn how to use DSAHash Tables effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSAHash Tables and how to apply it in your projects."
}