{
  "id": "66885b39-b526-4453-99c8-25a92cc0bc79",
  "title": "DSALinked Lists Operations",
  "slug": "dsalinked-lists-operations",
  "metadata": {
    "description": "Learn about DSALinked Lists Operations with clear explanations and practical examples.",
    "keywords": [
      "node",
      "linked",
      "list",
      "currentnode",
      "head",
      "data",
      "value",
      "lists",
      "print",
      "lowest"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Typescript Basics"
    ],
    "estimated_time": 7,
    "category": "LearnDSA",
    "subcategory": "Linked Lists Operations"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nLinked Lists Operations\n\nLinked List Operations\nBasic things we can do with linked lists are",
      "content": ":\nTraversal\nRemove a node\nInsert a node\nSort\nFor simplicity, singly linked lists will be used to explain these operations below.\nTraversal of a Linked List\nTraversing a linked list means to go through the linked list by following the links from one node to the \nTraversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.\nTo traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's \nHead\n7\n\n11\n\n3\n\n2\n\n9\n\nnull\nTraverse\nThe code below prints out the node values as it traverses along the linked list, in the same way as the animation above.\nExample\nTraversal of a singly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.\n    print(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.\nnode2.\nnode3.\nnode4.\n\ntraverseAndPrint(node1)\nRun Example \u00bb\nFind The Lowest Value in a Linked List\nLet's find the lowest value in a singly linked list by traversing it and checking each value.\nFinding the lowest value in a linked list is very similar to how we\nfound the lowest value in an array\n, except that we need to follow the \nThis is how finding the lowest value in a linked list works in principle:\nHead\n7\n\n11\n\n3\n\n2\n\n9\n\nnull\nLowest value:\nFind Lowest\nTo find the lowest value we need to traverse the list like in the \nIn the code below, the algorithm to find the lowest value is moved into a function called\nfindLowestValue\n.\nExample\nFinding the lowest value in a singly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\ndef findLowestValue(head):\n    minValue = head.data\n    currentNode = head.\n    while currentNode:\n        if currentNode.data < minValue:\n            minValue = currentNode.data\n        currentNode = currentNode.\n    return minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.\nnode2.\nnode3.\nnode4.\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1))\nThe marked lines above is the core of the algorithm. The initial lowest value is set to be the value of the first node. Then, if a lower value is found, the lowest value variable is udated.\nRun Example \u00bb\nDelete a Node in a Linked List\nIn this case we have the link (or pointer or address) to a node that we want to delete.\nIt is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.\nSo before deleting the node, we need to get the \nIn a singly linked list, like we have here, to get the \nThe simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.\nHead\n7\n\n11\n\n3\n\n2\n\n9\n\nnull\nDelete\nAlso, it is a good idea to first connect \nIn the code below, the algorithm to delete a node is moved into a function called\ndeleteSpecificNode\n.\nExample\nDeleting a specific node in a singly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.\n    print(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\n\n    if head == nodeToDelete:\n        return head.\n\n    currentNode = head\n    while currentNode.\n        currentNode = currentNode.\n\n    if currentNode.\n        return head\n\n    currentNode.\n\n    return head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.\nnode2.\nnode3.\nnode4.\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 2",
      "content": "# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1)\nRun Example \u00bb\nIn the\ndeleteSpecificNode\nfunction above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the \nInsert a Node in a Linked List\nInserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the \nTo insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the \nThe simulation below shows how the links are adjusted when inserting a new node.\nHead\n7\n\n97\n\n3\n\n2\n\n9\n\nnull\nInsert\nNew node is created\nNode 1 is linked to new node\nNew node is linked to \nExample\nInserting a node in a singly linked list in Python:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.\n\ndef traverseAndPrint(head):\n    currentNode = head\n    while currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.\n    print(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\n    if position == 1:\n        newNode.\n        return newNode\n    \n    currentNode = head\n    for _ in range(position - 2):\n        if currentNode is None:\n            break\n        currentNode = currentNode.\n\n    newNode.\n    currentNode.\n    return head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.\nnode2.\nnode3.\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 3",
      "content": "# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1)\nRun Example \u00bb\nIn the\ninsertNodeAtPosition\nfunction above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.\nOther Linked Lists Operations\nWe have only covered three basic linked list operations above: traversal (or search), node deletion, and node insertion.\nThere are a lot of other operations that could be done with linked lists, like sorting for example.\n\nNote:\nWe cannot sort linked lists with sorting algorithms like Counting Sort, Radix Sort or Quicksort because they use indexes to modify array elements directly based on their position.\nLinked Lists vs Arrays\nThese are some key linked list properties, compared to arrays:\nLinked lists are not allocated to a fixed size in memory like arrays are, so linked lists do not require to move the whole list into a larger memory space when the fixed memory space fills up, like arrays must.\nLinked list nodes are not laid out one right after the other in memory (contiguously), so linked list nodes do not have to be shifted up or down in memory when nodes are inserted or deleted.\nLinked list nodes require more memory to store one or more links to other nodes. Array elements do not require that much memory, because array elements do not contain links to other elements.\nLinked list operations are usually harder to program and require more lines than similar array operations, because programming languages have better built in support for arrays.\nWe must traverse a linked list to find a node at a specific position, but with arrays we can access an element directly by writing\nmyArray[5]\n.\nNote:\nWhen using arrays in programming languages like Java or Python, even though we do not need to write code to handle when an array fills up its memory space, and we do not have to shift elements up or down in memory when an element is removed or inserted, these things still happen in the background and can cause problems in time critical applications.\nTime Complexity of Linked Lists Operations\nHere we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed \nRemember that time complexity just says something about the approximate number of operations needed by the algorithm based on a large set of data \\(n\\), and does not tell us the exact time a specific implementation of an algorithm takes.\nThis means that even though linear search is said to have the same time complexity for arrays as for linked list: \\(O(n)\\), it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.\nLinear search\nfor linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is \\(O(n)\\).\nBinary search\nis not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.\nSorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nComplete the code for the Linked List traversal function.\ndef traverseAndPrint(head):\n    currentNode =\nwhile currentNode:\n        print(currentNode.data, end=\" -> \")\n        currentNode = currentNode.\nprint(\"null\")\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "c08506c5-8a04-496d-9b79-e1b6c2ac746a",
      "title": "Typescript Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "3ae7cc42-10df-45a4-b364-1bbc309fff5d",
      "title": "Typescript Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "2450396f-c194-4b38-a78b-09dc997d7377",
      "title": "Typescript Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Traversal of a Linked List\nTraversing a linked list means to go through the linked list by following the links from one node to the \nTraversal of linked lists?",
      "options": [
        "None of the above.",
        "None of the above.",
        "typically done to search for a specific node",
        "Not a Traversal of a Linked List\nTraversing a linked list means to go through the linked list by following the links from one node to the \nTraversal of linked lists."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of Traversal of a Linked List\nTraversing a linked list means to go through the linked list by following the links from one node to the \nTraversal of linked lists is 'typically done to search for a specific node'."
    },
    {
      "question": "Which best describes the main purpose of this python feature?",
      "options": [
        "To organize and structure code",
        "To improve code readability",
        "To enhance performance",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "This feature serves multiple purposes in software development."
    }
  ],
  "summary": "This tutorial covers DSALinked Lists Operations concepts and techniques. You'll learn how to use DSALinked Lists Operations effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSALinked Lists Operations and how to apply it in your projects."
}