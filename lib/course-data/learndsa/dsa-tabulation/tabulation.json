{
  "id": "45da8d4a-ff6c-4fdc-bf32-7e7d90d41421",
  "title": "Tabulation",
  "slug": "tabulation",
  "metadata": {
    "description": "Learn about Tabulation with clear explanations and practical examples.",
    "keywords": [
      "tabulation",
      "fibonacci",
      "number",
      "problem",
      "find",
      "approach",
      "programming",
      "solve",
      "bottom",
      "dynamic"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Tabulation"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "Tabulation",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Tabulation\nTabulation is a technique used to solve problems.\nTabulation uses a table where the results to the most basic subproblems are stored first. The table then gets filled with more and more subproblem results until we find the result to the complete problem that we are looking for.\nThe tabulation technique is said to solve problems \"bottom-up\" because of how it solves the most basic subproblems first.\nTabulation is a technique used in\nDynamic Programming\n, which means that to use tabulation, the problem we are trying to solve must consist of overlapping subproblems.\nUsing Tabulation To Find The \\(n\\)th Fibonacci Number\nThe Fibonacci numbers\nare great for demonstrating different programming techniques, also when demonstrating how tabulation works.\nTabulation uses a table that is filled with the lowest Fibonacci numbers \\(F(0)=0\\) and \\(F(1)=1\\) first (bottom-up). The \nThe \n\\[\nF(n)=F(n-1)+F(n-2)\n\\]\nIn this way, the table continues to get filled with \nExample\nFinding the 10th Fibonacci number using tabulation:\ndef fibonacci_tabulation(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n\nF = [0] * (n + 1)\n    F[0] = 0 \n    F[1] = 1\n\nfor i in range(2, n + 1):\n        F[i] = F[i - 1] + F[i - 2]\n\nprint(F)\n    return F[n]\n\nn = 10\nresult = fibonacci_tabulation(n)\nprint(f\"\\nThe {n}th Fibonacci number is {result}\")\nRun Example \u00bb\nOther ways to find the \\(n\\)th Fibonacci number include\nrecursion\n, or the improved version of it using\nmemoization\n.\nTabulation Is A Bottom Up Approach\nSee the drawings below to get a better idea of why tabulation is called a \"bottom up\" approach.\nAs a reference to compare with, see the drawing of the\n\"top-down\" recursion approach\nto finding the \\(n\\)th Fibonacci number.\nF(10)\nF(9)\n.\n.\n.\n.\nF(2)\nF(1)\nF(0)\nThe bottom up tabulation approach to finding the 10th Fibonacci number.\nF(10)\nF(9)\nF(8)\nF(7)\nF(8)\nF(7)\nF(6)\nThe top down recursive approach to finding the 10th Fibonacci number.\nThe tabulation approach starts building the table bottom up to find the 10th Fibonacci number, starting with \\(F(0)\\) and \\(F(1)\\).\nThe recursive approach start by trying to find \\(F(10)\\), but to find that it must call \\(F(9)\\) and \\(F(8)\\), and so it goes all the way down to \\(F(0)\\) and \\(F(1)\\) before the function calls start returning values that can be put together to the final answer.\nOther Problems That Are Solved with Tabulation\nJust like finding the \\(n\\)th Fibonacci number, tabulation can also be used to find the solution to other problems:\nThe 0/1 Knapsack Problem\nis about having a set of items we can pack in a knapsack (a simple backpack), each item with a different value. To solve the problem we need to find the items that will maximize the total value of items we pack, but we cannot bring all the items we want because the knapsack has a weight limit.\nThe Shortest Path Problem\ncan be solved using\nthe Bellman-Ford algorithm\n, which also uses tabulation to find the shortest paths in a graph. More specifically, the tabulation approach of the Bellman-Ford algorithm is in how the values in the \"distances\" array gets updated.\nThe Traveling Salesman Problem\ncan be solved precisely using the Held-Karp algorithm, which also uses tabulation. This algorithm is not described in this tutorial as it is although better than brute force \\(O(n!)\\), still not very effective \\(O(2^n n^2)\\), and quite advanced.\nTabulation in Dynamic Programming\nAs mentioned in the top, tabulation (just like memoization) is a technique used in something called\nDynamic Programming\n.\nDynamic Programming is a way of designing algorithms to solve problems.\nFor Dynamic Programming to work, the problem we want to solve must have these two properties:\nThe problem must be built up by smaller,\noverlapping subproblems\n. For example, the solution to Fibonacci number \\(F(3)\\) overlaps with the solutions to Fibonacci numbers \\(F(2)\\) and \\(F(1)\\), because we get \\(F(3)\\) by combining \\(F(2)\\) and \\(F(1)\\).\nThe problem must also have an\noptimal substructure\n, meaning that the solution to the problem can be constructed from the solutions to its subproblems. When finding the \\(n\\)th Fibonacci number, \\(F(n)\\) can be found by adding \\(F(n-1)\\) and \\(F(n-2)\\). So knowing the two \nRead more about Dynamic Programming on the\n\n.\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "80345b71-5819-4a75-bf32-d1581a815fc7",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "ea3d498e-c31a-4054-8497-ece914f706b7",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "cb0612df-3b9b-45b8-a7fc-2981c1e4f1ac",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Tabulation\n\nTabulation\nTabulation?",
      "options": [
        "a technique used to solve problems",
        "stored first",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Tabulation\n\nTabulation\nTabulation is 'a technique used to solve problems'."
    },
    {
      "question": "What is Tabulation uses a table where the results to the most basic subproblems?",
      "options": [
        "None of the above.",
        "a technique used to solve problems",
        "None of the above.",
        "stored first"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Tabulation uses a table where the results to the most basic subproblems is 'stored first'."
    }
  ],
  "summary": "This tutorial covers Tabulation concepts and techniques. You'll learn how to use Tabulation effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of Tabulation and how to apply it in your projects."
}