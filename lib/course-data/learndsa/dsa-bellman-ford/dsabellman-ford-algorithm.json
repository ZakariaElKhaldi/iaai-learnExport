{
  "id": "9bcaef26-9364-40c1-80cf-135ccd8e4fbb",
  "title": "DSABellman-Ford Algorithm",
  "slug": "dsabellman-ford-algorithm",
  "metadata": {
    "description": "Learn about DSABellman-Ford Algorithm with clear explanations and practical examples.",
    "keywords": [
      "self",
      "distances",
      "size",
      "algorithm",
      "bellman",
      "ford",
      "negative",
      "edges",
      "weight",
      "vertex"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Go Basics"
    ],
    "estimated_time": 15,
    "category": "LearnDSA",
    "subcategory": "DSA Bellman-Ford"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "DSA\nBellman",
      "content": "-Ford Algorithm\n\nThe Bellman-Ford Algorithm\nThe Bellman-Ford algorithm is best suited to find the shortest paths in a directed graph, with one or more negative edge weights, from the source vertex to all other vertices.\nIt does so by repeatedly checking all the edges in the graph for shorter paths, as many times as there are vertices in the graph (minus 1).\n4\n-3\n3\n3",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "C\ninf",
      "content": "-4\n2\n4\n7\n5\nA\ninf\nE\ninf\nD\n0\n4\n7\n3\n2\n3\n3\n3\n-4\n5\n1\n-3\nPlay\nReset\nThe Bellman-Ford algorithm can also be used for graphs with positive edges (both directed and undirected), like we can with Dijkstra's algorithm, but Dijkstra's algorithm is preferred in such cases because it is faster.\nUsing the Bellman-Ford algorithm on a graph with negative cycles will not produce a result of shortest paths because in a negative cycle we can always go one more round and get a shorter path.\nA negative cycle is a path we can follow in circles, where the sum of the edge weights is negative.\nLuckily, the Bellman-Ford algorithm can be implemented to safely detect and report the presence of negative cycles.\nHow it works:\nSet initial distance to zero for the source vertex, and set initial distances to infinity for all other vertices.\nFor each edge, check if a shorter distance can be calculated, and update the distance if the calculated distance is shorter.\nCheck all edges (step 2) \\(V-1\\) times. This is as many times as there are vertices (\\(V\\)), minus one.\nOptional: Check for negative cycles. This will be explained in better detail later.\nThe animation of the Bellman-Ford algorithm above only shows us when checking of an edge leads to an updated distance, not all the other edge checks that do not lead to updated distances.\nManual Run Through\nThe Bellman-Ford algorithm is actually quite straight forward, because it checks all edges, using the adjacency matrix. Each check is to see if a shorter distance can be made by going from the vertex on one side of the edge, via the edge, to the vertex on the other side of the edge.\nAnd this check of all edges is done \\(V - 1\\) times, with \\(V\\) being the number of vertices in the graph.\nThis is how the Bellman-Ford algorithm checks all the edges in the adjacency matrix in our graph 5-1=4 times:\n4\n-3\n3\n3",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "B\nC",
      "content": "-4\n2\n4\n7\n5\nA\nE\nD\n4\n-3\n3\n3\n-4\n2\n4\n7\n5\nA\nB\nC\nD\nE\nA\nB\nC\nD\nE\n4\n5\n-4\n-3\n4\n7\n3\n2\n3\nChecked all edges\n0\ntimes.\nPlay\nReset\nThe first four edges that are checked in our graph are A->C, A->E, B->C, and C->A. These first four edge checks do not lead to any updates of the shortest distances because the starting vertex of all these edges has an infinite distance.\n4\n-3\n3\n3",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "C\ninf",
      "content": "-4\n2\n4\n7\n5\nA\ninf\nE\ninf\nD\n0\nAfter the edges from vertices A, B, and C are checked, the edges from D are checked. Since the starting point (vertex D) has distance 0, the updated distances for A, B, and C are the edge weights going out from vertex D.\n4\n-3\n3\n3\nB\ninf\nC\n7\n-4\n2\n4\n7\n5\nA\n4\nE\n3\nD\n0\nThe \n4\n-3\n3\n3\nB\n5\nC\n6\n-4\n2\n4\n7\n5\nA\n4\nE\n3\nD\n0\nThe Bellman-Ford algorithm have now checked all edges 1 time. The algorithm will check all edges 3 more times before it is finished, because Bellman-Ford will check all edges as many times as there are vertices in the graph, minus 1.\nThe algorithm starts checking all edges a second time, starting with checking the edges going out from vertex A. Checking the edges A->C and A->E do not lead to updated distances.\n4\n-3\n3\n3\nB\n5\nC\n6\n-4\n2\n4\n7\n5\nA\n4\nE\n3\nD\n0\nThe \n4\n-3\n3\n3\nB\n5\nC\n1\n-4\n2\n4\n7\n5\nA\n4\nE\n3\nD\n0\nChecking the \n4\n-3\n3\n3\nB\n5\nC\n1\n-4\n2\n4\n7\n5\nA\n-2\nE\n3\nD\n0\nThe check of edge C->A in round 2 of the Bellman-Ford algorithm is actually the last check that leads to an updated distance for this specific graph. The algorithm will continue to check all edges 2 more times without updating any distances.\nChecking all edges \\(V-1\\) times in the Bellman-Ford algorithm may seem like a lot, but it is done this many times to make sure that the shortest distances will always be found.\nImplementation of The Bellman-Ford Algorithm\nImplementing the Bellman-Ford algorithm is very similar to\nhow we implemented Dijkstra's algorithm\n.\nWe start by creating the\nGraph\nclass, where the methods\n__init__\n,\nadd_edge\n, and\nadd_vertex\nwill be used to create the specific graph we want to run the Bellman-Ford algorithm on to find the shortest paths.\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\nThe\nbellman_ford\nmethod is also placed inside the\nGraph\nclass. It is this method that runs the Bellman-Ford algorithm.\ndef bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        return distances\nLine 18-19:\nAt the beginning, all vertices are set to have an infinite long distance from the starting vertex, except for the starting vertex itself, where the distance is set to 0.\nLine 21:\nAll edges are checked \\(V-1\\) times.\nLine 22-23:\nA double for-loop checks all the edges in the adjacency matrix. For every vertex\nu\n, check edges going to vertices\nv\n.\nLine 24-26:\nIf the edge exist, and if the calculated distance is shorter than the existing distance, update the distance to that vertex\nv\n.\nThe complete code, including the initialization of our specific graph and code for running the Bellman-Ford algorithm, looks like this:\nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        return distances\n\ng = Graph(5)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 4\ng.add_edge(3, 2, 7)  # D -> C, weight 7\ng.add_edge(3, 4, 3)  # D -> E, weight 3\ng.add_edge(0, 2, 4)  # A -> C, weight 4\ng.add_edge(2, 0, -3) # C -> A, weight -3\ng.add_edge(0, 4, 5)  # A -> E, weight 5\ng.add_edge(4, 2, 3)  # E -> C, weight 3\ng.add_edge(1, 2, -4) # B -> C, weight -4\ng.add_edge(4, 1, 2)  # E -> B, weight 2",
      "order": 4,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 7",
      "content": "# Running the Bellman-Ford algorithm from D to all vertices\nprint(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\")\ndistances = g.bellman_ford('D')\nfor i, d in enumerate(distances):\n    print(f\"Distance from D to {g.vertex_data[i]}: {d}\")\nRun Example \u00bb\nNegative Edges in The Bellman-Ford Algorithm\nTo say that the Bellman-Ford algorithm finds the \"shortest paths\" is not intuitive, because how can we draw or imagine distances that are negative? So, to make it easier to understand we could instead say that it is the \"\ncheapest\npaths\" that are found with Bellman-Ford.\nIn practice, the Bellman-Ford algorithm could for example help us to find delivering routes where the edge weights represent the cost of fuel and other things, minus the money to be made by driving that edge between those two vertices.\n4\n-3\n3\n3\nB\n5\nC\n1\n-4\n2\n4\n7\n5\nA\n-2\nE\n3\nD\n0\nWith this interpretation in mind, the -3 weight on edge C->A could mean that the fuel cost is $5 driving from C to A, and that we get paid $8 for picking up packages in C and delivering them in A. So we end up earning $3 more than we spend. Therefore, a total of $2 can be made by driving the delivery route D->E->B->C->A in our graph above.\nNegative Cycles in The Bellman-Ford Algorithm\nIf we can go in circles in a graph, and the sum of edges in that circle is negative, we have a negative cycle.\n4\n-9\n3\n3",
      "order": 5,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "B\nC",
      "content": "-4\n2\n4\n7\n5\nA\nE\nD\nBy changing the weight on edge C->A from -3 to -9, we get two negative cycles: A->C->A and A->E->C->A. And every time we check these edges with the Bellman-Ford algorithm, the distances we calculate and update just become lower and lower.\nThe problem with negative cycles is that a shortest path does not exist, because we can always go one more round to get a path that is shorter.\nThat is why it is useful to implement the Bellman-Ford algorithm with detection for negative cycles.\nDetection of Negative Cycles in the Bellman-Ford Algorithm\nAfter running the Bellman-Ford algorithm, checking all edges in a graph \\(V-1\\) times, all the shortest distances are found.\nBut, if the graph contains negative cycles, and we go one more round checking all edges, we will find at least one shorter distance in this last round, right?\nSo to detect negative cycles in the Bellman-Ford algorithm, after checking all edges \\(V-1\\) times, we just need to check all edges one more time, and if we find a shorter distance this last time, we can conclude that a negative cycle must exist.\nBelow is the\nbellman_ford\nmethod, with negative cycle detection included, running on the graph above with negative cycles due to the C->A edge weight of -9:\nExample\nPython:\ndef bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        # Negative cycle detection\n        for u in range(self.size):\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0:\n                    if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                        return (True, None)  # Indicate a negative cycle was found\n\n        return (False, distances)  # Indicate no negative cycle and return distances\nRun Example \u00bb\nLine 30-33:\nAll edges are checked one more time to see if there are negative cycles.\nLine 34:\nReturning\nTrue\nindicates that a negative cycle exists, and\nNone\nis returned instead of the shortest distances, because finding the shortest distances in a graph with negative cycles does not make sense (because a shorter distance can always be found by checking all edges one more time).\nLine 36:\nReturning\nFalse\nmeans that there is no negative cycles, and the\ndistances\ncan be returned.\nReturning The Paths from The Bellman-Ford Algorithm\nWe are currently finding the total weight of the the shortest paths, so that for example \"Distance from D to A: -2\" is a result from running the Bellman-Ford algorithm.\nBut by recording the predecessor of each vertex whenever an edge is relaxed, we can use that later in our code to print the result including the actual shortest paths. This means we can give more information in our result, with the actual path in addition to the path weight: \"D->E->B->C->A, Distance: -2\".\nThis last code example is the complete code for the Bellman-Ford algorithm, with everything we have discussed up until now: finding the weights of shortest paths, detecting negative cycles, and finding the actual shortest paths:\nExample\nPython:\nclass Graph:\n    def __init__(self, size):\n        self.adj_matrix = [[0] * size for _ in range(size)]\n        self.size = size\n        self.vertex_data = [''] * size\n\n    def add_edge(self, u, v, weight):\n        if 0 <= u < self.size and 0 <= v < self.size:\n            self.adj_matrix[u][v] = weight\n            #self.adj_matrix[v][u] = weight  # For undirected graph\n\n    def add_vertex_data(self, vertex, data):\n        if 0 <= vertex < self.size:\n            self.vertex_data[vertex] = data\n\n    def bellman_ford(self, start_vertex_data):\n        start_vertex = self.vertex_data.index(start_vertex_data)\n        distances = [float('inf')] * self.size\n        predecessors = [None] * self.size\n        distances[start_vertex] = 0\n\n        for i in range(self.size - 1):\n            for u in range(self.size):\n                for v in range(self.size):\n                    if self.adj_matrix[u][v] != 0:\n                        if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                            distances[v] = distances[u] + self.adj_matrix[u][v]\n                            predecessors[v] = u\n                            print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\")\n\n        # Negative cycle detection\n        for u in range(self.size):\n            for v in range(self.size):\n                if self.adj_matrix[u][v] != 0:\n                    if distances[u] + self.adj_matrix[u][v] < distances[v]:\n                        return (True, None, None)  # Indicate a negative cycle was found\n\n        return (False, distances, predecessors)  # Indicate no negative cycle and return distances\n    \n    def get_path(self, predecessors, start_vertex, end_vertex):\n        path = []\n        current = self.vertex_data.index(end_vertex)\n        while current is not None:\n            path.insert(0, self.vertex_data[current])\n            current = predecessors[current]\n            if current == self.vertex_data.index(start_vertex):\n                path.insert(0, start_vertex)\n                break\n        return '->'.join(path)\n\ng = Graph(5)\n\ng.add_vertex_data(0, 'A')\ng.add_vertex_data(1, 'B')\ng.add_vertex_data(2, 'C')\ng.add_vertex_data(3, 'D')\ng.add_vertex_data(4, 'E')\n\ng.add_edge(3, 0, 4)  # D -> A, weight 4\ng.add_edge(3, 2, 7)  # D -> C, weight 7\ng.add_edge(3, 4, 3)  # D -> E, weight 3\ng.add_edge(0, 2, 4)  # A -> C, weight 4\ng.add_edge(2, 0, -3) # C -> A, weight -3\ng.add_edge(0, 4, 5)  # A -> E, weight 5\ng.add_edge(4, 2, 3)  # E -> C, weight 3\ng.add_edge(1, 2, -4) # B -> C, weight -4\ng.add_edge(4, 1, 2)  # E -> B, weight 2",
      "order": 6,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Section 9",
      "content": "# Running the Bellman-Ford algorithm from D to all vertices\nprint(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\")\nnegative_cycle, distances, predecessors = g.bellman_ford('D')\nif not negative_cycle:\n    for i, d in enumerate(distances):\n        if d != float('inf'):\n            path = g.get_path(predecessors, 'D', g.vertex_data[i])\n            print(f\"{path}, Distance: {d}\")\n        else:\n            print(f\"No path from D to {g.vertex_data[i]}, Distance: Infinity\")\nelse:\n    print(\"Negative weight cycle detected. Cannot compute shortest paths.\")\nRun Example \u00bb\nLine 19:\nThe\npredecessors\narray holds each vertex' predecessor vertex in the shortest path.\nLine 28:\nThe\npredecessors\narray gets updated with the new predecessor vertex every time an edge is relaxed.\nLine 40-49:\nThe\nget_path\nmethod uses the\npredecessors\narray to generate the shortest path string for each vertex.\nTime Complexity for The Bellman-Ford Algorithm\nThe time complexity for the Bellman-Ford algorithm mostly depends on the nested loops.\nThe outer for-loop\nruns \\(V-1\\) times, or \\(V\\) times in case we also have negative cycle detection. For graphs with many vertices, checking all edges one less time than there are vertices makes little difference, so we can say that the outer loop contributes with \\(O(V)\\) to the time complexity.\nThe two inner for-loops\nchecks all edges in the graph. If we assume a worst case scenario in terms of time complexity, then we have a very dense graph where every vertex has an edge to every other vertex, so for all vertex \\(V\\) the edge to all other vertices \\(V\\) must be checked, which contributes with \\(O(V^2)\\) to the time complexity.\nSo in total, we get the time complexity for the Bellman-Ford algorithm:\n\\[ O(V^3) \\]\nHowever, in practical situations and especially for sparse graphs, meaning each vertex only has edges to a small portion of the other vertices, time complexity of the two inner for-loops checking all edges can be approximated from \\(O(V^2)\\) to \\(O(E)\\), and we get the total time complexity for Bellman-Ford:\n\\[ O(V \\cdot E) \\]\nThe time complexity for the Bellman-Ford algorithm is slower than for Dijkstra's algorithm, but Bellman-Ford can find the shortest paths in graphs with negative edges and it can detect negative cycles, which Dijkstra's algorithm cannot do.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nIn the adjacency matrix below:\nWhat is the edge weight of the edge going from D to E?\nThe D->E edge weight is\n.\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 7,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "b57ea115-cfcf-4a50-ba14-bb1f0515f0a0",
      "title": "Go Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "9b30b3a3-18cf-4c62-aa77-6a9826395a06",
      "title": "Go Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "d0f8e68d-47b1-4e90-8e16-58f215a39470",
      "title": "Go Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is Ford algorithm?",
      "options": [
        "None of the above.",
        "None of the above.",
        "vertices in the graph (minus 1)",
        "best suited to find the shortest paths in a directed graph"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of Ford algorithm is 'best suited to find the shortest paths in a directed graph'."
    },
    {
      "question": "What is as many times as there?",
      "options": [
        "None of the above.",
        "vertices in the graph (minus 1)",
        "None of the above.",
        "best suited to find the shortest paths in a directed graph"
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of as many times as there is 'vertices in the graph (minus 1)'."
    }
  ],
  "summary": "This tutorial covers DSABellman-Ford Algorithm concepts and techniques. You'll learn how to use DSABellman-Ford Algorithm effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSABellman-Ford Algorithm and how to apply it in your projects."
}