{
  "id": "d902e540-483c-401d-aacc-d341472b79b0",
  "title": "DSABubble Sort",
  "slug": "dsabubble-sort",
  "metadata": {
    "description": "Learn about DSABubble Sort with clear explanations and practical examples.",
    "keywords": [
      "array",
      "bubble",
      "sort",
      "algorithm",
      "value",
      "values",
      "time",
      "step",
      "first",
      "like"
    ],
    "difficulty": "intermediate",
    "prerequisites": [],
    "estimated_time": 5,
    "category": "LearnDSA",
    "subcategory": "DSA Bubble Sort"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "DSA\nBubble Sort",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "Bubble Sort\nBubble Sort is an algorithm that sorts an array from the lowest value to the highest value.\nSpeed:\n{{ buttonText }}\n{{ msgDone }}\nRun the simulation to see how it looks like when the Bubble Sort algorithm sorts an array of values. Each value in the array is represented by a column.\nThe word 'Bubble' comes from how this algorithm works, it makes the highest values 'bubble up'.\nHow it works:\nGo through the array, one value at a time.\nFor each value, compare the value with the \nIf the value is higher than the \nGo through the array as many times as there are values in the array.\nContinue reading to fully understand the Bubble Sort algorithm and how to implement it yourself.\nManual Run Through\nBefore we implement the Bubble Sort algorithm in a programming language, let's manually run through a short array only one time, just to get the idea.\nStep 1:\nWe start with an unsorted array.\n[7, 12, 9, 11, 3]\nStep 2:\nWe look at the two first values. Does the lowest value come first? Yes, so we don't need to swap them.\n[\n7, 12,\n9, 11, 3]\nStep 3:\nTake one step forward and look at values 12 and 9. Does the lowest value come first? No.\n[7,\n12, 9,\n11, 3]\nStep 4:\nSo we need to swap them so that 9 comes first.\n[7,\n9, 12,\n11, 3]\nStep 5:\nTaking one step forward, looking at 12 and 11.\n[7, 9,\n12, 11,\n3]\nStep 6:\nWe must swap so that 11 comes before 12.\n[7, 9,\n11, 12,\n3]\nStep 7:\nLooking at 12 and 3, do we need to swap them? Yes.\n[7, 9, 11,\n12, 3\n]\nStep 8:\nSwapping 12 and 3 so that 3 comes first.\n[7, 9, 11,\n3, 12\n]\nRun the simulation below to see the 8 steps above animated:\n{{ buttonText }}\n{{ msgDone }}\n[\n{{ x.dieNmbr }}\n]\nManual Run Through: What Happened?\nWe must understand what happened in this first run through to fully understand the algorithm, so that we can implement the algorithm in a programming language.\nCan you see what happened to the highest value 12? It has bubbled up to the end of the array, where it belongs. But the rest of the array remains unsorted.\nSo the Bubble Sort algorithm must run through the array again, and again, and again, each time the \nAnd each time the algorithm runs through the array, the remaining unsorted part of the array becomes shorter.\nThis is how a full manual run through looks like:\n{{ buttonText }}\n{{ msgDone }}\n[\n{{ x.dieNmbr }}\n]\nWe will now use what we have learned to implement the Bubble Sort algorithm in a programming language.\nBubble Sort Implementation\nTo implement the Bubble Sort algorithm in a programming language, we need:\nAn array with values to sort.\nAn inner loop that goes through the array and swaps values if the first value is higher than the \nAn outer loop that controls how many times the inner loop must run. For an array with n values, this outer loop must run n-1 times.\nThe resulting code looks like this:\nExample\nmy_array = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(my_array)\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if my_array[j] > my_array[j+1]:\n            my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n\nprint(\"Sorted array:\", my_array)\nRun Example \u00bb\nBubble Sort Improvement\nThe Bubble Sort algorithm can be improved a little bit more.\nImagine that the array is almost sorted already, with the lowest numbers at the start, like this for example:\nmy_array = [7, 3, 9, 12, 11]\nIn this case, the array will be sorted after the first run, but the Bubble Sort algorithm will continue to run, without swapping elements, and that is not necessary.\nIf the algorithm goes through the array one time without swapping any values, the array must be finished sorted, and we can stop the algorithm, like this:\nExample\nmy_array = [7, 3, 9, 12, 11]\n\nn = len(my_array)\nfor i in range(n-1):\n    swapped = False\n    for j in range(n-i-1):\n        if my_array[j] > my_array[j+1]:\n            my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n            swapped = True\n    if not swapped:\n        break\n\nprint(\"Sorted array:\", my_array)\nRun Example \u00bb\nBubble Sort Time Complexity\nFor a general explanation of what time complexity is, visit\nthis page\n.\nFor a more thorough and detailed explanation of Bubble Sort time complexity, visit\nthis page\n.\nThe Bubble Sort algorithm loops through every value in the array, comparing it to the value \nAnd after one loop, the array is looped through again and again \\(n\\) times.\nThis means there are \\(n \\cdot n\\) comparisons done in total, so the time complexity for Bubble Sort is:\n\\[ \\underline{\\underline{O(n^2)}} \\]\nThe graph describing the Bubble Sort time complexity looks like this:\nAs you can see, the run time increases really fast when the size of the array is increased.\nLuckily there are sorting algorithms that are faster than this, like\nQuicksort\n, that we will look at later.\nYou can simulate Bubble Sort below, where the red and dashed line is the theoretical time complexity \\(O(n^2)\\). You can choose a number of values \\(n\\), and run an actual Bubble Sort implementation where the operations are counted and the count is marked as a blue cross in the plot below. How does theory compare with practice?\nSet values:\n{{ this.userX }}\nRandom\nWorst Case\nBest Case\n10 Random\nOperations: {{ operations }}\n{{runBtnText}}\nClear\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nUsing Bubble Sort on this array:\n[7,14,11,8,9]\nTo sort the values from left to right in an increasing (ascending) order.\nHow does the array look like after the FIRST run through?\n[\n,\n,\n,\n,\n]\nSubmit Answer \u00bb\nStart the Exercise\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "aa831c68-1f6b-4e21-9888-3c6f38166b05",
      "title": "Unknown Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "2ea0029c-46d2-4a95-87d9-d36707e0faf9",
      "title": "Unknown Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "01ced6a8-30a8-40cb-a867-1cb4847d375c",
      "title": "Unknown Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is DSA\nBubble Sort\n\nBubble Sort\nBubble Sort?",
      "options": [
        "None of the above.",
        "None of the above.",
        "represented by a column",
        "an algorithm that sorts an array from the lowest value to the highest value"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of DSA\nBubble Sort\n\nBubble Sort\nBubble Sort is 'an algorithm that sorts an array from the lowest value to the highest value'."
    },
    {
      "question": "What is Each value in the array?",
      "options": [
        "an algorithm that sorts an array from the lowest value to the highest value",
        "represented by a column",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 1,
      "explanation": "The correct definition of Each value in the array is 'represented by a column'."
    }
  ],
  "summary": "This tutorial covers DSABubble Sort concepts and techniques. You'll learn how to use DSABubble Sort effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of DSABubble Sort and how to apply it in your projects."
}