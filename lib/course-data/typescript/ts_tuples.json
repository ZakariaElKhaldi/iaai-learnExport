{
  "title": "TypeScript Tuples",
  "url": "https://www.w3schools.com/typescript/typescript_tuples.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Tuples",
      "level": "h1"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Typed Arrays",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "array",
          "href": "https://www.w3schools.com/js/js_arrays.asp",
          "title": ""
        }
      ],
      "text": "A tuple is a typed array with a pre-defined length and types for each index.",
      "html": "<p>A <strong>tuple</strong> is a typed <a href=\"/js/js_arrays.asp\" target=\"_blank\">array</a> with a pre-defined length and types for each index.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tuples are great because they allow each element in the array to be a known type of value.",
      "html": "<p>Tuples are great because they allow each element in the array to be a known type of value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "To define a tuple, specify the type of each element in the array:",
      "html": "<p>To define a tuple, specify the type of each element in the array:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples",
        "syntaxHighlighting": [
          {
            "text": "\n        // define our tuple\n        let ourTuple: [number, boolean, string];\n        // initialize correctly\n        ourTuple = [5, false, 'Coding God was here'];\n       ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// define our tuple",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "boolean",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// initialize correctly",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "false",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'Coding God was here'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];",
      "syntax_highlighting": [
        {
          "text": "\n // define our tuple\n let ourTuple: [number, boolean, string];\n // initialize correctly\n        ourTuple = [5, false, 'Coding God was here'];\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// define our tuple",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "boolean",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// initialize correctly",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "false",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'Coding God was here'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// initialize correctly<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        ourTuple = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was here'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples",
      "syntax_highlighting_data": [
        {
          "text": "\n        // define our tuple\n        let ourTuple: [number, boolean, string];\n        // initialize correctly\n        ourTuple = [5, false, 'Coding God was here'];\n       ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// define our tuple",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "boolean",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// initialize correctly",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "false",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'Coding God was here'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As you can see we have a number, boolean and a string. But what happens if we try to set them in the wrong order:",
      "html": "<p>As you can see we have a number, boolean and a string. But what happens if we try to set them in the wrong order:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_wrong_order",
        "syntaxHighlighting": [
          {
            "text": "\n        // define our tuple\n        let ourTuple: [number, boolean, string];\n        // initialized incorrectly which throws an error\n        ourTuple = [false, 'Coding God was mistaken', 5];\n       ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// define our tuple",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "boolean",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// initialized incorrectly which throws an error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "false",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'Coding God was mistaken'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialized incorrectly which throws an error\nourTuple = [false, 'Coding God was mistaken', 5];",
      "syntax_highlighting": [
        {
          "text": "\n // define our tuple\n let ourTuple: [number, boolean, string];\n // initialized incorrectly which throws an error\n        ourTuple = [false, 'Coding God was mistaken', 5];\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// define our tuple",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "boolean",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// initialized incorrectly which throws an error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "false",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'Coding God was mistaken'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// initialized incorrectly which throws an error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        ourTuple = [<span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was mistaken'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_wrong_order",
      "syntax_highlighting_data": [
        {
          "text": "\n        // define our tuple\n        let ourTuple: [number, boolean, string];\n        // initialized incorrectly which throws an error\n        ourTuple = [false, 'Coding God was mistaken', 5];\n       ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// define our tuple",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "boolean",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// initialized incorrectly which throws an error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "false",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'Coding God was mistaken'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Even though we have a boolean , string , and number the order matters in our tuple and will throw an error.",
      "html": "<p>Even though we have a\n            <code>boolean</code>,\n            <code>string</code>,\n            and <code>number</code> the order matters in our tuple and will throw an error.\n        </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Readonly Tuple",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "A good practice is to make your tuple readonly .",
      "html": "<p>A good practice is to make your <strong>tuple</strong> <code>readonly</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Tuples only have strongly defined types for the initial values:",
      "html": "<p>Tuples only have strongly defined types for the initial values:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_newvalue",
        "syntaxHighlighting": [
          {
            "text": "// define our tuple\n            let ourTuple: [number, boolean, string];\n            // initialize correctly\n            ourTuple = [5, false, 'Coding God was here'];\n            // We have no type safety in our tuple for indexes 3+\n            ourTuple.push('Something new and wrong');\n            console.log(ourTuple);\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "// define our tuple",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "boolean",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// initialize correctly",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "false",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'Coding God was here'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// We have no type safety in our tuple for indexes 3+",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "push",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'Something new and wrong'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];\n// We have no type safety in our tuple for indexes 3+\nourTuple.push('Something new and wrong');\nconsole.log(ourTuple);",
      "syntax_highlighting": [
        {
          "text": "// define our tuple\n let ourTuple: [number, boolean, string];\n // initialize correctly\n            ourTuple = [5, false, 'Coding God was here'];\n // We have no type safety in our tuple for indexes 3+\n            ourTuple.push('Something new and wrong');\n            console.log(ourTuple);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "// define our tuple",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "boolean",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// initialize correctly",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "false",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'Coding God was here'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// We have no type safety in our tuple for indexes 3+",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "push",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'Something new and wrong'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// initialize correctly<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            ourTuple = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was here'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// We have no type safety in our tuple for indexes 3+<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            ourTuple.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Something new and wrong'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(ourTuple);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_newvalue",
      "syntax_highlighting_data": [
        {
          "text": "// define our tuple\n            let ourTuple: [number, boolean, string];\n            // initialize correctly\n            ourTuple = [5, false, 'Coding God was here'];\n            // We have no type safety in our tuple for indexes 3+\n            ourTuple.push('Something new and wrong');\n            console.log(ourTuple);\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "// define our tuple",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "boolean",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// initialize correctly",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "false",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'Coding God was here'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// We have no type safety in our tuple for indexes 3+",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "push",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'Something new and wrong'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "You see the new valueTuples only have strongly defined types for the initial values:",
      "html": "<p>You see the new valueTuples only have strongly defined types for the initial values:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_readonly",
        "syntaxHighlighting": [
          {
            "text": "// define our readonly tuple\n            const ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n            // throws error as it is readonly.\n            ourReadonlyTuple.push('Coding God took a day off');\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "// define our readonly tuple",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "boolean",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "5",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'The Real Coding God'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// throws error as it is readonly.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "push",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'Coding God took a day off'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// define our readonly tuple\nconst ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n// throws error as it is readonly.\nourReadonlyTuple.push('Coding God took a day off');",
      "syntax_highlighting": [
        {
          "text": "// define our readonly tuple\n const ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n // throws error as it is readonly.\n            ourReadonlyTuple.push('Coding God took a day off');\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "// define our readonly tuple",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "boolean",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "5",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'The Real Coding God'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// throws error as it is readonly.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "push",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'Coding God took a day off'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"commentcolor\" style=\"color:slategray\">// define our readonly tuple<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ourReadonlyTuple: readonly [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string] = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, <span class=\"jsstringcolor\" style=\"color:green\">'The Real Coding God'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// throws error as it is readonly.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            ourReadonlyTuple.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Coding God took a day off'</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_tuples_readonly",
      "syntax_highlighting_data": [
        {
          "text": "// define our readonly tuple\n            const ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n            // throws error as it is readonly.\n            ourReadonlyTuple.push('Coding God took a day off');\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "// define our readonly tuple",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "boolean",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "5",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'The Real Coding God'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// throws error as it is readonly.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "push",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'Coding God took a day off'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "TypeScript Classes",
          "href": "https://www.w3schools.com/typescript_classes.php",
          "title": ""
        }
      ],
      "text": "To learn more about access modifiers like readonly go to our section on them here: TypeScript Classes .",
      "html": "<p>To learn more about access modifiers like <code>readonly</code> go to our section on them here: <a href=\"typescript_classes.php\" target=\"_blank\">TypeScript Classes</a>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "If you have ever used React before you have worked with tuples more than likely.",
      "html": "<p>If you have ever used React before you have worked with tuples more than likely.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "useState returns a tuple of the value and a setter function.",
      "html": "<p><code>useState</code> returns a tuple of the value and a setter function.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "const [firstName, setFirstName] = useState('Dylan') is a common example.",
      "html": "<p><code>const [firstName, setFirstName] = useState('Dylan')</code> is a common example.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Because of the structure we know our first value in our list will be a certain value type in this case a string and the second value a function .",
      "html": "<p>Because of the structure we know our first value in our list will be a certain value type in this case a <code>string</code> and the second value a <code>function</code>.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Named Tuples",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Named tuples allow us to provide context for our values at each index.",
      "html": "<p><strong>Named tuples</strong> allow us to provide context for our values at each index.\n    </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n            const graph: [x: number, y: number] = [55.2, 41.3];\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "55.2",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "41.3",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const graph: [x: number, y: number] = [55.2, 41.3];",
      "syntax_highlighting": [
        {
          "text": "\n const graph: [x: number, y: number] = [55.2, 41.3];\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "55.2",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "41.3",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> graph: [x: number, y: number] = [<span class=\"jsnumbercolor\" style=\"color:#905\">55.2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">41.3</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n            const graph: [x: number, y: number] = [55.2, 41.3];\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "55.2",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "41.3",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Named tuples provide more context for what our index values represent.",
      "html": "<p><strong>Named tuples</strong> provide more context for what our index values represent.\n        </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Destructuring Tuples",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Since tuples are arrays we can also destructure them.",
      "html": "<p>Since tuples are arrays we can also destructure them.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n            const graph: [number, number] = [55.2, 41.3];\n            const [x, y] = graph;\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "55.2",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "41.3",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const graph: [number, number] = [55.2, 41.3];\nconst [x, y] = graph;",
      "syntax_highlighting": [
        {
          "text": "\n const graph: [number, number] = [55.2, 41.3];\n const [x, y] = graph;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "55.2",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "41.3",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> graph: [number, number] = [<span class=\"jsnumbercolor\" style=\"color:#905\">55.2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">41.3</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [x, y] = graph;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n            const graph: [number, number] = [55.2, 41.3];\n            const [x, y] = graph;\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "55.2",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "41.3",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "here",
          "href": "https://www.w3schools.com/react/react_es6_destructuring.asp",
          "title": ""
        }
      ],
      "text": "To review destructuring check it out here .",
      "html": "<p>To review destructuring check it out <a href=\"/react/react_es6_destructuring.asp\" target=\"blank\">here</a>.\n        </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "TypeScript Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The order of value types does not matter for Tuples:",
      "html": "<p>The order of value types does not matter for Tuples:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\"><input maxlength=\"5\" name=\"ex1\" style=\"width: 60px;\"/>\n        </pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_tuples1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_tuples1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}