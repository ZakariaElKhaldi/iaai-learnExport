{
  "title": "TypeScript Null & Undefined",
  "url": "https://www.w3schools.com/typescript/typescript_null.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Null & Undefined",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript has a powerful system to deal with null or undefined values.",
      "html": "<p>TypeScript has a powerful system to deal with <code>null</code> or <code>undefined</code> values.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "By default null and undefined handling is disabled, and can be enabled by setting strictNullChecks to true.",
      "html": "<p>By default <code>null</code> and <code>undefined</code> handling is disabled,             and can be enabled by setting <code>strictNullChecks</code> to true.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The rest of this page applies for when strictNullChecks is enabled.",
      "html": "<p>The rest of this page applies for when <code>strictNullChecks</code> is enabled.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Types",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "null and undefined are primitive types and can be used like other types, such as string .",
      "html": "<p><code>null</code> and <code>undefined</code> are primitive types and can be used like other types, such as <code>string</code>.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_optional",
        "syntaxHighlighting": [
          {
            "text": "\n            let value: string | undefined | null = null;\n            value = 'hello';\n            value = undefined;\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'hello'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let value: string | undefined | null = null;\nvalue = 'hello';\nvalue = undefined;",
      "syntax_highlighting": [
        {
          "text": "\n let value: string | undefined | null = null;\n            value = 'hello';\n            value = undefined;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'hello'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value: string | undefined | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            value = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            value = undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_optional",
      "syntax_highlighting_data": [
        {
          "text": "\n            let value: string | undefined | null = null;\n            value = 'hello';\n            value = undefined;\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'hello'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When strictNullChecks is enabled, TypeScript requires values to be set unless undefined is explicitly added to the type.",
      "html": "<p>\n            When <code>strictNullChecks</code> is enabled, TypeScript requires values to be set\n            unless <code>undefined</code> is explicitly added to the type.\n        </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Optional Chaining",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Optional Chaining is a JavaScript feature that works well with TypeScript's null handling. It allows accessing properties on an object, that may or may not exist, with a compact syntax. It can be used with the ?. operator when accessing properties.",
      "html": "<p>\n        Optional Chaining is a JavaScript feature that works well with TypeScript's null handling.\n        It allows accessing properties on an object, that may or may not exist, with a compact syntax.\n        It can be used with the <code>?.</code> operator when accessing properties.\n    </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_chaining",
        "syntaxHighlighting": [
          {
            "text": "\n            interface House {\n            \u00a0\u00a0sqft: number;\n            \u00a0\u00a0yard?: {\n            \u00a0\u00a0\u00a0\u00a0sqft: number;\n            \u00a0\u00a0};\n            }\n            function printYardSize(house: House) {\n            \u00a0\u00a0const yardSize = house.yard?.sqft;\n            \u00a0\u00a0if (yardSize === undefined) {\n            \u00a0\u00a0\u00a0\u00a0console.log('No yard');\n            \u00a0\u00a0} else {\n            \u00a0\u00a0\u00a0\u00a0console.log(`Yard is ${yardSize} sqft`);\n            \u00a0\u00a0}\n            }\n            \n            let home: House = {\n            \u00a0\u00a0sqft: 500\n            };\n            \n            printYardSize(home); // Prints 'No yard'\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "yard?",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "sqft",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'No yard'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "else",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "`Yard is ${yardSize} sqft`",
            "color": "rgb(255, 85, 0)",
            "class": "jsstringtempcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "500",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Prints 'No yard'",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\nfunction printYardSize(house: House) {\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\n\nlet home: House = {\nsqft: 500\n};\n\nprintYardSize(home); // Prints 'No yard'",
      "syntax_highlighting": [
        {
          "text": "\n interface House {\n            \u00a0\u00a0sqft: number;\n            \u00a0\u00a0yard?: {\n            \u00a0\u00a0\u00a0\u00a0sqft: number;\n            \u00a0\u00a0};\n            }\n function printYardSize(house: House) {\n            \u00a0\u00a0const yardSize = house.yard?.sqft;\n            \u00a0\u00a0if (yardSize === undefined) {\n            \u00a0\u00a0\u00a0\u00a0console.log('No yard');\n            \u00a0\u00a0} else {\n            \u00a0\u00a0\u00a0\u00a0console.log(`Yard is ${yardSize} sqft`);\n            \u00a0\u00a0}\n            }\n \n let home: House = {\n            \u00a0\u00a0sqft: 500\n            };\n \n            printYardSize(home); // Prints 'No yard'\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "yard?",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "sqft",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'No yard'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "else",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "`Yard is ${yardSize} sqft`",
          "color": "#f50",
          "class": [
            "jsstringtempcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "500",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Prints 'No yard'",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> House {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0sqft: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0yard?: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0\u00a0\u00a0sqft: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printYardSize(house: House) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yardSize = house.<span class=\"jspropertycolor\" style=\"color:black\">yard?</span>.<span class=\"jspropertycolor\" style=\"color:black\">sqft</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (yardSize === undefined) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0\u00a0\u00a0console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'No yard'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0} <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0\u00a0\u00a0console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Yard is ${yardSize} sqft`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> home: House = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0sqft: <span class=\"jsnumbercolor\" style=\"color:#905\">500</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            printYardSize(home); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'No yard'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_chaining",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface House {\n            \u00a0\u00a0sqft: number;\n            \u00a0\u00a0yard?: {\n            \u00a0\u00a0\u00a0\u00a0sqft: number;\n            \u00a0\u00a0};\n            }\n            function printYardSize(house: House) {\n            \u00a0\u00a0const yardSize = house.yard?.sqft;\n            \u00a0\u00a0if (yardSize === undefined) {\n            \u00a0\u00a0\u00a0\u00a0console.log('No yard');\n            \u00a0\u00a0} else {\n            \u00a0\u00a0\u00a0\u00a0console.log(`Yard is ${yardSize} sqft`);\n            \u00a0\u00a0}\n            }\n            \n            let home: House = {\n            \u00a0\u00a0sqft: 500\n            };\n            \n            printYardSize(home); // Prints 'No yard'\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "yard?",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "sqft",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'No yard'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "else",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "`Yard is ${yardSize} sqft`",
          "color": "rgb(255, 85, 0)",
          "class": "jsstringtempcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "500",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Prints 'No yard'",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Nullish Coalescence",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Nullish Coalescence is another JavaScript feature that also works well with TypeScript's null handling. It allows writing expressions that have a fallback specifically when dealing with null or undefined . This is useful when other falsy values can occur in the expression but are still valid. It can be used with the ?? operator in an expression, similar to using the && operator.",
      "html": "<p>\n        Nullish Coalescence is another JavaScript feature that also works well with TypeScript's null handling.\n        It allows writing expressions that have a fallback specifically when dealing with <code>null</code> or <code>undefined</code>.\n        This is useful when other falsy values can occur in the expression but are still valid.\n        It can be used with the <code>??</code> operator in an expression, similar to using the <code>&amp;&amp;</code> operator.\n    </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_coalescence",
        "syntaxHighlighting": [
          {
            "text": "\n            function printMileage(mileage: number | null | undefined) {\n            \u00a0\u00a0console.log(`Mileage: ${mileage ?? 'Not Available'}`);\n            }\n            \n            printMileage(null); // Prints 'Mileage: Not Available'\n            printMileage(0); // Prints 'Mileage: 0'\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "`Mileage: ${mileage ?? 'Not Available'}`",
            "color": "rgb(255, 85, 0)",
            "class": "jsstringtempcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// Prints 'Mileage: Not Available'",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Prints 'Mileage: 0'",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function printMileage(mileage: number | null | undefined) {\nconsole.log(`Mileage: ${mileage ?? 'Not Available'}`);\n}\n\nprintMileage(null); // Prints 'Mileage: Not Available'\nprintMileage(0); // Prints 'Mileage: 0'",
      "syntax_highlighting": [
        {
          "text": "\n function printMileage(mileage: number | null | undefined) {\n            \u00a0\u00a0console.log(`Mileage: ${mileage ?? 'Not Available'}`);\n            }\n \n            printMileage(null); // Prints 'Mileage: Not Available'\n            printMileage(0); // Prints 'Mileage: 0'\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "`Mileage: ${mileage ?? 'Not Available'}`",
          "color": "#f50",
          "class": [
            "jsstringtempcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// Prints 'Mileage: Not Available'",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Prints 'Mileage: 0'",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printMileage(mileage: number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> | undefined) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Mileage: ${mileage ?? 'Not Available'}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            printMileage(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'Mileage: Not Available'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            printMileage(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'Mileage: 0'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_coalescence",
      "syntax_highlighting_data": [
        {
          "text": "\n            function printMileage(mileage: number | null | undefined) {\n            \u00a0\u00a0console.log(`Mileage: ${mileage ?? 'Not Available'}`);\n            }\n            \n            printMileage(null); // Prints 'Mileage: Not Available'\n            printMileage(0); // Prints 'Mileage: 0'\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "`Mileage: ${mileage ?? 'Not Available'}`",
          "color": "rgb(255, 85, 0)",
          "class": "jsstringtempcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// Prints 'Mileage: Not Available'",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Prints 'Mileage: 0'",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Null Assertion",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript's inference system isn't perfect, there are times when it makes sense to ignore a value's possibility of being null or undefined . An easy way to do this is to use casting, but TypeScript also provides the ! operator as a convenient shortcut.",
      "html": "<p>\n        TypeScript's inference system isn't perfect, there are times when it makes sense to ignore a value's\n        possibility of being <code>null</code> or <code>undefined</code>.\n        An easy way to do this is to use casting, but TypeScript also provides the <code>!</code> operator as a convenient shortcut.\n    </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_assertion",
        "syntaxHighlighting": [
          {
            "text": "\n            function getValue(): string | undefined {\n            \u00a0\u00a0return 'hello';\n            }\n            let value = getValue();\n            console.log('value length: ' + value!.length);\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'hello'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'value length: '",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "length",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "function getValue(): string | undefined {\nreturn 'hello';\n}\nlet value = getValue();\nconsole.log('value length: ' + value!.length);",
      "syntax_highlighting": [
        {
          "text": "\n function getValue(): string | undefined {\n            \u00a0\u00a0return 'hello';\n            }\n let value = getValue();\n            console.log('value length: ' + value!.length);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'hello'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'value length: '",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "length",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getValue(): string | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = getValue();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'value length: '</span> + value!.<span class=\"jspropertycolor\" style=\"color:black\">length</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_assertion",
      "syntax_highlighting_data": [
        {
          "text": "\n            function getValue(): string | undefined {\n            \u00a0\u00a0return 'hello';\n            }\n            let value = getValue();\n            console.log('value length: ' + value!.length);\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'hello'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'value length: '",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "length",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Just like casting, this can be unsafe and should be used with care.",
      "html": "<p>\n            Just like casting, this can be unsafe and should be used with care.\n        </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Array bounds handling",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Even with strictNullChecks enabled, by default TypeScript will assume array access will never return undefined (unless undefined is part of the array type).",
      "html": "<p>Even with <code>strictNullChecks</code> enabled, by default TypeScript will assume array access will never return undefined (unless undefined is part of the array type).</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The config noUncheckedIndexedAccess can be used to change this behavior.",
      "html": "<p>The config <code>noUncheckedIndexedAccess</code> can be used to change this behavior.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_bounds",
        "syntaxHighlighting": [
          {
            "text": "\n            let array: number[] = [1, 2, 3];\n            let value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "2",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "3",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// with `noUncheckedIndexedAccess` this has the type `number | undefined`",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let array: number[] = [1, 2, 3];\nlet value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`",
      "syntax_highlighting": [
        {
          "text": "\n let array: number[] = [1, 2, 3];\n let value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "2",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "3",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// with `noUncheckedIndexedAccess` this has the type `number | undefined`",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> array: number[] = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = array[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// with `noUncheckedIndexedAccess` this has the type `number | undefined`<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_null_bounds",
      "syntax_highlighting_data": [
        {
          "text": "\n            let array: number[] = [1, 2, 3];\n            let value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "2",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "3",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// with `noUncheckedIndexedAccess` this has the type `number | undefined`",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    }
  ]
}