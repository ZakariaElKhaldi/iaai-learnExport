{
  "title": "TypeScript Keyof",
  "url": "https://www.w3schools.com/typescript/typescript_keyof.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Keyof",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "keyof is a keyword in TypeScript which is used to extract the key type from an object type.",
      "html": "<p><code>keyof</code> is a keyword in TypeScript which is used to extract the key type from an object type.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "keyof with explicit keys",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When used on an object type with explicit keys, keyof creates a union type with those keys.",
      "html": "<p>When used on an object type with explicit keys, <code>keyof</code> creates a union type with those keys.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_keyof_explicit",
        "syntaxHighlighting": [
          {
            "text": "\n      interface Person {\n      \u00a0\u00a0name: string;\n      \u00a0\u00a0age: number;\n      }\n      // `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\n      function printPersonProperty(person: Person, property: keyof Person) {\n        \u00a0\u00a0console.log(`Printing person property ${property}: \"${person[property]}\"`);\n      }\n      let person = {\n      \u00a0\u00a0name: \"Max\",\n      \u00a0\u00a0age: 27\n      };\n      printPersonProperty(person, \"name\"); // Printing person property name: \"Max\"\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "`Printing person property ${property}: \"${person[property]}\"`",
            "color": "rgb(255, 85, 0)",
            "class": "jsstringtempcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Max\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "27",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"name\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// Printing person property name: \"Max\"",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Person {\nname: string;\nage: number;\n}\n// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\"",
      "syntax_highlighting": [
        {
          "text": "\n interface Person {\n      \u00a0\u00a0name: string;\n      \u00a0\u00a0age: number;\n      }\n // `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\n function printPersonProperty(person: Person, property: keyof Person) {\n        \u00a0\u00a0console.log(`Printing person property ${property}: \"${person[property]}\"`);\n      }\n let person = {\n      \u00a0\u00a0name: \"Max\",\n      \u00a0\u00a0age: 27\n      };\n      printPersonProperty(person, \"name\"); // Printing person property name: \"Max\"\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "`Printing person property ${property}: \"${person[property]}\"`",
          "color": "#f50",
          "class": [
            "jsstringtempcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Max\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "27",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"name\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// Printing person property name: \"Max\"",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printPersonProperty(person: Person, property: keyof Person) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        \u00a0\u00a0console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Printing person property ${property}: \"${person[property]}\"`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> person = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0name: <span class=\"jsstringcolor\" style=\"color:green\">\"Max\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0age: <span class=\"jsnumbercolor\" style=\"color:#905\">27</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      printPersonProperty(person, <span class=\"jsstringcolor\" style=\"color:green\">\"name\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Printing person property name: \"Max\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_keyof_explicit",
      "syntax_highlighting_data": [
        {
          "text": "\n      interface Person {\n      \u00a0\u00a0name: string;\n      \u00a0\u00a0age: number;\n      }\n      // `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\n      function printPersonProperty(person: Person, property: keyof Person) {\n        \u00a0\u00a0console.log(`Printing person property ${property}: \"${person[property]}\"`);\n      }\n      let person = {\n      \u00a0\u00a0name: \"Max\",\n      \u00a0\u00a0age: 27\n      };\n      printPersonProperty(person, \"name\"); // Printing person property name: \"Max\"\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "`Printing person property ${property}: \"${person[property]}\"`",
          "color": "rgb(255, 85, 0)",
          "class": "jsstringtempcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Max\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "27",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"name\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// Printing person property name: \"Max\"",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "keyof with index signatures",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "keyof can also be used with index signatures to extract the index type.",
      "html": "<p><code>keyof</code> can also be used with index signatures to extract the index type.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [
          {
            "text": "\n      type StringMap = { [key: string]: unknown };\n      // `keyof StringMap` resolves to `string` here\n      function createStringPair(property: keyof StringMap, value: string): StringMap {\n      \u00a0\u00a0return { [property]: value };\n      }\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// `keyof StringMap` resolves to `string` here",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "function",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "return",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\nreturn { [property]: value };\n}",
      "syntax_highlighting": [
        {
          "text": "\n      type StringMap = { [key: string]: unknown };\n // `keyof StringMap` resolves to `string` here\n function createStringPair(property: keyof StringMap, value: string): StringMap {\n      \u00a0\u00a0return { [property]: value };\n      }\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// `keyof StringMap` resolves to `string` here",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "function",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "return",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      type StringMap = { [key: string]: unknown };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// `keyof StringMap` resolves to `string` here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> createStringPair(property: keyof StringMap, value: string): StringMap {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { [property]: value };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": null,
      "syntax_highlighting_data": [
        {
          "text": "\n      type StringMap = { [key: string]: unknown };\n      // `keyof StringMap` resolves to `string` here\n      function createStringPair(property: keyof StringMap, value: string): StringMap {\n      \u00a0\u00a0return { [property]: value };\n      }\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// `keyof StringMap` resolves to `string` here",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "function",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "return",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    }
  ]
}