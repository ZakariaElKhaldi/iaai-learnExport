{
  "title": "TypeScript Special Types",
  "url": "https://www.w3schools.com/typescript/typescript_special_types.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Special Types",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript has special types that may not refer to any specific type of data.",
      "html": "<p>TypeScript has special types that may not refer to any specific type of data.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type: any",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "any is a type that disables type checking and effectively allows all types to be used.",
      "html": "<p><code>any</code> is a type that disables type checking and effectively allows all types to be used.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "The example below does not use any and will throw an error:",
      "html": "<p>The example below does not use <code>any</code> and will throw an error:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_without_any",
        "syntaxHighlighting": [
          {
            "text": "\n      let u = true;\n      u = \"string\"; // Error: Type 'string' is not assignable to type 'boolean'.\n      Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"string\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// Error: Type 'string' is not assignable to type 'boolean'.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "round",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let u = true;\nu = \"string\"; // Error: Type 'string' is not assignable to type 'boolean'.\nMath.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.",
      "syntax_highlighting": [
        {
          "text": "\n let u = true;\n      u = \"string\"; // Error: Type 'string' is not assignable to type 'boolean'.\n      Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"string\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// Error: Type 'string' is not assignable to type 'boolean'.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "round",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> u = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      u = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'string' is not assignable to type 'boolean'.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Math.<span class=\"jspropertycolor\" style=\"color:black\">round</span>(u); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_without_any",
      "syntax_highlighting_data": [
        {
          "text": "\n      let u = true;\n      u = \"string\"; // Error: Type 'string' is not assignable to type 'boolean'.\n      Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"string\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// Error: Type 'string' is not assignable to type 'boolean'.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "round",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n     ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Setting any to the special type any disables type checking:",
      "html": "<p>Setting <code>any</code> to the special type <code>any</code> disables type checking:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_with_any",
        "syntaxHighlighting": [
          {
            "text": "\n      let v: any = true;\n      v = \"string\"; // no error as it can be \"any\" type\n      Math.round(v); // no error as it can be \"any\" type\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"string\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// no error as it can be \"any\" type",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "round",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "// no error as it can be \"any\" type\n     ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let v: any = true;\nv = \"string\"; // no error as it can be \"any\" type\nMath.round(v); // no error as it can be \"any\" type",
      "syntax_highlighting": [
        {
          "text": "\n let v: any = true;\n      v = \"string\"; // no error as it can be \"any\" type\n      Math.round(v); // no error as it can be \"any\" type\n     ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"string\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// no error as it can be \"any\" type",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "round",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "// no error as it can be \"any\" type\n     ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> v: any = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      v = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error as it can be \"any\" type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Math.<span class=\"jspropertycolor\" style=\"color:black\">round</span>(v); <span class=\"commentcolor\" style=\"color:slategray\">// no error as it can be \"any\" type\n     </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_with_any",
      "syntax_highlighting_data": [
        {
          "text": "\n      let v: any = true;\n      v = \"string\"; // no error as it can be \"any\" type\n      Math.round(v); // no error as it can be \"any\" type\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"string\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// no error as it can be \"any\" type",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "round",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "// no error as it can be \"any\" type\n     ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "any can be a useful way to get past errors since it disables type checking, but TypeScript will not be able provide type safety, and tools which rely on type data, such as auto completion, will not work. Remember, it should be avoided at \"any\" cost...",
      "html": "<p><code>any</code> can be a useful way to get past errors since it disables type checking, but\n      TypeScript will not be able provide type safety, and tools which rely\n      on type data, such as auto completion, will not work. Remember, it should be avoided at \"any\" cost...\n    </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type: unknown",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "unknown is a similar, but safer alternative to any .",
      "html": "<p><code>unknown</code> is a similar, but safer alternative to <code>any</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript will prevent unknown types from being used, as shown in the below example:",
      "html": "<p>TypeScript will prevent <code>unknown</code> types from being used, as shown in the below example:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_with_unknown",
        "syntaxHighlighting": [
          {
            "text": "\n      let w: unknown = 1; \n      w = \"string\"; // no error\n      w = { \n      \u00a0\u00a0runANonExistentMethod: () => {\n      \u00a0\u00a0\u00a0\u00a0console.log(\"I think therefore I am\");\n      \u00a0\u00a0} \n      } as { runANonExistentMethod: () => void}\n      // How can we avoid the error for the code commented out below when we don't know the type? \n      // w.runANonExistentMethod(); // Error: Object is of type 'unknown'. \n      if(typeof w === 'object' && w !== null) { \n      \u00a0\u00a0(w as { runANonExistentMethod: Function }).runANonExistentMethod(); \n      } \n\n      // Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "1",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"string\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// no error",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"I think therefore I am\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "void",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// How can we avoid the error for the code commented out below when we don't know the type? ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// w.runANonExistentMethod(); // Error: Object is of type 'unknown'. ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "if",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "typeof",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'object'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "runANonExistentMethod",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let w: unknown = 1;\nw = \"string\"; // no error\nw = {\nrunANonExistentMethod: () => {\nconsole.log(\"I think therefore I am\");\n}\n} as { runANonExistentMethod: () => void}\n// How can we avoid the error for the code commented out below when we don't know the type?\n// w.runANonExistentMethod(); // Error: Object is of type 'unknown'.\nif(typeof w === 'object' && w !== null) {\n(w as { runANonExistentMethod: Function }).runANonExistentMethod();\n}\n// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting",
      "syntax_highlighting": [
        {
          "text": "\n let w: unknown = 1; \n      w = \"string\"; // no error\n      w = { \n      \u00a0\u00a0runANonExistentMethod: () => {\n      \u00a0\u00a0\u00a0\u00a0console.log(\"I think therefore I am\");\n      \u00a0\u00a0} \n      } as { runANonExistentMethod: () => void}\n // How can we avoid the error for the code commented out below when we don't know the type? \n // w.runANonExistentMethod(); // Error: Object is of type 'unknown'. \n if(typeof w === 'object' && w !== null) { \n      \u00a0\u00a0(w as { runANonExistentMethod: Function }).runANonExistentMethod(); \n      } \n // Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "1",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"string\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// no error",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"I think therefore I am\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "void",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// How can we avoid the error for the code commented out below when we don't know the type? ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// w.runANonExistentMethod(); // Error: Object is of type 'unknown'. ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "if",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "typeof",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'object'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "runANonExistentMethod",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> w: unknown = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      w = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      w = { <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0runANonExistentMethod: () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0\u00a0\u00a0console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"I think therefore I am\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0} <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } as { runANonExistentMethod: () =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// How can we avoid the error for the code commented out below when we don't know the type? <br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// w.runANonExistentMethod(); // Error: Object is of type 'unknown'. <br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> w === <span class=\"jsstringcolor\" style=\"color:green\">'object'</span> &amp;&amp; w !== <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) { <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      \u00a0\u00a0(w as { runANonExistentMethod: Function }).<span class=\"jspropertycolor\" style=\"color:black\">runANonExistentMethod</span>(); <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_with_unknown",
      "syntax_highlighting_data": [
        {
          "text": "\n      let w: unknown = 1; \n      w = \"string\"; // no error\n      w = { \n      \u00a0\u00a0runANonExistentMethod: () => {\n      \u00a0\u00a0\u00a0\u00a0console.log(\"I think therefore I am\");\n      \u00a0\u00a0} \n      } as { runANonExistentMethod: () => void}\n      // How can we avoid the error for the code commented out below when we don't know the type? \n      // w.runANonExistentMethod(); // Error: Object is of type 'unknown'. \n      if(typeof w === 'object' && w !== null) { \n      \u00a0\u00a0(w as { runANonExistentMethod: Function }).runANonExistentMethod(); \n      } \n\n      // Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "1",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"string\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// no error",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"I think therefore I am\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "void",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// How can we avoid the error for the code commented out below when we don't know the type? ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// w.runANonExistentMethod(); // Error: Object is of type 'unknown'. ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "if",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "typeof",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'object'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "runANonExistentMethod",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n     ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Compare the example above to the previous example, with any .",
      "html": "<p>Compare the example above to the previous example, with <code>any</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "unknown is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it.",
      "html": "<p><code>unknown</code> is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Casting is when we use the \"as\" keyword to say property or variable is of the casted type.",
      "html": "<p>Casting is when we use the \"as\" keyword to say property or variable is of the casted type.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type: never",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "never effectively throws an error whenever it is defined.",
      "html": "<p><code>never</code> effectively throws an error whenever it is defined.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_never",
        "syntaxHighlighting": [
          {
            "text": "\n      let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// Error: Type 'boolean' is not assignable to type 'never'.\n     ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.",
      "syntax_highlighting": [
        {
          "text": "\n let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.\n     ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// Error: Type 'boolean' is not assignable to type 'never'.\n     ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x: never = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'boolean' is not assignable to type 'never'.\n     </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_never",
      "syntax_highlighting_data": [
        {
          "text": "\n      let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// Error: Type 'boolean' is not assignable to type 'never'.\n     ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "never is rarely used, especially by itself, its primary use is in advanced generics.",
      "html": "<p><code>never</code> is rarely used, especially by itself, its primary use is in advanced\n      generics.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type: undefined & null",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "undefined and null are types that refer to the JavaScript primitives undefined and null respectively.",
      "html": "<p><code>undefined</code> and <code>null</code> are types that refer to the\n    JavaScript primitives <code>undefined</code> and <code>null</code>\n    respectively.\n  </p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_undefined_null",
        "syntaxHighlighting": [
          {
            "text": "\n      let y: undefined = undefined;\n      let z: null = null;\n     ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "null",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let y: undefined = undefined;\nlet z: null = null;",
      "syntax_highlighting": [
        {
          "text": "\n let y: undefined = undefined;\n let z: null = null;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "null",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y: undefined = undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> z: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_special_types_undefined_null",
      "syntax_highlighting_data": [
        {
          "text": "\n      let y: undefined = undefined;\n      let z: null = null;\n     ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "null",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "These types don't have much use unless strictNullChecks is enabled in the tsconfig.json file.",
      "html": "<p>These types don't have much use unless <code>strictNullChecks</code> is enabled in the <code>tsconfig.json</code> file.\n    </p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "TypeScript Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Create an empty \"myVar\" variable, and disable type checking:",
      "html": "<p>Create an empty \"myVar\" variable, and disable type checking:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "let myVar:\n;",
      "language": "javascript",
      "code_html": "<pre style=\"overflow: auto;\">let myVar: <input maxlength=\"3\" name=\"ex1\" style=\"width: 40px;\"/>;\n        </pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_special_types1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_special_types1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}