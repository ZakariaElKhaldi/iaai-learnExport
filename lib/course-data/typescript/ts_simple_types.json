{
  "title": "TypeScript Simple Types",
  "url": "https://www.w3schools.com/typescript/typescript_simple_types.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Simple Types",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript supports some simple types (primitives) you may know.",
      "html": "<p>TypeScript supports some simple types (primitives) you may know.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are three main primitives in JavaScript and TypeScript.",
      "html": "<p>There are three main primitives in JavaScript and TypeScript.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are also 2 less common primitives used in later versions of Javascript and TypeScript.",
      "html": "<p>There are also 2 less common primitives used in later versions of Javascript and TypeScript.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Type Assignment",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "When creating a variable, there are two main ways TypeScript assigns a type:",
      "html": "<p>When creating a variable, there are two main ways TypeScript assigns a type:</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "In both examples below firstName is of type string",
      "html": "<p>In both examples below <code>firstName</code> is of type <code>string</code></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Explicit Type",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Explicit - writing out the type:",
      "html": "<p><strong>Explicit</strong> - writing out the type:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_explicit1",
        "syntaxHighlighting": [
          {
            "text": "\n            let firstName: string = \"Dylan\";\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Dylan\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let firstName: string = \"Dylan\";",
      "syntax_highlighting": [
        {
          "text": "\n let firstName: string = \"Dylan\";\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Dylan\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> firstName: string = <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_explicit1",
      "syntax_highlighting_data": [
        {
          "text": "\n            let firstName: string = \"Dylan\";\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Dylan\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Explicit type assignment are easier to read and more intentional.",
      "html": "<p><strong>Explicit</strong> type assignment are easier to read and more intentional.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Implicit Type",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Implicit - TypeScript will \"guess\" the type, based on the assigned value:",
      "html": "<p><strong>Implicit</strong> - TypeScript will \"guess\" the type, based on the assigned value:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_infer1",
        "syntaxHighlighting": [
          {
            "text": "\n            let firstName = \"Dylan\";\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Dylan\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let firstName = \"Dylan\";",
      "syntax_highlighting": [
        {
          "text": "\n let firstName = \"Dylan\";\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Dylan\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> firstName = <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_infer1",
      "syntax_highlighting_data": [
        {
          "text": "\n            let firstName = \"Dylan\";\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Dylan\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: Having TypeScript \"guess\" the type of a value is called infer .",
      "html": "<p><strong>Note:</strong> Having TypeScript \"guess\" the type of a value is called <strong>infer</strong>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Implicit assignment forces TypeScript to infer the value.",
      "html": "<p>Implicit assignment forces TypeScript to <strong>infer</strong> the value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Implicit type assignment are shorter, faster to type, and often used when developing and testing.",
      "html": "<p><strong>Implicit</strong> type assignment are shorter, faster to type, and often used when developing and testing.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Error In Type Assignment",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript will throw an error if data types do not match.",
      "html": "<p>TypeScript will throw an error if data types do not match.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_explicit",
        "syntaxHighlighting": [
          {
            "text": "\n          let firstName: string = \"Dylan\"; // type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Dylan\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// type string",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "33",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// attempts to re-assign the value to a different type\n       ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let firstName: string = \"Dylan\"; // type string\nfirstName = 33; // attempts to re-assign the value to a different type",
      "syntax_highlighting": [
        {
          "text": "\n let firstName: string = \"Dylan\"; // type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Dylan\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// type string",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "33",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// attempts to re-assign the value to a different type\n       ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> firstName: string = <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// type string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          firstName = <span class=\"jsnumbercolor\" style=\"color:#905\">33</span>; <span class=\"commentcolor\" style=\"color:slategray\">// attempts to re-assign the value to a different type\n       </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_explicit",
      "syntax_highlighting_data": [
        {
          "text": "\n          let firstName: string = \"Dylan\"; // type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Dylan\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// type string",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "33",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// attempts to re-assign the value to a different type\n       ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Implicit type assignment would have made firstName less noticeable as a string , but both will throw an error:",
      "html": "<p><strong>Implicit</strong> type assignment would have made <code>firstName</code> less noticeable as a <code>string</code>, but both will throw an error:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types",
        "syntaxHighlighting": [
          {
            "text": "\n          let firstName = \"Dylan\"; // inferred to type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"Dylan\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// inferred to type string",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "33",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// attempts to re-assign the value to a different type\n       ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "let firstName = \"Dylan\"; // inferred to type string\nfirstName = 33; // attempts to re-assign the value to a different type",
      "syntax_highlighting": [
        {
          "text": "\n let firstName = \"Dylan\"; // inferred to type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"Dylan\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// inferred to type string",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "33",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// attempts to re-assign the value to a different type\n       ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> firstName = <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// inferred to type string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          firstName = <span class=\"jsnumbercolor\" style=\"color:#905\">33</span>; <span class=\"commentcolor\" style=\"color:slategray\">// attempts to re-assign the value to a different type\n       </span></span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types",
      "syntax_highlighting_data": [
        {
          "text": "\n          let firstName = \"Dylan\"; // inferred to type string\n          firstName = 33; // attempts to re-assign the value to a different type\n       ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"Dylan\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// inferred to type string",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "33",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// attempts to re-assign the value to a different type\n       ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "JavaScript will not throw an error for mismatched types.",
      "html": "<p><strong>JavaScript</strong> will <strong>not</strong> throw an error for mismatched types.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Unable to Infer",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.",
      "html": "<p>TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to <code>any</code> which disables type checking.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_infer",
        "syntaxHighlighting": [
          {
            "text": "\n      // Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\n      const json = JSON.parse(\"55\");\n\n      // Most expect json to be an object, but it can be a string or a number like this example\n      console.log(typeof json);\n       ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "parse",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "\"55\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Most expect json to be an object, but it can be a string or a number like this example",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "log",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "typeof",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\nconst json = JSON.parse(\"55\");\n// Most expect json to be an object, but it can be a string or a number like this example\nconsole.log(typeof json);",
      "syntax_highlighting": [
        {
          "text": "\n // Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\n const json = JSON.parse(\"55\");\n // Most expect json to be an object, but it can be a string or a number like this example\n      console.log(typeof json);\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "parse",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "\"55\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Most expect json to be an object, but it can be a string or a number like this example",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "log",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "typeof",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> json = JSON.<span class=\"jspropertycolor\" style=\"color:black\">parse</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"55\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Most expect json to be an object, but it can be a string or a number like this example<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> json);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_simple_types_infer",
      "syntax_highlighting_data": [
        {
          "text": "\n      // Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...\n      const json = JSON.parse(\"55\");\n\n      // Most expect json to be an object, but it can be a string or a number like this example\n      console.log(typeof json);\n       ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Implicit any as JSON.parse doesn't know what type of data it returns so it can be \"any\" thing...",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "parse",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "\"55\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Most expect json to be an object, but it can be a string or a number like this example",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "log",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "typeof",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This behavior can be disabled by enabling noImplicitAny as an option in a TypeScript's project tsconfig.json . That is a JSON config file for customizing how some of TypeScript behaves.",
      "html": "<p>This behavior can be disabled by enabling <code>noImplicitAny</code> as an option in a TypeScript's project <code>tsconfig.json</code>. That is a JSON config file for customizing how some of TypeScript behaves.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Note: you may see primitive types capitalized like Boolean .",
      "html": "<p><strong>Note:</strong> you may see primitive types capitalized like <code>Boolean</code>.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "boolean !== Boolean For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.",
      "html": "<p><code>boolean !== Boolean</code><br/>For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "TypeScript Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "There are two main ways TypeScript assigns a type:",
      "html": "<p>There are two main ways TypeScript assigns a type:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "unknown",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "",
      "language": "unknown",
      "code_html": "<pre style=\"overflow: auto;\"><input maxlength=\"8\" name=\"ex1\" style=\"width: 90px;\"/>\n<input maxlength=\"8\" name=\"ex2\" style=\"width: 90px;\"/>\n        </pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_simple_types1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_simple_types1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}