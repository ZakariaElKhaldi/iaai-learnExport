{
  "title": "TypeScript 5.x Updates",
  "url": "https://www.w3schools.com/typescript/typescript_5_updates.php",
  "metadata": {
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript 5.x Updates",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript is actively maintained and updated by Microsoft. In version 5.x a lot of utility and quality of life updates were made.",
      "html": "<p>TypeScript is actively maintained and updated by Microsoft. In version 5.x a lot of utility and quality of life updates were made.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This chapter covers the most popular updates to allow stricter and more flexible type safety.",
      "html": "<p>This chapter covers the most popular updates to allow stricter and more flexible type safety.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "As a reminder these features will only be available in 5.x+",
      "html": "<p>As a reminder these features will only be available in 5.x+</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Template Literal Types",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Template Literal Types now allows us to create more precise types using template literals. We can define custom types that depend on the actual values of strings at compile time.",
      "html": "<p><code>Template Literal Types</code> now allows us to create more precise types using template literals. We can define custom types that depend on the actual values of strings at compile time.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_template_literal_types",
        "syntaxHighlighting": [
          {
            "text": "\n            type Color = \"red\" | \"green\" | \"blue\"; \n            type HexColor<T extends Color> = `#${string}`;\n\n            // Usage:\n            let myColor: HexColor<\"blue\"> = \"#0000FF\";\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"red\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"green\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"blue\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "extends",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "`#${string}`",
            "color": "rgb(255, 85, 0)",
            "class": "jsstringtempcolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Usage:",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"blue\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\"#0000FF\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n// Usage:\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";",
      "syntax_highlighting": [
        {
          "text": "\n            type Color = \"red\" | \"green\" | \"blue\"; \n            type HexColor<T extends Color> = `#${string}`;\n // Usage:\n let myColor: HexColor<\"blue\"> = \"#0000FF\";\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"red\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"green\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"blue\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "extends",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "`#${string}`",
          "color": "#f50",
          "class": [
            "jsstringtempcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Usage:",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"blue\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\"#0000FF\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type Color = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"green\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type HexColor&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Color&gt; = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`#${string}`</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Usage:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myColor: HexColor&lt;<span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>&gt; = <span class=\"jsstringcolor\" style=\"color:green\">\"#0000FF\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_template_literal_types",
      "syntax_highlighting_data": [
        {
          "text": "\n            type Color = \"red\" | \"green\" | \"blue\"; \n            type HexColor<T extends Color> = `#${string}`;\n\n            // Usage:\n            let myColor: HexColor<\"blue\"> = \"#0000FF\";\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"red\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"green\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"blue\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "extends",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "`#${string}`",
          "color": "rgb(255, 85, 0)",
          "class": "jsstringtempcolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Usage:",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"blue\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\"#0000FF\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Index Signature Labels",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Index Signature Labels allows us to label index signatures using computed property names. It helps in providing more descriptive type information when working with dynamic objects.",
      "html": "<p><code>Index Signature Labels</code> allows us to label index signatures using computed property names. It helps in providing more descriptive type information when working with dynamic objects.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_index_signature_label",
        "syntaxHighlighting": [
          {
            "text": "\n            type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n\n            // Usage: \n            let obj: DynamicObject = { dynamic_key: \"value\" };\n\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "`dynamic_${string}`",
            "color": "rgb(255, 85, 0)",
            "class": "jsstringtempcolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// Usage: ",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\"value\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n// Usage:\nlet obj: DynamicObject = { dynamic_key: \"value\" };",
      "syntax_highlighting": [
        {
          "text": "\n            type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n // Usage: \n let obj: DynamicObject = { dynamic_key: \"value\" };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "`dynamic_${string}`",
          "color": "#f50",
          "class": [
            "jsstringtempcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// Usage: ",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\"value\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type DynamicObject = { [key: string as <span class=\"jsstringtempcolor\" style=\"color:#f50\">`dynamic_${string}`</span>]: string };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Usage: <br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> obj: DynamicObject = { dynamic_key: <span class=\"jsstringcolor\" style=\"color:green\">\"value\"</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_index_signature_label",
      "syntax_highlighting_data": [
        {
          "text": "\n            type DynamicObject = { [key: string as `dynamic_${string}`]: string };\n\n            // Usage: \n            let obj: DynamicObject = { dynamic_key: \"value\" };\n\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "`dynamic_${string}`",
          "color": "rgb(255, 85, 0)",
          "class": "jsstringtempcolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// Usage: ",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\"value\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Classes",
          "href": "https://www.w3schools.com/typescript_classes.php",
          "title": ""
        }
      ],
      "text": "5.x also now supports native JavaScript private fields. The TypeScript 'private' still works as discussed in Classes section.",
      "html": "<p>5.x also now supports native JavaScript private fields. The TypeScript 'private' still works as discussed in <a href=\"typescript_classes.php\">Classes</a> section.</p>"
    }
  ]
}