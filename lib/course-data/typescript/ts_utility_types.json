{
  "title": "TypeScript Utility Types",
  "url": "https://www.w3schools.com/typescript/typescript_utility_types.php",
  "metadata": {
    "og:description": "W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.",
    "viewport": "width=device-width, initial-scale=1",
    "title": "W3Schools.com",
    "Keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website",
    "Description": "Well organized and easy to understand Web building tutorials with lots of examples of how to use HTML, CSS, JavaScript, SQL, PHP, Python, Bootstrap, Java and XML.",
    "og:image": "https://www.w3schools.com/images/w3schools_logo_436_2.png",
    "og:image:type": "image/png",
    "og:image:width": "436",
    "og:image:height": "228",
    "msapplication-TileColor": "#00a300",
    "theme-color": "#ffffff",
    "keywords": "HTML, Python, CSS, SQL, JavaScript, How to, PHP, Java, C, C++, C#, jQuery, Bootstrap, Colors, W3.CSS, XML, MySQL, Icons, NodeJS, React, Graphics, Angular, R, AI, Git, Data Science, Code Game, Tutorials, Programming, Web Development, Training, Learning, Quiz, Exercises, Courses, Lessons, References, Examples, Learn to code, Source code, Demos, Tips, Website"
  },
  "content": [
    {
      "type": "header",
      "metadata": {
        "level": "h1"
      },
      "text": "TypeScript Utility Types",
      "level": "h1"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "TypeScript comes with a large number of types that can help with some common type manipulation, usually referred to as utility types.",
      "html": "<p>TypeScript comes with a large number of types that can help with some common type manipulation, usually referred to as utility types.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "This chapter covers the most popular utility types.",
      "html": "<p>This chapter covers the most popular utility types.</p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Partial",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Partial changes all the properties in an object to be optional.",
      "html": "<p><code>Partial</code> changes all the properties in an object to be optional.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_partial",
        "syntaxHighlighting": [
          {
            "text": "\n            interface Point {\n            \u00a0\u00a0x: number;\n            \u00a0\u00a0y: number;\n            }\n            \n            let pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optionalpointPart.x = 10;\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// `Partial` allows x and y to be optional",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "x",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Point {\nx: number;\ny: number;\n}\n\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optionalpointPart.x = 10;",
      "syntax_highlighting": [
        {
          "text": "\n interface Point {\n            \u00a0\u00a0x: number;\n            \u00a0\u00a0y: number;\n            }\n \n let pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optionalpointPart.x = 10;\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// `Partial` allows x and y to be optional",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "x",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Point {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0x: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0y: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> pointPart: Partial&lt;Point&gt; = {}; <span class=\"commentcolor\" style=\"color:slategray\">// `Partial` allows x and y to be optional<br/></span>pointPart.<span class=\"jspropertycolor\" style=\"color:black\">x</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_partial",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface Point {\n            \u00a0\u00a0x: number;\n            \u00a0\u00a0y: number;\n            }\n            \n            let pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optionalpointPart.x = 10;\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// `Partial` allows x and y to be optional",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "x",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Required",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Required changes all the properties in an object to be required.",
      "html": "<p><code>Required</code> changes all the properties in an object to be required.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_required",
        "syntaxHighlighting": [
          {
            "text": "\n            interface Car {\n            \u00a0\u00a0make: string;\n            \u00a0\u00a0model: string;\n            \u00a0\u00a0mileage?: number;\n            }\n            \n            let myCar: Required<Car> = {\n            \u00a0\u00a0make: 'Ford',\n            \u00a0\u00a0model: 'Focus',\n            \u00a0\u00a0mileage: 12000 // `Required` forces mileage to be defined\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "let",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Ford'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Focus'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "12000",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// `Required` forces mileage to be defined",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Car {\nmake: string;\nmodel: string;\nmileage?: number;\n}\n\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};",
      "syntax_highlighting": [
        {
          "text": "\n interface Car {\n            \u00a0\u00a0make: string;\n            \u00a0\u00a0model: string;\n            \u00a0\u00a0mileage?: number;\n            }\n \n let myCar: Required<Car> = {\n            \u00a0\u00a0make: 'Ford',\n            \u00a0\u00a0model: 'Focus',\n            \u00a0\u00a0mileage: 12000 // `Required` forces mileage to be defined\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "let",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Ford'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Focus'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "12000",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// `Required` forces mileage to be defined",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Car {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0make: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0model: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0mileage?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myCar: Required&lt;Car&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0make: <span class=\"jsstringcolor\" style=\"color:green\">'Ford'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0model: <span class=\"jsstringcolor\" style=\"color:green\">'Focus'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0mileage: <span class=\"jsnumbercolor\" style=\"color:#905\">12000</span> <span class=\"commentcolor\" style=\"color:slategray\">// `Required` forces mileage to be defined<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_required",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface Car {\n            \u00a0\u00a0make: string;\n            \u00a0\u00a0model: string;\n            \u00a0\u00a0mileage?: number;\n            }\n            \n            let myCar: Required<Car> = {\n            \u00a0\u00a0make: 'Ford',\n            \u00a0\u00a0model: 'Focus',\n            \u00a0\u00a0mileage: 12000 // `Required` forces mileage to be defined\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "let",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Ford'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Focus'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "12000",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// `Required` forces mileage to be defined",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Record",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Record is a shortcut to defining an object type with a specific key type and value type.",
      "html": "<p><code>Record</code> is a shortcut to defining an object type with a specific key type and value type.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_record",
        "syntaxHighlighting": [
          {
            "text": "\n            const nameAgeMap: Record<string, number> = {\n            \u00a0\u00a0'Alice': 21,\n            \u00a0\u00a0'Bob': 25\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Alice'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "21",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Bob'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "25",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "const nameAgeMap: Record<string, number> = {\n'Alice': 21,\n'Bob': 25\n};",
      "syntax_highlighting": [
        {
          "text": "\n const nameAgeMap: Record<string, number> = {\n            \u00a0\u00a0'Alice': 21,\n            \u00a0\u00a0'Bob': 25\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Alice'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "21",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Bob'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "25",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nameAgeMap: Record&lt;string, number&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"jsstringcolor\" style=\"color:green\">'Alice'</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">21</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">25</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_record",
      "syntax_highlighting_data": [
        {
          "text": "\n            const nameAgeMap: Record<string, number> = {\n            \u00a0\u00a0'Alice': 21,\n            \u00a0\u00a0'Bob': 25\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Alice'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "21",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Bob'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "25",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Record <string, number> is equivalent to { [key: string]: number }",
      "html": "<p><code>Record&lt;string, number&gt;</code> is equivalent to <code>{ [key: string]: number }</code></p>"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Omit",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Omit removes keys from an object type.",
      "html": "<p><code>Omit</code> removes keys from an object type.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_omit",
        "syntaxHighlighting": [
          {
            "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n            \n            const bob: Omit<Person, 'age' | 'location'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Omit` has removed age and location from the type and they can't be defined here\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'age'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "'location'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Bob'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// `Omit` has removed age and location from the type and they can't be defined here",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\n\nconst bob: Omit<Person, 'age' | 'location'> = {\nname: 'Bob'\n// `Omit` has removed age and location from the type and they can't be defined here\n};",
      "syntax_highlighting": [
        {
          "text": "\n interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n \n const bob: Omit<Person, 'age' | 'location'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Omit` has removed age and location from the type and they can't be defined here\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'age'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "'location'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Bob'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// `Omit` has removed age and location from the type and they can't be defined here",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0location?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bob: Omit&lt;Person, <span class=\"jsstringcolor\" style=\"color:green\">'age'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'location'</span>&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"commentcolor\" style=\"color:slategray\">// `Omit` has removed age and location from the type and they can't be defined here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_omit",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n            \n            const bob: Omit<Person, 'age' | 'location'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Omit` has removed age and location from the type and they can't be defined here\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'age'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "'location'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Bob'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// `Omit` has removed age and location from the type and they can't be defined here",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Pick",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Pick removes all but the specified keys from an object type.",
      "html": "<p><code>Pick</code> removes all but the specified keys from an object type.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_pick",
        "syntaxHighlighting": [
          {
            "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n            \n            const bob: Pick<Person, 'name'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "'name'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "'Bob'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\n\nconst bob: Pick<Person, 'name'> = {\nname: 'Bob'\n// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n};",
      "syntax_highlighting": [
        {
          "text": "\n interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n \n const bob: Pick<Person, 'name'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "'name'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "'Bob'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0location?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bob: Pick&lt;Person, <span class=\"jsstringcolor\" style=\"color:green\">'name'</span>&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0<span class=\"commentcolor\" style=\"color:slategray\">// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_pick",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            \u00a0\u00a0location?: string;\n            }\n            \n            const bob: Pick<Person, 'name'> = {\n            \u00a0\u00a0name: 'Bob'\n            \u00a0\u00a0// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "'name'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "'Bob'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exclude",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Exclude removes types from a union.",
      "html": "<p><code>Exclude</code> removes types from a union.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "javascript",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_exclude",
        "syntaxHighlighting": [
          {
            "text": "\n            type Primitive = string | number | boolean\n            const value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "boolean",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "true",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "// a string cannot be used here since Exclude removed it from the type.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type Primitive = string | number | boolean\nconst value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.",
      "syntax_highlighting": [
        {
          "text": "\n            type Primitive = string | number | boolean\n const value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "boolean",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "true",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "// a string cannot be used here since Exclude removed it from the type.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type Primitive = string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> value: Exclude&lt;Primitive, string&gt; = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>; <span class=\"commentcolor\" style=\"color:slategray\">// a string cannot be used here since Exclude removed it from the type.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_exclude",
      "syntax_highlighting_data": [
        {
          "text": "\n            type Primitive = string | number | boolean\n            const value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "boolean",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "true",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "// a string cannot be used here since Exclude removed it from the type.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "ReturnType",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "ReturnType extracts the return type of a function type.",
      "html": "<p><code>ReturnType</code> extracts the return type of a function type.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_return_type",
        "syntaxHighlighting": [
          {
            "text": "\n            type PointGenerator = () => { x: number; y: number; };\n            const point: ReturnType<PointGenerator> = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\nx: 10,\ny: 20\n};",
      "syntax_highlighting": [
        {
          "text": "\n            type PointGenerator = () => { x: number; y: number; };\n const point: ReturnType<PointGenerator> = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type PointGenerator = () =&gt; { x: number; y: number; };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point: ReturnType&lt;PointGenerator&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0x: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_return_type",
      "syntax_highlighting_data": [
        {
          "text": "\n            type PointGenerator = () => { x: number; y: number; };\n            const point: ReturnType<PointGenerator> = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Parameters",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Parameters extracts the parameter types of a function type as an array.",
      "html": "<p><code>Parameters</code> extracts the parameter types of a function type as an array.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_parameters",
        "syntaxHighlighting": [
          {
            "text": "\n            type PointPrinter = (p: { x: number; y: number; }) => void;\n            const point: Parameters<PointPrinter>[0] = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "void",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "0",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "10",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "20",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "type PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\nx: 10,\ny: 20\n};",
      "syntax_highlighting": [
        {
          "text": "\n            type PointPrinter = (p: { x: number; y: number; }) => void;\n const point: Parameters<PointPrinter>[0] = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "void",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "0",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "10",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "20",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            type PointPrinter = (p: { x: number; y: number; }) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point: Parameters&lt;PointPrinter&gt;[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>] = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0x: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_parameters",
      "syntax_highlighting_data": [
        {
          "text": "\n            type PointPrinter = (p: { x: number; y: number; }) => void;\n            const point: Parameters<PointPrinter>[0] = {\n            \u00a0\u00a0x: 10,\n            \u00a0\u00a0y: 20\n            };\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "void",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "0",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "10",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "20",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Readonly",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Readonly is used to create a new type where all properties are readonly, meaning they cannot be modified once assigned a value.",
      "html": "<p><code>Readonly</code> is used to create a new type where all properties are readonly, meaning they cannot be modified once assigned a value.</p>"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Keep in mind TypeScript will prevent this at compile time, but in theory since it is compiled down to JavaScript you can still override a readonly property.",
      "html": "<p>Keep in mind TypeScript will prevent this at compile time, but in theory since it is compiled down to JavaScript you can still override a readonly property.</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_readonly",
        "syntaxHighlighting": [
          {
            "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            }\n\n            const person: Readonly<Person> = {\n            \u00a0\u00a0name: \"Dylan\",\n            \u00a0\u00a0age: 35,\n            };\n\n            person.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.\n         ",
            "color": "rgb(0, 0, 0)",
            "class": "jscolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "interface",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "const",
            "color": "rgb(0, 92, 197)",
            "class": "jskeywordcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\"Dylan\"",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "35",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "\n\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          },
          {
            "text": "name",
            "color": "rgb(0, 0, 0)",
            "class": "jspropertycolor"
          },
          {
            "text": "'Israel'",
            "color": "rgb(0, 128, 0)",
            "class": "jsstringcolor"
          },
          {
            "text": "// prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
            "color": "rgb(112, 128, 144)",
            "class": "commentcolor"
          },
          {
            "text": "\n",
            "color": "rgb(153, 0, 85)",
            "class": "jsnumbercolor"
          }
        ],
        "classList": [
          "w3-code",
          "notranslate",
          "jsHigh"
        ],
        "isNotranslate": true
      },
      "code": "interface Person {\nname: string;\nage: number;\n}\nconst person: Readonly<Person> = {\nname: \"Dylan\",\nage: 35,\n};\nperson.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
      "syntax_highlighting": [
        {
          "text": "\n interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            }\n const person: Readonly<Person> = {\n            \u00a0\u00a0name: \"Dylan\",\n            \u00a0\u00a0age: 35,\n            };\n            person.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.\n ",
          "color": "black",
          "class": [
            "jscolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "interface",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "const",
          "color": "#005cc5",
          "class": [
            "jskeywordcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\"Dylan\"",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "35",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        },
        {
          "text": "name",
          "color": "black",
          "class": [
            "jspropertycolor"
          ]
        },
        {
          "text": "'Israel'",
          "color": "green",
          "class": [
            "jsstringcolor"
          ]
        },
        {
          "text": "// prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
          "color": "slategray",
          "class": [
            "commentcolor"
          ]
        },
        {
          "text": "\n",
          "color": "#905",
          "class": [
            "jsnumbercolor"
          ]
        }
      ],
      "language": "html",
      "code_html": "<div class=\"w3-code notranslate jsHigh\"><span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person: Readonly&lt;Person&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0name: <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            \u00a0\u00a0age: <span class=\"jsnumbercolor\" style=\"color:#905\">35</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            person.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'Israel'</span>; <span class=\"commentcolor\" style=\"color:slategray\">// prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span></div>",
      "code_classes": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "tryItLink": "https://www.w3schools.com/typescript/trytypescript.php?filename=demo_utility_types_readonly",
      "syntax_highlighting_data": [
        {
          "text": "\n            interface Person {\n            \u00a0\u00a0name: string;\n            \u00a0\u00a0age: number;\n            }\n\n            const person: Readonly<Person> = {\n            \u00a0\u00a0name: \"Dylan\",\n            \u00a0\u00a0age: 35,\n            };\n\n            person.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.\n         ",
          "color": "rgb(0, 0, 0)",
          "class": "jscolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "interface",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "const",
          "color": "rgb(0, 92, 197)",
          "class": "jskeywordcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\"Dylan\"",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "35",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "\n\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        },
        {
          "text": "name",
          "color": "rgb(0, 0, 0)",
          "class": "jspropertycolor"
        },
        {
          "text": "'Israel'",
          "color": "rgb(0, 128, 0)",
          "class": "jsstringcolor"
        },
        {
          "text": "// prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
          "color": "rgb(112, 128, 144)",
          "class": "commentcolor"
        },
        {
          "text": "\n",
          "color": "rgb(153, 0, 85)",
          "class": "jsnumbercolor"
        }
      ],
      "class_list": [
        "w3-code",
        "notranslate",
        "jsHigh"
      ],
      "is_notranslate": true
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "TypeScript Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Test Yourself With Exercises",
      "level": "h2"
    },
    {
      "type": "header",
      "metadata": {
        "level": "h2"
      },
      "text": "Exercise:",
      "level": "h2"
    },
    {
      "type": "text",
      "metadata": {},
      "text": "Declare an object kindPerson from the Person interface, where all the properties are optional:",
      "html": "<p>Declare an object kindPerson from the Person interface, where all the properties are optional:</p>"
    },
    {
      "type": "code",
      "metadata": {
        "language": "css",
        "tryItLink": null,
        "syntaxHighlighting": [],
        "classList": [],
        "isNotranslate": false
      },
      "code": "interface Person {\nage: number;\nfirstName: string;\nlastName: string;\n}\n\nlet\n:\n= {};",
      "language": "javascript",
      "code_html": "<pre style=\"overflow: auto;\">interface Person {\n    age: number;\n    firstName: string;\n    lastName: string;\n}\n            \nlet <input maxlength=\"10\" name=\"ex1\" style=\"width: 110px;\"/>: <input maxlength=\"15\" name=\"ex2\" style=\"width: 160px;\"/> = {};</pre>",
      "code_classes": [],
      "tryItLink": null,
      "syntax_highlighting_data": [],
      "class_list": [],
      "is_notranslate": false
    },
    {
      "type": "text",
      "metadata": {},
      "links": [
        {
          "text": "Start the Exercise",
          "href": "https://www.w3schools.com/exercise.php?filename=exercise_utility_types1",
          "title": ""
        }
      ],
      "text": "Start the Exercise",
      "html": "<p><a href=\"exercise.php?filename=exercise_utility_types1\" target=\"_blank\">Start the Exercise</a></p>"
    }
  ]
}