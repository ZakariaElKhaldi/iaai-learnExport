{
  "id": "41692fb8-2c35-452f-8ea9-de2f3ff67421",
  "title": "HTMLCanvasReference",
  "slug": "htmlcanvasreference",
  "metadata": {
    "description": "Learn about HTMLCanvasReference with clear explanations and practical examples.",
    "keywords": [
      "c",
      "canvas",
      "returns",
      "sets",
      "path",
      "object",
      "mycanvas",
      "drawing",
      "method",
      "current",
      "draw"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnHTML",
    "subcategory": "HTML Canvas"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "HTML\nCanvas\nReference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "The\n<canvas>\nelement defines a\nbitmapped\narea in an HTML page.\nThe\nCanvas API\nallows JavaScript to\ndraw graphics\non the canvas.\nThe Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors,\nrotations, transparencies, and other pixel manipulations.\nYou can add a canvas element anywhere in an HTML page with the\n<canvas>\ntag:\nExample\n<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>\n\nYou can access a\n<canvas>\nelement with the\nHTML \nDOM\nmethod\ngetElementById()\n.\nTo draw in the canvas you need to create a\n2D context\nobject:\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\nNote\nThe HTML\n<canvas>\nelement itself has no drawing abilities.\nYou must use JavaScript to draw any graphics.\nThe\ngetContext()\nmethod returns an object \nwith tools (methods) for drawing.\nDrawing on the Canvas\nAfter you have created a 2D context, you can draw on the canvas.\nThe\nfillRect()\nmethod draws a black rectangle with a top-left corner at position 20,20.\nThe rectangle is 150 pixel wide and 100 pixels high.\nExample\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillRect(20, 20, 150, 100);\n\nUsing Colors\nThe\nfillStyle\nproperty sets the fill color of the drawing object:\nExample\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);\n\nYou can also create a new\n<canvas>\nelement \nwith the\ndocument.createElement()\nmethod,\nand add the element to an existing HTML page:\nExample\nconst myCanvas = document.createElement(\"canvas\");\ndocument.body.appendChild(myCanvas);\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);\n\nPaths\nThe common way to draw on the canvas is to:\nBegin a Path - beginPath()\nMove to a Point - moveTo()\nDraw in the Path - lineTo()\nDraw the Path - stroke()\nExample\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();\n\nComplete Canvas API Reference\nThis reference covers all Properties and Methods of the getContext(\"2d\") Object,\nused to draw text, lines, boxes, circles, pictures, and more on the canvas.\nDrawing Methods\nThere are only 3 methods to draw directly on the canvas:\nMethod\nDescription\nfillRect()\nDraws a \"filled\" rectangle\nstrokeRect()\nDraws a rectangle (with no fill)\nclearRect()\nClears specified pixels within a rectangle\nPath Methods\nMethod\nDescription\nbeginPath()\nBegins a new path or resets the current path\nclosePath()\nAdds a line to the path from the current point to the start\nisPointInPath()\nReturns true if the specified point is in the current path\nmoveTo()\nMoves the path to a point in the canvas (without drawing)\nlineTo()\nAdds a line to the the path\nfill()\nFills the current path\nrect()\nAdds a rectangle to the path\nstroke()\nDraws the current path\nCircles and Curves\nbezierCurveTo()\nAdds a cubic B\u00e9zier curve to the path\narc()\nAdds an arc/curve (circle, or parts of a circle) to the path\narcTo()\nAdds an arc/curve between two tangents to the path\nquadraticCurveTo()\nAdds a quadratic B\u00e9zier curve to the path\nText\nMethod/Prop\nDescription\ndirection\nSets or returns the direction used to draw text\nfillText()\nDraws \"filled\" text on the canvas\nfont\nSets or returns the font properties for text content\nmeasureText()\nReturns an object that contains the width of the specified text\nstrokeText()\nDraws text on the canvas\ntextAlign\nSets or returns the alignment for text content\ntextBaseline\nSets or returns the text baseline used when drawing text\nColors, Styles, and Shadows\nMethod/Property\nDescription\naddColorStop()\nSpecifies the colors and stop positions in a gradient object\ncreateLinearGradient()\nCreates a linear gradient (to use on canvas content)\ncreatePattern()\nRepeats a specified element in the specified direction\ncreateRadialGradient()\nCreates a radial/circular gradient (to use on canvas content)\nfillStyle\nSets or returns the color, gradient, or pattern used to fill the drawing\nlineCap\nSets or returns the style of the end caps for a line\nlineJoin\nSets or returns the type of corner created, when two lines meet\nlineWidth\nSets or returns the current line width\nmiterLimit\nSets or returns the maximum miter length\nshadowBlur\nSets or returns the blur level for shadows\nshadowColor\nSets or returns the color to use for shadows\nshadowOffsetX\nSets or returns the horizontal distance of the shadow from the shape\nshadowOffsetY\nSets or returns the vertical distance of the shadow from the shape\nstrokeStyle\nSets or returns the color, gradient, or pattern used for strokes\nTransformations\nMethod\nDescription\nscale()\nScales the current drawing bigger or smaller\nrotate()\nRotates the current drawing\ntranslate()\nRemaps the (0,0) position on the canvas\ntransform()\nReplaces the current transformation matrix for the drawing\nsetTransform()\nResets the current transform to the identity matrix. Then runs\ntransform()\nImage Drawing\nMethod\nDescription\ndrawImage()\nDraws an image, canvas, or video onto the canvas\nThe ImageData Object / Pixel Manipulation\nMethod/Property\nDescription\ncreateImageData()\nCreates a new, blank ImageData object\ngetImageData()\nReturns an ImageData object that copies the pixel data for the specified \n    rectangle on a canvas\nImageData.data\nReturns an object that contains image data of a specified ImageData \n    object\nImageData.height\nReturns the height of an ImageData object\nImageData.width\nReturns the width of an ImageData object\nputImageData()\nPuts the image data (from a specified ImageData object) back onto the \n    canvas\nCompositing\nProperty\nDescription\nglobalAlpha\nSets or returns the current alpha or transparency value of the drawing\nglobalCompositeOperation\nSets or returns how a new image are drawn onto an existing image\nOther Methods\nMethod\nDescription\nclip()\nClips a region of any shape and size from the original canvas\nsave()\nSaves the state of the current drawing context and all its attributes\nrestore()\nRestores the \ncreateEvent()\ngetContext()\ntoDataURL()\nStandard Properties and Events\nThe canvas object also supports the standard\nproperties\nand\nevents\n.\nRelated Pages\nCanvas tutorial:\nCanvas Tutorial\nHTML tutorial:\nHTML5 Canvas\nHTML reference:\nHTML <canvas> tag\nBrowser Support\nThe\n<canvas>\nelement is an HTML5 standard (2014).\nCanvas API\nis supported in all modern browsers:\nChrome\nEdge\nFirefox\nSafari\nOpera\nIE\nYes\nYes\nYes\nYes\nYes\n9-11\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 3,
      "code": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>",
      "language": "html",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillRect(20, 20, 150, 100);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 6,
      "code": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 7,
      "code": "const myCanvas = document.createElement(\"canvas\");\ndocument.body.appendChild(myCanvas);\nconst ctx = myCanvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 8,
      "code": "const canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();",
      "language": "javascript",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise 1",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your html code here",
      "solution": "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>"
    },
    {
      "title": "Practice Exercise 2",
      "description": "Write code that implements similar functionality.",
      "difficulty": "easy",
      "starter_code": "# Write your javascript code here",
      "solution": "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");"
    }
  ],
  "related_topics": [
    {
      "id": "706af46c-5157-4406-89e8-227d06e8b185",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "24084767-bcb6-4d59-9674-c9c5e71ca62d",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "fec1ebca-deca-439b-a041-54bee0601402",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is The rectangle?",
      "options": [
        "150 pixel wide and 100 pixels high",
        "None of the above.",
        "to:\nBegin a Path - beginPath()\nMove to a Point - moveTo()\nDraw in the Path - lineTo()\nDraw the Path - stroke()\nExample\nconst canvas = document",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of The rectangle is '150 pixel wide and 100 pixels high'."
    },
    {
      "question": "What is Paths\nThe common way to draw on the canvas?",
      "options": [
        "to:\nBegin a Path - beginPath()\nMove to a Point - moveTo()\nDraw in the Path - lineTo()\nDraw the Path - stroke()\nExample\nconst canvas = document",
        "150 pixel wide and 100 pixels high",
        "None of the above.",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of Paths\nThe common way to draw on the canvas is 'to:\nBegin a Path - beginPath()\nMove to a Point - moveTo()\nDraw in the Path - lineTo()\nDraw the Path - stroke()\nExample\nconst canvas = document'."
    }
  ],
  "summary": "This tutorial covers HTMLCanvasReference concepts and techniques. You'll learn how to use HTMLCanvasReference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of HTMLCanvasReference and how to apply it in your projects."
}