{
  "id": "6c40d629-63d0-4f88-bea6-36833094aa01",
  "title": "HTMLWeb Workers API",
  "slug": "htmlweb-workers-api",
  "metadata": {
    "description": "Learn about HTMLWeb Workers API with clear explanations and practical examples.",
    "keywords": [
      "worker",
      "workers",
      "html",
      "file",
      "page",
      "support",
      "object",
      "event",
      "script",
      "browser"
    ],
    "difficulty": "intermediate",
    "prerequisites": [
      "Html Basics"
    ],
    "estimated_time": 5,
    "category": "LearnHTML",
    "subcategory": "HTML Web Workers"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "HTML\nWeb Workers API",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "HTML\nWeb Workers API\n\nA web worker is an external JavaScript file that runs in the background",
      "content": ", without affecting the performance of the page.\nWhat is a Web Worker?\nWhen executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\nA web worker is an external JavaScript file that runs in the background, independently \nof other scripts, without affecting the performance of the page. You can continue to do whatever you want: \nclicking, selecting things, etc., while the web worker runs in the background.\nWeb workers are useful for heavy code that can't be run on the main thread, \nwithout causing long tasks that make the page unresponsive.\nBrowser Support\nThe numbers in the table specify the first browser version that fully support \nthe Web Workers API.\nAPI\nWeb Workers\n4.0\n10.0\n3.5\n4.0\n11.5\nWeb Workers API Example\nThe example below creates a simple web worker that count numbers in the background:\nExample\nCount numbers:\nStart Worker\nStop Worker\n\nNote:\nNormally web workers are not used for such simple scripts, but for more CPU intensive tasks!\nCheck Web Worker API Support\nBefore using web worker, we can quickly check browser support:\nExample\nTest browser support:\n<script>\nconst x = document.getElementById(\"result\");\nif(typeof(Worker) !== \"undefined\") {\nx.innerHTML = \"Your browser \n  support Web Workers!\";\n} else {\nx.innerHTML = \"Sorry, your \n  browser does not support Web Workers.\";\n}\n</script>\n\nCreate a .js Web Worker File\nNow, let's create a web worker in an external JavaScript file.\nHere we create a script that counts. The script is stored in the \"demo_workers.js\" file:\nvar i = 0;\nfunction timedCount()\n{\ni = i + 1;\npostMessage(i);\nsetTimeout(\"timedCount()\",500);\n}\ntimedCount();\nNote:\nThe important part of the code above is the\npostMessage()\nmethod - which is used to post messages back to the HTML page.\nCreate a Web Worker Object\nOnce we have created the .js web worker file, we can call it from an HTML page.\nThe following lines checks if a worker (w) already exists, if not - it creates a new web worker object and \npoints to the .js file: \n\"demo_workers.js\":\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nThen we can SEND and RETRIEVE messages from the web worker.",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Data is sent between web workers and the main thread via a system of messages",
      "content": "- both sides send their messages using the\npostMessage()\nmethod, and respond to messages via the\nonmessage\nevent handler.\nAdd an\nonmessage\nevent listener to the web worker \nobject.\nw.onmessage = function(event){\ndocument.getElementById(\"result\").innerHTML = event.data;\n};\nWhen the web worker in the .js posts a message, the code within the event listener is executed. The data \nfrom the web worker is stored in\nevent.data\n.\nTerminate a Web Worker\nWhen a web worker object is created, it will continue to listen for messages until it is terminated.\nTo terminate a web worker object, and free browser/computer resources, use the\nterminate()\nmethod:\nw.terminate();\nReuse the Web Worker\nIf you set the web worker variable to undefined, after it has been terminated, \nyou can reuse the worker/code:\nw = undefined;\nFull Web Worker Example\nWe have already seen the Web Worker code in the .js file.\nBelow is the full code for the HTML page:\nExample\n<!DOCTYPE html>\n<html>\n<body>\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nlet w;\nfunction startWorker()\n{\nconst x = document.getElementById(\"result\");\nif (typeof(Worker) !== \"undefined\")\n{\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\nx.innerHTML = event.data;\n};\n}\nelse\n{\nx.innerHTML = \"Sorry! No Web Worker support.\";\n}\n}\nfunction stopWorker()\n{\nw.terminate();\nw = undefined;\n}\n</script>\n</body>\n</html>\n\nWeb Workers and the DOM\nSince web workers are in external .js files, they do not have access to the following JavaScript objects:\nThe window object\nThe document object\nThe parent object\n\n\u2605\n+1",
      "order": 3,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 4,
      "code": "<script>\nconst x = document.getElementById(\"result\");\nif(typeof(Worker) !== \"undefined\") {\nx.innerHTML = \"Your browser \n  support Web Workers!\";\n} else {\nx.innerHTML = \"Sorry, your \n  browser does not support Web Workers.\";\n}\n</script>",
      "language": "javascript",
      "explanation": "Example of example"
    },
    {
      "type": "code_example",
      "title": "Example",
      "content": "",
      "order": 5,
      "code": "<!DOCTYPE html>\n<html>\n<body>\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nlet w;\nfunction startWorker()\n{\nconst x = document.getElementById(\"result\");\nif (typeof(Worker) !== \"undefined\")\n{\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\nx.innerHTML = event.data;\n};\n}\nelse\n{\nx.innerHTML = \"Sorry! No Web Worker support.\";\n}\n}\nfunction stopWorker()\n{\nw.terminate();\nw = undefined;\n}\n</script>\n</body>\n</html>",
      "language": "html",
      "explanation": "Example of example"
    }
  ],
  "practice_exercises": [
    {
      "title": "Complete the Code 1",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<script>\nconst x = document.getElementById(\"result\");\nif(typeof(Worker) !== \"undefined\") {\nx.innerHTML = \"Your browser \n# TODO: Complete this line\n} else {\nx.innerHTML = \"Sorry, your \n  browser does not support Web Workers.\";\n}\n</script>",
      "solution": "<script>\nconst x = document.getElementById(\"result\");\nif(typeof(Worker) !== \"undefined\") {\nx.innerHTML = \"Your browser \n  support Web Workers!\";\n} else {\nx.innerHTML = \"Sorry, your \n  browser does not support Web Workers.\";\n}\n</script>"
    },
    {
      "title": "Complete the Code 2",
      "description": "Fill in the missing line to make this code work.",
      "difficulty": "medium",
      "starter_code": "<!DOCTYPE html>\n<html>\n<body>\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nlet w;\nfunction startWorker()\n{\nconst x = document.getElementById(\"result\");\n# TODO: Complete this line\n{\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\nx.innerHTML = event.data;\n};\n}\nelse\n{\nx.innerHTML = \"Sorry! No Web Worker support.\";\n}\n}\nfunction stopWorker()\n{\nw.terminate();\nw = undefined;\n}\n</script>\n</body>\n</html>",
      "solution": "<!DOCTYPE html>\n<html>\n<body>\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nlet w;\nfunction startWorker()\n{\nconst x = document.getElementById(\"result\");\nif (typeof(Worker) !== \"undefined\")\n{\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\nx.innerHTML = event.data;\n};\n}\nelse\n{\nx.innerHTML = \"Sorry! No Web Worker support.\";\n}\n}\nfunction stopWorker()\n{\nw.terminate();\nw = undefined;\n}\n</script>\n</body>\n</html>"
    }
  ],
  "related_topics": [
    {
      "id": "490c44ec-8b2e-4920-9e42-65a60af1c5c3",
      "title": "Html Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "34d90f4a-a3fc-44ff-a0c7-12e13c8cb3bb",
      "title": "Html Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "c4b18759-e27f-4b9c-9fd2-33e65528c174",
      "title": "Html Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is HTML\nWeb Workers API\n\nA web worker?",
      "options": [
        "an external JavaScript file that runs in the background",
        "None of the above.",
        "a Web Worker",
        "None of the above."
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of HTML\nWeb Workers API\n\nA web worker is 'an external JavaScript file that runs in the background'."
    },
    {
      "question": "What is What?",
      "options": [
        "a Web Worker",
        "None of the above.",
        "None of the above.",
        "an external JavaScript file that runs in the background"
      ],
      "correct_answer": 0,
      "explanation": "The correct definition of What is 'a Web Worker'."
    }
  ],
  "summary": "This tutorial covers HTMLWeb Workers API concepts and techniques. You'll learn how to use HTMLWeb Workers API effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of HTMLWeb Workers API and how to apply it in your projects."
}