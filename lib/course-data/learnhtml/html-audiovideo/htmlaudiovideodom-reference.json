{
  "id": "81dc11f3-3134-402c-8695-10fc9b1a7381",
  "title": "HTMLAudio/VideoDOM Reference",
  "slug": "htmlaudiovideodom-reference",
  "metadata": {
    "description": "Learn about HTMLAudio/VideoDOM Reference with clear explanations and practical examples.",
    "keywords": [
      "audio",
      "video",
      "returns",
      "fires",
      "sets",
      "current",
      "browser",
      "whether",
      "object",
      "representing"
    ],
    "difficulty": "beginner",
    "prerequisites": [
      "C Basics"
    ],
    "estimated_time": 5,
    "category": "LearnHTML",
    "subcategory": "HTML Audio/Video"
  },
  "content_sections": [
    {
      "type": "introduction",
      "title": "Introduction",
      "content": "HTML\nAudio/Video\nDOM Reference",
      "order": 1,
      "code": null,
      "language": null,
      "explanation": null
    },
    {
      "type": "concept",
      "title": "Details",
      "content": "HTML Audio and Video DOM Reference\nThe HTML5 DOM has methods, properties, and events for the\n<audio>\nand\n<video>\nelements.\nHTML Audio/Video Methods\nMethod\nDescription\naddTextTrack()\nAdds a new text track to the audio/video\ncanPlayType()\nChecks if the browser can play the specified audio/video type\nload()\nRe-loads the audio/video element\nplay()\nStarts playing the audio/video\npause()\nPauses the currently playing audio/video\nHTML Audio/Video Properties\nProperty\nDescription\naudioTracks\nReturns an AudioTrackList object representing available audio tracks\nautoplay\nSets or returns whether the audio/video should start playing as soon as it is \nloaded\nbuffered\nReturns a TimeRanges object representing the buffered parts of the \naudio/video\ncontroller\nReturns the MediaController object representing the current media controller \nof the audio/video\ncontrols\nSets or returns whether the audio/video should display controls (like play/pause \netc.)\ncrossOrigin\nSets or returns the CORS settings of the audio/video\ncurrentSrc\nReturns the URL of the current audio/video\ncurrentTime\nSets or returns the current playback position in the audio/video (in seconds)\ndefaultMuted\nSets or returns whether the audio/video should be muted by default\ndefaultPlaybackRate\nSets or returns the default speed of the audio/video playback\nduration\nReturns the length of the current audio/video (in seconds)\nended\nReturns whether the playback of the audio/video has ended or not\nerror\nReturns a MediaError object representing the error state of the audio/video\nloop\nSets or returns whether the audio/video should start over again when finished\nmediaGroup\nSets or returns the group the audio/video belongs to (used to link \nmultiple audio/video elements)\nmuted\nSets or returns whether the audio/video is muted or not\nnetworkState\nReturns the current network state of the audio/video\npaused\nReturns whether the audio/video is paused or not\nplaybackRate\nSets or returns the speed of the audio/video playback\nplayed\nReturns a TimeRanges object representing the played parts of the audio/video\npreload\nSets or returns whether the audio/video should be loaded when the page loads\nreadyState\nReturns the current ready state of the audio/video\nseekable\nReturns a TimeRanges object representing the seekable parts of the \naudio/video\nseeking\nReturns whether the user is currently seeking in the audio/video\nsrc\nSets or returns the current source of the audio/video element\nstartDate\nReturns a\u00a0Date object representing the current time offset\ntextTracks\nReturns a TextTrackList object representing the available text tracks\nvideoTracks\nDeprecated. Do not use it.\nvolume\nSets or returns the volume of the audio/video\nHTML Audio/Video Events\nEvent\nDescription\nabort\nFires when the loading of an audio/video is aborted\ncanplay\nFires when the browser can start playing the audio/video\ncanplaythrough\nFires when the browser can play through the audio/video without stopping for buffering\ndurationchange\nFires when the duration of the audio/video is changed\nemptied\nFires when the current playlist is empty\nended\nFires when the current playlist is ended\nerror\nFires when an error occurred during the loading of an audio/video\nloadeddata\nFires when the browser has loaded the current frame of the audio/video\nloadedmetadata\nFires when the browser has loaded meta data for the audio/video\nloadstart\nFires when the browser starts looking for the audio/video\npause\nFires when the audio/video has been paused\nplay\nFires when the audio/video has been started or is no longer paused\nplaying\nFires when the audio/video is playing after having been paused or stopped for buffering\nprogress\nFires when the browser is downloading the audio/video\nratechange\nFires when the playing speed of the audio/video is changed\nseeked\nFires when the user is finished moving/skipping to a new position in the audio/video\nseeking\nFires when the user starts moving/skipping to a new position in the audio/video\nstalled\nFires when the browser is trying to get media data, but data is not \navailable\nsuspend\nFires when the browser is intentionally not getting media data\ntimeupdate\nFires when the current playback position has changed\nvolumechange\nFires when the volume has been changed\nwaiting\nFires when the video stops because it needs to buffer the\n\n\u2605\n+1",
      "order": 2,
      "code": null,
      "language": null,
      "explanation": null
    }
  ],
  "practice_exercises": [
    {
      "title": "Practice Exercise",
      "description": "Create an example that applies the concepts from this tutorial.",
      "difficulty": "medium",
      "starter_code": "# Add your code here",
      "solution": "# Example solution would go here"
    }
  ],
  "related_topics": [
    {
      "id": "e5163ba8-0b87-4d06-a32b-438f57520df5",
      "title": "C Best Practices",
      "relationship": "related_topic"
    },
    {
      "id": "b36b944c-e180-476f-805a-f4c5b26f19ee",
      "title": "C Common Pitfalls and How to Avoid Them",
      "relationship": "suggested_reading"
    },
    {
      "id": "64057b4f-4d73-403a-8964-9da7238be454",
      "title": "C Fundamentals",
      "relationship": "prerequisite"
    }
  ],
  "quiz": [
    {
      "question": "What is video should start playing as soon as it?",
      "options": [
        "None of the above.",
        "None of the above.",
        "muted or not\nnetworkState\nReturns the current network state of the audio/video\npaused\nReturns whether the audio/video is paused or not\nplaybackRate\nSets or returns the speed of the audio/video playback\nplayed\nReturns a TimeRanges object representing the played parts of the audio/video\npreload\nSets or returns whether the audio/video should be loaded when the page loads\nreadyState\nReturns the current ready state of the audio/video\nseekable\nReturns a TimeRanges object representing the seekable parts of the \naudio/video\nseeking\nReturns whether the user is currently seeking in the audio/video\nsrc\nSets or returns the current source of the audio/video element\nstartDate\nReturns a\u00a0Date object representing the current time offset\ntextTracks\nReturns a TextTrackList object representing the available text tracks\nvideoTracks\nDeprecated",
        "loaded\nbuffered\nReturns a TimeRanges object representing the buffered parts of the \naudio/video\ncontroller\nReturns the MediaController object representing the current media controller \nof the audio/video\ncontrols\nSets or returns whether the audio/video should display controls (like play/pause \netc"
      ],
      "correct_answer": 3,
      "explanation": "The correct definition of video should start playing as soon as it is 'loaded\nbuffered\nReturns a TimeRanges object representing the buffered parts of the \naudio/video\ncontroller\nReturns the MediaController object representing the current media controller \nof the audio/video\ncontrols\nSets or returns whether the audio/video should display controls (like play/pause \netc'."
    },
    {
      "question": "What is video?",
      "options": [
        "loaded\nbuffered\nReturns a TimeRanges object representing the buffered parts of the \naudio/video\ncontroller\nReturns the MediaController object representing the current media controller \nof the audio/video\ncontrols\nSets or returns whether the audio/video should display controls (like play/pause \netc",
        "None of the above.",
        "muted or not\nnetworkState\nReturns the current network state of the audio/video\npaused\nReturns whether the audio/video is paused or not\nplaybackRate\nSets or returns the speed of the audio/video playback\nplayed\nReturns a TimeRanges object representing the played parts of the audio/video\npreload\nSets or returns whether the audio/video should be loaded when the page loads\nreadyState\nReturns the current ready state of the audio/video\nseekable\nReturns a TimeRanges object representing the seekable parts of the \naudio/video\nseeking\nReturns whether the user is currently seeking in the audio/video\nsrc\nSets or returns the current source of the audio/video element\nstartDate\nReturns a\u00a0Date object representing the current time offset\ntextTracks\nReturns a TextTrackList object representing the available text tracks\nvideoTracks\nDeprecated",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "The correct definition of video is 'muted or not\nnetworkState\nReturns the current network state of the audio/video\npaused\nReturns whether the audio/video is paused or not\nplaybackRate\nSets or returns the speed of the audio/video playback\nplayed\nReturns a TimeRanges object representing the played parts of the audio/video\npreload\nSets or returns whether the audio/video should be loaded when the page loads\nreadyState\nReturns the current ready state of the audio/video\nseekable\nReturns a TimeRanges object representing the seekable parts of the \naudio/video\nseeking\nReturns whether the user is currently seeking in the audio/video\nsrc\nSets or returns the current source of the audio/video element\nstartDate\nReturns a\u00a0Date object representing the current time offset\ntextTracks\nReturns a TextTrackList object representing the available text tracks\nvideoTracks\nDeprecated'."
    }
  ],
  "summary": "This tutorial covers HTMLAudio/VideoDOM Reference concepts and techniques. You'll learn how to use HTMLAudio/VideoDOM Reference effectively, including key principles, common patterns, and practical examples. By the end of this tutorial, you'll have a solid understanding of HTMLAudio/VideoDOM Reference and how to apply it in your projects."
}