"use client";

import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import {
  Search,
  ShieldAlert,
  AlertTriangle,
  CheckCircle,
  ServerCrash,
  Database,
  Shield,
  Server,
  FileWarning,
  RefreshCw,
  Download,
  Filter,
  ExternalLink
} from "lucide-react";

interface VulnerabilityProps {
  onClose: () => void;
}

export function VulnerabilityScanner({ onClose }: VulnerabilityProps) {
  const [scanState, setScanState] = useState<"idle" | "scanning" | "complete">("idle");
  const [scanProgress, setScanProgress] = useState(0);
  const [targetInput, setTargetInput] = useState("example.com");
  const [scanFilter, setScanFilter] = useState("all");
  
  // Mock vulnerability data
  const vulnerabilities = [
    {
      id: "CVE-2023-3456",
      name: "SQL Injection Vulnerability",
      severity: "high",
      description: "Input validation vulnerability in login.php allowing SQL injection attacks",
      affected: "Web Application - Authentication Module",
      cvss: 8.5,
      detected: true,
      path: "/admin/login.php"
    },
    {
      id: "CVE-2023-5678",
      name: "Cross-Site Scripting (XSS)",
      severity: "medium",
      description: "Reflected XSS vulnerability in search function",
      affected: "Web Application - Search Component",
      cvss: 6.4,
      detected: true,
      path: "/search.php?q="
    },
    {
      id: "CVE-2023-7890",
      name: "Open SSL Heartbleed",
      severity: "critical",
      description: "Memory leak in OpenSSL allowing unauthorized access to protected memory",
      affected: "OpenSSL 1.0.1 - 1.0.1f",
      cvss: 9.8,
      detected: false,
      path: "N/A"
    },
    {
      id: "CVE-2023-1234",
      name: "Default Admin Credentials",
      severity: "high",
      description: "Default administrative credentials are in use",
      affected: "Admin Console",
      cvss: 7.5,
      detected: true,
      path: "/admin"
    },
    {
      id: "CVE-2023-5432",
      name: "Outdated WordPress Version",
      severity: "medium",
      description: "Running an outdated version of WordPress with known vulnerabilities",
      affected: "WordPress Core (v5.8.2)",
      cvss: 5.9,
      detected: true,
      path: "/"
    },
    {
      id: "CVE-2023-9876",
      name: "Missing HTTP Security Headers",
      severity: "low",
      description: "Key security headers are missing from HTTP responses",
      affected: "Web Server Configuration",
      cvss: 3.7,
      detected: true,
      path: "All pages"
    },
    {
      id: "CVE-2023-6543",
      name: "Insecure Cookie Configuration",
      severity: "low",
      description: "Cookies set without secure or httpOnly flags",
      affected: "Session Management",
      cvss: 3.2,
      detected: true,
      path: "All pages"
    }
  ];
  
  const startScan = () => {
    setScanState("scanning");
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        const newProgress = prev + Math.random() * 5;
        
        if (newProgress >= 100) {
          clearInterval(interval);
          setTimeout(() => {
            setScanState("complete");
          }, 500);
          return 100;
        }
        
        return newProgress;
      });
    }, 300);
  };
  
  const resetScan = () => {
    setScanState("idle");
    setScanProgress(0);
  };
  
  const getSeverityColor = (severity: string) => {
    switch(severity) {
      case "critical":
        return "bg-red-100 border-red-300 text-red-800";
      case "high":
        return "bg-orange-100 border-orange-300 text-orange-800";
      case "medium":
        return "bg-amber-100 border-amber-300 text-amber-800";
      case "low":
        return "bg-blue-100 border-blue-300 text-blue-800";
      default:
        return "bg-slate-100 border-slate-300 text-slate-800";
    }
  };
  
  const getSeverityIcon = (severity: string) => {
    switch(severity) {
      case "critical":
        return <ServerCrash className="h-4 w-4 text-red-500" />;
      case "high":
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case "medium":
        return <ShieldAlert className="h-4 w-4 text-amber-500" />;
      case "low":
        return <FileWarning className="h-4 w-4 text-blue-500" />;
      default:
        return <Shield className="h-4 w-4 text-slate-500" />;
    }
  };
  
  const getFilteredVulnerabilities = () => {
    if (scanFilter === "all") return vulnerabilities.filter(v => v.detected);
    return vulnerabilities.filter(v => v.severity === scanFilter && v.detected);
  };
  
  const getVulnerabilityStats = () => {
    const detected = vulnerabilities.filter(v => v.detected);
    const critical = detected.filter(v => v.severity === "critical").length;
    const high = detected.filter(v => v.severity === "high").length;
    const medium = detected.filter(v => v.severity === "medium").length;
    const low = detected.filter(v => v.severity === "low").length;
    
    return { total: detected.length, critical, high, medium, low };
  };
  
  return (
    <div className="bg-white rounded-lg border shadow-lg max-w-5xl w-full mx-auto overflow-hidden">
      <div className="flex items-center justify-between p-4 border-b bg-slate-50">
        <div className="flex items-center gap-2">
          <Shield className="h-5 w-5 text-blue-500" />
          <h2 className="text-lg font-semibold">Vulnerability Scanner</h2>
        </div>
        
        <div className="flex items-center gap-2">
          <Badge 
            variant="outline" 
            className={scanState === "scanning" ? "bg-amber-100 text-amber-800" : 
                      scanState === "complete" ? "bg-green-100 text-green-800" : 
                      "bg-slate-100 text-slate-800"}
          >
            {scanState === "scanning" ? "Scanning..." : 
             scanState === "complete" ? "Scan Complete" : "Ready"}
          </Badge>
          <Button variant="ghost" size="sm" onClick={onClose}>
            Close
          </Button>
        </div>
      </div>
      
      <div className="p-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          {/* Scan Configuration */}
          <div className="lg:col-span-2">
            <Card className="mb-4">
              <CardHeader className="p-4 pb-2">
                <CardTitle className="text-lg">Target Configuration</CardTitle>
              </CardHeader>
              <CardContent className="p-4 pt-0">
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium text-slate-700 mb-1 block">Target URL or IP</label>
                    <div className="flex gap-2">
                      <Input 
                        placeholder="Enter target URL or IP address" 
                        value={targetInput}
                        onChange={(e) => setTargetInput(e.target.value)}
                        disabled={scanState === "scanning"}
                        className="flex-1"
                      />
                      {scanState === "idle" ? (
                        <Button 
                          className="whitespace-nowrap" 
                          onClick={startScan}
                        >
                          <Search className="mr-2 h-4 w-4" />
                          Start Scan
                        </Button>
                      ) : scanState === "scanning" ? (
                        <Button 
                          variant="outline" 
                          className="whitespace-nowrap"
                          disabled
                        >
                          <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                          Scanning...
                        </Button>
                      ) : (
                        <Button 
                          variant="outline" 
                          className="whitespace-nowrap"
                          onClick={resetScan}
                        >
                          <RefreshCw className="mr-2 h-4 w-4" />
                          New Scan
                        </Button>
                      )}
                    </div>
                  </div>
                  
                  {scanState === "scanning" && (
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm text-slate-500">Scan progress</span>
                        <span className="text-sm font-medium">{Math.round(scanProgress)}%</span>
                      </div>
                      <Progress value={scanProgress} className="h-2" />
                    </div>
                  )}
                  
                  {scanState === "complete" && (
                    <div className="bg-slate-50 rounded-lg p-4 border">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <CheckCircle className="h-5 w-5 text-green-500" />
                          <span className="font-medium">Scan completed successfully</span>
                        </div>
                        <Badge variant="outline" className="bg-green-50 text-green-700">
                          {new Date().toLocaleString()}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-4 gap-2 mt-4">
                        <div className="bg-white rounded p-3 border text-center">
                          <div className="text-xl font-bold">{getVulnerabilityStats().total}</div>
                          <div className="text-xs text-slate-500">Total Issues</div>
                        </div>
                        <div className="bg-white rounded p-3 border text-center">
                          <div className="text-xl font-bold text-red-600">{getVulnerabilityStats().critical + getVulnerabilityStats().high}</div>
                          <div className="text-xs text-slate-500">Critical/High</div>
                        </div>
                        <div className="bg-white rounded p-3 border text-center">
                          <div className="text-xl font-bold text-amber-600">{getVulnerabilityStats().medium}</div>
                          <div className="text-xs text-slate-500">Medium</div>
                        </div>
                        <div className="bg-white rounded p-3 border text-center">
                          <div className="text-xl font-bold text-blue-600">{getVulnerabilityStats().low}</div>
                          <div className="text-xs text-slate-500">Low</div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
            
            {scanState === "complete" && (
              <Card>
                <CardHeader className="p-4 pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">Detected Vulnerabilities</CardTitle>
                    <div className="flex items-center gap-2">
                      <div className="text-sm text-slate-500">Filter:</div>
                      <select 
                        className="text-sm border rounded p-1" 
                        value={scanFilter}
                        onChange={(e) => setScanFilter(e.target.value)}
                      >
                        <option value="all">All</option>
                        <option value="critical">Critical</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                      </select>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-4 pt-2">
                  <div className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
                    {getFilteredVulnerabilities().map((vuln) => (
                      <div 
                        key={vuln.id} 
                        className={`border rounded-lg p-3 ${getSeverityColor(vuln.severity)}`}
                      >
                        <div className="flex items-start gap-3">
                          <div className="mt-1">
                            {getSeverityIcon(vuln.severity)}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <h3 className="font-medium">{vuln.name}</h3>
                              <Badge variant="outline" className="bg-white bg-opacity-50">
                                {vuln.id}
                              </Badge>
                            </div>
                            <p className="text-sm mb-2">{vuln.description}</p>
                            <div className="grid grid-cols-2 gap-2 text-xs">
                              <div>
                                <span className="font-medium">Affected:</span> {vuln.affected}
                              </div>
                              <div>
                                <span className="font-medium">CVSS Score:</span> {vuln.cvss}
                              </div>
                              <div>
                                <span className="font-medium">Location:</span> {vuln.path}
                              </div>
                              <div>
                                <a href="#" className="text-blue-600 hover:underline inline-flex items-center gap-1">
                                  <span>View Details</span>
                                  <ExternalLink className="h-3 w-3" />
                                </a>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                    
                    {getFilteredVulnerabilities().length === 0 && (
                      <div className="text-center py-8 text-slate-500">
                        <CheckCircle className="h-10 w-10 mx-auto mb-2 text-green-500" />
                        <p>No {scanFilter !== "all" ? scanFilter : ""} vulnerabilities detected</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
          
          {/* Scan Options and Information */}
          <div>
            <Card className="mb-4">
              <CardHeader className="p-4 pb-2">
                <CardTitle className="text-lg">Scan Options</CardTitle>
              </CardHeader>
              <CardContent className="p-4 pt-0">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <label className="text-sm">Scan Depth</label>
                    <select className="text-sm border rounded p-1" disabled={scanState === "scanning"}>
                      <option>Comprehensive</option>
                      <option>Standard</option>
                      <option>Quick</option>
                    </select>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <label className="text-sm">Include Port Scan</label>
                    <input type="checkbox" defaultChecked disabled={scanState === "scanning"} />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <label className="text-sm">Authentication Scan</label>
                    <input type="checkbox" defaultChecked disabled={scanState === "scanning"} />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <label className="text-sm">Web Application Scan</label>
                    <input type="checkbox" defaultChecked disabled={scanState === "scanning"} />
                  </div>
                  
                  <Separator />
                  
                  <div className="flex items-center justify-between">
                    <label className="text-sm">Estimated Time</label>
                    <span className="text-sm font-medium">5-10 minutes</span>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="p-4 pb-2">
                <CardTitle className="text-lg">Common Vulnerabilities</CardTitle>
              </CardHeader>
              <CardContent className="p-4 pt-0">
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-red-500" />
                    <span>SQL Injection</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-amber-500" />
                    <span>Cross-Site Scripting (XSS)</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-amber-500" />
                    <span>Broken Authentication</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-blue-500" />
                    <span>Insecure Deserialization</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-blue-500" />
                    <span>Security Misconfiguration</span>
                  </div>
                </div>
                
                <Separator className="my-3" />
                
                {scanState === "complete" && (
                  <div className="flex justify-between mt-4">
                    <Button variant="outline" size="sm" className="gap-1">
                      <Download className="h-4 w-4" />
                      Export Report
                    </Button>
                    <Button variant="outline" size="sm" className="gap-1">
                      <RefreshCw className="h-4 w-4" />
                      Schedule Scan
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      
      <div className="p-4 border-t bg-slate-50">
        <div className="flex justify-between items-center">
          <div className="text-sm text-slate-500">
            Advanced vulnerability scanning with industry-standard detection techniques.
          </div>
        </div>
      </div>
    </div>
  );
} 